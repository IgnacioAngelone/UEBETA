;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: bf8bbfecfe4342d99b60fac52431f37c
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(32,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  144
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  148
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  152
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  160
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint ReflectionDownsampleFactor;              ; Offset:  272
;       uint2 ReflectionTracingViewSize;              ; Offset:  280
;       uint2 ReflectionTracingBufferSize;            ; Offset:  288
;       float MaxRayIntensity;                        ; Offset:  296
;       float ReflectionSmoothBias;                   ; Offset:  300
;       uint ReflectionPass;                          ; Offset:  304
;       uint UseJitter;                               ; Offset:  308
;       uint UseHighResSurface;                       ; Offset:  312
;       float NearFieldMaxTraceDistance;              ; Offset:  320
;       float CardTraceEndDistanceFromCamera;         ; Offset:  484
;       float MaxTraceDistance;                       ; Offset:  504
;       float MaxMeshSDFTraceDistance;                ; Offset:  508
;       float SurfaceBias;                            ; Offset:  512
;       int HeightfieldMaxTracingSteps;               ; Offset:  528
;       float ReprojectionRadiusScale;                ; Offset:  640
;       float InvClipmapFadeSize;                     ; Offset:  652
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  656
;       uint RadianceProbeClipmapResolution;          ; Offset:  664
;       uint NumRadianceProbeClipmaps;                ; Offset:  668
;       uint RadianceProbeResolution;                 ; Offset:  672
;       uint FinalProbeResolution;                    ; Offset:  676
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  680
;       uint CalculateIrradiance;                     ; Offset:  684
;       uint IrradianceProbeResolution;               ; Offset:  688
;       uint OcclusionProbeResolution;                ; Offset:  692
;       float4 RadianceProbeSettings[6];              ; Offset:  752
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  848
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  944
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1040
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1048
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1056
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1064
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1068
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1072
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1076
;       float4 HZBUvFactorAndInvFactor;               ; Offset: 1120
;       float2 PrevSceneColorBilinearUVMin;           ; Offset: 1136
;       float2 PrevSceneColorBilinearUVMax;           ; Offset: 1144
;       float4 PrevScreenPositionScaleBias;           ; Offset: 1152
;       float4 PrevScreenPositionScaleBiasForDepth;   ; Offset: 1168
;       float PrevSceneColorPreExposureCorrection;    ; Offset: 1184
;       float2 HZBBaseTexelSize;                      ; Offset: 1192
;       float4 HZBUVToScreenUVScaleBias;              ; Offset: 1200
;       float RelativeDepthThickness;                 ; Offset: 1296
;       float SampleSceneColorNormalTreshold;         ; Offset: 1300
;       float DistantScreenTraceSlopeCompareTolerance;; Offset: 1312
;       float DistantScreenTraceMaxTraceDistance;     ; Offset: 1316
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1320
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for ProbeWorldOffset
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S1   s3,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S2             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S3             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S4             s2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T1             t1     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T2             t2     1
; GBufferVelocityTexture            texture     f32          2d      T3             t3     1
; RadianceProbeIndirectionTexture   texture     u32          3d      T4             t4     1
; RadianceCacheFinalRadianceAtlas   texture     f32          2d      T5             t5     1
; ProbeWorldOffset                  texture  struct         r/o      T6             t6     1
; DownsampledDepth                  texture     f32          2d      T7             t7     1
; RayBuffer                         texture     f32          2d      T8             t8     1
; RayTraceDistance                  texture     u32          2d      T9             t9     1
; CompactedTraceTexelAllocator      texture     u32         buf     T10            t10     1
; CompactedTraceTexelData           texture     u32         buf     T11            t11     1
; PrevSceneColorTexture             texture     f32          2d     T12            t12     1
; DistantScreenTraceFurthestHZBTexture   texture     f32          2d     T13            t13     1
; RWTraceHit                            UAV     f32          2d      U0             u0     1
; RWTraceRadiance                       UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, float, <2 x float>, <4 x float>, float, float, float, float }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceVoxelsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 1320 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %32 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %31, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %33 = extractvalue %dx.types.ResRet.i32 %32, 0
  %34 = icmp ult i32 %30, %33
  br i1 %34, label %35, label %2237

; <label>:35                                      ; preds = %0
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %37 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %36, i32 %30, i32 undef)  ; BufferLoad(srv,index,wot)
  %38 = extractvalue %dx.types.ResRet.i32 %37, 0
  %39 = and i32 %38, 65535
  %40 = lshr i32 %38, 16
  %41 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.i32 %41, 0
  %43 = mul i32 %42, %39
  %44 = mul i32 %42, %40
  %45 = uitofp i32 %43 to float
  %46 = uitofp i32 %44 to float
  %47 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.f32 %47, 0
  %49 = extractvalue %dx.types.CBufRet.f32 %47, 1
  %50 = fadd fast float %48, 5.000000e-01
  %51 = fadd fast float %50, %45
  %52 = fadd fast float %49, 5.000000e-01
  %53 = fadd fast float %52, %46
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = fadd fast float %48, -1.000000e+00
  %58 = fadd fast float %57, %55
  %59 = fadd fast float %49, -1.000000e+00
  %60 = fadd fast float %59, %56
  %61 = call float @dx.op.binary.f32(i32 36, float %51, float %58)  ; FMin(a,b)
  %62 = call float @dx.op.binary.f32(i32 36, float %53, float %60)  ; FMin(a,b)
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 3
  %66 = fmul fast float %64, %61
  %67 = fmul fast float %65, %62
  %68 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %69 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %68, i32 0, i32 %39, i32 %40, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %70 = extractvalue %dx.types.ResRet.f32 %69, 0
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %74 = fsub fast float %66, %73
  %75 = fsub fast float %67, %72
  %76 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %78 = fdiv fast float %74, %76
  %79 = fdiv fast float %75, %77
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = extractvalue %dx.types.CBufRet.f32 %80, 1
  %83 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %99 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %100 = fmul fast float %97, 2.097152e+06
  %101 = fmul fast float %98, 2.097152e+06
  %102 = fmul fast float %99, 2.097152e+06
  %103 = fadd fast float %100, %93
  %104 = fadd fast float %101, %94
  %105 = fadd fast float %102, %95
  %106 = fmul fast float %78, %70
  %107 = fmul fast float %79, %70
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 3
  %110 = bitcast float %109 to i32
  %111 = icmp ne i32 %110, 0
  %112 = select i1 %111, float %78, float %106
  %113 = select i1 %111, float %79, float %107
  %114 = fmul fast float %112, %81
  %115 = call float @dx.op.tertiary.f32(i32 46, float %113, float %85, float %114)  ; FMad(a,b,c)
  %116 = call float @dx.op.tertiary.f32(i32 46, float %70, float %89, float %115)  ; FMad(a,b,c)
  %117 = fadd fast float %103, %116
  %118 = fmul fast float %112, %82
  %119 = call float @dx.op.tertiary.f32(i32 46, float %113, float %86, float %118)  ; FMad(a,b,c)
  %120 = call float @dx.op.tertiary.f32(i32 46, float %70, float %90, float %119)  ; FMad(a,b,c)
  %121 = fadd fast float %104, %120
  %122 = fmul fast float %112, %83
  %123 = call float @dx.op.tertiary.f32(i32 46, float %113, float %87, float %122)  ; FMad(a,b,c)
  %124 = call float @dx.op.tertiary.f32(i32 46, float %70, float %91, float %123)  ; FMad(a,b,c)
  %125 = fadd fast float %105, %124
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 0
  %132 = extractvalue %dx.types.CBufRet.f32 %130, 1
  %133 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 0
  %136 = extractvalue %dx.types.CBufRet.f32 %134, 1
  %137 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %139 = extractvalue %dx.types.CBufRet.f32 %138, 0
  %140 = extractvalue %dx.types.CBufRet.f32 %138, 1
  %141 = extractvalue %dx.types.CBufRet.f32 %138, 2
  %142 = fmul fast float %112, %127
  %143 = call float @dx.op.tertiary.f32(i32 46, float %113, float %131, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %70, float %135, float %143)  ; FMad(a,b,c)
  %145 = fadd fast float %144, %139
  %146 = fsub fast float -0.000000e+00, %145
  %147 = fmul fast float %112, %128
  %148 = call float @dx.op.tertiary.f32(i32 46, float %113, float %132, float %147)  ; FMad(a,b,c)
  %149 = call float @dx.op.tertiary.f32(i32 46, float %70, float %136, float %148)  ; FMad(a,b,c)
  %150 = fadd fast float %149, %140
  %151 = fsub fast float -0.000000e+00, %150
  %152 = fmul fast float %112, %129
  %153 = call float @dx.op.tertiary.f32(i32 46, float %113, float %133, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %70, float %137, float %153)  ; FMad(a,b,c)
  %155 = fadd fast float %154, %141
  %156 = fsub fast float -0.000000e+00, %155
  %157 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %158 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %157, i32 0, i32 %39, i32 %40, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %159 = extractvalue %dx.types.ResRet.f32 %158, 0
  %160 = extractvalue %dx.types.ResRet.f32 %158, 1
  %161 = extractvalue %dx.types.ResRet.f32 %158, 2
  %162 = extractvalue %dx.types.ResRet.f32 %158, 3
  %163 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %164 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %163, i32 0, i32 %39, i32 %40, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %165 = extractvalue %dx.types.ResRet.i32 %164, 0
  %166 = and i32 %165, 32767
  %167 = call float @dx.op.legacyF16ToF32(i32 131, i32 %166)  ; LegacyF16ToF32(value)
  %168 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %169 = extractvalue %dx.types.CBufRet.i32 %168, 2
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 1
  %172 = fmul fast float %171, %159
  %173 = fmul fast float %171, %160
  %174 = fmul fast float %171, %161
  %175 = add i32 %169, 194
  %176 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 %175)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.f32 %176, 3
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 0
  %180 = fmul fast float %179, %177
  %181 = fsub fast float %177, %180
  %182 = extractvalue %dx.types.CBufRet.f32 %176, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %176, 1
  %184 = extractvalue %dx.types.CBufRet.f32 %176, 2
  %185 = fdiv fast float 1.000000e+00, %172
  %186 = fdiv fast float 1.000000e+00, %173
  %187 = fdiv fast float 1.000000e+00, %174
  %188 = fsub fast float %146, %181
  %189 = fadd fast float %188, %182
  %190 = fsub fast float %151, %181
  %191 = fadd fast float %190, %183
  %192 = fsub fast float %156, %181
  %193 = fadd fast float %192, %184
  %194 = fmul fast float %189, %185
  %195 = fmul fast float %191, %186
  %196 = fmul fast float %193, %187
  %197 = fsub fast float %181, %145
  %198 = fadd fast float %197, %182
  %199 = fsub fast float %181, %150
  %200 = fadd fast float %199, %183
  %201 = fsub fast float %181, %155
  %202 = fadd fast float %201, %184
  %203 = fmul fast float %198, %185
  %204 = fmul fast float %200, %186
  %205 = fmul fast float %202, %187
  %206 = call float @dx.op.binary.f32(i32 36, float %194, float %203)  ; FMin(a,b)
  %207 = call float @dx.op.binary.f32(i32 36, float %195, float %204)  ; FMin(a,b)
  %208 = call float @dx.op.binary.f32(i32 36, float %196, float %205)  ; FMin(a,b)
  %209 = call float @dx.op.binary.f32(i32 35, float %194, float %203)  ; FMax(a,b)
  %210 = call float @dx.op.binary.f32(i32 35, float %195, float %204)  ; FMax(a,b)
  %211 = call float @dx.op.binary.f32(i32 35, float %196, float %205)  ; FMax(a,b)
  %212 = call float @dx.op.binary.f32(i32 35, float %207, float %208)  ; FMax(a,b)
  %213 = call float @dx.op.binary.f32(i32 35, float %206, float %212)  ; FMax(a,b)
  %214 = call float @dx.op.binary.f32(i32 36, float %210, float %211)  ; FMin(a,b)
  %215 = call float @dx.op.binary.f32(i32 36, float %209, float %214)  ; FMin(a,b)
  %216 = call float @dx.op.unary.f32(i32 7, float %213)  ; Saturate(value)
  %217 = call float @dx.op.unary.f32(i32 7, float %215)  ; Saturate(value)
  %218 = fcmp fast olt float %216, %217
  br i1 %218, label %219, label %229

; <label>:219                                     ; preds = %35
  %220 = fmul fast float %172, %217
  %221 = fmul fast float %173, %217
  %222 = fmul fast float %174, %217
  %223 = fadd fast float %220, %145
  %224 = fadd fast float %221, %150
  %225 = fadd fast float %222, %155
  %226 = fsub fast float 1.000000e+00, %217
  %227 = fmul fast float %226, %171
  %228 = call float @dx.op.binary.f32(i32 35, float %227, float 0.000000e+00)  ; FMax(a,b)
  br label %229

; <label>:229                                     ; preds = %219, %35
  %230 = phi float [ %223, %219 ], [ %145, %35 ]
  %231 = phi float [ %224, %219 ], [ %150, %35 ]
  %232 = phi float [ %225, %219 ], [ %155, %35 ]
  %233 = phi float [ %228, %219 ], [ %171, %35 ]
  %234 = fcmp fast ogt float %233, 0.000000e+00
  br i1 %234, label %235, label %646

; <label>:235                                     ; preds = %229
  %236 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %237 = extractvalue %dx.types.CBufRet.f32 %236, 0
  %238 = extractvalue %dx.types.CBufRet.f32 %236, 1
  %239 = extractvalue %dx.types.CBufRet.f32 %236, 2
  %240 = extractvalue %dx.types.CBufRet.f32 %236, 3
  %241 = uitofp i32 %39 to float
  %242 = uitofp i32 %40 to float
  %243 = fadd fast float %241, 5.000000e-01
  %244 = fadd fast float %242, 5.000000e-01
  %245 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.i32 %245, 1
  %247 = uitofp i32 %246 to float
  %248 = fmul fast float %247, 0x4040551EC0000000
  %249 = fmul fast float %247, 0x4027A147A0000000
  %250 = fadd fast float %243, %248
  %251 = fadd fast float %244, %249
  %252 = call float @dx.op.dot2.f32(i32 54, float %250, float %251, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %253 = call float @dx.op.unary.f32(i32 22, float %252)  ; Frc(value)
  %254 = fmul fast float %253, 0x404A7DD040000000
  %255 = call float @dx.op.unary.f32(i32 22, float %254)  ; Frc(value)
  %256 = fadd fast float %255, -5.000000e-01
  %257 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %258 = call float @dx.op.binary.f32(i32 36, float %233, float 1.000000e+06)  ; FMin(a,b)
  %259 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %260 = extractvalue %dx.types.CBufRet.f32 %259, 2
  %261 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %262 = extractvalue %dx.types.CBufRet.f32 %261, 2
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 2
  %265 = fmul fast float %260, %159
  %266 = call float @dx.op.tertiary.f32(i32 46, float %160, float %262, float %265)  ; FMad(a,b,c)
  %267 = call float @dx.op.tertiary.f32(i32 46, float %161, float %264, float %266)  ; FMad(a,b,c)
  %268 = fcmp fast olt float %267, 0.000000e+00
  br i1 %268, label %269, label %273

; <label>:269                                     ; preds = %235
  %270 = fmul fast float %70, 0xBFEE666660000000
  %271 = fdiv fast float %270, %267
  %272 = call float @dx.op.binary.f32(i32 36, float %271, float %258)  ; FMin(a,b)
  br label %273

; <label>:273                                     ; preds = %269, %235
  %274 = phi float [ %272, %269 ], [ %258, %235 ]
  %275 = fmul fast float %274, %159
  %276 = fmul fast float %274, %160
  %277 = fmul fast float %274, %161
  %278 = fadd fast float %275, %230
  %279 = fadd fast float %276, %231
  %280 = fadd fast float %277, %232
  %281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.f32 %281, 0
  %283 = extractvalue %dx.types.CBufRet.f32 %281, 1
  %284 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %285 = extractvalue %dx.types.CBufRet.f32 %281, 3
  %286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %287 = extractvalue %dx.types.CBufRet.f32 %286, 0
  %288 = extractvalue %dx.types.CBufRet.f32 %286, 1
  %289 = extractvalue %dx.types.CBufRet.f32 %286, 2
  %290 = extractvalue %dx.types.CBufRet.f32 %286, 3
  %291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %292 = extractvalue %dx.types.CBufRet.f32 %291, 0
  %293 = extractvalue %dx.types.CBufRet.f32 %291, 1
  %294 = extractvalue %dx.types.CBufRet.f32 %291, 2
  %295 = extractvalue %dx.types.CBufRet.f32 %291, 3
  %296 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %297 = extractvalue %dx.types.CBufRet.f32 %296, 0
  %298 = extractvalue %dx.types.CBufRet.f32 %296, 1
  %299 = extractvalue %dx.types.CBufRet.f32 %296, 2
  %300 = extractvalue %dx.types.CBufRet.f32 %296, 3
  %301 = fmul fast float %282, %230
  %302 = call float @dx.op.tertiary.f32(i32 46, float %231, float %287, float %301)  ; FMad(a,b,c)
  %303 = call float @dx.op.tertiary.f32(i32 46, float %232, float %292, float %302)  ; FMad(a,b,c)
  %304 = fadd fast float %303, %297
  %305 = fmul fast float %283, %230
  %306 = call float @dx.op.tertiary.f32(i32 46, float %231, float %288, float %305)  ; FMad(a,b,c)
  %307 = call float @dx.op.tertiary.f32(i32 46, float %232, float %293, float %306)  ; FMad(a,b,c)
  %308 = fadd fast float %307, %298
  %309 = fmul fast float %284, %230
  %310 = call float @dx.op.tertiary.f32(i32 46, float %231, float %289, float %309)  ; FMad(a,b,c)
  %311 = call float @dx.op.tertiary.f32(i32 46, float %232, float %294, float %310)  ; FMad(a,b,c)
  %312 = fadd fast float %311, %299
  %313 = fmul fast float %285, %230
  %314 = call float @dx.op.tertiary.f32(i32 46, float %231, float %290, float %313)  ; FMad(a,b,c)
  %315 = call float @dx.op.tertiary.f32(i32 46, float %232, float %295, float %314)  ; FMad(a,b,c)
  %316 = fadd fast float %315, %300
  %317 = fmul fast float %282, %278
  %318 = call float @dx.op.tertiary.f32(i32 46, float %279, float %287, float %317)  ; FMad(a,b,c)
  %319 = call float @dx.op.tertiary.f32(i32 46, float %280, float %292, float %318)  ; FMad(a,b,c)
  %320 = fadd fast float %319, %297
  %321 = fmul fast float %283, %278
  %322 = call float @dx.op.tertiary.f32(i32 46, float %279, float %288, float %321)  ; FMad(a,b,c)
  %323 = call float @dx.op.tertiary.f32(i32 46, float %280, float %293, float %322)  ; FMad(a,b,c)
  %324 = fadd fast float %323, %298
  %325 = fmul fast float %284, %278
  %326 = call float @dx.op.tertiary.f32(i32 46, float %279, float %289, float %325)  ; FMad(a,b,c)
  %327 = call float @dx.op.tertiary.f32(i32 46, float %280, float %294, float %326)  ; FMad(a,b,c)
  %328 = fadd fast float %327, %299
  %329 = fmul fast float %285, %278
  %330 = call float @dx.op.tertiary.f32(i32 46, float %279, float %290, float %329)  ; FMad(a,b,c)
  %331 = call float @dx.op.tertiary.f32(i32 46, float %280, float %295, float %330)  ; FMad(a,b,c)
  %332 = fadd fast float %331, %300
  %333 = fdiv fast float 1.000000e+00, %316
  %334 = fmul fast float %333, %304
  %335 = fmul fast float %333, %308
  %336 = fmul fast float %333, %312
  %337 = fdiv fast float 1.000000e+00, %332
  %338 = fmul fast float %337, %320
  %339 = fmul fast float %337, %324
  %340 = fmul fast float %337, %328
  %341 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %342 = extractvalue %dx.types.CBufRet.f32 %341, 2
  %343 = extractvalue %dx.types.CBufRet.f32 %341, 3
  %344 = call float @dx.op.tertiary.f32(i32 46, float %274, float %342, float 0.000000e+00)  ; FMad(a,b,c)
  %345 = call float @dx.op.tertiary.f32(i32 46, float %274, float %343, float 0.000000e+00)  ; FMad(a,b,c)
  %346 = fadd fast float %344, %312
  %347 = fadd fast float %345, %316
  %348 = fdiv fast float 1.000000e+00, %347
  %349 = fmul fast float %348, %346
  %350 = fsub fast float %338, %334
  %351 = fsub fast float %339, %335
  %352 = fsub fast float %340, %336
  %353 = fmul fast float %350, %350
  %354 = fmul fast float %351, %351
  %355 = fadd fast float %353, %354
  %356 = call float @dx.op.unary.f32(i32 24, float %355)  ; Sqrt(value)
  %357 = fmul fast float %356, 5.000000e-01
  %358 = fmul fast float %357, %334
  %359 = fmul fast float %357, %335
  %360 = fadd fast float %358, %350
  %361 = fadd fast float %359, %351
  %362 = call float @dx.op.unary.f32(i32 6, float %360)  ; FAbs(value)
  %363 = call float @dx.op.unary.f32(i32 6, float %361)  ; FAbs(value)
  %364 = fsub fast float %362, %357
  %365 = fsub fast float %363, %357
  %366 = call float @dx.op.binary.f32(i32 35, float %364, float 0.000000e+00)  ; FMax(a,b)
  %367 = call float @dx.op.binary.f32(i32 35, float %365, float 0.000000e+00)  ; FMax(a,b)
  %368 = call float @dx.op.unary.f32(i32 6, float %350)  ; FAbs(value)
  %369 = call float @dx.op.unary.f32(i32 6, float %351)  ; FAbs(value)
  %370 = fdiv fast float %366, %368
  %371 = fdiv fast float %367, %369
  %372 = fsub fast float 1.000000e+00, %370
  %373 = fsub fast float 1.000000e+00, %371
  %374 = call float @dx.op.binary.f32(i32 36, float %372, float %373)  ; FMin(a,b)
  %375 = fdiv fast float %374, %357
  %376 = call float @dx.op.binary.f32(i32 36, float %375, float 1.000000e+00)  ; FMin(a,b)
  %377 = fmul fast float %376, %352
  %378 = icmp eq i32 %110, 0
  %379 = fsub fast float %336, %349
  %380 = fmul fast float %379, %257
  br i1 %378, label %383, label %381

; <label>:381                                     ; preds = %273
  %382 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %380)  ; FMax(a,b)
  br label %386

; <label>:383                                     ; preds = %273
  %384 = call float @dx.op.unary.f32(i32 6, float %377)  ; FAbs(value)
  %385 = call float @dx.op.binary.f32(i32 35, float %384, float %380)  ; FMax(a,b)
  br label %386

; <label>:386                                     ; preds = %383, %381
  %387 = phi float [ %382, %381 ], [ %385, %383 ]
  %388 = fmul fast float %334, 5.000000e-01
  %389 = fmul fast float %335, 5.000000e-01
  %390 = fadd fast float %388, 5.000000e-01
  %391 = fsub fast float 5.000000e-01, %389
  %392 = fmul fast float %390, %237
  %393 = fmul fast float %391, %238
  %394 = fmul fast float %387, 6.250000e-02
  %395 = fmul fast float %237, 3.125000e-02
  %396 = fmul fast float %395, %350
  %397 = fmul fast float %396, %376
  %398 = fmul fast float %238, -3.125000e-02
  %399 = fmul fast float %398, %351
  %400 = fmul fast float %399, %376
  %401 = fmul fast float %377, 6.250000e-02
  %402 = fmul fast float %397, %256
  %403 = fmul fast float %400, %256
  %404 = fmul fast float %401, %256
  %405 = fadd fast float %402, %392
  %406 = fadd fast float %403, %393
  %407 = fadd fast float %404, %336
  br label %408

; <label>:408                                     ; preds = %469, %386
  %409 = phi float [ %453, %469 ], [ 0.000000e+00, %386 ]
  %410 = phi i32 [ %470, %469 ], [ 0, %386 ]
  %411 = uitofp i32 %410 to float
  %412 = fadd fast float %411, 1.000000e+00
  %413 = fmul fast float %412, %397
  %414 = fmul fast float %412, %400
  %415 = fadd fast float %413, %405
  %416 = fadd fast float %414, %406
  %417 = fmul fast float %412, %401
  %418 = fadd fast float %417, %407
  %419 = fadd fast float %411, 2.000000e+00
  %420 = fmul fast float %419, %397
  %421 = fmul fast float %419, %400
  %422 = fadd fast float %420, %405
  %423 = fadd fast float %421, %406
  %424 = fmul fast float %419, %401
  %425 = fadd fast float %424, %407
  %426 = fadd fast float %411, 3.000000e+00
  %427 = fmul fast float %426, %397
  %428 = fmul fast float %426, %400
  %429 = fadd fast float %427, %405
  %430 = fadd fast float %428, %406
  %431 = fmul fast float %426, %401
  %432 = fadd fast float %431, %407
  %433 = fadd fast float %411, 4.000000e+00
  %434 = fmul fast float %433, %397
  %435 = fmul fast float %433, %400
  %436 = fadd fast float %434, %405
  %437 = fadd fast float %435, %406
  %438 = fmul fast float %433, %401
  %439 = fadd fast float %438, %407
  %440 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %441 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %442 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %440, %dx.types.Handle %441, float %415, float %416, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %443 = extractvalue %dx.types.ResRet.f32 %442, 0
  %444 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %440, %dx.types.Handle %441, float %422, float %423, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %445 = extractvalue %dx.types.ResRet.f32 %444, 0
  %446 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %440, %dx.types.Handle %441, float %429, float %430, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %447 = extractvalue %dx.types.ResRet.f32 %446, 0
  %448 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %440, %dx.types.Handle %441, float %436, float %437, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %449 = extractvalue %dx.types.ResRet.f32 %448, 0
  %450 = fsub fast float %418, %443
  %451 = fsub fast float %425, %445
  %452 = fsub fast float %432, %447
  %453 = fsub fast float %439, %449
  %454 = fadd fast float %450, %394
  %455 = fadd fast float %451, %394
  %456 = fadd fast float %452, %394
  %457 = fadd fast float %453, %394
  %458 = call float @dx.op.unary.f32(i32 6, float %454)  ; FAbs(value)
  %459 = call float @dx.op.unary.f32(i32 6, float %455)  ; FAbs(value)
  %460 = call float @dx.op.unary.f32(i32 6, float %456)  ; FAbs(value)
  %461 = call float @dx.op.unary.f32(i32 6, float %457)  ; FAbs(value)
  %462 = fcmp fast olt float %458, %394
  %463 = fcmp fast olt float %459, %394
  %464 = fcmp fast olt float %460, %394
  %465 = fcmp fast olt float %461, %394
  %466 = or i1 %462, %463
  %467 = or i1 %466, %464
  %468 = or i1 %467, %465
  br i1 %468, label %472, label %469

; <label>:469                                     ; preds = %408
  %470 = add nuw nsw i32 %410, 4
  %471 = icmp ult i32 %470, 16
  br i1 %471, label %408, label %472, !llvm.loop !41

; <label>:472                                     ; preds = %469, %408
  %473 = phi i1 [ false, %469 ], [ true, %408 ]
  %474 = phi i1 [ false, %469 ], [ %464, %408 ]
  %475 = phi i1 [ false, %469 ], [ %463, %408 ]
  %476 = phi i1 [ false, %469 ], [ %462, %408 ]
  %477 = phi float [ %453, %469 ], [ %409, %408 ]
  %478 = phi i32 [ %470, %469 ], [ %410, %408 ]
  %479 = uitofp i32 %478 to float
  br i1 %473, label %480, label %495, !dx.controlflow.hints !43

; <label>:480                                     ; preds = %472
  %481 = select i1 %474, float %451, float %452
  %482 = select i1 %474, float %452, float %453
  %483 = select i1 %474, float 2.000000e+00, float 3.000000e+00
  %484 = select i1 %475, float %450, float %481
  %485 = select i1 %475, float %451, float %482
  %486 = select i1 %475, float 1.000000e+00, float %483
  %487 = select i1 %476, float %477, float %484
  %488 = select i1 %476, float %450, float %485
  %489 = select i1 %476, float 0.000000e+00, float %486
  %490 = fadd fast float %479, %489
  %491 = fsub fast float %487, %488
  %492 = fdiv fast float %487, %491
  %493 = call float @dx.op.unary.f32(i32 7, float %492)  ; Saturate(value)
  %494 = fadd fast float %490, %493
  br label %495

; <label>:495                                     ; preds = %480, %472
  %496 = phi float [ %494, %480 ], [ %479, %472 ]
  %497 = fmul fast float %496, %397
  %498 = fmul fast float %496, %400
  %499 = fmul fast float %496, %401
  %500 = fadd fast float %497, %405
  %501 = fadd fast float %498, %406
  %502 = fadd fast float %499, %407
  %503 = fmul fast float %239, 2.000000e+00
  %504 = fmul fast float %503, %500
  %505 = fmul fast float %240, 2.000000e+00
  %506 = fmul fast float %505, %501
  %507 = fadd fast float %504, -1.000000e+00
  %508 = fsub fast float 1.000000e+00, %506
  %509 = fmul fast float %507, %76
  %510 = fmul fast float %508, %77
  %511 = zext i1 %473 to i32
  br i1 %473, label %512, label %639

; <label>:512                                     ; preds = %495
  %513 = fadd fast float %510, %72
  %514 = fadd fast float %509, %73
  %515 = fdiv fast float %509, %76
  %516 = fdiv fast float %510, %77
  %517 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 113)  ; CBufferLoadLegacy(handle,regIndex)
  %518 = extractvalue %dx.types.CBufRet.f32 %517, 0
  %519 = extractvalue %dx.types.CBufRet.f32 %517, 1
  %520 = extractvalue %dx.types.CBufRet.f32 %517, 3
  %521 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %522 = extractvalue %dx.types.CBufRet.f32 %521, 0
  %523 = extractvalue %dx.types.CBufRet.f32 %521, 1
  %524 = extractvalue %dx.types.CBufRet.f32 %521, 3
  %525 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 115)  ; CBufferLoadLegacy(handle,regIndex)
  %526 = extractvalue %dx.types.CBufRet.f32 %525, 0
  %527 = extractvalue %dx.types.CBufRet.f32 %525, 1
  %528 = extractvalue %dx.types.CBufRet.f32 %525, 3
  %529 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %530 = extractvalue %dx.types.CBufRet.f32 %529, 0
  %531 = extractvalue %dx.types.CBufRet.f32 %529, 1
  %532 = extractvalue %dx.types.CBufRet.f32 %529, 3
  %533 = fmul fast float %518, %515
  %534 = call float @dx.op.tertiary.f32(i32 46, float %516, float %522, float %533)  ; FMad(a,b,c)
  %535 = call float @dx.op.tertiary.f32(i32 46, float %502, float %526, float %534)  ; FMad(a,b,c)
  %536 = fadd fast float %535, %530
  %537 = fmul fast float %519, %515
  %538 = call float @dx.op.tertiary.f32(i32 46, float %516, float %523, float %537)  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %502, float %527, float %538)  ; FMad(a,b,c)
  %540 = fadd fast float %539, %531
  %541 = fmul fast float %520, %515
  %542 = call float @dx.op.tertiary.f32(i32 46, float %516, float %524, float %541)  ; FMad(a,b,c)
  %543 = call float @dx.op.tertiary.f32(i32 46, float %502, float %528, float %542)  ; FMad(a,b,c)
  %544 = fadd fast float %543, %532
  %545 = fdiv fast float %536, %544
  %546 = fdiv fast float %540, %544
  %547 = fsub fast float %515, %545
  %548 = fsub fast float %516, %546
  %549 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %550 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %549, %dx.types.Handle %441, float %514, float %513, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %551 = extractvalue %dx.types.ResRet.f32 %550, 0
  %552 = fcmp fast ogt float %551, 0.000000e+00
  br i1 %552, label %553, label %567

; <label>:553                                     ; preds = %512
  %554 = extractvalue %dx.types.ResRet.f32 %550, 1
  %555 = fmul fast float %551, 0x4010083560000000
  %556 = fmul fast float %554, 0x4010083560000000
  %557 = fadd fast float %555, 0xC000082560000000
  %558 = fadd fast float %556, 0xC000082560000000
  %559 = call float @dx.op.unary.f32(i32 6, float %557)  ; FAbs(value)
  %560 = call float @dx.op.unary.f32(i32 6, float %558)  ; FAbs(value)
  %561 = fmul fast float %551, 0x4000083560000000
  %562 = fadd fast float %561, 0xBFF0082560000000
  %563 = fmul fast float %562, %559
  %564 = fmul fast float %554, 0x4000083560000000
  %565 = fadd fast float %564, 0xBFF0082560000000
  %566 = fmul fast float %565, %560
  br label %567

; <label>:567                                     ; preds = %553, %512
  %568 = phi float [ %563, %553 ], [ %547, %512 ]
  %569 = phi float [ %566, %553 ], [ %548, %512 ]
  %570 = fsub fast float %515, %568
  %571 = fsub fast float %516, %569
  %572 = call float @dx.op.unary.f32(i32 6, float %570)  ; FAbs(value)
  %573 = call float @dx.op.unary.f32(i32 6, float %571)  ; FAbs(value)
  %574 = fmul fast float %572, 5.000000e+00
  %575 = fmul fast float %573, 5.000000e+00
  %576 = fadd fast float %574, -4.000000e+00
  %577 = fadd fast float %575, -4.000000e+00
  %578 = call float @dx.op.unary.f32(i32 7, float %576)  ; Saturate(value)
  %579 = call float @dx.op.unary.f32(i32 7, float %577)  ; Saturate(value)
  %580 = call float @dx.op.dot2.f32(i32 54, float %578, float %579, float %578, float %579)  ; Dot2(ax,ay,bx,by)
  %581 = fsub fast float 1.000000e+00, %580
  %582 = call float @dx.op.unary.f32(i32 7, float %581)  ; Saturate(value)
  %583 = call float @dx.op.unary.f32(i32 6, float %515)  ; FAbs(value)
  %584 = call float @dx.op.unary.f32(i32 6, float %516)  ; FAbs(value)
  %585 = fmul fast float %583, 5.000000e+00
  %586 = fmul fast float %584, 5.000000e+00
  %587 = fadd fast float %585, -4.000000e+00
  %588 = fadd fast float %586, -4.000000e+00
  %589 = call float @dx.op.unary.f32(i32 7, float %587)  ; Saturate(value)
  %590 = call float @dx.op.unary.f32(i32 7, float %588)  ; Saturate(value)
  %591 = call float @dx.op.dot2.f32(i32 54, float %589, float %590, float %589, float %590)  ; Dot2(ax,ay,bx,by)
  %592 = fsub fast float 1.000000e+00, %591
  %593 = call float @dx.op.unary.f32(i32 7, float %592)  ; Saturate(value)
  %594 = call float @dx.op.binary.f32(i32 36, float %593, float %582)  ; FMin(a,b)
  %595 = fcmp fast olt float %594, %255
  %596 = select i1 %595, i32 0, i32 %511
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %639, label %598

; <label>:598                                     ; preds = %567
  %599 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %600 = extractvalue %dx.types.CBufRet.f32 %599, 0
  %601 = extractvalue %dx.types.CBufRet.f32 %599, 1
  %602 = fmul fast float %600, %570
  %603 = fmul fast float %601, %571
  %604 = extractvalue %dx.types.CBufRet.f32 %599, 2
  %605 = extractvalue %dx.types.CBufRet.f32 %599, 3
  %606 = fadd fast float %602, %604
  %607 = fadd fast float %603, %605
  %608 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %609 = extractvalue %dx.types.CBufRet.f32 %608, 2
  %610 = extractvalue %dx.types.CBufRet.f32 %608, 3
  %611 = extractvalue %dx.types.CBufRet.f32 %608, 0
  %612 = extractvalue %dx.types.CBufRet.f32 %608, 1
  %613 = call float @dx.op.binary.f32(i32 35, float %606, float %611)  ; FMax(a,b)
  %614 = call float @dx.op.binary.f32(i32 35, float %607, float %612)  ; FMax(a,b)
  %615 = call float @dx.op.binary.f32(i32 36, float %613, float %609)  ; FMin(a,b)
  %616 = call float @dx.op.binary.f32(i32 36, float %614, float %610)  ; FMin(a,b)
  %617 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %618 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %617, %dx.types.Handle %441, float %615, float %616, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %619 = extractvalue %dx.types.ResRet.f32 %618, 0
  %620 = extractvalue %dx.types.ResRet.f32 %618, 1
  %621 = extractvalue %dx.types.ResRet.f32 %618, 2
  %622 = fsub fast float -0.000000e+00, %619
  %623 = fsub fast float -0.000000e+00, %620
  %624 = fsub fast float -0.000000e+00, %621
  %625 = call float @dx.op.binary.f32(i32 36, float %622, float 0.000000e+00)  ; FMin(a,b)
  %626 = call float @dx.op.binary.f32(i32 36, float %623, float 0.000000e+00)  ; FMin(a,b)
  %627 = call float @dx.op.binary.f32(i32 36, float %624, float 0.000000e+00)  ; FMin(a,b)
  %628 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %629 = extractvalue %dx.types.CBufRet.f32 %628, 0
  %630 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %631 = extractvalue %dx.types.CBufRet.f32 %630, 3
  %632 = fmul fast float %631, %629
  %633 = fmul fast float %625, %632
  %634 = fsub fast float -0.000000e+00, %633
  %635 = fmul fast float %626, %632
  %636 = fsub fast float -0.000000e+00, %635
  %637 = fmul fast float %627, %632
  %638 = fsub fast float -0.000000e+00, %637
  br label %639

; <label>:639                                     ; preds = %598, %567, %495
  %640 = phi float [ %634, %598 ], [ 0.000000e+00, %567 ], [ 0.000000e+00, %495 ]
  %641 = phi float [ %636, %598 ], [ 0.000000e+00, %567 ], [ 0.000000e+00, %495 ]
  %642 = phi float [ %638, %598 ], [ 0.000000e+00, %567 ], [ 0.000000e+00, %495 ]
  %643 = phi i32 [ %596, %598 ], [ 0, %567 ], [ %511, %495 ]
  %644 = icmp ne i32 %643, 0
  %645 = zext i1 %644 to i32
  br label %646

; <label>:646                                     ; preds = %639, %229
  %647 = phi float [ %640, %639 ], [ 0.000000e+00, %229 ]
  %648 = phi float [ %641, %639 ], [ 0.000000e+00, %229 ]
  %649 = phi float [ %642, %639 ], [ 0.000000e+00, %229 ]
  %650 = phi i32 [ %645, %639 ], [ 0, %229 ]
  %651 = icmp eq i32 %650, 0
  br i1 %651, label %652, label %1892

; <label>:652                                     ; preds = %646
  %653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %654 = extractvalue %dx.types.CBufRet.f32 %653, 2
  %655 = fmul fast float %654, 0x3FEFAE1480000000
  %656 = fcmp fast olt float %167, %655
  br i1 %656, label %657, label %1869

; <label>:657                                     ; preds = %652
  %658 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %659 = extractvalue %dx.types.CBufRet.i32 %658, 1
  %660 = uitofp i32 %659 to float
  %661 = uitofp i32 %39 to float
  %662 = uitofp i32 %40 to float
  %663 = fmul fast float %660, 0x4040551EC0000000
  %664 = fmul fast float %660, 0x4027A147A0000000
  %665 = fadd fast float %663, %661
  %666 = fadd fast float %664, %662
  %667 = call float @dx.op.dot2.f32(i32 54, float %665, float %666, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %668 = call float @dx.op.unary.f32(i32 22, float %667)  ; Frc(value)
  %669 = fmul fast float %668, 0x404A7DD040000000
  %670 = call float @dx.op.unary.f32(i32 22, float %669)  ; Frc(value)
  %671 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %672 = extractvalue %dx.types.CBufRet.i32 %671, 3
  %673 = icmp eq i32 %672, 0
  br i1 %673, label %728, label %674

; <label>:674                                     ; preds = %657
  br label %675

; <label>:675                                     ; preds = %723, %674
  %676 = phi i32 [ %724, %723 ], [ 0, %674 ]
  %677 = add i32 %676, 47
  %678 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %677)  ; CBufferLoadLegacy(handle,regIndex)
  %679 = extractvalue %dx.types.CBufRet.f32 %678, 1
  %680 = fmul fast float %679, %117
  %681 = fmul fast float %679, %121
  %682 = fmul fast float %679, %125
  %683 = add i32 %676, 53
  %684 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %683)  ; CBufferLoadLegacy(handle,regIndex)
  %685 = extractvalue %dx.types.CBufRet.f32 %684, 0
  %686 = extractvalue %dx.types.CBufRet.f32 %684, 1
  %687 = extractvalue %dx.types.CBufRet.f32 %684, 2
  %688 = fadd fast float %680, %685
  %689 = fadd fast float %681, %686
  %690 = fadd fast float %682, %687
  %691 = fadd fast float %688, -5.000000e-01
  %692 = fadd fast float %689, -5.000000e-01
  %693 = fadd fast float %690, -5.000000e-01
  %694 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %695 = extractvalue %dx.types.CBufRet.f32 %694, 3
  %696 = fmul fast float %691, %695
  %697 = fmul fast float %692, %695
  %698 = fmul fast float %693, %695
  %699 = call float @dx.op.unary.f32(i32 7, float %696)  ; Saturate(value)
  %700 = call float @dx.op.unary.f32(i32 7, float %697)  ; Saturate(value)
  %701 = call float @dx.op.unary.f32(i32 7, float %698)  ; Saturate(value)
  %702 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %703 = extractvalue %dx.types.CBufRet.i32 %702, 2
  %704 = uitofp i32 %703 to float
  %705 = fsub fast float -5.000000e-01, %688
  %706 = fadd fast float %705, %704
  %707 = fsub fast float -5.000000e-01, %689
  %708 = fadd fast float %707, %704
  %709 = fsub fast float -5.000000e-01, %690
  %710 = fadd fast float %709, %704
  %711 = fmul fast float %706, %695
  %712 = fmul fast float %708, %695
  %713 = fmul fast float %710, %695
  %714 = call float @dx.op.unary.f32(i32 7, float %711)  ; Saturate(value)
  %715 = call float @dx.op.unary.f32(i32 7, float %712)  ; Saturate(value)
  %716 = call float @dx.op.unary.f32(i32 7, float %713)  ; Saturate(value)
  %717 = call float @dx.op.binary.f32(i32 36, float %715, float %716)  ; FMin(a,b)
  %718 = call float @dx.op.binary.f32(i32 36, float %714, float %717)  ; FMin(a,b)
  %719 = call float @dx.op.binary.f32(i32 36, float %700, float %701)  ; FMin(a,b)
  %720 = call float @dx.op.binary.f32(i32 36, float %699, float %719)  ; FMin(a,b)
  %721 = call float @dx.op.binary.f32(i32 36, float %720, float %718)  ; FMin(a,b)
  %722 = fcmp fast ogt float %721, %670
  br i1 %722, label %731, label %723

; <label>:723                                     ; preds = %675
  %724 = add i32 %676, 1
  %725 = extractvalue %dx.types.CBufRet.i32 %702, 3
  %726 = icmp ult i32 %724, %725
  br i1 %726, label %675, label %727

; <label>:727                                     ; preds = %723
  br label %728

; <label>:728                                     ; preds = %727, %657
  %729 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %730 = extractvalue %dx.types.CBufRet.i32 %729, 3
  br label %732

; <label>:731                                     ; preds = %675
  br label %732

; <label>:732                                     ; preds = %731, %728
  %733 = phi i32 [ %730, %728 ], [ %676, %731 ]
  %734 = add i32 %733, 47
  %735 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %734)  ; CBufferLoadLegacy(handle,regIndex)
  %736 = extractvalue %dx.types.CBufRet.f32 %735, 1
  %737 = fmul fast float %736, %117
  %738 = fmul fast float %736, %121
  %739 = fmul fast float %736, %125
  %740 = add i32 %733, 53
  %741 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %740)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.f32 %741, 0
  %743 = extractvalue %dx.types.CBufRet.f32 %741, 1
  %744 = extractvalue %dx.types.CBufRet.f32 %741, 2
  %745 = call float @dx.op.unary.f32(i32 12, float %162)  ; Cos(value)
  %746 = fsub fast float 1.000000e+00, %745
  %747 = call float @dx.op.unary.f32(i32 24, float %746)  ; Sqrt(value)
  %748 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %749 = extractvalue %dx.types.CBufRet.i32 %748, 0
  %750 = uitofp i32 %749 to float
  %751 = fmul fast float %750, %747
  %752 = extractvalue %dx.types.CBufRet.i32 %748, 2
  %753 = uitofp i32 %752 to float
  %754 = call float @dx.op.unary.f32(i32 23, float %751)  ; Log(value)
  %755 = call float @dx.op.binary.f32(i32 35, float %754, float 0.000000e+00)  ; FMax(a,b)
  %756 = call float @dx.op.binary.f32(i32 36, float %755, float %753)  ; FMin(a,b)
  %757 = fadd fast float %742, -5.000000e-01
  %758 = fadd fast float %757, %737
  %759 = fadd fast float %743, -5.000000e-01
  %760 = fadd fast float %759, %738
  %761 = fadd fast float %744, -5.000000e-01
  %762 = fadd fast float %761, %739
  %763 = call float @dx.op.unary.f32(i32 27, float %758)  ; Round_ni(value)
  %764 = call float @dx.op.unary.f32(i32 27, float %760)  ; Round_ni(value)
  %765 = call float @dx.op.unary.f32(i32 27, float %762)  ; Round_ni(value)
  %766 = fptosi float %763 to i32
  %767 = fptosi float %764 to i32
  %768 = fptosi float %765 to i32
  %769 = call float @dx.op.unary.f32(i32 22, float %758)  ; Frc(value)
  %770 = call float @dx.op.unary.f32(i32 22, float %760)  ; Frc(value)
  %771 = call float @dx.op.unary.f32(i32 22, float %762)  ; Frc(value)
  %772 = extractvalue %dx.types.CBufRet.f32 %735, 0
  %773 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %774 = extractvalue %dx.types.CBufRet.i32 %773, 2
  %775 = mul i32 %774, %733
  %776 = add i32 %775, %766
  %777 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %778 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %776, i32 %767, i32 %768, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %779 = extractvalue %dx.types.ResRet.i32 %778, 0
  %780 = uitofp i32 %766 to float
  %781 = uitofp i32 %767 to float
  %782 = uitofp i32 %768 to float
  %783 = extractvalue %dx.types.CBufRet.f32 %735, 2
  %784 = fmul fast float %783, %780
  %785 = fmul fast float %783, %781
  %786 = fmul fast float %783, %782
  %787 = add i32 %733, 59
  %788 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %787)  ; CBufferLoadLegacy(handle,regIndex)
  %789 = extractvalue %dx.types.CBufRet.f32 %788, 0
  %790 = extractvalue %dx.types.CBufRet.f32 %788, 1
  %791 = extractvalue %dx.types.CBufRet.f32 %788, 2
  %792 = fadd fast float %784, %789
  %793 = fadd fast float %785, %790
  %794 = fadd fast float %786, %791
  %795 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %796 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %779, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %797 = extractvalue %dx.types.ResRet.f32 %796, 0
  %798 = extractvalue %dx.types.ResRet.f32 %796, 1
  %799 = extractvalue %dx.types.ResRet.f32 %796, 2
  %800 = fadd fast float %792, %797
  %801 = fadd fast float %793, %798
  %802 = fadd fast float %794, %799
  %803 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %804 = extractvalue %dx.types.CBufRet.f32 %803, 0
  %805 = fmul fast float %804, %772
  %806 = fsub fast float %117, %800
  %807 = fsub fast float %121, %801
  %808 = fsub fast float %125, %802
  %809 = call float @dx.op.dot3.f32(i32 55, float %806, float %807, float %808, float %806, float %807, float %808)  ; Dot3(ax,ay,az,bx,by,bz)
  %810 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %811 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %806, float %807, float %808)  ; Dot3(ax,ay,az,bx,by,bz)
  %812 = fmul fast float %811, 2.000000e+00
  %813 = fmul fast float %805, %805
  %814 = fsub fast float %809, %813
  %815 = fmul fast float %812, %812
  %816 = fmul fast float %810, 4.000000e+00
  %817 = fmul fast float %816, %814
  %818 = fsub fast float %815, %817
  %819 = fcmp fast ult float %818, 0.000000e+00
  br i1 %819, label %825, label %820, !dx.controlflow.hints !44

; <label>:820                                     ; preds = %732
  %821 = call float @dx.op.unary.f32(i32 24, float %818)  ; Sqrt(value)
  %822 = fsub fast float %821, %812
  %823 = fmul fast float %810, 2.000000e+00
  %824 = fdiv fast float %822, %823
  br label %825

; <label>:825                                     ; preds = %820, %732
  %826 = phi float [ %824, %820 ], [ -1.000000e+00, %732 ]
  %827 = fmul fast float %826, %159
  %828 = fmul fast float %826, %160
  %829 = fmul fast float %826, %161
  %830 = fadd fast float %806, %827
  %831 = fadd fast float %807, %828
  %832 = fadd fast float %808, %829
  %833 = fmul fast float %826, %826
  %834 = call float @dx.op.dot3.f32(i32 55, float %830, float %831, float %832, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %835 = fmul fast float %834, %805
  %836 = fdiv fast float %833, %835
  %837 = call float @dx.op.dot3.f32(i32 55, float %830, float %831, float %832, float %830, float %831, float %832)  ; Dot3(ax,ay,az,bx,by,bz)
  %838 = call float @dx.op.unary.f32(i32 25, float %837)  ; Rsqrt(value)
  %839 = fmul fast float %838, %830
  %840 = fmul fast float %838, %831
  %841 = fmul fast float %838, %832
  %842 = call float @dx.op.unary.f32(i32 6, float %839)  ; FAbs(value)
  %843 = call float @dx.op.unary.f32(i32 6, float %840)  ; FAbs(value)
  %844 = call float @dx.op.unary.f32(i32 6, float %841)  ; FAbs(value)
  %845 = fsub fast float 1.000000e+00, %844
  %846 = call float @dx.op.unary.f32(i32 24, float %845)  ; Sqrt(value)
  %847 = call float @dx.op.binary.f32(i32 36, float %842, float %843)  ; FMin(a,b)
  %848 = call float @dx.op.binary.f32(i32 35, float %842, float %843)  ; FMax(a,b)
  %849 = fadd fast float %848, 0x3BF0000000000000
  %850 = fdiv fast float %847, %849
  %851 = fmul fast float %850, 0x3F99BE1040000000
  %852 = fsub fast float 0x3FA5746D00000000, %851
  %853 = fmul fast float %852, %850
  %854 = fadd fast float %853, 0x3FB692C5C0000000
  %855 = fmul fast float %854, %850
  %856 = fadd fast float %855, 0xBFCFA8A1C0000000
  %857 = fmul fast float %856, %850
  %858 = fadd fast float %857, 0x3F79384B40000000
  %859 = fmul fast float %858, %850
  %860 = fadd fast float %859, 0x3FE45BF7C0000000
  %861 = fmul fast float %860, %850
  %862 = fadd fast float %861, 0x3ED10F8960000000
  %863 = fcmp fast olt float %842, %843
  %864 = fsub fast float 0x3FEFFFF780000000, %861
  %865 = select i1 %863, float %864, float %862
  %866 = fmul fast float %865, %846
  %867 = fsub fast float %846, %866
  %868 = fcmp fast olt float %841, 0.000000e+00
  %869 = extractvalue %dx.types.CBufRet.i32 %748, 1
  %870 = and i32 %752, 31
  %871 = shl i32 1, %870
  %872 = uitofp i32 %871 to float
  %873 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %874 = icmp eq i32 %779, -1
  br i1 %874, label %920, label %875

; <label>:875                                     ; preds = %825
  %876 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %877 = extractvalue %dx.types.CBufRet.i32 %876, 1
  %878 = and i32 %877, 31
  %879 = lshr i32 %779, %878
  %880 = mul i32 %879, %869
  %881 = uitofp i32 %880 to float
  %882 = fsub fast float 1.000000e+00, %867
  %883 = select i1 %868, float %882, float %866
  %884 = bitcast float %883 to i32
  %885 = bitcast float %840 to i32
  %886 = and i32 %885, -2147483648
  %887 = xor i32 %884, %886
  %888 = bitcast i32 %887 to float
  %889 = fmul fast float %888, 5.000000e-01
  %890 = fadd fast float %889, 5.000000e-01
  %891 = fmul fast float %890, %750
  %892 = fadd fast float %891, %872
  %893 = fadd fast float %892, %881
  %894 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %895 = fmul fast float %893, %894
  %896 = extractvalue %dx.types.CBufRet.i32 %876, 0
  %897 = and i32 %896, %779
  %898 = mul i32 %897, %869
  %899 = uitofp i32 %898 to float
  %900 = fsub fast float 1.000000e+00, %866
  %901 = select i1 %868, float %900, float %867
  %902 = bitcast float %901 to i32
  %903 = bitcast float %839 to i32
  %904 = and i32 %903, -2147483648
  %905 = xor i32 %902, %904
  %906 = bitcast i32 %905 to float
  %907 = fmul fast float %906, 5.000000e-01
  %908 = fadd fast float %907, 5.000000e-01
  %909 = fmul fast float %908, %750
  %910 = fadd fast float %909, %872
  %911 = fadd fast float %910, %899
  %912 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %913 = fmul fast float %911, %912
  %914 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %915 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %916 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %914, %dx.types.Handle %915, float %913, float %895, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %917 = extractvalue %dx.types.ResRet.f32 %916, 0
  %918 = extractvalue %dx.types.ResRet.f32 %916, 1
  %919 = extractvalue %dx.types.ResRet.f32 %916, 2
  br label %920

; <label>:920                                     ; preds = %875, %825
  %921 = phi float [ %917, %875 ], [ 0.000000e+00, %825 ]
  %922 = phi float [ %918, %875 ], [ 0.000000e+00, %825 ]
  %923 = phi float [ %919, %875 ], [ 0.000000e+00, %825 ]
  %924 = fmul fast float %921, %836
  %925 = fmul fast float %922, %836
  %926 = fmul fast float %923, %836
  %927 = add i32 %768, 1
  %928 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %776, i32 %767, i32 %927, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %929 = extractvalue %dx.types.ResRet.i32 %928, 0
  %930 = uitofp i32 %927 to float
  %931 = fmul fast float %783, %930
  %932 = fadd fast float %931, %791
  %933 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %929, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %934 = extractvalue %dx.types.ResRet.f32 %933, 0
  %935 = extractvalue %dx.types.ResRet.f32 %933, 1
  %936 = extractvalue %dx.types.ResRet.f32 %933, 2
  %937 = fadd fast float %792, %934
  %938 = fadd fast float %793, %935
  %939 = fadd fast float %932, %936
  %940 = fsub fast float %117, %937
  %941 = fsub fast float %121, %938
  %942 = fsub fast float %125, %939
  %943 = call float @dx.op.dot3.f32(i32 55, float %940, float %941, float %942, float %940, float %941, float %942)  ; Dot3(ax,ay,az,bx,by,bz)
  %944 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %940, float %941, float %942)  ; Dot3(ax,ay,az,bx,by,bz)
  %945 = fmul fast float %944, 2.000000e+00
  %946 = fsub fast float %943, %813
  %947 = fmul fast float %945, %945
  %948 = fmul fast float %816, %946
  %949 = fsub fast float %947, %948
  %950 = fcmp fast ult float %949, 0.000000e+00
  br i1 %950, label %956, label %951, !dx.controlflow.hints !44

; <label>:951                                     ; preds = %920
  %952 = call float @dx.op.unary.f32(i32 24, float %949)  ; Sqrt(value)
  %953 = fsub fast float %952, %945
  %954 = fmul fast float %810, 2.000000e+00
  %955 = fdiv fast float %953, %954
  br label %956

; <label>:956                                     ; preds = %951, %920
  %957 = phi float [ %955, %951 ], [ -1.000000e+00, %920 ]
  %958 = fmul fast float %957, %159
  %959 = fmul fast float %957, %160
  %960 = fmul fast float %957, %161
  %961 = fadd fast float %940, %958
  %962 = fadd fast float %941, %959
  %963 = fadd fast float %942, %960
  %964 = fmul fast float %957, %957
  %965 = call float @dx.op.dot3.f32(i32 55, float %961, float %962, float %963, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %966 = fmul fast float %965, %805
  %967 = fdiv fast float %964, %966
  %968 = call float @dx.op.dot3.f32(i32 55, float %961, float %962, float %963, float %961, float %962, float %963)  ; Dot3(ax,ay,az,bx,by,bz)
  %969 = call float @dx.op.unary.f32(i32 25, float %968)  ; Rsqrt(value)
  %970 = fmul fast float %969, %961
  %971 = fmul fast float %969, %962
  %972 = fmul fast float %969, %963
  %973 = call float @dx.op.unary.f32(i32 6, float %970)  ; FAbs(value)
  %974 = call float @dx.op.unary.f32(i32 6, float %971)  ; FAbs(value)
  %975 = call float @dx.op.unary.f32(i32 6, float %972)  ; FAbs(value)
  %976 = fsub fast float 1.000000e+00, %975
  %977 = call float @dx.op.unary.f32(i32 24, float %976)  ; Sqrt(value)
  %978 = call float @dx.op.binary.f32(i32 36, float %973, float %974)  ; FMin(a,b)
  %979 = call float @dx.op.binary.f32(i32 35, float %973, float %974)  ; FMax(a,b)
  %980 = fadd fast float %979, 0x3BF0000000000000
  %981 = fdiv fast float %978, %980
  %982 = fmul fast float %981, 0x3F99BE1040000000
  %983 = fsub fast float 0x3FA5746D00000000, %982
  %984 = fmul fast float %983, %981
  %985 = fadd fast float %984, 0x3FB692C5C0000000
  %986 = fmul fast float %985, %981
  %987 = fadd fast float %986, 0xBFCFA8A1C0000000
  %988 = fmul fast float %987, %981
  %989 = fadd fast float %988, 0x3F79384B40000000
  %990 = fmul fast float %989, %981
  %991 = fadd fast float %990, 0x3FE45BF7C0000000
  %992 = fmul fast float %991, %981
  %993 = fadd fast float %992, 0x3ED10F8960000000
  %994 = fcmp fast olt float %973, %974
  %995 = fsub fast float 0x3FEFFFF780000000, %992
  %996 = select i1 %994, float %995, float %993
  %997 = fmul fast float %996, %977
  %998 = fsub fast float %977, %997
  %999 = fcmp fast olt float %972, 0.000000e+00
  %1000 = icmp eq i32 %929, -1
  br i1 %1000, label %1046, label %1001

; <label>:1001                                    ; preds = %956
  %1002 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1003 = extractvalue %dx.types.CBufRet.i32 %1002, 1
  %1004 = and i32 %1003, 31
  %1005 = lshr i32 %929, %1004
  %1006 = mul i32 %1005, %869
  %1007 = uitofp i32 %1006 to float
  %1008 = fsub fast float 1.000000e+00, %998
  %1009 = select i1 %999, float %1008, float %997
  %1010 = bitcast float %1009 to i32
  %1011 = bitcast float %971 to i32
  %1012 = and i32 %1011, -2147483648
  %1013 = xor i32 %1010, %1012
  %1014 = bitcast i32 %1013 to float
  %1015 = fmul fast float %1014, 5.000000e-01
  %1016 = fadd fast float %1015, 5.000000e-01
  %1017 = fmul fast float %1016, %750
  %1018 = fadd fast float %1017, %872
  %1019 = fadd fast float %1018, %1007
  %1020 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %1021 = fmul fast float %1019, %1020
  %1022 = extractvalue %dx.types.CBufRet.i32 %1002, 0
  %1023 = and i32 %1022, %929
  %1024 = mul i32 %1023, %869
  %1025 = uitofp i32 %1024 to float
  %1026 = fsub fast float 1.000000e+00, %997
  %1027 = select i1 %999, float %1026, float %998
  %1028 = bitcast float %1027 to i32
  %1029 = bitcast float %970 to i32
  %1030 = and i32 %1029, -2147483648
  %1031 = xor i32 %1028, %1030
  %1032 = bitcast i32 %1031 to float
  %1033 = fmul fast float %1032, 5.000000e-01
  %1034 = fadd fast float %1033, 5.000000e-01
  %1035 = fmul fast float %1034, %750
  %1036 = fadd fast float %1035, %872
  %1037 = fadd fast float %1036, %1025
  %1038 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %1039 = fmul fast float %1037, %1038
  %1040 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1041 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1042 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1040, %dx.types.Handle %1041, float %1039, float %1021, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1043 = extractvalue %dx.types.ResRet.f32 %1042, 0
  %1044 = extractvalue %dx.types.ResRet.f32 %1042, 1
  %1045 = extractvalue %dx.types.ResRet.f32 %1042, 2
  br label %1046

; <label>:1046                                    ; preds = %1001, %956
  %1047 = phi float [ %1043, %1001 ], [ 0.000000e+00, %956 ]
  %1048 = phi float [ %1044, %1001 ], [ 0.000000e+00, %956 ]
  %1049 = phi float [ %1045, %1001 ], [ 0.000000e+00, %956 ]
  %1050 = fmul fast float %1047, %967
  %1051 = fmul fast float %1048, %967
  %1052 = fmul fast float %1049, %967
  %1053 = add i32 %767, 1
  %1054 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %776, i32 %1053, i32 %768, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1055 = extractvalue %dx.types.ResRet.i32 %1054, 0
  %1056 = uitofp i32 %1053 to float
  %1057 = fmul fast float %783, %1056
  %1058 = fadd fast float %1057, %790
  %1059 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %1055, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1060 = extractvalue %dx.types.ResRet.f32 %1059, 0
  %1061 = extractvalue %dx.types.ResRet.f32 %1059, 1
  %1062 = extractvalue %dx.types.ResRet.f32 %1059, 2
  %1063 = fadd fast float %792, %1060
  %1064 = fadd fast float %1058, %1061
  %1065 = fadd fast float %794, %1062
  %1066 = fsub fast float %117, %1063
  %1067 = fsub fast float %121, %1064
  %1068 = fsub fast float %125, %1065
  %1069 = call float @dx.op.dot3.f32(i32 55, float %1066, float %1067, float %1068, float %1066, float %1067, float %1068)  ; Dot3(ax,ay,az,bx,by,bz)
  %1070 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %1066, float %1067, float %1068)  ; Dot3(ax,ay,az,bx,by,bz)
  %1071 = fmul fast float %1070, 2.000000e+00
  %1072 = fsub fast float %1069, %813
  %1073 = fmul fast float %1071, %1071
  %1074 = fmul fast float %816, %1072
  %1075 = fsub fast float %1073, %1074
  %1076 = fcmp fast ult float %1075, 0.000000e+00
  br i1 %1076, label %1082, label %1077, !dx.controlflow.hints !44

; <label>:1077                                    ; preds = %1046
  %1078 = call float @dx.op.unary.f32(i32 24, float %1075)  ; Sqrt(value)
  %1079 = fsub fast float %1078, %1071
  %1080 = fmul fast float %810, 2.000000e+00
  %1081 = fdiv fast float %1079, %1080
  br label %1082

; <label>:1082                                    ; preds = %1077, %1046
  %1083 = phi float [ %1081, %1077 ], [ -1.000000e+00, %1046 ]
  %1084 = fmul fast float %1083, %159
  %1085 = fmul fast float %1083, %160
  %1086 = fmul fast float %1083, %161
  %1087 = fadd fast float %1066, %1084
  %1088 = fadd fast float %1067, %1085
  %1089 = fadd fast float %1068, %1086
  %1090 = fmul fast float %1083, %1083
  %1091 = call float @dx.op.dot3.f32(i32 55, float %1087, float %1088, float %1089, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %1092 = fmul fast float %1091, %805
  %1093 = fdiv fast float %1090, %1092
  %1094 = call float @dx.op.dot3.f32(i32 55, float %1087, float %1088, float %1089, float %1087, float %1088, float %1089)  ; Dot3(ax,ay,az,bx,by,bz)
  %1095 = call float @dx.op.unary.f32(i32 25, float %1094)  ; Rsqrt(value)
  %1096 = fmul fast float %1095, %1087
  %1097 = fmul fast float %1095, %1088
  %1098 = fmul fast float %1095, %1089
  %1099 = call float @dx.op.unary.f32(i32 6, float %1096)  ; FAbs(value)
  %1100 = call float @dx.op.unary.f32(i32 6, float %1097)  ; FAbs(value)
  %1101 = call float @dx.op.unary.f32(i32 6, float %1098)  ; FAbs(value)
  %1102 = fsub fast float 1.000000e+00, %1101
  %1103 = call float @dx.op.unary.f32(i32 24, float %1102)  ; Sqrt(value)
  %1104 = call float @dx.op.binary.f32(i32 36, float %1099, float %1100)  ; FMin(a,b)
  %1105 = call float @dx.op.binary.f32(i32 35, float %1099, float %1100)  ; FMax(a,b)
  %1106 = fadd fast float %1105, 0x3BF0000000000000
  %1107 = fdiv fast float %1104, %1106
  %1108 = fmul fast float %1107, 0x3F99BE1040000000
  %1109 = fsub fast float 0x3FA5746D00000000, %1108
  %1110 = fmul fast float %1109, %1107
  %1111 = fadd fast float %1110, 0x3FB692C5C0000000
  %1112 = fmul fast float %1111, %1107
  %1113 = fadd fast float %1112, 0xBFCFA8A1C0000000
  %1114 = fmul fast float %1113, %1107
  %1115 = fadd fast float %1114, 0x3F79384B40000000
  %1116 = fmul fast float %1115, %1107
  %1117 = fadd fast float %1116, 0x3FE45BF7C0000000
  %1118 = fmul fast float %1117, %1107
  %1119 = fadd fast float %1118, 0x3ED10F8960000000
  %1120 = fcmp fast olt float %1099, %1100
  %1121 = fsub fast float 0x3FEFFFF780000000, %1118
  %1122 = select i1 %1120, float %1121, float %1119
  %1123 = fmul fast float %1122, %1103
  %1124 = fsub fast float %1103, %1123
  %1125 = fcmp fast olt float %1098, 0.000000e+00
  %1126 = icmp eq i32 %1055, -1
  br i1 %1126, label %1172, label %1127

; <label>:1127                                    ; preds = %1082
  %1128 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1129 = extractvalue %dx.types.CBufRet.i32 %1128, 1
  %1130 = and i32 %1129, 31
  %1131 = lshr i32 %1055, %1130
  %1132 = mul i32 %1131, %869
  %1133 = uitofp i32 %1132 to float
  %1134 = fsub fast float 1.000000e+00, %1124
  %1135 = select i1 %1125, float %1134, float %1123
  %1136 = bitcast float %1135 to i32
  %1137 = bitcast float %1097 to i32
  %1138 = and i32 %1137, -2147483648
  %1139 = xor i32 %1136, %1138
  %1140 = bitcast i32 %1139 to float
  %1141 = fmul fast float %1140, 5.000000e-01
  %1142 = fadd fast float %1141, 5.000000e-01
  %1143 = fmul fast float %1142, %750
  %1144 = fadd fast float %1143, %872
  %1145 = fadd fast float %1144, %1133
  %1146 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %1147 = fmul fast float %1145, %1146
  %1148 = extractvalue %dx.types.CBufRet.i32 %1128, 0
  %1149 = and i32 %1148, %1055
  %1150 = mul i32 %1149, %869
  %1151 = uitofp i32 %1150 to float
  %1152 = fsub fast float 1.000000e+00, %1123
  %1153 = select i1 %1125, float %1152, float %1124
  %1154 = bitcast float %1153 to i32
  %1155 = bitcast float %1096 to i32
  %1156 = and i32 %1155, -2147483648
  %1157 = xor i32 %1154, %1156
  %1158 = bitcast i32 %1157 to float
  %1159 = fmul fast float %1158, 5.000000e-01
  %1160 = fadd fast float %1159, 5.000000e-01
  %1161 = fmul fast float %1160, %750
  %1162 = fadd fast float %1161, %872
  %1163 = fadd fast float %1162, %1151
  %1164 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %1165 = fmul fast float %1163, %1164
  %1166 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1167 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1168 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1166, %dx.types.Handle %1167, float %1165, float %1147, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1169 = extractvalue %dx.types.ResRet.f32 %1168, 0
  %1170 = extractvalue %dx.types.ResRet.f32 %1168, 1
  %1171 = extractvalue %dx.types.ResRet.f32 %1168, 2
  br label %1172

; <label>:1172                                    ; preds = %1127, %1082
  %1173 = phi float [ %1169, %1127 ], [ 0.000000e+00, %1082 ]
  %1174 = phi float [ %1170, %1127 ], [ 0.000000e+00, %1082 ]
  %1175 = phi float [ %1171, %1127 ], [ 0.000000e+00, %1082 ]
  %1176 = fmul fast float %1173, %1093
  %1177 = fmul fast float %1174, %1093
  %1178 = fmul fast float %1175, %1093
  %1179 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %776, i32 %1053, i32 %927, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1180 = extractvalue %dx.types.ResRet.i32 %1179, 0
  %1181 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %1180, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1182 = extractvalue %dx.types.ResRet.f32 %1181, 0
  %1183 = extractvalue %dx.types.ResRet.f32 %1181, 1
  %1184 = extractvalue %dx.types.ResRet.f32 %1181, 2
  %1185 = fadd fast float %792, %1182
  %1186 = fadd fast float %1058, %1183
  %1187 = fadd fast float %932, %1184
  %1188 = fsub fast float %117, %1185
  %1189 = fsub fast float %121, %1186
  %1190 = fsub fast float %125, %1187
  %1191 = call float @dx.op.dot3.f32(i32 55, float %1188, float %1189, float %1190, float %1188, float %1189, float %1190)  ; Dot3(ax,ay,az,bx,by,bz)
  %1192 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %1188, float %1189, float %1190)  ; Dot3(ax,ay,az,bx,by,bz)
  %1193 = fmul fast float %1192, 2.000000e+00
  %1194 = fsub fast float %1191, %813
  %1195 = fmul fast float %1193, %1193
  %1196 = fmul fast float %816, %1194
  %1197 = fsub fast float %1195, %1196
  %1198 = fcmp fast ult float %1197, 0.000000e+00
  br i1 %1198, label %1204, label %1199, !dx.controlflow.hints !44

; <label>:1199                                    ; preds = %1172
  %1200 = call float @dx.op.unary.f32(i32 24, float %1197)  ; Sqrt(value)
  %1201 = fsub fast float %1200, %1193
  %1202 = fmul fast float %810, 2.000000e+00
  %1203 = fdiv fast float %1201, %1202
  br label %1204

; <label>:1204                                    ; preds = %1199, %1172
  %1205 = phi float [ %1203, %1199 ], [ -1.000000e+00, %1172 ]
  %1206 = fmul fast float %1205, %159
  %1207 = fmul fast float %1205, %160
  %1208 = fmul fast float %1205, %161
  %1209 = fadd fast float %1188, %1206
  %1210 = fadd fast float %1189, %1207
  %1211 = fadd fast float %1190, %1208
  %1212 = fmul fast float %1205, %1205
  %1213 = call float @dx.op.dot3.f32(i32 55, float %1209, float %1210, float %1211, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %1214 = fmul fast float %1213, %805
  %1215 = fdiv fast float %1212, %1214
  %1216 = call float @dx.op.dot3.f32(i32 55, float %1209, float %1210, float %1211, float %1209, float %1210, float %1211)  ; Dot3(ax,ay,az,bx,by,bz)
  %1217 = call float @dx.op.unary.f32(i32 25, float %1216)  ; Rsqrt(value)
  %1218 = fmul fast float %1217, %1209
  %1219 = fmul fast float %1217, %1210
  %1220 = fmul fast float %1217, %1211
  %1221 = call float @dx.op.unary.f32(i32 6, float %1218)  ; FAbs(value)
  %1222 = call float @dx.op.unary.f32(i32 6, float %1219)  ; FAbs(value)
  %1223 = call float @dx.op.unary.f32(i32 6, float %1220)  ; FAbs(value)
  %1224 = fsub fast float 1.000000e+00, %1223
  %1225 = call float @dx.op.unary.f32(i32 24, float %1224)  ; Sqrt(value)
  %1226 = call float @dx.op.binary.f32(i32 36, float %1221, float %1222)  ; FMin(a,b)
  %1227 = call float @dx.op.binary.f32(i32 35, float %1221, float %1222)  ; FMax(a,b)
  %1228 = fadd fast float %1227, 0x3BF0000000000000
  %1229 = fdiv fast float %1226, %1228
  %1230 = fmul fast float %1229, 0x3F99BE1040000000
  %1231 = fsub fast float 0x3FA5746D00000000, %1230
  %1232 = fmul fast float %1231, %1229
  %1233 = fadd fast float %1232, 0x3FB692C5C0000000
  %1234 = fmul fast float %1233, %1229
  %1235 = fadd fast float %1234, 0xBFCFA8A1C0000000
  %1236 = fmul fast float %1235, %1229
  %1237 = fadd fast float %1236, 0x3F79384B40000000
  %1238 = fmul fast float %1237, %1229
  %1239 = fadd fast float %1238, 0x3FE45BF7C0000000
  %1240 = fmul fast float %1239, %1229
  %1241 = fadd fast float %1240, 0x3ED10F8960000000
  %1242 = fcmp fast olt float %1221, %1222
  %1243 = fsub fast float 0x3FEFFFF780000000, %1240
  %1244 = select i1 %1242, float %1243, float %1241
  %1245 = fmul fast float %1244, %1225
  %1246 = fsub fast float %1225, %1245
  %1247 = fcmp fast olt float %1220, 0.000000e+00
  %1248 = icmp eq i32 %1180, -1
  br i1 %1248, label %1294, label %1249

; <label>:1249                                    ; preds = %1204
  %1250 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1251 = extractvalue %dx.types.CBufRet.i32 %1250, 1
  %1252 = and i32 %1251, 31
  %1253 = lshr i32 %1180, %1252
  %1254 = mul i32 %1253, %869
  %1255 = uitofp i32 %1254 to float
  %1256 = fsub fast float 1.000000e+00, %1246
  %1257 = select i1 %1247, float %1256, float %1245
  %1258 = bitcast float %1257 to i32
  %1259 = bitcast float %1219 to i32
  %1260 = and i32 %1259, -2147483648
  %1261 = xor i32 %1258, %1260
  %1262 = bitcast i32 %1261 to float
  %1263 = fmul fast float %1262, 5.000000e-01
  %1264 = fadd fast float %1263, 5.000000e-01
  %1265 = fmul fast float %1264, %750
  %1266 = fadd fast float %1265, %872
  %1267 = fadd fast float %1266, %1255
  %1268 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %1269 = fmul fast float %1267, %1268
  %1270 = extractvalue %dx.types.CBufRet.i32 %1250, 0
  %1271 = and i32 %1270, %1180
  %1272 = mul i32 %1271, %869
  %1273 = uitofp i32 %1272 to float
  %1274 = fsub fast float 1.000000e+00, %1245
  %1275 = select i1 %1247, float %1274, float %1246
  %1276 = bitcast float %1275 to i32
  %1277 = bitcast float %1218 to i32
  %1278 = and i32 %1277, -2147483648
  %1279 = xor i32 %1276, %1278
  %1280 = bitcast i32 %1279 to float
  %1281 = fmul fast float %1280, 5.000000e-01
  %1282 = fadd fast float %1281, 5.000000e-01
  %1283 = fmul fast float %1282, %750
  %1284 = fadd fast float %1283, %872
  %1285 = fadd fast float %1284, %1273
  %1286 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %1287 = fmul fast float %1285, %1286
  %1288 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1289 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1290 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1288, %dx.types.Handle %1289, float %1287, float %1269, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1291 = extractvalue %dx.types.ResRet.f32 %1290, 0
  %1292 = extractvalue %dx.types.ResRet.f32 %1290, 1
  %1293 = extractvalue %dx.types.ResRet.f32 %1290, 2
  br label %1294

; <label>:1294                                    ; preds = %1249, %1204
  %1295 = phi float [ %1291, %1249 ], [ 0.000000e+00, %1204 ]
  %1296 = phi float [ %1292, %1249 ], [ 0.000000e+00, %1204 ]
  %1297 = phi float [ %1293, %1249 ], [ 0.000000e+00, %1204 ]
  %1298 = fmul fast float %1295, %1215
  %1299 = fmul fast float %1296, %1215
  %1300 = fmul fast float %1297, %1215
  %1301 = add i32 %766, 1
  %1302 = add i32 %775, %1301
  %1303 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %1302, i32 %767, i32 %768, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1304 = extractvalue %dx.types.ResRet.i32 %1303, 0
  %1305 = uitofp i32 %1301 to float
  %1306 = fmul fast float %783, %1305
  %1307 = fadd fast float %1306, %789
  %1308 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %1304, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1309 = extractvalue %dx.types.ResRet.f32 %1308, 0
  %1310 = extractvalue %dx.types.ResRet.f32 %1308, 1
  %1311 = extractvalue %dx.types.ResRet.f32 %1308, 2
  %1312 = fadd fast float %1307, %1309
  %1313 = fadd fast float %793, %1310
  %1314 = fadd fast float %794, %1311
  %1315 = fsub fast float %117, %1312
  %1316 = fsub fast float %121, %1313
  %1317 = fsub fast float %125, %1314
  %1318 = call float @dx.op.dot3.f32(i32 55, float %1315, float %1316, float %1317, float %1315, float %1316, float %1317)  ; Dot3(ax,ay,az,bx,by,bz)
  %1319 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %1315, float %1316, float %1317)  ; Dot3(ax,ay,az,bx,by,bz)
  %1320 = fmul fast float %1319, 2.000000e+00
  %1321 = fsub fast float %1318, %813
  %1322 = fmul fast float %1320, %1320
  %1323 = fmul fast float %816, %1321
  %1324 = fsub fast float %1322, %1323
  %1325 = fcmp fast ult float %1324, 0.000000e+00
  br i1 %1325, label %1331, label %1326, !dx.controlflow.hints !44

; <label>:1326                                    ; preds = %1294
  %1327 = call float @dx.op.unary.f32(i32 24, float %1324)  ; Sqrt(value)
  %1328 = fsub fast float %1327, %1320
  %1329 = fmul fast float %810, 2.000000e+00
  %1330 = fdiv fast float %1328, %1329
  br label %1331

; <label>:1331                                    ; preds = %1326, %1294
  %1332 = phi float [ %1330, %1326 ], [ -1.000000e+00, %1294 ]
  %1333 = fmul fast float %1332, %159
  %1334 = fmul fast float %1332, %160
  %1335 = fmul fast float %1332, %161
  %1336 = fadd fast float %1315, %1333
  %1337 = fadd fast float %1316, %1334
  %1338 = fadd fast float %1317, %1335
  %1339 = fmul fast float %1332, %1332
  %1340 = call float @dx.op.dot3.f32(i32 55, float %1336, float %1337, float %1338, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %1341 = fmul fast float %1340, %805
  %1342 = fdiv fast float %1339, %1341
  %1343 = call float @dx.op.dot3.f32(i32 55, float %1336, float %1337, float %1338, float %1336, float %1337, float %1338)  ; Dot3(ax,ay,az,bx,by,bz)
  %1344 = call float @dx.op.unary.f32(i32 25, float %1343)  ; Rsqrt(value)
  %1345 = fmul fast float %1344, %1336
  %1346 = fmul fast float %1344, %1337
  %1347 = fmul fast float %1344, %1338
  %1348 = call float @dx.op.unary.f32(i32 6, float %1345)  ; FAbs(value)
  %1349 = call float @dx.op.unary.f32(i32 6, float %1346)  ; FAbs(value)
  %1350 = call float @dx.op.unary.f32(i32 6, float %1347)  ; FAbs(value)
  %1351 = fsub fast float 1.000000e+00, %1350
  %1352 = call float @dx.op.unary.f32(i32 24, float %1351)  ; Sqrt(value)
  %1353 = call float @dx.op.binary.f32(i32 36, float %1348, float %1349)  ; FMin(a,b)
  %1354 = call float @dx.op.binary.f32(i32 35, float %1348, float %1349)  ; FMax(a,b)
  %1355 = fadd fast float %1354, 0x3BF0000000000000
  %1356 = fdiv fast float %1353, %1355
  %1357 = fmul fast float %1356, 0x3F99BE1040000000
  %1358 = fsub fast float 0x3FA5746D00000000, %1357
  %1359 = fmul fast float %1358, %1356
  %1360 = fadd fast float %1359, 0x3FB692C5C0000000
  %1361 = fmul fast float %1360, %1356
  %1362 = fadd fast float %1361, 0xBFCFA8A1C0000000
  %1363 = fmul fast float %1362, %1356
  %1364 = fadd fast float %1363, 0x3F79384B40000000
  %1365 = fmul fast float %1364, %1356
  %1366 = fadd fast float %1365, 0x3FE45BF7C0000000
  %1367 = fmul fast float %1366, %1356
  %1368 = fadd fast float %1367, 0x3ED10F8960000000
  %1369 = fcmp fast olt float %1348, %1349
  %1370 = fsub fast float 0x3FEFFFF780000000, %1367
  %1371 = select i1 %1369, float %1370, float %1368
  %1372 = fmul fast float %1371, %1352
  %1373 = fsub fast float %1352, %1372
  %1374 = fcmp fast olt float %1347, 0.000000e+00
  %1375 = icmp eq i32 %1304, -1
  br i1 %1375, label %1421, label %1376

; <label>:1376                                    ; preds = %1331
  %1377 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1378 = extractvalue %dx.types.CBufRet.i32 %1377, 1
  %1379 = and i32 %1378, 31
  %1380 = lshr i32 %1304, %1379
  %1381 = mul i32 %1380, %869
  %1382 = uitofp i32 %1381 to float
  %1383 = fsub fast float 1.000000e+00, %1373
  %1384 = select i1 %1374, float %1383, float %1372
  %1385 = bitcast float %1384 to i32
  %1386 = bitcast float %1346 to i32
  %1387 = and i32 %1386, -2147483648
  %1388 = xor i32 %1385, %1387
  %1389 = bitcast i32 %1388 to float
  %1390 = fmul fast float %1389, 5.000000e-01
  %1391 = fadd fast float %1390, 5.000000e-01
  %1392 = fmul fast float %1391, %750
  %1393 = fadd fast float %1392, %872
  %1394 = fadd fast float %1393, %1382
  %1395 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %1396 = fmul fast float %1394, %1395
  %1397 = extractvalue %dx.types.CBufRet.i32 %1377, 0
  %1398 = and i32 %1397, %1304
  %1399 = mul i32 %1398, %869
  %1400 = uitofp i32 %1399 to float
  %1401 = fsub fast float 1.000000e+00, %1372
  %1402 = select i1 %1374, float %1401, float %1373
  %1403 = bitcast float %1402 to i32
  %1404 = bitcast float %1345 to i32
  %1405 = and i32 %1404, -2147483648
  %1406 = xor i32 %1403, %1405
  %1407 = bitcast i32 %1406 to float
  %1408 = fmul fast float %1407, 5.000000e-01
  %1409 = fadd fast float %1408, 5.000000e-01
  %1410 = fmul fast float %1409, %750
  %1411 = fadd fast float %1410, %872
  %1412 = fadd fast float %1411, %1400
  %1413 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %1414 = fmul fast float %1412, %1413
  %1415 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1416 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1417 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1415, %dx.types.Handle %1416, float %1414, float %1396, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1418 = extractvalue %dx.types.ResRet.f32 %1417, 0
  %1419 = extractvalue %dx.types.ResRet.f32 %1417, 1
  %1420 = extractvalue %dx.types.ResRet.f32 %1417, 2
  br label %1421

; <label>:1421                                    ; preds = %1376, %1331
  %1422 = phi float [ %1418, %1376 ], [ 0.000000e+00, %1331 ]
  %1423 = phi float [ %1419, %1376 ], [ 0.000000e+00, %1331 ]
  %1424 = phi float [ %1420, %1376 ], [ 0.000000e+00, %1331 ]
  %1425 = fmul fast float %1422, %1342
  %1426 = fmul fast float %1423, %1342
  %1427 = fmul fast float %1424, %1342
  %1428 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %1302, i32 %767, i32 %927, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1429 = extractvalue %dx.types.ResRet.i32 %1428, 0
  %1430 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %1429, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1431 = extractvalue %dx.types.ResRet.f32 %1430, 0
  %1432 = extractvalue %dx.types.ResRet.f32 %1430, 1
  %1433 = extractvalue %dx.types.ResRet.f32 %1430, 2
  %1434 = fadd fast float %1307, %1431
  %1435 = fadd fast float %793, %1432
  %1436 = fadd fast float %932, %1433
  %1437 = fsub fast float %117, %1434
  %1438 = fsub fast float %121, %1435
  %1439 = fsub fast float %125, %1436
  %1440 = call float @dx.op.dot3.f32(i32 55, float %1437, float %1438, float %1439, float %1437, float %1438, float %1439)  ; Dot3(ax,ay,az,bx,by,bz)
  %1441 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %1437, float %1438, float %1439)  ; Dot3(ax,ay,az,bx,by,bz)
  %1442 = fmul fast float %1441, 2.000000e+00
  %1443 = fsub fast float %1440, %813
  %1444 = fmul fast float %1442, %1442
  %1445 = fmul fast float %816, %1443
  %1446 = fsub fast float %1444, %1445
  %1447 = fcmp fast ult float %1446, 0.000000e+00
  br i1 %1447, label %1453, label %1448, !dx.controlflow.hints !44

; <label>:1448                                    ; preds = %1421
  %1449 = call float @dx.op.unary.f32(i32 24, float %1446)  ; Sqrt(value)
  %1450 = fsub fast float %1449, %1442
  %1451 = fmul fast float %810, 2.000000e+00
  %1452 = fdiv fast float %1450, %1451
  br label %1453

; <label>:1453                                    ; preds = %1448, %1421
  %1454 = phi float [ %1452, %1448 ], [ -1.000000e+00, %1421 ]
  %1455 = fmul fast float %1454, %159
  %1456 = fmul fast float %1454, %160
  %1457 = fmul fast float %1454, %161
  %1458 = fadd fast float %1437, %1455
  %1459 = fadd fast float %1438, %1456
  %1460 = fadd fast float %1439, %1457
  %1461 = fmul fast float %1454, %1454
  %1462 = call float @dx.op.dot3.f32(i32 55, float %1458, float %1459, float %1460, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %1463 = fmul fast float %1462, %805
  %1464 = fdiv fast float %1461, %1463
  %1465 = call float @dx.op.dot3.f32(i32 55, float %1458, float %1459, float %1460, float %1458, float %1459, float %1460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1466 = call float @dx.op.unary.f32(i32 25, float %1465)  ; Rsqrt(value)
  %1467 = fmul fast float %1466, %1458
  %1468 = fmul fast float %1466, %1459
  %1469 = fmul fast float %1466, %1460
  %1470 = call float @dx.op.unary.f32(i32 6, float %1467)  ; FAbs(value)
  %1471 = call float @dx.op.unary.f32(i32 6, float %1468)  ; FAbs(value)
  %1472 = call float @dx.op.unary.f32(i32 6, float %1469)  ; FAbs(value)
  %1473 = fsub fast float 1.000000e+00, %1472
  %1474 = call float @dx.op.unary.f32(i32 24, float %1473)  ; Sqrt(value)
  %1475 = call float @dx.op.binary.f32(i32 36, float %1470, float %1471)  ; FMin(a,b)
  %1476 = call float @dx.op.binary.f32(i32 35, float %1470, float %1471)  ; FMax(a,b)
  %1477 = fadd fast float %1476, 0x3BF0000000000000
  %1478 = fdiv fast float %1475, %1477
  %1479 = fmul fast float %1478, 0x3F99BE1040000000
  %1480 = fsub fast float 0x3FA5746D00000000, %1479
  %1481 = fmul fast float %1480, %1478
  %1482 = fadd fast float %1481, 0x3FB692C5C0000000
  %1483 = fmul fast float %1482, %1478
  %1484 = fadd fast float %1483, 0xBFCFA8A1C0000000
  %1485 = fmul fast float %1484, %1478
  %1486 = fadd fast float %1485, 0x3F79384B40000000
  %1487 = fmul fast float %1486, %1478
  %1488 = fadd fast float %1487, 0x3FE45BF7C0000000
  %1489 = fmul fast float %1488, %1478
  %1490 = fadd fast float %1489, 0x3ED10F8960000000
  %1491 = fcmp fast olt float %1470, %1471
  %1492 = fsub fast float 0x3FEFFFF780000000, %1489
  %1493 = select i1 %1491, float %1492, float %1490
  %1494 = fmul fast float %1493, %1474
  %1495 = fsub fast float %1474, %1494
  %1496 = fcmp fast olt float %1469, 0.000000e+00
  %1497 = icmp eq i32 %1429, -1
  br i1 %1497, label %1543, label %1498

; <label>:1498                                    ; preds = %1453
  %1499 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1500 = extractvalue %dx.types.CBufRet.i32 %1499, 1
  %1501 = and i32 %1500, 31
  %1502 = lshr i32 %1429, %1501
  %1503 = mul i32 %1502, %869
  %1504 = uitofp i32 %1503 to float
  %1505 = fsub fast float 1.000000e+00, %1495
  %1506 = select i1 %1496, float %1505, float %1494
  %1507 = bitcast float %1506 to i32
  %1508 = bitcast float %1468 to i32
  %1509 = and i32 %1508, -2147483648
  %1510 = xor i32 %1507, %1509
  %1511 = bitcast i32 %1510 to float
  %1512 = fmul fast float %1511, 5.000000e-01
  %1513 = fadd fast float %1512, 5.000000e-01
  %1514 = fmul fast float %1513, %750
  %1515 = fadd fast float %1514, %872
  %1516 = fadd fast float %1515, %1504
  %1517 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %1518 = fmul fast float %1516, %1517
  %1519 = extractvalue %dx.types.CBufRet.i32 %1499, 0
  %1520 = and i32 %1519, %1429
  %1521 = mul i32 %1520, %869
  %1522 = uitofp i32 %1521 to float
  %1523 = fsub fast float 1.000000e+00, %1494
  %1524 = select i1 %1496, float %1523, float %1495
  %1525 = bitcast float %1524 to i32
  %1526 = bitcast float %1467 to i32
  %1527 = and i32 %1526, -2147483648
  %1528 = xor i32 %1525, %1527
  %1529 = bitcast i32 %1528 to float
  %1530 = fmul fast float %1529, 5.000000e-01
  %1531 = fadd fast float %1530, 5.000000e-01
  %1532 = fmul fast float %1531, %750
  %1533 = fadd fast float %1532, %872
  %1534 = fadd fast float %1533, %1522
  %1535 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %1536 = fmul fast float %1534, %1535
  %1537 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1538 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1539 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1537, %dx.types.Handle %1538, float %1536, float %1518, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1540 = extractvalue %dx.types.ResRet.f32 %1539, 0
  %1541 = extractvalue %dx.types.ResRet.f32 %1539, 1
  %1542 = extractvalue %dx.types.ResRet.f32 %1539, 2
  br label %1543

; <label>:1543                                    ; preds = %1498, %1453
  %1544 = phi float [ %1540, %1498 ], [ 0.000000e+00, %1453 ]
  %1545 = phi float [ %1541, %1498 ], [ 0.000000e+00, %1453 ]
  %1546 = phi float [ %1542, %1498 ], [ 0.000000e+00, %1453 ]
  %1547 = fmul fast float %1544, %1464
  %1548 = fmul fast float %1545, %1464
  %1549 = fmul fast float %1546, %1464
  %1550 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %1302, i32 %1053, i32 %768, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1551 = extractvalue %dx.types.ResRet.i32 %1550, 0
  %1552 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %1551, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1553 = extractvalue %dx.types.ResRet.f32 %1552, 0
  %1554 = extractvalue %dx.types.ResRet.f32 %1552, 1
  %1555 = extractvalue %dx.types.ResRet.f32 %1552, 2
  %1556 = fadd fast float %1307, %1553
  %1557 = fadd fast float %1058, %1554
  %1558 = fadd fast float %794, %1555
  %1559 = fsub fast float %117, %1556
  %1560 = fsub fast float %121, %1557
  %1561 = fsub fast float %125, %1558
  %1562 = call float @dx.op.dot3.f32(i32 55, float %1559, float %1560, float %1561, float %1559, float %1560, float %1561)  ; Dot3(ax,ay,az,bx,by,bz)
  %1563 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %1559, float %1560, float %1561)  ; Dot3(ax,ay,az,bx,by,bz)
  %1564 = fmul fast float %1563, 2.000000e+00
  %1565 = fsub fast float %1562, %813
  %1566 = fmul fast float %1564, %1564
  %1567 = fmul fast float %816, %1565
  %1568 = fsub fast float %1566, %1567
  %1569 = fcmp fast ult float %1568, 0.000000e+00
  br i1 %1569, label %1575, label %1570, !dx.controlflow.hints !44

; <label>:1570                                    ; preds = %1543
  %1571 = call float @dx.op.unary.f32(i32 24, float %1568)  ; Sqrt(value)
  %1572 = fsub fast float %1571, %1564
  %1573 = fmul fast float %810, 2.000000e+00
  %1574 = fdiv fast float %1572, %1573
  br label %1575

; <label>:1575                                    ; preds = %1570, %1543
  %1576 = phi float [ %1574, %1570 ], [ -1.000000e+00, %1543 ]
  %1577 = fmul fast float %1576, %159
  %1578 = fmul fast float %1576, %160
  %1579 = fmul fast float %1576, %161
  %1580 = fadd fast float %1559, %1577
  %1581 = fadd fast float %1560, %1578
  %1582 = fadd fast float %1561, %1579
  %1583 = fmul fast float %1576, %1576
  %1584 = call float @dx.op.dot3.f32(i32 55, float %1580, float %1581, float %1582, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %1585 = fmul fast float %1584, %805
  %1586 = fdiv fast float %1583, %1585
  %1587 = call float @dx.op.dot3.f32(i32 55, float %1580, float %1581, float %1582, float %1580, float %1581, float %1582)  ; Dot3(ax,ay,az,bx,by,bz)
  %1588 = call float @dx.op.unary.f32(i32 25, float %1587)  ; Rsqrt(value)
  %1589 = fmul fast float %1588, %1580
  %1590 = fmul fast float %1588, %1581
  %1591 = fmul fast float %1588, %1582
  %1592 = call float @dx.op.unary.f32(i32 6, float %1589)  ; FAbs(value)
  %1593 = call float @dx.op.unary.f32(i32 6, float %1590)  ; FAbs(value)
  %1594 = call float @dx.op.unary.f32(i32 6, float %1591)  ; FAbs(value)
  %1595 = fsub fast float 1.000000e+00, %1594
  %1596 = call float @dx.op.unary.f32(i32 24, float %1595)  ; Sqrt(value)
  %1597 = call float @dx.op.binary.f32(i32 36, float %1592, float %1593)  ; FMin(a,b)
  %1598 = call float @dx.op.binary.f32(i32 35, float %1592, float %1593)  ; FMax(a,b)
  %1599 = fadd fast float %1598, 0x3BF0000000000000
  %1600 = fdiv fast float %1597, %1599
  %1601 = fmul fast float %1600, 0x3F99BE1040000000
  %1602 = fsub fast float 0x3FA5746D00000000, %1601
  %1603 = fmul fast float %1602, %1600
  %1604 = fadd fast float %1603, 0x3FB692C5C0000000
  %1605 = fmul fast float %1604, %1600
  %1606 = fadd fast float %1605, 0xBFCFA8A1C0000000
  %1607 = fmul fast float %1606, %1600
  %1608 = fadd fast float %1607, 0x3F79384B40000000
  %1609 = fmul fast float %1608, %1600
  %1610 = fadd fast float %1609, 0x3FE45BF7C0000000
  %1611 = fmul fast float %1610, %1600
  %1612 = fadd fast float %1611, 0x3ED10F8960000000
  %1613 = fcmp fast olt float %1592, %1593
  %1614 = fsub fast float 0x3FEFFFF780000000, %1611
  %1615 = select i1 %1613, float %1614, float %1612
  %1616 = fmul fast float %1615, %1596
  %1617 = fsub fast float %1596, %1616
  %1618 = fcmp fast olt float %1591, 0.000000e+00
  %1619 = icmp eq i32 %1551, -1
  br i1 %1619, label %1665, label %1620

; <label>:1620                                    ; preds = %1575
  %1621 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1622 = extractvalue %dx.types.CBufRet.i32 %1621, 1
  %1623 = and i32 %1622, 31
  %1624 = lshr i32 %1551, %1623
  %1625 = mul i32 %1624, %869
  %1626 = uitofp i32 %1625 to float
  %1627 = fsub fast float 1.000000e+00, %1617
  %1628 = select i1 %1618, float %1627, float %1616
  %1629 = bitcast float %1628 to i32
  %1630 = bitcast float %1590 to i32
  %1631 = and i32 %1630, -2147483648
  %1632 = xor i32 %1629, %1631
  %1633 = bitcast i32 %1632 to float
  %1634 = fmul fast float %1633, 5.000000e-01
  %1635 = fadd fast float %1634, 5.000000e-01
  %1636 = fmul fast float %1635, %750
  %1637 = fadd fast float %1636, %872
  %1638 = fadd fast float %1637, %1626
  %1639 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %1640 = fmul fast float %1638, %1639
  %1641 = extractvalue %dx.types.CBufRet.i32 %1621, 0
  %1642 = and i32 %1641, %1551
  %1643 = mul i32 %1642, %869
  %1644 = uitofp i32 %1643 to float
  %1645 = fsub fast float 1.000000e+00, %1616
  %1646 = select i1 %1618, float %1645, float %1617
  %1647 = bitcast float %1646 to i32
  %1648 = bitcast float %1589 to i32
  %1649 = and i32 %1648, -2147483648
  %1650 = xor i32 %1647, %1649
  %1651 = bitcast i32 %1650 to float
  %1652 = fmul fast float %1651, 5.000000e-01
  %1653 = fadd fast float %1652, 5.000000e-01
  %1654 = fmul fast float %1653, %750
  %1655 = fadd fast float %1654, %872
  %1656 = fadd fast float %1655, %1644
  %1657 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %1658 = fmul fast float %1656, %1657
  %1659 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1660 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1661 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1659, %dx.types.Handle %1660, float %1658, float %1640, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1662 = extractvalue %dx.types.ResRet.f32 %1661, 0
  %1663 = extractvalue %dx.types.ResRet.f32 %1661, 1
  %1664 = extractvalue %dx.types.ResRet.f32 %1661, 2
  br label %1665

; <label>:1665                                    ; preds = %1620, %1575
  %1666 = phi float [ %1662, %1620 ], [ 0.000000e+00, %1575 ]
  %1667 = phi float [ %1663, %1620 ], [ 0.000000e+00, %1575 ]
  %1668 = phi float [ %1664, %1620 ], [ 0.000000e+00, %1575 ]
  %1669 = fmul fast float %1666, %1586
  %1670 = fmul fast float %1667, %1586
  %1671 = fmul fast float %1668, %1586
  %1672 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %777, i32 0, i32 %1302, i32 %1053, i32 %927, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1673 = extractvalue %dx.types.ResRet.i32 %1672, 0
  %1674 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %795, i32 %1673, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1675 = extractvalue %dx.types.ResRet.f32 %1674, 0
  %1676 = extractvalue %dx.types.ResRet.f32 %1674, 1
  %1677 = extractvalue %dx.types.ResRet.f32 %1674, 2
  %1678 = fadd fast float %1307, %1675
  %1679 = fadd fast float %1058, %1676
  %1680 = fadd fast float %932, %1677
  %1681 = fsub fast float %117, %1678
  %1682 = fsub fast float %121, %1679
  %1683 = fsub fast float %125, %1680
  %1684 = call float @dx.op.dot3.f32(i32 55, float %1681, float %1682, float %1683, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %1685 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %1686 = fmul fast float %1685, 2.000000e+00
  %1687 = fsub fast float %1684, %813
  %1688 = fmul fast float %1686, %1686
  %1689 = fmul fast float %816, %1687
  %1690 = fsub fast float %1688, %1689
  %1691 = fcmp fast ult float %1690, 0.000000e+00
  br i1 %1691, label %1697, label %1692, !dx.controlflow.hints !44

; <label>:1692                                    ; preds = %1665
  %1693 = call float @dx.op.unary.f32(i32 24, float %1690)  ; Sqrt(value)
  %1694 = fsub fast float %1693, %1686
  %1695 = fmul fast float %810, 2.000000e+00
  %1696 = fdiv fast float %1694, %1695
  br label %1697

; <label>:1697                                    ; preds = %1692, %1665
  %1698 = phi float [ %1696, %1692 ], [ -1.000000e+00, %1665 ]
  %1699 = fmul fast float %1698, %159
  %1700 = fmul fast float %1698, %160
  %1701 = fmul fast float %1698, %161
  %1702 = fadd fast float %1681, %1699
  %1703 = fadd fast float %1682, %1700
  %1704 = fadd fast float %1683, %1701
  %1705 = fmul fast float %1698, %1698
  %1706 = call float @dx.op.dot3.f32(i32 55, float %1702, float %1703, float %1704, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %1707 = fmul fast float %1706, %805
  %1708 = fdiv fast float %1705, %1707
  %1709 = call float @dx.op.dot3.f32(i32 55, float %1702, float %1703, float %1704, float %1702, float %1703, float %1704)  ; Dot3(ax,ay,az,bx,by,bz)
  %1710 = call float @dx.op.unary.f32(i32 25, float %1709)  ; Rsqrt(value)
  %1711 = fmul fast float %1710, %1702
  %1712 = fmul fast float %1710, %1703
  %1713 = fmul fast float %1710, %1704
  %1714 = call float @dx.op.unary.f32(i32 6, float %1711)  ; FAbs(value)
  %1715 = call float @dx.op.unary.f32(i32 6, float %1712)  ; FAbs(value)
  %1716 = call float @dx.op.unary.f32(i32 6, float %1713)  ; FAbs(value)
  %1717 = fsub fast float 1.000000e+00, %1716
  %1718 = call float @dx.op.unary.f32(i32 24, float %1717)  ; Sqrt(value)
  %1719 = call float @dx.op.binary.f32(i32 36, float %1714, float %1715)  ; FMin(a,b)
  %1720 = call float @dx.op.binary.f32(i32 35, float %1714, float %1715)  ; FMax(a,b)
  %1721 = fadd fast float %1720, 0x3BF0000000000000
  %1722 = fdiv fast float %1719, %1721
  %1723 = fmul fast float %1722, 0x3F99BE1040000000
  %1724 = fsub fast float 0x3FA5746D00000000, %1723
  %1725 = fmul fast float %1724, %1722
  %1726 = fadd fast float %1725, 0x3FB692C5C0000000
  %1727 = fmul fast float %1726, %1722
  %1728 = fadd fast float %1727, 0xBFCFA8A1C0000000
  %1729 = fmul fast float %1728, %1722
  %1730 = fadd fast float %1729, 0x3F79384B40000000
  %1731 = fmul fast float %1730, %1722
  %1732 = fadd fast float %1731, 0x3FE45BF7C0000000
  %1733 = fmul fast float %1732, %1722
  %1734 = fadd fast float %1733, 0x3ED10F8960000000
  %1735 = fcmp fast olt float %1714, %1715
  %1736 = fsub fast float 0x3FEFFFF780000000, %1733
  %1737 = select i1 %1735, float %1736, float %1734
  %1738 = fmul fast float %1737, %1718
  %1739 = fsub fast float %1718, %1738
  %1740 = fcmp fast olt float %1713, 0.000000e+00
  %1741 = icmp eq i32 %1673, -1
  br i1 %1741, label %1787, label %1742

; <label>:1742                                    ; preds = %1697
  %1743 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1744 = extractvalue %dx.types.CBufRet.i32 %1743, 1
  %1745 = and i32 %1744, 31
  %1746 = lshr i32 %1673, %1745
  %1747 = mul i32 %1746, %869
  %1748 = uitofp i32 %1747 to float
  %1749 = fsub fast float 1.000000e+00, %1739
  %1750 = select i1 %1740, float %1749, float %1738
  %1751 = bitcast float %1750 to i32
  %1752 = bitcast float %1712 to i32
  %1753 = and i32 %1752, -2147483648
  %1754 = xor i32 %1751, %1753
  %1755 = bitcast i32 %1754 to float
  %1756 = fmul fast float %1755, 5.000000e-01
  %1757 = fadd fast float %1756, 5.000000e-01
  %1758 = fmul fast float %1757, %750
  %1759 = fadd fast float %1758, %872
  %1760 = fadd fast float %1759, %1748
  %1761 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %1762 = fmul fast float %1760, %1761
  %1763 = extractvalue %dx.types.CBufRet.i32 %1743, 0
  %1764 = and i32 %1763, %1673
  %1765 = mul i32 %1764, %869
  %1766 = uitofp i32 %1765 to float
  %1767 = fsub fast float 1.000000e+00, %1738
  %1768 = select i1 %1740, float %1767, float %1739
  %1769 = bitcast float %1768 to i32
  %1770 = bitcast float %1711 to i32
  %1771 = and i32 %1770, -2147483648
  %1772 = xor i32 %1769, %1771
  %1773 = bitcast i32 %1772 to float
  %1774 = fmul fast float %1773, 5.000000e-01
  %1775 = fadd fast float %1774, 5.000000e-01
  %1776 = fmul fast float %1775, %750
  %1777 = fadd fast float %1776, %872
  %1778 = fadd fast float %1777, %1766
  %1779 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %1780 = fmul fast float %1778, %1779
  %1781 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1782 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1783 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1781, %dx.types.Handle %1782, float %1780, float %1762, float undef, float undef, i32 0, i32 0, i32 undef, float %756)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1784 = extractvalue %dx.types.ResRet.f32 %1783, 0
  %1785 = extractvalue %dx.types.ResRet.f32 %1783, 1
  %1786 = extractvalue %dx.types.ResRet.f32 %1783, 2
  br label %1787

; <label>:1787                                    ; preds = %1742, %1697
  %1788 = phi float [ %1784, %1742 ], [ 0.000000e+00, %1697 ]
  %1789 = phi float [ %1785, %1742 ], [ 0.000000e+00, %1697 ]
  %1790 = phi float [ %1786, %1742 ], [ 0.000000e+00, %1697 ]
  %1791 = fmul fast float %1788, %1708
  %1792 = fmul fast float %1789, %1708
  %1793 = fmul fast float %1790, %1708
  %1794 = fsub fast float %1050, %924
  %1795 = fsub fast float %1051, %925
  %1796 = fsub fast float %1052, %926
  %1797 = fmul fast float %1794, %771
  %1798 = fmul fast float %1795, %771
  %1799 = fmul fast float %1796, %771
  %1800 = fadd fast float %1797, %924
  %1801 = fadd fast float %1798, %925
  %1802 = fadd fast float %1799, %926
  %1803 = fsub fast float %1298, %1176
  %1804 = fsub fast float %1299, %1177
  %1805 = fsub fast float %1300, %1178
  %1806 = fmul fast float %1803, %771
  %1807 = fmul fast float %1804, %771
  %1808 = fmul fast float %1805, %771
  %1809 = fsub fast float %1547, %1425
  %1810 = fsub fast float %1548, %1426
  %1811 = fsub fast float %1549, %1427
  %1812 = fmul fast float %1809, %771
  %1813 = fmul fast float %1810, %771
  %1814 = fmul fast float %1811, %771
  %1815 = fadd fast float %1812, %1425
  %1816 = fadd fast float %1813, %1426
  %1817 = fadd fast float %1814, %1427
  %1818 = fsub fast float %1791, %1669
  %1819 = fsub fast float %1792, %1670
  %1820 = fsub fast float %1793, %1671
  %1821 = fmul fast float %1818, %771
  %1822 = fmul fast float %1819, %771
  %1823 = fmul fast float %1820, %771
  %1824 = fsub fast float %1176, %1800
  %1825 = fadd fast float %1824, %1806
  %1826 = fsub fast float %1177, %1801
  %1827 = fadd fast float %1826, %1807
  %1828 = fsub fast float %1178, %1802
  %1829 = fadd fast float %1828, %1808
  %1830 = fmul fast float %1825, %770
  %1831 = fmul fast float %1827, %770
  %1832 = fmul fast float %1829, %770
  %1833 = fadd fast float %1830, %1800
  %1834 = fadd fast float %1831, %1801
  %1835 = fadd fast float %1832, %1802
  %1836 = fsub fast float %1669, %1815
  %1837 = fadd fast float %1836, %1821
  %1838 = fsub fast float %1670, %1816
  %1839 = fadd fast float %1838, %1822
  %1840 = fsub fast float %1671, %1817
  %1841 = fadd fast float %1840, %1823
  %1842 = fmul fast float %1837, %770
  %1843 = fmul fast float %1839, %770
  %1844 = fmul fast float %1841, %770
  %1845 = fsub fast float %1815, %1833
  %1846 = fadd fast float %1845, %1842
  %1847 = fsub fast float %1816, %1834
  %1848 = fadd fast float %1847, %1843
  %1849 = fsub fast float %1817, %1835
  %1850 = fadd fast float %1849, %1844
  %1851 = fmul fast float %1846, %769
  %1852 = fmul fast float %1848, %769
  %1853 = fmul fast float %1850, %769
  %1854 = fadd fast float %1851, %1833
  %1855 = fadd fast float %1852, %1834
  %1856 = fadd fast float %1853, %1835
  %1857 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %1858 = extractvalue %dx.types.CBufRet.i32 %1857, 2
  %1859 = icmp eq i32 %1858, 0
  br i1 %1859, label %1860, label %1892

; <label>:1860                                    ; preds = %1787
  %1861 = extractvalue %dx.types.CBufRet.i32 %1857, 3
  %1862 = icmp eq i32 %1861, 0
  %1863 = fadd fast float %1854, %647
  %1864 = fadd fast float %1855, %648
  %1865 = fadd fast float %1856, %649
  %1866 = select i1 %1862, float %1863, float %647
  %1867 = select i1 %1862, float %1864, float %648
  %1868 = select i1 %1862, float %1865, float %649
  br label %1892

; <label>:1869                                    ; preds = %652
  %1870 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1871 = extractvalue %dx.types.CBufRet.f32 %1870, 1
  %1872 = fcmp fast ogt float %1871, 0.000000e+00
  br i1 %1872, label %1873, label %1892

; <label>:1873                                    ; preds = %1869
  %1874 = extractvalue %dx.types.CBufRet.f32 %1870, 0
  %1875 = fadd fast float %1874, 0xC02BEAFA60000000
  %1876 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1877 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1878 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1876, %dx.types.Handle %1877, float %159, float %160, float %161, float undef, i32 undef, i32 undef, i32 undef, float %1875)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1879 = extractvalue %dx.types.ResRet.f32 %1878, 0
  %1880 = extractvalue %dx.types.ResRet.f32 %1878, 1
  %1881 = extractvalue %dx.types.ResRet.f32 %1878, 2
  %1882 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %1883 = extractvalue %dx.types.CBufRet.f32 %1882, 0
  %1884 = extractvalue %dx.types.CBufRet.f32 %1882, 1
  %1885 = extractvalue %dx.types.CBufRet.f32 %1882, 2
  %1886 = fmul fast float %1883, %1879
  %1887 = fmul fast float %1884, %1880
  %1888 = fmul fast float %1885, %1881
  %1889 = fadd fast float %1886, %647
  %1890 = fadd fast float %1887, %648
  %1891 = fadd fast float %1888, %649
  br label %1892

; <label>:1892                                    ; preds = %1873, %1869, %1860, %1787, %646
  %1893 = phi float [ %647, %646 ], [ %1854, %1787 ], [ %1866, %1860 ], [ %1889, %1873 ], [ %647, %1869 ]
  %1894 = phi float [ %648, %646 ], [ %1855, %1787 ], [ %1867, %1860 ], [ %1890, %1873 ], [ %648, %1869 ]
  %1895 = phi float [ %649, %646 ], [ %1856, %1787 ], [ %1868, %1860 ], [ %1891, %1873 ], [ %649, %1869 ]
  %1896 = phi float [ 6.550400e+04, %646 ], [ %167, %1787 ], [ %167, %1860 ], [ %654, %1873 ], [ %654, %1869 ]
  %1897 = phi float [ 0.000000e+00, %646 ], [ 0.000000e+00, %1787 ], [ 0.000000e+00, %1860 ], [ 1.000000e+00, %1873 ], [ 1.000000e+00, %1869 ]
  %1898 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1899 = extractvalue %dx.types.CBufRet.f32 %1898, 1
  %1900 = fcmp fast ogt float %1899, 0.000000e+00
  br i1 %1900, label %1901, label %1933

; <label>:1901                                    ; preds = %1892
  %1902 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1903 = extractvalue %dx.types.CBufRet.f32 %1902, 1
  %1904 = fcmp fast ogt float %1903, 0.000000e+00
  br i1 %1904, label %1905, label %1933

; <label>:1905                                    ; preds = %1901
  %1906 = extractvalue %dx.types.CBufRet.f32 %1902, 2
  %1907 = extractvalue %dx.types.CBufRet.f32 %1898, 0
  %1908 = call float @dx.op.binary.f32(i32 35, float %1906, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1909 = call float @dx.op.unary.f32(i32 23, float %1908)  ; Log(value)
  %1910 = fmul fast float %1909, 0x3FF3333340000000
  %1911 = fadd fast float %1907, -2.000000e+00
  %1912 = fadd fast float %1911, %1910
  %1913 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1914 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1915 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1913, %dx.types.Handle %1914, float %159, float %160, float %161, float undef, i32 undef, i32 undef, i32 undef, float %1912)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1916 = extractvalue %dx.types.ResRet.f32 %1915, 0
  %1917 = extractvalue %dx.types.ResRet.f32 %1915, 1
  %1918 = extractvalue %dx.types.ResRet.f32 %1915, 2
  %1919 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %1920 = extractvalue %dx.types.CBufRet.f32 %1919, 0
  %1921 = extractvalue %dx.types.CBufRet.f32 %1919, 1
  %1922 = extractvalue %dx.types.CBufRet.f32 %1919, 2
  %1923 = fmul fast float %1920, %1916
  %1924 = fmul fast float %1921, %1917
  %1925 = fmul fast float %1922, %1918
  %1926 = extractvalue %dx.types.CBufRet.f32 %1902, 3
  %1927 = fmul fast float %1926, %167
  %1928 = call float @dx.op.unary.f32(i32 7, float %1927)  ; Saturate(value)
  %1929 = fmul fast float %1928, %1903
  %1930 = fmul fast float %1923, %1929
  %1931 = fmul fast float %1924, %1929
  %1932 = fmul fast float %1925, %1929
  br label %1933

; <label>:1933                                    ; preds = %1905, %1901, %1892
  %1934 = phi float [ %1930, %1905 ], [ 0.000000e+00, %1901 ], [ 0.000000e+00, %1892 ]
  %1935 = phi float [ %1931, %1905 ], [ 0.000000e+00, %1901 ], [ 0.000000e+00, %1892 ]
  %1936 = phi float [ %1932, %1905 ], [ 0.000000e+00, %1901 ], [ 0.000000e+00, %1892 ]
  %1937 = fadd fast float %1934, %1893
  %1938 = fadd fast float %1935, %1894
  %1939 = fadd fast float %1936, %1895
  %1940 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1941 = extractvalue %dx.types.CBufRet.f32 %1940, 2
  %1942 = fmul fast float %1941, %1937
  %1943 = fmul fast float %1941, %1938
  %1944 = fmul fast float %1941, %1939
  %1945 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1946 = extractvalue %dx.types.CBufRet.i32 %1945, 0
  %1947 = icmp eq i32 %1946, 0
  br i1 %1947, label %2213, label %1948

; <label>:1948                                    ; preds = %1933
  %1949 = fmul fast float %1896, %159
  %1950 = fmul fast float %1896, %160
  %1951 = fmul fast float %1896, %161
  %1952 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1953 = extractvalue %dx.types.CBufRet.f32 %1952, 3
  %1954 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1955 = extractvalue %dx.types.CBufRet.f32 %1954, 2
  %1956 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %1957 = extractvalue %dx.types.CBufRet.f32 %1956, 2
  %1958 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %1959 = extractvalue %dx.types.CBufRet.f32 %1958, 2
  %1960 = fmul fast float %1957, 2.097152e+06
  %1961 = fadd fast float %1960, %1959
  %1962 = call float @dx.op.binary.f32(i32 36, float %1961, float %1955)  ; FMin(a,b)
  %1963 = fsub fast float %1951, %1962
  %1964 = fadd fast float %1963, %1959
  %1965 = fadd fast float %1964, %1960
  %1966 = call float @dx.op.dot3.f32(i32 55, float %1949, float %1950, float %1965, float %1949, float %1950, float %1965)  ; Dot3(ax,ay,az,bx,by,bz)
  %1967 = call float @dx.op.binary.f32(i32 35, float %1966, float 0x3E45798EE0000000)  ; FMax(a,b)
  %1968 = call float @dx.op.unary.f32(i32 25, float %1967)  ; Rsqrt(value)
  %1969 = fmul fast float %1968, %1966
  %1970 = fmul fast float %1968, %1949
  %1971 = fmul fast float %1968, %1950
  %1972 = fmul fast float %1965, %1968
  %1973 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1974 = extractvalue %dx.types.CBufRet.f32 %1954, 3
  %1975 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1974)  ; FMax(a,b)
  %1976 = fcmp fast ogt float %1975, 0.000000e+00
  %1977 = extractvalue %dx.types.CBufRet.f32 %1954, 1
  %1978 = extractvalue %dx.types.CBufRet.f32 %1973, 1
  br i1 %1976, label %1982, label %1979

; <label>:1979                                    ; preds = %1948
  %1980 = extractvalue %dx.types.CBufRet.f32 %1973, 0
  %1981 = extractvalue %dx.types.CBufRet.f32 %1954, 0
  br label %2006

; <label>:1982                                    ; preds = %1948
  %1983 = fmul fast float %1975, %1968
  %1984 = fmul fast float %1983, %1965
  %1985 = fadd fast float %1984, %1962
  %1986 = fsub fast float %1965, %1984
  %1987 = fsub fast float 1.000000e+00, %1983
  %1988 = fmul fast float %1987, %1969
  %1989 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1990 = extractvalue %dx.types.CBufRet.f32 %1989, 1
  %1991 = fsub fast float %1985, %1990
  %1992 = fmul fast float %1991, %1977
  %1993 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %1992)  ; FMax(a,b)
  %1994 = extractvalue %dx.types.CBufRet.f32 %1989, 0
  %1995 = fsub fast float -0.000000e+00, %1993
  %1996 = call float @dx.op.unary.f32(i32 21, float %1995)  ; Exp(value)
  %1997 = fmul fast float %1994, %1996
  %1998 = extractvalue %dx.types.CBufRet.f32 %1973, 3
  %1999 = fsub fast float %1985, %1998
  %2000 = fmul fast float %1999, %1978
  %2001 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2000)  ; FMax(a,b)
  %2002 = extractvalue %dx.types.CBufRet.f32 %1973, 2
  %2003 = fsub fast float -0.000000e+00, %2001
  %2004 = call float @dx.op.unary.f32(i32 21, float %2003)  ; Exp(value)
  %2005 = fmul fast float %2002, %2004
  br label %2006

; <label>:2006                                    ; preds = %1982, %1979
  %2007 = phi float [ %1997, %1982 ], [ %1981, %1979 ]
  %2008 = phi float [ %2005, %1982 ], [ %1980, %1979 ]
  %2009 = phi float [ %1988, %1982 ], [ %1969, %1979 ]
  %2010 = phi float [ %1986, %1982 ], [ %1965, %1979 ]
  %2011 = fmul fast float %1977, %2010
  %2012 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2011)  ; FMax(a,b)
  %2013 = fsub fast float -0.000000e+00, %2012
  %2014 = call float @dx.op.unary.f32(i32 21, float %2013)  ; Exp(value)
  %2015 = fsub fast float 1.000000e+00, %2014
  %2016 = fdiv fast float %2015, %2012
  %2017 = fmul fast float %2012, 0x3FCEBFBE00000000
  %2018 = fsub fast float 0x3FE62E4300000000, %2017
  %2019 = call float @dx.op.unary.f32(i32 6, float %2012)  ; FAbs(value)
  %2020 = fcmp fast ogt float %2019, 0x3F847AE140000000
  %2021 = select i1 %2020, float %2016, float %2018
  %2022 = fmul fast float %2021, %2007
  %2023 = fmul fast float %1978, %2010
  %2024 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2023)  ; FMax(a,b)
  %2025 = fsub fast float -0.000000e+00, %2024
  %2026 = call float @dx.op.unary.f32(i32 21, float %2025)  ; Exp(value)
  %2027 = fsub fast float 1.000000e+00, %2026
  %2028 = fdiv fast float %2027, %2024
  %2029 = fmul fast float %2024, 0x3FCEBFBE00000000
  %2030 = fsub fast float 0x3FE62E4300000000, %2029
  %2031 = call float @dx.op.unary.f32(i32 6, float %2024)  ; FAbs(value)
  %2032 = fcmp fast ogt float %2031, 0x3F847AE140000000
  %2033 = select i1 %2032, float %2028, float %2030
  %2034 = fmul fast float %2033, %2008
  %2035 = fadd fast float %2034, %2022
  %2036 = extractvalue %dx.types.CBufRet.f32 %1952, 0
  %2037 = extractvalue %dx.types.CBufRet.f32 %1952, 1
  %2038 = extractvalue %dx.types.CBufRet.f32 %1952, 2
  %2039 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2040 = extractvalue %dx.types.CBufRet.f32 %2039, 2
  %2041 = fcmp fast ogt float %2040, 0.000000e+00
  br i1 %2041, label %2042, label %2078, !dx.controlflow.hints !45

; <label>:2042                                    ; preds = %2006
  %2043 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2044 = extractvalue %dx.types.CBufRet.f32 %2043, 0
  %2045 = fmul fast float %2044, %1969
  %2046 = extractvalue %dx.types.CBufRet.f32 %2043, 1
  %2047 = fadd fast float %2045, %2046
  %2048 = call float @dx.op.unary.f32(i32 7, float %2047)  ; Saturate(value)
  %2049 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2050 = extractvalue %dx.types.CBufRet.f32 %2049, 1
  %2051 = extractvalue %dx.types.CBufRet.f32 %2049, 0
  %2052 = fsub fast float -0.000000e+00, %2051
  %2053 = call float @dx.op.dot2.f32(i32 54, float %1949, float %1950, float %2050, float %2052)  ; Dot2(ax,ay,bx,by)
  %2054 = call float @dx.op.dot2.f32(i32 54, float %1949, float %1950, float %2051, float %2050)  ; Dot2(ax,ay,bx,by)
  %2055 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2056 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2057 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2055, %dx.types.Handle %2056, float %2053, float %2054, float %1965, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2058 = extractvalue %dx.types.ResRet.f32 %2057, 0
  %2059 = extractvalue %dx.types.ResRet.f32 %2057, 1
  %2060 = extractvalue %dx.types.ResRet.f32 %2057, 2
  %2061 = extractvalue %dx.types.CBufRet.f32 %2043, 2
  %2062 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2055, %dx.types.Handle %2056, float %2053, float %2054, float %1965, float undef, i32 undef, i32 undef, i32 undef, float %2061)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2063 = extractvalue %dx.types.ResRet.f32 %2062, 0
  %2064 = extractvalue %dx.types.ResRet.f32 %2062, 1
  %2065 = extractvalue %dx.types.ResRet.f32 %2062, 2
  %2066 = fsub fast float %2058, %2063
  %2067 = fsub fast float %2059, %2064
  %2068 = fsub fast float %2060, %2065
  %2069 = fmul fast float %2066, %2048
  %2070 = fmul fast float %2067, %2048
  %2071 = fmul fast float %2068, %2048
  %2072 = fadd fast float %2069, %2063
  %2073 = fadd fast float %2070, %2064
  %2074 = fadd fast float %2071, %2065
  %2075 = fmul fast float %2072, %2036
  %2076 = fmul fast float %2073, %2037
  %2077 = fmul fast float %2074, %2038
  br label %2078

; <label>:2078                                    ; preds = %2042, %2006
  %2079 = phi float [ %2075, %2042 ], [ %2036, %2006 ]
  %2080 = phi float [ %2076, %2042 ], [ %2037, %2006 ]
  %2081 = phi float [ %2077, %2042 ], [ %2038, %2006 ]
  %2082 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2083 = extractvalue %dx.types.CBufRet.f32 %2082, 0
  %2084 = extractvalue %dx.types.CBufRet.f32 %2082, 1
  %2085 = extractvalue %dx.types.CBufRet.f32 %2082, 2
  %2086 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %2087 = extractvalue %dx.types.CBufRet.f32 %2086, 1
  %2088 = fmul fast float %2087, %2083
  %2089 = fmul fast float %2087, %2084
  %2090 = fmul fast float %2087, %2085
  %2091 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2092 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2093 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2091, %dx.types.Handle %2092, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2094 = extractvalue %dx.types.ResRet.f32 %2093, 0
  %2095 = extractvalue %dx.types.ResRet.f32 %2093, 1
  %2096 = extractvalue %dx.types.ResRet.f32 %2093, 2
  %2097 = fmul fast float %2088, %2094
  %2098 = fmul fast float %2089, %2095
  %2099 = fmul fast float %2090, %2096
  %2100 = fadd fast float %2097, %2079
  %2101 = fadd fast float %2098, %2080
  %2102 = fadd fast float %2099, %2081
  %2103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2104 = extractvalue %dx.types.CBufRet.f32 %2103, 3
  %2105 = fcmp fast oge float %2104, 0.000000e+00
  %2106 = fcmp fast oeq float %2040, 0.000000e+00
  %2107 = and i1 %2105, %2106
  br i1 %2107, label %2108, label %2179

; <label>:2108                                    ; preds = %2078
  %2109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2110 = extractvalue %dx.types.CBufRet.f32 %2109, 0
  %2111 = extractvalue %dx.types.CBufRet.f32 %2109, 1
  %2112 = extractvalue %dx.types.CBufRet.f32 %2109, 2
  %2113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2114 = extractvalue %dx.types.CBufRet.f32 %2113, 0
  %2115 = extractvalue %dx.types.CBufRet.f32 %2113, 1
  %2116 = extractvalue %dx.types.CBufRet.f32 %2113, 2
  %2117 = fmul fast float %2087, 0x3FB45F3060000000
  %2118 = fmul fast float %2117, %2114
  %2119 = fmul fast float %2117, %2115
  %2120 = fmul fast float %2117, %2116
  %2121 = fadd fast float %2118, %2110
  %2122 = fadd fast float %2119, %2111
  %2123 = fadd fast float %2120, %2112
  %2124 = extractvalue %dx.types.CBufRet.f32 %2109, 3
  %2125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %2126 = extractvalue %dx.types.CBufRet.f32 %2125, 0
  %2127 = extractvalue %dx.types.CBufRet.f32 %2125, 1
  %2128 = extractvalue %dx.types.CBufRet.f32 %2125, 2
  %2129 = call float @dx.op.dot3.f32(i32 55, float %1970, float %1971, float %1972, float %2126, float %2127, float %2128)  ; Dot3(ax,ay,az,bx,by,bz)
  %2130 = call float @dx.op.unary.f32(i32 7, float %2129)  ; Saturate(value)
  %2131 = call float @dx.op.unary.f32(i32 23, float %2130)  ; Log(value)
  %2132 = fmul fast float %2131, %2124
  %2133 = call float @dx.op.unary.f32(i32 21, float %2132)  ; Exp(value)
  %2134 = fmul fast float %2133, %2121
  %2135 = fmul fast float %2133, %2122
  %2136 = fmul fast float %2133, %2123
  %2137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %2138 = extractvalue %dx.types.CBufRet.f32 %2137, 3
  %2139 = fcmp fast ogt float %2138, 0.000000e+00
  br i1 %2139, label %2140, label %2165

; <label>:2140                                    ; preds = %2108
  %2141 = extractvalue %dx.types.CBufRet.f32 %2137, 0
  %2142 = extractvalue %dx.types.CBufRet.f32 %2137, 1
  %2143 = extractvalue %dx.types.CBufRet.f32 %2137, 2
  %2144 = fmul fast float %2117, %2141
  %2145 = fmul fast float %2117, %2142
  %2146 = fmul fast float %2117, %2143
  %2147 = fadd fast float %2144, %2110
  %2148 = fadd fast float %2145, %2111
  %2149 = fadd fast float %2146, %2112
  %2150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %2151 = extractvalue %dx.types.CBufRet.f32 %2150, 0
  %2152 = extractvalue %dx.types.CBufRet.f32 %2150, 1
  %2153 = extractvalue %dx.types.CBufRet.f32 %2150, 2
  %2154 = call float @dx.op.dot3.f32(i32 55, float %1970, float %1971, float %1972, float %2151, float %2152, float %2153)  ; Dot3(ax,ay,az,bx,by,bz)
  %2155 = call float @dx.op.unary.f32(i32 7, float %2154)  ; Saturate(value)
  %2156 = call float @dx.op.unary.f32(i32 23, float %2155)  ; Log(value)
  %2157 = fmul fast float %2156, %2124
  %2158 = call float @dx.op.unary.f32(i32 21, float %2157)  ; Exp(value)
  %2159 = fmul fast float %2158, %2147
  %2160 = fmul fast float %2158, %2148
  %2161 = fmul fast float %2158, %2149
  %2162 = fadd fast float %2159, %2134
  %2163 = fadd fast float %2160, %2135
  %2164 = fadd fast float %2161, %2136
  br label %2165

; <label>:2165                                    ; preds = %2140, %2108
  %2166 = phi float [ %2162, %2140 ], [ %2134, %2108 ]
  %2167 = phi float [ %2163, %2140 ], [ %2135, %2108 ]
  %2168 = phi float [ %2164, %2140 ], [ %2136, %2108 ]
  %2169 = fsub fast float %2009, %2104
  %2170 = call float @dx.op.binary.f32(i32 35, float %2169, float 0.000000e+00)  ; FMax(a,b)
  %2171 = fmul fast float %2035, %2170
  %2172 = fsub fast float -0.000000e+00, %2171
  %2173 = call float @dx.op.unary.f32(i32 21, float %2172)  ; Exp(value)
  %2174 = call float @dx.op.unary.f32(i32 7, float %2173)  ; Saturate(value)
  %2175 = fsub fast float 1.000000e+00, %2174
  %2176 = fmul fast float %2175, %2166
  %2177 = fmul fast float %2175, %2167
  %2178 = fmul fast float %2175, %2168
  br label %2179

; <label>:2179                                    ; preds = %2165, %2078
  %2180 = phi float [ %2176, %2165 ], [ 0.000000e+00, %2078 ]
  %2181 = phi float [ %2177, %2165 ], [ 0.000000e+00, %2078 ]
  %2182 = phi float [ %2178, %2165 ], [ 0.000000e+00, %2078 ]
  %2183 = fmul fast float %2009, %2035
  %2184 = fsub fast float -0.000000e+00, %2183
  %2185 = call float @dx.op.unary.f32(i32 21, float %2184)  ; Exp(value)
  %2186 = call float @dx.op.unary.f32(i32 7, float %2185)  ; Saturate(value)
  %2187 = call float @dx.op.binary.f32(i32 35, float %2186, float %1953)  ; FMax(a,b)
  %2188 = extractvalue %dx.types.CBufRet.f32 %2039, 3
  %2189 = fcmp fast ogt float %2188, 0.000000e+00
  %2190 = fcmp fast ogt float %1969, %2188
  %2191 = and i1 %2189, %2190
  %2192 = select i1 %2191, float 0.000000e+00, float %2180
  %2193 = select i1 %2191, float 0.000000e+00, float %2181
  %2194 = select i1 %2191, float 0.000000e+00, float %2182
  %2195 = select i1 %2191, float 1.000000e+00, float %2187
  %2196 = fsub fast float 1.000000e+00, %2195
  %2197 = fmul fast float %2196, %2100
  %2198 = fmul fast float %2196, %2101
  %2199 = fmul fast float %2196, %2102
  %2200 = fadd fast float %2197, %2192
  %2201 = fadd fast float %2198, %2193
  %2202 = fadd fast float %2199, %2194
  %2203 = fmul fast float %2195, %1942
  %2204 = fmul fast float %2195, %1943
  %2205 = fmul fast float %2195, %1944
  %2206 = fmul fast float %1941, %1897
  %2207 = fmul fast float %2206, %2200
  %2208 = fmul fast float %2206, %2201
  %2209 = fmul fast float %2206, %2202
  %2210 = fadd fast float %2207, %2203
  %2211 = fadd fast float %2208, %2204
  %2212 = fadd fast float %2209, %2205
  br label %2213

; <label>:2213                                    ; preds = %2179, %1933
  %2214 = phi float [ %2210, %2179 ], [ %1942, %1933 ]
  %2215 = phi float [ %2211, %2179 ], [ %1943, %1933 ]
  %2216 = phi float [ %2212, %2179 ], [ %1944, %1933 ]
  %2217 = call float @dx.op.binary.f32(i32 35, float %2215, float %2216)  ; FMax(a,b)
  %2218 = call float @dx.op.binary.f32(i32 35, float %2214, float %2217)  ; FMax(a,b)
  %2219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %2220 = extractvalue %dx.types.CBufRet.f32 %2219, 2
  %2221 = fcmp fast ogt float %2218, %2220
  br i1 %2221, label %2222, label %2227

; <label>:2222                                    ; preds = %2213
  %2223 = fdiv fast float %2220, %2218
  %2224 = fmul fast float %2223, %2214
  %2225 = fmul fast float %2223, %2215
  %2226 = fmul fast float %2223, %2216
  br label %2227

; <label>:2227                                    ; preds = %2222, %2213
  %2228 = phi float [ %2224, %2222 ], [ %2214, %2213 ]
  %2229 = phi float [ %2225, %2222 ], [ %2215, %2213 ]
  %2230 = phi float [ %2226, %2222 ], [ %2216, %2213 ]
  %2231 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2231, i32 %39, i32 %40, i32 undef, float %2228, float %2229, float %2230, float %2228, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2232 = icmp ne i32 %650, 0
  %2233 = call float @dx.op.binary.f32(i32 35, float %1896, float 0.000000e+00)  ; FMax(a,b)
  %2234 = select i1 %2232, float -1.000000e+00, float 1.000000e+00
  %2235 = fmul fast float %2233, %2234
  %2236 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2236, i32 %39, i32 %40, i32 undef, float %2235, float %2235, float %2235, float %2235, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2237

; <label>:2237                                    ; preds = %2227, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!37}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !23, !26, !31}
!5 = !{!6, !8, !9, !10, !11, !13, !14, !16, !17, !18, !19, !20, !21, !22}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 5, i32 0, !7}
!9 = !{i32 2, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 5, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !12}
!12 = !{i32 0, i32 5}
!13 = !{i32 5, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!14 = !{i32 6, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !15}
!15 = !{i32 1, i32 16}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!18 = !{i32 9, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !12}
!19 = !{i32 10, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !12}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !12}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{!24, !25}
!24 = !{i32 0, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!25 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!26 = !{!27, !28, !29, !30}
!27 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1320, null}
!28 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!29 = !{i32 2, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 2, i32 1, i32 76, null}
!30 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!31 = !{!32, !33, !34, !35, !36}
!32 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!33 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!34 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!35 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!36 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!37 = !{void ()* @ReflectionTraceVoxelsCS, !"ReflectionTraceVoxelsCS", null, !4, !38}
!38 = !{i32 0, i64 16, i32 4, !39, i32 5, !40}
!39 = !{i32 32, i32 1, i32 1}
!40 = !{i32 0}
!41 = distinct !{!41, !42}
!42 = !{!"llvm.loop.unroll.disable"}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 2}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
