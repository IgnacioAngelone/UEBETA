;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 2091cabd7b8ad92587b1b1e9e3fd4120
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  144
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  148
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  152
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  160
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint ReflectionDownsampleFactor;              ; Offset:  272
;       uint2 ReflectionTracingViewSize;              ; Offset:  280
;       uint2 ReflectionTracingBufferSize;            ; Offset:  288
;       float MaxRayIntensity;                        ; Offset:  296
;       float ReflectionSmoothBias;                   ; Offset:  300
;       uint ReflectionPass;                          ; Offset:  304
;       uint UseJitter;                               ; Offset:  308
;       uint UseHighResSurface;                       ; Offset:  312
;       float NearFieldMaxTraceDistance;              ; Offset:  320
;       float CardTraceEndDistanceFromCamera;         ; Offset:  484
;       float MaxTraceDistance;                       ; Offset:  504
;       float MaxMeshSDFTraceDistance;                ; Offset:  508
;       float SurfaceBias;                            ; Offset:  512
;       int HeightfieldMaxTracingSteps;               ; Offset:  528
;       float ReprojectionRadiusScale;                ; Offset:  640
;       float InvClipmapFadeSize;                     ; Offset:  652
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  656
;       uint RadianceProbeClipmapResolution;          ; Offset:  664
;       uint NumRadianceProbeClipmaps;                ; Offset:  668
;       uint RadianceProbeResolution;                 ; Offset:  672
;       uint FinalProbeResolution;                    ; Offset:  676
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  680
;       uint CalculateIrradiance;                     ; Offset:  684
;       uint IrradianceProbeResolution;               ; Offset:  688
;       uint OcclusionProbeResolution;                ; Offset:  692
;       float4 RadianceProbeSettings[6];              ; Offset:  752
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  848
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  944
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1040
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1048
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1056
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1064
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1068
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1072
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1076
;       float4 HZBUvFactorAndInvFactor;               ; Offset: 1120
;       float2 PrevSceneColorBilinearUVMin;           ; Offset: 1136
;       float2 PrevSceneColorBilinearUVMax;           ; Offset: 1144
;       float4 PrevScreenPositionScaleBias;           ; Offset: 1152
;       float4 PrevScreenPositionScaleBiasForDepth;   ; Offset: 1168
;       float PrevSceneColorPreExposureCorrection;    ; Offset: 1184
;       float2 HZBBaseTexelSize;                      ; Offset: 1192
;       float4 HZBUVToScreenUVScaleBias;              ; Offset: 1200
;       float RelativeDepthThickness;                 ; Offset: 1296
;       float SampleSceneColorNormalTreshold;         ; Offset: 1300
;       float DistantScreenTraceSlopeCompareTolerance;; Offset: 1312
;       float DistantScreenTraceMaxTraceDistance;     ; Offset: 1316
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1320
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_NumPrimitiveGroups;       ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       float PrePadding_LumenCardScene_44;           ; Offset:   44
;       uint BindlessResource_LumenCardScene_CardData;; Offset:   48
;       uint PrePadding_LumenCardScene_52;            ; Offset:   52
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:   56
;       uint PrePadding_LumenCardScene_60;            ; Offset:   60
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:   64
;       uint PrePadding_LumenCardScene_68;            ; Offset:   68
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:   72
;       uint PrePadding_LumenCardScene_76;            ; Offset:   76
;       uint BindlessResource_LumenCardScene_PrimitiveGroupData;; Offset:   80
;       uint PrePadding_LumenCardScene_84;            ; Offset:   84
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:   88
;       uint PrePadding_LumenCardScene_92;            ; Offset:   92
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:   96
;       uint PrePadding_LumenCardScene_100;           ; Offset:  100
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  104
;       uint PrePadding_LumenCardScene_108;           ; Offset:  108
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  136
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   140
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_AllocatedPageCountBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  200
;       uint PrePadding_VirtualVoxel_204;             ; Offset:  204
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  208
;       float PrePadding_VirtualVoxel_212;            ; Offset:  212
;       float PrePadding_VirtualVoxel_216;            ; Offset:  216
;       float PrePadding_VirtualVoxel_220;            ; Offset:  220
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  224
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   228
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for GlobalDistanceFieldPageObjectGridBuffer
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB4            cb4     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB5            cb5     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S1   s4,space1000     1
; D3DStaticTrilinearClampedSampler   sampler      NA          NA      S2   s5,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S3             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S4             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s2     1
; View_GlobalDistanceFieldPageAtlasTexture   texture     f32          3d      T0             t0     1
; View_GlobalDistanceFieldPageTableTexture   texture     u32          3d      T1             t1     1
; View_GlobalDistanceFieldMipTexture   texture     f32          3d      T2             t2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T3             t3     1
; LumenCardScene_CardData           texture  struct         r/o      T4             t4     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T5             t5     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T6             t6     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T7             t7     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T8             t8     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T9             t9     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf     T10            t10     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T11            t11     1
; VirtualVoxel_PageTexture          texture     u32          3d     T12            t12     1
; FinalLightingAtlas                texture     f32          2d     T13            t13     1
; DepthAtlas                        texture     f32          2d     T14            t14     1
; GlobalDistanceFieldPageObjectGridBuffer   texture  struct         r/o     T15            t15     1
; DownsampledDepth                  texture     f32          2d     T16            t16     1
; RayBuffer                         texture     f32          2d     T17            t17     1
; RayTraceDistance                  texture     u32          2d     T18            t18     1
; CompactedTraceTexelAllocator      texture     u32         buf     T19            t19     1
; CompactedTraceTexelData           texture     u32         buf     T20            t20     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U0             u0     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U2             u2     1
; RWTraceHit                            UAV     f32          2d      U3             u3     1
; RWTraceRadiance                       UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, float, <2 x float>, <4 x float>, float, float, float, float }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceVoxelsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 1000, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 228 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 140 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 1320 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %46 = alloca [6 x i32], align 4
  %47 = alloca [4 x i32], align 4
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %49 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %48, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %50 = extractvalue %dx.types.ResRet.i32 %49, 0
  %51 = icmp ult i32 %45, %50
  br i1 %51, label %52, label %2335

; <label>:52                                      ; preds = %0
  %53 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %54 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %53, i32 %45, i32 undef)  ; BufferLoad(srv,index,wot)
  %55 = extractvalue %dx.types.ResRet.i32 %54, 0
  %56 = and i32 %55, 65535
  %57 = lshr i32 %55, 16
  %58 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  %59 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %58, i32 undef, i32 %56, i32 %57, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %60 = extractvalue %dx.types.ResRet.f32 %59, 0
  %61 = call float @dx.op.unary.f32(i32 6, float %60)  ; FAbs(value)
  %62 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.i32 %62, 0
  %64 = mul i32 %63, %56
  %65 = mul i32 %63, %57
  %66 = uitofp i32 %64 to float
  %67 = uitofp i32 %65 to float
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = fadd fast float %69, 5.000000e-01
  %72 = fadd fast float %71, %66
  %73 = fadd fast float %70, 5.000000e-01
  %74 = fadd fast float %73, %67
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = fadd fast float %69, -1.000000e+00
  %79 = fadd fast float %78, %76
  %80 = fadd fast float %70, -1.000000e+00
  %81 = fadd fast float %80, %77
  %82 = call float @dx.op.binary.f32(i32 36, float %72, float %79)  ; FMin(a,b)
  %83 = call float @dx.op.binary.f32(i32 36, float %74, float %81)  ; FMin(a,b)
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 3
  %87 = fmul fast float %85, %82
  %88 = fmul fast float %86, %83
  %89 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %90 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %89, i32 0, i32 %56, i32 %57, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %91 = extractvalue %dx.types.ResRet.f32 %90, 0
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %95 = fsub fast float %87, %94
  %96 = fsub fast float %88, %93
  %97 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %99 = fdiv fast float %95, %97
  %100 = fdiv fast float %96, %98
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = fmul fast float %118, 2.097152e+06
  %122 = fmul fast float %119, 2.097152e+06
  %123 = fmul fast float %120, 2.097152e+06
  %124 = fadd fast float %121, %114
  %125 = fadd fast float %122, %115
  %126 = fadd fast float %123, %116
  %127 = fmul fast float %99, %91
  %128 = fmul fast float %100, %91
  %129 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %130 = extractvalue %dx.types.CBufRet.f32 %129, 3
  %131 = bitcast float %130 to i32
  %132 = icmp ne i32 %131, 0
  %133 = select i1 %132, float %99, float %127
  %134 = select i1 %132, float %100, float %128
  %135 = fmul fast float %133, %102
  %136 = call float @dx.op.tertiary.f32(i32 46, float %134, float %106, float %135)  ; FMad(a,b,c)
  %137 = call float @dx.op.tertiary.f32(i32 46, float %91, float %110, float %136)  ; FMad(a,b,c)
  %138 = fadd fast float %124, %137
  %139 = fmul fast float %133, %103
  %140 = call float @dx.op.tertiary.f32(i32 46, float %134, float %107, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %91, float %111, float %140)  ; FMad(a,b,c)
  %142 = fadd fast float %125, %141
  %143 = fmul fast float %133, %104
  %144 = call float @dx.op.tertiary.f32(i32 46, float %134, float %108, float %143)  ; FMad(a,b,c)
  %145 = call float @dx.op.tertiary.f32(i32 46, float %91, float %112, float %144)  ; FMad(a,b,c)
  %146 = fadd fast float %126, %145
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %154 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = extractvalue %dx.types.CBufRet.f32 %159, 1
  %162 = extractvalue %dx.types.CBufRet.f32 %159, 2
  %163 = fmul fast float %133, %148
  %164 = call float @dx.op.tertiary.f32(i32 46, float %134, float %152, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %91, float %156, float %164)  ; FMad(a,b,c)
  %166 = fadd fast float %165, %160
  %167 = fmul fast float %133, %149
  %168 = call float @dx.op.tertiary.f32(i32 46, float %134, float %153, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %91, float %157, float %168)  ; FMad(a,b,c)
  %170 = fadd fast float %169, %161
  %171 = fmul fast float %133, %150
  %172 = call float @dx.op.tertiary.f32(i32 46, float %134, float %154, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %91, float %158, float %172)  ; FMad(a,b,c)
  %174 = fadd fast float %173, %162
  %175 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %176 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %175, i32 0, i32 %56, i32 %57, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %177 = extractvalue %dx.types.ResRet.f32 %176, 0
  %178 = extractvalue %dx.types.ResRet.f32 %176, 1
  %179 = extractvalue %dx.types.ResRet.f32 %176, 2
  %180 = extractvalue %dx.types.ResRet.f32 %176, 3
  %181 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %182 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %181, i32 0, i32 %56, i32 %57, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %183 = extractvalue %dx.types.ResRet.i32 %182, 0
  %184 = and i32 %183, 32767
  %185 = call float @dx.op.legacyF16ToF32(i32 131, i32 %184)  ; LegacyF16ToF32(value)
  %186 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %187 = extractvalue %dx.types.CBufRet.f32 %186, 0
  %188 = fmul fast float %187, %177
  %189 = fmul fast float %187, %178
  %190 = fmul fast float %187, %179
  %191 = fadd fast float %188, %166
  %192 = fadd fast float %189, %170
  %193 = fadd fast float %190, %174
  %194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.f32 %194, 0
  %196 = fadd fast float %195, %180
  %197 = call float @dx.op.unary.f32(i32 14, float %196)  ; Tan(value)
  %198 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %199 = extractvalue %dx.types.CBufRet.i32 %198, 2
  %200 = icmp ne i32 %199, 0
  %201 = fmul fast float %177, %61
  %202 = fmul fast float %178, %61
  %203 = fmul fast float %179, %61
  %204 = fadd fast float %201, %166
  %205 = fadd fast float %202, %170
  %206 = fadd fast float %203, %174
  %207 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %208 = extractvalue %dx.types.CBufRet.i32 %207, 2
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %253, label %210

; <label>:210                                     ; preds = %52
  br label %211

; <label>:211                                     ; preds = %246, %210
  %212 = phi i32 [ %247, %246 ], [ 0, %210 ]
  %213 = add i32 %212, 195
  %214 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %213)  ; CBufferLoadLegacy(handle,regIndex)
  %215 = extractvalue %dx.types.CBufRet.f32 %214, 3
  %216 = extractvalue %dx.types.CBufRet.f32 %214, 0
  %217 = extractvalue %dx.types.CBufRet.f32 %214, 1
  %218 = extractvalue %dx.types.CBufRet.f32 %214, 2
  %219 = fadd fast float %215, %204
  %220 = fsub fast float %219, %216
  %221 = fadd fast float %215, %205
  %222 = fsub fast float %221, %217
  %223 = fadd fast float %215, %206
  %224 = fsub fast float %223, %218
  %225 = call float @dx.op.binary.f32(i32 35, float %220, float 0.000000e+00)  ; FMax(a,b)
  %226 = call float @dx.op.binary.f32(i32 35, float %222, float 0.000000e+00)  ; FMax(a,b)
  %227 = call float @dx.op.binary.f32(i32 35, float %224, float 0.000000e+00)  ; FMax(a,b)
  %228 = fsub fast float %215, %204
  %229 = fadd fast float %228, %216
  %230 = fsub fast float %215, %205
  %231 = fadd fast float %230, %217
  %232 = fsub fast float %215, %206
  %233 = fadd fast float %232, %218
  %234 = call float @dx.op.binary.f32(i32 35, float %229, float 0.000000e+00)  ; FMax(a,b)
  %235 = call float @dx.op.binary.f32(i32 35, float %231, float 0.000000e+00)  ; FMax(a,b)
  %236 = call float @dx.op.binary.f32(i32 35, float %233, float 0.000000e+00)  ; FMax(a,b)
  %237 = call float @dx.op.binary.f32(i32 36, float %225, float %234)  ; FMin(a,b)
  %238 = call float @dx.op.binary.f32(i32 36, float %226, float %235)  ; FMin(a,b)
  %239 = call float @dx.op.binary.f32(i32 36, float %227, float %236)  ; FMin(a,b)
  %240 = call float @dx.op.binary.f32(i32 36, float %238, float %239)  ; FMin(a,b)
  %241 = call float @dx.op.binary.f32(i32 36, float %237, float %240)  ; FMin(a,b)
  %242 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %243 = extractvalue %dx.types.CBufRet.f32 %242, 0
  %244 = fmul fast float %243, %215
  %245 = fcmp fast ogt float %241, %244
  br i1 %245, label %251, label %246

; <label>:246                                     ; preds = %211
  %247 = add i32 %212, 1
  %248 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.i32 %248, 2
  %250 = icmp ult i32 %247, %249
  br i1 %250, label %211, label %251

; <label>:251                                     ; preds = %246, %211
  %252 = phi i32 [ 0, %246 ], [ %212, %211 ]
  br label %253

; <label>:253                                     ; preds = %251, %52
  %254 = phi i32 [ 0, %52 ], [ %252, %251 ]
  %255 = add i32 %254, 195
  %256 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %255)  ; CBufferLoadLegacy(handle,regIndex)
  %257 = extractvalue %dx.types.CBufRet.f32 %256, 3
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = fmul fast float %257, 4.000000e+00
  %261 = fmul fast float %260, %259
  %262 = fsub fast float %61, %261
  %263 = call float @dx.op.binary.f32(i32 35, float %262, float 0.000000e+00)  ; FMax(a,b)
  %264 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.i32 %264, 1
  %266 = uitofp i32 %265 to float
  %267 = uitofp i32 %56 to float
  %268 = uitofp i32 %57 to float
  %269 = fmul fast float %266, 0x4040551EC0000000
  %270 = fmul fast float %266, 0x4027A147A0000000
  %271 = fadd fast float %269, %267
  %272 = fadd fast float %270, %268
  %273 = call float @dx.op.dot2.f32(i32 54, float %271, float %272, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %274 = call float @dx.op.unary.f32(i32 22, float %273)  ; Frc(value)
  %275 = fmul fast float %274, 0x404A7DD040000000
  %276 = call float @dx.op.unary.f32(i32 22, float %275)  ; Frc(value)
  %277 = fmul fast float %276, 0x3FBA461100000000
  %278 = fadd fast float %277, 0x3FEE666660000000
  %279 = fmul fast float %180, 0x40545F3060000000
  %280 = call float @dx.op.unary.f32(i32 7, float %279)  ; Saturate(value)
  %281 = fsub fast float 0x3FA9999A00000000, %277
  %282 = fmul fast float %281, %280
  %283 = fadd fast float %278, %282
  %284 = fcmp fast olt float %263, %185
  br i1 %284, label %285, label %1590

; <label>:285                                     ; preds = %253
  %286 = fmul fast float %263, %177
  %287 = fmul fast float %263, %178
  %288 = fmul fast float %263, %179
  %289 = fadd fast float %286, %191
  %290 = fadd fast float %287, %192
  %291 = fadd fast float %288, %193
  %292 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %293 = extractvalue %dx.types.CBufRet.i32 %292, 2
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %338, label %295

; <label>:295                                     ; preds = %285
  br label %296

; <label>:296                                     ; preds = %331, %295
  %297 = phi i32 [ %332, %331 ], [ 0, %295 ]
  %298 = add i32 %297, 195
  %299 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %298)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.f32 %299, 3
  %301 = extractvalue %dx.types.CBufRet.f32 %299, 0
  %302 = extractvalue %dx.types.CBufRet.f32 %299, 1
  %303 = extractvalue %dx.types.CBufRet.f32 %299, 2
  %304 = fadd fast float %300, %289
  %305 = fsub fast float %304, %301
  %306 = fadd fast float %300, %290
  %307 = fsub fast float %306, %302
  %308 = fadd fast float %300, %291
  %309 = fsub fast float %308, %303
  %310 = call float @dx.op.binary.f32(i32 35, float %305, float 0.000000e+00)  ; FMax(a,b)
  %311 = call float @dx.op.binary.f32(i32 35, float %307, float 0.000000e+00)  ; FMax(a,b)
  %312 = call float @dx.op.binary.f32(i32 35, float %309, float 0.000000e+00)  ; FMax(a,b)
  %313 = fsub fast float %300, %289
  %314 = fadd fast float %313, %301
  %315 = fsub fast float %300, %290
  %316 = fadd fast float %315, %302
  %317 = fsub fast float %300, %291
  %318 = fadd fast float %317, %303
  %319 = call float @dx.op.binary.f32(i32 35, float %314, float 0.000000e+00)  ; FMax(a,b)
  %320 = call float @dx.op.binary.f32(i32 35, float %316, float 0.000000e+00)  ; FMax(a,b)
  %321 = call float @dx.op.binary.f32(i32 35, float %318, float 0.000000e+00)  ; FMax(a,b)
  %322 = call float @dx.op.binary.f32(i32 36, float %310, float %319)  ; FMin(a,b)
  %323 = call float @dx.op.binary.f32(i32 36, float %311, float %320)  ; FMin(a,b)
  %324 = call float @dx.op.binary.f32(i32 36, float %312, float %321)  ; FMin(a,b)
  %325 = call float @dx.op.binary.f32(i32 36, float %323, float %324)  ; FMin(a,b)
  %326 = call float @dx.op.binary.f32(i32 36, float %322, float %325)  ; FMin(a,b)
  %327 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %328 = extractvalue %dx.types.CBufRet.f32 %327, 0
  %329 = fmul fast float %328, %300
  %330 = fcmp fast ogt float %326, %329
  br i1 %330, label %336, label %331

; <label>:331                                     ; preds = %296
  %332 = add i32 %297, 1
  %333 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %334 = extractvalue %dx.types.CBufRet.i32 %333, 2
  %335 = icmp ult i32 %332, %334
  br i1 %335, label %296, label %336

; <label>:336                                     ; preds = %331, %296
  %337 = phi i32 [ %297, %296 ], [ 0, %331 ]
  br label %338

; <label>:338                                     ; preds = %336, %285
  %339 = phi i32 [ 0, %285 ], [ %337, %336 ]
  %340 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.i32 %340, 2
  %342 = icmp ult i32 %339, %341
  br i1 %342, label %343, label %574

; <label>:343                                     ; preds = %338
  br label %344

; <label>:344                                     ; preds = %562, %343
  %345 = phi float [ %566, %562 ], [ -1.000000e+00, %343 ]
  %346 = phi i32 [ %565, %562 ], [ 0, %343 ]
  %347 = phi i32 [ %567, %562 ], [ %339, %343 ]
  %348 = phi float [ %564, %562 ], [ %263, %343 ]
  %349 = phi float [ %563, %562 ], [ 0.000000e+00, %343 ]
  %350 = add i32 %347, 195
  %351 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %350)  ; CBufferLoadLegacy(handle,regIndex)
  %352 = extractvalue %dx.types.CBufRet.f32 %351, 3
  %353 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %354 = extractvalue %dx.types.CBufRet.f32 %353, 0
  %355 = fmul fast float %354, %352
  %356 = extractvalue %dx.types.CBufRet.f32 %351, 0
  %357 = extractvalue %dx.types.CBufRet.f32 %351, 1
  %358 = extractvalue %dx.types.CBufRet.f32 %351, 2
  %359 = fsub fast float %352, %355
  %360 = fmul fast float %185, %177
  %361 = fmul fast float %185, %178
  %362 = fmul fast float %185, %179
  %363 = fdiv fast float 1.000000e+00, %360
  %364 = fdiv fast float 1.000000e+00, %361
  %365 = fdiv fast float 1.000000e+00, %362
  %366 = fsub fast float %356, %191
  %367 = fsub fast float %366, %359
  %368 = fsub fast float %357, %192
  %369 = fsub fast float %368, %359
  %370 = fsub fast float %358, %193
  %371 = fsub fast float %370, %359
  %372 = fmul fast float %367, %363
  %373 = fmul fast float %369, %364
  %374 = fmul fast float %371, %365
  %375 = fadd fast float %366, %359
  %376 = fadd fast float %368, %359
  %377 = fadd fast float %370, %359
  %378 = fmul fast float %375, %363
  %379 = fmul fast float %376, %364
  %380 = fmul fast float %377, %365
  %381 = call float @dx.op.binary.f32(i32 36, float %372, float %378)  ; FMin(a,b)
  %382 = call float @dx.op.binary.f32(i32 36, float %373, float %379)  ; FMin(a,b)
  %383 = call float @dx.op.binary.f32(i32 36, float %374, float %380)  ; FMin(a,b)
  %384 = call float @dx.op.binary.f32(i32 35, float %372, float %378)  ; FMax(a,b)
  %385 = call float @dx.op.binary.f32(i32 35, float %373, float %379)  ; FMax(a,b)
  %386 = call float @dx.op.binary.f32(i32 35, float %374, float %380)  ; FMax(a,b)
  %387 = call float @dx.op.binary.f32(i32 35, float %382, float %383)  ; FMax(a,b)
  %388 = call float @dx.op.binary.f32(i32 35, float %381, float %387)  ; FMax(a,b)
  %389 = call float @dx.op.binary.f32(i32 36, float %385, float %386)  ; FMin(a,b)
  %390 = call float @dx.op.binary.f32(i32 36, float %384, float %389)  ; FMin(a,b)
  %391 = call float @dx.op.unary.f32(i32 7, float %388)  ; Saturate(value)
  %392 = call float @dx.op.unary.f32(i32 7, float %390)  ; Saturate(value)
  %393 = fmul fast float %391, %185
  %394 = fmul fast float %392, %185
  %395 = call float @dx.op.binary.f32(i32 35, float %393, float %348)  ; FMax(a,b)
  %396 = call float @dx.op.binary.f32(i32 35, float %395, float 0.000000e+00)  ; FMax(a,b)
  %397 = fcmp fast olt float %396, %394
  br i1 %397, label %398, label %562

; <label>:398                                     ; preds = %344
  %399 = fmul fast float %352, 8.000000e+00
  %400 = fmul fast float %399, %354
  br label %401

; <label>:401                                     ; preds = %558, %398
  %402 = phi float [ %349, %398 ], [ %528, %558 ]
  %403 = phi float [ %396, %398 ], [ %554, %558 ]
  %404 = phi i32 [ 0, %398 ], [ %559, %558 ]
  %405 = fmul fast float %403, %177
  %406 = fmul fast float %403, %178
  %407 = fmul fast float %403, %179
  %408 = fadd fast float %405, %191
  %409 = fadd fast float %406, %192
  %410 = fadd fast float %407, %193
  %411 = add i32 %347, 201
  %412 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %411)  ; CBufferLoadLegacy(handle,regIndex)
  %413 = extractvalue %dx.types.CBufRet.f32 %412, 0
  %414 = extractvalue %dx.types.CBufRet.f32 %412, 1
  %415 = extractvalue %dx.types.CBufRet.f32 %412, 2
  %416 = extractvalue %dx.types.CBufRet.f32 %412, 3
  %417 = fmul fast float %416, %408
  %418 = fmul fast float %416, %409
  %419 = fmul fast float %416, %410
  %420 = fadd fast float %417, %413
  %421 = fadd fast float %418, %414
  %422 = fadd fast float %419, %415
  %423 = call float @dx.op.unary.f32(i32 22, float %420)  ; Frc(value)
  %424 = call float @dx.op.unary.f32(i32 22, float %421)  ; Frc(value)
  %425 = call float @dx.op.unary.f32(i32 22, float %422)  ; Frc(value)
  %426 = call float @dx.op.unary.f32(i32 22, float %423)  ; Frc(value)
  %427 = call float @dx.op.unary.f32(i32 22, float %424)  ; Frc(value)
  %428 = call float @dx.op.unary.f32(i32 22, float %425)  ; Frc(value)
  %429 = add i32 %347, 207
  %430 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %429)  ; CBufferLoadLegacy(handle,regIndex)
  %431 = extractvalue %dx.types.CBufRet.f32 %430, 0
  %432 = extractvalue %dx.types.CBufRet.f32 %430, 1
  %433 = extractvalue %dx.types.CBufRet.f32 %430, 2
  %434 = fmul fast float %431, %408
  %435 = fmul fast float %432, %409
  %436 = fmul fast float %433, %410
  %437 = add i32 %347, 213
  %438 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %437)  ; CBufferLoadLegacy(handle,regIndex)
  %439 = extractvalue %dx.types.CBufRet.f32 %438, 0
  %440 = extractvalue %dx.types.CBufRet.f32 %438, 1
  %441 = extractvalue %dx.types.CBufRet.f32 %438, 2
  %442 = fadd fast float %434, %439
  %443 = fadd fast float %435, %440
  %444 = fadd fast float %436, %441
  %445 = call float @dx.op.unary.f32(i32 7, float %442)  ; Saturate(value)
  %446 = call float @dx.op.unary.f32(i32 7, float %443)  ; Saturate(value)
  %447 = call float @dx.op.unary.f32(i32 7, float %444)  ; Saturate(value)
  %448 = extractvalue %dx.types.CBufRet.f32 %430, 3
  %449 = extractvalue %dx.types.CBufRet.f32 %438, 3
  %450 = call float @dx.op.binary.f32(i32 35, float %447, float %448)  ; FMax(a,b)
  %451 = call float @dx.op.binary.f32(i32 36, float %450, float %449)  ; FMin(a,b)
  %452 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %453 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %454 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %452, %dx.types.Handle %453, float %445, float %446, float %451, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %455 = extractvalue %dx.types.ResRet.f32 %454, 0
  %456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %457 = extractvalue %dx.types.CBufRet.f32 %456, 0
  %458 = fmul fast float %457, %400
  %459 = fmul fast float %455, 2.000000e+00
  %460 = fadd fast float %459, -1.000000e+00
  %461 = fmul fast float %458, %460
  %462 = call float @dx.op.unary.f32(i32 7, float %426)  ; Saturate(value)
  %463 = call float @dx.op.unary.f32(i32 7, float %427)  ; Saturate(value)
  %464 = call float @dx.op.unary.f32(i32 7, float %428)  ; Saturate(value)
  %465 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %466 = extractvalue %dx.types.CBufRet.i32 %465, 2
  %467 = sitofp i32 %466 to float
  %468 = fmul fast float %467, %462
  %469 = fmul fast float %467, %463
  %470 = fmul fast float %467, %464
  %471 = mul i32 %466, %347
  %472 = sitofp i32 %471 to float
  %473 = fadd fast float %472, %470
  %474 = fptosi float %468 to i32
  %475 = fptosi float %469 to i32
  %476 = fptosi float %473 to i32
  %477 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %478 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %477, i32 0, i32 %474, i32 %475, i32 %476, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %479 = extractvalue %dx.types.ResRet.i32 %478, 0
  %480 = icmp ne i32 %479, -1
  %481 = extractvalue %dx.types.CBufRet.f32 %456, 1
  %482 = fcmp fast olt float %455, %481
  %483 = and i1 %480, %482
  br i1 %483, label %484, label %525

; <label>:484                                     ; preds = %401
  %485 = icmp slt i32 %479, 0
  %486 = fmul fast float %467, %426
  %487 = fmul fast float %467, %427
  %488 = fmul fast float %467, %428
  %489 = call float @dx.op.unary.f32(i32 22, float %486)  ; Frc(value)
  %490 = call float @dx.op.unary.f32(i32 22, float %487)  ; Frc(value)
  %491 = call float @dx.op.unary.f32(i32 22, float %488)  ; Frc(value)
  %492 = shl i32 %479, 3
  %493 = and i32 %492, 1016
  %494 = lshr i32 %479, 4
  %495 = and i32 %494, 1016
  %496 = lshr i32 %479, 11
  %497 = and i32 %496, 8184
  %498 = uitofp i32 %493 to float
  %499 = uitofp i32 %495 to float
  %500 = uitofp i32 %497 to float
  %501 = fmul fast float %489, 7.000000e+00
  %502 = fmul fast float %490, 7.000000e+00
  %503 = fmul fast float %491, 7.000000e+00
  %504 = fadd fast float %498, 5.000000e-01
  %505 = fadd fast float %504, %501
  %506 = fadd fast float %499, 5.000000e-01
  %507 = fadd fast float %506, %502
  %508 = fadd fast float %500, 5.000000e-01
  %509 = fadd fast float %508, %503
  %510 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %511 = extractvalue %dx.types.CBufRet.f32 %510, 0
  %512 = extractvalue %dx.types.CBufRet.f32 %510, 1
  %513 = extractvalue %dx.types.CBufRet.f32 %510, 2
  %514 = fmul fast float %511, %505
  %515 = fmul fast float %507, %512
  %516 = fmul fast float %509, %513
  %517 = select i1 %485, float 0.000000e+00, float 1.000000e+00
  %518 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %519 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %520 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %518, %dx.types.Handle %519, float %514, float %515, float %516, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %521 = extractvalue %dx.types.ResRet.f32 %520, 0
  %522 = fmul fast float %521, 2.000000e+00
  %523 = fadd fast float %522, -1.000000e+00
  %524 = fmul fast float %523, %400
  br label %525

; <label>:525                                     ; preds = %484, %401
  %526 = phi float [ %524, %484 ], [ %461, %401 ]
  %527 = phi float [ %517, %484 ], [ 1.000000e+00, %401 ]
  %528 = call float @dx.op.binary.f32(i32 35, float %526, float %402)  ; FMax(a,b)
  %529 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %530 = extractvalue %dx.types.CBufRet.f32 %529, 3
  %531 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 223)  ; CBufferLoadLegacy(handle,regIndex)
  %532 = extractvalue %dx.types.CBufRet.f32 %531, 0
  %533 = fsub fast float %530, %532
  %534 = fmul fast float %533, %527
  %535 = fadd fast float %534, %532
  %536 = fmul fast float %355, 2.000000e+00
  %537 = fdiv fast float %528, %536
  %538 = call float @dx.op.unary.f32(i32 7, float %537)  ; Saturate(value)
  %539 = fmul fast float %538, %355
  %540 = fmul fast float %539, %535
  %541 = fcmp fast olt float %526, %540
  br i1 %541, label %542, label %546

; <label>:542                                     ; preds = %525
  %543 = fadd fast float %526, %403
  %544 = fsub fast float %543, %540
  %545 = call float @dx.op.binary.f32(i32 35, float %544, float 0.000000e+00)  ; FMax(a,b)
  br label %562

; <label>:546                                     ; preds = %525
  %547 = extractvalue %dx.types.CBufRet.f32 %531, 1
  %548 = fsub fast float 1.000000e+00, %547
  %549 = fmul fast float %548, %527
  %550 = fadd fast float %549, %547
  %551 = fmul fast float %550, %355
  %552 = fmul fast float %526, %283
  %553 = call float @dx.op.binary.f32(i32 35, float %552, float %551)  ; FMax(a,b)
  %554 = fadd fast float %553, %403
  %555 = fcmp fast ogt float %554, %394
  %556 = fcmp fast oge float %345, 0.000000e+00
  %557 = or i1 %556, %555
  br i1 %557, label %561, label %558

; <label>:558                                     ; preds = %546
  %559 = add nuw nsw i32 %404, 1
  %560 = icmp ult i32 %559, 256
  br i1 %560, label %401, label %561, !llvm.loop !57

; <label>:561                                     ; preds = %558, %546
  br label %562

; <label>:562                                     ; preds = %561, %542, %344
  %563 = phi float [ %349, %344 ], [ %528, %542 ], [ %528, %561 ]
  %564 = phi float [ %348, %344 ], [ %394, %542 ], [ %394, %561 ]
  %565 = phi i32 [ %346, %344 ], [ %347, %542 ], [ %346, %561 ]
  %566 = phi float [ %345, %344 ], [ %545, %542 ], [ %345, %561 ]
  %567 = add i32 %347, 1
  %568 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %569 = extractvalue %dx.types.CBufRet.i32 %568, 2
  %570 = icmp ult i32 %567, %569
  %571 = fcmp fast olt float %566, 0.000000e+00
  %572 = and i1 %571, %570
  br i1 %572, label %344, label %573, !llvm.loop !59

; <label>:573                                     ; preds = %562
  br label %574

; <label>:574                                     ; preds = %573, %338
  %575 = phi float [ -1.000000e+00, %338 ], [ %566, %573 ]
  %576 = phi i32 [ 0, %338 ], [ %565, %573 ]
  %577 = fcmp fast ult float %575, 0.000000e+00
  br i1 %577, label %1583, label %578

; <label>:578                                     ; preds = %574
  %579 = fmul fast float %575, %177
  %580 = fmul fast float %575, %178
  %581 = fmul fast float %575, %179
  %582 = fadd fast float %579, %191
  %583 = fadd fast float %580, %192
  %584 = fadd fast float %581, %193
  %585 = fsub fast float -0.000000e+00, %177
  %586 = fsub fast float -0.000000e+00, %178
  %587 = fsub fast float -0.000000e+00, %179
  %588 = add i32 %576, 201
  %589 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %588)  ; CBufferLoadLegacy(handle,regIndex)
  %590 = extractvalue %dx.types.CBufRet.f32 %589, 0
  %591 = extractvalue %dx.types.CBufRet.f32 %589, 1
  %592 = extractvalue %dx.types.CBufRet.f32 %589, 2
  %593 = extractvalue %dx.types.CBufRet.f32 %589, 3
  %594 = fmul fast float %593, %582
  %595 = fmul fast float %593, %583
  %596 = fmul fast float %593, %584
  %597 = fadd fast float %594, %590
  %598 = fadd fast float %595, %591
  %599 = fadd fast float %596, %592
  %600 = call float @dx.op.unary.f32(i32 22, float %597)  ; Frc(value)
  %601 = call float @dx.op.unary.f32(i32 22, float %598)  ; Frc(value)
  %602 = call float @dx.op.unary.f32(i32 22, float %599)  ; Frc(value)
  %603 = call float @dx.op.unary.f32(i32 22, float %600)  ; Frc(value)
  %604 = call float @dx.op.unary.f32(i32 22, float %601)  ; Frc(value)
  %605 = call float @dx.op.unary.f32(i32 22, float %602)  ; Frc(value)
  %606 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %607 = extractvalue %dx.types.CBufRet.f32 %606, 0
  %608 = fmul fast float %607, 5.000000e-01
  %609 = fadd fast float %608, %603
  %610 = call float @dx.op.unary.f32(i32 22, float %609)  ; Frc(value)
  %611 = call float @dx.op.unary.f32(i32 22, float %604)  ; Frc(value)
  %612 = call float @dx.op.unary.f32(i32 22, float %605)  ; Frc(value)
  %613 = call float @dx.op.unary.f32(i32 7, float %610)  ; Saturate(value)
  %614 = call float @dx.op.unary.f32(i32 7, float %611)  ; Saturate(value)
  %615 = call float @dx.op.unary.f32(i32 7, float %612)  ; Saturate(value)
  %616 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %617 = extractvalue %dx.types.CBufRet.i32 %616, 2
  %618 = sitofp i32 %617 to float
  %619 = fmul fast float %618, %613
  %620 = fmul fast float %618, %614
  %621 = fmul fast float %618, %615
  %622 = mul i32 %617, %576
  %623 = sitofp i32 %622 to float
  %624 = fadd fast float %623, %621
  %625 = fptosi float %619 to i32
  %626 = fptosi float %620 to i32
  %627 = fptosi float %624 to i32
  %628 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %629 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %628, i32 0, i32 %625, i32 %626, i32 %627, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %630 = extractvalue %dx.types.ResRet.i32 %629, 0
  %631 = icmp eq i32 %630, -1
  br i1 %631, label %668, label %632

; <label>:632                                     ; preds = %578
  %633 = fmul fast float %618, %610
  %634 = fmul fast float %618, %611
  %635 = fmul fast float %618, %612
  %636 = call float @dx.op.unary.f32(i32 22, float %633)  ; Frc(value)
  %637 = call float @dx.op.unary.f32(i32 22, float %634)  ; Frc(value)
  %638 = call float @dx.op.unary.f32(i32 22, float %635)  ; Frc(value)
  %639 = shl i32 %630, 3
  %640 = and i32 %639, 1016
  %641 = lshr i32 %630, 4
  %642 = and i32 %641, 1016
  %643 = lshr i32 %630, 11
  %644 = and i32 %643, 8184
  %645 = uitofp i32 %640 to float
  %646 = uitofp i32 %642 to float
  %647 = uitofp i32 %644 to float
  %648 = fmul fast float %636, 7.000000e+00
  %649 = fmul fast float %637, 7.000000e+00
  %650 = fmul fast float %638, 7.000000e+00
  %651 = fadd fast float %645, 5.000000e-01
  %652 = fadd fast float %651, %648
  %653 = fadd fast float %646, 5.000000e-01
  %654 = fadd fast float %653, %649
  %655 = fadd fast float %647, 5.000000e-01
  %656 = fadd fast float %655, %650
  %657 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %658 = extractvalue %dx.types.CBufRet.f32 %657, 0
  %659 = extractvalue %dx.types.CBufRet.f32 %657, 1
  %660 = extractvalue %dx.types.CBufRet.f32 %657, 2
  %661 = fmul fast float %658, %652
  %662 = fmul fast float %654, %659
  %663 = fmul fast float %656, %660
  %664 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %665 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %666 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %664, %dx.types.Handle %665, float %661, float %662, float %663, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %667 = extractvalue %dx.types.ResRet.f32 %666, 0
  br label %668

; <label>:668                                     ; preds = %632, %578
  %669 = phi float [ %667, %632 ], [ 1.000000e+00, %578 ]
  %670 = fsub fast float %603, %608
  %671 = call float @dx.op.unary.f32(i32 22, float %670)  ; Frc(value)
  %672 = call float @dx.op.unary.f32(i32 7, float %671)  ; Saturate(value)
  %673 = fmul fast float %618, %672
  %674 = fptosi float %673 to i32
  %675 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %628, i32 0, i32 %674, i32 %626, i32 %627, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %676 = extractvalue %dx.types.ResRet.i32 %675, 0
  %677 = icmp eq i32 %676, -1
  br i1 %677, label %714, label %678

; <label>:678                                     ; preds = %668
  %679 = fmul fast float %618, %671
  %680 = fmul fast float %618, %611
  %681 = fmul fast float %618, %612
  %682 = call float @dx.op.unary.f32(i32 22, float %679)  ; Frc(value)
  %683 = call float @dx.op.unary.f32(i32 22, float %680)  ; Frc(value)
  %684 = call float @dx.op.unary.f32(i32 22, float %681)  ; Frc(value)
  %685 = shl i32 %676, 3
  %686 = and i32 %685, 1016
  %687 = lshr i32 %676, 4
  %688 = and i32 %687, 1016
  %689 = lshr i32 %676, 11
  %690 = and i32 %689, 8184
  %691 = uitofp i32 %686 to float
  %692 = uitofp i32 %688 to float
  %693 = uitofp i32 %690 to float
  %694 = fmul fast float %682, 7.000000e+00
  %695 = fmul fast float %683, 7.000000e+00
  %696 = fmul fast float %684, 7.000000e+00
  %697 = fadd fast float %691, 5.000000e-01
  %698 = fadd fast float %697, %694
  %699 = fadd fast float %692, 5.000000e-01
  %700 = fadd fast float %699, %695
  %701 = fadd fast float %693, 5.000000e-01
  %702 = fadd fast float %701, %696
  %703 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %704 = extractvalue %dx.types.CBufRet.f32 %703, 0
  %705 = extractvalue %dx.types.CBufRet.f32 %703, 1
  %706 = extractvalue %dx.types.CBufRet.f32 %703, 2
  %707 = fmul fast float %704, %698
  %708 = fmul fast float %700, %705
  %709 = fmul fast float %702, %706
  %710 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %711 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %712 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %710, %dx.types.Handle %711, float %707, float %708, float %709, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %713 = extractvalue %dx.types.ResRet.f32 %712, 0
  br label %714

; <label>:714                                     ; preds = %678, %668
  %715 = phi float [ %713, %678 ], [ 1.000000e+00, %668 ]
  %716 = fadd fast float %608, %604
  %717 = call float @dx.op.unary.f32(i32 22, float %603)  ; Frc(value)
  %718 = call float @dx.op.unary.f32(i32 22, float %716)  ; Frc(value)
  %719 = call float @dx.op.unary.f32(i32 7, float %717)  ; Saturate(value)
  %720 = call float @dx.op.unary.f32(i32 7, float %718)  ; Saturate(value)
  %721 = fmul fast float %618, %719
  %722 = fmul fast float %618, %720
  %723 = fptosi float %721 to i32
  %724 = fptosi float %722 to i32
  %725 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %628, i32 0, i32 %723, i32 %724, i32 %627, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %726 = extractvalue %dx.types.ResRet.i32 %725, 0
  %727 = icmp eq i32 %726, -1
  br i1 %727, label %764, label %728

; <label>:728                                     ; preds = %714
  %729 = fmul fast float %618, %717
  %730 = fmul fast float %618, %718
  %731 = fmul fast float %618, %612
  %732 = call float @dx.op.unary.f32(i32 22, float %729)  ; Frc(value)
  %733 = call float @dx.op.unary.f32(i32 22, float %730)  ; Frc(value)
  %734 = call float @dx.op.unary.f32(i32 22, float %731)  ; Frc(value)
  %735 = shl i32 %726, 3
  %736 = and i32 %735, 1016
  %737 = lshr i32 %726, 4
  %738 = and i32 %737, 1016
  %739 = lshr i32 %726, 11
  %740 = and i32 %739, 8184
  %741 = uitofp i32 %736 to float
  %742 = uitofp i32 %738 to float
  %743 = uitofp i32 %740 to float
  %744 = fmul fast float %732, 7.000000e+00
  %745 = fmul fast float %733, 7.000000e+00
  %746 = fmul fast float %734, 7.000000e+00
  %747 = fadd fast float %741, 5.000000e-01
  %748 = fadd fast float %747, %744
  %749 = fadd fast float %742, 5.000000e-01
  %750 = fadd fast float %749, %745
  %751 = fadd fast float %743, 5.000000e-01
  %752 = fadd fast float %751, %746
  %753 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %754 = extractvalue %dx.types.CBufRet.f32 %753, 0
  %755 = extractvalue %dx.types.CBufRet.f32 %753, 1
  %756 = extractvalue %dx.types.CBufRet.f32 %753, 2
  %757 = fmul fast float %754, %748
  %758 = fmul fast float %750, %755
  %759 = fmul fast float %752, %756
  %760 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %761 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %762 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %760, %dx.types.Handle %761, float %757, float %758, float %759, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %763 = extractvalue %dx.types.ResRet.f32 %762, 0
  br label %764

; <label>:764                                     ; preds = %728, %714
  %765 = phi float [ %763, %728 ], [ 1.000000e+00, %714 ]
  %766 = fsub fast float %604, %608
  %767 = call float @dx.op.unary.f32(i32 22, float %766)  ; Frc(value)
  %768 = call float @dx.op.unary.f32(i32 7, float %767)  ; Saturate(value)
  %769 = fmul fast float %618, %768
  %770 = fptosi float %769 to i32
  %771 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %628, i32 0, i32 %723, i32 %770, i32 %627, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %772 = extractvalue %dx.types.ResRet.i32 %771, 0
  %773 = icmp eq i32 %772, -1
  br i1 %773, label %810, label %774

; <label>:774                                     ; preds = %764
  %775 = fmul fast float %618, %717
  %776 = fmul fast float %618, %767
  %777 = fmul fast float %618, %612
  %778 = call float @dx.op.unary.f32(i32 22, float %775)  ; Frc(value)
  %779 = call float @dx.op.unary.f32(i32 22, float %776)  ; Frc(value)
  %780 = call float @dx.op.unary.f32(i32 22, float %777)  ; Frc(value)
  %781 = shl i32 %772, 3
  %782 = and i32 %781, 1016
  %783 = lshr i32 %772, 4
  %784 = and i32 %783, 1016
  %785 = lshr i32 %772, 11
  %786 = and i32 %785, 8184
  %787 = uitofp i32 %782 to float
  %788 = uitofp i32 %784 to float
  %789 = uitofp i32 %786 to float
  %790 = fmul fast float %778, 7.000000e+00
  %791 = fmul fast float %779, 7.000000e+00
  %792 = fmul fast float %780, 7.000000e+00
  %793 = fadd fast float %787, 5.000000e-01
  %794 = fadd fast float %793, %790
  %795 = fadd fast float %788, 5.000000e-01
  %796 = fadd fast float %795, %791
  %797 = fadd fast float %789, 5.000000e-01
  %798 = fadd fast float %797, %792
  %799 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %800 = extractvalue %dx.types.CBufRet.f32 %799, 0
  %801 = extractvalue %dx.types.CBufRet.f32 %799, 1
  %802 = extractvalue %dx.types.CBufRet.f32 %799, 2
  %803 = fmul fast float %800, %794
  %804 = fmul fast float %796, %801
  %805 = fmul fast float %798, %802
  %806 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %807 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %808 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %806, %dx.types.Handle %807, float %803, float %804, float %805, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %809 = extractvalue %dx.types.ResRet.f32 %808, 0
  br label %810

; <label>:810                                     ; preds = %774, %764
  %811 = phi float [ %809, %774 ], [ 1.000000e+00, %764 ]
  %812 = fadd fast float %608, %605
  %813 = call float @dx.op.unary.f32(i32 22, float %812)  ; Frc(value)
  %814 = call float @dx.op.unary.f32(i32 7, float %813)  ; Saturate(value)
  %815 = fmul fast float %618, %814
  %816 = fadd fast float %623, %815
  %817 = fptosi float %816 to i32
  %818 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %628, i32 0, i32 %723, i32 %626, i32 %817, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %819 = extractvalue %dx.types.ResRet.i32 %818, 0
  %820 = icmp eq i32 %819, -1
  br i1 %820, label %857, label %821

; <label>:821                                     ; preds = %810
  %822 = fmul fast float %618, %717
  %823 = fmul fast float %618, %611
  %824 = fmul fast float %618, %813
  %825 = call float @dx.op.unary.f32(i32 22, float %822)  ; Frc(value)
  %826 = call float @dx.op.unary.f32(i32 22, float %823)  ; Frc(value)
  %827 = call float @dx.op.unary.f32(i32 22, float %824)  ; Frc(value)
  %828 = shl i32 %819, 3
  %829 = and i32 %828, 1016
  %830 = lshr i32 %819, 4
  %831 = and i32 %830, 1016
  %832 = lshr i32 %819, 11
  %833 = and i32 %832, 8184
  %834 = uitofp i32 %829 to float
  %835 = uitofp i32 %831 to float
  %836 = uitofp i32 %833 to float
  %837 = fmul fast float %825, 7.000000e+00
  %838 = fmul fast float %826, 7.000000e+00
  %839 = fmul fast float %827, 7.000000e+00
  %840 = fadd fast float %834, 5.000000e-01
  %841 = fadd fast float %840, %837
  %842 = fadd fast float %835, 5.000000e-01
  %843 = fadd fast float %842, %838
  %844 = fadd fast float %836, 5.000000e-01
  %845 = fadd fast float %844, %839
  %846 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %847 = extractvalue %dx.types.CBufRet.f32 %846, 0
  %848 = extractvalue %dx.types.CBufRet.f32 %846, 1
  %849 = extractvalue %dx.types.CBufRet.f32 %846, 2
  %850 = fmul fast float %847, %841
  %851 = fmul fast float %843, %848
  %852 = fmul fast float %845, %849
  %853 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %854 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %855 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %853, %dx.types.Handle %854, float %850, float %851, float %852, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %856 = extractvalue %dx.types.ResRet.f32 %855, 0
  br label %857

; <label>:857                                     ; preds = %821, %810
  %858 = phi float [ %856, %821 ], [ 1.000000e+00, %810 ]
  %859 = fsub fast float %605, %608
  %860 = call float @dx.op.unary.f32(i32 22, float %859)  ; Frc(value)
  %861 = call float @dx.op.unary.f32(i32 7, float %860)  ; Saturate(value)
  %862 = fmul fast float %618, %861
  %863 = fadd fast float %623, %862
  %864 = fptosi float %863 to i32
  %865 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %628, i32 0, i32 %723, i32 %626, i32 %864, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %866 = extractvalue %dx.types.ResRet.i32 %865, 0
  %867 = icmp eq i32 %866, -1
  br i1 %867, label %904, label %868

; <label>:868                                     ; preds = %857
  %869 = fmul fast float %618, %717
  %870 = fmul fast float %618, %611
  %871 = fmul fast float %618, %860
  %872 = call float @dx.op.unary.f32(i32 22, float %869)  ; Frc(value)
  %873 = call float @dx.op.unary.f32(i32 22, float %870)  ; Frc(value)
  %874 = call float @dx.op.unary.f32(i32 22, float %871)  ; Frc(value)
  %875 = shl i32 %866, 3
  %876 = and i32 %875, 1016
  %877 = lshr i32 %866, 4
  %878 = and i32 %877, 1016
  %879 = lshr i32 %866, 11
  %880 = and i32 %879, 8184
  %881 = uitofp i32 %876 to float
  %882 = uitofp i32 %878 to float
  %883 = uitofp i32 %880 to float
  %884 = fmul fast float %872, 7.000000e+00
  %885 = fmul fast float %873, 7.000000e+00
  %886 = fmul fast float %874, 7.000000e+00
  %887 = fadd fast float %881, 5.000000e-01
  %888 = fadd fast float %887, %884
  %889 = fadd fast float %882, 5.000000e-01
  %890 = fadd fast float %889, %885
  %891 = fadd fast float %883, 5.000000e-01
  %892 = fadd fast float %891, %886
  %893 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %894 = extractvalue %dx.types.CBufRet.f32 %893, 0
  %895 = extractvalue %dx.types.CBufRet.f32 %893, 1
  %896 = extractvalue %dx.types.CBufRet.f32 %893, 2
  %897 = fmul fast float %894, %888
  %898 = fmul fast float %890, %895
  %899 = fmul fast float %892, %896
  %900 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %901 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %902 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %900, %dx.types.Handle %901, float %897, float %898, float %899, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %903 = extractvalue %dx.types.ResRet.f32 %902, 0
  br label %904

; <label>:904                                     ; preds = %868, %857
  %905 = phi float [ %903, %868 ], [ 1.000000e+00, %857 ]
  %906 = fsub fast float %669, %715
  %907 = fsub fast float %765, %811
  %908 = fsub fast float %858, %905
  %909 = fmul fast float %906, %906
  %910 = fmul fast float %907, %907
  %911 = fadd fast float %910, %909
  %912 = fmul fast float %908, %908
  %913 = fadd fast float %911, %912
  %914 = call float @dx.op.unary.f32(i32 24, float %913)  ; Sqrt(value)
  %915 = fcmp fast ogt float %914, 0x3F50624DE0000000
  br i1 %915, label %916, label %920

; <label>:916                                     ; preds = %904
  %917 = fdiv fast float %906, %914
  %918 = fdiv fast float %907, %914
  %919 = fdiv fast float %908, %914
  br label %920

; <label>:920                                     ; preds = %916, %904
  %921 = phi float [ %917, %916 ], [ %585, %904 ]
  %922 = phi float [ %918, %916 ], [ %586, %904 ]
  %923 = phi float [ %919, %916 ], [ %587, %904 ]
  %924 = add i32 %576, 195
  %925 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %924)  ; CBufferLoadLegacy(handle,regIndex)
  %926 = extractvalue %dx.types.CBufRet.f32 %925, 3
  %927 = fmul fast float %607, %926
  %928 = fmul fast float %927, %921
  %929 = fmul fast float %927, %922
  %930 = fmul fast float %927, %923
  %931 = fadd fast float %928, %582
  %932 = fadd fast float %929, %583
  %933 = fadd fast float %930, %584
  %934 = fmul fast float %931, %593
  %935 = fmul fast float %932, %593
  %936 = fmul fast float %933, %593
  %937 = fadd fast float %934, %590
  %938 = fadd fast float %935, %591
  %939 = fadd fast float %936, %592
  %940 = call float @dx.op.unary.f32(i32 22, float %937)  ; Frc(value)
  %941 = call float @dx.op.unary.f32(i32 22, float %938)  ; Frc(value)
  %942 = call float @dx.op.unary.f32(i32 22, float %939)  ; Frc(value)
  %943 = call float @dx.op.unary.f32(i32 22, float %940)  ; Frc(value)
  %944 = call float @dx.op.unary.f32(i32 22, float %941)  ; Frc(value)
  %945 = call float @dx.op.unary.f32(i32 22, float %942)  ; Frc(value)
  %946 = call float @dx.op.unary.f32(i32 7, float %943)  ; Saturate(value)
  %947 = call float @dx.op.unary.f32(i32 7, float %944)  ; Saturate(value)
  %948 = call float @dx.op.unary.f32(i32 7, float %945)  ; Saturate(value)
  %949 = fmul fast float %618, %946
  %950 = fmul fast float %618, %947
  %951 = fmul fast float %618, %948
  %952 = fadd fast float %623, %951
  %953 = fptosi float %949 to i32
  %954 = fptosi float %950 to i32
  %955 = fptosi float %952 to i32
  %956 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %628, i32 0, i32 %953, i32 %954, i32 %955, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %957 = extractvalue %dx.types.ResRet.i32 %956, 0
  %958 = icmp eq i32 %957, -1
  br i1 %958, label %1583, label %959

; <label>:959                                     ; preds = %920
  %960 = call float @dx.op.unary.f32(i32 22, float %949)  ; Frc(value)
  %961 = call float @dx.op.unary.f32(i32 22, float %950)  ; Frc(value)
  %962 = call float @dx.op.unary.f32(i32 22, float %951)  ; Frc(value)
  %963 = call float @dx.op.unary.f32(i32 22, float %960)  ; Frc(value)
  %964 = call float @dx.op.unary.f32(i32 22, float %961)  ; Frc(value)
  %965 = call float @dx.op.unary.f32(i32 22, float %962)  ; Frc(value)
  %966 = fmul fast float %963, 4.000000e+00
  %967 = fmul fast float %964, 4.000000e+00
  %968 = fmul fast float %965, 4.000000e+00
  %969 = fptoui float %966 to i32
  %970 = fptoui float %967 to i32
  %971 = fptoui float %968 to i32
  %972 = and i32 %969, 1
  %973 = shl i32 %970, 1
  %974 = and i32 %973, 2
  %975 = shl i32 %971, 2
  %976 = and i32 %975, 4
  %977 = shl i32 %969, 2
  %978 = and i32 %977, 8
  %979 = shl i32 %970, 3
  %980 = and i32 %979, 16
  %981 = shl i32 %971, 4
  %982 = and i32 %981, 32
  %983 = shl i32 %957, 6
  %984 = and i32 %983, 1073741760
  %985 = or i32 %972, %984
  %986 = or i32 %985, %978
  %987 = or i32 %986, %974
  %988 = or i32 %987, %980
  %989 = or i32 %988, %976
  %990 = or i32 %989, %982
  %991 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %992 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %991, i32 %990, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %993 = extractvalue %dx.types.ResRet.i32 %992, 0
  %994 = extractvalue %dx.types.ResRet.i32 %992, 1
  %995 = extractvalue %dx.types.ResRet.i32 %992, 2
  %996 = extractvalue %dx.types.ResRet.i32 %992, 3
  %997 = getelementptr inbounds [4 x i32], [4 x i32]* %47, i32 0, i32 0
  store i32 %993, i32* %997, align 4
  %998 = getelementptr inbounds [4 x i32], [4 x i32]* %47, i32 0, i32 1
  store i32 %994, i32* %998, align 4
  %999 = getelementptr inbounds [4 x i32], [4 x i32]* %47, i32 0, i32 2
  store i32 %995, i32* %999, align 4
  %1000 = getelementptr inbounds [4 x i32], [4 x i32]* %47, i32 0, i32 3
  store i32 %996, i32* %1000, align 4
  %1001 = icmp eq i32 %993, -1
  br i1 %1001, label %1544, label %1002

; <label>:1002                                    ; preds = %959
  br label %1003

; <label>:1003                                    ; preds = %1532, %1002
  %1004 = phi i32 [ %1530, %1532 ], [ 0, %1002 ]
  %1005 = phi i32 [ %1529, %1532 ], [ 0, %1002 ]
  %1006 = phi i32 [ %1528, %1532 ], [ 0, %1002 ]
  %1007 = phi i32 [ %1527, %1532 ], [ 0, %1002 ]
  %1008 = phi float [ %1526, %1532 ], [ 0.000000e+00, %1002 ]
  %1009 = phi float [ %1525, %1532 ], [ 0.000000e+00, %1002 ]
  %1010 = phi float [ %1524, %1532 ], [ 0.000000e+00, %1002 ]
  %1011 = phi float [ %1523, %1532 ], [ 0.000000e+00, %1002 ]
  %1012 = phi float [ %1522, %1532 ], [ 0.000000e+00, %1002 ]
  %1013 = phi i32 [ %1534, %1532 ], [ %993, %1002 ]
  %1014 = shl i32 %1013, 2
  %1015 = and i32 %1014, 67108860
  %1016 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1017 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1016, i32 %1015, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1018 = extractvalue %dx.types.ResRet.i32 %1017, 0
  %1019 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1020 = extractvalue %dx.types.CBufRet.i32 %1019, 1
  %1021 = icmp ult i32 %1018, %1020
  br i1 %1021, label %1022, label %1521

; <label>:1022                                    ; preds = %1003
  %1023 = fmul fast float %927, 3.000000e+00
  %1024 = fmul fast float %575, %197
  %1025 = mul i32 %1018, 6
  %1026 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1027 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1026, i32 %1025, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1028 = extractvalue %dx.types.ResRet.f32 %1027, 0
  %1029 = extractvalue %dx.types.ResRet.f32 %1027, 1
  %1030 = extractvalue %dx.types.ResRet.f32 %1027, 2
  %1031 = or i32 %1025, 1
  %1032 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1026, i32 %1031, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1033 = extractvalue %dx.types.ResRet.f32 %1032, 0
  %1034 = extractvalue %dx.types.ResRet.f32 %1032, 1
  %1035 = extractvalue %dx.types.ResRet.f32 %1032, 2
  %1036 = extractvalue %dx.types.ResRet.f32 %1032, 3
  %1037 = add i32 %1025, 2
  %1038 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1026, i32 %1037, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1039 = extractvalue %dx.types.ResRet.f32 %1038, 0
  %1040 = extractvalue %dx.types.ResRet.f32 %1038, 1
  %1041 = extractvalue %dx.types.ResRet.f32 %1038, 2
  %1042 = extractvalue %dx.types.ResRet.f32 %1038, 3
  %1043 = add i32 %1025, 3
  %1044 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1026, i32 %1043, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1045 = extractvalue %dx.types.ResRet.f32 %1044, 0
  %1046 = extractvalue %dx.types.ResRet.f32 %1044, 1
  %1047 = extractvalue %dx.types.ResRet.f32 %1044, 2
  %1048 = extractvalue %dx.types.ResRet.f32 %1044, 3
  %1049 = add i32 %1025, 4
  %1050 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1026, i32 %1049, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1051 = extractvalue %dx.types.ResRet.f32 %1050, 0
  %1052 = extractvalue %dx.types.ResRet.f32 %1050, 1
  %1053 = extractvalue %dx.types.ResRet.f32 %1050, 2
  %1054 = extractvalue %dx.types.ResRet.f32 %1050, 3
  %1055 = bitcast float %1051 to i32
  %1056 = bitcast float %1052 to i32
  %1057 = add i32 %1025, 5
  %1058 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1026, i32 %1057, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1059 = extractvalue %dx.types.ResRet.f32 %1058, 0
  %1060 = extractvalue %dx.types.ResRet.f32 %1058, 1
  %1061 = extractvalue %dx.types.ResRet.f32 %1058, 2
  %1062 = extractvalue %dx.types.ResRet.f32 %1058, 3
  %1063 = and i32 %1056, 65536
  %1064 = icmp ne i32 %1063, 0
  %1065 = and i32 %1056, 131072
  %1066 = icmp ne i32 %1065, 0
  %1067 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 0
  %1068 = bitcast i32* %1067 to float*
  store float %1053, float* %1068, align 4, !tbaa !60, !alias.scope !64, !noalias !67
  %1069 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 1
  %1070 = bitcast i32* %1069 to float*
  store float %1054, float* %1070, align 4, !tbaa !60, !alias.scope !64, !noalias !67
  %1071 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 2
  %1072 = bitcast i32* %1071 to float*
  store float %1059, float* %1072, align 4, !tbaa !60, !alias.scope !64, !noalias !67
  %1073 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 3
  %1074 = bitcast i32* %1073 to float*
  store float %1060, float* %1074, align 4, !tbaa !60, !alias.scope !64, !noalias !67
  %1075 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 4
  %1076 = bitcast i32* %1075 to float*
  store float %1061, float* %1076, align 4, !tbaa !60, !alias.scope !64, !noalias !67
  %1077 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 5
  %1078 = bitcast i32* %1077 to float*
  store float %1062, float* %1078, align 4, !tbaa !60, !alias.scope !64, !noalias !67
  %1079 = fadd fast float %1023, 5.000000e+01
  %1080 = select i1 %1066, float %1079, float %1023
  %1081 = fmul fast float %1028, -2.097152e+06
  %1082 = fadd fast float %575, %187
  %1083 = fmul fast float %1082, %177
  %1084 = fadd fast float %138, %1081
  %1085 = fsub fast float %1084, %1036
  %1086 = fadd fast float %1085, %1083
  %1087 = fmul fast float %1029, -2.097152e+06
  %1088 = fmul fast float %1082, %178
  %1089 = fadd fast float %142, %1087
  %1090 = fsub fast float %1089, %1042
  %1091 = fadd fast float %1090, %1088
  %1092 = fmul fast float %1030, -2.097152e+06
  %1093 = fmul fast float %1082, %179
  %1094 = fadd fast float %146, %1092
  %1095 = fsub fast float %1094, %1048
  %1096 = fadd fast float %1095, %1093
  %1097 = fmul fast float %1086, %1033
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1091, float %1039, float %1097)  ; FMad(a,b,c)
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %1096, float %1045, float %1098)  ; FMad(a,b,c)
  %1100 = fmul fast float %1086, %1034
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %1091, float %1040, float %1100)  ; FMad(a,b,c)
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1096, float %1046, float %1101)  ; FMad(a,b,c)
  %1103 = fmul fast float %1086, %1035
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %1091, float %1041, float %1103)  ; FMad(a,b,c)
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1096, float %1047, float %1104)  ; FMad(a,b,c)
  %1106 = fmul fast float %1033, %921
  %1107 = call float @dx.op.tertiary.f32(i32 46, float %922, float %1039, float %1106)  ; FMad(a,b,c)
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %923, float %1045, float %1107)  ; FMad(a,b,c)
  %1109 = fmul fast float %1034, %921
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %922, float %1040, float %1109)  ; FMad(a,b,c)
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %923, float %1046, float %1110)  ; FMad(a,b,c)
  %1112 = fmul fast float %1035, %921
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %922, float %1041, float %1112)  ; FMad(a,b,c)
  %1114 = call float @dx.op.tertiary.f32(i32 46, float %923, float %1047, float %1113)  ; FMad(a,b,c)
  %1115 = fmul fast float %1108, %1108
  %1116 = fmul fast float %1111, %1111
  %1117 = fmul fast float %1114, %1114
  %1118 = fcmp fast ogt float %1115, 0.000000e+00
  br i1 %1118, label %1119, label %1124

; <label>:1119                                    ; preds = %1022
  %1120 = fcmp uge float %1108, 0.000000e+00
  %1121 = zext i1 %1120 to i32
  %1122 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 %1121
  %1123 = load i32, i32* %1122, align 4, !tbaa !60, !noalias !67
  br label %1124

; <label>:1124                                    ; preds = %1119, %1022
  %1125 = phi i32 [ %1123, %1119 ], [ 0, %1022 ]
  %1126 = fcmp fast ogt float %1116, 0.000000e+00
  br i1 %1126, label %1127, label %1133

; <label>:1127                                    ; preds = %1124
  %1128 = fcmp fast olt float %1111, 0.000000e+00
  %1129 = select i1 %1128, i32 2, i32 3
  %1130 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 %1129
  %1131 = load i32, i32* %1130, align 4, !tbaa !60, !noalias !67
  %1132 = or i32 %1131, %1125
  br label %1133

; <label>:1133                                    ; preds = %1127, %1124
  %1134 = phi i32 [ %1132, %1127 ], [ %1125, %1124 ]
  %1135 = fcmp fast ogt float %1117, 0.000000e+00
  br i1 %1135, label %1136, label %1142

; <label>:1136                                    ; preds = %1133
  %1137 = fcmp fast olt float %1114, 0.000000e+00
  %1138 = select i1 %1137, i32 4, i32 5
  %1139 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 %1138
  %1140 = load i32, i32* %1139, align 4, !tbaa !60, !noalias !67
  %1141 = or i32 %1140, %1134
  br label %1142

; <label>:1142                                    ; preds = %1136, %1133
  %1143 = phi i32 [ %1141, %1136 ], [ %1134, %1133 ]
  %1144 = icmp eq i32 %1143, 0
  br i1 %1144, label %1189, label %1145

; <label>:1145                                    ; preds = %1142
  br label %1146

; <label>:1146                                    ; preds = %1146, %1145
  %1147 = phi i32 [ %1152, %1146 ], [ %1143, %1145 ]
  %1148 = phi i32 [ %1186, %1146 ], [ 0, %1145 ]
  %1149 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1147)  ; FirstbitLo(value)
  %1150 = and i32 %1149, 31
  %1151 = shl i32 1, %1150
  %1152 = xor i32 %1151, %1147
  %1153 = add i32 %1149, %1055
  %1154 = mul i32 %1153, 10
  %1155 = add i32 %1154, 6
  %1156 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1157 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1156, i32 %1155, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1158 = extractvalue %dx.types.ResRet.f32 %1157, 3
  %1159 = add i32 %1154, 7
  %1160 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1156, i32 %1159, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1161 = extractvalue %dx.types.ResRet.f32 %1160, 3
  %1162 = add i32 %1154, 8
  %1163 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1156, i32 %1162, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1164 = extractvalue %dx.types.ResRet.f32 %1163, 3
  %1165 = add i32 %1154, 9
  %1166 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1156, i32 %1165, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1167 = extractvalue %dx.types.ResRet.f32 %1166, 0
  %1168 = extractvalue %dx.types.ResRet.f32 %1166, 1
  %1169 = extractvalue %dx.types.ResRet.f32 %1166, 2
  %1170 = fsub fast float %1099, %1158
  %1171 = fsub fast float %1102, %1161
  %1172 = fsub fast float %1105, %1164
  %1173 = call float @dx.op.unary.f32(i32 6, float %1170)  ; FAbs(value)
  %1174 = call float @dx.op.unary.f32(i32 6, float %1171)  ; FAbs(value)
  %1175 = call float @dx.op.unary.f32(i32 6, float %1172)  ; FAbs(value)
  %1176 = fmul fast float %1080, 5.000000e-01
  %1177 = fadd fast float %1167, %1176
  %1178 = fadd fast float %1168, %1176
  %1179 = fadd fast float %1169, %1176
  %1180 = fcmp fast ole float %1173, %1177
  %1181 = fcmp fast ole float %1174, %1178
  %1182 = fcmp fast ole float %1175, %1179
  %1183 = and i1 %1180, %1181
  %1184 = and i1 %1183, %1182
  %1185 = select i1 %1184, i32 %1151, i32 0
  %1186 = or i32 %1185, %1148
  %1187 = icmp eq i32 %1147, %1151
  br i1 %1187, label %1188, label %1146

; <label>:1188                                    ; preds = %1146
  br label %1189

; <label>:1189                                    ; preds = %1188, %1142
  %1190 = phi i32 [ 0, %1142 ], [ %1186, %1188 ]
  %1191 = select i1 %1064, i32 1, i32 %1190
  %1192 = icmp eq i32 %1191, 0
  br i1 %1192, label %1511, label %1193

; <label>:1193                                    ; preds = %1189
  br label %1194

; <label>:1194                                    ; preds = %1217, %1193
  %1195 = phi float [ %1218, %1217 ], [ %1012, %1193 ]
  %1196 = phi float [ %1219, %1217 ], [ %1011, %1193 ]
  %1197 = phi float [ %1220, %1217 ], [ %1010, %1193 ]
  %1198 = phi float [ %1221, %1217 ], [ %1009, %1193 ]
  %1199 = phi float [ %1222, %1217 ], [ %1008, %1193 ]
  %1200 = phi i32 [ %1223, %1217 ], [ %1007, %1193 ]
  %1201 = phi i32 [ %1224, %1217 ], [ %1006, %1193 ]
  %1202 = phi i32 [ %1225, %1217 ], [ %1005, %1193 ]
  %1203 = phi i32 [ %1207, %1217 ], [ %1191, %1193 ]
  %1204 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1203)  ; FirstbitLo(value)
  %1205 = and i32 %1204, 31
  %1206 = shl i32 1, %1205
  %1207 = xor i32 %1206, %1203
  %1208 = add i32 %1204, %1055
  %1209 = mul i32 %1208, 10
  %1210 = add i32 %1209, 4
  %1211 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1212 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1211, i32 %1210, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1213 = extractvalue %dx.types.ResRet.f32 %1212, 3
  %1214 = bitcast float %1213 to i32
  %1215 = and i32 %1214, 16777216
  %1216 = icmp eq i32 %1215, 0
  br i1 %1216, label %1217, label %1227

; <label>:1217                                    ; preds = %2367, %1509, %1477, %1446, %1284, %1231, %1227, %1194
  %1218 = phi float [ %1195, %1194 ], [ %2374, %1509 ], [ %1195, %1477 ], [ %1195, %2367 ], [ %1195, %1446 ], [ %1195, %1284 ], [ %1195, %1231 ], [ %1195, %1227 ]
  %1219 = phi float [ %1196, %1194 ], [ %1504, %1509 ], [ %1504, %1477 ], [ %1196, %2367 ], [ %1196, %1446 ], [ %1196, %1284 ], [ %1196, %1231 ], [ %1196, %1227 ]
  %1220 = phi float [ %1197, %1194 ], [ %1505, %1509 ], [ %1505, %1477 ], [ %1197, %2367 ], [ %1197, %1446 ], [ %1197, %1284 ], [ %1197, %1231 ], [ %1197, %1227 ]
  %1221 = phi float [ %1198, %1194 ], [ %1506, %1509 ], [ %1506, %1477 ], [ %1198, %2367 ], [ %1198, %1446 ], [ %1198, %1284 ], [ %1198, %1231 ], [ %1198, %1227 ]
  %1222 = phi float [ %1199, %1194 ], [ %1507, %1509 ], [ %1507, %1477 ], [ %1199, %2367 ], [ %1199, %1446 ], [ %1199, %1284 ], [ %1199, %1231 ], [ %1199, %1227 ]
  %1223 = phi i32 [ %1200, %1194 ], [ %1421, %1509 ], [ %1200, %1477 ], [ %1200, %2367 ], [ %1200, %1446 ], [ %1200, %1284 ], [ %1200, %1231 ], [ %1200, %1227 ]
  %1224 = phi i32 [ %1201, %1194 ], [ %1423, %1509 ], [ %1201, %1477 ], [ %1201, %2367 ], [ %1201, %1446 ], [ %1201, %1284 ], [ %1201, %1231 ], [ %1201, %1227 ]
  %1225 = phi i32 [ %1202, %1194 ], [ %1327, %1509 ], [ %1202, %1477 ], [ %1202, %2367 ], [ %1202, %1446 ], [ %1202, %1284 ], [ %1202, %1231 ], [ %1202, %1227 ]
  %1226 = icmp eq i32 %1203, %1206
  br i1 %1226, label %1510, label %1194

; <label>:1227                                    ; preds = %1194
  %1228 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1229 = extractvalue %dx.types.CBufRet.i32 %1228, 0
  %1230 = icmp ult i32 %1208, %1229
  br i1 %1230, label %1231, label %1217

; <label>:1231                                    ; preds = %1227
  %1232 = extractvalue %dx.types.ResRet.f32 %1212, 0
  %1233 = extractvalue %dx.types.ResRet.f32 %1212, 1
  %1234 = extractvalue %dx.types.ResRet.f32 %1212, 2
  %1235 = add i32 %1209, 5
  %1236 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1211, i32 %1235, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1237 = add i32 %1209, 6
  %1238 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1211, i32 %1237, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1239 = add i32 %1209, 7
  %1240 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1211, i32 %1239, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1241 = add i32 %1209, 8
  %1242 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1211, i32 %1241, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1243 = call float @dx.op.unary.f32(i32 6, float %1232)  ; FAbs(value)
  %1244 = call float @dx.op.unary.f32(i32 6, float %1233)  ; FAbs(value)
  %1245 = call float @dx.op.unary.f32(i32 6, float %1234)  ; FAbs(value)
  %1246 = lshr i32 %1214, 16
  %1247 = and i32 %1246, 15
  %1248 = extractvalue %dx.types.ResRet.f32 %1242, 3
  %1249 = extractvalue %dx.types.ResRet.f32 %1242, 2
  %1250 = extractvalue %dx.types.ResRet.f32 %1242, 1
  %1251 = extractvalue %dx.types.ResRet.f32 %1242, 0
  %1252 = extractvalue %dx.types.ResRet.f32 %1240, 3
  %1253 = extractvalue %dx.types.ResRet.f32 %1240, 2
  %1254 = extractvalue %dx.types.ResRet.f32 %1240, 1
  %1255 = extractvalue %dx.types.ResRet.f32 %1240, 0
  %1256 = extractvalue %dx.types.ResRet.f32 %1238, 3
  %1257 = extractvalue %dx.types.ResRet.f32 %1238, 2
  %1258 = extractvalue %dx.types.ResRet.f32 %1238, 1
  %1259 = extractvalue %dx.types.ResRet.f32 %1238, 0
  %1260 = fsub fast float %1099, %1256
  %1261 = fsub fast float %1102, %1252
  %1262 = fsub fast float %1105, %1248
  %1263 = fmul fast float %1260, %1259
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1255, float %1263)  ; FMad(a,b,c)
  %1265 = call float @dx.op.tertiary.f32(i32 46, float %1262, float %1251, float %1264)  ; FMad(a,b,c)
  %1266 = fmul fast float %1260, %1258
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1254, float %1266)  ; FMad(a,b,c)
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %1262, float %1250, float %1267)  ; FMad(a,b,c)
  %1269 = fmul fast float %1260, %1257
  %1270 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1253, float %1269)  ; FMad(a,b,c)
  %1271 = call float @dx.op.tertiary.f32(i32 46, float %1262, float %1249, float %1270)  ; FMad(a,b,c)
  %1272 = call float @dx.op.unary.f32(i32 6, float %1265)  ; FAbs(value)
  %1273 = call float @dx.op.unary.f32(i32 6, float %1268)  ; FAbs(value)
  %1274 = call float @dx.op.unary.f32(i32 6, float %1271)  ; FAbs(value)
  %1275 = fmul fast float %1080, 5.000000e-01
  %1276 = fadd fast float %1243, %1275
  %1277 = fadd fast float %1244, %1275
  %1278 = fadd fast float %1245, %1275
  %1279 = fcmp fast ole float %1272, %1276
  %1280 = fcmp fast ole float %1273, %1277
  %1281 = fcmp fast ole float %1274, %1278
  %1282 = and i1 %1279, %1280
  %1283 = and i1 %1282, %1281
  br i1 %1283, label %1284, label %1217

; <label>:1284                                    ; preds = %1231
  %1285 = lshr i32 %1214, 8
  %1286 = and i32 %1285, 255
  %1287 = and i32 %1214, 255
  %1288 = extractvalue %dx.types.ResRet.f32 %1236, 3
  %1289 = extractvalue %dx.types.ResRet.f32 %1236, 2
  %1290 = extractvalue %dx.types.ResRet.f32 %1236, 1
  %1291 = extractvalue %dx.types.ResRet.f32 %1236, 0
  %1292 = fsub fast float -0.000000e+00, %1243
  %1293 = fsub fast float -0.000000e+00, %1244
  %1294 = call float @dx.op.binary.f32(i32 35, float %1265, float %1292)  ; FMax(a,b)
  %1295 = call float @dx.op.binary.f32(i32 35, float %1268, float %1293)  ; FMax(a,b)
  %1296 = call float @dx.op.binary.f32(i32 36, float %1294, float %1243)  ; FMin(a,b)
  %1297 = call float @dx.op.binary.f32(i32 36, float %1295, float %1244)  ; FMin(a,b)
  %1298 = fdiv fast float %1296, %1243
  %1299 = fdiv fast float %1297, %1244
  %1300 = fmul fast float %1298, 5.000000e-01
  %1301 = fmul fast float %1299, 5.000000e-01
  %1302 = fadd fast float %1300, 5.000000e-01
  %1303 = fsub fast float 5.000000e-01, %1301
  %1304 = call float @dx.op.unary.f32(i32 7, float %1302)  ; Saturate(value)
  %1305 = call float @dx.op.unary.f32(i32 7, float %1303)  ; Saturate(value)
  %1306 = call float @dx.op.binary.f32(i32 36, float %1304, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1307 = call float @dx.op.binary.f32(i32 36, float %1305, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1308 = select i1 %200, float %1289, float %1291
  %1309 = bitcast float %1308 to i32
  %1310 = and i32 %1309, 65535
  %1311 = lshr i32 %1309, 16
  %1312 = select i1 %200, float %1288, float %1290
  %1313 = bitcast float %1312 to i32
  %1314 = uitofp i32 %1310 to float
  %1315 = uitofp i32 %1311 to float
  %1316 = fmul fast float %1306, %1314
  %1317 = fmul fast float %1307, %1315
  %1318 = fptoui float %1316 to i32
  %1319 = fptoui float %1317 to i32
  %1320 = mul i32 %1319, %1310
  %1321 = add i32 %1318, %1313
  %1322 = add i32 %1321, %1320
  %1323 = shl i32 %1322, 3
  %1324 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1325 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1324, i32 %1323, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1326 = extractvalue %dx.types.ResRet.i32 %1325, 0
  %1327 = extractvalue %dx.types.ResRet.i32 %1325, 1
  %1328 = shl i32 %1326, 3
  %1329 = and i32 %1328, 32760
  %1330 = lshr i32 %1326, 9
  %1331 = and i32 %1330, 32760
  %1332 = lshr i32 %1326, 24
  %1333 = and i32 %1332, 15
  %1334 = lshr i32 %1326, 28
  %1335 = add nuw nsw i32 %1333, 25
  %1336 = add nuw nsw i32 %1334, 25
  %1337 = and i32 %1335, 31
  %1338 = and i32 %1336, 31
  %1339 = shl i32 1, %1337
  %1340 = shl i32 1, %1338
  %1341 = icmp ugt i32 %1333, 7
  %1342 = icmp slt i32 %1326, 0
  %1343 = select i1 %1341, i32 %1339, i32 1
  %1344 = select i1 %1342, i32 %1340, i32 1
  %1345 = uitofp i32 %1343 to float
  %1346 = uitofp i32 %1344 to float
  %1347 = fmul fast float %1345, %1306
  %1348 = fmul fast float %1346, %1307
  %1349 = fptoui float %1347 to i32
  %1350 = fptoui float %1348 to i32
  %1351 = shl i32 1, %1333
  %1352 = shl i32 1, %1334
  %1353 = call float @dx.op.unary.f32(i32 22, float %1347)  ; Frc(value)
  %1354 = call float @dx.op.unary.f32(i32 22, float %1348)  ; Frc(value)
  %1355 = icmp eq i32 %1349, 0
  %1356 = icmp eq i32 %1350, 0
  %1357 = select i1 %1355, float 0.000000e+00, float 5.000000e-01
  %1358 = select i1 %1356, float 0.000000e+00, float 5.000000e-01
  %1359 = add i32 %1349, 1
  %1360 = add i32 %1350, 1
  %1361 = icmp eq i32 %1359, %1343
  %1362 = icmp eq i32 %1360, %1344
  %1363 = uitofp i32 %1351 to float
  %1364 = select i1 %1341, float 1.280000e+02, float %1363
  %1365 = uitofp i32 %1352 to float
  %1366 = select i1 %1342, float 1.280000e+02, float %1365
  %1367 = fsub fast float %1364, %1357
  %1368 = fsub fast float %1366, %1358
  %1369 = select i1 %1361, float -0.000000e+00, float -5.000000e-01
  %1370 = fadd fast float %1367, %1369
  %1371 = select i1 %1362, float -0.000000e+00, float -5.000000e-01
  %1372 = fadd fast float %1368, %1371
  %1373 = fmul fast float %1370, %1353
  %1374 = fmul fast float %1372, %1354
  %1375 = fadd fast float %1373, %1357
  %1376 = fadd fast float %1374, %1358
  %1377 = fadd fast float %1364, -1.500000e+00
  %1378 = fadd fast float %1366, -1.500000e+00
  %1379 = call float @dx.op.binary.f32(i32 35, float %1375, float 5.000000e-01)  ; FMax(a,b)
  %1380 = call float @dx.op.binary.f32(i32 35, float %1376, float 5.000000e-01)  ; FMax(a,b)
  %1381 = call float @dx.op.binary.f32(i32 36, float %1379, float %1377)  ; FMin(a,b)
  %1382 = call float @dx.op.binary.f32(i32 36, float %1380, float %1378)  ; FMin(a,b)
  %1383 = uitofp i32 %1329 to float
  %1384 = uitofp i32 %1331 to float
  %1385 = fadd fast float %1381, %1383
  %1386 = fadd fast float %1382, %1384
  %1387 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1388 = extractvalue %dx.types.CBufRet.f32 %1387, 0
  %1389 = extractvalue %dx.types.CBufRet.f32 %1387, 1
  %1390 = fmul fast float %1388, %1385
  %1391 = fmul fast float %1389, %1386
  %1392 = call float @dx.op.binary.f32(i32 35, float %1243, float %1244)  ; FMax(a,b)
  %1393 = call float @dx.op.binary.f32(i32 35, float %1024, float 1.000000e+00)  ; FMax(a,b)
  %1394 = fdiv fast float %1392, %1393
  %1395 = call float @dx.op.unary.f32(i32 23, float %1394)  ; Log(value)
  %1396 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1397 = extractvalue %dx.types.CBufRet.f32 %1396, 0
  %1398 = fadd fast float %1397, %1395
  %1399 = call float @dx.op.binary.f32(i32 35, float %1398, float 3.000000e+00)  ; FMax(a,b)
  %1400 = call float @dx.op.binary.f32(i32 36, float %1399, float 1.100000e+01)  ; FMin(a,b)
  %1401 = fptoui float %1400 to i32
  %1402 = sub i32 %1401, %1287
  %1403 = sub i32 %1401, %1286
  %1404 = add i32 %1402, 25
  %1405 = add i32 %1403, 25
  %1406 = and i32 %1404, 31
  %1407 = and i32 %1405, 31
  %1408 = shl i32 1, %1406
  %1409 = shl i32 1, %1407
  %1410 = icmp ugt i32 %1402, 7
  %1411 = icmp ugt i32 %1403, 7
  %1412 = uitofp i32 %1408 to float
  %1413 = select i1 %1410, float %1412, float 1.000000e+00
  %1414 = uitofp i32 %1409 to float
  %1415 = select i1 %1411, float %1414, float 1.000000e+00
  %1416 = fmul fast float %1413, %1306
  %1417 = fmul fast float %1415, %1307
  %1418 = fptoui float %1416 to i32
  %1419 = fptoui float %1417 to i32
  %1420 = shl i32 %1401, 24
  %1421 = or i32 %1420, %1208
  %1422 = shl i32 %1419, 8
  %1423 = add i32 %1422, %1418
  %1424 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1425 = extractvalue %dx.types.CBufRet.f32 %1424, 2
  %1426 = extractvalue %dx.types.CBufRet.f32 %1424, 3
  %1427 = fmul fast float %1425, %1390
  %1428 = fmul fast float %1426, %1391
  %1429 = fadd fast float %1427, 0x3FE0100000000000
  %1430 = fadd fast float %1428, 0x3FE0100000000000
  %1431 = call float @dx.op.unary.f32(i32 22, float %1429)  ; Frc(value)
  %1432 = call float @dx.op.unary.f32(i32 22, float %1430)  ; Frc(value)
  %1433 = fsub fast float 1.000000e+00, %1431
  %1434 = fmul fast float %1433, %1432
  %1435 = fmul fast float %1432, %1431
  %1436 = fsub fast float 1.000000e+00, %1432
  %1437 = fmul fast float %1436, %1431
  %1438 = fmul fast float %1436, %1433
  %1439 = icmp eq i32 %1333, 0
  br i1 %1439, label %1217, label %1440

; <label>:1440                                    ; preds = %1284
  br i1 %1064, label %1446, label %1441

; <label>:1441                                    ; preds = %1440
  %1442 = icmp ult i32 %1247, 2
  br i1 %1442, label %1446, label %1443

; <label>:1443                                    ; preds = %1441
  %1444 = icmp ult i32 %1247, 4
  %1445 = select i1 %1444, float %1116, float %1117
  br label %1446

; <label>:1446                                    ; preds = %1443, %1441, %1440
  %1447 = phi float [ 1.000000e+00, %1440 ], [ %1115, %1441 ], [ %1445, %1443 ]
  %1448 = fcmp fast ogt float %1447, 0.000000e+00
  br i1 %1448, label %1449, label %1217

; <label>:1449                                    ; preds = %1446
  %1450 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1451 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1452 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1450, %dx.types.Handle %1451, float %1390, float %1391, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1453 = extractvalue %dx.types.ResRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.ResRet.f32 %1452, 1
  %1455 = extractvalue %dx.types.ResRet.f32 %1452, 2
  %1456 = extractvalue %dx.types.ResRet.f32 %1452, 3
  %1457 = fdiv fast float %1271, %1245
  %1458 = fmul fast float %1457, 5.000000e-01
  %1459 = fsub fast float 5.000000e-01, %1458
  %1460 = fdiv fast float %1080, %1245
  %1461 = fmul fast float %1460, 2.500000e-01
  %1462 = fcmp uge float %1453, 1.000000e+00
  %1463 = or i1 %1064, %1462
  %1464 = select i1 %1462, float 0.000000e+00, float 1.000000e+00
  br i1 %1463, label %1472, label %1465

; <label>:1465                                    ; preds = %1449
  %1466 = fsub fast float %1459, %1453
  %1467 = call float @dx.op.unary.f32(i32 6, float %1466)  ; FAbs(value)
  %1468 = fsub fast float %1467, %1460
  %1469 = fdiv fast float %1468, %1461
  %1470 = call float @dx.op.unary.f32(i32 7, float %1469)  ; Saturate(value)
  %1471 = fsub fast float 1.000000e+00, %1470
  br label %1472

; <label>:1472                                    ; preds = %1465, %1449
  %1473 = phi float [ %1471, %1465 ], [ %1464, %1449 ]
  %1474 = fcmp uge float %1454, 1.000000e+00
  %1475 = or i1 %1064, %1474
  %1476 = select i1 %1474, float 0.000000e+00, float 1.000000e+00
  br i1 %1475, label %2343, label %2336

; <label>:1477                                    ; preds = %2367
  %1478 = fdiv fast float %2369, %2373
  %1479 = fdiv fast float %2370, %2373
  %1480 = fdiv fast float %2371, %2373
  %1481 = fdiv fast float %2372, %2373
  %1482 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1483 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1482, %dx.types.Handle %1451, float %1390, float %1391, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1484 = extractvalue %dx.types.ResRet.f32 %1483, 0
  %1485 = extractvalue %dx.types.ResRet.f32 %1483, 1
  %1486 = extractvalue %dx.types.ResRet.f32 %1483, 2
  %1487 = extractvalue %dx.types.ResRet.f32 %1483, 3
  %1488 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1482, %dx.types.Handle %1451, float %1390, float %1391, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1489 = extractvalue %dx.types.ResRet.f32 %1488, 0
  %1490 = extractvalue %dx.types.ResRet.f32 %1488, 1
  %1491 = extractvalue %dx.types.ResRet.f32 %1488, 2
  %1492 = extractvalue %dx.types.ResRet.f32 %1488, 3
  %1493 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1482, %dx.types.Handle %1451, float %1390, float %1391, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1494 = extractvalue %dx.types.ResRet.f32 %1493, 0
  %1495 = extractvalue %dx.types.ResRet.f32 %1493, 1
  %1496 = extractvalue %dx.types.ResRet.f32 %1493, 2
  %1497 = extractvalue %dx.types.ResRet.f32 %1493, 3
  %1498 = call float @dx.op.dot4.f32(i32 56, float %1484, float %1485, float %1486, float %1487, float %1478, float %1479, float %1480, float %1481)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1499 = call float @dx.op.dot4.f32(i32 56, float %1489, float %1490, float %1491, float %1492, float %1478, float %1479, float %1480, float %1481)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1500 = call float @dx.op.dot4.f32(i32 56, float %1494, float %1495, float %1496, float %1497, float %1478, float %1479, float %1480, float %1481)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1501 = fmul fast float %1498, %2374
  %1502 = fmul fast float %1499, %2374
  %1503 = fmul fast float %1500, %2374
  %1504 = fadd fast float %1501, %1196
  %1505 = fadd fast float %1502, %1197
  %1506 = fadd fast float %1503, %1198
  %1507 = fadd fast float %2374, %1199
  %1508 = fcmp fast ogt float %2374, %1195
  br i1 %1508, label %1509, label %1217

; <label>:1509                                    ; preds = %1477
  br label %1217

; <label>:1510                                    ; preds = %1217
  br label %1511

; <label>:1511                                    ; preds = %1510, %1189
  %1512 = phi float [ %1012, %1189 ], [ %1218, %1510 ]
  %1513 = phi float [ %1011, %1189 ], [ %1219, %1510 ]
  %1514 = phi float [ %1010, %1189 ], [ %1220, %1510 ]
  %1515 = phi float [ %1009, %1189 ], [ %1221, %1510 ]
  %1516 = phi float [ %1008, %1189 ], [ %1222, %1510 ]
  %1517 = phi i32 [ %1007, %1189 ], [ %1223, %1510 ]
  %1518 = phi i32 [ %1006, %1189 ], [ %1224, %1510 ]
  %1519 = phi i32 [ %1005, %1189 ], [ %1225, %1510 ]
  %1520 = fcmp fast ult float %1516, 0x3FECCCCCC0000000
  br i1 %1520, label %1521, label %1536

; <label>:1521                                    ; preds = %1511, %1003
  %1522 = phi float [ %1512, %1511 ], [ %1012, %1003 ]
  %1523 = phi float [ %1513, %1511 ], [ %1011, %1003 ]
  %1524 = phi float [ %1514, %1511 ], [ %1010, %1003 ]
  %1525 = phi float [ %1515, %1511 ], [ %1009, %1003 ]
  %1526 = phi float [ %1516, %1511 ], [ %1008, %1003 ]
  %1527 = phi i32 [ %1517, %1511 ], [ %1007, %1003 ]
  %1528 = phi i32 [ %1518, %1511 ], [ %1006, %1003 ]
  %1529 = phi i32 [ %1519, %1511 ], [ %1005, %1003 ]
  %1530 = add nuw nsw i32 %1004, 1
  %1531 = icmp ult i32 %1530, 4
  br i1 %1531, label %1532, label %1536

; <label>:1532                                    ; preds = %1521
  %1533 = getelementptr [4 x i32], [4 x i32]* %47, i32 0, i32 %1530
  %1534 = load i32, i32* %1533, align 4, !tbaa !60, !noalias !76
  %1535 = icmp eq i32 %1534, -1
  br i1 %1535, label %1536, label %1003

; <label>:1536                                    ; preds = %1532, %1521, %1511
  %1537 = phi float [ %1513, %1511 ], [ %1523, %1532 ], [ %1523, %1521 ]
  %1538 = phi float [ %1514, %1511 ], [ %1524, %1532 ], [ %1524, %1521 ]
  %1539 = phi float [ %1515, %1511 ], [ %1525, %1532 ], [ %1525, %1521 ]
  %1540 = phi float [ %1516, %1511 ], [ %1526, %1532 ], [ %1526, %1521 ]
  %1541 = phi i32 [ %1517, %1511 ], [ %1527, %1532 ], [ %1527, %1521 ]
  %1542 = phi i32 [ %1518, %1511 ], [ %1528, %1532 ], [ %1528, %1521 ]
  %1543 = phi i32 [ %1519, %1511 ], [ %1529, %1532 ], [ %1529, %1521 ]
  br label %1544

; <label>:1544                                    ; preds = %1536, %959
  %1545 = phi float [ 0.000000e+00, %959 ], [ %1537, %1536 ]
  %1546 = phi float [ 0.000000e+00, %959 ], [ %1538, %1536 ]
  %1547 = phi float [ 0.000000e+00, %959 ], [ %1539, %1536 ]
  %1548 = phi float [ 0.000000e+00, %959 ], [ %1540, %1536 ]
  %1549 = phi i32 [ 0, %959 ], [ %1541, %1536 ]
  %1550 = phi i32 [ 0, %959 ], [ %1542, %1536 ]
  %1551 = phi i32 [ 0, %959 ], [ %1543, %1536 ]
  %1552 = fcmp fast ogt float %1548, 0.000000e+00
  br i1 %1552, label %1553, label %1583

; <label>:1553                                    ; preds = %1544
  %1554 = fdiv fast float %1545, %1548
  %1555 = fdiv fast float %1546, %1548
  %1556 = fdiv fast float %1547, %1548
  %1557 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1558 = extractvalue %dx.types.CBufRet.i32 %1557, 1
  %1559 = and i32 %1558, %56
  %1560 = and i32 %1558, %57
  %1561 = extractvalue %dx.types.CBufRet.i32 %1557, 2
  %1562 = extractvalue %dx.types.CBufRet.i32 %1557, 3
  %1563 = icmp eq i32 %1559, %1561
  %1564 = icmp eq i32 %1560, %1562
  %1565 = and i1 %1563, %1564
  br i1 %1565, label %1566, label %1583

; <label>:1566                                    ; preds = %1553
  %1567 = extractvalue %dx.types.CBufRet.i32 %1557, 0
  %1568 = icmp ne i32 %1567, 0
  %1569 = fcmp fast ogt float %1548, 0x3FB99999A0000000
  %1570 = and i1 %1569, %1568
  br i1 %1570, label %1571, label %1583

; <label>:1571                                    ; preds = %1566
  %1572 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1573 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1572, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1574 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1575 = extractvalue %dx.types.CBufRet.i32 %1574, 0
  %1576 = icmp ult i32 %1573, %1575
  br i1 %1576, label %1577, label %1579

; <label>:1577                                    ; preds = %1571
  %1578 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1578, i32 %1573, i32 0, i32 %1549, i32 %1550, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1579

; <label>:1579                                    ; preds = %1577, %1571
  %1580 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1581 = extractvalue %dx.types.CBufRet.i32 %1580, 1
  %1582 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1582, i32 %1551, i32 0, i32 %1581, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1583

; <label>:1583                                    ; preds = %1579, %1566, %1553, %1544, %920, %574
  %1584 = phi float [ %185, %574 ], [ %575, %920 ], [ %575, %1579 ], [ %575, %1566 ], [ %575, %1553 ], [ %575, %1544 ]
  %1585 = phi float [ 1.000000e+00, %574 ], [ 0.000000e+00, %920 ], [ 0.000000e+00, %1579 ], [ 0.000000e+00, %1566 ], [ 0.000000e+00, %1553 ], [ 0.000000e+00, %1544 ]
  %1586 = phi float [ 0.000000e+00, %574 ], [ 0.000000e+00, %920 ], [ %1554, %1579 ], [ %1554, %1566 ], [ %1554, %1553 ], [ 0.000000e+00, %1544 ]
  %1587 = phi float [ 0.000000e+00, %574 ], [ 0.000000e+00, %920 ], [ %1555, %1579 ], [ %1555, %1566 ], [ %1555, %1553 ], [ 0.000000e+00, %1544 ]
  %1588 = phi float [ 0.000000e+00, %574 ], [ 0.000000e+00, %920 ], [ %1556, %1579 ], [ %1556, %1566 ], [ %1556, %1553 ], [ 0.000000e+00, %1544 ]
  %1589 = call float @dx.op.binary.f32(i32 36, float %185, float %1584)  ; FMin(a,b)
  br label %1590

; <label>:1590                                    ; preds = %1583, %253
  %1591 = phi float [ %1586, %1583 ], [ 0.000000e+00, %253 ]
  %1592 = phi float [ %1587, %1583 ], [ 0.000000e+00, %253 ]
  %1593 = phi float [ %1588, %1583 ], [ 0.000000e+00, %253 ]
  %1594 = phi float [ %1585, %1583 ], [ 1.000000e+00, %253 ]
  %1595 = phi float [ %1589, %1583 ], [ %185, %253 ]
  %1596 = call float @dx.op.binary.f32(i32 36, float %185, float %1595)  ; FMin(a,b)
  %1597 = fmul fast float %1596, %177
  %1598 = fmul fast float %1596, %178
  %1599 = fmul fast float %1596, %179
  %1600 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1601 = extractvalue %dx.types.CBufRet.i32 %1600, 1
  %1602 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1603 = extractvalue %dx.types.CBufRet.i32 %1602, 1
  %1604 = icmp ugt i32 %1601, 1
  %1605 = select i1 %1604, i32 0, i32 %1603
  %1606 = mul i32 %56, 1664525
  %1607 = mul i32 %57, 1664525
  %1608 = mul i32 %1605, 1664525
  %1609 = add i32 %1606, 1013904223
  %1610 = add i32 %1607, 1013904223
  %1611 = add i32 %1608, 1013904223
  %1612 = mul i32 %1611, %1610
  %1613 = add i32 %1609, %1612
  %1614 = mul i32 %1613, %1611
  %1615 = add i32 %1614, %1610
  %1616 = mul i32 %1615, %1613
  %1617 = add i32 %1616, %1611
  %1618 = mul i32 %1617, %1615
  %1619 = add i32 %1618, %1613
  %1620 = add i32 %1606, 1042201148
  %1621 = add i32 %1607, 1042201148
  %1622 = mul i32 %1611, %1621
  %1623 = add i32 %1620, %1622
  %1624 = mul i32 %1623, %1611
  %1625 = add i32 %1624, %1621
  %1626 = icmp eq i32 %1601, 0
  br i1 %1626, label %1654, label %1627

; <label>:1627                                    ; preds = %1590
  %1628 = mul i32 %1625, %1623
  %1629 = add i32 %1628, %1611
  %1630 = mul i32 %1629, %1625
  %1631 = add i32 %1630, %1623
  %1632 = lshr i32 %1631, 16
  %1633 = mul i32 %1619, %1617
  %1634 = add i32 %1633, %1615
  %1635 = lshr i32 %1619, 16
  %1636 = uitofp i32 %1605 to float
  %1637 = fmul fast float %1636, 1.250000e-01
  %1638 = uitofp i32 %1635 to float
  %1639 = fmul fast float %1638, 0x3EF0000000000000
  %1640 = fadd fast float %1639, %1637
  %1641 = call float @dx.op.unary.f32(i32 22, float %1640)  ; Frc(value)
  %1642 = call i32 @dx.op.unary.i32(i32 30, i32 %1605)  ; Bfrev(value)
  %1643 = xor i32 %1642, %1634
  %1644 = lshr i32 %1643, 16
  %1645 = uitofp i32 %1644 to float
  %1646 = fmul fast float %1645, 0x3EF0000000000000
  %1647 = uitofp i32 %1632 to float
  %1648 = fmul fast float %1647, 0x3EF0000000000000
  %1649 = fadd fast float %1648, %1637
  %1650 = call float @dx.op.unary.f32(i32 22, float %1649)  ; Frc(value)
  %1651 = fadd float %1641, -5.000000e-01
  %1652 = fadd float %1646, -5.000000e-01
  %1653 = fadd float %1650, -5.000000e-01
  br label %1654

; <label>:1654                                    ; preds = %1627, %1590
  %1655 = phi float [ %1651, %1627 ], [ -5.000000e-01, %1590 ]
  %1656 = phi float [ %1652, %1627 ], [ -5.000000e-01, %1590 ]
  %1657 = phi float [ %1653, %1627 ], [ -5.000000e-01, %1590 ]
  %1658 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1659 = extractvalue %dx.types.CBufRet.f32 %1658, 0
  %1660 = fmul fast float %1659, %177
  %1661 = fmul fast float %1659, %178
  %1662 = fmul fast float %1659, %179
  %1663 = fadd fast float %1655, %1660
  %1664 = fadd fast float %1656, %1661
  %1665 = fadd fast float %1657, %1662
  %1666 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1667 = extractvalue %dx.types.CBufRet.i32 %1666, 0
  %1668 = extractvalue %dx.types.CBufRet.i32 %1666, 1
  %1669 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1670 = extractvalue %dx.types.CBufRet.i32 %1669, 0
  %1671 = extractvalue %dx.types.CBufRet.i32 %1669, 1
  %1672 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1673 = extractvalue %dx.types.CBufRet.f32 %1672, 0
  %1674 = extractvalue %dx.types.CBufRet.f32 %1658, 3
  %1675 = extractvalue %dx.types.CBufRet.i32 %1600, 0
  %1676 = icmp eq i32 %1675, 0
  br i1 %1676, label %1941, label %1677

; <label>:1677                                    ; preds = %1654
  br label %1678

; <label>:1678                                    ; preds = %1932, %1677
  %1679 = phi i32 [ %1936, %1932 ], [ 0, %1677 ]
  %1680 = phi i32 [ %1935, %1932 ], [ 0, %1677 ]
  %1681 = phi float [ %1934, %1932 ], [ %1596, %1677 ]
  %1682 = phi float [ %1933, %1932 ], [ 1.000000e+00, %1677 ]
  %1683 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %1684 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1683, i32 %1679, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1685 = extractvalue %dx.types.ResRet.f32 %1684, 0
  %1686 = extractvalue %dx.types.ResRet.f32 %1684, 1
  %1687 = extractvalue %dx.types.ResRet.f32 %1684, 2
  %1688 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1683, i32 %1679, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1689 = extractvalue %dx.types.ResRet.i32 %1688, 0
  %1690 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1683, i32 %1679, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1691 = extractvalue %dx.types.ResRet.f32 %1690, 0
  %1692 = extractvalue %dx.types.ResRet.f32 %1690, 1
  %1693 = extractvalue %dx.types.ResRet.f32 %1690, 2
  %1694 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1683, i32 %1679, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1695 = extractvalue %dx.types.ResRet.i32 %1694, 0
  %1696 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1697 = extractvalue %dx.types.CBufRet.i32 %1696, 0
  %1698 = and i32 %1689, 255
  %1699 = lshr i32 %1689, 8
  %1700 = and i32 %1699, 255
  %1701 = lshr i32 %1689, 16
  %1702 = and i32 %1701, 255
  %1703 = mul i32 %1697, %1698
  %1704 = mul i32 %1697, %1700
  %1705 = mul i32 %1697, %1702
  %1706 = and i32 %1695, 4194303
  %1707 = lshr i32 %1695, 22
  %1708 = uitofp i32 %1707 to float
  %1709 = fmul fast float %1708, 0x3F84050140000000
  %1710 = icmp ne i32 %1698, 0
  %1711 = icmp ne i32 %1700, 0
  %1712 = icmp ne i32 %1702, 0
  %1713 = and i1 %1710, %1711
  %1714 = and i1 %1712, %1713
  %1715 = fmul fast float %1709, %1663
  %1716 = fmul fast float %1709, %1664
  %1717 = fmul fast float %1709, %1665
  %1718 = fadd fast float %1715, %166
  %1719 = fadd fast float %1716, %170
  %1720 = fadd fast float %1717, %174
  %1721 = fdiv fast float 0x4059933340000000, %1708
  br i1 %1714, label %1722, label %1923

; <label>:1722                                    ; preds = %1678
  %1723 = fsub fast float %1597, %1715
  %1724 = fsub fast float %1598, %1716
  %1725 = fsub fast float %1599, %1717
  %1726 = fdiv fast float 1.000000e+00, %1723
  %1727 = fdiv fast float 1.000000e+00, %1724
  %1728 = fdiv fast float 1.000000e+00, %1725
  %1729 = fsub fast float %1685, %1718
  %1730 = fsub fast float %1686, %1719
  %1731 = fsub fast float %1687, %1720
  %1732 = fmul fast float %1726, %1729
  %1733 = fmul fast float %1727, %1730
  %1734 = fmul fast float %1728, %1731
  %1735 = fsub fast float %1691, %1718
  %1736 = fsub fast float %1692, %1719
  %1737 = fsub fast float %1693, %1720
  %1738 = fmul fast float %1726, %1735
  %1739 = fmul fast float %1727, %1736
  %1740 = fmul fast float %1728, %1737
  %1741 = call float @dx.op.binary.f32(i32 36, float %1732, float %1738)  ; FMin(a,b)
  %1742 = call float @dx.op.binary.f32(i32 36, float %1733, float %1739)  ; FMin(a,b)
  %1743 = call float @dx.op.binary.f32(i32 36, float %1734, float %1740)  ; FMin(a,b)
  %1744 = call float @dx.op.binary.f32(i32 35, float %1732, float %1738)  ; FMax(a,b)
  %1745 = call float @dx.op.binary.f32(i32 35, float %1733, float %1739)  ; FMax(a,b)
  %1746 = call float @dx.op.binary.f32(i32 35, float %1734, float %1740)  ; FMax(a,b)
  %1747 = call float @dx.op.binary.f32(i32 35, float %1742, float %1743)  ; FMax(a,b)
  %1748 = call float @dx.op.binary.f32(i32 35, float %1741, float %1747)  ; FMax(a,b)
  %1749 = call float @dx.op.binary.f32(i32 36, float %1745, float %1746)  ; FMin(a,b)
  %1750 = call float @dx.op.binary.f32(i32 36, float %1744, float %1749)  ; FMin(a,b)
  %1751 = call float @dx.op.unary.f32(i32 7, float %1748)  ; Saturate(value)
  %1752 = call float @dx.op.unary.f32(i32 7, float %1750)  ; Saturate(value)
  %1753 = fcmp fast olt float %1751, %1752
  br i1 %1753, label %1754, label %1923

; <label>:1754                                    ; preds = %1722
  %1755 = fmul fast float %1751, %1723
  %1756 = fmul fast float %1751, %1724
  %1757 = fmul fast float %1751, %1725
  %1758 = fadd fast float %1755, %1718
  %1759 = fadd fast float %1756, %1719
  %1760 = fadd fast float %1757, %1720
  %1761 = fsub fast float %1752, %1751
  %1762 = fmul fast float %1723, %1761
  %1763 = fsub fast float %1752, %1751
  %1764 = fmul fast float %1724, %1763
  %1765 = fsub fast float %1752, %1751
  %1766 = fmul fast float %1725, %1765
  %1767 = fmul fast float %1762, %1762
  %1768 = fmul fast float %1764, %1764
  %1769 = fadd fast float %1767, %1768
  %1770 = fmul fast float %1766, %1766
  %1771 = fadd fast float %1769, %1770
  %1772 = call float @dx.op.unary.f32(i32 24, float %1771)  ; Sqrt(value)
  %1773 = call float @dx.op.binary.f32(i32 36, float %1772, float %1596)  ; FMin(a,b)
  %1774 = call float @dx.op.dot3.f32(i32 55, float %1762, float %1764, float %1766, float %1762, float %1764, float %1766)  ; Dot3(ax,ay,az,bx,by,bz)
  %1775 = call float @dx.op.unary.f32(i32 25, float %1774)  ; Rsqrt(value)
  %1776 = fdiv fast float %1773, %1709
  %1777 = call float @dx.op.unary.f32(i32 28, float %1776)  ; Round_pi(value)
  %1778 = call float @dx.op.binary.f32(i32 36, float %1777, float 1.024000e+03)  ; FMin(a,b)
  %1779 = fdiv fast float %1773, %1778
  %1780 = fcmp fast ogt float %1778, 0.000000e+00
  br i1 %1780, label %1781, label %1923

; <label>:1781                                    ; preds = %1754
  br label %1782

; <label>:1782                                    ; preds = %1915, %1781
  %1783 = phi i32 [ %1866, %1915 ], [ 9999, %1781 ]
  %1784 = phi i32 [ %1867, %1915 ], [ 9999, %1781 ]
  %1785 = phi i32 [ %1868, %1915 ], [ 9999, %1781 ]
  %1786 = phi i32 [ %1869, %1915 ], [ 0, %1781 ]
  %1787 = phi i32 [ %1870, %1915 ], [ 0, %1781 ]
  %1788 = phi i32 [ %1871, %1915 ], [ 0, %1781 ]
  %1789 = phi i32 [ %1872, %1915 ], [ 0, %1781 ]
  %1790 = phi float [ %1919, %1915 ], [ 1.000000e+00, %1781 ]
  %1791 = phi float [ %1920, %1915 ], [ 0.000000e+00, %1781 ]
  %1792 = phi float [ %1916, %1915 ], [ 0.000000e+00, %1781 ]
  %1793 = fmul fast float %1790, %1779
  %1794 = call float @dx.op.binary.f32(i32 35, float %1793, float 0.000000e+00)  ; FMax(a,b)
  %1795 = fmul fast float %1762, %1709
  %1796 = fmul fast float %1795, %1775
  %1797 = fmul fast float %1796, %1791
  %1798 = fmul fast float %1764, %1709
  %1799 = fmul fast float %1798, %1775
  %1800 = fmul fast float %1799, %1791
  %1801 = fmul fast float %1766, %1709
  %1802 = fmul fast float %1801, %1775
  %1803 = fmul fast float %1802, %1791
  %1804 = fadd fast float %1758, %1797
  %1805 = fadd fast float %1759, %1800
  %1806 = fadd fast float %1760, %1803
  %1807 = fmul fast float %1655, %1794
  %1808 = fmul fast float %1656, %1794
  %1809 = fmul fast float %1657, %1794
  %1810 = fadd fast float %1804, %1807
  %1811 = fadd fast float %1805, %1808
  %1812 = fadd fast float %1806, %1809
  %1813 = add i32 %1703, -1
  %1814 = add i32 %1704, -1
  %1815 = add i32 %1705, -1
  %1816 = fsub fast float %1810, %1685
  %1817 = fsub fast float %1811, %1686
  %1818 = fsub fast float %1812, %1687
  %1819 = fsub fast float %1691, %1685
  %1820 = fsub fast float %1692, %1686
  %1821 = fsub fast float %1693, %1687
  %1822 = fdiv fast float %1816, %1819
  %1823 = fdiv fast float %1817, %1820
  %1824 = fdiv fast float %1818, %1821
  %1825 = call float @dx.op.unary.f32(i32 7, float %1822)  ; Saturate(value)
  %1826 = call float @dx.op.unary.f32(i32 7, float %1823)  ; Saturate(value)
  %1827 = call float @dx.op.unary.f32(i32 7, float %1824)  ; Saturate(value)
  %1828 = uitofp i32 %1703 to float
  %1829 = uitofp i32 %1704 to float
  %1830 = uitofp i32 %1705 to float
  %1831 = fmul fast float %1825, %1828
  %1832 = fmul fast float %1826, %1829
  %1833 = fmul fast float %1827, %1830
  %1834 = fptoui float %1831 to i32
  %1835 = fptoui float %1832 to i32
  %1836 = fptoui float %1833 to i32
  %1837 = call i32 @dx.op.binary.i32(i32 40, i32 %1834, i32 %1813)  ; UMin(a,b)
  %1838 = call i32 @dx.op.binary.i32(i32 40, i32 %1835, i32 %1814)  ; UMin(a,b)
  %1839 = call i32 @dx.op.binary.i32(i32 40, i32 %1836, i32 %1815)  ; UMin(a,b)
  %1840 = and i32 %1671, 31
  %1841 = lshr i32 %1837, %1840
  %1842 = lshr i32 %1838, %1840
  %1843 = lshr i32 %1839, %1840
  %1844 = icmp ne i32 %1841, %1783
  %1845 = icmp ne i32 %1842, %1784
  %1846 = icmp ne i32 %1843, %1785
  %1847 = or i1 %1844, %1845
  %1848 = or i1 %1847, %1846
  br i1 %1848, label %1849, label %1865

; <label>:1849                                    ; preds = %1782
  %1850 = mul i32 %1843, %1700
  %1851 = add i32 %1850, %1842
  %1852 = mul i32 %1851, %1698
  %1853 = add i32 %1841, %1706
  %1854 = add i32 %1853, %1852
  %1855 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1856 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1855, i32 %1854, i32 undef)  ; BufferLoad(srv,index,wot)
  %1857 = extractvalue %dx.types.ResRet.i32 %1856, 0
  %1858 = icmp ne i32 %1857, -1
  %1859 = zext i1 %1858 to i32
  %1860 = mul i32 %1667, %1668
  %1861 = urem i32 %1857, %1860
  %1862 = urem i32 %1861, %1667
  %1863 = udiv i32 %1861, %1667
  %1864 = udiv i32 %1857, %1860
  br label %1865

; <label>:1865                                    ; preds = %1849, %1782
  %1866 = phi i32 [ %1841, %1849 ], [ %1783, %1782 ]
  %1867 = phi i32 [ %1842, %1849 ], [ %1784, %1782 ]
  %1868 = phi i32 [ %1843, %1849 ], [ %1785, %1782 ]
  %1869 = phi i32 [ %1859, %1849 ], [ %1786, %1782 ]
  %1870 = phi i32 [ %1862, %1849 ], [ %1787, %1782 ]
  %1871 = phi i32 [ %1863, %1849 ], [ %1788, %1782 ]
  %1872 = phi i32 [ %1864, %1849 ], [ %1789, %1782 ]
  %1873 = icmp eq i32 %1869, 0
  br i1 %1873, label %1915, label %1874

; <label>:1874                                    ; preds = %1865
  %1875 = shl i32 %1870, %1840
  %1876 = shl i32 %1871, %1840
  %1877 = shl i32 %1872, %1840
  %1878 = shl i32 %1841, %1840
  %1879 = shl i32 %1842, %1840
  %1880 = shl i32 %1843, %1840
  %1881 = sub i32 %1837, %1878
  %1882 = sub i32 %1838, %1879
  %1883 = sub i32 %1839, %1880
  %1884 = add i32 %1881, %1875
  %1885 = add i32 %1882, %1876
  %1886 = add i32 %1883, %1877
  %1887 = fmul fast float %1794, %1721
  %1888 = call float @dx.op.unary.f32(i32 23, float %1887)  ; Log(value)
  %1889 = fptoui float %1888 to i32
  %1890 = and i32 %1889, 31
  %1891 = lshr i32 %1884, %1890
  %1892 = lshr i32 %1885, %1890
  %1893 = lshr i32 %1886, %1890
  %1894 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %1895 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1894, i32 %1889, i32 %1891, i32 %1892, i32 %1893, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1896 = extractvalue %dx.types.ResRet.i32 %1895, 0
  %1897 = and i32 %1896, 16777215
  %1898 = uitofp i32 %1897 to float
  %1899 = fmul fast float %1673, 0x3F50624DE0000000
  %1900 = fmul fast float %1899, %1721
  %1901 = fmul fast float %1900, %1794
  %1902 = fmul fast float %1901, %1898
  %1903 = fadd fast float %1902, %1792
  %1904 = fcmp fast ogt float %1903, 1.000000e+00
  br i1 %1904, label %1905, label %1915

; <label>:1905                                    ; preds = %1874
  %1906 = fsub fast float %1810, %1718
  %1907 = fsub fast float %1811, %1719
  %1908 = fsub fast float %1812, %1720
  %1909 = fmul fast float %1906, %1906
  %1910 = fmul fast float %1907, %1907
  %1911 = fadd fast float %1909, %1910
  %1912 = fmul fast float %1908, %1908
  %1913 = fadd fast float %1911, %1912
  %1914 = call float @dx.op.unary.f32(i32 24, float %1913)  ; Sqrt(value)
  br label %1923

; <label>:1915                                    ; preds = %1874, %1865
  %1916 = phi float [ %1903, %1874 ], [ %1792, %1865 ]
  %1917 = fmul fast float %1790, %1674
  %1918 = uitofp i32 %1670 to float
  %1919 = call float @dx.op.binary.f32(i32 36, float %1918, float %1917)  ; FMin(a,b)
  %1920 = fadd fast float %1919, %1791
  %1921 = fcmp fast olt float %1920, %1778
  br i1 %1921, label %1782, label %1922

; <label>:1922                                    ; preds = %1915
  br label %1923

; <label>:1923                                    ; preds = %1922, %1905, %1754, %1722, %1678
  %1924 = phi float [ %1914, %1905 ], [ -1.000000e+00, %1722 ], [ -1.000000e+00, %1678 ], [ -1.000000e+00, %1754 ], [ -1.000000e+00, %1922 ]
  %1925 = phi float [ %1903, %1905 ], [ 0.000000e+00, %1722 ], [ 0.000000e+00, %1678 ], [ 0.000000e+00, %1754 ], [ %1916, %1922 ]
  %1926 = fcmp fast ult float %1924, 0.000000e+00
  br i1 %1926, label %1932, label %1927

; <label>:1927                                    ; preds = %1923
  %1928 = fsub fast float 1.000000e+00, %1925
  %1929 = call float @dx.op.unary.f32(i32 7, float %1928)  ; Saturate(value)
  %1930 = call float @dx.op.binary.f32(i32 36, float %1682, float %1929)  ; FMin(a,b)
  %1931 = call float @dx.op.binary.f32(i32 36, float %1681, float %1924)  ; FMin(a,b)
  br label %1932

; <label>:1932                                    ; preds = %1927, %1923
  %1933 = phi float [ %1930, %1927 ], [ %1682, %1923 ]
  %1934 = phi float [ %1931, %1927 ], [ %1681, %1923 ]
  %1935 = phi i32 [ 1, %1927 ], [ %1680, %1923 ]
  %1936 = add nuw i32 %1679, 1
  %1937 = fcmp fast ogt float %1933, 0x3F847AE140000000
  %1938 = icmp ult i32 %1936, %1675
  %1939 = and i1 %1937, %1938
  br i1 %1939, label %1678, label %1940

; <label>:1940                                    ; preds = %1932
  br label %1941

; <label>:1941                                    ; preds = %1940, %1654
  %1942 = phi i32 [ 0, %1654 ], [ %1935, %1940 ]
  %1943 = phi float [ %1596, %1654 ], [ %1934, %1940 ]
  %1944 = phi float [ 1.000000e+00, %1654 ], [ %1933, %1940 ]
  %1945 = icmp ne i32 %1942, 0
  %1946 = fcmp fast olt float %1943, %1596
  %1947 = and i1 %1946, %1945
  br i1 %1947, label %1948, label %1954

; <label>:1948                                    ; preds = %1941
  %1949 = fmul fast float %1944, %1591
  %1950 = fmul fast float %1944, %1592
  %1951 = fmul fast float %1944, %1593
  %1952 = fmul fast float %1944, %1594
  %1953 = call float @dx.op.binary.f32(i32 36, float %1943, float %1595)  ; FMin(a,b)
  br label %1954

; <label>:1954                                    ; preds = %1948, %1941
  %1955 = phi float [ %1949, %1948 ], [ %1591, %1941 ]
  %1956 = phi float [ %1950, %1948 ], [ %1592, %1941 ]
  %1957 = phi float [ %1951, %1948 ], [ %1593, %1941 ]
  %1958 = phi float [ %1952, %1948 ], [ %1594, %1941 ]
  %1959 = phi float [ %1953, %1948 ], [ %1595, %1941 ]
  %1960 = fcmp fast ole float %1958, 5.000000e-01
  %1961 = fsub fast float 1.000000e+00, %1958
  %1962 = call float @dx.op.unary.f32(i32 7, float %1961)  ; Saturate(value)
  br i1 %1960, label %1991, label %1963

; <label>:1963                                    ; preds = %1954
  %1964 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1965 = extractvalue %dx.types.CBufRet.f32 %1964, 2
  %1966 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1967 = extractvalue %dx.types.CBufRet.f32 %1966, 1
  %1968 = fcmp fast ogt float %1967, 0.000000e+00
  br i1 %1968, label %1969, label %1991

; <label>:1969                                    ; preds = %1963
  %1970 = extractvalue %dx.types.CBufRet.f32 %1966, 0
  %1971 = fadd fast float %1970, 0xC02BEAFA60000000
  %1972 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1973 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1974 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1972, %dx.types.Handle %1973, float %177, float %178, float %179, float undef, i32 undef, i32 undef, i32 undef, float %1971)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1975 = extractvalue %dx.types.ResRet.f32 %1974, 0
  %1976 = extractvalue %dx.types.ResRet.f32 %1974, 1
  %1977 = extractvalue %dx.types.ResRet.f32 %1974, 2
  %1978 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %1979 = extractvalue %dx.types.CBufRet.f32 %1978, 0
  %1980 = extractvalue %dx.types.CBufRet.f32 %1978, 1
  %1981 = extractvalue %dx.types.CBufRet.f32 %1978, 2
  %1982 = fmul fast float %1975, %1958
  %1983 = fmul fast float %1982, %1979
  %1984 = fmul fast float %1976, %1958
  %1985 = fmul fast float %1984, %1980
  %1986 = fmul fast float %1977, %1958
  %1987 = fmul fast float %1986, %1981
  %1988 = fadd fast float %1983, %1955
  %1989 = fadd fast float %1985, %1956
  %1990 = fadd fast float %1987, %1957
  br label %1991

; <label>:1991                                    ; preds = %1969, %1963, %1954
  %1992 = phi float [ %1955, %1954 ], [ %1988, %1969 ], [ %1955, %1963 ]
  %1993 = phi float [ %1956, %1954 ], [ %1989, %1969 ], [ %1956, %1963 ]
  %1994 = phi float [ %1957, %1954 ], [ %1990, %1969 ], [ %1957, %1963 ]
  %1995 = phi float [ %1959, %1954 ], [ %1965, %1969 ], [ %1965, %1963 ]
  %1996 = phi float [ %1962, %1954 ], [ 1.000000e+00, %1969 ], [ 1.000000e+00, %1963 ]
  %1997 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1998 = extractvalue %dx.types.CBufRet.f32 %1997, 1
  %1999 = fcmp fast ogt float %1998, 0.000000e+00
  br i1 %1999, label %2000, label %2032

; <label>:2000                                    ; preds = %1991
  %2001 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2002 = extractvalue %dx.types.CBufRet.f32 %2001, 1
  %2003 = fcmp fast ogt float %2002, 0.000000e+00
  br i1 %2003, label %2004, label %2032

; <label>:2004                                    ; preds = %2000
  %2005 = extractvalue %dx.types.CBufRet.f32 %2001, 2
  %2006 = extractvalue %dx.types.CBufRet.f32 %1997, 0
  %2007 = call float @dx.op.binary.f32(i32 35, float %2005, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2008 = call float @dx.op.unary.f32(i32 23, float %2007)  ; Log(value)
  %2009 = fmul fast float %2008, 0x3FF3333340000000
  %2010 = fadd fast float %2006, -2.000000e+00
  %2011 = fadd fast float %2010, %2009
  %2012 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2013 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2014 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2012, %dx.types.Handle %2013, float %177, float %178, float %179, float undef, i32 undef, i32 undef, i32 undef, float %2011)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2015 = extractvalue %dx.types.ResRet.f32 %2014, 0
  %2016 = extractvalue %dx.types.ResRet.f32 %2014, 1
  %2017 = extractvalue %dx.types.ResRet.f32 %2014, 2
  %2018 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %2019 = extractvalue %dx.types.CBufRet.f32 %2018, 0
  %2020 = extractvalue %dx.types.CBufRet.f32 %2018, 1
  %2021 = extractvalue %dx.types.CBufRet.f32 %2018, 2
  %2022 = fmul fast float %2019, %2015
  %2023 = fmul fast float %2020, %2016
  %2024 = fmul fast float %2021, %2017
  %2025 = extractvalue %dx.types.CBufRet.f32 %2001, 3
  %2026 = fmul fast float %2025, %1959
  %2027 = call float @dx.op.unary.f32(i32 7, float %2026)  ; Saturate(value)
  %2028 = fmul fast float %2027, %2002
  %2029 = fmul fast float %2022, %2028
  %2030 = fmul fast float %2023, %2028
  %2031 = fmul fast float %2024, %2028
  br label %2032

; <label>:2032                                    ; preds = %2004, %2000, %1991
  %2033 = phi float [ %2029, %2004 ], [ 0.000000e+00, %2000 ], [ 0.000000e+00, %1991 ]
  %2034 = phi float [ %2030, %2004 ], [ 0.000000e+00, %2000 ], [ 0.000000e+00, %1991 ]
  %2035 = phi float [ %2031, %2004 ], [ 0.000000e+00, %2000 ], [ 0.000000e+00, %1991 ]
  %2036 = fadd fast float %2033, %1992
  %2037 = fadd fast float %2034, %1993
  %2038 = fadd fast float %2035, %1994
  %2039 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %2040 = extractvalue %dx.types.CBufRet.f32 %2039, 2
  %2041 = fmul fast float %2040, %2036
  %2042 = fmul fast float %2040, %2037
  %2043 = fmul fast float %2040, %2038
  %2044 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2045 = extractvalue %dx.types.CBufRet.i32 %2044, 0
  %2046 = icmp eq i32 %2045, 0
  br i1 %2046, label %2312, label %2047

; <label>:2047                                    ; preds = %2032
  %2048 = fmul fast float %1995, %177
  %2049 = fmul fast float %1995, %178
  %2050 = fmul fast float %1995, %179
  %2051 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2052 = extractvalue %dx.types.CBufRet.f32 %2051, 3
  %2053 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2054 = extractvalue %dx.types.CBufRet.f32 %2053, 2
  %2055 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %2056 = extractvalue %dx.types.CBufRet.f32 %2055, 2
  %2057 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %2058 = extractvalue %dx.types.CBufRet.f32 %2057, 2
  %2059 = fmul fast float %2056, 2.097152e+06
  %2060 = fadd fast float %2059, %2058
  %2061 = call float @dx.op.binary.f32(i32 36, float %2060, float %2054)  ; FMin(a,b)
  %2062 = fsub fast float %2050, %2061
  %2063 = fadd fast float %2062, %2058
  %2064 = fadd fast float %2063, %2059
  %2065 = call float @dx.op.dot3.f32(i32 55, float %2048, float %2049, float %2064, float %2048, float %2049, float %2064)  ; Dot3(ax,ay,az,bx,by,bz)
  %2066 = call float @dx.op.binary.f32(i32 35, float %2065, float 0x3E45798EE0000000)  ; FMax(a,b)
  %2067 = call float @dx.op.unary.f32(i32 25, float %2066)  ; Rsqrt(value)
  %2068 = fmul fast float %2067, %2065
  %2069 = fmul fast float %2067, %2048
  %2070 = fmul fast float %2067, %2049
  %2071 = fmul fast float %2064, %2067
  %2072 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2073 = extractvalue %dx.types.CBufRet.f32 %2053, 3
  %2074 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2073)  ; FMax(a,b)
  %2075 = fcmp fast ogt float %2074, 0.000000e+00
  %2076 = extractvalue %dx.types.CBufRet.f32 %2053, 1
  %2077 = extractvalue %dx.types.CBufRet.f32 %2072, 1
  br i1 %2075, label %2081, label %2078

; <label>:2078                                    ; preds = %2047
  %2079 = extractvalue %dx.types.CBufRet.f32 %2072, 0
  %2080 = extractvalue %dx.types.CBufRet.f32 %2053, 0
  br label %2105

; <label>:2081                                    ; preds = %2047
  %2082 = fmul fast float %2074, %2067
  %2083 = fmul fast float %2082, %2064
  %2084 = fadd fast float %2083, %2061
  %2085 = fsub fast float %2064, %2083
  %2086 = fsub fast float 1.000000e+00, %2082
  %2087 = fmul fast float %2086, %2068
  %2088 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2089 = extractvalue %dx.types.CBufRet.f32 %2088, 1
  %2090 = fsub fast float %2084, %2089
  %2091 = fmul fast float %2090, %2076
  %2092 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2091)  ; FMax(a,b)
  %2093 = extractvalue %dx.types.CBufRet.f32 %2088, 0
  %2094 = fsub fast float -0.000000e+00, %2092
  %2095 = call float @dx.op.unary.f32(i32 21, float %2094)  ; Exp(value)
  %2096 = fmul fast float %2093, %2095
  %2097 = extractvalue %dx.types.CBufRet.f32 %2072, 3
  %2098 = fsub fast float %2084, %2097
  %2099 = fmul fast float %2098, %2077
  %2100 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2099)  ; FMax(a,b)
  %2101 = extractvalue %dx.types.CBufRet.f32 %2072, 2
  %2102 = fsub fast float -0.000000e+00, %2100
  %2103 = call float @dx.op.unary.f32(i32 21, float %2102)  ; Exp(value)
  %2104 = fmul fast float %2101, %2103
  br label %2105

; <label>:2105                                    ; preds = %2081, %2078
  %2106 = phi float [ %2096, %2081 ], [ %2080, %2078 ]
  %2107 = phi float [ %2104, %2081 ], [ %2079, %2078 ]
  %2108 = phi float [ %2087, %2081 ], [ %2068, %2078 ]
  %2109 = phi float [ %2085, %2081 ], [ %2064, %2078 ]
  %2110 = fmul fast float %2076, %2109
  %2111 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2110)  ; FMax(a,b)
  %2112 = fsub fast float -0.000000e+00, %2111
  %2113 = call float @dx.op.unary.f32(i32 21, float %2112)  ; Exp(value)
  %2114 = fsub fast float 1.000000e+00, %2113
  %2115 = fdiv fast float %2114, %2111
  %2116 = fmul fast float %2111, 0x3FCEBFBE00000000
  %2117 = fsub fast float 0x3FE62E4300000000, %2116
  %2118 = call float @dx.op.unary.f32(i32 6, float %2111)  ; FAbs(value)
  %2119 = fcmp fast ogt float %2118, 0x3F847AE140000000
  %2120 = select i1 %2119, float %2115, float %2117
  %2121 = fmul fast float %2120, %2106
  %2122 = fmul fast float %2077, %2109
  %2123 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2122)  ; FMax(a,b)
  %2124 = fsub fast float -0.000000e+00, %2123
  %2125 = call float @dx.op.unary.f32(i32 21, float %2124)  ; Exp(value)
  %2126 = fsub fast float 1.000000e+00, %2125
  %2127 = fdiv fast float %2126, %2123
  %2128 = fmul fast float %2123, 0x3FCEBFBE00000000
  %2129 = fsub fast float 0x3FE62E4300000000, %2128
  %2130 = call float @dx.op.unary.f32(i32 6, float %2123)  ; FAbs(value)
  %2131 = fcmp fast ogt float %2130, 0x3F847AE140000000
  %2132 = select i1 %2131, float %2127, float %2129
  %2133 = fmul fast float %2132, %2107
  %2134 = fadd fast float %2133, %2121
  %2135 = extractvalue %dx.types.CBufRet.f32 %2051, 0
  %2136 = extractvalue %dx.types.CBufRet.f32 %2051, 1
  %2137 = extractvalue %dx.types.CBufRet.f32 %2051, 2
  %2138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2139 = extractvalue %dx.types.CBufRet.f32 %2138, 2
  %2140 = fcmp fast ogt float %2139, 0.000000e+00
  br i1 %2140, label %2141, label %2177, !dx.controlflow.hints !77

; <label>:2141                                    ; preds = %2105
  %2142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2143 = extractvalue %dx.types.CBufRet.f32 %2142, 0
  %2144 = fmul fast float %2143, %2068
  %2145 = extractvalue %dx.types.CBufRet.f32 %2142, 1
  %2146 = fadd fast float %2144, %2145
  %2147 = call float @dx.op.unary.f32(i32 7, float %2146)  ; Saturate(value)
  %2148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2149 = extractvalue %dx.types.CBufRet.f32 %2148, 1
  %2150 = extractvalue %dx.types.CBufRet.f32 %2148, 0
  %2151 = fsub fast float -0.000000e+00, %2150
  %2152 = call float @dx.op.dot2.f32(i32 54, float %2048, float %2049, float %2149, float %2151)  ; Dot2(ax,ay,bx,by)
  %2153 = call float @dx.op.dot2.f32(i32 54, float %2048, float %2049, float %2150, float %2149)  ; Dot2(ax,ay,bx,by)
  %2154 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2155 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2156 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2154, %dx.types.Handle %2155, float %2152, float %2153, float %2064, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2157 = extractvalue %dx.types.ResRet.f32 %2156, 0
  %2158 = extractvalue %dx.types.ResRet.f32 %2156, 1
  %2159 = extractvalue %dx.types.ResRet.f32 %2156, 2
  %2160 = extractvalue %dx.types.CBufRet.f32 %2142, 2
  %2161 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2154, %dx.types.Handle %2155, float %2152, float %2153, float %2064, float undef, i32 undef, i32 undef, i32 undef, float %2160)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2162 = extractvalue %dx.types.ResRet.f32 %2161, 0
  %2163 = extractvalue %dx.types.ResRet.f32 %2161, 1
  %2164 = extractvalue %dx.types.ResRet.f32 %2161, 2
  %2165 = fsub fast float %2157, %2162
  %2166 = fsub fast float %2158, %2163
  %2167 = fsub fast float %2159, %2164
  %2168 = fmul fast float %2165, %2147
  %2169 = fmul fast float %2166, %2147
  %2170 = fmul fast float %2167, %2147
  %2171 = fadd fast float %2168, %2162
  %2172 = fadd fast float %2169, %2163
  %2173 = fadd fast float %2170, %2164
  %2174 = fmul fast float %2171, %2135
  %2175 = fmul fast float %2172, %2136
  %2176 = fmul fast float %2173, %2137
  br label %2177

; <label>:2177                                    ; preds = %2141, %2105
  %2178 = phi float [ %2174, %2141 ], [ %2135, %2105 ]
  %2179 = phi float [ %2175, %2141 ], [ %2136, %2105 ]
  %2180 = phi float [ %2176, %2141 ], [ %2137, %2105 ]
  %2181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2182 = extractvalue %dx.types.CBufRet.f32 %2181, 0
  %2183 = extractvalue %dx.types.CBufRet.f32 %2181, 1
  %2184 = extractvalue %dx.types.CBufRet.f32 %2181, 2
  %2185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %2186 = extractvalue %dx.types.CBufRet.f32 %2185, 1
  %2187 = fmul fast float %2186, %2182
  %2188 = fmul fast float %2186, %2183
  %2189 = fmul fast float %2186, %2184
  %2190 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2191 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2192 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2190, %dx.types.Handle %2191, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2193 = extractvalue %dx.types.ResRet.f32 %2192, 0
  %2194 = extractvalue %dx.types.ResRet.f32 %2192, 1
  %2195 = extractvalue %dx.types.ResRet.f32 %2192, 2
  %2196 = fmul fast float %2187, %2193
  %2197 = fmul fast float %2188, %2194
  %2198 = fmul fast float %2189, %2195
  %2199 = fadd fast float %2196, %2178
  %2200 = fadd fast float %2197, %2179
  %2201 = fadd fast float %2198, %2180
  %2202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2203 = extractvalue %dx.types.CBufRet.f32 %2202, 3
  %2204 = fcmp fast oge float %2203, 0.000000e+00
  %2205 = fcmp fast oeq float %2139, 0.000000e+00
  %2206 = and i1 %2204, %2205
  br i1 %2206, label %2207, label %2278

; <label>:2207                                    ; preds = %2177
  %2208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2209 = extractvalue %dx.types.CBufRet.f32 %2208, 0
  %2210 = extractvalue %dx.types.CBufRet.f32 %2208, 1
  %2211 = extractvalue %dx.types.CBufRet.f32 %2208, 2
  %2212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2213 = extractvalue %dx.types.CBufRet.f32 %2212, 0
  %2214 = extractvalue %dx.types.CBufRet.f32 %2212, 1
  %2215 = extractvalue %dx.types.CBufRet.f32 %2212, 2
  %2216 = fmul fast float %2186, 0x3FB45F3060000000
  %2217 = fmul fast float %2216, %2213
  %2218 = fmul fast float %2216, %2214
  %2219 = fmul fast float %2216, %2215
  %2220 = fadd fast float %2217, %2209
  %2221 = fadd fast float %2218, %2210
  %2222 = fadd fast float %2219, %2211
  %2223 = extractvalue %dx.types.CBufRet.f32 %2208, 3
  %2224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %2225 = extractvalue %dx.types.CBufRet.f32 %2224, 0
  %2226 = extractvalue %dx.types.CBufRet.f32 %2224, 1
  %2227 = extractvalue %dx.types.CBufRet.f32 %2224, 2
  %2228 = call float @dx.op.dot3.f32(i32 55, float %2069, float %2070, float %2071, float %2225, float %2226, float %2227)  ; Dot3(ax,ay,az,bx,by,bz)
  %2229 = call float @dx.op.unary.f32(i32 7, float %2228)  ; Saturate(value)
  %2230 = call float @dx.op.unary.f32(i32 23, float %2229)  ; Log(value)
  %2231 = fmul fast float %2230, %2223
  %2232 = call float @dx.op.unary.f32(i32 21, float %2231)  ; Exp(value)
  %2233 = fmul fast float %2232, %2220
  %2234 = fmul fast float %2232, %2221
  %2235 = fmul fast float %2232, %2222
  %2236 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %2237 = extractvalue %dx.types.CBufRet.f32 %2236, 3
  %2238 = fcmp fast ogt float %2237, 0.000000e+00
  br i1 %2238, label %2239, label %2264

; <label>:2239                                    ; preds = %2207
  %2240 = extractvalue %dx.types.CBufRet.f32 %2236, 0
  %2241 = extractvalue %dx.types.CBufRet.f32 %2236, 1
  %2242 = extractvalue %dx.types.CBufRet.f32 %2236, 2
  %2243 = fmul fast float %2216, %2240
  %2244 = fmul fast float %2216, %2241
  %2245 = fmul fast float %2216, %2242
  %2246 = fadd fast float %2243, %2209
  %2247 = fadd fast float %2244, %2210
  %2248 = fadd fast float %2245, %2211
  %2249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %2250 = extractvalue %dx.types.CBufRet.f32 %2249, 0
  %2251 = extractvalue %dx.types.CBufRet.f32 %2249, 1
  %2252 = extractvalue %dx.types.CBufRet.f32 %2249, 2
  %2253 = call float @dx.op.dot3.f32(i32 55, float %2069, float %2070, float %2071, float %2250, float %2251, float %2252)  ; Dot3(ax,ay,az,bx,by,bz)
  %2254 = call float @dx.op.unary.f32(i32 7, float %2253)  ; Saturate(value)
  %2255 = call float @dx.op.unary.f32(i32 23, float %2254)  ; Log(value)
  %2256 = fmul fast float %2255, %2223
  %2257 = call float @dx.op.unary.f32(i32 21, float %2256)  ; Exp(value)
  %2258 = fmul fast float %2257, %2246
  %2259 = fmul fast float %2257, %2247
  %2260 = fmul fast float %2257, %2248
  %2261 = fadd fast float %2258, %2233
  %2262 = fadd fast float %2259, %2234
  %2263 = fadd fast float %2260, %2235
  br label %2264

; <label>:2264                                    ; preds = %2239, %2207
  %2265 = phi float [ %2261, %2239 ], [ %2233, %2207 ]
  %2266 = phi float [ %2262, %2239 ], [ %2234, %2207 ]
  %2267 = phi float [ %2263, %2239 ], [ %2235, %2207 ]
  %2268 = fsub fast float %2108, %2203
  %2269 = call float @dx.op.binary.f32(i32 35, float %2268, float 0.000000e+00)  ; FMax(a,b)
  %2270 = fmul fast float %2134, %2269
  %2271 = fsub fast float -0.000000e+00, %2270
  %2272 = call float @dx.op.unary.f32(i32 21, float %2271)  ; Exp(value)
  %2273 = call float @dx.op.unary.f32(i32 7, float %2272)  ; Saturate(value)
  %2274 = fsub fast float 1.000000e+00, %2273
  %2275 = fmul fast float %2274, %2265
  %2276 = fmul fast float %2274, %2266
  %2277 = fmul fast float %2274, %2267
  br label %2278

; <label>:2278                                    ; preds = %2264, %2177
  %2279 = phi float [ %2275, %2264 ], [ 0.000000e+00, %2177 ]
  %2280 = phi float [ %2276, %2264 ], [ 0.000000e+00, %2177 ]
  %2281 = phi float [ %2277, %2264 ], [ 0.000000e+00, %2177 ]
  %2282 = fmul fast float %2108, %2134
  %2283 = fsub fast float -0.000000e+00, %2282
  %2284 = call float @dx.op.unary.f32(i32 21, float %2283)  ; Exp(value)
  %2285 = call float @dx.op.unary.f32(i32 7, float %2284)  ; Saturate(value)
  %2286 = call float @dx.op.binary.f32(i32 35, float %2285, float %2052)  ; FMax(a,b)
  %2287 = extractvalue %dx.types.CBufRet.f32 %2138, 3
  %2288 = fcmp fast ogt float %2287, 0.000000e+00
  %2289 = fcmp fast ogt float %2068, %2287
  %2290 = and i1 %2288, %2289
  %2291 = select i1 %2290, float 0.000000e+00, float %2279
  %2292 = select i1 %2290, float 0.000000e+00, float %2280
  %2293 = select i1 %2290, float 0.000000e+00, float %2281
  %2294 = select i1 %2290, float 1.000000e+00, float %2286
  %2295 = fsub fast float 1.000000e+00, %2294
  %2296 = fmul fast float %2295, %2199
  %2297 = fmul fast float %2295, %2200
  %2298 = fmul fast float %2295, %2201
  %2299 = fadd fast float %2296, %2291
  %2300 = fadd fast float %2297, %2292
  %2301 = fadd fast float %2298, %2293
  %2302 = fmul fast float %2294, %2041
  %2303 = fmul fast float %2294, %2042
  %2304 = fmul fast float %2294, %2043
  %2305 = fmul fast float %2040, %1996
  %2306 = fmul fast float %2305, %2299
  %2307 = fmul fast float %2305, %2300
  %2308 = fmul fast float %2305, %2301
  %2309 = fadd fast float %2306, %2302
  %2310 = fadd fast float %2307, %2303
  %2311 = fadd fast float %2308, %2304
  br label %2312

; <label>:2312                                    ; preds = %2278, %2032
  %2313 = phi float [ %2309, %2278 ], [ %2041, %2032 ]
  %2314 = phi float [ %2310, %2278 ], [ %2042, %2032 ]
  %2315 = phi float [ %2311, %2278 ], [ %2043, %2032 ]
  %2316 = call float @dx.op.binary.f32(i32 35, float %2314, float %2315)  ; FMax(a,b)
  %2317 = call float @dx.op.binary.f32(i32 35, float %2313, float %2316)  ; FMax(a,b)
  %2318 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %2319 = extractvalue %dx.types.CBufRet.f32 %2318, 2
  %2320 = fcmp fast ogt float %2317, %2319
  br i1 %2320, label %2321, label %2326

; <label>:2321                                    ; preds = %2312
  %2322 = fdiv fast float %2319, %2317
  %2323 = fmul fast float %2322, %2313
  %2324 = fmul fast float %2322, %2314
  %2325 = fmul fast float %2322, %2315
  br label %2326

; <label>:2326                                    ; preds = %2321, %2312
  %2327 = phi float [ %2323, %2321 ], [ %2313, %2312 ]
  %2328 = phi float [ %2324, %2321 ], [ %2314, %2312 ]
  %2329 = phi float [ %2325, %2321 ], [ %2315, %2312 ]
  %2330 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2330, i32 %56, i32 %57, i32 undef, float %2327, float %2328, float %2329, float %2327, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2331 = call float @dx.op.binary.f32(i32 35, float %1995, float 0.000000e+00)  ; FMax(a,b)
  %2332 = select i1 %1960, float -1.000000e+00, float 1.000000e+00
  %2333 = fmul fast float %2331, %2332
  %2334 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2334, i32 %56, i32 %57, i32 undef, float %2333, float %2333, float %2333, float %2333, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2335

; <label>:2335                                    ; preds = %2326, %0
  ret void

; <label>:2336                                    ; preds = %1472
  %2337 = fsub fast float %1459, %1454
  %2338 = call float @dx.op.unary.f32(i32 6, float %2337)  ; FAbs(value)
  %2339 = fsub fast float %2338, %1460
  %2340 = fdiv fast float %2339, %1461
  %2341 = call float @dx.op.unary.f32(i32 7, float %2340)  ; Saturate(value)
  %2342 = fsub fast float 1.000000e+00, %2341
  br label %2343

; <label>:2343                                    ; preds = %2336, %1472
  %2344 = phi float [ %2342, %2336 ], [ %1476, %1472 ]
  %2345 = fcmp uge float %1455, 1.000000e+00
  %2346 = or i1 %1064, %2345
  %2347 = select i1 %2345, float 0.000000e+00, float 1.000000e+00
  br i1 %2346, label %2355, label %2348

; <label>:2348                                    ; preds = %2343
  %2349 = fsub fast float %1459, %1455
  %2350 = call float @dx.op.unary.f32(i32 6, float %2349)  ; FAbs(value)
  %2351 = fsub fast float %2350, %1460
  %2352 = fdiv fast float %2351, %1461
  %2353 = call float @dx.op.unary.f32(i32 7, float %2352)  ; Saturate(value)
  %2354 = fsub fast float 1.000000e+00, %2353
  br label %2355

; <label>:2355                                    ; preds = %2348, %2343
  %2356 = phi float [ %2354, %2348 ], [ %2347, %2343 ]
  %2357 = fcmp uge float %1456, 1.000000e+00
  %2358 = or i1 %1064, %2357
  %2359 = select i1 %2357, float 0.000000e+00, float 1.000000e+00
  br i1 %2358, label %2367, label %2360

; <label>:2360                                    ; preds = %2355
  %2361 = fsub fast float %1459, %1456
  %2362 = call float @dx.op.unary.f32(i32 6, float %2361)  ; FAbs(value)
  %2363 = fsub fast float %2362, %1460
  %2364 = fdiv fast float %2363, %1461
  %2365 = call float @dx.op.unary.f32(i32 7, float %2364)  ; Saturate(value)
  %2366 = fsub fast float 1.000000e+00, %2365
  br label %2367

; <label>:2367                                    ; preds = %2360, %2355
  %2368 = phi float [ %2366, %2360 ], [ %2359, %2355 ]
  %2369 = fmul fast float %1473, %1434
  %2370 = fmul fast float %2344, %1435
  %2371 = fmul fast float %2356, %1437
  %2372 = fmul fast float %2368, %1438
  %2373 = call float @dx.op.dot4.f32(i32 56, float %2369, float %2370, float %2371, float %2372, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2374 = fmul fast float %2373, %1447
  %2375 = fcmp fast ogt float %2374, 0.000000e+00
  br i1 %2375, label %1477, label %1217
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!53}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !31, !39, !46}
!5 = !{!6, !8, !10, !11, !12, !14, !15, !16, !17, !18, !19, !20, !22, !23, !24, !25, !26, !27, !28, !29, !30}
!6 = !{i32 0, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 5}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !7}
!11 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 16}
!14 = !{i32 5, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!15 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!18 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !7}
!19 = !{i32 10, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !9}
!20 = !{i32 11, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 11, i32 1, i32 12, i32 0, !21}
!21 = !{i32 1, i32 32}
!22 = !{i32 12, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 4, i32 0, !9}
!23 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!24 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!25 = !{i32 15, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 12, i32 0, !13}
!26 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!27 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !7}
!28 = !{i32 18, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!29 = !{i32 19, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 19, i32 1, i32 10, i32 0, !9}
!30 = !{i32 20, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 10, i32 0, !9}
!31 = !{!32, !34, !35, !37, !38}
!32 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !33}
!33 = !{i32 1, i32 4}
!34 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !33}
!35 = !{i32 2, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!36 = !{i32 1, i32 8}
!37 = !{i32 3, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!38 = !{i32 4, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!39 = !{!40, !41, !42, !43, !44, !45}
!40 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1320, null}
!41 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!42 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 140, null}
!43 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!44 = !{i32 4, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 4, i32 1, i32 180, null}
!45 = !{i32 5, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 5, i32 1, i32 228, null}
!46 = !{!47, !48, !49, !50, !51, !52}
!47 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!48 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!49 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 5, i32 1, i32 0, null}
!50 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!51 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!52 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!53 = !{void ()* @ReflectionTraceVoxelsCS, !"ReflectionTraceVoxelsCS", null, !4, !54}
!54 = !{i32 0, i64 16, i32 4, !55, i32 5, !56}
!55 = !{i32 64, i32 1, i32 1}
!56 = !{i32 0}
!57 = distinct !{!57, !58}
!58 = !{!"llvm.loop.unroll.disable"}
!59 = distinct !{!59, !58}
!60 = !{!61, !61, i64 0}
!61 = !{!"int", !62, i64 0}
!62 = !{!"omnipotent char", !63, i64 0}
!63 = !{!"Simple C/C++ TBAA"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!66 = distinct !{!66, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!67 = !{!68, !70, !72, !74}
!68 = distinct !{!68, !69, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!69 = distinct !{!69, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!70 = distinct !{!70, !71, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z: %ConeTraceResult"}
!71 = distinct !{!71, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z"}
!72 = distinct !{!72, !73, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!73 = distinct !{!73, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!74 = distinct !{!74, !75, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!75 = distinct !{!75, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!76 = !{!70, !72, !74}
!77 = distinct !{!77, !"dx.controlflow.hints", i32 1}
