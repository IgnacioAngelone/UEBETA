;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 6deff826149968cd38814381fc391d17
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  144
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  148
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  152
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  160
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint ReflectionDownsampleFactor;              ; Offset:  272
;       uint2 ReflectionTracingViewSize;              ; Offset:  280
;       uint2 ReflectionTracingBufferSize;            ; Offset:  288
;       float MaxRayIntensity;                        ; Offset:  296
;       float ReflectionSmoothBias;                   ; Offset:  300
;       uint ReflectionPass;                          ; Offset:  304
;       uint UseJitter;                               ; Offset:  308
;       uint UseHighResSurface;                       ; Offset:  312
;       float NearFieldMaxTraceDistance;              ; Offset:  320
;       float CardTraceEndDistanceFromCamera;         ; Offset:  484
;       float MaxTraceDistance;                       ; Offset:  504
;       float MaxMeshSDFTraceDistance;                ; Offset:  508
;       float SurfaceBias;                            ; Offset:  512
;       int HeightfieldMaxTracingSteps;               ; Offset:  528
;       float ReprojectionRadiusScale;                ; Offset:  640
;       float InvClipmapFadeSize;                     ; Offset:  652
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  656
;       uint RadianceProbeClipmapResolution;          ; Offset:  664
;       uint NumRadianceProbeClipmaps;                ; Offset:  668
;       uint RadianceProbeResolution;                 ; Offset:  672
;       uint FinalProbeResolution;                    ; Offset:  676
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  680
;       uint CalculateIrradiance;                     ; Offset:  684
;       uint IrradianceProbeResolution;               ; Offset:  688
;       uint OcclusionProbeResolution;                ; Offset:  692
;       float4 RadianceProbeSettings[6];              ; Offset:  752
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  848
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  944
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1040
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1048
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1056
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1064
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1068
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1072
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1076
;       float4 HZBUvFactorAndInvFactor;               ; Offset: 1120
;       float2 PrevSceneColorBilinearUVMin;           ; Offset: 1136
;       float2 PrevSceneColorBilinearUVMax;           ; Offset: 1144
;       float4 PrevScreenPositionScaleBias;           ; Offset: 1152
;       float4 PrevScreenPositionScaleBiasForDepth;   ; Offset: 1168
;       float PrevSceneColorPreExposureCorrection;    ; Offset: 1184
;       float2 HZBBaseTexelSize;                      ; Offset: 1192
;       float4 HZBUVToScreenUVScaleBias;              ; Offset: 1200
;       float RelativeDepthThickness;                 ; Offset: 1296
;       float SampleSceneColorNormalTreshold;         ; Offset: 1300
;       float DistantScreenTraceSlopeCompareTolerance;; Offset: 1312
;       float DistantScreenTraceMaxTraceDistance;     ; Offset: 1316
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1320
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_NumPrimitiveGroups;       ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       float PrePadding_LumenCardScene_44;           ; Offset:   44
;       uint BindlessResource_LumenCardScene_CardData;; Offset:   48
;       uint PrePadding_LumenCardScene_52;            ; Offset:   52
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:   56
;       uint PrePadding_LumenCardScene_60;            ; Offset:   60
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:   64
;       uint PrePadding_LumenCardScene_68;            ; Offset:   68
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:   72
;       uint PrePadding_LumenCardScene_76;            ; Offset:   76
;       uint BindlessResource_LumenCardScene_PrimitiveGroupData;; Offset:   80
;       uint PrePadding_LumenCardScene_84;            ; Offset:   84
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:   88
;       uint PrePadding_LumenCardScene_92;            ; Offset:   92
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:   96
;       uint PrePadding_LumenCardScene_100;           ; Offset:  100
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  104
;       uint PrePadding_LumenCardScene_108;           ; Offset:  108
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  136
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   140
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for GlobalDistanceFieldPageObjectGridBuffer
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S1   s4,space1000     1
; D3DStaticTrilinearClampedSampler   sampler      NA          NA      S2   s5,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S3             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S4             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s2     1
; View_GlobalDistanceFieldPageAtlasTexture   texture     f32          3d      T0             t0     1
; View_GlobalDistanceFieldPageTableTexture   texture     u32          3d      T1             t1     1
; View_GlobalDistanceFieldMipTexture   texture     f32          3d      T2             t2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T3             t3     1
; LumenCardScene_CardData           texture  struct         r/o      T4             t4     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T5             t5     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T6             t6     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T7             t7     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T8             t8     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T9             t9     1
; SceneDepthTexture                 texture     f32          2d     T10            t10     1
; GBufferVelocityTexture            texture     f32          2d     T11            t11     1
; FinalLightingAtlas                texture     f32          2d     T12            t12     1
; DepthAtlas                        texture     f32          2d     T13            t13     1
; GlobalDistanceFieldPageObjectGridBuffer   texture  struct         r/o     T14            t14     1
; DownsampledDepth                  texture     f32          2d     T15            t15     1
; RayBuffer                         texture     f32          2d     T16            t16     1
; RayTraceDistance                  texture     u32          2d     T17            t17     1
; CompactedTraceTexelAllocator      texture     u32         buf     T18            t18     1
; CompactedTraceTexelData           texture     u32         buf     T19            t19     1
; PrevSceneColorTexture             texture     f32          2d     T20            t20     1
; HistorySceneDepth                 texture     f32          2d     T21            t21     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U0             u0     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U2             u2     1
; RWTraceHit                            UAV     f32          2d      U3             u3     1
; RWTraceRadiance                       UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, float, <2 x float>, <4 x float>, float, float, float, float }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceVoxelsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 1000, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 140 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 1320 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %45 = alloca [6 x i32], align 4
  %46 = alloca [4 x i32], align 4
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %48 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %47, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %49 = extractvalue %dx.types.ResRet.i32 %48, 0
  %50 = icmp ult i32 %44, %49
  br i1 %50, label %51, label %2253

; <label>:51                                      ; preds = %0
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %53 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %52, i32 %44, i32 undef)  ; BufferLoad(srv,index,wot)
  %54 = extractvalue %dx.types.ResRet.i32 %53, 0
  %55 = and i32 %54, 65535
  %56 = lshr i32 %54, 16
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  %58 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %57, i32 undef, i32 %55, i32 %56, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %59 = extractvalue %dx.types.ResRet.f32 %58, 0
  %60 = call float @dx.op.unary.f32(i32 6, float %59)  ; FAbs(value)
  %61 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.i32 %61, 0
  %63 = mul i32 %62, %55
  %64 = mul i32 %62, %56
  %65 = uitofp i32 %63 to float
  %66 = uitofp i32 %64 to float
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = fadd fast float %68, 5.000000e-01
  %71 = fadd fast float %70, %65
  %72 = fadd fast float %69, 5.000000e-01
  %73 = fadd fast float %72, %66
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %77 = fadd fast float %68, -1.000000e+00
  %78 = fadd fast float %77, %75
  %79 = fadd fast float %69, -1.000000e+00
  %80 = fadd fast float %79, %76
  %81 = call float @dx.op.binary.f32(i32 36, float %71, float %78)  ; FMin(a,b)
  %82 = call float @dx.op.binary.f32(i32 36, float %73, float %80)  ; FMin(a,b)
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 2
  %85 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %86 = fmul fast float %84, %81
  %87 = fmul fast float %85, %82
  %88 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %89 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %88, i32 0, i32 %55, i32 %56, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %90 = extractvalue %dx.types.ResRet.f32 %89, 0
  %91 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %92 = extractvalue %dx.types.CBufRet.f32 %91, 2
  %93 = extractvalue %dx.types.CBufRet.f32 %91, 3
  %94 = fsub fast float %86, %93
  %95 = fsub fast float %87, %92
  %96 = extractvalue %dx.types.CBufRet.f32 %91, 0
  %97 = extractvalue %dx.types.CBufRet.f32 %91, 1
  %98 = fdiv fast float %94, %96
  %99 = fdiv fast float %95, %97
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 0
  %102 = extractvalue %dx.types.CBufRet.f32 %100, 1
  %103 = extractvalue %dx.types.CBufRet.f32 %100, 2
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = extractvalue %dx.types.CBufRet.f32 %108, 2
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = fmul fast float %117, 2.097152e+06
  %121 = fmul fast float %118, 2.097152e+06
  %122 = fmul fast float %119, 2.097152e+06
  %123 = fadd fast float %120, %113
  %124 = fadd fast float %121, %114
  %125 = fadd fast float %122, %115
  %126 = fmul fast float %98, %90
  %127 = fmul fast float %99, %90
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 3
  %130 = bitcast float %129 to i32
  %131 = icmp ne i32 %130, 0
  %132 = select i1 %131, float %98, float %126
  %133 = select i1 %131, float %99, float %127
  %134 = fmul fast float %132, %101
  %135 = call float @dx.op.tertiary.f32(i32 46, float %133, float %105, float %134)  ; FMad(a,b,c)
  %136 = call float @dx.op.tertiary.f32(i32 46, float %90, float %109, float %135)  ; FMad(a,b,c)
  %137 = fadd fast float %123, %136
  %138 = fmul fast float %132, %102
  %139 = call float @dx.op.tertiary.f32(i32 46, float %133, float %106, float %138)  ; FMad(a,b,c)
  %140 = call float @dx.op.tertiary.f32(i32 46, float %90, float %110, float %139)  ; FMad(a,b,c)
  %141 = fadd fast float %124, %140
  %142 = fmul fast float %132, %103
  %143 = call float @dx.op.tertiary.f32(i32 46, float %133, float %107, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %90, float %111, float %143)  ; FMad(a,b,c)
  %145 = fadd fast float %125, %144
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 0
  %148 = extractvalue %dx.types.CBufRet.f32 %146, 1
  %149 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %161 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %162 = fmul fast float %132, %147
  %163 = call float @dx.op.tertiary.f32(i32 46, float %133, float %151, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %90, float %155, float %163)  ; FMad(a,b,c)
  %165 = fadd fast float %164, %159
  %166 = fmul fast float %132, %148
  %167 = call float @dx.op.tertiary.f32(i32 46, float %133, float %152, float %166)  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %90, float %156, float %167)  ; FMad(a,b,c)
  %169 = fadd fast float %168, %160
  %170 = fmul fast float %132, %149
  %171 = call float @dx.op.tertiary.f32(i32 46, float %133, float %153, float %170)  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %90, float %157, float %171)  ; FMad(a,b,c)
  %173 = fadd fast float %172, %161
  %174 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %175 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %174, i32 0, i32 %55, i32 %56, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %176 = extractvalue %dx.types.ResRet.f32 %175, 0
  %177 = extractvalue %dx.types.ResRet.f32 %175, 1
  %178 = extractvalue %dx.types.ResRet.f32 %175, 2
  %179 = extractvalue %dx.types.ResRet.f32 %175, 3
  %180 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %181 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %180, i32 0, i32 %55, i32 %56, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %182 = extractvalue %dx.types.ResRet.i32 %181, 0
  %183 = and i32 %182, 32767
  %184 = call float @dx.op.legacyF16ToF32(i32 131, i32 %183)  ; LegacyF16ToF32(value)
  %185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %186 = extractvalue %dx.types.CBufRet.f32 %185, 0
  %187 = fmul fast float %186, %176
  %188 = fmul fast float %186, %177
  %189 = fmul fast float %186, %178
  %190 = fadd fast float %187, %165
  %191 = fadd fast float %188, %169
  %192 = fadd fast float %189, %173
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 0
  %195 = fadd fast float %194, %179
  %196 = call float @dx.op.unary.f32(i32 14, float %195)  ; Tan(value)
  %197 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.i32 %197, 2
  %199 = icmp ne i32 %198, 0
  %200 = fmul fast float %176, %60
  %201 = fmul fast float %177, %60
  %202 = fmul fast float %178, %60
  %203 = fadd fast float %200, %165
  %204 = fadd fast float %201, %169
  %205 = fadd fast float %202, %173
  %206 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.i32 %206, 2
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %252, label %209

; <label>:209                                     ; preds = %51
  br label %210

; <label>:210                                     ; preds = %245, %209
  %211 = phi i32 [ %246, %245 ], [ 0, %209 ]
  %212 = add i32 %211, 195
  %213 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %212)  ; CBufferLoadLegacy(handle,regIndex)
  %214 = extractvalue %dx.types.CBufRet.f32 %213, 3
  %215 = extractvalue %dx.types.CBufRet.f32 %213, 0
  %216 = extractvalue %dx.types.CBufRet.f32 %213, 1
  %217 = extractvalue %dx.types.CBufRet.f32 %213, 2
  %218 = fadd fast float %214, %203
  %219 = fsub fast float %218, %215
  %220 = fadd fast float %214, %204
  %221 = fsub fast float %220, %216
  %222 = fadd fast float %214, %205
  %223 = fsub fast float %222, %217
  %224 = call float @dx.op.binary.f32(i32 35, float %219, float 0.000000e+00)  ; FMax(a,b)
  %225 = call float @dx.op.binary.f32(i32 35, float %221, float 0.000000e+00)  ; FMax(a,b)
  %226 = call float @dx.op.binary.f32(i32 35, float %223, float 0.000000e+00)  ; FMax(a,b)
  %227 = fsub fast float %214, %203
  %228 = fadd fast float %227, %215
  %229 = fsub fast float %214, %204
  %230 = fadd fast float %229, %216
  %231 = fsub fast float %214, %205
  %232 = fadd fast float %231, %217
  %233 = call float @dx.op.binary.f32(i32 35, float %228, float 0.000000e+00)  ; FMax(a,b)
  %234 = call float @dx.op.binary.f32(i32 35, float %230, float 0.000000e+00)  ; FMax(a,b)
  %235 = call float @dx.op.binary.f32(i32 35, float %232, float 0.000000e+00)  ; FMax(a,b)
  %236 = call float @dx.op.binary.f32(i32 36, float %224, float %233)  ; FMin(a,b)
  %237 = call float @dx.op.binary.f32(i32 36, float %225, float %234)  ; FMin(a,b)
  %238 = call float @dx.op.binary.f32(i32 36, float %226, float %235)  ; FMin(a,b)
  %239 = call float @dx.op.binary.f32(i32 36, float %237, float %238)  ; FMin(a,b)
  %240 = call float @dx.op.binary.f32(i32 36, float %236, float %239)  ; FMin(a,b)
  %241 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %242 = extractvalue %dx.types.CBufRet.f32 %241, 0
  %243 = fmul fast float %242, %214
  %244 = fcmp fast ogt float %240, %243
  br i1 %244, label %250, label %245

; <label>:245                                     ; preds = %210
  %246 = add i32 %211, 1
  %247 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %248 = extractvalue %dx.types.CBufRet.i32 %247, 2
  %249 = icmp ult i32 %246, %248
  br i1 %249, label %210, label %250

; <label>:250                                     ; preds = %245, %210
  %251 = phi i32 [ 0, %245 ], [ %211, %210 ]
  br label %252

; <label>:252                                     ; preds = %250, %51
  %253 = phi i32 [ 0, %51 ], [ %251, %250 ]
  %254 = add i32 %253, 195
  %255 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %254)  ; CBufferLoadLegacy(handle,regIndex)
  %256 = extractvalue %dx.types.CBufRet.f32 %255, 3
  %257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %258 = extractvalue %dx.types.CBufRet.f32 %257, 0
  %259 = fmul fast float %256, 4.000000e+00
  %260 = fmul fast float %259, %258
  %261 = fsub fast float %60, %260
  %262 = call float @dx.op.binary.f32(i32 35, float %261, float 0.000000e+00)  ; FMax(a,b)
  %263 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.i32 %263, 1
  %265 = uitofp i32 %264 to float
  %266 = uitofp i32 %55 to float
  %267 = uitofp i32 %56 to float
  %268 = fmul fast float %265, 0x4040551EC0000000
  %269 = fmul fast float %265, 0x4027A147A0000000
  %270 = fadd fast float %268, %266
  %271 = fadd fast float %269, %267
  %272 = call float @dx.op.dot2.f32(i32 54, float %270, float %271, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %273 = call float @dx.op.unary.f32(i32 22, float %272)  ; Frc(value)
  %274 = fmul fast float %273, 0x404A7DD040000000
  %275 = call float @dx.op.unary.f32(i32 22, float %274)  ; Frc(value)
  %276 = fmul fast float %275, 0x3FBA461100000000
  %277 = fadd fast float %276, 0x3FEE666660000000
  %278 = fmul fast float %179, 0x40545F3060000000
  %279 = call float @dx.op.unary.f32(i32 7, float %278)  ; Saturate(value)
  %280 = fsub fast float 0x3FA9999A00000000, %276
  %281 = fmul fast float %280, %279
  %282 = fadd fast float %277, %281
  %283 = fcmp fast olt float %262, %184
  br i1 %283, label %284, label %1592

; <label>:284                                     ; preds = %252
  %285 = fmul fast float %262, %176
  %286 = fmul fast float %262, %177
  %287 = fmul fast float %262, %178
  %288 = fadd fast float %285, %190
  %289 = fadd fast float %286, %191
  %290 = fadd fast float %287, %192
  %291 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %292 = extractvalue %dx.types.CBufRet.i32 %291, 2
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %337, label %294

; <label>:294                                     ; preds = %284
  br label %295

; <label>:295                                     ; preds = %330, %294
  %296 = phi i32 [ %331, %330 ], [ 0, %294 ]
  %297 = add i32 %296, 195
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %297)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 3
  %300 = extractvalue %dx.types.CBufRet.f32 %298, 0
  %301 = extractvalue %dx.types.CBufRet.f32 %298, 1
  %302 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %303 = fadd fast float %299, %288
  %304 = fsub fast float %303, %300
  %305 = fadd fast float %299, %289
  %306 = fsub fast float %305, %301
  %307 = fadd fast float %299, %290
  %308 = fsub fast float %307, %302
  %309 = call float @dx.op.binary.f32(i32 35, float %304, float 0.000000e+00)  ; FMax(a,b)
  %310 = call float @dx.op.binary.f32(i32 35, float %306, float 0.000000e+00)  ; FMax(a,b)
  %311 = call float @dx.op.binary.f32(i32 35, float %308, float 0.000000e+00)  ; FMax(a,b)
  %312 = fsub fast float %299, %288
  %313 = fadd fast float %312, %300
  %314 = fsub fast float %299, %289
  %315 = fadd fast float %314, %301
  %316 = fsub fast float %299, %290
  %317 = fadd fast float %316, %302
  %318 = call float @dx.op.binary.f32(i32 35, float %313, float 0.000000e+00)  ; FMax(a,b)
  %319 = call float @dx.op.binary.f32(i32 35, float %315, float 0.000000e+00)  ; FMax(a,b)
  %320 = call float @dx.op.binary.f32(i32 35, float %317, float 0.000000e+00)  ; FMax(a,b)
  %321 = call float @dx.op.binary.f32(i32 36, float %309, float %318)  ; FMin(a,b)
  %322 = call float @dx.op.binary.f32(i32 36, float %310, float %319)  ; FMin(a,b)
  %323 = call float @dx.op.binary.f32(i32 36, float %311, float %320)  ; FMin(a,b)
  %324 = call float @dx.op.binary.f32(i32 36, float %322, float %323)  ; FMin(a,b)
  %325 = call float @dx.op.binary.f32(i32 36, float %321, float %324)  ; FMin(a,b)
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = fmul fast float %327, %299
  %329 = fcmp fast ogt float %325, %328
  br i1 %329, label %335, label %330

; <label>:330                                     ; preds = %295
  %331 = add i32 %296, 1
  %332 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %333 = extractvalue %dx.types.CBufRet.i32 %332, 2
  %334 = icmp ult i32 %331, %333
  br i1 %334, label %295, label %335

; <label>:335                                     ; preds = %330, %295
  %336 = phi i32 [ %296, %295 ], [ 0, %330 ]
  br label %337

; <label>:337                                     ; preds = %335, %284
  %338 = phi i32 [ 0, %284 ], [ %336, %335 ]
  %339 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %340 = extractvalue %dx.types.CBufRet.i32 %339, 2
  %341 = icmp ult i32 %338, %340
  br i1 %341, label %342, label %573

; <label>:342                                     ; preds = %337
  br label %343

; <label>:343                                     ; preds = %561, %342
  %344 = phi float [ %565, %561 ], [ -1.000000e+00, %342 ]
  %345 = phi i32 [ %564, %561 ], [ 0, %342 ]
  %346 = phi i32 [ %566, %561 ], [ %338, %342 ]
  %347 = phi float [ %563, %561 ], [ %262, %342 ]
  %348 = phi float [ %562, %561 ], [ 0.000000e+00, %342 ]
  %349 = add i32 %346, 195
  %350 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %349)  ; CBufferLoadLegacy(handle,regIndex)
  %351 = extractvalue %dx.types.CBufRet.f32 %350, 3
  %352 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %353 = extractvalue %dx.types.CBufRet.f32 %352, 0
  %354 = fmul fast float %353, %351
  %355 = extractvalue %dx.types.CBufRet.f32 %350, 0
  %356 = extractvalue %dx.types.CBufRet.f32 %350, 1
  %357 = extractvalue %dx.types.CBufRet.f32 %350, 2
  %358 = fsub fast float %351, %354
  %359 = fmul fast float %184, %176
  %360 = fmul fast float %184, %177
  %361 = fmul fast float %184, %178
  %362 = fdiv fast float 1.000000e+00, %359
  %363 = fdiv fast float 1.000000e+00, %360
  %364 = fdiv fast float 1.000000e+00, %361
  %365 = fsub fast float %355, %190
  %366 = fsub fast float %365, %358
  %367 = fsub fast float %356, %191
  %368 = fsub fast float %367, %358
  %369 = fsub fast float %357, %192
  %370 = fsub fast float %369, %358
  %371 = fmul fast float %366, %362
  %372 = fmul fast float %368, %363
  %373 = fmul fast float %370, %364
  %374 = fadd fast float %365, %358
  %375 = fadd fast float %367, %358
  %376 = fadd fast float %369, %358
  %377 = fmul fast float %374, %362
  %378 = fmul fast float %375, %363
  %379 = fmul fast float %376, %364
  %380 = call float @dx.op.binary.f32(i32 36, float %371, float %377)  ; FMin(a,b)
  %381 = call float @dx.op.binary.f32(i32 36, float %372, float %378)  ; FMin(a,b)
  %382 = call float @dx.op.binary.f32(i32 36, float %373, float %379)  ; FMin(a,b)
  %383 = call float @dx.op.binary.f32(i32 35, float %371, float %377)  ; FMax(a,b)
  %384 = call float @dx.op.binary.f32(i32 35, float %372, float %378)  ; FMax(a,b)
  %385 = call float @dx.op.binary.f32(i32 35, float %373, float %379)  ; FMax(a,b)
  %386 = call float @dx.op.binary.f32(i32 35, float %381, float %382)  ; FMax(a,b)
  %387 = call float @dx.op.binary.f32(i32 35, float %380, float %386)  ; FMax(a,b)
  %388 = call float @dx.op.binary.f32(i32 36, float %384, float %385)  ; FMin(a,b)
  %389 = call float @dx.op.binary.f32(i32 36, float %383, float %388)  ; FMin(a,b)
  %390 = call float @dx.op.unary.f32(i32 7, float %387)  ; Saturate(value)
  %391 = call float @dx.op.unary.f32(i32 7, float %389)  ; Saturate(value)
  %392 = fmul fast float %390, %184
  %393 = fmul fast float %391, %184
  %394 = call float @dx.op.binary.f32(i32 35, float %392, float %347)  ; FMax(a,b)
  %395 = call float @dx.op.binary.f32(i32 35, float %394, float 0.000000e+00)  ; FMax(a,b)
  %396 = fcmp fast olt float %395, %393
  br i1 %396, label %397, label %561

; <label>:397                                     ; preds = %343
  %398 = fmul fast float %351, 8.000000e+00
  %399 = fmul fast float %398, %353
  br label %400

; <label>:400                                     ; preds = %557, %397
  %401 = phi float [ %348, %397 ], [ %527, %557 ]
  %402 = phi float [ %395, %397 ], [ %553, %557 ]
  %403 = phi i32 [ 0, %397 ], [ %558, %557 ]
  %404 = fmul fast float %402, %176
  %405 = fmul fast float %402, %177
  %406 = fmul fast float %402, %178
  %407 = fadd fast float %404, %190
  %408 = fadd fast float %405, %191
  %409 = fadd fast float %406, %192
  %410 = add i32 %346, 201
  %411 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %410)  ; CBufferLoadLegacy(handle,regIndex)
  %412 = extractvalue %dx.types.CBufRet.f32 %411, 0
  %413 = extractvalue %dx.types.CBufRet.f32 %411, 1
  %414 = extractvalue %dx.types.CBufRet.f32 %411, 2
  %415 = extractvalue %dx.types.CBufRet.f32 %411, 3
  %416 = fmul fast float %415, %407
  %417 = fmul fast float %415, %408
  %418 = fmul fast float %415, %409
  %419 = fadd fast float %416, %412
  %420 = fadd fast float %417, %413
  %421 = fadd fast float %418, %414
  %422 = call float @dx.op.unary.f32(i32 22, float %419)  ; Frc(value)
  %423 = call float @dx.op.unary.f32(i32 22, float %420)  ; Frc(value)
  %424 = call float @dx.op.unary.f32(i32 22, float %421)  ; Frc(value)
  %425 = call float @dx.op.unary.f32(i32 22, float %422)  ; Frc(value)
  %426 = call float @dx.op.unary.f32(i32 22, float %423)  ; Frc(value)
  %427 = call float @dx.op.unary.f32(i32 22, float %424)  ; Frc(value)
  %428 = add i32 %346, 207
  %429 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %428)  ; CBufferLoadLegacy(handle,regIndex)
  %430 = extractvalue %dx.types.CBufRet.f32 %429, 0
  %431 = extractvalue %dx.types.CBufRet.f32 %429, 1
  %432 = extractvalue %dx.types.CBufRet.f32 %429, 2
  %433 = fmul fast float %430, %407
  %434 = fmul fast float %431, %408
  %435 = fmul fast float %432, %409
  %436 = add i32 %346, 213
  %437 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %436)  ; CBufferLoadLegacy(handle,regIndex)
  %438 = extractvalue %dx.types.CBufRet.f32 %437, 0
  %439 = extractvalue %dx.types.CBufRet.f32 %437, 1
  %440 = extractvalue %dx.types.CBufRet.f32 %437, 2
  %441 = fadd fast float %433, %438
  %442 = fadd fast float %434, %439
  %443 = fadd fast float %435, %440
  %444 = call float @dx.op.unary.f32(i32 7, float %441)  ; Saturate(value)
  %445 = call float @dx.op.unary.f32(i32 7, float %442)  ; Saturate(value)
  %446 = call float @dx.op.unary.f32(i32 7, float %443)  ; Saturate(value)
  %447 = extractvalue %dx.types.CBufRet.f32 %429, 3
  %448 = extractvalue %dx.types.CBufRet.f32 %437, 3
  %449 = call float @dx.op.binary.f32(i32 35, float %446, float %447)  ; FMax(a,b)
  %450 = call float @dx.op.binary.f32(i32 36, float %449, float %448)  ; FMin(a,b)
  %451 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %452 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %453 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %451, %dx.types.Handle %452, float %444, float %445, float %450, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %454 = extractvalue %dx.types.ResRet.f32 %453, 0
  %455 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %456 = extractvalue %dx.types.CBufRet.f32 %455, 0
  %457 = fmul fast float %456, %399
  %458 = fmul fast float %454, 2.000000e+00
  %459 = fadd fast float %458, -1.000000e+00
  %460 = fmul fast float %457, %459
  %461 = call float @dx.op.unary.f32(i32 7, float %425)  ; Saturate(value)
  %462 = call float @dx.op.unary.f32(i32 7, float %426)  ; Saturate(value)
  %463 = call float @dx.op.unary.f32(i32 7, float %427)  ; Saturate(value)
  %464 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %465 = extractvalue %dx.types.CBufRet.i32 %464, 2
  %466 = sitofp i32 %465 to float
  %467 = fmul fast float %466, %461
  %468 = fmul fast float %466, %462
  %469 = fmul fast float %466, %463
  %470 = mul i32 %465, %346
  %471 = sitofp i32 %470 to float
  %472 = fadd fast float %471, %469
  %473 = fptosi float %467 to i32
  %474 = fptosi float %468 to i32
  %475 = fptosi float %472 to i32
  %476 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %477 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %476, i32 0, i32 %473, i32 %474, i32 %475, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %478 = extractvalue %dx.types.ResRet.i32 %477, 0
  %479 = icmp ne i32 %478, -1
  %480 = extractvalue %dx.types.CBufRet.f32 %455, 1
  %481 = fcmp fast olt float %454, %480
  %482 = and i1 %479, %481
  br i1 %482, label %483, label %524

; <label>:483                                     ; preds = %400
  %484 = icmp slt i32 %478, 0
  %485 = fmul fast float %466, %425
  %486 = fmul fast float %466, %426
  %487 = fmul fast float %466, %427
  %488 = call float @dx.op.unary.f32(i32 22, float %485)  ; Frc(value)
  %489 = call float @dx.op.unary.f32(i32 22, float %486)  ; Frc(value)
  %490 = call float @dx.op.unary.f32(i32 22, float %487)  ; Frc(value)
  %491 = shl i32 %478, 3
  %492 = and i32 %491, 1016
  %493 = lshr i32 %478, 4
  %494 = and i32 %493, 1016
  %495 = lshr i32 %478, 11
  %496 = and i32 %495, 8184
  %497 = uitofp i32 %492 to float
  %498 = uitofp i32 %494 to float
  %499 = uitofp i32 %496 to float
  %500 = fmul fast float %488, 7.000000e+00
  %501 = fmul fast float %489, 7.000000e+00
  %502 = fmul fast float %490, 7.000000e+00
  %503 = fadd fast float %497, 5.000000e-01
  %504 = fadd fast float %503, %500
  %505 = fadd fast float %498, 5.000000e-01
  %506 = fadd fast float %505, %501
  %507 = fadd fast float %499, 5.000000e-01
  %508 = fadd fast float %507, %502
  %509 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %510 = extractvalue %dx.types.CBufRet.f32 %509, 0
  %511 = extractvalue %dx.types.CBufRet.f32 %509, 1
  %512 = extractvalue %dx.types.CBufRet.f32 %509, 2
  %513 = fmul fast float %510, %504
  %514 = fmul fast float %506, %511
  %515 = fmul fast float %508, %512
  %516 = select i1 %484, float 0.000000e+00, float 1.000000e+00
  %517 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %518 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %519 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %517, %dx.types.Handle %518, float %513, float %514, float %515, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %520 = extractvalue %dx.types.ResRet.f32 %519, 0
  %521 = fmul fast float %520, 2.000000e+00
  %522 = fadd fast float %521, -1.000000e+00
  %523 = fmul fast float %522, %399
  br label %524

; <label>:524                                     ; preds = %483, %400
  %525 = phi float [ %523, %483 ], [ %460, %400 ]
  %526 = phi float [ %516, %483 ], [ 1.000000e+00, %400 ]
  %527 = call float @dx.op.binary.f32(i32 35, float %525, float %401)  ; FMax(a,b)
  %528 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %529 = extractvalue %dx.types.CBufRet.f32 %528, 3
  %530 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 223)  ; CBufferLoadLegacy(handle,regIndex)
  %531 = extractvalue %dx.types.CBufRet.f32 %530, 0
  %532 = fsub fast float %529, %531
  %533 = fmul fast float %532, %526
  %534 = fadd fast float %533, %531
  %535 = fmul fast float %354, 2.000000e+00
  %536 = fdiv fast float %527, %535
  %537 = call float @dx.op.unary.f32(i32 7, float %536)  ; Saturate(value)
  %538 = fmul fast float %537, %354
  %539 = fmul fast float %538, %534
  %540 = fcmp fast olt float %525, %539
  br i1 %540, label %541, label %545

; <label>:541                                     ; preds = %524
  %542 = fadd fast float %525, %402
  %543 = fsub fast float %542, %539
  %544 = call float @dx.op.binary.f32(i32 35, float %543, float 0.000000e+00)  ; FMax(a,b)
  br label %561

; <label>:545                                     ; preds = %524
  %546 = extractvalue %dx.types.CBufRet.f32 %530, 1
  %547 = fsub fast float 1.000000e+00, %546
  %548 = fmul fast float %547, %526
  %549 = fadd fast float %548, %546
  %550 = fmul fast float %549, %354
  %551 = fmul fast float %525, %282
  %552 = call float @dx.op.binary.f32(i32 35, float %551, float %550)  ; FMax(a,b)
  %553 = fadd fast float %552, %402
  %554 = fcmp fast ogt float %553, %393
  %555 = fcmp fast oge float %344, 0.000000e+00
  %556 = or i1 %555, %554
  br i1 %556, label %560, label %557

; <label>:557                                     ; preds = %545
  %558 = add nuw nsw i32 %403, 1
  %559 = icmp ult i32 %558, 256
  br i1 %559, label %400, label %560, !llvm.loop !56

; <label>:560                                     ; preds = %557, %545
  br label %561

; <label>:561                                     ; preds = %560, %541, %343
  %562 = phi float [ %348, %343 ], [ %527, %541 ], [ %527, %560 ]
  %563 = phi float [ %347, %343 ], [ %393, %541 ], [ %393, %560 ]
  %564 = phi i32 [ %345, %343 ], [ %346, %541 ], [ %345, %560 ]
  %565 = phi float [ %344, %343 ], [ %544, %541 ], [ %344, %560 ]
  %566 = add i32 %346, 1
  %567 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %568 = extractvalue %dx.types.CBufRet.i32 %567, 2
  %569 = icmp ult i32 %566, %568
  %570 = fcmp fast olt float %565, 0.000000e+00
  %571 = and i1 %570, %569
  br i1 %571, label %343, label %572, !llvm.loop !58

; <label>:572                                     ; preds = %561
  br label %573

; <label>:573                                     ; preds = %572, %337
  %574 = phi float [ -1.000000e+00, %337 ], [ %565, %572 ]
  %575 = phi i32 [ 0, %337 ], [ %564, %572 ]
  %576 = fcmp fast ult float %574, 0.000000e+00
  br i1 %576, label %1582, label %577

; <label>:577                                     ; preds = %573
  %578 = fmul fast float %574, %176
  %579 = fmul fast float %574, %177
  %580 = fmul fast float %574, %178
  %581 = fadd fast float %578, %190
  %582 = fadd fast float %579, %191
  %583 = fadd fast float %580, %192
  %584 = fsub fast float -0.000000e+00, %176
  %585 = fsub fast float -0.000000e+00, %177
  %586 = fsub fast float -0.000000e+00, %178
  %587 = add i32 %575, 201
  %588 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %587)  ; CBufferLoadLegacy(handle,regIndex)
  %589 = extractvalue %dx.types.CBufRet.f32 %588, 0
  %590 = extractvalue %dx.types.CBufRet.f32 %588, 1
  %591 = extractvalue %dx.types.CBufRet.f32 %588, 2
  %592 = extractvalue %dx.types.CBufRet.f32 %588, 3
  %593 = fmul fast float %592, %581
  %594 = fmul fast float %592, %582
  %595 = fmul fast float %592, %583
  %596 = fadd fast float %593, %589
  %597 = fadd fast float %594, %590
  %598 = fadd fast float %595, %591
  %599 = call float @dx.op.unary.f32(i32 22, float %596)  ; Frc(value)
  %600 = call float @dx.op.unary.f32(i32 22, float %597)  ; Frc(value)
  %601 = call float @dx.op.unary.f32(i32 22, float %598)  ; Frc(value)
  %602 = call float @dx.op.unary.f32(i32 22, float %599)  ; Frc(value)
  %603 = call float @dx.op.unary.f32(i32 22, float %600)  ; Frc(value)
  %604 = call float @dx.op.unary.f32(i32 22, float %601)  ; Frc(value)
  %605 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %606 = extractvalue %dx.types.CBufRet.f32 %605, 0
  %607 = fmul fast float %606, 5.000000e-01
  %608 = fadd fast float %607, %602
  %609 = call float @dx.op.unary.f32(i32 22, float %608)  ; Frc(value)
  %610 = call float @dx.op.unary.f32(i32 22, float %603)  ; Frc(value)
  %611 = call float @dx.op.unary.f32(i32 22, float %604)  ; Frc(value)
  %612 = call float @dx.op.unary.f32(i32 7, float %609)  ; Saturate(value)
  %613 = call float @dx.op.unary.f32(i32 7, float %610)  ; Saturate(value)
  %614 = call float @dx.op.unary.f32(i32 7, float %611)  ; Saturate(value)
  %615 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %616 = extractvalue %dx.types.CBufRet.i32 %615, 2
  %617 = sitofp i32 %616 to float
  %618 = fmul fast float %617, %612
  %619 = fmul fast float %617, %613
  %620 = fmul fast float %617, %614
  %621 = mul i32 %616, %575
  %622 = sitofp i32 %621 to float
  %623 = fadd fast float %622, %620
  %624 = fptosi float %618 to i32
  %625 = fptosi float %619 to i32
  %626 = fptosi float %623 to i32
  %627 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %628 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %627, i32 0, i32 %624, i32 %625, i32 %626, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %629 = extractvalue %dx.types.ResRet.i32 %628, 0
  %630 = icmp eq i32 %629, -1
  br i1 %630, label %667, label %631

; <label>:631                                     ; preds = %577
  %632 = fmul fast float %617, %609
  %633 = fmul fast float %617, %610
  %634 = fmul fast float %617, %611
  %635 = call float @dx.op.unary.f32(i32 22, float %632)  ; Frc(value)
  %636 = call float @dx.op.unary.f32(i32 22, float %633)  ; Frc(value)
  %637 = call float @dx.op.unary.f32(i32 22, float %634)  ; Frc(value)
  %638 = shl i32 %629, 3
  %639 = and i32 %638, 1016
  %640 = lshr i32 %629, 4
  %641 = and i32 %640, 1016
  %642 = lshr i32 %629, 11
  %643 = and i32 %642, 8184
  %644 = uitofp i32 %639 to float
  %645 = uitofp i32 %641 to float
  %646 = uitofp i32 %643 to float
  %647 = fmul fast float %635, 7.000000e+00
  %648 = fmul fast float %636, 7.000000e+00
  %649 = fmul fast float %637, 7.000000e+00
  %650 = fadd fast float %644, 5.000000e-01
  %651 = fadd fast float %650, %647
  %652 = fadd fast float %645, 5.000000e-01
  %653 = fadd fast float %652, %648
  %654 = fadd fast float %646, 5.000000e-01
  %655 = fadd fast float %654, %649
  %656 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %657 = extractvalue %dx.types.CBufRet.f32 %656, 0
  %658 = extractvalue %dx.types.CBufRet.f32 %656, 1
  %659 = extractvalue %dx.types.CBufRet.f32 %656, 2
  %660 = fmul fast float %657, %651
  %661 = fmul fast float %653, %658
  %662 = fmul fast float %655, %659
  %663 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %664 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %665 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %663, %dx.types.Handle %664, float %660, float %661, float %662, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %666 = extractvalue %dx.types.ResRet.f32 %665, 0
  br label %667

; <label>:667                                     ; preds = %631, %577
  %668 = phi float [ %666, %631 ], [ 1.000000e+00, %577 ]
  %669 = fsub fast float %602, %607
  %670 = call float @dx.op.unary.f32(i32 22, float %669)  ; Frc(value)
  %671 = call float @dx.op.unary.f32(i32 7, float %670)  ; Saturate(value)
  %672 = fmul fast float %617, %671
  %673 = fptosi float %672 to i32
  %674 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %627, i32 0, i32 %673, i32 %625, i32 %626, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %675 = extractvalue %dx.types.ResRet.i32 %674, 0
  %676 = icmp eq i32 %675, -1
  br i1 %676, label %713, label %677

; <label>:677                                     ; preds = %667
  %678 = fmul fast float %617, %670
  %679 = fmul fast float %617, %610
  %680 = fmul fast float %617, %611
  %681 = call float @dx.op.unary.f32(i32 22, float %678)  ; Frc(value)
  %682 = call float @dx.op.unary.f32(i32 22, float %679)  ; Frc(value)
  %683 = call float @dx.op.unary.f32(i32 22, float %680)  ; Frc(value)
  %684 = shl i32 %675, 3
  %685 = and i32 %684, 1016
  %686 = lshr i32 %675, 4
  %687 = and i32 %686, 1016
  %688 = lshr i32 %675, 11
  %689 = and i32 %688, 8184
  %690 = uitofp i32 %685 to float
  %691 = uitofp i32 %687 to float
  %692 = uitofp i32 %689 to float
  %693 = fmul fast float %681, 7.000000e+00
  %694 = fmul fast float %682, 7.000000e+00
  %695 = fmul fast float %683, 7.000000e+00
  %696 = fadd fast float %690, 5.000000e-01
  %697 = fadd fast float %696, %693
  %698 = fadd fast float %691, 5.000000e-01
  %699 = fadd fast float %698, %694
  %700 = fadd fast float %692, 5.000000e-01
  %701 = fadd fast float %700, %695
  %702 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %703 = extractvalue %dx.types.CBufRet.f32 %702, 0
  %704 = extractvalue %dx.types.CBufRet.f32 %702, 1
  %705 = extractvalue %dx.types.CBufRet.f32 %702, 2
  %706 = fmul fast float %703, %697
  %707 = fmul fast float %699, %704
  %708 = fmul fast float %701, %705
  %709 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %710 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %711 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %709, %dx.types.Handle %710, float %706, float %707, float %708, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %712 = extractvalue %dx.types.ResRet.f32 %711, 0
  br label %713

; <label>:713                                     ; preds = %677, %667
  %714 = phi float [ %712, %677 ], [ 1.000000e+00, %667 ]
  %715 = fadd fast float %607, %603
  %716 = call float @dx.op.unary.f32(i32 22, float %602)  ; Frc(value)
  %717 = call float @dx.op.unary.f32(i32 22, float %715)  ; Frc(value)
  %718 = call float @dx.op.unary.f32(i32 7, float %716)  ; Saturate(value)
  %719 = call float @dx.op.unary.f32(i32 7, float %717)  ; Saturate(value)
  %720 = fmul fast float %617, %718
  %721 = fmul fast float %617, %719
  %722 = fptosi float %720 to i32
  %723 = fptosi float %721 to i32
  %724 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %627, i32 0, i32 %722, i32 %723, i32 %626, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %725 = extractvalue %dx.types.ResRet.i32 %724, 0
  %726 = icmp eq i32 %725, -1
  br i1 %726, label %763, label %727

; <label>:727                                     ; preds = %713
  %728 = fmul fast float %617, %716
  %729 = fmul fast float %617, %717
  %730 = fmul fast float %617, %611
  %731 = call float @dx.op.unary.f32(i32 22, float %728)  ; Frc(value)
  %732 = call float @dx.op.unary.f32(i32 22, float %729)  ; Frc(value)
  %733 = call float @dx.op.unary.f32(i32 22, float %730)  ; Frc(value)
  %734 = shl i32 %725, 3
  %735 = and i32 %734, 1016
  %736 = lshr i32 %725, 4
  %737 = and i32 %736, 1016
  %738 = lshr i32 %725, 11
  %739 = and i32 %738, 8184
  %740 = uitofp i32 %735 to float
  %741 = uitofp i32 %737 to float
  %742 = uitofp i32 %739 to float
  %743 = fmul fast float %731, 7.000000e+00
  %744 = fmul fast float %732, 7.000000e+00
  %745 = fmul fast float %733, 7.000000e+00
  %746 = fadd fast float %740, 5.000000e-01
  %747 = fadd fast float %746, %743
  %748 = fadd fast float %741, 5.000000e-01
  %749 = fadd fast float %748, %744
  %750 = fadd fast float %742, 5.000000e-01
  %751 = fadd fast float %750, %745
  %752 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %753 = extractvalue %dx.types.CBufRet.f32 %752, 0
  %754 = extractvalue %dx.types.CBufRet.f32 %752, 1
  %755 = extractvalue %dx.types.CBufRet.f32 %752, 2
  %756 = fmul fast float %753, %747
  %757 = fmul fast float %749, %754
  %758 = fmul fast float %751, %755
  %759 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %760 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %761 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %759, %dx.types.Handle %760, float %756, float %757, float %758, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %762 = extractvalue %dx.types.ResRet.f32 %761, 0
  br label %763

; <label>:763                                     ; preds = %727, %713
  %764 = phi float [ %762, %727 ], [ 1.000000e+00, %713 ]
  %765 = fsub fast float %603, %607
  %766 = call float @dx.op.unary.f32(i32 22, float %765)  ; Frc(value)
  %767 = call float @dx.op.unary.f32(i32 7, float %766)  ; Saturate(value)
  %768 = fmul fast float %617, %767
  %769 = fptosi float %768 to i32
  %770 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %627, i32 0, i32 %722, i32 %769, i32 %626, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %771 = extractvalue %dx.types.ResRet.i32 %770, 0
  %772 = icmp eq i32 %771, -1
  br i1 %772, label %809, label %773

; <label>:773                                     ; preds = %763
  %774 = fmul fast float %617, %716
  %775 = fmul fast float %617, %766
  %776 = fmul fast float %617, %611
  %777 = call float @dx.op.unary.f32(i32 22, float %774)  ; Frc(value)
  %778 = call float @dx.op.unary.f32(i32 22, float %775)  ; Frc(value)
  %779 = call float @dx.op.unary.f32(i32 22, float %776)  ; Frc(value)
  %780 = shl i32 %771, 3
  %781 = and i32 %780, 1016
  %782 = lshr i32 %771, 4
  %783 = and i32 %782, 1016
  %784 = lshr i32 %771, 11
  %785 = and i32 %784, 8184
  %786 = uitofp i32 %781 to float
  %787 = uitofp i32 %783 to float
  %788 = uitofp i32 %785 to float
  %789 = fmul fast float %777, 7.000000e+00
  %790 = fmul fast float %778, 7.000000e+00
  %791 = fmul fast float %779, 7.000000e+00
  %792 = fadd fast float %786, 5.000000e-01
  %793 = fadd fast float %792, %789
  %794 = fadd fast float %787, 5.000000e-01
  %795 = fadd fast float %794, %790
  %796 = fadd fast float %788, 5.000000e-01
  %797 = fadd fast float %796, %791
  %798 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %799 = extractvalue %dx.types.CBufRet.f32 %798, 0
  %800 = extractvalue %dx.types.CBufRet.f32 %798, 1
  %801 = extractvalue %dx.types.CBufRet.f32 %798, 2
  %802 = fmul fast float %799, %793
  %803 = fmul fast float %795, %800
  %804 = fmul fast float %797, %801
  %805 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %806 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %807 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %805, %dx.types.Handle %806, float %802, float %803, float %804, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %808 = extractvalue %dx.types.ResRet.f32 %807, 0
  br label %809

; <label>:809                                     ; preds = %773, %763
  %810 = phi float [ %808, %773 ], [ 1.000000e+00, %763 ]
  %811 = fadd fast float %607, %604
  %812 = call float @dx.op.unary.f32(i32 22, float %811)  ; Frc(value)
  %813 = call float @dx.op.unary.f32(i32 7, float %812)  ; Saturate(value)
  %814 = fmul fast float %617, %813
  %815 = fadd fast float %622, %814
  %816 = fptosi float %815 to i32
  %817 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %627, i32 0, i32 %722, i32 %625, i32 %816, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %818 = extractvalue %dx.types.ResRet.i32 %817, 0
  %819 = icmp eq i32 %818, -1
  br i1 %819, label %856, label %820

; <label>:820                                     ; preds = %809
  %821 = fmul fast float %617, %716
  %822 = fmul fast float %617, %610
  %823 = fmul fast float %617, %812
  %824 = call float @dx.op.unary.f32(i32 22, float %821)  ; Frc(value)
  %825 = call float @dx.op.unary.f32(i32 22, float %822)  ; Frc(value)
  %826 = call float @dx.op.unary.f32(i32 22, float %823)  ; Frc(value)
  %827 = shl i32 %818, 3
  %828 = and i32 %827, 1016
  %829 = lshr i32 %818, 4
  %830 = and i32 %829, 1016
  %831 = lshr i32 %818, 11
  %832 = and i32 %831, 8184
  %833 = uitofp i32 %828 to float
  %834 = uitofp i32 %830 to float
  %835 = uitofp i32 %832 to float
  %836 = fmul fast float %824, 7.000000e+00
  %837 = fmul fast float %825, 7.000000e+00
  %838 = fmul fast float %826, 7.000000e+00
  %839 = fadd fast float %833, 5.000000e-01
  %840 = fadd fast float %839, %836
  %841 = fadd fast float %834, 5.000000e-01
  %842 = fadd fast float %841, %837
  %843 = fadd fast float %835, 5.000000e-01
  %844 = fadd fast float %843, %838
  %845 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %846 = extractvalue %dx.types.CBufRet.f32 %845, 0
  %847 = extractvalue %dx.types.CBufRet.f32 %845, 1
  %848 = extractvalue %dx.types.CBufRet.f32 %845, 2
  %849 = fmul fast float %846, %840
  %850 = fmul fast float %842, %847
  %851 = fmul fast float %844, %848
  %852 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %853 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %854 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %852, %dx.types.Handle %853, float %849, float %850, float %851, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %855 = extractvalue %dx.types.ResRet.f32 %854, 0
  br label %856

; <label>:856                                     ; preds = %820, %809
  %857 = phi float [ %855, %820 ], [ 1.000000e+00, %809 ]
  %858 = fsub fast float %604, %607
  %859 = call float @dx.op.unary.f32(i32 22, float %858)  ; Frc(value)
  %860 = call float @dx.op.unary.f32(i32 7, float %859)  ; Saturate(value)
  %861 = fmul fast float %617, %860
  %862 = fadd fast float %622, %861
  %863 = fptosi float %862 to i32
  %864 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %627, i32 0, i32 %722, i32 %625, i32 %863, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %865 = extractvalue %dx.types.ResRet.i32 %864, 0
  %866 = icmp eq i32 %865, -1
  br i1 %866, label %903, label %867

; <label>:867                                     ; preds = %856
  %868 = fmul fast float %617, %716
  %869 = fmul fast float %617, %610
  %870 = fmul fast float %617, %859
  %871 = call float @dx.op.unary.f32(i32 22, float %868)  ; Frc(value)
  %872 = call float @dx.op.unary.f32(i32 22, float %869)  ; Frc(value)
  %873 = call float @dx.op.unary.f32(i32 22, float %870)  ; Frc(value)
  %874 = shl i32 %865, 3
  %875 = and i32 %874, 1016
  %876 = lshr i32 %865, 4
  %877 = and i32 %876, 1016
  %878 = lshr i32 %865, 11
  %879 = and i32 %878, 8184
  %880 = uitofp i32 %875 to float
  %881 = uitofp i32 %877 to float
  %882 = uitofp i32 %879 to float
  %883 = fmul fast float %871, 7.000000e+00
  %884 = fmul fast float %872, 7.000000e+00
  %885 = fmul fast float %873, 7.000000e+00
  %886 = fadd fast float %880, 5.000000e-01
  %887 = fadd fast float %886, %883
  %888 = fadd fast float %881, 5.000000e-01
  %889 = fadd fast float %888, %884
  %890 = fadd fast float %882, 5.000000e-01
  %891 = fadd fast float %890, %885
  %892 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %893 = extractvalue %dx.types.CBufRet.f32 %892, 0
  %894 = extractvalue %dx.types.CBufRet.f32 %892, 1
  %895 = extractvalue %dx.types.CBufRet.f32 %892, 2
  %896 = fmul fast float %893, %887
  %897 = fmul fast float %889, %894
  %898 = fmul fast float %891, %895
  %899 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %900 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %901 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %899, %dx.types.Handle %900, float %896, float %897, float %898, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %902 = extractvalue %dx.types.ResRet.f32 %901, 0
  br label %903

; <label>:903                                     ; preds = %867, %856
  %904 = phi float [ %902, %867 ], [ 1.000000e+00, %856 ]
  %905 = fsub fast float %668, %714
  %906 = fsub fast float %764, %810
  %907 = fsub fast float %857, %904
  %908 = fmul fast float %905, %905
  %909 = fmul fast float %906, %906
  %910 = fadd fast float %909, %908
  %911 = fmul fast float %907, %907
  %912 = fadd fast float %910, %911
  %913 = call float @dx.op.unary.f32(i32 24, float %912)  ; Sqrt(value)
  %914 = fcmp fast ogt float %913, 0x3F50624DE0000000
  br i1 %914, label %915, label %919

; <label>:915                                     ; preds = %903
  %916 = fdiv fast float %905, %913
  %917 = fdiv fast float %906, %913
  %918 = fdiv fast float %907, %913
  br label %919

; <label>:919                                     ; preds = %915, %903
  %920 = phi float [ %916, %915 ], [ %584, %903 ]
  %921 = phi float [ %917, %915 ], [ %585, %903 ]
  %922 = phi float [ %918, %915 ], [ %586, %903 ]
  %923 = add i32 %575, 195
  %924 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %923)  ; CBufferLoadLegacy(handle,regIndex)
  %925 = extractvalue %dx.types.CBufRet.f32 %924, 3
  %926 = fmul fast float %606, %925
  %927 = fmul fast float %926, %920
  %928 = fmul fast float %926, %921
  %929 = fmul fast float %926, %922
  %930 = fadd fast float %927, %581
  %931 = fadd fast float %928, %582
  %932 = fadd fast float %929, %583
  %933 = fmul fast float %930, %592
  %934 = fmul fast float %931, %592
  %935 = fmul fast float %932, %592
  %936 = fadd fast float %933, %589
  %937 = fadd fast float %934, %590
  %938 = fadd fast float %935, %591
  %939 = call float @dx.op.unary.f32(i32 22, float %936)  ; Frc(value)
  %940 = call float @dx.op.unary.f32(i32 22, float %937)  ; Frc(value)
  %941 = call float @dx.op.unary.f32(i32 22, float %938)  ; Frc(value)
  %942 = call float @dx.op.unary.f32(i32 22, float %939)  ; Frc(value)
  %943 = call float @dx.op.unary.f32(i32 22, float %940)  ; Frc(value)
  %944 = call float @dx.op.unary.f32(i32 22, float %941)  ; Frc(value)
  %945 = call float @dx.op.unary.f32(i32 7, float %942)  ; Saturate(value)
  %946 = call float @dx.op.unary.f32(i32 7, float %943)  ; Saturate(value)
  %947 = call float @dx.op.unary.f32(i32 7, float %944)  ; Saturate(value)
  %948 = fmul fast float %617, %945
  %949 = fmul fast float %617, %946
  %950 = fmul fast float %617, %947
  %951 = fadd fast float %622, %950
  %952 = fptosi float %948 to i32
  %953 = fptosi float %949 to i32
  %954 = fptosi float %951 to i32
  %955 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %627, i32 0, i32 %952, i32 %953, i32 %954, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %956 = extractvalue %dx.types.ResRet.i32 %955, 0
  %957 = icmp eq i32 %956, -1
  br i1 %957, label %1582, label %958

; <label>:958                                     ; preds = %919
  %959 = call float @dx.op.unary.f32(i32 22, float %948)  ; Frc(value)
  %960 = call float @dx.op.unary.f32(i32 22, float %949)  ; Frc(value)
  %961 = call float @dx.op.unary.f32(i32 22, float %950)  ; Frc(value)
  %962 = call float @dx.op.unary.f32(i32 22, float %959)  ; Frc(value)
  %963 = call float @dx.op.unary.f32(i32 22, float %960)  ; Frc(value)
  %964 = call float @dx.op.unary.f32(i32 22, float %961)  ; Frc(value)
  %965 = fmul fast float %962, 4.000000e+00
  %966 = fmul fast float %963, 4.000000e+00
  %967 = fmul fast float %964, 4.000000e+00
  %968 = fptoui float %965 to i32
  %969 = fptoui float %966 to i32
  %970 = fptoui float %967 to i32
  %971 = and i32 %968, 1
  %972 = shl i32 %969, 1
  %973 = and i32 %972, 2
  %974 = shl i32 %970, 2
  %975 = and i32 %974, 4
  %976 = shl i32 %968, 2
  %977 = and i32 %976, 8
  %978 = shl i32 %969, 3
  %979 = and i32 %978, 16
  %980 = shl i32 %970, 4
  %981 = and i32 %980, 32
  %982 = shl i32 %956, 6
  %983 = and i32 %982, 1073741760
  %984 = or i32 %971, %983
  %985 = or i32 %984, %977
  %986 = or i32 %985, %973
  %987 = or i32 %986, %979
  %988 = or i32 %987, %975
  %989 = or i32 %988, %981
  %990 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %991 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %990, i32 %989, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %992 = extractvalue %dx.types.ResRet.i32 %991, 0
  %993 = extractvalue %dx.types.ResRet.i32 %991, 1
  %994 = extractvalue %dx.types.ResRet.i32 %991, 2
  %995 = extractvalue %dx.types.ResRet.i32 %991, 3
  %996 = getelementptr inbounds [4 x i32], [4 x i32]* %46, i32 0, i32 0
  store i32 %992, i32* %996, align 4
  %997 = getelementptr inbounds [4 x i32], [4 x i32]* %46, i32 0, i32 1
  store i32 %993, i32* %997, align 4
  %998 = getelementptr inbounds [4 x i32], [4 x i32]* %46, i32 0, i32 2
  store i32 %994, i32* %998, align 4
  %999 = getelementptr inbounds [4 x i32], [4 x i32]* %46, i32 0, i32 3
  store i32 %995, i32* %999, align 4
  %1000 = icmp eq i32 %992, -1
  br i1 %1000, label %1543, label %1001

; <label>:1001                                    ; preds = %958
  br label %1002

; <label>:1002                                    ; preds = %1531, %1001
  %1003 = phi i32 [ %1529, %1531 ], [ 0, %1001 ]
  %1004 = phi float [ %1528, %1531 ], [ 0.000000e+00, %1001 ]
  %1005 = phi float [ %1527, %1531 ], [ 0.000000e+00, %1001 ]
  %1006 = phi float [ %1526, %1531 ], [ 0.000000e+00, %1001 ]
  %1007 = phi float [ %1525, %1531 ], [ 0.000000e+00, %1001 ]
  %1008 = phi float [ %1524, %1531 ], [ 0.000000e+00, %1001 ]
  %1009 = phi i32 [ %1523, %1531 ], [ 0, %1001 ]
  %1010 = phi i32 [ %1522, %1531 ], [ 0, %1001 ]
  %1011 = phi i32 [ %1521, %1531 ], [ 0, %1001 ]
  %1012 = phi i32 [ %1533, %1531 ], [ %992, %1001 ]
  %1013 = shl i32 %1012, 2
  %1014 = and i32 %1013, 67108860
  %1015 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1016 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1015, i32 %1014, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1017 = extractvalue %dx.types.ResRet.i32 %1016, 0
  %1018 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1019 = extractvalue %dx.types.CBufRet.i32 %1018, 1
  %1020 = icmp ult i32 %1017, %1019
  br i1 %1020, label %1021, label %1520

; <label>:1021                                    ; preds = %1002
  %1022 = fmul fast float %926, 3.000000e+00
  %1023 = fmul fast float %574, %196
  %1024 = mul i32 %1017, 6
  %1025 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1026 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1025, i32 %1024, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1027 = extractvalue %dx.types.ResRet.f32 %1026, 0
  %1028 = extractvalue %dx.types.ResRet.f32 %1026, 1
  %1029 = extractvalue %dx.types.ResRet.f32 %1026, 2
  %1030 = or i32 %1024, 1
  %1031 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1025, i32 %1030, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1032 = extractvalue %dx.types.ResRet.f32 %1031, 0
  %1033 = extractvalue %dx.types.ResRet.f32 %1031, 1
  %1034 = extractvalue %dx.types.ResRet.f32 %1031, 2
  %1035 = extractvalue %dx.types.ResRet.f32 %1031, 3
  %1036 = add i32 %1024, 2
  %1037 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1025, i32 %1036, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1038 = extractvalue %dx.types.ResRet.f32 %1037, 0
  %1039 = extractvalue %dx.types.ResRet.f32 %1037, 1
  %1040 = extractvalue %dx.types.ResRet.f32 %1037, 2
  %1041 = extractvalue %dx.types.ResRet.f32 %1037, 3
  %1042 = add i32 %1024, 3
  %1043 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1025, i32 %1042, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1044 = extractvalue %dx.types.ResRet.f32 %1043, 0
  %1045 = extractvalue %dx.types.ResRet.f32 %1043, 1
  %1046 = extractvalue %dx.types.ResRet.f32 %1043, 2
  %1047 = extractvalue %dx.types.ResRet.f32 %1043, 3
  %1048 = add i32 %1024, 4
  %1049 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1025, i32 %1048, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1050 = extractvalue %dx.types.ResRet.f32 %1049, 0
  %1051 = extractvalue %dx.types.ResRet.f32 %1049, 1
  %1052 = extractvalue %dx.types.ResRet.f32 %1049, 2
  %1053 = extractvalue %dx.types.ResRet.f32 %1049, 3
  %1054 = bitcast float %1050 to i32
  %1055 = bitcast float %1051 to i32
  %1056 = add i32 %1024, 5
  %1057 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1025, i32 %1056, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1058 = extractvalue %dx.types.ResRet.f32 %1057, 0
  %1059 = extractvalue %dx.types.ResRet.f32 %1057, 1
  %1060 = extractvalue %dx.types.ResRet.f32 %1057, 2
  %1061 = extractvalue %dx.types.ResRet.f32 %1057, 3
  %1062 = and i32 %1055, 65536
  %1063 = icmp ne i32 %1062, 0
  %1064 = and i32 %1055, 131072
  %1065 = icmp ne i32 %1064, 0
  %1066 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 0
  %1067 = bitcast i32* %1066 to float*
  store float %1052, float* %1067, align 4, !tbaa !59, !alias.scope !63, !noalias !66
  %1068 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 1
  %1069 = bitcast i32* %1068 to float*
  store float %1053, float* %1069, align 4, !tbaa !59, !alias.scope !63, !noalias !66
  %1070 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 2
  %1071 = bitcast i32* %1070 to float*
  store float %1058, float* %1071, align 4, !tbaa !59, !alias.scope !63, !noalias !66
  %1072 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 3
  %1073 = bitcast i32* %1072 to float*
  store float %1059, float* %1073, align 4, !tbaa !59, !alias.scope !63, !noalias !66
  %1074 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 4
  %1075 = bitcast i32* %1074 to float*
  store float %1060, float* %1075, align 4, !tbaa !59, !alias.scope !63, !noalias !66
  %1076 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 5
  %1077 = bitcast i32* %1076 to float*
  store float %1061, float* %1077, align 4, !tbaa !59, !alias.scope !63, !noalias !66
  %1078 = fadd fast float %1022, 5.000000e+01
  %1079 = select i1 %1065, float %1078, float %1022
  %1080 = fmul fast float %1027, -2.097152e+06
  %1081 = fadd fast float %574, %186
  %1082 = fmul fast float %1081, %176
  %1083 = fadd fast float %137, %1080
  %1084 = fsub fast float %1083, %1035
  %1085 = fadd fast float %1084, %1082
  %1086 = fmul fast float %1028, -2.097152e+06
  %1087 = fmul fast float %1081, %177
  %1088 = fadd fast float %141, %1086
  %1089 = fsub fast float %1088, %1041
  %1090 = fadd fast float %1089, %1087
  %1091 = fmul fast float %1029, -2.097152e+06
  %1092 = fmul fast float %1081, %178
  %1093 = fadd fast float %145, %1091
  %1094 = fsub fast float %1093, %1047
  %1095 = fadd fast float %1094, %1092
  %1096 = fmul fast float %1085, %1032
  %1097 = call float @dx.op.tertiary.f32(i32 46, float %1090, float %1038, float %1096)  ; FMad(a,b,c)
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1095, float %1044, float %1097)  ; FMad(a,b,c)
  %1099 = fmul fast float %1085, %1033
  %1100 = call float @dx.op.tertiary.f32(i32 46, float %1090, float %1039, float %1099)  ; FMad(a,b,c)
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %1095, float %1045, float %1100)  ; FMad(a,b,c)
  %1102 = fmul fast float %1085, %1034
  %1103 = call float @dx.op.tertiary.f32(i32 46, float %1090, float %1040, float %1102)  ; FMad(a,b,c)
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %1095, float %1046, float %1103)  ; FMad(a,b,c)
  %1105 = fmul fast float %1032, %920
  %1106 = call float @dx.op.tertiary.f32(i32 46, float %921, float %1038, float %1105)  ; FMad(a,b,c)
  %1107 = call float @dx.op.tertiary.f32(i32 46, float %922, float %1044, float %1106)  ; FMad(a,b,c)
  %1108 = fmul fast float %1033, %920
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %921, float %1039, float %1108)  ; FMad(a,b,c)
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %922, float %1045, float %1109)  ; FMad(a,b,c)
  %1111 = fmul fast float %1034, %920
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %921, float %1040, float %1111)  ; FMad(a,b,c)
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %922, float %1046, float %1112)  ; FMad(a,b,c)
  %1114 = fmul fast float %1107, %1107
  %1115 = fmul fast float %1110, %1110
  %1116 = fmul fast float %1113, %1113
  %1117 = fcmp fast ogt float %1114, 0.000000e+00
  br i1 %1117, label %1118, label %1123

; <label>:1118                                    ; preds = %1021
  %1119 = fcmp uge float %1107, 0.000000e+00
  %1120 = zext i1 %1119 to i32
  %1121 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 %1120
  %1122 = load i32, i32* %1121, align 4, !tbaa !59, !noalias !66
  br label %1123

; <label>:1123                                    ; preds = %1118, %1021
  %1124 = phi i32 [ %1122, %1118 ], [ 0, %1021 ]
  %1125 = fcmp fast ogt float %1115, 0.000000e+00
  br i1 %1125, label %1126, label %1132

; <label>:1126                                    ; preds = %1123
  %1127 = fcmp fast olt float %1110, 0.000000e+00
  %1128 = select i1 %1127, i32 2, i32 3
  %1129 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 %1128
  %1130 = load i32, i32* %1129, align 4, !tbaa !59, !noalias !66
  %1131 = or i32 %1130, %1124
  br label %1132

; <label>:1132                                    ; preds = %1126, %1123
  %1133 = phi i32 [ %1131, %1126 ], [ %1124, %1123 ]
  %1134 = fcmp fast ogt float %1116, 0.000000e+00
  br i1 %1134, label %1135, label %1141

; <label>:1135                                    ; preds = %1132
  %1136 = fcmp fast olt float %1113, 0.000000e+00
  %1137 = select i1 %1136, i32 4, i32 5
  %1138 = getelementptr inbounds [6 x i32], [6 x i32]* %45, i32 0, i32 %1137
  %1139 = load i32, i32* %1138, align 4, !tbaa !59, !noalias !66
  %1140 = or i32 %1139, %1133
  br label %1141

; <label>:1141                                    ; preds = %1135, %1132
  %1142 = phi i32 [ %1140, %1135 ], [ %1133, %1132 ]
  %1143 = icmp eq i32 %1142, 0
  br i1 %1143, label %1188, label %1144

; <label>:1144                                    ; preds = %1141
  br label %1145

; <label>:1145                                    ; preds = %1145, %1144
  %1146 = phi i32 [ %1151, %1145 ], [ %1142, %1144 ]
  %1147 = phi i32 [ %1185, %1145 ], [ 0, %1144 ]
  %1148 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1146)  ; FirstbitLo(value)
  %1149 = and i32 %1148, 31
  %1150 = shl i32 1, %1149
  %1151 = xor i32 %1150, %1146
  %1152 = add i32 %1148, %1054
  %1153 = mul i32 %1152, 10
  %1154 = add i32 %1153, 6
  %1155 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1156 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1155, i32 %1154, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1157 = extractvalue %dx.types.ResRet.f32 %1156, 3
  %1158 = add i32 %1153, 7
  %1159 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1155, i32 %1158, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1160 = extractvalue %dx.types.ResRet.f32 %1159, 3
  %1161 = add i32 %1153, 8
  %1162 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1155, i32 %1161, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1163 = extractvalue %dx.types.ResRet.f32 %1162, 3
  %1164 = add i32 %1153, 9
  %1165 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1155, i32 %1164, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1166 = extractvalue %dx.types.ResRet.f32 %1165, 0
  %1167 = extractvalue %dx.types.ResRet.f32 %1165, 1
  %1168 = extractvalue %dx.types.ResRet.f32 %1165, 2
  %1169 = fsub fast float %1098, %1157
  %1170 = fsub fast float %1101, %1160
  %1171 = fsub fast float %1104, %1163
  %1172 = call float @dx.op.unary.f32(i32 6, float %1169)  ; FAbs(value)
  %1173 = call float @dx.op.unary.f32(i32 6, float %1170)  ; FAbs(value)
  %1174 = call float @dx.op.unary.f32(i32 6, float %1171)  ; FAbs(value)
  %1175 = fmul fast float %1079, 5.000000e-01
  %1176 = fadd fast float %1166, %1175
  %1177 = fadd fast float %1167, %1175
  %1178 = fadd fast float %1168, %1175
  %1179 = fcmp fast ole float %1172, %1176
  %1180 = fcmp fast ole float %1173, %1177
  %1181 = fcmp fast ole float %1174, %1178
  %1182 = and i1 %1179, %1180
  %1183 = and i1 %1182, %1181
  %1184 = select i1 %1183, i32 %1150, i32 0
  %1185 = or i32 %1184, %1147
  %1186 = icmp eq i32 %1146, %1150
  br i1 %1186, label %1187, label %1145

; <label>:1187                                    ; preds = %1145
  br label %1188

; <label>:1188                                    ; preds = %1187, %1141
  %1189 = phi i32 [ 0, %1141 ], [ %1185, %1187 ]
  %1190 = select i1 %1063, i32 1, i32 %1189
  %1191 = icmp eq i32 %1190, 0
  br i1 %1191, label %1510, label %1192

; <label>:1192                                    ; preds = %1188
  br label %1193

; <label>:1193                                    ; preds = %1216, %1192
  %1194 = phi i32 [ %1217, %1216 ], [ %1011, %1192 ]
  %1195 = phi i32 [ %1218, %1216 ], [ %1010, %1192 ]
  %1196 = phi i32 [ %1219, %1216 ], [ %1009, %1192 ]
  %1197 = phi float [ %1220, %1216 ], [ %1008, %1192 ]
  %1198 = phi float [ %1221, %1216 ], [ %1007, %1192 ]
  %1199 = phi float [ %1222, %1216 ], [ %1006, %1192 ]
  %1200 = phi float [ %1223, %1216 ], [ %1005, %1192 ]
  %1201 = phi float [ %1224, %1216 ], [ %1004, %1192 ]
  %1202 = phi i32 [ %1206, %1216 ], [ %1190, %1192 ]
  %1203 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1202)  ; FirstbitLo(value)
  %1204 = and i32 %1203, 31
  %1205 = shl i32 1, %1204
  %1206 = xor i32 %1205, %1202
  %1207 = add i32 %1203, %1054
  %1208 = mul i32 %1207, 10
  %1209 = add i32 %1208, 4
  %1210 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1211 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1210, i32 %1209, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1212 = extractvalue %dx.types.ResRet.f32 %1211, 3
  %1213 = bitcast float %1212 to i32
  %1214 = and i32 %1213, 16777216
  %1215 = icmp eq i32 %1214, 0
  br i1 %1215, label %1216, label %1226

; <label>:1216                                    ; preds = %2285, %1508, %1476, %1445, %1283, %1230, %1226, %1193
  %1217 = phi i32 [ %1194, %1193 ], [ %1420, %1508 ], [ %1194, %1476 ], [ %1194, %2285 ], [ %1194, %1445 ], [ %1194, %1283 ], [ %1194, %1230 ], [ %1194, %1226 ]
  %1218 = phi i32 [ %1195, %1193 ], [ %1422, %1508 ], [ %1195, %1476 ], [ %1195, %2285 ], [ %1195, %1445 ], [ %1195, %1283 ], [ %1195, %1230 ], [ %1195, %1226 ]
  %1219 = phi i32 [ %1196, %1193 ], [ %1326, %1508 ], [ %1196, %1476 ], [ %1196, %2285 ], [ %1196, %1445 ], [ %1196, %1283 ], [ %1196, %1230 ], [ %1196, %1226 ]
  %1220 = phi float [ %1197, %1193 ], [ %2292, %1508 ], [ %1197, %1476 ], [ %1197, %2285 ], [ %1197, %1445 ], [ %1197, %1283 ], [ %1197, %1230 ], [ %1197, %1226 ]
  %1221 = phi float [ %1198, %1193 ], [ %1503, %1508 ], [ %1503, %1476 ], [ %1198, %2285 ], [ %1198, %1445 ], [ %1198, %1283 ], [ %1198, %1230 ], [ %1198, %1226 ]
  %1222 = phi float [ %1199, %1193 ], [ %1504, %1508 ], [ %1504, %1476 ], [ %1199, %2285 ], [ %1199, %1445 ], [ %1199, %1283 ], [ %1199, %1230 ], [ %1199, %1226 ]
  %1223 = phi float [ %1200, %1193 ], [ %1505, %1508 ], [ %1505, %1476 ], [ %1200, %2285 ], [ %1200, %1445 ], [ %1200, %1283 ], [ %1200, %1230 ], [ %1200, %1226 ]
  %1224 = phi float [ %1201, %1193 ], [ %1506, %1508 ], [ %1506, %1476 ], [ %1201, %2285 ], [ %1201, %1445 ], [ %1201, %1283 ], [ %1201, %1230 ], [ %1201, %1226 ]
  %1225 = icmp eq i32 %1202, %1205
  br i1 %1225, label %1509, label %1193

; <label>:1226                                    ; preds = %1193
  %1227 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1228 = extractvalue %dx.types.CBufRet.i32 %1227, 0
  %1229 = icmp ult i32 %1207, %1228
  br i1 %1229, label %1230, label %1216

; <label>:1230                                    ; preds = %1226
  %1231 = extractvalue %dx.types.ResRet.f32 %1211, 0
  %1232 = extractvalue %dx.types.ResRet.f32 %1211, 1
  %1233 = extractvalue %dx.types.ResRet.f32 %1211, 2
  %1234 = add i32 %1208, 5
  %1235 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1210, i32 %1234, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1236 = add i32 %1208, 6
  %1237 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1210, i32 %1236, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1238 = add i32 %1208, 7
  %1239 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1210, i32 %1238, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1240 = add i32 %1208, 8
  %1241 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1210, i32 %1240, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1242 = call float @dx.op.unary.f32(i32 6, float %1231)  ; FAbs(value)
  %1243 = call float @dx.op.unary.f32(i32 6, float %1232)  ; FAbs(value)
  %1244 = call float @dx.op.unary.f32(i32 6, float %1233)  ; FAbs(value)
  %1245 = lshr i32 %1213, 16
  %1246 = and i32 %1245, 15
  %1247 = extractvalue %dx.types.ResRet.f32 %1241, 3
  %1248 = extractvalue %dx.types.ResRet.f32 %1241, 2
  %1249 = extractvalue %dx.types.ResRet.f32 %1241, 1
  %1250 = extractvalue %dx.types.ResRet.f32 %1241, 0
  %1251 = extractvalue %dx.types.ResRet.f32 %1239, 3
  %1252 = extractvalue %dx.types.ResRet.f32 %1239, 2
  %1253 = extractvalue %dx.types.ResRet.f32 %1239, 1
  %1254 = extractvalue %dx.types.ResRet.f32 %1239, 0
  %1255 = extractvalue %dx.types.ResRet.f32 %1237, 3
  %1256 = extractvalue %dx.types.ResRet.f32 %1237, 2
  %1257 = extractvalue %dx.types.ResRet.f32 %1237, 1
  %1258 = extractvalue %dx.types.ResRet.f32 %1237, 0
  %1259 = fsub fast float %1098, %1255
  %1260 = fsub fast float %1101, %1251
  %1261 = fsub fast float %1104, %1247
  %1262 = fmul fast float %1259, %1258
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1254, float %1262)  ; FMad(a,b,c)
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1250, float %1263)  ; FMad(a,b,c)
  %1265 = fmul fast float %1259, %1257
  %1266 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1253, float %1265)  ; FMad(a,b,c)
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1249, float %1266)  ; FMad(a,b,c)
  %1268 = fmul fast float %1259, %1256
  %1269 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1252, float %1268)  ; FMad(a,b,c)
  %1270 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1248, float %1269)  ; FMad(a,b,c)
  %1271 = call float @dx.op.unary.f32(i32 6, float %1264)  ; FAbs(value)
  %1272 = call float @dx.op.unary.f32(i32 6, float %1267)  ; FAbs(value)
  %1273 = call float @dx.op.unary.f32(i32 6, float %1270)  ; FAbs(value)
  %1274 = fmul fast float %1079, 5.000000e-01
  %1275 = fadd fast float %1242, %1274
  %1276 = fadd fast float %1243, %1274
  %1277 = fadd fast float %1244, %1274
  %1278 = fcmp fast ole float %1271, %1275
  %1279 = fcmp fast ole float %1272, %1276
  %1280 = fcmp fast ole float %1273, %1277
  %1281 = and i1 %1278, %1279
  %1282 = and i1 %1281, %1280
  br i1 %1282, label %1283, label %1216

; <label>:1283                                    ; preds = %1230
  %1284 = lshr i32 %1213, 8
  %1285 = and i32 %1284, 255
  %1286 = and i32 %1213, 255
  %1287 = extractvalue %dx.types.ResRet.f32 %1235, 3
  %1288 = extractvalue %dx.types.ResRet.f32 %1235, 2
  %1289 = extractvalue %dx.types.ResRet.f32 %1235, 1
  %1290 = extractvalue %dx.types.ResRet.f32 %1235, 0
  %1291 = fsub fast float -0.000000e+00, %1242
  %1292 = fsub fast float -0.000000e+00, %1243
  %1293 = call float @dx.op.binary.f32(i32 35, float %1264, float %1291)  ; FMax(a,b)
  %1294 = call float @dx.op.binary.f32(i32 35, float %1267, float %1292)  ; FMax(a,b)
  %1295 = call float @dx.op.binary.f32(i32 36, float %1293, float %1242)  ; FMin(a,b)
  %1296 = call float @dx.op.binary.f32(i32 36, float %1294, float %1243)  ; FMin(a,b)
  %1297 = fdiv fast float %1295, %1242
  %1298 = fdiv fast float %1296, %1243
  %1299 = fmul fast float %1297, 5.000000e-01
  %1300 = fmul fast float %1298, 5.000000e-01
  %1301 = fadd fast float %1299, 5.000000e-01
  %1302 = fsub fast float 5.000000e-01, %1300
  %1303 = call float @dx.op.unary.f32(i32 7, float %1301)  ; Saturate(value)
  %1304 = call float @dx.op.unary.f32(i32 7, float %1302)  ; Saturate(value)
  %1305 = call float @dx.op.binary.f32(i32 36, float %1303, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1306 = call float @dx.op.binary.f32(i32 36, float %1304, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1307 = select i1 %199, float %1288, float %1290
  %1308 = bitcast float %1307 to i32
  %1309 = and i32 %1308, 65535
  %1310 = lshr i32 %1308, 16
  %1311 = select i1 %199, float %1287, float %1289
  %1312 = bitcast float %1311 to i32
  %1313 = uitofp i32 %1309 to float
  %1314 = uitofp i32 %1310 to float
  %1315 = fmul fast float %1305, %1313
  %1316 = fmul fast float %1306, %1314
  %1317 = fptoui float %1315 to i32
  %1318 = fptoui float %1316 to i32
  %1319 = mul i32 %1318, %1309
  %1320 = add i32 %1317, %1312
  %1321 = add i32 %1320, %1319
  %1322 = shl i32 %1321, 3
  %1323 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1324 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1323, i32 %1322, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1325 = extractvalue %dx.types.ResRet.i32 %1324, 0
  %1326 = extractvalue %dx.types.ResRet.i32 %1324, 1
  %1327 = shl i32 %1325, 3
  %1328 = and i32 %1327, 32760
  %1329 = lshr i32 %1325, 9
  %1330 = and i32 %1329, 32760
  %1331 = lshr i32 %1325, 24
  %1332 = and i32 %1331, 15
  %1333 = lshr i32 %1325, 28
  %1334 = add nuw nsw i32 %1332, 25
  %1335 = add nuw nsw i32 %1333, 25
  %1336 = and i32 %1334, 31
  %1337 = and i32 %1335, 31
  %1338 = shl i32 1, %1336
  %1339 = shl i32 1, %1337
  %1340 = icmp ugt i32 %1332, 7
  %1341 = icmp slt i32 %1325, 0
  %1342 = select i1 %1340, i32 %1338, i32 1
  %1343 = select i1 %1341, i32 %1339, i32 1
  %1344 = uitofp i32 %1342 to float
  %1345 = uitofp i32 %1343 to float
  %1346 = fmul fast float %1344, %1305
  %1347 = fmul fast float %1345, %1306
  %1348 = fptoui float %1346 to i32
  %1349 = fptoui float %1347 to i32
  %1350 = shl i32 1, %1332
  %1351 = shl i32 1, %1333
  %1352 = call float @dx.op.unary.f32(i32 22, float %1346)  ; Frc(value)
  %1353 = call float @dx.op.unary.f32(i32 22, float %1347)  ; Frc(value)
  %1354 = icmp eq i32 %1348, 0
  %1355 = icmp eq i32 %1349, 0
  %1356 = select i1 %1354, float 0.000000e+00, float 5.000000e-01
  %1357 = select i1 %1355, float 0.000000e+00, float 5.000000e-01
  %1358 = add i32 %1348, 1
  %1359 = add i32 %1349, 1
  %1360 = icmp eq i32 %1358, %1342
  %1361 = icmp eq i32 %1359, %1343
  %1362 = uitofp i32 %1350 to float
  %1363 = select i1 %1340, float 1.280000e+02, float %1362
  %1364 = uitofp i32 %1351 to float
  %1365 = select i1 %1341, float 1.280000e+02, float %1364
  %1366 = fsub fast float %1363, %1356
  %1367 = fsub fast float %1365, %1357
  %1368 = select i1 %1360, float -0.000000e+00, float -5.000000e-01
  %1369 = fadd fast float %1366, %1368
  %1370 = select i1 %1361, float -0.000000e+00, float -5.000000e-01
  %1371 = fadd fast float %1367, %1370
  %1372 = fmul fast float %1369, %1352
  %1373 = fmul fast float %1371, %1353
  %1374 = fadd fast float %1372, %1356
  %1375 = fadd fast float %1373, %1357
  %1376 = fadd fast float %1363, -1.500000e+00
  %1377 = fadd fast float %1365, -1.500000e+00
  %1378 = call float @dx.op.binary.f32(i32 35, float %1374, float 5.000000e-01)  ; FMax(a,b)
  %1379 = call float @dx.op.binary.f32(i32 35, float %1375, float 5.000000e-01)  ; FMax(a,b)
  %1380 = call float @dx.op.binary.f32(i32 36, float %1378, float %1376)  ; FMin(a,b)
  %1381 = call float @dx.op.binary.f32(i32 36, float %1379, float %1377)  ; FMin(a,b)
  %1382 = uitofp i32 %1328 to float
  %1383 = uitofp i32 %1330 to float
  %1384 = fadd fast float %1380, %1382
  %1385 = fadd fast float %1381, %1383
  %1386 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1387 = extractvalue %dx.types.CBufRet.f32 %1386, 0
  %1388 = extractvalue %dx.types.CBufRet.f32 %1386, 1
  %1389 = fmul fast float %1387, %1384
  %1390 = fmul fast float %1388, %1385
  %1391 = call float @dx.op.binary.f32(i32 35, float %1242, float %1243)  ; FMax(a,b)
  %1392 = call float @dx.op.binary.f32(i32 35, float %1023, float 1.000000e+00)  ; FMax(a,b)
  %1393 = fdiv fast float %1391, %1392
  %1394 = call float @dx.op.unary.f32(i32 23, float %1393)  ; Log(value)
  %1395 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1396 = extractvalue %dx.types.CBufRet.f32 %1395, 0
  %1397 = fadd fast float %1396, %1394
  %1398 = call float @dx.op.binary.f32(i32 35, float %1397, float 3.000000e+00)  ; FMax(a,b)
  %1399 = call float @dx.op.binary.f32(i32 36, float %1398, float 1.100000e+01)  ; FMin(a,b)
  %1400 = fptoui float %1399 to i32
  %1401 = sub i32 %1400, %1286
  %1402 = sub i32 %1400, %1285
  %1403 = add i32 %1401, 25
  %1404 = add i32 %1402, 25
  %1405 = and i32 %1403, 31
  %1406 = and i32 %1404, 31
  %1407 = shl i32 1, %1405
  %1408 = shl i32 1, %1406
  %1409 = icmp ugt i32 %1401, 7
  %1410 = icmp ugt i32 %1402, 7
  %1411 = uitofp i32 %1407 to float
  %1412 = select i1 %1409, float %1411, float 1.000000e+00
  %1413 = uitofp i32 %1408 to float
  %1414 = select i1 %1410, float %1413, float 1.000000e+00
  %1415 = fmul fast float %1412, %1305
  %1416 = fmul fast float %1414, %1306
  %1417 = fptoui float %1415 to i32
  %1418 = fptoui float %1416 to i32
  %1419 = shl i32 %1400, 24
  %1420 = or i32 %1419, %1207
  %1421 = shl i32 %1418, 8
  %1422 = add i32 %1421, %1417
  %1423 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1424 = extractvalue %dx.types.CBufRet.f32 %1423, 2
  %1425 = extractvalue %dx.types.CBufRet.f32 %1423, 3
  %1426 = fmul fast float %1424, %1389
  %1427 = fmul fast float %1425, %1390
  %1428 = fadd fast float %1426, 0x3FE0100000000000
  %1429 = fadd fast float %1427, 0x3FE0100000000000
  %1430 = call float @dx.op.unary.f32(i32 22, float %1428)  ; Frc(value)
  %1431 = call float @dx.op.unary.f32(i32 22, float %1429)  ; Frc(value)
  %1432 = fsub fast float 1.000000e+00, %1430
  %1433 = fmul fast float %1432, %1431
  %1434 = fmul fast float %1431, %1430
  %1435 = fsub fast float 1.000000e+00, %1431
  %1436 = fmul fast float %1435, %1430
  %1437 = fmul fast float %1435, %1432
  %1438 = icmp eq i32 %1332, 0
  br i1 %1438, label %1216, label %1439

; <label>:1439                                    ; preds = %1283
  br i1 %1063, label %1445, label %1440

; <label>:1440                                    ; preds = %1439
  %1441 = icmp ult i32 %1246, 2
  br i1 %1441, label %1445, label %1442

; <label>:1442                                    ; preds = %1440
  %1443 = icmp ult i32 %1246, 4
  %1444 = select i1 %1443, float %1115, float %1116
  br label %1445

; <label>:1445                                    ; preds = %1442, %1440, %1439
  %1446 = phi float [ 1.000000e+00, %1439 ], [ %1114, %1440 ], [ %1444, %1442 ]
  %1447 = fcmp fast ogt float %1446, 0.000000e+00
  br i1 %1447, label %1448, label %1216

; <label>:1448                                    ; preds = %1445
  %1449 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1450 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1451 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1449, %dx.types.Handle %1450, float %1389, float %1390, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1452 = extractvalue %dx.types.ResRet.f32 %1451, 0
  %1453 = extractvalue %dx.types.ResRet.f32 %1451, 1
  %1454 = extractvalue %dx.types.ResRet.f32 %1451, 2
  %1455 = extractvalue %dx.types.ResRet.f32 %1451, 3
  %1456 = fdiv fast float %1270, %1244
  %1457 = fmul fast float %1456, 5.000000e-01
  %1458 = fsub fast float 5.000000e-01, %1457
  %1459 = fdiv fast float %1079, %1244
  %1460 = fmul fast float %1459, 2.500000e-01
  %1461 = fcmp uge float %1452, 1.000000e+00
  %1462 = or i1 %1063, %1461
  %1463 = select i1 %1461, float 0.000000e+00, float 1.000000e+00
  br i1 %1462, label %1471, label %1464

; <label>:1464                                    ; preds = %1448
  %1465 = fsub fast float %1458, %1452
  %1466 = call float @dx.op.unary.f32(i32 6, float %1465)  ; FAbs(value)
  %1467 = fsub fast float %1466, %1459
  %1468 = fdiv fast float %1467, %1460
  %1469 = call float @dx.op.unary.f32(i32 7, float %1468)  ; Saturate(value)
  %1470 = fsub fast float 1.000000e+00, %1469
  br label %1471

; <label>:1471                                    ; preds = %1464, %1448
  %1472 = phi float [ %1470, %1464 ], [ %1463, %1448 ]
  %1473 = fcmp uge float %1453, 1.000000e+00
  %1474 = or i1 %1063, %1473
  %1475 = select i1 %1473, float 0.000000e+00, float 1.000000e+00
  br i1 %1474, label %2261, label %2254

; <label>:1476                                    ; preds = %2285
  %1477 = fdiv fast float %2287, %2291
  %1478 = fdiv fast float %2288, %2291
  %1479 = fdiv fast float %2289, %2291
  %1480 = fdiv fast float %2290, %2291
  %1481 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1482 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1481, %dx.types.Handle %1450, float %1389, float %1390, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1483 = extractvalue %dx.types.ResRet.f32 %1482, 0
  %1484 = extractvalue %dx.types.ResRet.f32 %1482, 1
  %1485 = extractvalue %dx.types.ResRet.f32 %1482, 2
  %1486 = extractvalue %dx.types.ResRet.f32 %1482, 3
  %1487 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1481, %dx.types.Handle %1450, float %1389, float %1390, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1488 = extractvalue %dx.types.ResRet.f32 %1487, 0
  %1489 = extractvalue %dx.types.ResRet.f32 %1487, 1
  %1490 = extractvalue %dx.types.ResRet.f32 %1487, 2
  %1491 = extractvalue %dx.types.ResRet.f32 %1487, 3
  %1492 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1481, %dx.types.Handle %1450, float %1389, float %1390, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1493 = extractvalue %dx.types.ResRet.f32 %1492, 0
  %1494 = extractvalue %dx.types.ResRet.f32 %1492, 1
  %1495 = extractvalue %dx.types.ResRet.f32 %1492, 2
  %1496 = extractvalue %dx.types.ResRet.f32 %1492, 3
  %1497 = call float @dx.op.dot4.f32(i32 56, float %1483, float %1484, float %1485, float %1486, float %1477, float %1478, float %1479, float %1480)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1498 = call float @dx.op.dot4.f32(i32 56, float %1488, float %1489, float %1490, float %1491, float %1477, float %1478, float %1479, float %1480)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1499 = call float @dx.op.dot4.f32(i32 56, float %1493, float %1494, float %1495, float %1496, float %1477, float %1478, float %1479, float %1480)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1500 = fmul fast float %1497, %2292
  %1501 = fmul fast float %1498, %2292
  %1502 = fmul fast float %1499, %2292
  %1503 = fadd fast float %1500, %1198
  %1504 = fadd fast float %1501, %1199
  %1505 = fadd fast float %1502, %1200
  %1506 = fadd fast float %2292, %1201
  %1507 = fcmp fast ogt float %2292, %1197
  br i1 %1507, label %1508, label %1216

; <label>:1508                                    ; preds = %1476
  br label %1216

; <label>:1509                                    ; preds = %1216
  br label %1510

; <label>:1510                                    ; preds = %1509, %1188
  %1511 = phi i32 [ %1011, %1188 ], [ %1217, %1509 ]
  %1512 = phi i32 [ %1010, %1188 ], [ %1218, %1509 ]
  %1513 = phi i32 [ %1009, %1188 ], [ %1219, %1509 ]
  %1514 = phi float [ %1008, %1188 ], [ %1220, %1509 ]
  %1515 = phi float [ %1007, %1188 ], [ %1221, %1509 ]
  %1516 = phi float [ %1006, %1188 ], [ %1222, %1509 ]
  %1517 = phi float [ %1005, %1188 ], [ %1223, %1509 ]
  %1518 = phi float [ %1004, %1188 ], [ %1224, %1509 ]
  %1519 = fcmp fast ult float %1518, 0x3FECCCCCC0000000
  br i1 %1519, label %1520, label %1535

; <label>:1520                                    ; preds = %1510, %1002
  %1521 = phi i32 [ %1511, %1510 ], [ %1011, %1002 ]
  %1522 = phi i32 [ %1512, %1510 ], [ %1010, %1002 ]
  %1523 = phi i32 [ %1513, %1510 ], [ %1009, %1002 ]
  %1524 = phi float [ %1514, %1510 ], [ %1008, %1002 ]
  %1525 = phi float [ %1515, %1510 ], [ %1007, %1002 ]
  %1526 = phi float [ %1516, %1510 ], [ %1006, %1002 ]
  %1527 = phi float [ %1517, %1510 ], [ %1005, %1002 ]
  %1528 = phi float [ %1518, %1510 ], [ %1004, %1002 ]
  %1529 = add nuw nsw i32 %1003, 1
  %1530 = icmp ult i32 %1529, 4
  br i1 %1530, label %1531, label %1535

; <label>:1531                                    ; preds = %1520
  %1532 = getelementptr [4 x i32], [4 x i32]* %46, i32 0, i32 %1529
  %1533 = load i32, i32* %1532, align 4, !tbaa !59, !noalias !75
  %1534 = icmp eq i32 %1533, -1
  br i1 %1534, label %1535, label %1002

; <label>:1535                                    ; preds = %1531, %1520, %1510
  %1536 = phi i32 [ %1511, %1510 ], [ %1521, %1531 ], [ %1521, %1520 ]
  %1537 = phi i32 [ %1512, %1510 ], [ %1522, %1531 ], [ %1522, %1520 ]
  %1538 = phi i32 [ %1513, %1510 ], [ %1523, %1531 ], [ %1523, %1520 ]
  %1539 = phi float [ %1515, %1510 ], [ %1525, %1531 ], [ %1525, %1520 ]
  %1540 = phi float [ %1516, %1510 ], [ %1526, %1531 ], [ %1526, %1520 ]
  %1541 = phi float [ %1517, %1510 ], [ %1527, %1531 ], [ %1527, %1520 ]
  %1542 = phi float [ %1518, %1510 ], [ %1528, %1531 ], [ %1528, %1520 ]
  br label %1543

; <label>:1543                                    ; preds = %1535, %958
  %1544 = phi i32 [ 0, %958 ], [ %1536, %1535 ]
  %1545 = phi i32 [ 0, %958 ], [ %1537, %1535 ]
  %1546 = phi i32 [ 0, %958 ], [ %1538, %1535 ]
  %1547 = phi float [ 0.000000e+00, %958 ], [ %1539, %1535 ]
  %1548 = phi float [ 0.000000e+00, %958 ], [ %1540, %1535 ]
  %1549 = phi float [ 0.000000e+00, %958 ], [ %1541, %1535 ]
  %1550 = phi float [ 0.000000e+00, %958 ], [ %1542, %1535 ]
  %1551 = fcmp fast ogt float %1550, 0.000000e+00
  br i1 %1551, label %1552, label %1582

; <label>:1552                                    ; preds = %1543
  %1553 = fdiv fast float %1547, %1550
  %1554 = fdiv fast float %1548, %1550
  %1555 = fdiv fast float %1549, %1550
  %1556 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1557 = extractvalue %dx.types.CBufRet.i32 %1556, 1
  %1558 = and i32 %1557, %55
  %1559 = and i32 %1557, %56
  %1560 = extractvalue %dx.types.CBufRet.i32 %1556, 2
  %1561 = extractvalue %dx.types.CBufRet.i32 %1556, 3
  %1562 = icmp eq i32 %1558, %1560
  %1563 = icmp eq i32 %1559, %1561
  %1564 = and i1 %1562, %1563
  br i1 %1564, label %1565, label %1582

; <label>:1565                                    ; preds = %1552
  %1566 = extractvalue %dx.types.CBufRet.i32 %1556, 0
  %1567 = icmp ne i32 %1566, 0
  %1568 = fcmp fast ogt float %1550, 0x3FB99999A0000000
  %1569 = and i1 %1568, %1567
  br i1 %1569, label %1570, label %1582

; <label>:1570                                    ; preds = %1565
  %1571 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1572 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1571, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1573 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1574 = extractvalue %dx.types.CBufRet.i32 %1573, 0
  %1575 = icmp ult i32 %1572, %1574
  br i1 %1575, label %1576, label %1578

; <label>:1576                                    ; preds = %1570
  %1577 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1577, i32 %1572, i32 0, i32 %1544, i32 %1545, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1578

; <label>:1578                                    ; preds = %1576, %1570
  %1579 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1580 = extractvalue %dx.types.CBufRet.i32 %1579, 1
  %1581 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1581, i32 %1546, i32 0, i32 %1580, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1582

; <label>:1582                                    ; preds = %1578, %1565, %1552, %1543, %919, %573
  %1583 = phi float [ 0.000000e+00, %573 ], [ %920, %919 ], [ %920, %1578 ], [ %920, %1565 ], [ %920, %1552 ], [ %920, %1543 ]
  %1584 = phi float [ 0.000000e+00, %573 ], [ %921, %919 ], [ %921, %1578 ], [ %921, %1565 ], [ %921, %1552 ], [ %921, %1543 ]
  %1585 = phi float [ 0.000000e+00, %573 ], [ %922, %919 ], [ %922, %1578 ], [ %922, %1565 ], [ %922, %1552 ], [ %922, %1543 ]
  %1586 = phi float [ %184, %573 ], [ %574, %919 ], [ %574, %1578 ], [ %574, %1565 ], [ %574, %1552 ], [ %574, %1543 ]
  %1587 = phi float [ 1.000000e+00, %573 ], [ 0.000000e+00, %919 ], [ 0.000000e+00, %1578 ], [ 0.000000e+00, %1565 ], [ 0.000000e+00, %1552 ], [ 0.000000e+00, %1543 ]
  %1588 = phi float [ 0.000000e+00, %573 ], [ 0.000000e+00, %919 ], [ %1553, %1578 ], [ %1553, %1565 ], [ %1553, %1552 ], [ 0.000000e+00, %1543 ]
  %1589 = phi float [ 0.000000e+00, %573 ], [ 0.000000e+00, %919 ], [ %1554, %1578 ], [ %1554, %1565 ], [ %1554, %1552 ], [ 0.000000e+00, %1543 ]
  %1590 = phi float [ 0.000000e+00, %573 ], [ 0.000000e+00, %919 ], [ %1555, %1578 ], [ %1555, %1565 ], [ %1555, %1552 ], [ 0.000000e+00, %1543 ]
  %1591 = call float @dx.op.binary.f32(i32 36, float %184, float %1586)  ; FMin(a,b)
  br label %1592

; <label>:1592                                    ; preds = %1582, %252
  %1593 = phi float [ %1583, %1582 ], [ 0.000000e+00, %252 ]
  %1594 = phi float [ %1584, %1582 ], [ 0.000000e+00, %252 ]
  %1595 = phi float [ %1585, %1582 ], [ 0.000000e+00, %252 ]
  %1596 = phi float [ %1591, %1582 ], [ %184, %252 ]
  %1597 = phi float [ %1587, %1582 ], [ 1.000000e+00, %252 ]
  %1598 = phi float [ %1588, %1582 ], [ 0.000000e+00, %252 ]
  %1599 = phi float [ %1589, %1582 ], [ 0.000000e+00, %252 ]
  %1600 = phi float [ %1590, %1582 ], [ 0.000000e+00, %252 ]
  %1601 = fcmp fast ole float %1597, 5.000000e-01
  br i1 %1601, label %1602, label %1875

; <label>:1602                                    ; preds = %1592
  %1603 = fmul fast float %1596, %176
  %1604 = fmul fast float %1596, %177
  %1605 = fmul fast float %1596, %178
  %1606 = fadd fast float %1603, %190
  %1607 = fadd fast float %1604, %191
  %1608 = fadd fast float %1605, %192
  %1609 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 81)  ; CBufferLoadLegacy(handle,regIndex)
  %1610 = extractvalue %dx.types.CBufRet.f32 %1609, 0
  %1611 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1612 = extractvalue %dx.types.CBufRet.f32 %1611, 3
  %1613 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1614 = extractvalue %dx.types.CBufRet.f32 %1613, 3
  %1615 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1616 = extractvalue %dx.types.CBufRet.f32 %1615, 3
  %1617 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1618 = extractvalue %dx.types.CBufRet.f32 %1617, 3
  %1619 = fmul fast float %1612, %1606
  %1620 = call float @dx.op.tertiary.f32(i32 46, float %1607, float %1614, float %1619)  ; FMad(a,b,c)
  %1621 = call float @dx.op.tertiary.f32(i32 46, float %1608, float %1616, float %1620)  ; FMad(a,b,c)
  %1622 = fadd fast float %1621, %1618
  %1623 = fcmp fast ogt float %1622, 0.000000e+00
  br i1 %1623, label %1624, label %1875

; <label>:1624                                    ; preds = %1602
  %1625 = extractvalue %dx.types.CBufRet.f32 %1617, 1
  %1626 = extractvalue %dx.types.CBufRet.f32 %1615, 1
  %1627 = extractvalue %dx.types.CBufRet.f32 %1613, 1
  %1628 = extractvalue %dx.types.CBufRet.f32 %1611, 1
  %1629 = fmul fast float %1628, %1606
  %1630 = call float @dx.op.tertiary.f32(i32 46, float %1607, float %1627, float %1629)  ; FMad(a,b,c)
  %1631 = call float @dx.op.tertiary.f32(i32 46, float %1608, float %1626, float %1630)  ; FMad(a,b,c)
  %1632 = fadd fast float %1631, %1625
  %1633 = extractvalue %dx.types.CBufRet.f32 %1617, 0
  %1634 = extractvalue %dx.types.CBufRet.f32 %1615, 0
  %1635 = extractvalue %dx.types.CBufRet.f32 %1613, 0
  %1636 = extractvalue %dx.types.CBufRet.f32 %1611, 0
  %1637 = fmul fast float %1636, %1606
  %1638 = call float @dx.op.tertiary.f32(i32 46, float %1607, float %1635, float %1637)  ; FMad(a,b,c)
  %1639 = call float @dx.op.tertiary.f32(i32 46, float %1608, float %1634, float %1638)  ; FMad(a,b,c)
  %1640 = fadd fast float %1639, %1633
  %1641 = fdiv fast float %1640, %1622
  %1642 = fdiv fast float %1632, %1622
  %1643 = call float @dx.op.unary.f32(i32 6, float %1641)  ; FAbs(value)
  %1644 = call float @dx.op.unary.f32(i32 6, float %1642)  ; FAbs(value)
  %1645 = fcmp fast olt float %1643, 1.000000e+00
  %1646 = fcmp fast olt float %1644, 1.000000e+00
  %1647 = and i1 %1645, %1646
  br i1 %1647, label %1648, label %1875

; <label>:1648                                    ; preds = %1624
  %1649 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1650 = extractvalue %dx.types.CBufRet.f32 %1649, 0
  %1651 = extractvalue %dx.types.CBufRet.f32 %1649, 1
  %1652 = fmul fast float %1650, %1641
  %1653 = fmul fast float %1651, %1642
  %1654 = extractvalue %dx.types.CBufRet.f32 %1649, 2
  %1655 = extractvalue %dx.types.CBufRet.f32 %1649, 3
  %1656 = fadd fast float %1652, %1655
  %1657 = fadd fast float %1653, %1654
  %1658 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1659 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1660 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1658, %dx.types.Handle %1659, float %1656, float %1657, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1661 = extractvalue %dx.types.ResRet.f32 %1660, 0
  %1662 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1663 = extractvalue %dx.types.CBufRet.f32 %1662, 0
  %1664 = fmul fast float %1663, %1661
  %1665 = extractvalue %dx.types.CBufRet.f32 %1662, 1
  %1666 = fadd fast float %1664, %1665
  %1667 = extractvalue %dx.types.CBufRet.f32 %1662, 2
  %1668 = fmul fast float %1667, %1661
  %1669 = extractvalue %dx.types.CBufRet.f32 %1662, 3
  %1670 = fsub fast float %1668, %1669
  %1671 = fdiv fast float 1.000000e+00, %1670
  %1672 = fadd fast float %1666, %1671
  %1673 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %1674 = extractvalue %dx.types.CBufRet.f32 %1673, 0
  %1675 = extractvalue %dx.types.CBufRet.f32 %1673, 1
  %1676 = extractvalue %dx.types.CBufRet.f32 %1673, 2
  %1677 = fsub fast float %1674, %1606
  %1678 = fsub fast float %1675, %1607
  %1679 = fsub fast float %1676, %1608
  %1680 = call float @dx.op.dot3.f32(i32 55, float %1677, float %1678, float %1679, float %1677, float %1678, float %1679)  ; Dot3(ax,ay,az,bx,by,bz)
  %1681 = call float @dx.op.unary.f32(i32 25, float %1680)  ; Rsqrt(value)
  %1682 = fsub fast float %1622, %1672
  %1683 = call float @dx.op.unary.f32(i32 6, float %1682)  ; FAbs(value)
  %1684 = call float @dx.op.binary.f32(i32 35, float %1672, float 0x3EE4F8B580000000)  ; FMax(a,b)
  %1685 = fmul fast float %1684, %1610
  %1686 = fcmp fast olt float %1683, %1685
  br i1 %1686, label %1687, label %1875

; <label>:1687                                    ; preds = %1648
  %1688 = fmul fast float %1679, %1681
  %1689 = fmul fast float %1678, %1681
  %1690 = fmul fast float %1677, %1681
  %1691 = call float @dx.op.dot3.f32(i32 55, float %1690, float %1689, float %1688, float %1593, float %1594, float %1595)  ; Dot3(ax,ay,az,bx,by,bz)
  %1692 = extractvalue %dx.types.CBufRet.f32 %1609, 1
  %1693 = fcmp fast ult float %1691, %1692
  br i1 %1693, label %1875, label %1694

; <label>:1694                                    ; preds = %1687
  %1695 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 113)  ; CBufferLoadLegacy(handle,regIndex)
  %1696 = extractvalue %dx.types.CBufRet.f32 %1695, 0
  %1697 = extractvalue %dx.types.CBufRet.f32 %1695, 1
  %1698 = extractvalue %dx.types.CBufRet.f32 %1695, 2
  %1699 = extractvalue %dx.types.CBufRet.f32 %1695, 3
  %1700 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %1701 = extractvalue %dx.types.CBufRet.f32 %1700, 0
  %1702 = extractvalue %dx.types.CBufRet.f32 %1700, 1
  %1703 = extractvalue %dx.types.CBufRet.f32 %1700, 2
  %1704 = extractvalue %dx.types.CBufRet.f32 %1700, 3
  %1705 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 115)  ; CBufferLoadLegacy(handle,regIndex)
  %1706 = extractvalue %dx.types.CBufRet.f32 %1705, 0
  %1707 = extractvalue %dx.types.CBufRet.f32 %1705, 1
  %1708 = extractvalue %dx.types.CBufRet.f32 %1705, 2
  %1709 = extractvalue %dx.types.CBufRet.f32 %1705, 3
  %1710 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %1711 = extractvalue %dx.types.CBufRet.f32 %1710, 0
  %1712 = extractvalue %dx.types.CBufRet.f32 %1710, 1
  %1713 = extractvalue %dx.types.CBufRet.f32 %1710, 2
  %1714 = extractvalue %dx.types.CBufRet.f32 %1710, 3
  %1715 = fmul fast float %1696, %1641
  %1716 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1701, float %1715)  ; FMad(a,b,c)
  %1717 = call float @dx.op.tertiary.f32(i32 46, float %1661, float %1706, float %1716)  ; FMad(a,b,c)
  %1718 = fadd fast float %1717, %1711
  %1719 = fmul fast float %1697, %1641
  %1720 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1702, float %1719)  ; FMad(a,b,c)
  %1721 = call float @dx.op.tertiary.f32(i32 46, float %1661, float %1707, float %1720)  ; FMad(a,b,c)
  %1722 = fadd fast float %1721, %1712
  %1723 = fmul fast float %1698, %1641
  %1724 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1703, float %1723)  ; FMad(a,b,c)
  %1725 = call float @dx.op.tertiary.f32(i32 46, float %1661, float %1708, float %1724)  ; FMad(a,b,c)
  %1726 = fadd fast float %1725, %1713
  %1727 = fmul fast float %1699, %1641
  %1728 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1704, float %1727)  ; FMad(a,b,c)
  %1729 = call float @dx.op.tertiary.f32(i32 46, float %1661, float %1709, float %1728)  ; FMad(a,b,c)
  %1730 = fadd fast float %1729, %1714
  %1731 = fdiv fast float %1718, %1730
  %1732 = fdiv fast float %1722, %1730
  %1733 = fdiv fast float %1726, %1730
  %1734 = fsub fast float %1641, %1731
  %1735 = fsub fast float %1642, %1732
  %1736 = fsub fast float %1661, %1733
  %1737 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1738 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1737, %dx.types.Handle %1659, float %1656, float %1657, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1739 = extractvalue %dx.types.ResRet.f32 %1738, 0
  %1740 = fcmp fast ogt float %1739, 0.000000e+00
  br i1 %1740, label %1741, label %1766

; <label>:1741                                    ; preds = %1694
  %1742 = extractvalue %dx.types.ResRet.f32 %1738, 3
  %1743 = extractvalue %dx.types.ResRet.f32 %1738, 2
  %1744 = extractvalue %dx.types.ResRet.f32 %1738, 1
  %1745 = fmul fast float %1739, 0x4010083560000000
  %1746 = fmul fast float %1744, 0x4010083560000000
  %1747 = fadd fast float %1745, 0xC000082560000000
  %1748 = fadd fast float %1746, 0xC000082560000000
  %1749 = fmul fast float %1743, 6.553500e+04
  %1750 = call float @dx.op.unary.f32(i32 26, float %1749)  ; Round_ne(value)
  %1751 = fptoui float %1750 to i32
  %1752 = shl i32 %1751, 16
  %1753 = fmul fast float %1742, 6.553500e+04
  %1754 = call float @dx.op.unary.f32(i32 26, float %1753)  ; Round_ne(value)
  %1755 = fptoui float %1754 to i32
  %1756 = or i32 %1752, %1755
  %1757 = bitcast i32 %1756 to float
  %1758 = call float @dx.op.unary.f32(i32 6, float %1747)  ; FAbs(value)
  %1759 = call float @dx.op.unary.f32(i32 6, float %1748)  ; FAbs(value)
  %1760 = fmul fast float %1739, 0x4000083560000000
  %1761 = fadd fast float %1760, 0xBFF0082560000000
  %1762 = fmul fast float %1761, %1758
  %1763 = fmul fast float %1744, 0x4000083560000000
  %1764 = fadd fast float %1763, 0xBFF0082560000000
  %1765 = fmul fast float %1764, %1759
  br label %1766

; <label>:1766                                    ; preds = %1741, %1694
  %1767 = phi float [ %1762, %1741 ], [ %1734, %1694 ]
  %1768 = phi float [ %1765, %1741 ], [ %1735, %1694 ]
  %1769 = phi float [ %1757, %1741 ], [ %1736, %1694 ]
  %1770 = fsub fast float %1641, %1767
  %1771 = fsub fast float %1642, %1768
  %1772 = call float @dx.op.unary.f32(i32 6, float %1770)  ; FAbs(value)
  %1773 = call float @dx.op.unary.f32(i32 6, float %1771)  ; FAbs(value)
  %1774 = fmul fast float %1772, 5.000000e+00
  %1775 = fmul fast float %1773, 5.000000e+00
  %1776 = fadd fast float %1774, -4.000000e+00
  %1777 = fadd fast float %1775, -4.000000e+00
  %1778 = call float @dx.op.unary.f32(i32 7, float %1776)  ; Saturate(value)
  %1779 = call float @dx.op.unary.f32(i32 7, float %1777)  ; Saturate(value)
  %1780 = call float @dx.op.dot2.f32(i32 54, float %1778, float %1779, float %1778, float %1779)  ; Dot2(ax,ay,bx,by)
  %1781 = fsub fast float 1.000000e+00, %1780
  %1782 = call float @dx.op.unary.f32(i32 7, float %1781)  ; Saturate(value)
  %1783 = fmul fast float %1643, 5.000000e+00
  %1784 = fmul fast float %1644, 5.000000e+00
  %1785 = fadd fast float %1783, -4.000000e+00
  %1786 = fadd fast float %1784, -4.000000e+00
  %1787 = call float @dx.op.unary.f32(i32 7, float %1785)  ; Saturate(value)
  %1788 = call float @dx.op.unary.f32(i32 7, float %1786)  ; Saturate(value)
  %1789 = call float @dx.op.dot2.f32(i32 54, float %1787, float %1788, float %1787, float %1788)  ; Dot2(ax,ay,bx,by)
  %1790 = fsub fast float 1.000000e+00, %1789
  %1791 = call float @dx.op.unary.f32(i32 7, float %1790)  ; Saturate(value)
  %1792 = call float @dx.op.binary.f32(i32 36, float %1791, float %1782)  ; FMin(a,b)
  %1793 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1794 = extractvalue %dx.types.CBufRet.i32 %1793, 1
  %1795 = uitofp i32 %1794 to float
  %1796 = fadd fast float %266, 5.000000e-01
  %1797 = fadd fast float %267, 5.000000e-01
  %1798 = fmul fast float %1795, 0x4040551EC0000000
  %1799 = fmul fast float %1795, 0x4027A147A0000000
  %1800 = fadd fast float %1796, %1798
  %1801 = fadd fast float %1797, %1799
  %1802 = call float @dx.op.dot2.f32(i32 54, float %1800, float %1801, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %1803 = call float @dx.op.unary.f32(i32 22, float %1802)  ; Frc(value)
  %1804 = fmul fast float %1803, 0x404A7DD040000000
  %1805 = call float @dx.op.unary.f32(i32 22, float %1804)  ; Frc(value)
  %1806 = fcmp uge float %1792, %1805
  %1807 = zext i1 %1806 to i32
  br i1 %1806, label %1808, label %1829

; <label>:1808                                    ; preds = %1766
  %1809 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1810 = extractvalue %dx.types.CBufRet.f32 %1809, 0
  %1811 = extractvalue %dx.types.CBufRet.f32 %1809, 1
  %1812 = fmul fast float %1810, %1770
  %1813 = fmul fast float %1811, %1771
  %1814 = extractvalue %dx.types.CBufRet.f32 %1809, 2
  %1815 = extractvalue %dx.types.CBufRet.f32 %1809, 3
  %1816 = fadd fast float %1812, %1814
  %1817 = fadd fast float %1813, %1815
  %1818 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1819 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1818, %dx.types.Handle %1659, float %1816, float %1817, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1820 = extractvalue %dx.types.ResRet.f32 %1819, 0
  %1821 = fsub fast float %1769, %1661
  %1822 = fadd fast float %1821, %1820
  %1823 = call float @dx.op.unary.f32(i32 6, float %1822)  ; FAbs(value)
  %1824 = fmul fast float %1805, 1.500000e+00
  %1825 = fadd fast float %1824, 5.000000e-01
  %1826 = fmul fast float %1825, %1610
  %1827 = fcmp fast olt float %1823, %1826
  %1828 = zext i1 %1827 to i32
  br label %1829

; <label>:1829                                    ; preds = %1808, %1766
  %1830 = phi i32 [ %1828, %1808 ], [ %1807, %1766 ]
  %1831 = icmp eq i32 %1830, 0
  br i1 %1831, label %1875, label %1832

; <label>:1832                                    ; preds = %1829
  %1833 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1834 = extractvalue %dx.types.CBufRet.f32 %1833, 0
  %1835 = extractvalue %dx.types.CBufRet.f32 %1833, 1
  %1836 = fmul fast float %1834, %1770
  %1837 = fmul fast float %1835, %1771
  %1838 = extractvalue %dx.types.CBufRet.f32 %1833, 2
  %1839 = extractvalue %dx.types.CBufRet.f32 %1833, 3
  %1840 = fadd fast float %1836, %1838
  %1841 = fadd fast float %1837, %1839
  %1842 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1843 = extractvalue %dx.types.CBufRet.f32 %1842, 2
  %1844 = extractvalue %dx.types.CBufRet.f32 %1842, 3
  %1845 = extractvalue %dx.types.CBufRet.f32 %1842, 0
  %1846 = extractvalue %dx.types.CBufRet.f32 %1842, 1
  %1847 = call float @dx.op.binary.f32(i32 35, float %1840, float %1845)  ; FMax(a,b)
  %1848 = call float @dx.op.binary.f32(i32 35, float %1841, float %1846)  ; FMax(a,b)
  %1849 = call float @dx.op.binary.f32(i32 36, float %1847, float %1843)  ; FMin(a,b)
  %1850 = call float @dx.op.binary.f32(i32 36, float %1848, float %1844)  ; FMin(a,b)
  %1851 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1852 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1851, %dx.types.Handle %1659, float %1849, float %1850, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1853 = extractvalue %dx.types.ResRet.f32 %1852, 0
  %1854 = extractvalue %dx.types.ResRet.f32 %1852, 1
  %1855 = extractvalue %dx.types.ResRet.f32 %1852, 2
  %1856 = fsub fast float -0.000000e+00, %1853
  %1857 = fsub fast float -0.000000e+00, %1854
  %1858 = fsub fast float -0.000000e+00, %1855
  %1859 = call float @dx.op.binary.f32(i32 36, float %1856, float 0.000000e+00)  ; FMin(a,b)
  %1860 = call float @dx.op.binary.f32(i32 36, float %1857, float 0.000000e+00)  ; FMin(a,b)
  %1861 = call float @dx.op.binary.f32(i32 36, float %1858, float 0.000000e+00)  ; FMin(a,b)
  %1862 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1863 = extractvalue %dx.types.CBufRet.f32 %1862, 0
  %1864 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1865 = extractvalue %dx.types.CBufRet.f32 %1864, 3
  %1866 = fmul fast float %1859, %1863
  %1867 = fmul fast float %1866, %1865
  %1868 = fsub fast float -0.000000e+00, %1867
  %1869 = fmul fast float %1860, %1863
  %1870 = fmul fast float %1869, %1865
  %1871 = fsub fast float -0.000000e+00, %1870
  %1872 = fmul fast float %1861, %1863
  %1873 = fmul fast float %1872, %1865
  %1874 = fsub fast float -0.000000e+00, %1873
  br label %1875

; <label>:1875                                    ; preds = %1832, %1829, %1687, %1648, %1624, %1602, %1592
  %1876 = phi float [ %1598, %1592 ], [ %1868, %1832 ], [ %1598, %1829 ], [ %1598, %1687 ], [ %1598, %1648 ], [ %1598, %1624 ], [ %1598, %1602 ]
  %1877 = phi float [ %1599, %1592 ], [ %1871, %1832 ], [ %1599, %1829 ], [ %1599, %1687 ], [ %1599, %1648 ], [ %1599, %1624 ], [ %1599, %1602 ]
  %1878 = phi float [ %1600, %1592 ], [ %1874, %1832 ], [ %1600, %1829 ], [ %1600, %1687 ], [ %1600, %1648 ], [ %1600, %1624 ], [ %1600, %1602 ]
  %1879 = fsub fast float 1.000000e+00, %1597
  %1880 = call float @dx.op.unary.f32(i32 7, float %1879)  ; Saturate(value)
  br i1 %1601, label %1909, label %1881

; <label>:1881                                    ; preds = %1875
  %1882 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1883 = extractvalue %dx.types.CBufRet.f32 %1882, 2
  %1884 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1885 = extractvalue %dx.types.CBufRet.f32 %1884, 1
  %1886 = fcmp fast ogt float %1885, 0.000000e+00
  br i1 %1886, label %1887, label %1909

; <label>:1887                                    ; preds = %1881
  %1888 = extractvalue %dx.types.CBufRet.f32 %1884, 0
  %1889 = fadd fast float %1888, 0xC02BEAFA60000000
  %1890 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1891 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1892 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1890, %dx.types.Handle %1891, float %176, float %177, float %178, float undef, i32 undef, i32 undef, i32 undef, float %1889)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1893 = extractvalue %dx.types.ResRet.f32 %1892, 0
  %1894 = extractvalue %dx.types.ResRet.f32 %1892, 1
  %1895 = extractvalue %dx.types.ResRet.f32 %1892, 2
  %1896 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %1897 = extractvalue %dx.types.CBufRet.f32 %1896, 0
  %1898 = extractvalue %dx.types.CBufRet.f32 %1896, 1
  %1899 = extractvalue %dx.types.CBufRet.f32 %1896, 2
  %1900 = fmul fast float %1893, %1597
  %1901 = fmul fast float %1900, %1897
  %1902 = fmul fast float %1894, %1597
  %1903 = fmul fast float %1902, %1898
  %1904 = fmul fast float %1895, %1597
  %1905 = fmul fast float %1904, %1899
  %1906 = fadd fast float %1901, %1876
  %1907 = fadd fast float %1903, %1877
  %1908 = fadd fast float %1905, %1878
  br label %1909

; <label>:1909                                    ; preds = %1887, %1881, %1875
  %1910 = phi float [ %1876, %1875 ], [ %1906, %1887 ], [ %1876, %1881 ]
  %1911 = phi float [ %1877, %1875 ], [ %1907, %1887 ], [ %1877, %1881 ]
  %1912 = phi float [ %1878, %1875 ], [ %1908, %1887 ], [ %1878, %1881 ]
  %1913 = phi float [ %1596, %1875 ], [ %1883, %1887 ], [ %1883, %1881 ]
  %1914 = phi float [ %1880, %1875 ], [ 1.000000e+00, %1887 ], [ 1.000000e+00, %1881 ]
  %1915 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1916 = extractvalue %dx.types.CBufRet.f32 %1915, 1
  %1917 = fcmp fast ogt float %1916, 0.000000e+00
  br i1 %1917, label %1918, label %1950

; <label>:1918                                    ; preds = %1909
  %1919 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1920 = extractvalue %dx.types.CBufRet.f32 %1919, 1
  %1921 = fcmp fast ogt float %1920, 0.000000e+00
  br i1 %1921, label %1922, label %1950

; <label>:1922                                    ; preds = %1918
  %1923 = extractvalue %dx.types.CBufRet.f32 %1919, 2
  %1924 = extractvalue %dx.types.CBufRet.f32 %1915, 0
  %1925 = call float @dx.op.binary.f32(i32 35, float %1923, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1926 = call float @dx.op.unary.f32(i32 23, float %1925)  ; Log(value)
  %1927 = fmul fast float %1926, 0x3FF3333340000000
  %1928 = fadd fast float %1924, -2.000000e+00
  %1929 = fadd fast float %1928, %1927
  %1930 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1931 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1932 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1930, %dx.types.Handle %1931, float %176, float %177, float %178, float undef, i32 undef, i32 undef, i32 undef, float %1929)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1933 = extractvalue %dx.types.ResRet.f32 %1932, 0
  %1934 = extractvalue %dx.types.ResRet.f32 %1932, 1
  %1935 = extractvalue %dx.types.ResRet.f32 %1932, 2
  %1936 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %1937 = extractvalue %dx.types.CBufRet.f32 %1936, 0
  %1938 = extractvalue %dx.types.CBufRet.f32 %1936, 1
  %1939 = extractvalue %dx.types.CBufRet.f32 %1936, 2
  %1940 = fmul fast float %1937, %1933
  %1941 = fmul fast float %1938, %1934
  %1942 = fmul fast float %1939, %1935
  %1943 = extractvalue %dx.types.CBufRet.f32 %1919, 3
  %1944 = fmul fast float %1943, %1596
  %1945 = call float @dx.op.unary.f32(i32 7, float %1944)  ; Saturate(value)
  %1946 = fmul fast float %1945, %1920
  %1947 = fmul fast float %1940, %1946
  %1948 = fmul fast float %1941, %1946
  %1949 = fmul fast float %1942, %1946
  br label %1950

; <label>:1950                                    ; preds = %1922, %1918, %1909
  %1951 = phi float [ %1947, %1922 ], [ 0.000000e+00, %1918 ], [ 0.000000e+00, %1909 ]
  %1952 = phi float [ %1948, %1922 ], [ 0.000000e+00, %1918 ], [ 0.000000e+00, %1909 ]
  %1953 = phi float [ %1949, %1922 ], [ 0.000000e+00, %1918 ], [ 0.000000e+00, %1909 ]
  %1954 = fadd fast float %1951, %1910
  %1955 = fadd fast float %1952, %1911
  %1956 = fadd fast float %1953, %1912
  %1957 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1958 = extractvalue %dx.types.CBufRet.f32 %1957, 2
  %1959 = fmul fast float %1958, %1954
  %1960 = fmul fast float %1958, %1955
  %1961 = fmul fast float %1958, %1956
  %1962 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1963 = extractvalue %dx.types.CBufRet.i32 %1962, 0
  %1964 = icmp eq i32 %1963, 0
  br i1 %1964, label %2230, label %1965

; <label>:1965                                    ; preds = %1950
  %1966 = fmul fast float %1913, %176
  %1967 = fmul fast float %1913, %177
  %1968 = fmul fast float %1913, %178
  %1969 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1970 = extractvalue %dx.types.CBufRet.f32 %1969, 3
  %1971 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1972 = extractvalue %dx.types.CBufRet.f32 %1971, 2
  %1973 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %1974 = extractvalue %dx.types.CBufRet.f32 %1973, 2
  %1975 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %1976 = extractvalue %dx.types.CBufRet.f32 %1975, 2
  %1977 = fmul fast float %1974, 2.097152e+06
  %1978 = fadd fast float %1977, %1976
  %1979 = call float @dx.op.binary.f32(i32 36, float %1978, float %1972)  ; FMin(a,b)
  %1980 = fsub fast float %1968, %1979
  %1981 = fadd fast float %1980, %1976
  %1982 = fadd fast float %1981, %1977
  %1983 = call float @dx.op.dot3.f32(i32 55, float %1966, float %1967, float %1982, float %1966, float %1967, float %1982)  ; Dot3(ax,ay,az,bx,by,bz)
  %1984 = call float @dx.op.binary.f32(i32 35, float %1983, float 0x3E45798EE0000000)  ; FMax(a,b)
  %1985 = call float @dx.op.unary.f32(i32 25, float %1984)  ; Rsqrt(value)
  %1986 = fmul fast float %1985, %1983
  %1987 = fmul fast float %1985, %1966
  %1988 = fmul fast float %1985, %1967
  %1989 = fmul fast float %1982, %1985
  %1990 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1991 = extractvalue %dx.types.CBufRet.f32 %1971, 3
  %1992 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1991)  ; FMax(a,b)
  %1993 = fcmp fast ogt float %1992, 0.000000e+00
  %1994 = extractvalue %dx.types.CBufRet.f32 %1971, 1
  %1995 = extractvalue %dx.types.CBufRet.f32 %1990, 1
  br i1 %1993, label %1999, label %1996

; <label>:1996                                    ; preds = %1965
  %1997 = extractvalue %dx.types.CBufRet.f32 %1990, 0
  %1998 = extractvalue %dx.types.CBufRet.f32 %1971, 0
  br label %2023

; <label>:1999                                    ; preds = %1965
  %2000 = fmul fast float %1992, %1985
  %2001 = fmul fast float %2000, %1982
  %2002 = fadd fast float %2001, %1979
  %2003 = fsub fast float %1982, %2001
  %2004 = fsub fast float 1.000000e+00, %2000
  %2005 = fmul fast float %2004, %1986
  %2006 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2007 = extractvalue %dx.types.CBufRet.f32 %2006, 1
  %2008 = fsub fast float %2002, %2007
  %2009 = fmul fast float %2008, %1994
  %2010 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2009)  ; FMax(a,b)
  %2011 = extractvalue %dx.types.CBufRet.f32 %2006, 0
  %2012 = fsub fast float -0.000000e+00, %2010
  %2013 = call float @dx.op.unary.f32(i32 21, float %2012)  ; Exp(value)
  %2014 = fmul fast float %2011, %2013
  %2015 = extractvalue %dx.types.CBufRet.f32 %1990, 3
  %2016 = fsub fast float %2002, %2015
  %2017 = fmul fast float %2016, %1995
  %2018 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2017)  ; FMax(a,b)
  %2019 = extractvalue %dx.types.CBufRet.f32 %1990, 2
  %2020 = fsub fast float -0.000000e+00, %2018
  %2021 = call float @dx.op.unary.f32(i32 21, float %2020)  ; Exp(value)
  %2022 = fmul fast float %2019, %2021
  br label %2023

; <label>:2023                                    ; preds = %1999, %1996
  %2024 = phi float [ %2014, %1999 ], [ %1998, %1996 ]
  %2025 = phi float [ %2022, %1999 ], [ %1997, %1996 ]
  %2026 = phi float [ %2005, %1999 ], [ %1986, %1996 ]
  %2027 = phi float [ %2003, %1999 ], [ %1982, %1996 ]
  %2028 = fmul fast float %1994, %2027
  %2029 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2028)  ; FMax(a,b)
  %2030 = fsub fast float -0.000000e+00, %2029
  %2031 = call float @dx.op.unary.f32(i32 21, float %2030)  ; Exp(value)
  %2032 = fsub fast float 1.000000e+00, %2031
  %2033 = fdiv fast float %2032, %2029
  %2034 = fmul fast float %2029, 0x3FCEBFBE00000000
  %2035 = fsub fast float 0x3FE62E4300000000, %2034
  %2036 = call float @dx.op.unary.f32(i32 6, float %2029)  ; FAbs(value)
  %2037 = fcmp fast ogt float %2036, 0x3F847AE140000000
  %2038 = select i1 %2037, float %2033, float %2035
  %2039 = fmul fast float %2038, %2024
  %2040 = fmul fast float %1995, %2027
  %2041 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2040)  ; FMax(a,b)
  %2042 = fsub fast float -0.000000e+00, %2041
  %2043 = call float @dx.op.unary.f32(i32 21, float %2042)  ; Exp(value)
  %2044 = fsub fast float 1.000000e+00, %2043
  %2045 = fdiv fast float %2044, %2041
  %2046 = fmul fast float %2041, 0x3FCEBFBE00000000
  %2047 = fsub fast float 0x3FE62E4300000000, %2046
  %2048 = call float @dx.op.unary.f32(i32 6, float %2041)  ; FAbs(value)
  %2049 = fcmp fast ogt float %2048, 0x3F847AE140000000
  %2050 = select i1 %2049, float %2045, float %2047
  %2051 = fmul fast float %2050, %2025
  %2052 = fadd fast float %2051, %2039
  %2053 = extractvalue %dx.types.CBufRet.f32 %1969, 0
  %2054 = extractvalue %dx.types.CBufRet.f32 %1969, 1
  %2055 = extractvalue %dx.types.CBufRet.f32 %1969, 2
  %2056 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2057 = extractvalue %dx.types.CBufRet.f32 %2056, 2
  %2058 = fcmp fast ogt float %2057, 0.000000e+00
  br i1 %2058, label %2059, label %2095, !dx.controlflow.hints !76

; <label>:2059                                    ; preds = %2023
  %2060 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2061 = extractvalue %dx.types.CBufRet.f32 %2060, 0
  %2062 = fmul fast float %2061, %1986
  %2063 = extractvalue %dx.types.CBufRet.f32 %2060, 1
  %2064 = fadd fast float %2062, %2063
  %2065 = call float @dx.op.unary.f32(i32 7, float %2064)  ; Saturate(value)
  %2066 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2067 = extractvalue %dx.types.CBufRet.f32 %2066, 1
  %2068 = extractvalue %dx.types.CBufRet.f32 %2066, 0
  %2069 = fsub fast float -0.000000e+00, %2068
  %2070 = call float @dx.op.dot2.f32(i32 54, float %1966, float %1967, float %2067, float %2069)  ; Dot2(ax,ay,bx,by)
  %2071 = call float @dx.op.dot2.f32(i32 54, float %1966, float %1967, float %2068, float %2067)  ; Dot2(ax,ay,bx,by)
  %2072 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2073 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2074 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2072, %dx.types.Handle %2073, float %2070, float %2071, float %1982, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2075 = extractvalue %dx.types.ResRet.f32 %2074, 0
  %2076 = extractvalue %dx.types.ResRet.f32 %2074, 1
  %2077 = extractvalue %dx.types.ResRet.f32 %2074, 2
  %2078 = extractvalue %dx.types.CBufRet.f32 %2060, 2
  %2079 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2072, %dx.types.Handle %2073, float %2070, float %2071, float %1982, float undef, i32 undef, i32 undef, i32 undef, float %2078)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2080 = extractvalue %dx.types.ResRet.f32 %2079, 0
  %2081 = extractvalue %dx.types.ResRet.f32 %2079, 1
  %2082 = extractvalue %dx.types.ResRet.f32 %2079, 2
  %2083 = fsub fast float %2075, %2080
  %2084 = fsub fast float %2076, %2081
  %2085 = fsub fast float %2077, %2082
  %2086 = fmul fast float %2083, %2065
  %2087 = fmul fast float %2084, %2065
  %2088 = fmul fast float %2085, %2065
  %2089 = fadd fast float %2086, %2080
  %2090 = fadd fast float %2087, %2081
  %2091 = fadd fast float %2088, %2082
  %2092 = fmul fast float %2089, %2053
  %2093 = fmul fast float %2090, %2054
  %2094 = fmul fast float %2091, %2055
  br label %2095

; <label>:2095                                    ; preds = %2059, %2023
  %2096 = phi float [ %2092, %2059 ], [ %2053, %2023 ]
  %2097 = phi float [ %2093, %2059 ], [ %2054, %2023 ]
  %2098 = phi float [ %2094, %2059 ], [ %2055, %2023 ]
  %2099 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2100 = extractvalue %dx.types.CBufRet.f32 %2099, 0
  %2101 = extractvalue %dx.types.CBufRet.f32 %2099, 1
  %2102 = extractvalue %dx.types.CBufRet.f32 %2099, 2
  %2103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %2104 = extractvalue %dx.types.CBufRet.f32 %2103, 1
  %2105 = fmul fast float %2104, %2100
  %2106 = fmul fast float %2104, %2101
  %2107 = fmul fast float %2104, %2102
  %2108 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2109 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2110 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2108, %dx.types.Handle %2109, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2111 = extractvalue %dx.types.ResRet.f32 %2110, 0
  %2112 = extractvalue %dx.types.ResRet.f32 %2110, 1
  %2113 = extractvalue %dx.types.ResRet.f32 %2110, 2
  %2114 = fmul fast float %2105, %2111
  %2115 = fmul fast float %2106, %2112
  %2116 = fmul fast float %2107, %2113
  %2117 = fadd fast float %2114, %2096
  %2118 = fadd fast float %2115, %2097
  %2119 = fadd fast float %2116, %2098
  %2120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2121 = extractvalue %dx.types.CBufRet.f32 %2120, 3
  %2122 = fcmp fast oge float %2121, 0.000000e+00
  %2123 = fcmp fast oeq float %2057, 0.000000e+00
  %2124 = and i1 %2122, %2123
  br i1 %2124, label %2125, label %2196

; <label>:2125                                    ; preds = %2095
  %2126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2127 = extractvalue %dx.types.CBufRet.f32 %2126, 0
  %2128 = extractvalue %dx.types.CBufRet.f32 %2126, 1
  %2129 = extractvalue %dx.types.CBufRet.f32 %2126, 2
  %2130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2131 = extractvalue %dx.types.CBufRet.f32 %2130, 0
  %2132 = extractvalue %dx.types.CBufRet.f32 %2130, 1
  %2133 = extractvalue %dx.types.CBufRet.f32 %2130, 2
  %2134 = fmul fast float %2104, 0x3FB45F3060000000
  %2135 = fmul fast float %2134, %2131
  %2136 = fmul fast float %2134, %2132
  %2137 = fmul fast float %2134, %2133
  %2138 = fadd fast float %2135, %2127
  %2139 = fadd fast float %2136, %2128
  %2140 = fadd fast float %2137, %2129
  %2141 = extractvalue %dx.types.CBufRet.f32 %2126, 3
  %2142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %2143 = extractvalue %dx.types.CBufRet.f32 %2142, 0
  %2144 = extractvalue %dx.types.CBufRet.f32 %2142, 1
  %2145 = extractvalue %dx.types.CBufRet.f32 %2142, 2
  %2146 = call float @dx.op.dot3.f32(i32 55, float %1987, float %1988, float %1989, float %2143, float %2144, float %2145)  ; Dot3(ax,ay,az,bx,by,bz)
  %2147 = call float @dx.op.unary.f32(i32 7, float %2146)  ; Saturate(value)
  %2148 = call float @dx.op.unary.f32(i32 23, float %2147)  ; Log(value)
  %2149 = fmul fast float %2148, %2141
  %2150 = call float @dx.op.unary.f32(i32 21, float %2149)  ; Exp(value)
  %2151 = fmul fast float %2150, %2138
  %2152 = fmul fast float %2150, %2139
  %2153 = fmul fast float %2150, %2140
  %2154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %2155 = extractvalue %dx.types.CBufRet.f32 %2154, 3
  %2156 = fcmp fast ogt float %2155, 0.000000e+00
  br i1 %2156, label %2157, label %2182

; <label>:2157                                    ; preds = %2125
  %2158 = extractvalue %dx.types.CBufRet.f32 %2154, 0
  %2159 = extractvalue %dx.types.CBufRet.f32 %2154, 1
  %2160 = extractvalue %dx.types.CBufRet.f32 %2154, 2
  %2161 = fmul fast float %2134, %2158
  %2162 = fmul fast float %2134, %2159
  %2163 = fmul fast float %2134, %2160
  %2164 = fadd fast float %2161, %2127
  %2165 = fadd fast float %2162, %2128
  %2166 = fadd fast float %2163, %2129
  %2167 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %2168 = extractvalue %dx.types.CBufRet.f32 %2167, 0
  %2169 = extractvalue %dx.types.CBufRet.f32 %2167, 1
  %2170 = extractvalue %dx.types.CBufRet.f32 %2167, 2
  %2171 = call float @dx.op.dot3.f32(i32 55, float %1987, float %1988, float %1989, float %2168, float %2169, float %2170)  ; Dot3(ax,ay,az,bx,by,bz)
  %2172 = call float @dx.op.unary.f32(i32 7, float %2171)  ; Saturate(value)
  %2173 = call float @dx.op.unary.f32(i32 23, float %2172)  ; Log(value)
  %2174 = fmul fast float %2173, %2141
  %2175 = call float @dx.op.unary.f32(i32 21, float %2174)  ; Exp(value)
  %2176 = fmul fast float %2175, %2164
  %2177 = fmul fast float %2175, %2165
  %2178 = fmul fast float %2175, %2166
  %2179 = fadd fast float %2176, %2151
  %2180 = fadd fast float %2177, %2152
  %2181 = fadd fast float %2178, %2153
  br label %2182

; <label>:2182                                    ; preds = %2157, %2125
  %2183 = phi float [ %2179, %2157 ], [ %2151, %2125 ]
  %2184 = phi float [ %2180, %2157 ], [ %2152, %2125 ]
  %2185 = phi float [ %2181, %2157 ], [ %2153, %2125 ]
  %2186 = fsub fast float %2026, %2121
  %2187 = call float @dx.op.binary.f32(i32 35, float %2186, float 0.000000e+00)  ; FMax(a,b)
  %2188 = fmul fast float %2052, %2187
  %2189 = fsub fast float -0.000000e+00, %2188
  %2190 = call float @dx.op.unary.f32(i32 21, float %2189)  ; Exp(value)
  %2191 = call float @dx.op.unary.f32(i32 7, float %2190)  ; Saturate(value)
  %2192 = fsub fast float 1.000000e+00, %2191
  %2193 = fmul fast float %2192, %2183
  %2194 = fmul fast float %2192, %2184
  %2195 = fmul fast float %2192, %2185
  br label %2196

; <label>:2196                                    ; preds = %2182, %2095
  %2197 = phi float [ %2193, %2182 ], [ 0.000000e+00, %2095 ]
  %2198 = phi float [ %2194, %2182 ], [ 0.000000e+00, %2095 ]
  %2199 = phi float [ %2195, %2182 ], [ 0.000000e+00, %2095 ]
  %2200 = fmul fast float %2026, %2052
  %2201 = fsub fast float -0.000000e+00, %2200
  %2202 = call float @dx.op.unary.f32(i32 21, float %2201)  ; Exp(value)
  %2203 = call float @dx.op.unary.f32(i32 7, float %2202)  ; Saturate(value)
  %2204 = call float @dx.op.binary.f32(i32 35, float %2203, float %1970)  ; FMax(a,b)
  %2205 = extractvalue %dx.types.CBufRet.f32 %2056, 3
  %2206 = fcmp fast ogt float %2205, 0.000000e+00
  %2207 = fcmp fast ogt float %1986, %2205
  %2208 = and i1 %2206, %2207
  %2209 = select i1 %2208, float 0.000000e+00, float %2197
  %2210 = select i1 %2208, float 0.000000e+00, float %2198
  %2211 = select i1 %2208, float 0.000000e+00, float %2199
  %2212 = select i1 %2208, float 1.000000e+00, float %2204
  %2213 = fsub fast float 1.000000e+00, %2212
  %2214 = fmul fast float %2213, %2117
  %2215 = fmul fast float %2213, %2118
  %2216 = fmul fast float %2213, %2119
  %2217 = fadd fast float %2214, %2209
  %2218 = fadd fast float %2215, %2210
  %2219 = fadd fast float %2216, %2211
  %2220 = fmul fast float %2212, %1959
  %2221 = fmul fast float %2212, %1960
  %2222 = fmul fast float %2212, %1961
  %2223 = fmul fast float %1958, %1914
  %2224 = fmul fast float %2223, %2217
  %2225 = fmul fast float %2223, %2218
  %2226 = fmul fast float %2223, %2219
  %2227 = fadd fast float %2224, %2220
  %2228 = fadd fast float %2225, %2221
  %2229 = fadd fast float %2226, %2222
  br label %2230

; <label>:2230                                    ; preds = %2196, %1950
  %2231 = phi float [ %2227, %2196 ], [ %1959, %1950 ]
  %2232 = phi float [ %2228, %2196 ], [ %1960, %1950 ]
  %2233 = phi float [ %2229, %2196 ], [ %1961, %1950 ]
  %2234 = call float @dx.op.binary.f32(i32 35, float %2232, float %2233)  ; FMax(a,b)
  %2235 = call float @dx.op.binary.f32(i32 35, float %2231, float %2234)  ; FMax(a,b)
  %2236 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %2237 = extractvalue %dx.types.CBufRet.f32 %2236, 2
  %2238 = fcmp fast ogt float %2235, %2237
  br i1 %2238, label %2239, label %2244

; <label>:2239                                    ; preds = %2230
  %2240 = fdiv fast float %2237, %2235
  %2241 = fmul fast float %2240, %2231
  %2242 = fmul fast float %2240, %2232
  %2243 = fmul fast float %2240, %2233
  br label %2244

; <label>:2244                                    ; preds = %2239, %2230
  %2245 = phi float [ %2241, %2239 ], [ %2231, %2230 ]
  %2246 = phi float [ %2242, %2239 ], [ %2232, %2230 ]
  %2247 = phi float [ %2243, %2239 ], [ %2233, %2230 ]
  %2248 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2248, i32 %55, i32 %56, i32 undef, float %2245, float %2246, float %2247, float %2245, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2249 = call float @dx.op.binary.f32(i32 35, float %1913, float 0.000000e+00)  ; FMax(a,b)
  %2250 = select i1 %1601, float -1.000000e+00, float 1.000000e+00
  %2251 = fmul fast float %2249, %2250
  %2252 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2252, i32 %55, i32 %56, i32 undef, float %2251, float %2251, float %2251, float %2251, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2253

; <label>:2253                                    ; preds = %2244, %0
  ret void

; <label>:2254                                    ; preds = %1471
  %2255 = fsub fast float %1458, %1453
  %2256 = call float @dx.op.unary.f32(i32 6, float %2255)  ; FAbs(value)
  %2257 = fsub fast float %2256, %1459
  %2258 = fdiv fast float %2257, %1460
  %2259 = call float @dx.op.unary.f32(i32 7, float %2258)  ; Saturate(value)
  %2260 = fsub fast float 1.000000e+00, %2259
  br label %2261

; <label>:2261                                    ; preds = %2254, %1471
  %2262 = phi float [ %2260, %2254 ], [ %1475, %1471 ]
  %2263 = fcmp uge float %1454, 1.000000e+00
  %2264 = or i1 %1063, %2263
  %2265 = select i1 %2263, float 0.000000e+00, float 1.000000e+00
  br i1 %2264, label %2273, label %2266

; <label>:2266                                    ; preds = %2261
  %2267 = fsub fast float %1458, %1454
  %2268 = call float @dx.op.unary.f32(i32 6, float %2267)  ; FAbs(value)
  %2269 = fsub fast float %2268, %1459
  %2270 = fdiv fast float %2269, %1460
  %2271 = call float @dx.op.unary.f32(i32 7, float %2270)  ; Saturate(value)
  %2272 = fsub fast float 1.000000e+00, %2271
  br label %2273

; <label>:2273                                    ; preds = %2266, %2261
  %2274 = phi float [ %2272, %2266 ], [ %2265, %2261 ]
  %2275 = fcmp uge float %1455, 1.000000e+00
  %2276 = or i1 %1063, %2275
  %2277 = select i1 %2275, float 0.000000e+00, float 1.000000e+00
  br i1 %2276, label %2285, label %2278

; <label>:2278                                    ; preds = %2273
  %2279 = fsub fast float %1458, %1455
  %2280 = call float @dx.op.unary.f32(i32 6, float %2279)  ; FAbs(value)
  %2281 = fsub fast float %2280, %1459
  %2282 = fdiv fast float %2281, %1460
  %2283 = call float @dx.op.unary.f32(i32 7, float %2282)  ; Saturate(value)
  %2284 = fsub fast float 1.000000e+00, %2283
  br label %2285

; <label>:2285                                    ; preds = %2278, %2273
  %2286 = phi float [ %2284, %2278 ], [ %2277, %2273 ]
  %2287 = fmul fast float %1472, %1433
  %2288 = fmul fast float %2262, %1434
  %2289 = fmul fast float %2274, %1436
  %2290 = fmul fast float %2286, %1437
  %2291 = call float @dx.op.dot4.f32(i32 56, float %2287, float %2288, float %2289, float %2290, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2292 = fmul fast float %2291, %1446
  %2293 = fcmp fast ogt float %2292, 0.000000e+00
  br i1 %2293, label %1476, label %1216
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!52}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !31, !39, !45}
!5 = !{!6, !8, !10, !11, !12, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30}
!6 = !{i32 0, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 5}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !7}
!11 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 16}
!14 = !{i32 5, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!15 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!18 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 12, i32 0, !13}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!26 = !{i32 17, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 18, i32 1, i32 10, i32 0, !9}
!28 = !{i32 19, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 19, i32 1, i32 10, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !7}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !7}
!31 = !{!32, !34, !35, !37, !38}
!32 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !33}
!33 = !{i32 1, i32 4}
!34 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !33}
!35 = !{i32 2, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!36 = !{i32 1, i32 8}
!37 = !{i32 3, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!38 = !{i32 4, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!39 = !{!40, !41, !42, !43, !44}
!40 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1320, null}
!41 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!42 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 140, null}
!43 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!44 = !{i32 4, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 4, i32 1, i32 180, null}
!45 = !{!46, !47, !48, !49, !50, !51}
!46 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!47 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!48 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 5, i32 1, i32 0, null}
!49 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!50 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!51 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!52 = !{void ()* @ReflectionTraceVoxelsCS, !"ReflectionTraceVoxelsCS", null, !4, !53}
!53 = !{i32 0, i64 16, i32 4, !54, i32 5, !55}
!54 = !{i32 64, i32 1, i32 1}
!55 = !{i32 0}
!56 = distinct !{!56, !57}
!57 = !{!"llvm.loop.unroll.disable"}
!58 = distinct !{!58, !57}
!59 = !{!60, !60, i64 0}
!60 = !{!"int", !61, i64 0}
!61 = !{!"omnipotent char", !62, i64 0}
!62 = !{!"Simple C/C++ TBAA"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!65 = distinct !{!65, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!66 = !{!67, !69, !71, !73}
!67 = distinct !{!67, !68, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!68 = distinct !{!68, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!69 = distinct !{!69, !70, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z: %ConeTraceResult"}
!70 = distinct !{!70, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z"}
!71 = distinct !{!71, !72, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!72 = distinct !{!72, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!73 = distinct !{!73, !74, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!74 = distinct !{!74, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!75 = !{!69, !71, !73}
!76 = distinct !{!76, !"dx.controlflow.hints", i32 1}
