;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: bb307d707c20c07d86b4cb1362147601
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  144
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  148
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  152
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  160
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint ReflectionDownsampleFactor;              ; Offset:  272
;       uint2 ReflectionTracingViewSize;              ; Offset:  280
;       uint2 ReflectionTracingBufferSize;            ; Offset:  288
;       float MaxRayIntensity;                        ; Offset:  296
;       float ReflectionSmoothBias;                   ; Offset:  300
;       uint ReflectionPass;                          ; Offset:  304
;       uint UseJitter;                               ; Offset:  308
;       uint UseHighResSurface;                       ; Offset:  312
;       float NearFieldMaxTraceDistance;              ; Offset:  320
;       float CardTraceEndDistanceFromCamera;         ; Offset:  484
;       float MaxTraceDistance;                       ; Offset:  504
;       float MaxMeshSDFTraceDistance;                ; Offset:  508
;       float SurfaceBias;                            ; Offset:  512
;       int HeightfieldMaxTracingSteps;               ; Offset:  528
;       float ReprojectionRadiusScale;                ; Offset:  640
;       float InvClipmapFadeSize;                     ; Offset:  652
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  656
;       uint RadianceProbeClipmapResolution;          ; Offset:  664
;       uint NumRadianceProbeClipmaps;                ; Offset:  668
;       uint RadianceProbeResolution;                 ; Offset:  672
;       uint FinalProbeResolution;                    ; Offset:  676
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  680
;       uint CalculateIrradiance;                     ; Offset:  684
;       uint IrradianceProbeResolution;               ; Offset:  688
;       uint OcclusionProbeResolution;                ; Offset:  692
;       float4 RadianceProbeSettings[6];              ; Offset:  752
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  848
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  944
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1040
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1048
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1056
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1064
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1068
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1072
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1076
;       float4 HZBUvFactorAndInvFactor;               ; Offset: 1120
;       float2 PrevSceneColorBilinearUVMin;           ; Offset: 1136
;       float2 PrevSceneColorBilinearUVMax;           ; Offset: 1144
;       float4 PrevScreenPositionScaleBias;           ; Offset: 1152
;       float4 PrevScreenPositionScaleBiasForDepth;   ; Offset: 1168
;       float PrevSceneColorPreExposureCorrection;    ; Offset: 1184
;       float2 HZBBaseTexelSize;                      ; Offset: 1192
;       float4 HZBUVToScreenUVScaleBias;              ; Offset: 1200
;       float RelativeDepthThickness;                 ; Offset: 1296
;       float SampleSceneColorNormalTreshold;         ; Offset: 1300
;       float DistantScreenTraceSlopeCompareTolerance;; Offset: 1312
;       float DistantScreenTraceMaxTraceDistance;     ; Offset: 1316
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1320
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_NumPrimitiveGroups;       ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       float PrePadding_LumenCardScene_44;           ; Offset:   44
;       uint BindlessResource_LumenCardScene_CardData;; Offset:   48
;       uint PrePadding_LumenCardScene_52;            ; Offset:   52
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:   56
;       uint PrePadding_LumenCardScene_60;            ; Offset:   60
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:   64
;       uint PrePadding_LumenCardScene_68;            ; Offset:   68
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:   72
;       uint PrePadding_LumenCardScene_76;            ; Offset:   76
;       uint BindlessResource_LumenCardScene_PrimitiveGroupData;; Offset:   80
;       uint PrePadding_LumenCardScene_84;            ; Offset:   84
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:   88
;       uint PrePadding_LumenCardScene_92;            ; Offset:   92
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:   96
;       uint PrePadding_LumenCardScene_100;           ; Offset:  100
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  104
;       uint PrePadding_LumenCardScene_108;           ; Offset:  108
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  136
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   140
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for GlobalDistanceFieldPageObjectGridBuffer
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for ProbeWorldOffset
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S1   s3,space1000     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S2   s4,space1000     1
; D3DStaticTrilinearClampedSampler   sampler      NA          NA      S3   s5,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S4             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S5             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S6             s2     1
; View_GlobalDistanceFieldPageAtlasTexture   texture     f32          3d      T0             t0     1
; View_GlobalDistanceFieldPageTableTexture   texture     u32          3d      T1             t1     1
; View_GlobalDistanceFieldMipTexture   texture     f32          3d      T2             t2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T3             t3     1
; LumenCardScene_CardData           texture  struct         r/o      T4             t4     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T5             t5     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T6             t6     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T7             t7     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T8             t8     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T9             t9     1
; SceneDepthTexture                 texture     f32          2d     T10            t10     1
; GBufferVelocityTexture            texture     f32          2d     T11            t11     1
; FinalLightingAtlas                texture     f32          2d     T12            t12     1
; DepthAtlas                        texture     f32          2d     T13            t13     1
; GlobalDistanceFieldPageObjectGridBuffer   texture  struct         r/o     T14            t14     1
; RadianceProbeIndirectionTexture   texture     u32          3d     T15            t15     1
; RadianceCacheFinalRadianceAtlas   texture     f32          2d     T16            t16     1
; ProbeWorldOffset                  texture  struct         r/o     T17            t17     1
; DownsampledDepth                  texture     f32          2d     T18            t18     1
; RayBuffer                         texture     f32          2d     T19            t19     1
; RayTraceDistance                  texture     u32          2d     T20            t20     1
; CompactedTraceTexelAllocator      texture     u32         buf     T21            t21     1
; CompactedTraceTexelData           texture     u32         buf     T22            t22     1
; PrevSceneColorTexture             texture     f32          2d     T23            t23     1
; HistorySceneDepth                 texture     f32          2d     T24            t24     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U0             u0     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U2             u2     1
; RWTraceHit                            UAV     f32          2d      U3             u3     1
; RWTraceRadiance                       UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, float, <2 x float>, <4 x float>, float, float, float, float }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceVoxelsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 1000, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 13, i32 140 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 13, i32 1320 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %48 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %49 = alloca [6 x i32], align 4
  %50 = alloca [4 x i32], align 4
  %51 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %52 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %51, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %53 = extractvalue %dx.types.ResRet.i32 %52, 0
  %54 = icmp ult i32 %48, %53
  br i1 %54, label %55, label %3471

; <label>:55                                      ; preds = %0
  %56 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %57 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %56, i32 %48, i32 undef)  ; BufferLoad(srv,index,wot)
  %58 = extractvalue %dx.types.ResRet.i32 %57, 0
  %59 = and i32 %58, 65535
  %60 = lshr i32 %58, 16
  %61 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  %62 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %61, i32 undef, i32 %59, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %63 = extractvalue %dx.types.ResRet.f32 %62, 0
  %64 = call float @dx.op.unary.f32(i32 6, float %63)  ; FAbs(value)
  %65 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.i32 %65, 0
  %67 = mul i32 %66, %59
  %68 = mul i32 %66, %60
  %69 = uitofp i32 %67 to float
  %70 = uitofp i32 %68 to float
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = fadd fast float %72, 5.000000e-01
  %75 = fadd fast float %74, %69
  %76 = fadd fast float %73, 5.000000e-01
  %77 = fadd fast float %76, %70
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = fadd fast float %72, -1.000000e+00
  %82 = fadd fast float %81, %79
  %83 = fadd fast float %73, -1.000000e+00
  %84 = fadd fast float %83, %80
  %85 = call float @dx.op.binary.f32(i32 36, float %75, float %82)  ; FMin(a,b)
  %86 = call float @dx.op.binary.f32(i32 36, float %77, float %84)  ; FMin(a,b)
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %90 = fmul fast float %88, %85
  %91 = fmul fast float %89, %86
  %92 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %93 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %92, i32 0, i32 %59, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %94 = extractvalue %dx.types.ResRet.f32 %93, 0
  %95 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.f32 %95, 2
  %97 = extractvalue %dx.types.CBufRet.f32 %95, 3
  %98 = fsub fast float %90, %97
  %99 = fsub fast float %91, %96
  %100 = extractvalue %dx.types.CBufRet.f32 %95, 0
  %101 = extractvalue %dx.types.CBufRet.f32 %95, 1
  %102 = fdiv fast float %98, %100
  %103 = fdiv fast float %99, %101
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = extractvalue %dx.types.CBufRet.f32 %108, 2
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = fmul fast float %121, 2.097152e+06
  %125 = fmul fast float %122, 2.097152e+06
  %126 = fmul fast float %123, 2.097152e+06
  %127 = fadd fast float %124, %117
  %128 = fadd fast float %125, %118
  %129 = fadd fast float %126, %119
  %130 = fmul fast float %102, %94
  %131 = fmul fast float %103, %94
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 3
  %134 = bitcast float %133 to i32
  %135 = icmp ne i32 %134, 0
  %136 = select i1 %135, float %102, float %130
  %137 = select i1 %135, float %103, float %131
  %138 = fmul fast float %136, %105
  %139 = call float @dx.op.tertiary.f32(i32 46, float %137, float %109, float %138)  ; FMad(a,b,c)
  %140 = call float @dx.op.tertiary.f32(i32 46, float %94, float %113, float %139)  ; FMad(a,b,c)
  %141 = fadd fast float %127, %140
  %142 = fmul fast float %136, %106
  %143 = call float @dx.op.tertiary.f32(i32 46, float %137, float %110, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %94, float %114, float %143)  ; FMad(a,b,c)
  %145 = fadd fast float %128, %144
  %146 = fmul fast float %136, %107
  %147 = call float @dx.op.tertiary.f32(i32 46, float %137, float %111, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %94, float %115, float %147)  ; FMad(a,b,c)
  %149 = fadd fast float %129, %148
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %161 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = fmul fast float %136, %151
  %167 = call float @dx.op.tertiary.f32(i32 46, float %137, float %155, float %166)  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %94, float %159, float %167)  ; FMad(a,b,c)
  %169 = fadd fast float %168, %163
  %170 = fmul fast float %136, %152
  %171 = call float @dx.op.tertiary.f32(i32 46, float %137, float %156, float %170)  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %94, float %160, float %171)  ; FMad(a,b,c)
  %173 = fadd fast float %172, %164
  %174 = fmul fast float %136, %153
  %175 = call float @dx.op.tertiary.f32(i32 46, float %137, float %157, float %174)  ; FMad(a,b,c)
  %176 = call float @dx.op.tertiary.f32(i32 46, float %94, float %161, float %175)  ; FMad(a,b,c)
  %177 = fadd fast float %176, %165
  %178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %179 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %178, i32 0, i32 %59, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %180 = extractvalue %dx.types.ResRet.f32 %179, 0
  %181 = extractvalue %dx.types.ResRet.f32 %179, 1
  %182 = extractvalue %dx.types.ResRet.f32 %179, 2
  %183 = extractvalue %dx.types.ResRet.f32 %179, 3
  %184 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %185 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %184, i32 0, i32 %59, i32 %60, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %186 = extractvalue %dx.types.ResRet.i32 %185, 0
  %187 = and i32 %186, 32767
  %188 = call float @dx.op.legacyF16ToF32(i32 131, i32 %187)  ; LegacyF16ToF32(value)
  %189 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %190 = extractvalue %dx.types.CBufRet.f32 %189, 0
  %191 = fmul fast float %190, %180
  %192 = fmul fast float %190, %181
  %193 = fmul fast float %190, %182
  %194 = fadd fast float %191, %169
  %195 = fadd fast float %192, %173
  %196 = fadd fast float %193, %177
  %197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.f32 %197, 0
  %199 = fadd fast float %198, %183
  %200 = call float @dx.op.unary.f32(i32 14, float %199)  ; Tan(value)
  %201 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %202 = extractvalue %dx.types.CBufRet.i32 %201, 2
  %203 = icmp ne i32 %202, 0
  %204 = fmul fast float %180, %64
  %205 = fmul fast float %181, %64
  %206 = fmul fast float %182, %64
  %207 = fadd fast float %204, %169
  %208 = fadd fast float %205, %173
  %209 = fadd fast float %206, %177
  %210 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.i32 %210, 2
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %256, label %213

; <label>:213                                     ; preds = %55
  br label %214

; <label>:214                                     ; preds = %249, %213
  %215 = phi i32 [ %250, %249 ], [ 0, %213 ]
  %216 = add i32 %215, 195
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %216)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 3
  %219 = extractvalue %dx.types.CBufRet.f32 %217, 0
  %220 = extractvalue %dx.types.CBufRet.f32 %217, 1
  %221 = extractvalue %dx.types.CBufRet.f32 %217, 2
  %222 = fadd fast float %218, %207
  %223 = fsub fast float %222, %219
  %224 = fadd fast float %218, %208
  %225 = fsub fast float %224, %220
  %226 = fadd fast float %218, %209
  %227 = fsub fast float %226, %221
  %228 = call float @dx.op.binary.f32(i32 35, float %223, float 0.000000e+00)  ; FMax(a,b)
  %229 = call float @dx.op.binary.f32(i32 35, float %225, float 0.000000e+00)  ; FMax(a,b)
  %230 = call float @dx.op.binary.f32(i32 35, float %227, float 0.000000e+00)  ; FMax(a,b)
  %231 = fsub fast float %218, %207
  %232 = fadd fast float %231, %219
  %233 = fsub fast float %218, %208
  %234 = fadd fast float %233, %220
  %235 = fsub fast float %218, %209
  %236 = fadd fast float %235, %221
  %237 = call float @dx.op.binary.f32(i32 35, float %232, float 0.000000e+00)  ; FMax(a,b)
  %238 = call float @dx.op.binary.f32(i32 35, float %234, float 0.000000e+00)  ; FMax(a,b)
  %239 = call float @dx.op.binary.f32(i32 35, float %236, float 0.000000e+00)  ; FMax(a,b)
  %240 = call float @dx.op.binary.f32(i32 36, float %228, float %237)  ; FMin(a,b)
  %241 = call float @dx.op.binary.f32(i32 36, float %229, float %238)  ; FMin(a,b)
  %242 = call float @dx.op.binary.f32(i32 36, float %230, float %239)  ; FMin(a,b)
  %243 = call float @dx.op.binary.f32(i32 36, float %241, float %242)  ; FMin(a,b)
  %244 = call float @dx.op.binary.f32(i32 36, float %240, float %243)  ; FMin(a,b)
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = fmul fast float %246, %218
  %248 = fcmp fast ogt float %244, %247
  br i1 %248, label %254, label %249

; <label>:249                                     ; preds = %214
  %250 = add i32 %215, 1
  %251 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %252 = extractvalue %dx.types.CBufRet.i32 %251, 2
  %253 = icmp ult i32 %250, %252
  br i1 %253, label %214, label %254

; <label>:254                                     ; preds = %249, %214
  %255 = phi i32 [ 0, %249 ], [ %215, %214 ]
  br label %256

; <label>:256                                     ; preds = %254, %55
  %257 = phi i32 [ 0, %55 ], [ %255, %254 ]
  %258 = add i32 %257, 195
  %259 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %258)  ; CBufferLoadLegacy(handle,regIndex)
  %260 = extractvalue %dx.types.CBufRet.f32 %259, 3
  %261 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %262 = extractvalue %dx.types.CBufRet.f32 %261, 0
  %263 = fmul fast float %260, 4.000000e+00
  %264 = fmul fast float %263, %262
  %265 = fsub fast float %64, %264
  %266 = call float @dx.op.binary.f32(i32 35, float %265, float 0.000000e+00)  ; FMax(a,b)
  %267 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.i32 %267, 1
  %269 = uitofp i32 %268 to float
  %270 = uitofp i32 %59 to float
  %271 = uitofp i32 %60 to float
  %272 = fmul fast float %269, 0x4040551EC0000000
  %273 = fmul fast float %269, 0x4027A147A0000000
  %274 = fadd fast float %272, %270
  %275 = fadd fast float %273, %271
  %276 = call float @dx.op.dot2.f32(i32 54, float %274, float %275, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %277 = call float @dx.op.unary.f32(i32 22, float %276)  ; Frc(value)
  %278 = fmul fast float %277, 0x404A7DD040000000
  %279 = call float @dx.op.unary.f32(i32 22, float %278)  ; Frc(value)
  %280 = fmul fast float %279, 0x3FBA461100000000
  %281 = fadd fast float %280, 0x3FEE666660000000
  %282 = fmul fast float %183, 0x40545F3060000000
  %283 = call float @dx.op.unary.f32(i32 7, float %282)  ; Saturate(value)
  %284 = fsub fast float 0x3FA9999A00000000, %280
  %285 = fmul fast float %284, %283
  %286 = fadd fast float %281, %285
  %287 = fcmp fast olt float %266, %188
  br i1 %287, label %288, label %1596

; <label>:288                                     ; preds = %256
  %289 = fmul fast float %266, %180
  %290 = fmul fast float %266, %181
  %291 = fmul fast float %266, %182
  %292 = fadd fast float %289, %194
  %293 = fadd fast float %290, %195
  %294 = fadd fast float %291, %196
  %295 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %296 = extractvalue %dx.types.CBufRet.i32 %295, 2
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %341, label %298

; <label>:298                                     ; preds = %288
  br label %299

; <label>:299                                     ; preds = %334, %298
  %300 = phi i32 [ %335, %334 ], [ 0, %298 ]
  %301 = add i32 %300, 195
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %301)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 3
  %304 = extractvalue %dx.types.CBufRet.f32 %302, 0
  %305 = extractvalue %dx.types.CBufRet.f32 %302, 1
  %306 = extractvalue %dx.types.CBufRet.f32 %302, 2
  %307 = fadd fast float %303, %292
  %308 = fsub fast float %307, %304
  %309 = fadd fast float %303, %293
  %310 = fsub fast float %309, %305
  %311 = fadd fast float %303, %294
  %312 = fsub fast float %311, %306
  %313 = call float @dx.op.binary.f32(i32 35, float %308, float 0.000000e+00)  ; FMax(a,b)
  %314 = call float @dx.op.binary.f32(i32 35, float %310, float 0.000000e+00)  ; FMax(a,b)
  %315 = call float @dx.op.binary.f32(i32 35, float %312, float 0.000000e+00)  ; FMax(a,b)
  %316 = fsub fast float %303, %292
  %317 = fadd fast float %316, %304
  %318 = fsub fast float %303, %293
  %319 = fadd fast float %318, %305
  %320 = fsub fast float %303, %294
  %321 = fadd fast float %320, %306
  %322 = call float @dx.op.binary.f32(i32 35, float %317, float 0.000000e+00)  ; FMax(a,b)
  %323 = call float @dx.op.binary.f32(i32 35, float %319, float 0.000000e+00)  ; FMax(a,b)
  %324 = call float @dx.op.binary.f32(i32 35, float %321, float 0.000000e+00)  ; FMax(a,b)
  %325 = call float @dx.op.binary.f32(i32 36, float %313, float %322)  ; FMin(a,b)
  %326 = call float @dx.op.binary.f32(i32 36, float %314, float %323)  ; FMin(a,b)
  %327 = call float @dx.op.binary.f32(i32 36, float %315, float %324)  ; FMin(a,b)
  %328 = call float @dx.op.binary.f32(i32 36, float %326, float %327)  ; FMin(a,b)
  %329 = call float @dx.op.binary.f32(i32 36, float %325, float %328)  ; FMin(a,b)
  %330 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %331 = extractvalue %dx.types.CBufRet.f32 %330, 0
  %332 = fmul fast float %331, %303
  %333 = fcmp fast ogt float %329, %332
  br i1 %333, label %339, label %334

; <label>:334                                     ; preds = %299
  %335 = add i32 %300, 1
  %336 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %337 = extractvalue %dx.types.CBufRet.i32 %336, 2
  %338 = icmp ult i32 %335, %337
  br i1 %338, label %299, label %339

; <label>:339                                     ; preds = %334, %299
  %340 = phi i32 [ %300, %299 ], [ 0, %334 ]
  br label %341

; <label>:341                                     ; preds = %339, %288
  %342 = phi i32 [ 0, %288 ], [ %340, %339 ]
  %343 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %344 = extractvalue %dx.types.CBufRet.i32 %343, 2
  %345 = icmp ult i32 %342, %344
  br i1 %345, label %346, label %577

; <label>:346                                     ; preds = %341
  br label %347

; <label>:347                                     ; preds = %565, %346
  %348 = phi float [ %569, %565 ], [ -1.000000e+00, %346 ]
  %349 = phi i32 [ %568, %565 ], [ 0, %346 ]
  %350 = phi i32 [ %570, %565 ], [ %342, %346 ]
  %351 = phi float [ %567, %565 ], [ %266, %346 ]
  %352 = phi float [ %566, %565 ], [ 0.000000e+00, %346 ]
  %353 = add i32 %350, 195
  %354 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %353)  ; CBufferLoadLegacy(handle,regIndex)
  %355 = extractvalue %dx.types.CBufRet.f32 %354, 3
  %356 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %357 = extractvalue %dx.types.CBufRet.f32 %356, 0
  %358 = fmul fast float %357, %355
  %359 = extractvalue %dx.types.CBufRet.f32 %354, 0
  %360 = extractvalue %dx.types.CBufRet.f32 %354, 1
  %361 = extractvalue %dx.types.CBufRet.f32 %354, 2
  %362 = fsub fast float %355, %358
  %363 = fmul fast float %188, %180
  %364 = fmul fast float %188, %181
  %365 = fmul fast float %188, %182
  %366 = fdiv fast float 1.000000e+00, %363
  %367 = fdiv fast float 1.000000e+00, %364
  %368 = fdiv fast float 1.000000e+00, %365
  %369 = fsub fast float %359, %194
  %370 = fsub fast float %369, %362
  %371 = fsub fast float %360, %195
  %372 = fsub fast float %371, %362
  %373 = fsub fast float %361, %196
  %374 = fsub fast float %373, %362
  %375 = fmul fast float %370, %366
  %376 = fmul fast float %372, %367
  %377 = fmul fast float %374, %368
  %378 = fadd fast float %369, %362
  %379 = fadd fast float %371, %362
  %380 = fadd fast float %373, %362
  %381 = fmul fast float %378, %366
  %382 = fmul fast float %379, %367
  %383 = fmul fast float %380, %368
  %384 = call float @dx.op.binary.f32(i32 36, float %375, float %381)  ; FMin(a,b)
  %385 = call float @dx.op.binary.f32(i32 36, float %376, float %382)  ; FMin(a,b)
  %386 = call float @dx.op.binary.f32(i32 36, float %377, float %383)  ; FMin(a,b)
  %387 = call float @dx.op.binary.f32(i32 35, float %375, float %381)  ; FMax(a,b)
  %388 = call float @dx.op.binary.f32(i32 35, float %376, float %382)  ; FMax(a,b)
  %389 = call float @dx.op.binary.f32(i32 35, float %377, float %383)  ; FMax(a,b)
  %390 = call float @dx.op.binary.f32(i32 35, float %385, float %386)  ; FMax(a,b)
  %391 = call float @dx.op.binary.f32(i32 35, float %384, float %390)  ; FMax(a,b)
  %392 = call float @dx.op.binary.f32(i32 36, float %388, float %389)  ; FMin(a,b)
  %393 = call float @dx.op.binary.f32(i32 36, float %387, float %392)  ; FMin(a,b)
  %394 = call float @dx.op.unary.f32(i32 7, float %391)  ; Saturate(value)
  %395 = call float @dx.op.unary.f32(i32 7, float %393)  ; Saturate(value)
  %396 = fmul fast float %394, %188
  %397 = fmul fast float %395, %188
  %398 = call float @dx.op.binary.f32(i32 35, float %396, float %351)  ; FMax(a,b)
  %399 = call float @dx.op.binary.f32(i32 35, float %398, float 0.000000e+00)  ; FMax(a,b)
  %400 = fcmp fast olt float %399, %397
  br i1 %400, label %401, label %565

; <label>:401                                     ; preds = %347
  %402 = fmul fast float %355, 8.000000e+00
  %403 = fmul fast float %402, %357
  br label %404

; <label>:404                                     ; preds = %561, %401
  %405 = phi float [ %352, %401 ], [ %531, %561 ]
  %406 = phi float [ %399, %401 ], [ %557, %561 ]
  %407 = phi i32 [ 0, %401 ], [ %562, %561 ]
  %408 = fmul fast float %406, %180
  %409 = fmul fast float %406, %181
  %410 = fmul fast float %406, %182
  %411 = fadd fast float %408, %194
  %412 = fadd fast float %409, %195
  %413 = fadd fast float %410, %196
  %414 = add i32 %350, 201
  %415 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %414)  ; CBufferLoadLegacy(handle,regIndex)
  %416 = extractvalue %dx.types.CBufRet.f32 %415, 0
  %417 = extractvalue %dx.types.CBufRet.f32 %415, 1
  %418 = extractvalue %dx.types.CBufRet.f32 %415, 2
  %419 = extractvalue %dx.types.CBufRet.f32 %415, 3
  %420 = fmul fast float %419, %411
  %421 = fmul fast float %419, %412
  %422 = fmul fast float %419, %413
  %423 = fadd fast float %420, %416
  %424 = fadd fast float %421, %417
  %425 = fadd fast float %422, %418
  %426 = call float @dx.op.unary.f32(i32 22, float %423)  ; Frc(value)
  %427 = call float @dx.op.unary.f32(i32 22, float %424)  ; Frc(value)
  %428 = call float @dx.op.unary.f32(i32 22, float %425)  ; Frc(value)
  %429 = call float @dx.op.unary.f32(i32 22, float %426)  ; Frc(value)
  %430 = call float @dx.op.unary.f32(i32 22, float %427)  ; Frc(value)
  %431 = call float @dx.op.unary.f32(i32 22, float %428)  ; Frc(value)
  %432 = add i32 %350, 207
  %433 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %432)  ; CBufferLoadLegacy(handle,regIndex)
  %434 = extractvalue %dx.types.CBufRet.f32 %433, 0
  %435 = extractvalue %dx.types.CBufRet.f32 %433, 1
  %436 = extractvalue %dx.types.CBufRet.f32 %433, 2
  %437 = fmul fast float %434, %411
  %438 = fmul fast float %435, %412
  %439 = fmul fast float %436, %413
  %440 = add i32 %350, 213
  %441 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %440)  ; CBufferLoadLegacy(handle,regIndex)
  %442 = extractvalue %dx.types.CBufRet.f32 %441, 0
  %443 = extractvalue %dx.types.CBufRet.f32 %441, 1
  %444 = extractvalue %dx.types.CBufRet.f32 %441, 2
  %445 = fadd fast float %437, %442
  %446 = fadd fast float %438, %443
  %447 = fadd fast float %439, %444
  %448 = call float @dx.op.unary.f32(i32 7, float %445)  ; Saturate(value)
  %449 = call float @dx.op.unary.f32(i32 7, float %446)  ; Saturate(value)
  %450 = call float @dx.op.unary.f32(i32 7, float %447)  ; Saturate(value)
  %451 = extractvalue %dx.types.CBufRet.f32 %433, 3
  %452 = extractvalue %dx.types.CBufRet.f32 %441, 3
  %453 = call float @dx.op.binary.f32(i32 35, float %450, float %451)  ; FMax(a,b)
  %454 = call float @dx.op.binary.f32(i32 36, float %453, float %452)  ; FMin(a,b)
  %455 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %456 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %457 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %455, %dx.types.Handle %456, float %448, float %449, float %454, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %458 = extractvalue %dx.types.ResRet.f32 %457, 0
  %459 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %460 = extractvalue %dx.types.CBufRet.f32 %459, 0
  %461 = fmul fast float %460, %403
  %462 = fmul fast float %458, 2.000000e+00
  %463 = fadd fast float %462, -1.000000e+00
  %464 = fmul fast float %461, %463
  %465 = call float @dx.op.unary.f32(i32 7, float %429)  ; Saturate(value)
  %466 = call float @dx.op.unary.f32(i32 7, float %430)  ; Saturate(value)
  %467 = call float @dx.op.unary.f32(i32 7, float %431)  ; Saturate(value)
  %468 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %469 = extractvalue %dx.types.CBufRet.i32 %468, 2
  %470 = sitofp i32 %469 to float
  %471 = fmul fast float %470, %465
  %472 = fmul fast float %470, %466
  %473 = fmul fast float %470, %467
  %474 = mul i32 %469, %350
  %475 = sitofp i32 %474 to float
  %476 = fadd fast float %475, %473
  %477 = fptosi float %471 to i32
  %478 = fptosi float %472 to i32
  %479 = fptosi float %476 to i32
  %480 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %481 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %480, i32 0, i32 %477, i32 %478, i32 %479, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %482 = extractvalue %dx.types.ResRet.i32 %481, 0
  %483 = icmp ne i32 %482, -1
  %484 = extractvalue %dx.types.CBufRet.f32 %459, 1
  %485 = fcmp fast olt float %458, %484
  %486 = and i1 %483, %485
  br i1 %486, label %487, label %528

; <label>:487                                     ; preds = %404
  %488 = icmp slt i32 %482, 0
  %489 = fmul fast float %470, %429
  %490 = fmul fast float %470, %430
  %491 = fmul fast float %470, %431
  %492 = call float @dx.op.unary.f32(i32 22, float %489)  ; Frc(value)
  %493 = call float @dx.op.unary.f32(i32 22, float %490)  ; Frc(value)
  %494 = call float @dx.op.unary.f32(i32 22, float %491)  ; Frc(value)
  %495 = shl i32 %482, 3
  %496 = and i32 %495, 1016
  %497 = lshr i32 %482, 4
  %498 = and i32 %497, 1016
  %499 = lshr i32 %482, 11
  %500 = and i32 %499, 8184
  %501 = uitofp i32 %496 to float
  %502 = uitofp i32 %498 to float
  %503 = uitofp i32 %500 to float
  %504 = fmul fast float %492, 7.000000e+00
  %505 = fmul fast float %493, 7.000000e+00
  %506 = fmul fast float %494, 7.000000e+00
  %507 = fadd fast float %501, 5.000000e-01
  %508 = fadd fast float %507, %504
  %509 = fadd fast float %502, 5.000000e-01
  %510 = fadd fast float %509, %505
  %511 = fadd fast float %503, 5.000000e-01
  %512 = fadd fast float %511, %506
  %513 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %514 = extractvalue %dx.types.CBufRet.f32 %513, 0
  %515 = extractvalue %dx.types.CBufRet.f32 %513, 1
  %516 = extractvalue %dx.types.CBufRet.f32 %513, 2
  %517 = fmul fast float %514, %508
  %518 = fmul fast float %510, %515
  %519 = fmul fast float %512, %516
  %520 = select i1 %488, float 0.000000e+00, float 1.000000e+00
  %521 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %522 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %523 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %521, %dx.types.Handle %522, float %517, float %518, float %519, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %524 = extractvalue %dx.types.ResRet.f32 %523, 0
  %525 = fmul fast float %524, 2.000000e+00
  %526 = fadd fast float %525, -1.000000e+00
  %527 = fmul fast float %526, %403
  br label %528

; <label>:528                                     ; preds = %487, %404
  %529 = phi float [ %527, %487 ], [ %464, %404 ]
  %530 = phi float [ %520, %487 ], [ 1.000000e+00, %404 ]
  %531 = call float @dx.op.binary.f32(i32 35, float %529, float %405)  ; FMax(a,b)
  %532 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %533 = extractvalue %dx.types.CBufRet.f32 %532, 3
  %534 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 223)  ; CBufferLoadLegacy(handle,regIndex)
  %535 = extractvalue %dx.types.CBufRet.f32 %534, 0
  %536 = fsub fast float %533, %535
  %537 = fmul fast float %536, %530
  %538 = fadd fast float %537, %535
  %539 = fmul fast float %358, 2.000000e+00
  %540 = fdiv fast float %531, %539
  %541 = call float @dx.op.unary.f32(i32 7, float %540)  ; Saturate(value)
  %542 = fmul fast float %541, %358
  %543 = fmul fast float %542, %538
  %544 = fcmp fast olt float %529, %543
  br i1 %544, label %545, label %549

; <label>:545                                     ; preds = %528
  %546 = fadd fast float %529, %406
  %547 = fsub fast float %546, %543
  %548 = call float @dx.op.binary.f32(i32 35, float %547, float 0.000000e+00)  ; FMax(a,b)
  br label %565

; <label>:549                                     ; preds = %528
  %550 = extractvalue %dx.types.CBufRet.f32 %534, 1
  %551 = fsub fast float 1.000000e+00, %550
  %552 = fmul fast float %551, %530
  %553 = fadd fast float %552, %550
  %554 = fmul fast float %553, %358
  %555 = fmul fast float %529, %286
  %556 = call float @dx.op.binary.f32(i32 35, float %555, float %554)  ; FMax(a,b)
  %557 = fadd fast float %556, %406
  %558 = fcmp fast ogt float %557, %397
  %559 = fcmp fast oge float %348, 0.000000e+00
  %560 = or i1 %559, %558
  br i1 %560, label %564, label %561

; <label>:561                                     ; preds = %549
  %562 = add nuw nsw i32 %407, 1
  %563 = icmp ult i32 %562, 256
  br i1 %563, label %404, label %564, !llvm.loop !60

; <label>:564                                     ; preds = %561, %549
  br label %565

; <label>:565                                     ; preds = %564, %545, %347
  %566 = phi float [ %352, %347 ], [ %531, %545 ], [ %531, %564 ]
  %567 = phi float [ %351, %347 ], [ %397, %545 ], [ %397, %564 ]
  %568 = phi i32 [ %349, %347 ], [ %350, %545 ], [ %349, %564 ]
  %569 = phi float [ %348, %347 ], [ %548, %545 ], [ %348, %564 ]
  %570 = add i32 %350, 1
  %571 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %572 = extractvalue %dx.types.CBufRet.i32 %571, 2
  %573 = icmp ult i32 %570, %572
  %574 = fcmp fast olt float %569, 0.000000e+00
  %575 = and i1 %574, %573
  br i1 %575, label %347, label %576, !llvm.loop !62

; <label>:576                                     ; preds = %565
  br label %577

; <label>:577                                     ; preds = %576, %341
  %578 = phi float [ -1.000000e+00, %341 ], [ %569, %576 ]
  %579 = phi i32 [ 0, %341 ], [ %568, %576 ]
  %580 = fcmp fast ult float %578, 0.000000e+00
  br i1 %580, label %1586, label %581

; <label>:581                                     ; preds = %577
  %582 = fmul fast float %578, %180
  %583 = fmul fast float %578, %181
  %584 = fmul fast float %578, %182
  %585 = fadd fast float %582, %194
  %586 = fadd fast float %583, %195
  %587 = fadd fast float %584, %196
  %588 = fsub fast float -0.000000e+00, %180
  %589 = fsub fast float -0.000000e+00, %181
  %590 = fsub fast float -0.000000e+00, %182
  %591 = add i32 %579, 201
  %592 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %591)  ; CBufferLoadLegacy(handle,regIndex)
  %593 = extractvalue %dx.types.CBufRet.f32 %592, 0
  %594 = extractvalue %dx.types.CBufRet.f32 %592, 1
  %595 = extractvalue %dx.types.CBufRet.f32 %592, 2
  %596 = extractvalue %dx.types.CBufRet.f32 %592, 3
  %597 = fmul fast float %596, %585
  %598 = fmul fast float %596, %586
  %599 = fmul fast float %596, %587
  %600 = fadd fast float %597, %593
  %601 = fadd fast float %598, %594
  %602 = fadd fast float %599, %595
  %603 = call float @dx.op.unary.f32(i32 22, float %600)  ; Frc(value)
  %604 = call float @dx.op.unary.f32(i32 22, float %601)  ; Frc(value)
  %605 = call float @dx.op.unary.f32(i32 22, float %602)  ; Frc(value)
  %606 = call float @dx.op.unary.f32(i32 22, float %603)  ; Frc(value)
  %607 = call float @dx.op.unary.f32(i32 22, float %604)  ; Frc(value)
  %608 = call float @dx.op.unary.f32(i32 22, float %605)  ; Frc(value)
  %609 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %610 = extractvalue %dx.types.CBufRet.f32 %609, 0
  %611 = fmul fast float %610, 5.000000e-01
  %612 = fadd fast float %611, %606
  %613 = call float @dx.op.unary.f32(i32 22, float %612)  ; Frc(value)
  %614 = call float @dx.op.unary.f32(i32 22, float %607)  ; Frc(value)
  %615 = call float @dx.op.unary.f32(i32 22, float %608)  ; Frc(value)
  %616 = call float @dx.op.unary.f32(i32 7, float %613)  ; Saturate(value)
  %617 = call float @dx.op.unary.f32(i32 7, float %614)  ; Saturate(value)
  %618 = call float @dx.op.unary.f32(i32 7, float %615)  ; Saturate(value)
  %619 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %620 = extractvalue %dx.types.CBufRet.i32 %619, 2
  %621 = sitofp i32 %620 to float
  %622 = fmul fast float %621, %616
  %623 = fmul fast float %621, %617
  %624 = fmul fast float %621, %618
  %625 = mul i32 %620, %579
  %626 = sitofp i32 %625 to float
  %627 = fadd fast float %626, %624
  %628 = fptosi float %622 to i32
  %629 = fptosi float %623 to i32
  %630 = fptosi float %627 to i32
  %631 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %632 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %631, i32 0, i32 %628, i32 %629, i32 %630, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %633 = extractvalue %dx.types.ResRet.i32 %632, 0
  %634 = icmp eq i32 %633, -1
  br i1 %634, label %671, label %635

; <label>:635                                     ; preds = %581
  %636 = fmul fast float %621, %613
  %637 = fmul fast float %621, %614
  %638 = fmul fast float %621, %615
  %639 = call float @dx.op.unary.f32(i32 22, float %636)  ; Frc(value)
  %640 = call float @dx.op.unary.f32(i32 22, float %637)  ; Frc(value)
  %641 = call float @dx.op.unary.f32(i32 22, float %638)  ; Frc(value)
  %642 = shl i32 %633, 3
  %643 = and i32 %642, 1016
  %644 = lshr i32 %633, 4
  %645 = and i32 %644, 1016
  %646 = lshr i32 %633, 11
  %647 = and i32 %646, 8184
  %648 = uitofp i32 %643 to float
  %649 = uitofp i32 %645 to float
  %650 = uitofp i32 %647 to float
  %651 = fmul fast float %639, 7.000000e+00
  %652 = fmul fast float %640, 7.000000e+00
  %653 = fmul fast float %641, 7.000000e+00
  %654 = fadd fast float %648, 5.000000e-01
  %655 = fadd fast float %654, %651
  %656 = fadd fast float %649, 5.000000e-01
  %657 = fadd fast float %656, %652
  %658 = fadd fast float %650, 5.000000e-01
  %659 = fadd fast float %658, %653
  %660 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %661 = extractvalue %dx.types.CBufRet.f32 %660, 0
  %662 = extractvalue %dx.types.CBufRet.f32 %660, 1
  %663 = extractvalue %dx.types.CBufRet.f32 %660, 2
  %664 = fmul fast float %661, %655
  %665 = fmul fast float %657, %662
  %666 = fmul fast float %659, %663
  %667 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %668 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %669 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %667, %dx.types.Handle %668, float %664, float %665, float %666, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %670 = extractvalue %dx.types.ResRet.f32 %669, 0
  br label %671

; <label>:671                                     ; preds = %635, %581
  %672 = phi float [ %670, %635 ], [ 1.000000e+00, %581 ]
  %673 = fsub fast float %606, %611
  %674 = call float @dx.op.unary.f32(i32 22, float %673)  ; Frc(value)
  %675 = call float @dx.op.unary.f32(i32 7, float %674)  ; Saturate(value)
  %676 = fmul fast float %621, %675
  %677 = fptosi float %676 to i32
  %678 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %631, i32 0, i32 %677, i32 %629, i32 %630, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %679 = extractvalue %dx.types.ResRet.i32 %678, 0
  %680 = icmp eq i32 %679, -1
  br i1 %680, label %717, label %681

; <label>:681                                     ; preds = %671
  %682 = fmul fast float %621, %674
  %683 = fmul fast float %621, %614
  %684 = fmul fast float %621, %615
  %685 = call float @dx.op.unary.f32(i32 22, float %682)  ; Frc(value)
  %686 = call float @dx.op.unary.f32(i32 22, float %683)  ; Frc(value)
  %687 = call float @dx.op.unary.f32(i32 22, float %684)  ; Frc(value)
  %688 = shl i32 %679, 3
  %689 = and i32 %688, 1016
  %690 = lshr i32 %679, 4
  %691 = and i32 %690, 1016
  %692 = lshr i32 %679, 11
  %693 = and i32 %692, 8184
  %694 = uitofp i32 %689 to float
  %695 = uitofp i32 %691 to float
  %696 = uitofp i32 %693 to float
  %697 = fmul fast float %685, 7.000000e+00
  %698 = fmul fast float %686, 7.000000e+00
  %699 = fmul fast float %687, 7.000000e+00
  %700 = fadd fast float %694, 5.000000e-01
  %701 = fadd fast float %700, %697
  %702 = fadd fast float %695, 5.000000e-01
  %703 = fadd fast float %702, %698
  %704 = fadd fast float %696, 5.000000e-01
  %705 = fadd fast float %704, %699
  %706 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %707 = extractvalue %dx.types.CBufRet.f32 %706, 0
  %708 = extractvalue %dx.types.CBufRet.f32 %706, 1
  %709 = extractvalue %dx.types.CBufRet.f32 %706, 2
  %710 = fmul fast float %707, %701
  %711 = fmul fast float %703, %708
  %712 = fmul fast float %705, %709
  %713 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %714 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %715 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %713, %dx.types.Handle %714, float %710, float %711, float %712, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %716 = extractvalue %dx.types.ResRet.f32 %715, 0
  br label %717

; <label>:717                                     ; preds = %681, %671
  %718 = phi float [ %716, %681 ], [ 1.000000e+00, %671 ]
  %719 = fadd fast float %611, %607
  %720 = call float @dx.op.unary.f32(i32 22, float %606)  ; Frc(value)
  %721 = call float @dx.op.unary.f32(i32 22, float %719)  ; Frc(value)
  %722 = call float @dx.op.unary.f32(i32 7, float %720)  ; Saturate(value)
  %723 = call float @dx.op.unary.f32(i32 7, float %721)  ; Saturate(value)
  %724 = fmul fast float %621, %722
  %725 = fmul fast float %621, %723
  %726 = fptosi float %724 to i32
  %727 = fptosi float %725 to i32
  %728 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %631, i32 0, i32 %726, i32 %727, i32 %630, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %729 = extractvalue %dx.types.ResRet.i32 %728, 0
  %730 = icmp eq i32 %729, -1
  br i1 %730, label %767, label %731

; <label>:731                                     ; preds = %717
  %732 = fmul fast float %621, %720
  %733 = fmul fast float %621, %721
  %734 = fmul fast float %621, %615
  %735 = call float @dx.op.unary.f32(i32 22, float %732)  ; Frc(value)
  %736 = call float @dx.op.unary.f32(i32 22, float %733)  ; Frc(value)
  %737 = call float @dx.op.unary.f32(i32 22, float %734)  ; Frc(value)
  %738 = shl i32 %729, 3
  %739 = and i32 %738, 1016
  %740 = lshr i32 %729, 4
  %741 = and i32 %740, 1016
  %742 = lshr i32 %729, 11
  %743 = and i32 %742, 8184
  %744 = uitofp i32 %739 to float
  %745 = uitofp i32 %741 to float
  %746 = uitofp i32 %743 to float
  %747 = fmul fast float %735, 7.000000e+00
  %748 = fmul fast float %736, 7.000000e+00
  %749 = fmul fast float %737, 7.000000e+00
  %750 = fadd fast float %744, 5.000000e-01
  %751 = fadd fast float %750, %747
  %752 = fadd fast float %745, 5.000000e-01
  %753 = fadd fast float %752, %748
  %754 = fadd fast float %746, 5.000000e-01
  %755 = fadd fast float %754, %749
  %756 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %757 = extractvalue %dx.types.CBufRet.f32 %756, 0
  %758 = extractvalue %dx.types.CBufRet.f32 %756, 1
  %759 = extractvalue %dx.types.CBufRet.f32 %756, 2
  %760 = fmul fast float %757, %751
  %761 = fmul fast float %753, %758
  %762 = fmul fast float %755, %759
  %763 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %764 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %765 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %763, %dx.types.Handle %764, float %760, float %761, float %762, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %766 = extractvalue %dx.types.ResRet.f32 %765, 0
  br label %767

; <label>:767                                     ; preds = %731, %717
  %768 = phi float [ %766, %731 ], [ 1.000000e+00, %717 ]
  %769 = fsub fast float %607, %611
  %770 = call float @dx.op.unary.f32(i32 22, float %769)  ; Frc(value)
  %771 = call float @dx.op.unary.f32(i32 7, float %770)  ; Saturate(value)
  %772 = fmul fast float %621, %771
  %773 = fptosi float %772 to i32
  %774 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %631, i32 0, i32 %726, i32 %773, i32 %630, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %775 = extractvalue %dx.types.ResRet.i32 %774, 0
  %776 = icmp eq i32 %775, -1
  br i1 %776, label %813, label %777

; <label>:777                                     ; preds = %767
  %778 = fmul fast float %621, %720
  %779 = fmul fast float %621, %770
  %780 = fmul fast float %621, %615
  %781 = call float @dx.op.unary.f32(i32 22, float %778)  ; Frc(value)
  %782 = call float @dx.op.unary.f32(i32 22, float %779)  ; Frc(value)
  %783 = call float @dx.op.unary.f32(i32 22, float %780)  ; Frc(value)
  %784 = shl i32 %775, 3
  %785 = and i32 %784, 1016
  %786 = lshr i32 %775, 4
  %787 = and i32 %786, 1016
  %788 = lshr i32 %775, 11
  %789 = and i32 %788, 8184
  %790 = uitofp i32 %785 to float
  %791 = uitofp i32 %787 to float
  %792 = uitofp i32 %789 to float
  %793 = fmul fast float %781, 7.000000e+00
  %794 = fmul fast float %782, 7.000000e+00
  %795 = fmul fast float %783, 7.000000e+00
  %796 = fadd fast float %790, 5.000000e-01
  %797 = fadd fast float %796, %793
  %798 = fadd fast float %791, 5.000000e-01
  %799 = fadd fast float %798, %794
  %800 = fadd fast float %792, 5.000000e-01
  %801 = fadd fast float %800, %795
  %802 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %803 = extractvalue %dx.types.CBufRet.f32 %802, 0
  %804 = extractvalue %dx.types.CBufRet.f32 %802, 1
  %805 = extractvalue %dx.types.CBufRet.f32 %802, 2
  %806 = fmul fast float %803, %797
  %807 = fmul fast float %799, %804
  %808 = fmul fast float %801, %805
  %809 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %810 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %811 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %809, %dx.types.Handle %810, float %806, float %807, float %808, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %812 = extractvalue %dx.types.ResRet.f32 %811, 0
  br label %813

; <label>:813                                     ; preds = %777, %767
  %814 = phi float [ %812, %777 ], [ 1.000000e+00, %767 ]
  %815 = fadd fast float %611, %608
  %816 = call float @dx.op.unary.f32(i32 22, float %815)  ; Frc(value)
  %817 = call float @dx.op.unary.f32(i32 7, float %816)  ; Saturate(value)
  %818 = fmul fast float %621, %817
  %819 = fadd fast float %626, %818
  %820 = fptosi float %819 to i32
  %821 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %631, i32 0, i32 %726, i32 %629, i32 %820, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %822 = extractvalue %dx.types.ResRet.i32 %821, 0
  %823 = icmp eq i32 %822, -1
  br i1 %823, label %860, label %824

; <label>:824                                     ; preds = %813
  %825 = fmul fast float %621, %720
  %826 = fmul fast float %621, %614
  %827 = fmul fast float %621, %816
  %828 = call float @dx.op.unary.f32(i32 22, float %825)  ; Frc(value)
  %829 = call float @dx.op.unary.f32(i32 22, float %826)  ; Frc(value)
  %830 = call float @dx.op.unary.f32(i32 22, float %827)  ; Frc(value)
  %831 = shl i32 %822, 3
  %832 = and i32 %831, 1016
  %833 = lshr i32 %822, 4
  %834 = and i32 %833, 1016
  %835 = lshr i32 %822, 11
  %836 = and i32 %835, 8184
  %837 = uitofp i32 %832 to float
  %838 = uitofp i32 %834 to float
  %839 = uitofp i32 %836 to float
  %840 = fmul fast float %828, 7.000000e+00
  %841 = fmul fast float %829, 7.000000e+00
  %842 = fmul fast float %830, 7.000000e+00
  %843 = fadd fast float %837, 5.000000e-01
  %844 = fadd fast float %843, %840
  %845 = fadd fast float %838, 5.000000e-01
  %846 = fadd fast float %845, %841
  %847 = fadd fast float %839, 5.000000e-01
  %848 = fadd fast float %847, %842
  %849 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %850 = extractvalue %dx.types.CBufRet.f32 %849, 0
  %851 = extractvalue %dx.types.CBufRet.f32 %849, 1
  %852 = extractvalue %dx.types.CBufRet.f32 %849, 2
  %853 = fmul fast float %850, %844
  %854 = fmul fast float %846, %851
  %855 = fmul fast float %848, %852
  %856 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %857 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %858 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %856, %dx.types.Handle %857, float %853, float %854, float %855, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %859 = extractvalue %dx.types.ResRet.f32 %858, 0
  br label %860

; <label>:860                                     ; preds = %824, %813
  %861 = phi float [ %859, %824 ], [ 1.000000e+00, %813 ]
  %862 = fsub fast float %608, %611
  %863 = call float @dx.op.unary.f32(i32 22, float %862)  ; Frc(value)
  %864 = call float @dx.op.unary.f32(i32 7, float %863)  ; Saturate(value)
  %865 = fmul fast float %621, %864
  %866 = fadd fast float %626, %865
  %867 = fptosi float %866 to i32
  %868 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %631, i32 0, i32 %726, i32 %629, i32 %867, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %869 = extractvalue %dx.types.ResRet.i32 %868, 0
  %870 = icmp eq i32 %869, -1
  br i1 %870, label %907, label %871

; <label>:871                                     ; preds = %860
  %872 = fmul fast float %621, %720
  %873 = fmul fast float %621, %614
  %874 = fmul fast float %621, %863
  %875 = call float @dx.op.unary.f32(i32 22, float %872)  ; Frc(value)
  %876 = call float @dx.op.unary.f32(i32 22, float %873)  ; Frc(value)
  %877 = call float @dx.op.unary.f32(i32 22, float %874)  ; Frc(value)
  %878 = shl i32 %869, 3
  %879 = and i32 %878, 1016
  %880 = lshr i32 %869, 4
  %881 = and i32 %880, 1016
  %882 = lshr i32 %869, 11
  %883 = and i32 %882, 8184
  %884 = uitofp i32 %879 to float
  %885 = uitofp i32 %881 to float
  %886 = uitofp i32 %883 to float
  %887 = fmul fast float %875, 7.000000e+00
  %888 = fmul fast float %876, 7.000000e+00
  %889 = fmul fast float %877, 7.000000e+00
  %890 = fadd fast float %884, 5.000000e-01
  %891 = fadd fast float %890, %887
  %892 = fadd fast float %885, 5.000000e-01
  %893 = fadd fast float %892, %888
  %894 = fadd fast float %886, 5.000000e-01
  %895 = fadd fast float %894, %889
  %896 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %897 = extractvalue %dx.types.CBufRet.f32 %896, 0
  %898 = extractvalue %dx.types.CBufRet.f32 %896, 1
  %899 = extractvalue %dx.types.CBufRet.f32 %896, 2
  %900 = fmul fast float %897, %891
  %901 = fmul fast float %893, %898
  %902 = fmul fast float %895, %899
  %903 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %904 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %905 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %903, %dx.types.Handle %904, float %900, float %901, float %902, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %906 = extractvalue %dx.types.ResRet.f32 %905, 0
  br label %907

; <label>:907                                     ; preds = %871, %860
  %908 = phi float [ %906, %871 ], [ 1.000000e+00, %860 ]
  %909 = fsub fast float %672, %718
  %910 = fsub fast float %768, %814
  %911 = fsub fast float %861, %908
  %912 = fmul fast float %909, %909
  %913 = fmul fast float %910, %910
  %914 = fadd fast float %913, %912
  %915 = fmul fast float %911, %911
  %916 = fadd fast float %914, %915
  %917 = call float @dx.op.unary.f32(i32 24, float %916)  ; Sqrt(value)
  %918 = fcmp fast ogt float %917, 0x3F50624DE0000000
  br i1 %918, label %919, label %923

; <label>:919                                     ; preds = %907
  %920 = fdiv fast float %909, %917
  %921 = fdiv fast float %910, %917
  %922 = fdiv fast float %911, %917
  br label %923

; <label>:923                                     ; preds = %919, %907
  %924 = phi float [ %920, %919 ], [ %588, %907 ]
  %925 = phi float [ %921, %919 ], [ %589, %907 ]
  %926 = phi float [ %922, %919 ], [ %590, %907 ]
  %927 = add i32 %579, 195
  %928 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 %927)  ; CBufferLoadLegacy(handle,regIndex)
  %929 = extractvalue %dx.types.CBufRet.f32 %928, 3
  %930 = fmul fast float %610, %929
  %931 = fmul fast float %930, %924
  %932 = fmul fast float %930, %925
  %933 = fmul fast float %930, %926
  %934 = fadd fast float %931, %585
  %935 = fadd fast float %932, %586
  %936 = fadd fast float %933, %587
  %937 = fmul fast float %934, %596
  %938 = fmul fast float %935, %596
  %939 = fmul fast float %936, %596
  %940 = fadd fast float %937, %593
  %941 = fadd fast float %938, %594
  %942 = fadd fast float %939, %595
  %943 = call float @dx.op.unary.f32(i32 22, float %940)  ; Frc(value)
  %944 = call float @dx.op.unary.f32(i32 22, float %941)  ; Frc(value)
  %945 = call float @dx.op.unary.f32(i32 22, float %942)  ; Frc(value)
  %946 = call float @dx.op.unary.f32(i32 22, float %943)  ; Frc(value)
  %947 = call float @dx.op.unary.f32(i32 22, float %944)  ; Frc(value)
  %948 = call float @dx.op.unary.f32(i32 22, float %945)  ; Frc(value)
  %949 = call float @dx.op.unary.f32(i32 7, float %946)  ; Saturate(value)
  %950 = call float @dx.op.unary.f32(i32 7, float %947)  ; Saturate(value)
  %951 = call float @dx.op.unary.f32(i32 7, float %948)  ; Saturate(value)
  %952 = fmul fast float %621, %949
  %953 = fmul fast float %621, %950
  %954 = fmul fast float %621, %951
  %955 = fadd fast float %626, %954
  %956 = fptosi float %952 to i32
  %957 = fptosi float %953 to i32
  %958 = fptosi float %955 to i32
  %959 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %631, i32 0, i32 %956, i32 %957, i32 %958, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %960 = extractvalue %dx.types.ResRet.i32 %959, 0
  %961 = icmp eq i32 %960, -1
  br i1 %961, label %1586, label %962

; <label>:962                                     ; preds = %923
  %963 = call float @dx.op.unary.f32(i32 22, float %952)  ; Frc(value)
  %964 = call float @dx.op.unary.f32(i32 22, float %953)  ; Frc(value)
  %965 = call float @dx.op.unary.f32(i32 22, float %954)  ; Frc(value)
  %966 = call float @dx.op.unary.f32(i32 22, float %963)  ; Frc(value)
  %967 = call float @dx.op.unary.f32(i32 22, float %964)  ; Frc(value)
  %968 = call float @dx.op.unary.f32(i32 22, float %965)  ; Frc(value)
  %969 = fmul fast float %966, 4.000000e+00
  %970 = fmul fast float %967, 4.000000e+00
  %971 = fmul fast float %968, 4.000000e+00
  %972 = fptoui float %969 to i32
  %973 = fptoui float %970 to i32
  %974 = fptoui float %971 to i32
  %975 = and i32 %972, 1
  %976 = shl i32 %973, 1
  %977 = and i32 %976, 2
  %978 = shl i32 %974, 2
  %979 = and i32 %978, 4
  %980 = shl i32 %972, 2
  %981 = and i32 %980, 8
  %982 = shl i32 %973, 3
  %983 = and i32 %982, 16
  %984 = shl i32 %974, 4
  %985 = and i32 %984, 32
  %986 = shl i32 %960, 6
  %987 = and i32 %986, 1073741760
  %988 = or i32 %975, %987
  %989 = or i32 %988, %981
  %990 = or i32 %989, %977
  %991 = or i32 %990, %983
  %992 = or i32 %991, %979
  %993 = or i32 %992, %985
  %994 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %995 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %994, i32 %993, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %996 = extractvalue %dx.types.ResRet.i32 %995, 0
  %997 = extractvalue %dx.types.ResRet.i32 %995, 1
  %998 = extractvalue %dx.types.ResRet.i32 %995, 2
  %999 = extractvalue %dx.types.ResRet.i32 %995, 3
  %1000 = getelementptr inbounds [4 x i32], [4 x i32]* %50, i32 0, i32 0
  store i32 %996, i32* %1000, align 4
  %1001 = getelementptr inbounds [4 x i32], [4 x i32]* %50, i32 0, i32 1
  store i32 %997, i32* %1001, align 4
  %1002 = getelementptr inbounds [4 x i32], [4 x i32]* %50, i32 0, i32 2
  store i32 %998, i32* %1002, align 4
  %1003 = getelementptr inbounds [4 x i32], [4 x i32]* %50, i32 0, i32 3
  store i32 %999, i32* %1003, align 4
  %1004 = icmp eq i32 %996, -1
  br i1 %1004, label %1547, label %1005

; <label>:1005                                    ; preds = %962
  br label %1006

; <label>:1006                                    ; preds = %1535, %1005
  %1007 = phi i32 [ %1533, %1535 ], [ 0, %1005 ]
  %1008 = phi i32 [ %1532, %1535 ], [ 0, %1005 ]
  %1009 = phi i32 [ %1531, %1535 ], [ 0, %1005 ]
  %1010 = phi i32 [ %1530, %1535 ], [ 0, %1005 ]
  %1011 = phi float [ %1529, %1535 ], [ 0.000000e+00, %1005 ]
  %1012 = phi float [ %1528, %1535 ], [ 0.000000e+00, %1005 ]
  %1013 = phi float [ %1527, %1535 ], [ 0.000000e+00, %1005 ]
  %1014 = phi float [ %1526, %1535 ], [ 0.000000e+00, %1005 ]
  %1015 = phi float [ %1525, %1535 ], [ 0.000000e+00, %1005 ]
  %1016 = phi i32 [ %1537, %1535 ], [ %996, %1005 ]
  %1017 = shl i32 %1016, 2
  %1018 = and i32 %1017, 67108860
  %1019 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1020 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1019, i32 %1018, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1021 = extractvalue %dx.types.ResRet.i32 %1020, 0
  %1022 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %45, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1023 = extractvalue %dx.types.CBufRet.i32 %1022, 1
  %1024 = icmp ult i32 %1021, %1023
  br i1 %1024, label %1025, label %1524

; <label>:1025                                    ; preds = %1006
  %1026 = fmul fast float %930, 3.000000e+00
  %1027 = fmul fast float %578, %200
  %1028 = mul i32 %1021, 6
  %1029 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1030 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1029, i32 %1028, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1031 = extractvalue %dx.types.ResRet.f32 %1030, 0
  %1032 = extractvalue %dx.types.ResRet.f32 %1030, 1
  %1033 = extractvalue %dx.types.ResRet.f32 %1030, 2
  %1034 = or i32 %1028, 1
  %1035 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1029, i32 %1034, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1036 = extractvalue %dx.types.ResRet.f32 %1035, 0
  %1037 = extractvalue %dx.types.ResRet.f32 %1035, 1
  %1038 = extractvalue %dx.types.ResRet.f32 %1035, 2
  %1039 = extractvalue %dx.types.ResRet.f32 %1035, 3
  %1040 = add i32 %1028, 2
  %1041 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1029, i32 %1040, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1042 = extractvalue %dx.types.ResRet.f32 %1041, 0
  %1043 = extractvalue %dx.types.ResRet.f32 %1041, 1
  %1044 = extractvalue %dx.types.ResRet.f32 %1041, 2
  %1045 = extractvalue %dx.types.ResRet.f32 %1041, 3
  %1046 = add i32 %1028, 3
  %1047 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1029, i32 %1046, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1048 = extractvalue %dx.types.ResRet.f32 %1047, 0
  %1049 = extractvalue %dx.types.ResRet.f32 %1047, 1
  %1050 = extractvalue %dx.types.ResRet.f32 %1047, 2
  %1051 = extractvalue %dx.types.ResRet.f32 %1047, 3
  %1052 = add i32 %1028, 4
  %1053 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1029, i32 %1052, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1054 = extractvalue %dx.types.ResRet.f32 %1053, 0
  %1055 = extractvalue %dx.types.ResRet.f32 %1053, 1
  %1056 = extractvalue %dx.types.ResRet.f32 %1053, 2
  %1057 = extractvalue %dx.types.ResRet.f32 %1053, 3
  %1058 = bitcast float %1054 to i32
  %1059 = bitcast float %1055 to i32
  %1060 = add i32 %1028, 5
  %1061 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1029, i32 %1060, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1062 = extractvalue %dx.types.ResRet.f32 %1061, 0
  %1063 = extractvalue %dx.types.ResRet.f32 %1061, 1
  %1064 = extractvalue %dx.types.ResRet.f32 %1061, 2
  %1065 = extractvalue %dx.types.ResRet.f32 %1061, 3
  %1066 = and i32 %1059, 65536
  %1067 = icmp ne i32 %1066, 0
  %1068 = and i32 %1059, 131072
  %1069 = icmp ne i32 %1068, 0
  %1070 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 0
  %1071 = bitcast i32* %1070 to float*
  store float %1056, float* %1071, align 4, !tbaa !63, !alias.scope !67, !noalias !70
  %1072 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 1
  %1073 = bitcast i32* %1072 to float*
  store float %1057, float* %1073, align 4, !tbaa !63, !alias.scope !67, !noalias !70
  %1074 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 2
  %1075 = bitcast i32* %1074 to float*
  store float %1062, float* %1075, align 4, !tbaa !63, !alias.scope !67, !noalias !70
  %1076 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 3
  %1077 = bitcast i32* %1076 to float*
  store float %1063, float* %1077, align 4, !tbaa !63, !alias.scope !67, !noalias !70
  %1078 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 4
  %1079 = bitcast i32* %1078 to float*
  store float %1064, float* %1079, align 4, !tbaa !63, !alias.scope !67, !noalias !70
  %1080 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 5
  %1081 = bitcast i32* %1080 to float*
  store float %1065, float* %1081, align 4, !tbaa !63, !alias.scope !67, !noalias !70
  %1082 = fadd fast float %1026, 5.000000e+01
  %1083 = select i1 %1069, float %1082, float %1026
  %1084 = fmul fast float %1031, -2.097152e+06
  %1085 = fadd fast float %578, %190
  %1086 = fmul fast float %1085, %180
  %1087 = fadd fast float %1084, %141
  %1088 = fsub fast float %1087, %1039
  %1089 = fadd fast float %1088, %1086
  %1090 = fmul fast float %1032, -2.097152e+06
  %1091 = fmul fast float %1085, %181
  %1092 = fadd fast float %1090, %145
  %1093 = fsub fast float %1092, %1045
  %1094 = fadd fast float %1093, %1091
  %1095 = fmul fast float %1033, -2.097152e+06
  %1096 = fmul fast float %1085, %182
  %1097 = fadd fast float %1095, %149
  %1098 = fsub fast float %1097, %1051
  %1099 = fadd fast float %1098, %1096
  %1100 = fmul fast float %1089, %1036
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1042, float %1100)  ; FMad(a,b,c)
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1099, float %1048, float %1101)  ; FMad(a,b,c)
  %1103 = fmul fast float %1089, %1037
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1043, float %1103)  ; FMad(a,b,c)
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1099, float %1049, float %1104)  ; FMad(a,b,c)
  %1106 = fmul fast float %1089, %1038
  %1107 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1044, float %1106)  ; FMad(a,b,c)
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %1099, float %1050, float %1107)  ; FMad(a,b,c)
  %1109 = fmul fast float %1036, %924
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %925, float %1042, float %1109)  ; FMad(a,b,c)
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %926, float %1048, float %1110)  ; FMad(a,b,c)
  %1112 = fmul fast float %1037, %924
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %925, float %1043, float %1112)  ; FMad(a,b,c)
  %1114 = call float @dx.op.tertiary.f32(i32 46, float %926, float %1049, float %1113)  ; FMad(a,b,c)
  %1115 = fmul fast float %1038, %924
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %925, float %1044, float %1115)  ; FMad(a,b,c)
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %926, float %1050, float %1116)  ; FMad(a,b,c)
  %1118 = fmul fast float %1111, %1111
  %1119 = fmul fast float %1114, %1114
  %1120 = fmul fast float %1117, %1117
  %1121 = fcmp fast ogt float %1118, 0.000000e+00
  br i1 %1121, label %1122, label %1127

; <label>:1122                                    ; preds = %1025
  %1123 = fcmp uge float %1111, 0.000000e+00
  %1124 = zext i1 %1123 to i32
  %1125 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 %1124
  %1126 = load i32, i32* %1125, align 4, !tbaa !63, !noalias !70
  br label %1127

; <label>:1127                                    ; preds = %1122, %1025
  %1128 = phi i32 [ %1126, %1122 ], [ 0, %1025 ]
  %1129 = fcmp fast ogt float %1119, 0.000000e+00
  br i1 %1129, label %1130, label %1136

; <label>:1130                                    ; preds = %1127
  %1131 = fcmp fast olt float %1114, 0.000000e+00
  %1132 = select i1 %1131, i32 2, i32 3
  %1133 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 %1132
  %1134 = load i32, i32* %1133, align 4, !tbaa !63, !noalias !70
  %1135 = or i32 %1134, %1128
  br label %1136

; <label>:1136                                    ; preds = %1130, %1127
  %1137 = phi i32 [ %1135, %1130 ], [ %1128, %1127 ]
  %1138 = fcmp fast ogt float %1120, 0.000000e+00
  br i1 %1138, label %1139, label %1145

; <label>:1139                                    ; preds = %1136
  %1140 = fcmp fast olt float %1117, 0.000000e+00
  %1141 = select i1 %1140, i32 4, i32 5
  %1142 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 %1141
  %1143 = load i32, i32* %1142, align 4, !tbaa !63, !noalias !70
  %1144 = or i32 %1143, %1137
  br label %1145

; <label>:1145                                    ; preds = %1139, %1136
  %1146 = phi i32 [ %1144, %1139 ], [ %1137, %1136 ]
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1192, label %1148

; <label>:1148                                    ; preds = %1145
  br label %1149

; <label>:1149                                    ; preds = %1149, %1148
  %1150 = phi i32 [ %1155, %1149 ], [ %1146, %1148 ]
  %1151 = phi i32 [ %1189, %1149 ], [ 0, %1148 ]
  %1152 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1150)  ; FirstbitLo(value)
  %1153 = and i32 %1152, 31
  %1154 = shl i32 1, %1153
  %1155 = xor i32 %1154, %1150
  %1156 = add i32 %1152, %1058
  %1157 = mul i32 %1156, 10
  %1158 = add i32 %1157, 6
  %1159 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1160 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1159, i32 %1158, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1161 = extractvalue %dx.types.ResRet.f32 %1160, 3
  %1162 = add i32 %1157, 7
  %1163 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1159, i32 %1162, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1164 = extractvalue %dx.types.ResRet.f32 %1163, 3
  %1165 = add i32 %1157, 8
  %1166 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1159, i32 %1165, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1167 = extractvalue %dx.types.ResRet.f32 %1166, 3
  %1168 = add i32 %1157, 9
  %1169 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1159, i32 %1168, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1170 = extractvalue %dx.types.ResRet.f32 %1169, 0
  %1171 = extractvalue %dx.types.ResRet.f32 %1169, 1
  %1172 = extractvalue %dx.types.ResRet.f32 %1169, 2
  %1173 = fsub fast float %1102, %1161
  %1174 = fsub fast float %1105, %1164
  %1175 = fsub fast float %1108, %1167
  %1176 = call float @dx.op.unary.f32(i32 6, float %1173)  ; FAbs(value)
  %1177 = call float @dx.op.unary.f32(i32 6, float %1174)  ; FAbs(value)
  %1178 = call float @dx.op.unary.f32(i32 6, float %1175)  ; FAbs(value)
  %1179 = fmul fast float %1083, 5.000000e-01
  %1180 = fadd fast float %1170, %1179
  %1181 = fadd fast float %1171, %1179
  %1182 = fadd fast float %1172, %1179
  %1183 = fcmp fast ole float %1176, %1180
  %1184 = fcmp fast ole float %1177, %1181
  %1185 = fcmp fast ole float %1178, %1182
  %1186 = and i1 %1183, %1184
  %1187 = and i1 %1186, %1185
  %1188 = select i1 %1187, i32 %1154, i32 0
  %1189 = or i32 %1188, %1151
  %1190 = icmp eq i32 %1150, %1154
  br i1 %1190, label %1191, label %1149

; <label>:1191                                    ; preds = %1149
  br label %1192

; <label>:1192                                    ; preds = %1191, %1145
  %1193 = phi i32 [ 0, %1145 ], [ %1189, %1191 ]
  %1194 = select i1 %1067, i32 1, i32 %1193
  %1195 = icmp eq i32 %1194, 0
  br i1 %1195, label %1514, label %1196

; <label>:1196                                    ; preds = %1192
  br label %1197

; <label>:1197                                    ; preds = %1220, %1196
  %1198 = phi float [ %1221, %1220 ], [ %1015, %1196 ]
  %1199 = phi float [ %1222, %1220 ], [ %1014, %1196 ]
  %1200 = phi float [ %1223, %1220 ], [ %1013, %1196 ]
  %1201 = phi float [ %1224, %1220 ], [ %1012, %1196 ]
  %1202 = phi float [ %1225, %1220 ], [ %1011, %1196 ]
  %1203 = phi i32 [ %1226, %1220 ], [ %1010, %1196 ]
  %1204 = phi i32 [ %1227, %1220 ], [ %1009, %1196 ]
  %1205 = phi i32 [ %1228, %1220 ], [ %1008, %1196 ]
  %1206 = phi i32 [ %1210, %1220 ], [ %1194, %1196 ]
  %1207 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1206)  ; FirstbitLo(value)
  %1208 = and i32 %1207, 31
  %1209 = shl i32 1, %1208
  %1210 = xor i32 %1209, %1206
  %1211 = add i32 %1207, %1058
  %1212 = mul i32 %1211, 10
  %1213 = add i32 %1212, 4
  %1214 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1215 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1214, i32 %1213, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1216 = extractvalue %dx.types.ResRet.f32 %1215, 3
  %1217 = bitcast float %1216 to i32
  %1218 = and i32 %1217, 16777216
  %1219 = icmp eq i32 %1218, 0
  br i1 %1219, label %1220, label %1230

; <label>:1220                                    ; preds = %3503, %1512, %1480, %1449, %1287, %1234, %1230, %1197
  %1221 = phi float [ %1198, %1197 ], [ %3510, %1512 ], [ %1198, %1480 ], [ %1198, %3503 ], [ %1198, %1449 ], [ %1198, %1287 ], [ %1198, %1234 ], [ %1198, %1230 ]
  %1222 = phi float [ %1199, %1197 ], [ %1507, %1512 ], [ %1507, %1480 ], [ %1199, %3503 ], [ %1199, %1449 ], [ %1199, %1287 ], [ %1199, %1234 ], [ %1199, %1230 ]
  %1223 = phi float [ %1200, %1197 ], [ %1508, %1512 ], [ %1508, %1480 ], [ %1200, %3503 ], [ %1200, %1449 ], [ %1200, %1287 ], [ %1200, %1234 ], [ %1200, %1230 ]
  %1224 = phi float [ %1201, %1197 ], [ %1509, %1512 ], [ %1509, %1480 ], [ %1201, %3503 ], [ %1201, %1449 ], [ %1201, %1287 ], [ %1201, %1234 ], [ %1201, %1230 ]
  %1225 = phi float [ %1202, %1197 ], [ %1510, %1512 ], [ %1510, %1480 ], [ %1202, %3503 ], [ %1202, %1449 ], [ %1202, %1287 ], [ %1202, %1234 ], [ %1202, %1230 ]
  %1226 = phi i32 [ %1203, %1197 ], [ %1424, %1512 ], [ %1203, %1480 ], [ %1203, %3503 ], [ %1203, %1449 ], [ %1203, %1287 ], [ %1203, %1234 ], [ %1203, %1230 ]
  %1227 = phi i32 [ %1204, %1197 ], [ %1426, %1512 ], [ %1204, %1480 ], [ %1204, %3503 ], [ %1204, %1449 ], [ %1204, %1287 ], [ %1204, %1234 ], [ %1204, %1230 ]
  %1228 = phi i32 [ %1205, %1197 ], [ %1330, %1512 ], [ %1205, %1480 ], [ %1205, %3503 ], [ %1205, %1449 ], [ %1205, %1287 ], [ %1205, %1234 ], [ %1205, %1230 ]
  %1229 = icmp eq i32 %1206, %1209
  br i1 %1229, label %1513, label %1197

; <label>:1230                                    ; preds = %1197
  %1231 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %45, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1232 = extractvalue %dx.types.CBufRet.i32 %1231, 0
  %1233 = icmp ult i32 %1211, %1232
  br i1 %1233, label %1234, label %1220

; <label>:1234                                    ; preds = %1230
  %1235 = extractvalue %dx.types.ResRet.f32 %1215, 0
  %1236 = extractvalue %dx.types.ResRet.f32 %1215, 1
  %1237 = extractvalue %dx.types.ResRet.f32 %1215, 2
  %1238 = add i32 %1212, 5
  %1239 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1214, i32 %1238, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1240 = add i32 %1212, 6
  %1241 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1214, i32 %1240, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1242 = add i32 %1212, 7
  %1243 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1214, i32 %1242, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1244 = add i32 %1212, 8
  %1245 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1214, i32 %1244, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1246 = call float @dx.op.unary.f32(i32 6, float %1235)  ; FAbs(value)
  %1247 = call float @dx.op.unary.f32(i32 6, float %1236)  ; FAbs(value)
  %1248 = call float @dx.op.unary.f32(i32 6, float %1237)  ; FAbs(value)
  %1249 = lshr i32 %1217, 16
  %1250 = and i32 %1249, 15
  %1251 = extractvalue %dx.types.ResRet.f32 %1245, 3
  %1252 = extractvalue %dx.types.ResRet.f32 %1245, 2
  %1253 = extractvalue %dx.types.ResRet.f32 %1245, 1
  %1254 = extractvalue %dx.types.ResRet.f32 %1245, 0
  %1255 = extractvalue %dx.types.ResRet.f32 %1243, 3
  %1256 = extractvalue %dx.types.ResRet.f32 %1243, 2
  %1257 = extractvalue %dx.types.ResRet.f32 %1243, 1
  %1258 = extractvalue %dx.types.ResRet.f32 %1243, 0
  %1259 = extractvalue %dx.types.ResRet.f32 %1241, 3
  %1260 = extractvalue %dx.types.ResRet.f32 %1241, 2
  %1261 = extractvalue %dx.types.ResRet.f32 %1241, 1
  %1262 = extractvalue %dx.types.ResRet.f32 %1241, 0
  %1263 = fsub fast float %1102, %1259
  %1264 = fsub fast float %1105, %1255
  %1265 = fsub fast float %1108, %1251
  %1266 = fmul fast float %1263, %1262
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1258, float %1266)  ; FMad(a,b,c)
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %1265, float %1254, float %1267)  ; FMad(a,b,c)
  %1269 = fmul fast float %1263, %1261
  %1270 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1257, float %1269)  ; FMad(a,b,c)
  %1271 = call float @dx.op.tertiary.f32(i32 46, float %1265, float %1253, float %1270)  ; FMad(a,b,c)
  %1272 = fmul fast float %1263, %1260
  %1273 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1256, float %1272)  ; FMad(a,b,c)
  %1274 = call float @dx.op.tertiary.f32(i32 46, float %1265, float %1252, float %1273)  ; FMad(a,b,c)
  %1275 = call float @dx.op.unary.f32(i32 6, float %1268)  ; FAbs(value)
  %1276 = call float @dx.op.unary.f32(i32 6, float %1271)  ; FAbs(value)
  %1277 = call float @dx.op.unary.f32(i32 6, float %1274)  ; FAbs(value)
  %1278 = fmul fast float %1083, 5.000000e-01
  %1279 = fadd fast float %1246, %1278
  %1280 = fadd fast float %1247, %1278
  %1281 = fadd fast float %1248, %1278
  %1282 = fcmp fast ole float %1275, %1279
  %1283 = fcmp fast ole float %1276, %1280
  %1284 = fcmp fast ole float %1277, %1281
  %1285 = and i1 %1282, %1283
  %1286 = and i1 %1285, %1284
  br i1 %1286, label %1287, label %1220

; <label>:1287                                    ; preds = %1234
  %1288 = lshr i32 %1217, 8
  %1289 = and i32 %1288, 255
  %1290 = and i32 %1217, 255
  %1291 = extractvalue %dx.types.ResRet.f32 %1239, 3
  %1292 = extractvalue %dx.types.ResRet.f32 %1239, 2
  %1293 = extractvalue %dx.types.ResRet.f32 %1239, 1
  %1294 = extractvalue %dx.types.ResRet.f32 %1239, 0
  %1295 = fsub fast float -0.000000e+00, %1246
  %1296 = fsub fast float -0.000000e+00, %1247
  %1297 = call float @dx.op.binary.f32(i32 35, float %1268, float %1295)  ; FMax(a,b)
  %1298 = call float @dx.op.binary.f32(i32 35, float %1271, float %1296)  ; FMax(a,b)
  %1299 = call float @dx.op.binary.f32(i32 36, float %1297, float %1246)  ; FMin(a,b)
  %1300 = call float @dx.op.binary.f32(i32 36, float %1298, float %1247)  ; FMin(a,b)
  %1301 = fdiv fast float %1299, %1246
  %1302 = fdiv fast float %1300, %1247
  %1303 = fmul fast float %1301, 5.000000e-01
  %1304 = fmul fast float %1302, 5.000000e-01
  %1305 = fadd fast float %1303, 5.000000e-01
  %1306 = fsub fast float 5.000000e-01, %1304
  %1307 = call float @dx.op.unary.f32(i32 7, float %1305)  ; Saturate(value)
  %1308 = call float @dx.op.unary.f32(i32 7, float %1306)  ; Saturate(value)
  %1309 = call float @dx.op.binary.f32(i32 36, float %1307, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1310 = call float @dx.op.binary.f32(i32 36, float %1308, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1311 = select i1 %203, float %1292, float %1294
  %1312 = bitcast float %1311 to i32
  %1313 = and i32 %1312, 65535
  %1314 = lshr i32 %1312, 16
  %1315 = select i1 %203, float %1291, float %1293
  %1316 = bitcast float %1315 to i32
  %1317 = uitofp i32 %1313 to float
  %1318 = uitofp i32 %1314 to float
  %1319 = fmul fast float %1309, %1317
  %1320 = fmul fast float %1310, %1318
  %1321 = fptoui float %1319 to i32
  %1322 = fptoui float %1320 to i32
  %1323 = mul i32 %1322, %1313
  %1324 = add i32 %1321, %1316
  %1325 = add i32 %1324, %1323
  %1326 = shl i32 %1325, 3
  %1327 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1328 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1327, i32 %1326, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1329 = extractvalue %dx.types.ResRet.i32 %1328, 0
  %1330 = extractvalue %dx.types.ResRet.i32 %1328, 1
  %1331 = shl i32 %1329, 3
  %1332 = and i32 %1331, 32760
  %1333 = lshr i32 %1329, 9
  %1334 = and i32 %1333, 32760
  %1335 = lshr i32 %1329, 24
  %1336 = and i32 %1335, 15
  %1337 = lshr i32 %1329, 28
  %1338 = add nuw nsw i32 %1336, 25
  %1339 = add nuw nsw i32 %1337, 25
  %1340 = and i32 %1338, 31
  %1341 = and i32 %1339, 31
  %1342 = shl i32 1, %1340
  %1343 = shl i32 1, %1341
  %1344 = icmp ugt i32 %1336, 7
  %1345 = icmp slt i32 %1329, 0
  %1346 = select i1 %1344, i32 %1342, i32 1
  %1347 = select i1 %1345, i32 %1343, i32 1
  %1348 = uitofp i32 %1346 to float
  %1349 = uitofp i32 %1347 to float
  %1350 = fmul fast float %1348, %1309
  %1351 = fmul fast float %1349, %1310
  %1352 = fptoui float %1350 to i32
  %1353 = fptoui float %1351 to i32
  %1354 = shl i32 1, %1336
  %1355 = shl i32 1, %1337
  %1356 = call float @dx.op.unary.f32(i32 22, float %1350)  ; Frc(value)
  %1357 = call float @dx.op.unary.f32(i32 22, float %1351)  ; Frc(value)
  %1358 = icmp eq i32 %1352, 0
  %1359 = icmp eq i32 %1353, 0
  %1360 = select i1 %1358, float 0.000000e+00, float 5.000000e-01
  %1361 = select i1 %1359, float 0.000000e+00, float 5.000000e-01
  %1362 = add i32 %1352, 1
  %1363 = add i32 %1353, 1
  %1364 = icmp eq i32 %1362, %1346
  %1365 = icmp eq i32 %1363, %1347
  %1366 = uitofp i32 %1354 to float
  %1367 = select i1 %1344, float 1.280000e+02, float %1366
  %1368 = uitofp i32 %1355 to float
  %1369 = select i1 %1345, float 1.280000e+02, float %1368
  %1370 = fsub fast float %1367, %1360
  %1371 = fsub fast float %1369, %1361
  %1372 = select i1 %1364, float -0.000000e+00, float -5.000000e-01
  %1373 = fadd fast float %1370, %1372
  %1374 = select i1 %1365, float -0.000000e+00, float -5.000000e-01
  %1375 = fadd fast float %1371, %1374
  %1376 = fmul fast float %1373, %1356
  %1377 = fmul fast float %1375, %1357
  %1378 = fadd fast float %1376, %1360
  %1379 = fadd fast float %1377, %1361
  %1380 = fadd fast float %1367, -1.500000e+00
  %1381 = fadd fast float %1369, -1.500000e+00
  %1382 = call float @dx.op.binary.f32(i32 35, float %1378, float 5.000000e-01)  ; FMax(a,b)
  %1383 = call float @dx.op.binary.f32(i32 35, float %1379, float 5.000000e-01)  ; FMax(a,b)
  %1384 = call float @dx.op.binary.f32(i32 36, float %1382, float %1380)  ; FMin(a,b)
  %1385 = call float @dx.op.binary.f32(i32 36, float %1383, float %1381)  ; FMin(a,b)
  %1386 = uitofp i32 %1332 to float
  %1387 = uitofp i32 %1334 to float
  %1388 = fadd fast float %1384, %1386
  %1389 = fadd fast float %1385, %1387
  %1390 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1391 = extractvalue %dx.types.CBufRet.f32 %1390, 0
  %1392 = extractvalue %dx.types.CBufRet.f32 %1390, 1
  %1393 = fmul fast float %1391, %1388
  %1394 = fmul fast float %1392, %1389
  %1395 = call float @dx.op.binary.f32(i32 35, float %1246, float %1247)  ; FMax(a,b)
  %1396 = call float @dx.op.binary.f32(i32 35, float %1027, float 1.000000e+00)  ; FMax(a,b)
  %1397 = fdiv fast float %1395, %1396
  %1398 = call float @dx.op.unary.f32(i32 23, float %1397)  ; Log(value)
  %1399 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1400 = extractvalue %dx.types.CBufRet.f32 %1399, 0
  %1401 = fadd fast float %1400, %1398
  %1402 = call float @dx.op.binary.f32(i32 35, float %1401, float 3.000000e+00)  ; FMax(a,b)
  %1403 = call float @dx.op.binary.f32(i32 36, float %1402, float 1.100000e+01)  ; FMin(a,b)
  %1404 = fptoui float %1403 to i32
  %1405 = sub i32 %1404, %1290
  %1406 = sub i32 %1404, %1289
  %1407 = add i32 %1405, 25
  %1408 = add i32 %1406, 25
  %1409 = and i32 %1407, 31
  %1410 = and i32 %1408, 31
  %1411 = shl i32 1, %1409
  %1412 = shl i32 1, %1410
  %1413 = icmp ugt i32 %1405, 7
  %1414 = icmp ugt i32 %1406, 7
  %1415 = uitofp i32 %1411 to float
  %1416 = select i1 %1413, float %1415, float 1.000000e+00
  %1417 = uitofp i32 %1412 to float
  %1418 = select i1 %1414, float %1417, float 1.000000e+00
  %1419 = fmul fast float %1416, %1309
  %1420 = fmul fast float %1418, %1310
  %1421 = fptoui float %1419 to i32
  %1422 = fptoui float %1420 to i32
  %1423 = shl i32 %1404, 24
  %1424 = or i32 %1423, %1211
  %1425 = shl i32 %1422, 8
  %1426 = add i32 %1425, %1421
  %1427 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1428 = extractvalue %dx.types.CBufRet.f32 %1427, 2
  %1429 = extractvalue %dx.types.CBufRet.f32 %1427, 3
  %1430 = fmul fast float %1428, %1393
  %1431 = fmul fast float %1429, %1394
  %1432 = fadd fast float %1430, 0x3FE0100000000000
  %1433 = fadd fast float %1431, 0x3FE0100000000000
  %1434 = call float @dx.op.unary.f32(i32 22, float %1432)  ; Frc(value)
  %1435 = call float @dx.op.unary.f32(i32 22, float %1433)  ; Frc(value)
  %1436 = fsub fast float 1.000000e+00, %1434
  %1437 = fmul fast float %1436, %1435
  %1438 = fmul fast float %1435, %1434
  %1439 = fsub fast float 1.000000e+00, %1435
  %1440 = fmul fast float %1439, %1434
  %1441 = fmul fast float %1439, %1436
  %1442 = icmp eq i32 %1336, 0
  br i1 %1442, label %1220, label %1443

; <label>:1443                                    ; preds = %1287
  br i1 %1067, label %1449, label %1444

; <label>:1444                                    ; preds = %1443
  %1445 = icmp ult i32 %1250, 2
  br i1 %1445, label %1449, label %1446

; <label>:1446                                    ; preds = %1444
  %1447 = icmp ult i32 %1250, 4
  %1448 = select i1 %1447, float %1119, float %1120
  br label %1449

; <label>:1449                                    ; preds = %1446, %1444, %1443
  %1450 = phi float [ 1.000000e+00, %1443 ], [ %1118, %1444 ], [ %1448, %1446 ]
  %1451 = fcmp fast ogt float %1450, 0.000000e+00
  br i1 %1451, label %1452, label %1220

; <label>:1452                                    ; preds = %1449
  %1453 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1454 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1455 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1453, %dx.types.Handle %1454, float %1393, float %1394, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1456 = extractvalue %dx.types.ResRet.f32 %1455, 0
  %1457 = extractvalue %dx.types.ResRet.f32 %1455, 1
  %1458 = extractvalue %dx.types.ResRet.f32 %1455, 2
  %1459 = extractvalue %dx.types.ResRet.f32 %1455, 3
  %1460 = fdiv fast float %1274, %1248
  %1461 = fmul fast float %1460, 5.000000e-01
  %1462 = fsub fast float 5.000000e-01, %1461
  %1463 = fdiv fast float %1083, %1248
  %1464 = fmul fast float %1463, 2.500000e-01
  %1465 = fcmp uge float %1456, 1.000000e+00
  %1466 = or i1 %1067, %1465
  %1467 = select i1 %1465, float 0.000000e+00, float 1.000000e+00
  br i1 %1466, label %1475, label %1468

; <label>:1468                                    ; preds = %1452
  %1469 = fsub fast float %1462, %1456
  %1470 = call float @dx.op.unary.f32(i32 6, float %1469)  ; FAbs(value)
  %1471 = fsub fast float %1470, %1463
  %1472 = fdiv fast float %1471, %1464
  %1473 = call float @dx.op.unary.f32(i32 7, float %1472)  ; Saturate(value)
  %1474 = fsub fast float 1.000000e+00, %1473
  br label %1475

; <label>:1475                                    ; preds = %1468, %1452
  %1476 = phi float [ %1474, %1468 ], [ %1467, %1452 ]
  %1477 = fcmp uge float %1457, 1.000000e+00
  %1478 = or i1 %1067, %1477
  %1479 = select i1 %1477, float 0.000000e+00, float 1.000000e+00
  br i1 %1478, label %3479, label %3472

; <label>:1480                                    ; preds = %3503
  %1481 = fdiv fast float %3505, %3509
  %1482 = fdiv fast float %3506, %3509
  %1483 = fdiv fast float %3507, %3509
  %1484 = fdiv fast float %3508, %3509
  %1485 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1486 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1485, %dx.types.Handle %1454, float %1393, float %1394, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1487 = extractvalue %dx.types.ResRet.f32 %1486, 0
  %1488 = extractvalue %dx.types.ResRet.f32 %1486, 1
  %1489 = extractvalue %dx.types.ResRet.f32 %1486, 2
  %1490 = extractvalue %dx.types.ResRet.f32 %1486, 3
  %1491 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1485, %dx.types.Handle %1454, float %1393, float %1394, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1492 = extractvalue %dx.types.ResRet.f32 %1491, 0
  %1493 = extractvalue %dx.types.ResRet.f32 %1491, 1
  %1494 = extractvalue %dx.types.ResRet.f32 %1491, 2
  %1495 = extractvalue %dx.types.ResRet.f32 %1491, 3
  %1496 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1485, %dx.types.Handle %1454, float %1393, float %1394, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1497 = extractvalue %dx.types.ResRet.f32 %1496, 0
  %1498 = extractvalue %dx.types.ResRet.f32 %1496, 1
  %1499 = extractvalue %dx.types.ResRet.f32 %1496, 2
  %1500 = extractvalue %dx.types.ResRet.f32 %1496, 3
  %1501 = call float @dx.op.dot4.f32(i32 56, float %1487, float %1488, float %1489, float %1490, float %1481, float %1482, float %1483, float %1484)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1502 = call float @dx.op.dot4.f32(i32 56, float %1492, float %1493, float %1494, float %1495, float %1481, float %1482, float %1483, float %1484)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1503 = call float @dx.op.dot4.f32(i32 56, float %1497, float %1498, float %1499, float %1500, float %1481, float %1482, float %1483, float %1484)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1504 = fmul fast float %1501, %3510
  %1505 = fmul fast float %1502, %3510
  %1506 = fmul fast float %1503, %3510
  %1507 = fadd fast float %1504, %1199
  %1508 = fadd fast float %1505, %1200
  %1509 = fadd fast float %1506, %1201
  %1510 = fadd fast float %3510, %1202
  %1511 = fcmp fast ogt float %3510, %1198
  br i1 %1511, label %1512, label %1220

; <label>:1512                                    ; preds = %1480
  br label %1220

; <label>:1513                                    ; preds = %1220
  br label %1514

; <label>:1514                                    ; preds = %1513, %1192
  %1515 = phi float [ %1015, %1192 ], [ %1221, %1513 ]
  %1516 = phi float [ %1014, %1192 ], [ %1222, %1513 ]
  %1517 = phi float [ %1013, %1192 ], [ %1223, %1513 ]
  %1518 = phi float [ %1012, %1192 ], [ %1224, %1513 ]
  %1519 = phi float [ %1011, %1192 ], [ %1225, %1513 ]
  %1520 = phi i32 [ %1010, %1192 ], [ %1226, %1513 ]
  %1521 = phi i32 [ %1009, %1192 ], [ %1227, %1513 ]
  %1522 = phi i32 [ %1008, %1192 ], [ %1228, %1513 ]
  %1523 = fcmp fast ult float %1519, 0x3FECCCCCC0000000
  br i1 %1523, label %1524, label %1539

; <label>:1524                                    ; preds = %1514, %1006
  %1525 = phi float [ %1515, %1514 ], [ %1015, %1006 ]
  %1526 = phi float [ %1516, %1514 ], [ %1014, %1006 ]
  %1527 = phi float [ %1517, %1514 ], [ %1013, %1006 ]
  %1528 = phi float [ %1518, %1514 ], [ %1012, %1006 ]
  %1529 = phi float [ %1519, %1514 ], [ %1011, %1006 ]
  %1530 = phi i32 [ %1520, %1514 ], [ %1010, %1006 ]
  %1531 = phi i32 [ %1521, %1514 ], [ %1009, %1006 ]
  %1532 = phi i32 [ %1522, %1514 ], [ %1008, %1006 ]
  %1533 = add nuw nsw i32 %1007, 1
  %1534 = icmp ult i32 %1533, 4
  br i1 %1534, label %1535, label %1539

; <label>:1535                                    ; preds = %1524
  %1536 = getelementptr [4 x i32], [4 x i32]* %50, i32 0, i32 %1533
  %1537 = load i32, i32* %1536, align 4, !tbaa !63, !noalias !79
  %1538 = icmp eq i32 %1537, -1
  br i1 %1538, label %1539, label %1006

; <label>:1539                                    ; preds = %1535, %1524, %1514
  %1540 = phi float [ %1516, %1514 ], [ %1526, %1535 ], [ %1526, %1524 ]
  %1541 = phi float [ %1517, %1514 ], [ %1527, %1535 ], [ %1527, %1524 ]
  %1542 = phi float [ %1518, %1514 ], [ %1528, %1535 ], [ %1528, %1524 ]
  %1543 = phi float [ %1519, %1514 ], [ %1529, %1535 ], [ %1529, %1524 ]
  %1544 = phi i32 [ %1520, %1514 ], [ %1530, %1535 ], [ %1530, %1524 ]
  %1545 = phi i32 [ %1521, %1514 ], [ %1531, %1535 ], [ %1531, %1524 ]
  %1546 = phi i32 [ %1522, %1514 ], [ %1532, %1535 ], [ %1532, %1524 ]
  br label %1547

; <label>:1547                                    ; preds = %1539, %962
  %1548 = phi float [ 0.000000e+00, %962 ], [ %1540, %1539 ]
  %1549 = phi float [ 0.000000e+00, %962 ], [ %1541, %1539 ]
  %1550 = phi float [ 0.000000e+00, %962 ], [ %1542, %1539 ]
  %1551 = phi float [ 0.000000e+00, %962 ], [ %1543, %1539 ]
  %1552 = phi i32 [ 0, %962 ], [ %1544, %1539 ]
  %1553 = phi i32 [ 0, %962 ], [ %1545, %1539 ]
  %1554 = phi i32 [ 0, %962 ], [ %1546, %1539 ]
  %1555 = fcmp fast ogt float %1551, 0.000000e+00
  br i1 %1555, label %1556, label %1586

; <label>:1556                                    ; preds = %1547
  %1557 = fdiv fast float %1548, %1551
  %1558 = fdiv fast float %1549, %1551
  %1559 = fdiv fast float %1550, %1551
  %1560 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1561 = extractvalue %dx.types.CBufRet.i32 %1560, 1
  %1562 = and i32 %1561, %59
  %1563 = and i32 %1561, %60
  %1564 = extractvalue %dx.types.CBufRet.i32 %1560, 2
  %1565 = extractvalue %dx.types.CBufRet.i32 %1560, 3
  %1566 = icmp eq i32 %1562, %1564
  %1567 = icmp eq i32 %1563, %1565
  %1568 = and i1 %1566, %1567
  br i1 %1568, label %1569, label %1586

; <label>:1569                                    ; preds = %1556
  %1570 = extractvalue %dx.types.CBufRet.i32 %1560, 0
  %1571 = icmp ne i32 %1570, 0
  %1572 = fcmp fast ogt float %1551, 0x3FB99999A0000000
  %1573 = and i1 %1572, %1571
  br i1 %1573, label %1574, label %1586

; <label>:1574                                    ; preds = %1569
  %1575 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1576 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1575, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1577 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1578 = extractvalue %dx.types.CBufRet.i32 %1577, 0
  %1579 = icmp ult i32 %1576, %1578
  br i1 %1579, label %1580, label %1582

; <label>:1580                                    ; preds = %1574
  %1581 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1581, i32 %1576, i32 0, i32 %1552, i32 %1553, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1582

; <label>:1582                                    ; preds = %1580, %1574
  %1583 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1584 = extractvalue %dx.types.CBufRet.i32 %1583, 1
  %1585 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1585, i32 %1554, i32 0, i32 %1584, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1586

; <label>:1586                                    ; preds = %1582, %1569, %1556, %1547, %923, %577
  %1587 = phi float [ 0.000000e+00, %577 ], [ %924, %923 ], [ %924, %1582 ], [ %924, %1569 ], [ %924, %1556 ], [ %924, %1547 ]
  %1588 = phi float [ 0.000000e+00, %577 ], [ %925, %923 ], [ %925, %1582 ], [ %925, %1569 ], [ %925, %1556 ], [ %925, %1547 ]
  %1589 = phi float [ 0.000000e+00, %577 ], [ %926, %923 ], [ %926, %1582 ], [ %926, %1569 ], [ %926, %1556 ], [ %926, %1547 ]
  %1590 = phi float [ %188, %577 ], [ %578, %923 ], [ %578, %1582 ], [ %578, %1569 ], [ %578, %1556 ], [ %578, %1547 ]
  %1591 = phi float [ 1.000000e+00, %577 ], [ 0.000000e+00, %923 ], [ 0.000000e+00, %1582 ], [ 0.000000e+00, %1569 ], [ 0.000000e+00, %1556 ], [ 0.000000e+00, %1547 ]
  %1592 = phi float [ 0.000000e+00, %577 ], [ 0.000000e+00, %923 ], [ %1557, %1582 ], [ %1557, %1569 ], [ %1557, %1556 ], [ 0.000000e+00, %1547 ]
  %1593 = phi float [ 0.000000e+00, %577 ], [ 0.000000e+00, %923 ], [ %1558, %1582 ], [ %1558, %1569 ], [ %1558, %1556 ], [ 0.000000e+00, %1547 ]
  %1594 = phi float [ 0.000000e+00, %577 ], [ 0.000000e+00, %923 ], [ %1559, %1582 ], [ %1559, %1569 ], [ %1559, %1556 ], [ 0.000000e+00, %1547 ]
  %1595 = call float @dx.op.binary.f32(i32 36, float %188, float %1590)  ; FMin(a,b)
  br label %1596

; <label>:1596                                    ; preds = %1586, %256
  %1597 = phi float [ %1587, %1586 ], [ 0.000000e+00, %256 ]
  %1598 = phi float [ %1588, %1586 ], [ 0.000000e+00, %256 ]
  %1599 = phi float [ %1589, %1586 ], [ 0.000000e+00, %256 ]
  %1600 = phi float [ %1595, %1586 ], [ %188, %256 ]
  %1601 = phi float [ %1591, %1586 ], [ 1.000000e+00, %256 ]
  %1602 = phi float [ %1592, %1586 ], [ 0.000000e+00, %256 ]
  %1603 = phi float [ %1593, %1586 ], [ 0.000000e+00, %256 ]
  %1604 = phi float [ %1594, %1586 ], [ 0.000000e+00, %256 ]
  %1605 = fcmp fast ole float %1601, 5.000000e-01
  br i1 %1605, label %1606, label %1879

; <label>:1606                                    ; preds = %1596
  %1607 = fmul fast float %1600, %180
  %1608 = fmul fast float %1600, %181
  %1609 = fmul fast float %1600, %182
  %1610 = fadd fast float %1607, %194
  %1611 = fadd fast float %1608, %195
  %1612 = fadd fast float %1609, %196
  %1613 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 81)  ; CBufferLoadLegacy(handle,regIndex)
  %1614 = extractvalue %dx.types.CBufRet.f32 %1613, 0
  %1615 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1616 = extractvalue %dx.types.CBufRet.f32 %1615, 3
  %1617 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1618 = extractvalue %dx.types.CBufRet.f32 %1617, 3
  %1619 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1620 = extractvalue %dx.types.CBufRet.f32 %1619, 3
  %1621 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1622 = extractvalue %dx.types.CBufRet.f32 %1621, 3
  %1623 = fmul fast float %1616, %1610
  %1624 = call float @dx.op.tertiary.f32(i32 46, float %1611, float %1618, float %1623)  ; FMad(a,b,c)
  %1625 = call float @dx.op.tertiary.f32(i32 46, float %1612, float %1620, float %1624)  ; FMad(a,b,c)
  %1626 = fadd fast float %1625, %1622
  %1627 = fcmp fast ogt float %1626, 0.000000e+00
  br i1 %1627, label %1628, label %1879

; <label>:1628                                    ; preds = %1606
  %1629 = extractvalue %dx.types.CBufRet.f32 %1621, 1
  %1630 = extractvalue %dx.types.CBufRet.f32 %1619, 1
  %1631 = extractvalue %dx.types.CBufRet.f32 %1617, 1
  %1632 = extractvalue %dx.types.CBufRet.f32 %1615, 1
  %1633 = fmul fast float %1632, %1610
  %1634 = call float @dx.op.tertiary.f32(i32 46, float %1611, float %1631, float %1633)  ; FMad(a,b,c)
  %1635 = call float @dx.op.tertiary.f32(i32 46, float %1612, float %1630, float %1634)  ; FMad(a,b,c)
  %1636 = fadd fast float %1635, %1629
  %1637 = extractvalue %dx.types.CBufRet.f32 %1621, 0
  %1638 = extractvalue %dx.types.CBufRet.f32 %1619, 0
  %1639 = extractvalue %dx.types.CBufRet.f32 %1617, 0
  %1640 = extractvalue %dx.types.CBufRet.f32 %1615, 0
  %1641 = fmul fast float %1640, %1610
  %1642 = call float @dx.op.tertiary.f32(i32 46, float %1611, float %1639, float %1641)  ; FMad(a,b,c)
  %1643 = call float @dx.op.tertiary.f32(i32 46, float %1612, float %1638, float %1642)  ; FMad(a,b,c)
  %1644 = fadd fast float %1643, %1637
  %1645 = fdiv fast float %1644, %1626
  %1646 = fdiv fast float %1636, %1626
  %1647 = call float @dx.op.unary.f32(i32 6, float %1645)  ; FAbs(value)
  %1648 = call float @dx.op.unary.f32(i32 6, float %1646)  ; FAbs(value)
  %1649 = fcmp fast olt float %1647, 1.000000e+00
  %1650 = fcmp fast olt float %1648, 1.000000e+00
  %1651 = and i1 %1649, %1650
  br i1 %1651, label %1652, label %1879

; <label>:1652                                    ; preds = %1628
  %1653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1654 = extractvalue %dx.types.CBufRet.f32 %1653, 0
  %1655 = extractvalue %dx.types.CBufRet.f32 %1653, 1
  %1656 = fmul fast float %1654, %1645
  %1657 = fmul fast float %1655, %1646
  %1658 = extractvalue %dx.types.CBufRet.f32 %1653, 2
  %1659 = extractvalue %dx.types.CBufRet.f32 %1653, 3
  %1660 = fadd fast float %1656, %1659
  %1661 = fadd fast float %1657, %1658
  %1662 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1663 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1664 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1662, %dx.types.Handle %1663, float %1660, float %1661, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1665 = extractvalue %dx.types.ResRet.f32 %1664, 0
  %1666 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %1667 = extractvalue %dx.types.CBufRet.f32 %1666, 0
  %1668 = fmul fast float %1667, %1665
  %1669 = extractvalue %dx.types.CBufRet.f32 %1666, 1
  %1670 = fadd fast float %1668, %1669
  %1671 = extractvalue %dx.types.CBufRet.f32 %1666, 2
  %1672 = fmul fast float %1671, %1665
  %1673 = extractvalue %dx.types.CBufRet.f32 %1666, 3
  %1674 = fsub fast float %1672, %1673
  %1675 = fdiv fast float 1.000000e+00, %1674
  %1676 = fadd fast float %1670, %1675
  %1677 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %1678 = extractvalue %dx.types.CBufRet.f32 %1677, 0
  %1679 = extractvalue %dx.types.CBufRet.f32 %1677, 1
  %1680 = extractvalue %dx.types.CBufRet.f32 %1677, 2
  %1681 = fsub fast float %1678, %1610
  %1682 = fsub fast float %1679, %1611
  %1683 = fsub fast float %1680, %1612
  %1684 = call float @dx.op.dot3.f32(i32 55, float %1681, float %1682, float %1683, float %1681, float %1682, float %1683)  ; Dot3(ax,ay,az,bx,by,bz)
  %1685 = call float @dx.op.unary.f32(i32 25, float %1684)  ; Rsqrt(value)
  %1686 = fsub fast float %1626, %1676
  %1687 = call float @dx.op.unary.f32(i32 6, float %1686)  ; FAbs(value)
  %1688 = call float @dx.op.binary.f32(i32 35, float %1676, float 0x3EE4F8B580000000)  ; FMax(a,b)
  %1689 = fmul fast float %1688, %1614
  %1690 = fcmp fast olt float %1687, %1689
  br i1 %1690, label %1691, label %1879

; <label>:1691                                    ; preds = %1652
  %1692 = fmul fast float %1683, %1685
  %1693 = fmul fast float %1682, %1685
  %1694 = fmul fast float %1681, %1685
  %1695 = call float @dx.op.dot3.f32(i32 55, float %1694, float %1693, float %1692, float %1597, float %1598, float %1599)  ; Dot3(ax,ay,az,bx,by,bz)
  %1696 = extractvalue %dx.types.CBufRet.f32 %1613, 1
  %1697 = fcmp fast ult float %1695, %1696
  br i1 %1697, label %1879, label %1698

; <label>:1698                                    ; preds = %1691
  %1699 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 113)  ; CBufferLoadLegacy(handle,regIndex)
  %1700 = extractvalue %dx.types.CBufRet.f32 %1699, 0
  %1701 = extractvalue %dx.types.CBufRet.f32 %1699, 1
  %1702 = extractvalue %dx.types.CBufRet.f32 %1699, 2
  %1703 = extractvalue %dx.types.CBufRet.f32 %1699, 3
  %1704 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %1705 = extractvalue %dx.types.CBufRet.f32 %1704, 0
  %1706 = extractvalue %dx.types.CBufRet.f32 %1704, 1
  %1707 = extractvalue %dx.types.CBufRet.f32 %1704, 2
  %1708 = extractvalue %dx.types.CBufRet.f32 %1704, 3
  %1709 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 115)  ; CBufferLoadLegacy(handle,regIndex)
  %1710 = extractvalue %dx.types.CBufRet.f32 %1709, 0
  %1711 = extractvalue %dx.types.CBufRet.f32 %1709, 1
  %1712 = extractvalue %dx.types.CBufRet.f32 %1709, 2
  %1713 = extractvalue %dx.types.CBufRet.f32 %1709, 3
  %1714 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %1715 = extractvalue %dx.types.CBufRet.f32 %1714, 0
  %1716 = extractvalue %dx.types.CBufRet.f32 %1714, 1
  %1717 = extractvalue %dx.types.CBufRet.f32 %1714, 2
  %1718 = extractvalue %dx.types.CBufRet.f32 %1714, 3
  %1719 = fmul fast float %1700, %1645
  %1720 = call float @dx.op.tertiary.f32(i32 46, float %1646, float %1705, float %1719)  ; FMad(a,b,c)
  %1721 = call float @dx.op.tertiary.f32(i32 46, float %1665, float %1710, float %1720)  ; FMad(a,b,c)
  %1722 = fadd fast float %1721, %1715
  %1723 = fmul fast float %1701, %1645
  %1724 = call float @dx.op.tertiary.f32(i32 46, float %1646, float %1706, float %1723)  ; FMad(a,b,c)
  %1725 = call float @dx.op.tertiary.f32(i32 46, float %1665, float %1711, float %1724)  ; FMad(a,b,c)
  %1726 = fadd fast float %1725, %1716
  %1727 = fmul fast float %1702, %1645
  %1728 = call float @dx.op.tertiary.f32(i32 46, float %1646, float %1707, float %1727)  ; FMad(a,b,c)
  %1729 = call float @dx.op.tertiary.f32(i32 46, float %1665, float %1712, float %1728)  ; FMad(a,b,c)
  %1730 = fadd fast float %1729, %1717
  %1731 = fmul fast float %1703, %1645
  %1732 = call float @dx.op.tertiary.f32(i32 46, float %1646, float %1708, float %1731)  ; FMad(a,b,c)
  %1733 = call float @dx.op.tertiary.f32(i32 46, float %1665, float %1713, float %1732)  ; FMad(a,b,c)
  %1734 = fadd fast float %1733, %1718
  %1735 = fdiv fast float %1722, %1734
  %1736 = fdiv fast float %1726, %1734
  %1737 = fdiv fast float %1730, %1734
  %1738 = fsub fast float %1645, %1735
  %1739 = fsub fast float %1646, %1736
  %1740 = fsub fast float %1665, %1737
  %1741 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1742 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1741, %dx.types.Handle %1663, float %1660, float %1661, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1743 = extractvalue %dx.types.ResRet.f32 %1742, 0
  %1744 = fcmp fast ogt float %1743, 0.000000e+00
  br i1 %1744, label %1745, label %1770

; <label>:1745                                    ; preds = %1698
  %1746 = extractvalue %dx.types.ResRet.f32 %1742, 3
  %1747 = extractvalue %dx.types.ResRet.f32 %1742, 2
  %1748 = extractvalue %dx.types.ResRet.f32 %1742, 1
  %1749 = fmul fast float %1743, 0x4010083560000000
  %1750 = fmul fast float %1748, 0x4010083560000000
  %1751 = fadd fast float %1749, 0xC000082560000000
  %1752 = fadd fast float %1750, 0xC000082560000000
  %1753 = fmul fast float %1747, 6.553500e+04
  %1754 = call float @dx.op.unary.f32(i32 26, float %1753)  ; Round_ne(value)
  %1755 = fptoui float %1754 to i32
  %1756 = shl i32 %1755, 16
  %1757 = fmul fast float %1746, 6.553500e+04
  %1758 = call float @dx.op.unary.f32(i32 26, float %1757)  ; Round_ne(value)
  %1759 = fptoui float %1758 to i32
  %1760 = or i32 %1756, %1759
  %1761 = bitcast i32 %1760 to float
  %1762 = call float @dx.op.unary.f32(i32 6, float %1751)  ; FAbs(value)
  %1763 = call float @dx.op.unary.f32(i32 6, float %1752)  ; FAbs(value)
  %1764 = fmul fast float %1743, 0x4000083560000000
  %1765 = fadd fast float %1764, 0xBFF0082560000000
  %1766 = fmul fast float %1765, %1762
  %1767 = fmul fast float %1748, 0x4000083560000000
  %1768 = fadd fast float %1767, 0xBFF0082560000000
  %1769 = fmul fast float %1768, %1763
  br label %1770

; <label>:1770                                    ; preds = %1745, %1698
  %1771 = phi float [ %1766, %1745 ], [ %1738, %1698 ]
  %1772 = phi float [ %1769, %1745 ], [ %1739, %1698 ]
  %1773 = phi float [ %1761, %1745 ], [ %1740, %1698 ]
  %1774 = fsub fast float %1645, %1771
  %1775 = fsub fast float %1646, %1772
  %1776 = call float @dx.op.unary.f32(i32 6, float %1774)  ; FAbs(value)
  %1777 = call float @dx.op.unary.f32(i32 6, float %1775)  ; FAbs(value)
  %1778 = fmul fast float %1776, 5.000000e+00
  %1779 = fmul fast float %1777, 5.000000e+00
  %1780 = fadd fast float %1778, -4.000000e+00
  %1781 = fadd fast float %1779, -4.000000e+00
  %1782 = call float @dx.op.unary.f32(i32 7, float %1780)  ; Saturate(value)
  %1783 = call float @dx.op.unary.f32(i32 7, float %1781)  ; Saturate(value)
  %1784 = call float @dx.op.dot2.f32(i32 54, float %1782, float %1783, float %1782, float %1783)  ; Dot2(ax,ay,bx,by)
  %1785 = fsub fast float 1.000000e+00, %1784
  %1786 = call float @dx.op.unary.f32(i32 7, float %1785)  ; Saturate(value)
  %1787 = fmul fast float %1647, 5.000000e+00
  %1788 = fmul fast float %1648, 5.000000e+00
  %1789 = fadd fast float %1787, -4.000000e+00
  %1790 = fadd fast float %1788, -4.000000e+00
  %1791 = call float @dx.op.unary.f32(i32 7, float %1789)  ; Saturate(value)
  %1792 = call float @dx.op.unary.f32(i32 7, float %1790)  ; Saturate(value)
  %1793 = call float @dx.op.dot2.f32(i32 54, float %1791, float %1792, float %1791, float %1792)  ; Dot2(ax,ay,bx,by)
  %1794 = fsub fast float 1.000000e+00, %1793
  %1795 = call float @dx.op.unary.f32(i32 7, float %1794)  ; Saturate(value)
  %1796 = call float @dx.op.binary.f32(i32 36, float %1795, float %1786)  ; FMin(a,b)
  %1797 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1798 = extractvalue %dx.types.CBufRet.i32 %1797, 1
  %1799 = uitofp i32 %1798 to float
  %1800 = fadd fast float %270, 5.000000e-01
  %1801 = fadd fast float %271, 5.000000e-01
  %1802 = fmul fast float %1799, 0x4040551EC0000000
  %1803 = fmul fast float %1799, 0x4027A147A0000000
  %1804 = fadd fast float %1800, %1802
  %1805 = fadd fast float %1801, %1803
  %1806 = call float @dx.op.dot2.f32(i32 54, float %1804, float %1805, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %1807 = call float @dx.op.unary.f32(i32 22, float %1806)  ; Frc(value)
  %1808 = fmul fast float %1807, 0x404A7DD040000000
  %1809 = call float @dx.op.unary.f32(i32 22, float %1808)  ; Frc(value)
  %1810 = fcmp uge float %1796, %1809
  %1811 = zext i1 %1810 to i32
  br i1 %1810, label %1812, label %1833

; <label>:1812                                    ; preds = %1770
  %1813 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1814 = extractvalue %dx.types.CBufRet.f32 %1813, 0
  %1815 = extractvalue %dx.types.CBufRet.f32 %1813, 1
  %1816 = fmul fast float %1814, %1774
  %1817 = fmul fast float %1815, %1775
  %1818 = extractvalue %dx.types.CBufRet.f32 %1813, 2
  %1819 = extractvalue %dx.types.CBufRet.f32 %1813, 3
  %1820 = fadd fast float %1816, %1818
  %1821 = fadd fast float %1817, %1819
  %1822 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1823 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1822, %dx.types.Handle %1663, float %1820, float %1821, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1824 = extractvalue %dx.types.ResRet.f32 %1823, 0
  %1825 = fsub fast float %1773, %1665
  %1826 = fadd fast float %1825, %1824
  %1827 = call float @dx.op.unary.f32(i32 6, float %1826)  ; FAbs(value)
  %1828 = fmul fast float %1809, 1.500000e+00
  %1829 = fadd fast float %1828, 5.000000e-01
  %1830 = fmul fast float %1829, %1614
  %1831 = fcmp fast olt float %1827, %1830
  %1832 = zext i1 %1831 to i32
  br label %1833

; <label>:1833                                    ; preds = %1812, %1770
  %1834 = phi i32 [ %1832, %1812 ], [ %1811, %1770 ]
  %1835 = icmp eq i32 %1834, 0
  br i1 %1835, label %1879, label %1836

; <label>:1836                                    ; preds = %1833
  %1837 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1838 = extractvalue %dx.types.CBufRet.f32 %1837, 0
  %1839 = extractvalue %dx.types.CBufRet.f32 %1837, 1
  %1840 = fmul fast float %1838, %1774
  %1841 = fmul fast float %1839, %1775
  %1842 = extractvalue %dx.types.CBufRet.f32 %1837, 2
  %1843 = extractvalue %dx.types.CBufRet.f32 %1837, 3
  %1844 = fadd fast float %1840, %1842
  %1845 = fadd fast float %1841, %1843
  %1846 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1847 = extractvalue %dx.types.CBufRet.f32 %1846, 2
  %1848 = extractvalue %dx.types.CBufRet.f32 %1846, 3
  %1849 = extractvalue %dx.types.CBufRet.f32 %1846, 0
  %1850 = extractvalue %dx.types.CBufRet.f32 %1846, 1
  %1851 = call float @dx.op.binary.f32(i32 35, float %1844, float %1849)  ; FMax(a,b)
  %1852 = call float @dx.op.binary.f32(i32 35, float %1845, float %1850)  ; FMax(a,b)
  %1853 = call float @dx.op.binary.f32(i32 36, float %1851, float %1847)  ; FMin(a,b)
  %1854 = call float @dx.op.binary.f32(i32 36, float %1852, float %1848)  ; FMin(a,b)
  %1855 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1856 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1855, %dx.types.Handle %1663, float %1853, float %1854, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1857 = extractvalue %dx.types.ResRet.f32 %1856, 0
  %1858 = extractvalue %dx.types.ResRet.f32 %1856, 1
  %1859 = extractvalue %dx.types.ResRet.f32 %1856, 2
  %1860 = fsub fast float -0.000000e+00, %1857
  %1861 = fsub fast float -0.000000e+00, %1858
  %1862 = fsub fast float -0.000000e+00, %1859
  %1863 = call float @dx.op.binary.f32(i32 36, float %1860, float 0.000000e+00)  ; FMin(a,b)
  %1864 = call float @dx.op.binary.f32(i32 36, float %1861, float 0.000000e+00)  ; FMin(a,b)
  %1865 = call float @dx.op.binary.f32(i32 36, float %1862, float 0.000000e+00)  ; FMin(a,b)
  %1866 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1867 = extractvalue %dx.types.CBufRet.f32 %1866, 0
  %1868 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1869 = extractvalue %dx.types.CBufRet.f32 %1868, 3
  %1870 = fmul fast float %1863, %1867
  %1871 = fmul fast float %1870, %1869
  %1872 = fsub fast float -0.000000e+00, %1871
  %1873 = fmul fast float %1864, %1867
  %1874 = fmul fast float %1873, %1869
  %1875 = fsub fast float -0.000000e+00, %1874
  %1876 = fmul fast float %1865, %1867
  %1877 = fmul fast float %1876, %1869
  %1878 = fsub fast float -0.000000e+00, %1877
  br label %1879

; <label>:1879                                    ; preds = %1836, %1833, %1691, %1652, %1628, %1606, %1596
  %1880 = phi float [ %1602, %1596 ], [ %1872, %1836 ], [ %1602, %1833 ], [ %1602, %1691 ], [ %1602, %1652 ], [ %1602, %1628 ], [ %1602, %1606 ]
  %1881 = phi float [ %1603, %1596 ], [ %1875, %1836 ], [ %1603, %1833 ], [ %1603, %1691 ], [ %1603, %1652 ], [ %1603, %1628 ], [ %1603, %1606 ]
  %1882 = phi float [ %1604, %1596 ], [ %1878, %1836 ], [ %1604, %1833 ], [ %1604, %1691 ], [ %1604, %1652 ], [ %1604, %1628 ], [ %1604, %1606 ]
  %1883 = fsub fast float 1.000000e+00, %1601
  %1884 = call float @dx.op.unary.f32(i32 7, float %1883)  ; Saturate(value)
  br i1 %1605, label %3127, label %1885

; <label>:1885                                    ; preds = %1879
  %1886 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1887 = extractvalue %dx.types.CBufRet.f32 %1886, 2
  %1888 = fmul fast float %1887, 0x3FEFAE1480000000
  %1889 = fcmp fast olt float %188, %1888
  br i1 %1889, label %1890, label %3101

; <label>:1890                                    ; preds = %1885
  %1891 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1892 = extractvalue %dx.types.CBufRet.i32 %1891, 1
  %1893 = uitofp i32 %1892 to float
  %1894 = fmul fast float %1893, 0x4040551EC0000000
  %1895 = fmul fast float %1893, 0x4027A147A0000000
  %1896 = fadd fast float %1894, %270
  %1897 = fadd fast float %1895, %271
  %1898 = call float @dx.op.dot2.f32(i32 54, float %1896, float %1897, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %1899 = call float @dx.op.unary.f32(i32 22, float %1898)  ; Frc(value)
  %1900 = fmul fast float %1899, 0x404A7DD040000000
  %1901 = call float @dx.op.unary.f32(i32 22, float %1900)  ; Frc(value)
  %1902 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %1903 = extractvalue %dx.types.CBufRet.i32 %1902, 3
  %1904 = icmp eq i32 %1903, 0
  br i1 %1904, label %1959, label %1905

; <label>:1905                                    ; preds = %1890
  br label %1906

; <label>:1906                                    ; preds = %1954, %1905
  %1907 = phi i32 [ %1955, %1954 ], [ 0, %1905 ]
  %1908 = add i32 %1907, 47
  %1909 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 %1908)  ; CBufferLoadLegacy(handle,regIndex)
  %1910 = extractvalue %dx.types.CBufRet.f32 %1909, 1
  %1911 = fmul fast float %1910, %141
  %1912 = fmul fast float %1910, %145
  %1913 = fmul fast float %1910, %149
  %1914 = add i32 %1907, 53
  %1915 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 %1914)  ; CBufferLoadLegacy(handle,regIndex)
  %1916 = extractvalue %dx.types.CBufRet.f32 %1915, 0
  %1917 = extractvalue %dx.types.CBufRet.f32 %1915, 1
  %1918 = extractvalue %dx.types.CBufRet.f32 %1915, 2
  %1919 = fadd fast float %1911, %1916
  %1920 = fadd fast float %1912, %1917
  %1921 = fadd fast float %1913, %1918
  %1922 = fadd fast float %1919, -5.000000e-01
  %1923 = fadd fast float %1920, -5.000000e-01
  %1924 = fadd fast float %1921, -5.000000e-01
  %1925 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %1926 = extractvalue %dx.types.CBufRet.f32 %1925, 3
  %1927 = fmul fast float %1922, %1926
  %1928 = fmul fast float %1923, %1926
  %1929 = fmul fast float %1924, %1926
  %1930 = call float @dx.op.unary.f32(i32 7, float %1927)  ; Saturate(value)
  %1931 = call float @dx.op.unary.f32(i32 7, float %1928)  ; Saturate(value)
  %1932 = call float @dx.op.unary.f32(i32 7, float %1929)  ; Saturate(value)
  %1933 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %1934 = extractvalue %dx.types.CBufRet.i32 %1933, 2
  %1935 = uitofp i32 %1934 to float
  %1936 = fsub fast float -5.000000e-01, %1919
  %1937 = fadd fast float %1936, %1935
  %1938 = fsub fast float -5.000000e-01, %1920
  %1939 = fadd fast float %1938, %1935
  %1940 = fsub fast float -5.000000e-01, %1921
  %1941 = fadd fast float %1940, %1935
  %1942 = fmul fast float %1937, %1926
  %1943 = fmul fast float %1939, %1926
  %1944 = fmul fast float %1941, %1926
  %1945 = call float @dx.op.unary.f32(i32 7, float %1942)  ; Saturate(value)
  %1946 = call float @dx.op.unary.f32(i32 7, float %1943)  ; Saturate(value)
  %1947 = call float @dx.op.unary.f32(i32 7, float %1944)  ; Saturate(value)
  %1948 = call float @dx.op.binary.f32(i32 36, float %1946, float %1947)  ; FMin(a,b)
  %1949 = call float @dx.op.binary.f32(i32 36, float %1945, float %1948)  ; FMin(a,b)
  %1950 = call float @dx.op.binary.f32(i32 36, float %1931, float %1932)  ; FMin(a,b)
  %1951 = call float @dx.op.binary.f32(i32 36, float %1930, float %1950)  ; FMin(a,b)
  %1952 = call float @dx.op.binary.f32(i32 36, float %1951, float %1949)  ; FMin(a,b)
  %1953 = fcmp fast ogt float %1952, %1901
  br i1 %1953, label %1962, label %1954

; <label>:1954                                    ; preds = %1906
  %1955 = add i32 %1907, 1
  %1956 = extractvalue %dx.types.CBufRet.i32 %1933, 3
  %1957 = icmp ult i32 %1955, %1956
  br i1 %1957, label %1906, label %1958

; <label>:1958                                    ; preds = %1954
  br label %1959

; <label>:1959                                    ; preds = %1958, %1890
  %1960 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %1961 = extractvalue %dx.types.CBufRet.i32 %1960, 3
  br label %1963

; <label>:1962                                    ; preds = %1906
  br label %1963

; <label>:1963                                    ; preds = %1962, %1959
  %1964 = phi i32 [ %1961, %1959 ], [ %1907, %1962 ]
  %1965 = add i32 %1964, 47
  %1966 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 %1965)  ; CBufferLoadLegacy(handle,regIndex)
  %1967 = extractvalue %dx.types.CBufRet.f32 %1966, 1
  %1968 = fmul fast float %1967, %141
  %1969 = fmul fast float %1967, %145
  %1970 = fmul fast float %1967, %149
  %1971 = add i32 %1964, 53
  %1972 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 %1971)  ; CBufferLoadLegacy(handle,regIndex)
  %1973 = extractvalue %dx.types.CBufRet.f32 %1972, 0
  %1974 = extractvalue %dx.types.CBufRet.f32 %1972, 1
  %1975 = extractvalue %dx.types.CBufRet.f32 %1972, 2
  %1976 = call float @dx.op.unary.f32(i32 12, float %183)  ; Cos(value)
  %1977 = fsub fast float 1.000000e+00, %1976
  %1978 = call float @dx.op.unary.f32(i32 24, float %1977)  ; Sqrt(value)
  %1979 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %1980 = extractvalue %dx.types.CBufRet.i32 %1979, 0
  %1981 = uitofp i32 %1980 to float
  %1982 = fmul fast float %1981, %1978
  %1983 = extractvalue %dx.types.CBufRet.i32 %1979, 2
  %1984 = uitofp i32 %1983 to float
  %1985 = call float @dx.op.unary.f32(i32 23, float %1982)  ; Log(value)
  %1986 = call float @dx.op.binary.f32(i32 35, float %1985, float 0.000000e+00)  ; FMax(a,b)
  %1987 = call float @dx.op.binary.f32(i32 36, float %1986, float %1984)  ; FMin(a,b)
  %1988 = fadd fast float %1973, -5.000000e-01
  %1989 = fadd fast float %1988, %1968
  %1990 = fadd fast float %1974, -5.000000e-01
  %1991 = fadd fast float %1990, %1969
  %1992 = fadd fast float %1975, -5.000000e-01
  %1993 = fadd fast float %1992, %1970
  %1994 = call float @dx.op.unary.f32(i32 27, float %1989)  ; Round_ni(value)
  %1995 = call float @dx.op.unary.f32(i32 27, float %1991)  ; Round_ni(value)
  %1996 = call float @dx.op.unary.f32(i32 27, float %1993)  ; Round_ni(value)
  %1997 = fptosi float %1994 to i32
  %1998 = fptosi float %1995 to i32
  %1999 = fptosi float %1996 to i32
  %2000 = call float @dx.op.unary.f32(i32 22, float %1989)  ; Frc(value)
  %2001 = call float @dx.op.unary.f32(i32 22, float %1991)  ; Frc(value)
  %2002 = call float @dx.op.unary.f32(i32 22, float %1993)  ; Frc(value)
  %2003 = extractvalue %dx.types.CBufRet.f32 %1966, 0
  %2004 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %2005 = extractvalue %dx.types.CBufRet.i32 %2004, 2
  %2006 = mul i32 %2005, %1964
  %2007 = add i32 %2006, %1997
  %2008 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %2009 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2007, i32 %1998, i32 %1999, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2010 = extractvalue %dx.types.ResRet.i32 %2009, 0
  %2011 = uitofp i32 %1997 to float
  %2012 = uitofp i32 %1998 to float
  %2013 = uitofp i32 %1999 to float
  %2014 = extractvalue %dx.types.CBufRet.f32 %1966, 2
  %2015 = fmul fast float %2014, %2011
  %2016 = fmul fast float %2014, %2012
  %2017 = fmul fast float %2014, %2013
  %2018 = add i32 %1964, 59
  %2019 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 %2018)  ; CBufferLoadLegacy(handle,regIndex)
  %2020 = extractvalue %dx.types.CBufRet.f32 %2019, 0
  %2021 = extractvalue %dx.types.CBufRet.f32 %2019, 1
  %2022 = extractvalue %dx.types.CBufRet.f32 %2019, 2
  %2023 = fadd fast float %2015, %2020
  %2024 = fadd fast float %2016, %2021
  %2025 = fadd fast float %2017, %2022
  %2026 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2027 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2010, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2028 = extractvalue %dx.types.ResRet.f32 %2027, 0
  %2029 = extractvalue %dx.types.ResRet.f32 %2027, 1
  %2030 = extractvalue %dx.types.ResRet.f32 %2027, 2
  %2031 = fadd fast float %2023, %2028
  %2032 = fadd fast float %2024, %2029
  %2033 = fadd fast float %2025, %2030
  %2034 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %2035 = extractvalue %dx.types.CBufRet.f32 %2034, 0
  %2036 = fmul fast float %2035, %2003
  %2037 = fsub fast float %141, %2031
  %2038 = fsub fast float %145, %2032
  %2039 = fsub fast float %149, %2033
  %2040 = call float @dx.op.dot3.f32(i32 55, float %2037, float %2038, float %2039, float %2037, float %2038, float %2039)  ; Dot3(ax,ay,az,bx,by,bz)
  %2041 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2042 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2037, float %2038, float %2039)  ; Dot3(ax,ay,az,bx,by,bz)
  %2043 = fmul fast float %2042, 2.000000e+00
  %2044 = fmul fast float %2036, %2036
  %2045 = fsub fast float %2040, %2044
  %2046 = fmul fast float %2043, %2043
  %2047 = fmul fast float %2041, 4.000000e+00
  %2048 = fmul fast float %2047, %2045
  %2049 = fsub fast float %2046, %2048
  %2050 = fcmp fast ult float %2049, 0.000000e+00
  br i1 %2050, label %2056, label %2051, !dx.controlflow.hints !80

; <label>:2051                                    ; preds = %1963
  %2052 = call float @dx.op.unary.f32(i32 24, float %2049)  ; Sqrt(value)
  %2053 = fsub fast float %2052, %2043
  %2054 = fmul fast float %2041, 2.000000e+00
  %2055 = fdiv fast float %2053, %2054
  br label %2056

; <label>:2056                                    ; preds = %2051, %1963
  %2057 = phi float [ %2055, %2051 ], [ -1.000000e+00, %1963 ]
  %2058 = fmul fast float %2057, %180
  %2059 = fmul fast float %2057, %181
  %2060 = fmul fast float %2057, %182
  %2061 = fadd fast float %2037, %2058
  %2062 = fadd fast float %2038, %2059
  %2063 = fadd fast float %2039, %2060
  %2064 = fmul fast float %2057, %2057
  %2065 = call float @dx.op.dot3.f32(i32 55, float %2061, float %2062, float %2063, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2066 = fmul fast float %2065, %2036
  %2067 = fdiv fast float %2064, %2066
  %2068 = call float @dx.op.dot3.f32(i32 55, float %2061, float %2062, float %2063, float %2061, float %2062, float %2063)  ; Dot3(ax,ay,az,bx,by,bz)
  %2069 = call float @dx.op.unary.f32(i32 25, float %2068)  ; Rsqrt(value)
  %2070 = fmul fast float %2069, %2061
  %2071 = fmul fast float %2069, %2062
  %2072 = fmul fast float %2069, %2063
  %2073 = call float @dx.op.unary.f32(i32 6, float %2070)  ; FAbs(value)
  %2074 = call float @dx.op.unary.f32(i32 6, float %2071)  ; FAbs(value)
  %2075 = call float @dx.op.unary.f32(i32 6, float %2072)  ; FAbs(value)
  %2076 = fsub fast float 1.000000e+00, %2075
  %2077 = call float @dx.op.unary.f32(i32 24, float %2076)  ; Sqrt(value)
  %2078 = call float @dx.op.binary.f32(i32 36, float %2073, float %2074)  ; FMin(a,b)
  %2079 = call float @dx.op.binary.f32(i32 35, float %2073, float %2074)  ; FMax(a,b)
  %2080 = fadd fast float %2079, 0x3BF0000000000000
  %2081 = fdiv fast float %2078, %2080
  %2082 = fmul fast float %2081, 0x3F99BE1040000000
  %2083 = fsub fast float 0x3FA5746D00000000, %2082
  %2084 = fmul fast float %2083, %2081
  %2085 = fadd fast float %2084, 0x3FB692C5C0000000
  %2086 = fmul fast float %2085, %2081
  %2087 = fadd fast float %2086, 0xBFCFA8A1C0000000
  %2088 = fmul fast float %2087, %2081
  %2089 = fadd fast float %2088, 0x3F79384B40000000
  %2090 = fmul fast float %2089, %2081
  %2091 = fadd fast float %2090, 0x3FE45BF7C0000000
  %2092 = fmul fast float %2091, %2081
  %2093 = fadd fast float %2092, 0x3ED10F8960000000
  %2094 = fcmp fast olt float %2073, %2074
  %2095 = fsub fast float 0x3FEFFFF780000000, %2092
  %2096 = select i1 %2094, float %2095, float %2093
  %2097 = fmul fast float %2096, %2077
  %2098 = fsub fast float %2077, %2097
  %2099 = fcmp fast olt float %2072, 0.000000e+00
  %2100 = extractvalue %dx.types.CBufRet.i32 %1979, 1
  %2101 = and i32 %1983, 31
  %2102 = shl i32 1, %2101
  %2103 = uitofp i32 %2102 to float
  %2104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %2105 = icmp eq i32 %2010, -1
  br i1 %2105, label %2151, label %2106

; <label>:2106                                    ; preds = %2056
  %2107 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2108 = extractvalue %dx.types.CBufRet.i32 %2107, 1
  %2109 = and i32 %2108, 31
  %2110 = lshr i32 %2010, %2109
  %2111 = mul i32 %2110, %2100
  %2112 = uitofp i32 %2111 to float
  %2113 = fsub fast float 1.000000e+00, %2098
  %2114 = select i1 %2099, float %2113, float %2097
  %2115 = bitcast float %2114 to i32
  %2116 = bitcast float %2071 to i32
  %2117 = and i32 %2116, -2147483648
  %2118 = xor i32 %2115, %2117
  %2119 = bitcast i32 %2118 to float
  %2120 = fmul fast float %2119, 5.000000e-01
  %2121 = fadd fast float %2120, 5.000000e-01
  %2122 = fmul fast float %2121, %1981
  %2123 = fadd fast float %2122, %2103
  %2124 = fadd fast float %2123, %2112
  %2125 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2126 = fmul fast float %2124, %2125
  %2127 = extractvalue %dx.types.CBufRet.i32 %2107, 0
  %2128 = and i32 %2127, %2010
  %2129 = mul i32 %2128, %2100
  %2130 = uitofp i32 %2129 to float
  %2131 = fsub fast float 1.000000e+00, %2097
  %2132 = select i1 %2099, float %2131, float %2098
  %2133 = bitcast float %2132 to i32
  %2134 = bitcast float %2070 to i32
  %2135 = and i32 %2134, -2147483648
  %2136 = xor i32 %2133, %2135
  %2137 = bitcast i32 %2136 to float
  %2138 = fmul fast float %2137, 5.000000e-01
  %2139 = fadd fast float %2138, 5.000000e-01
  %2140 = fmul fast float %2139, %1981
  %2141 = fadd fast float %2140, %2103
  %2142 = fadd fast float %2141, %2130
  %2143 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %2144 = fmul fast float %2142, %2143
  %2145 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2146 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2147 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2145, %dx.types.Handle %2146, float %2144, float %2126, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2148 = extractvalue %dx.types.ResRet.f32 %2147, 0
  %2149 = extractvalue %dx.types.ResRet.f32 %2147, 1
  %2150 = extractvalue %dx.types.ResRet.f32 %2147, 2
  br label %2151

; <label>:2151                                    ; preds = %2106, %2056
  %2152 = phi float [ %2148, %2106 ], [ 0.000000e+00, %2056 ]
  %2153 = phi float [ %2149, %2106 ], [ 0.000000e+00, %2056 ]
  %2154 = phi float [ %2150, %2106 ], [ 0.000000e+00, %2056 ]
  %2155 = fmul fast float %2152, %2067
  %2156 = fmul fast float %2153, %2067
  %2157 = fmul fast float %2154, %2067
  %2158 = add i32 %1999, 1
  %2159 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2007, i32 %1998, i32 %2158, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2160 = extractvalue %dx.types.ResRet.i32 %2159, 0
  %2161 = uitofp i32 %2158 to float
  %2162 = fmul fast float %2014, %2161
  %2163 = fadd fast float %2162, %2022
  %2164 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2160, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2165 = extractvalue %dx.types.ResRet.f32 %2164, 0
  %2166 = extractvalue %dx.types.ResRet.f32 %2164, 1
  %2167 = extractvalue %dx.types.ResRet.f32 %2164, 2
  %2168 = fadd fast float %2023, %2165
  %2169 = fadd fast float %2024, %2166
  %2170 = fadd fast float %2163, %2167
  %2171 = fsub fast float %141, %2168
  %2172 = fsub fast float %145, %2169
  %2173 = fsub fast float %149, %2170
  %2174 = call float @dx.op.dot3.f32(i32 55, float %2171, float %2172, float %2173, float %2171, float %2172, float %2173)  ; Dot3(ax,ay,az,bx,by,bz)
  %2175 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2171, float %2172, float %2173)  ; Dot3(ax,ay,az,bx,by,bz)
  %2176 = fmul fast float %2175, 2.000000e+00
  %2177 = fsub fast float %2174, %2044
  %2178 = fmul fast float %2176, %2176
  %2179 = fmul fast float %2047, %2177
  %2180 = fsub fast float %2178, %2179
  %2181 = fcmp fast ult float %2180, 0.000000e+00
  br i1 %2181, label %2187, label %2182, !dx.controlflow.hints !80

; <label>:2182                                    ; preds = %2151
  %2183 = call float @dx.op.unary.f32(i32 24, float %2180)  ; Sqrt(value)
  %2184 = fsub fast float %2183, %2176
  %2185 = fmul fast float %2041, 2.000000e+00
  %2186 = fdiv fast float %2184, %2185
  br label %2187

; <label>:2187                                    ; preds = %2182, %2151
  %2188 = phi float [ %2186, %2182 ], [ -1.000000e+00, %2151 ]
  %2189 = fmul fast float %2188, %180
  %2190 = fmul fast float %2188, %181
  %2191 = fmul fast float %2188, %182
  %2192 = fadd fast float %2171, %2189
  %2193 = fadd fast float %2172, %2190
  %2194 = fadd fast float %2173, %2191
  %2195 = fmul fast float %2188, %2188
  %2196 = call float @dx.op.dot3.f32(i32 55, float %2192, float %2193, float %2194, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2197 = fmul fast float %2196, %2036
  %2198 = fdiv fast float %2195, %2197
  %2199 = call float @dx.op.dot3.f32(i32 55, float %2192, float %2193, float %2194, float %2192, float %2193, float %2194)  ; Dot3(ax,ay,az,bx,by,bz)
  %2200 = call float @dx.op.unary.f32(i32 25, float %2199)  ; Rsqrt(value)
  %2201 = fmul fast float %2200, %2192
  %2202 = fmul fast float %2200, %2193
  %2203 = fmul fast float %2200, %2194
  %2204 = call float @dx.op.unary.f32(i32 6, float %2201)  ; FAbs(value)
  %2205 = call float @dx.op.unary.f32(i32 6, float %2202)  ; FAbs(value)
  %2206 = call float @dx.op.unary.f32(i32 6, float %2203)  ; FAbs(value)
  %2207 = fsub fast float 1.000000e+00, %2206
  %2208 = call float @dx.op.unary.f32(i32 24, float %2207)  ; Sqrt(value)
  %2209 = call float @dx.op.binary.f32(i32 36, float %2204, float %2205)  ; FMin(a,b)
  %2210 = call float @dx.op.binary.f32(i32 35, float %2204, float %2205)  ; FMax(a,b)
  %2211 = fadd fast float %2210, 0x3BF0000000000000
  %2212 = fdiv fast float %2209, %2211
  %2213 = fmul fast float %2212, 0x3F99BE1040000000
  %2214 = fsub fast float 0x3FA5746D00000000, %2213
  %2215 = fmul fast float %2214, %2212
  %2216 = fadd fast float %2215, 0x3FB692C5C0000000
  %2217 = fmul fast float %2216, %2212
  %2218 = fadd fast float %2217, 0xBFCFA8A1C0000000
  %2219 = fmul fast float %2218, %2212
  %2220 = fadd fast float %2219, 0x3F79384B40000000
  %2221 = fmul fast float %2220, %2212
  %2222 = fadd fast float %2221, 0x3FE45BF7C0000000
  %2223 = fmul fast float %2222, %2212
  %2224 = fadd fast float %2223, 0x3ED10F8960000000
  %2225 = fcmp fast olt float %2204, %2205
  %2226 = fsub fast float 0x3FEFFFF780000000, %2223
  %2227 = select i1 %2225, float %2226, float %2224
  %2228 = fmul fast float %2227, %2208
  %2229 = fsub fast float %2208, %2228
  %2230 = fcmp fast olt float %2203, 0.000000e+00
  %2231 = icmp eq i32 %2160, -1
  br i1 %2231, label %2277, label %2232

; <label>:2232                                    ; preds = %2187
  %2233 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2234 = extractvalue %dx.types.CBufRet.i32 %2233, 1
  %2235 = and i32 %2234, 31
  %2236 = lshr i32 %2160, %2235
  %2237 = mul i32 %2236, %2100
  %2238 = uitofp i32 %2237 to float
  %2239 = fsub fast float 1.000000e+00, %2229
  %2240 = select i1 %2230, float %2239, float %2228
  %2241 = bitcast float %2240 to i32
  %2242 = bitcast float %2202 to i32
  %2243 = and i32 %2242, -2147483648
  %2244 = xor i32 %2241, %2243
  %2245 = bitcast i32 %2244 to float
  %2246 = fmul fast float %2245, 5.000000e-01
  %2247 = fadd fast float %2246, 5.000000e-01
  %2248 = fmul fast float %2247, %1981
  %2249 = fadd fast float %2248, %2103
  %2250 = fadd fast float %2249, %2238
  %2251 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2252 = fmul fast float %2250, %2251
  %2253 = extractvalue %dx.types.CBufRet.i32 %2233, 0
  %2254 = and i32 %2253, %2160
  %2255 = mul i32 %2254, %2100
  %2256 = uitofp i32 %2255 to float
  %2257 = fsub fast float 1.000000e+00, %2228
  %2258 = select i1 %2230, float %2257, float %2229
  %2259 = bitcast float %2258 to i32
  %2260 = bitcast float %2201 to i32
  %2261 = and i32 %2260, -2147483648
  %2262 = xor i32 %2259, %2261
  %2263 = bitcast i32 %2262 to float
  %2264 = fmul fast float %2263, 5.000000e-01
  %2265 = fadd fast float %2264, 5.000000e-01
  %2266 = fmul fast float %2265, %1981
  %2267 = fadd fast float %2266, %2103
  %2268 = fadd fast float %2267, %2256
  %2269 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %2270 = fmul fast float %2268, %2269
  %2271 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2272 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2273 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2271, %dx.types.Handle %2272, float %2270, float %2252, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2274 = extractvalue %dx.types.ResRet.f32 %2273, 0
  %2275 = extractvalue %dx.types.ResRet.f32 %2273, 1
  %2276 = extractvalue %dx.types.ResRet.f32 %2273, 2
  br label %2277

; <label>:2277                                    ; preds = %2232, %2187
  %2278 = phi float [ %2274, %2232 ], [ 0.000000e+00, %2187 ]
  %2279 = phi float [ %2275, %2232 ], [ 0.000000e+00, %2187 ]
  %2280 = phi float [ %2276, %2232 ], [ 0.000000e+00, %2187 ]
  %2281 = fmul fast float %2278, %2198
  %2282 = fmul fast float %2279, %2198
  %2283 = fmul fast float %2280, %2198
  %2284 = add i32 %1998, 1
  %2285 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2007, i32 %2284, i32 %1999, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2286 = extractvalue %dx.types.ResRet.i32 %2285, 0
  %2287 = uitofp i32 %2284 to float
  %2288 = fmul fast float %2014, %2287
  %2289 = fadd fast float %2288, %2021
  %2290 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2286, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2291 = extractvalue %dx.types.ResRet.f32 %2290, 0
  %2292 = extractvalue %dx.types.ResRet.f32 %2290, 1
  %2293 = extractvalue %dx.types.ResRet.f32 %2290, 2
  %2294 = fadd fast float %2023, %2291
  %2295 = fadd fast float %2289, %2292
  %2296 = fadd fast float %2025, %2293
  %2297 = fsub fast float %141, %2294
  %2298 = fsub fast float %145, %2295
  %2299 = fsub fast float %149, %2296
  %2300 = call float @dx.op.dot3.f32(i32 55, float %2297, float %2298, float %2299, float %2297, float %2298, float %2299)  ; Dot3(ax,ay,az,bx,by,bz)
  %2301 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2297, float %2298, float %2299)  ; Dot3(ax,ay,az,bx,by,bz)
  %2302 = fmul fast float %2301, 2.000000e+00
  %2303 = fsub fast float %2300, %2044
  %2304 = fmul fast float %2302, %2302
  %2305 = fmul fast float %2047, %2303
  %2306 = fsub fast float %2304, %2305
  %2307 = fcmp fast ult float %2306, 0.000000e+00
  br i1 %2307, label %2313, label %2308, !dx.controlflow.hints !80

; <label>:2308                                    ; preds = %2277
  %2309 = call float @dx.op.unary.f32(i32 24, float %2306)  ; Sqrt(value)
  %2310 = fsub fast float %2309, %2302
  %2311 = fmul fast float %2041, 2.000000e+00
  %2312 = fdiv fast float %2310, %2311
  br label %2313

; <label>:2313                                    ; preds = %2308, %2277
  %2314 = phi float [ %2312, %2308 ], [ -1.000000e+00, %2277 ]
  %2315 = fmul fast float %2314, %180
  %2316 = fmul fast float %2314, %181
  %2317 = fmul fast float %2314, %182
  %2318 = fadd fast float %2297, %2315
  %2319 = fadd fast float %2298, %2316
  %2320 = fadd fast float %2299, %2317
  %2321 = fmul fast float %2314, %2314
  %2322 = call float @dx.op.dot3.f32(i32 55, float %2318, float %2319, float %2320, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2323 = fmul fast float %2322, %2036
  %2324 = fdiv fast float %2321, %2323
  %2325 = call float @dx.op.dot3.f32(i32 55, float %2318, float %2319, float %2320, float %2318, float %2319, float %2320)  ; Dot3(ax,ay,az,bx,by,bz)
  %2326 = call float @dx.op.unary.f32(i32 25, float %2325)  ; Rsqrt(value)
  %2327 = fmul fast float %2326, %2318
  %2328 = fmul fast float %2326, %2319
  %2329 = fmul fast float %2326, %2320
  %2330 = call float @dx.op.unary.f32(i32 6, float %2327)  ; FAbs(value)
  %2331 = call float @dx.op.unary.f32(i32 6, float %2328)  ; FAbs(value)
  %2332 = call float @dx.op.unary.f32(i32 6, float %2329)  ; FAbs(value)
  %2333 = fsub fast float 1.000000e+00, %2332
  %2334 = call float @dx.op.unary.f32(i32 24, float %2333)  ; Sqrt(value)
  %2335 = call float @dx.op.binary.f32(i32 36, float %2330, float %2331)  ; FMin(a,b)
  %2336 = call float @dx.op.binary.f32(i32 35, float %2330, float %2331)  ; FMax(a,b)
  %2337 = fadd fast float %2336, 0x3BF0000000000000
  %2338 = fdiv fast float %2335, %2337
  %2339 = fmul fast float %2338, 0x3F99BE1040000000
  %2340 = fsub fast float 0x3FA5746D00000000, %2339
  %2341 = fmul fast float %2340, %2338
  %2342 = fadd fast float %2341, 0x3FB692C5C0000000
  %2343 = fmul fast float %2342, %2338
  %2344 = fadd fast float %2343, 0xBFCFA8A1C0000000
  %2345 = fmul fast float %2344, %2338
  %2346 = fadd fast float %2345, 0x3F79384B40000000
  %2347 = fmul fast float %2346, %2338
  %2348 = fadd fast float %2347, 0x3FE45BF7C0000000
  %2349 = fmul fast float %2348, %2338
  %2350 = fadd fast float %2349, 0x3ED10F8960000000
  %2351 = fcmp fast olt float %2330, %2331
  %2352 = fsub fast float 0x3FEFFFF780000000, %2349
  %2353 = select i1 %2351, float %2352, float %2350
  %2354 = fmul fast float %2353, %2334
  %2355 = fsub fast float %2334, %2354
  %2356 = fcmp fast olt float %2329, 0.000000e+00
  %2357 = icmp eq i32 %2286, -1
  br i1 %2357, label %2403, label %2358

; <label>:2358                                    ; preds = %2313
  %2359 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2360 = extractvalue %dx.types.CBufRet.i32 %2359, 1
  %2361 = and i32 %2360, 31
  %2362 = lshr i32 %2286, %2361
  %2363 = mul i32 %2362, %2100
  %2364 = uitofp i32 %2363 to float
  %2365 = fsub fast float 1.000000e+00, %2355
  %2366 = select i1 %2356, float %2365, float %2354
  %2367 = bitcast float %2366 to i32
  %2368 = bitcast float %2328 to i32
  %2369 = and i32 %2368, -2147483648
  %2370 = xor i32 %2367, %2369
  %2371 = bitcast i32 %2370 to float
  %2372 = fmul fast float %2371, 5.000000e-01
  %2373 = fadd fast float %2372, 5.000000e-01
  %2374 = fmul fast float %2373, %1981
  %2375 = fadd fast float %2374, %2103
  %2376 = fadd fast float %2375, %2364
  %2377 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2378 = fmul fast float %2376, %2377
  %2379 = extractvalue %dx.types.CBufRet.i32 %2359, 0
  %2380 = and i32 %2379, %2286
  %2381 = mul i32 %2380, %2100
  %2382 = uitofp i32 %2381 to float
  %2383 = fsub fast float 1.000000e+00, %2354
  %2384 = select i1 %2356, float %2383, float %2355
  %2385 = bitcast float %2384 to i32
  %2386 = bitcast float %2327 to i32
  %2387 = and i32 %2386, -2147483648
  %2388 = xor i32 %2385, %2387
  %2389 = bitcast i32 %2388 to float
  %2390 = fmul fast float %2389, 5.000000e-01
  %2391 = fadd fast float %2390, 5.000000e-01
  %2392 = fmul fast float %2391, %1981
  %2393 = fadd fast float %2392, %2103
  %2394 = fadd fast float %2393, %2382
  %2395 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %2396 = fmul fast float %2394, %2395
  %2397 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2398 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2399 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2397, %dx.types.Handle %2398, float %2396, float %2378, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2400 = extractvalue %dx.types.ResRet.f32 %2399, 0
  %2401 = extractvalue %dx.types.ResRet.f32 %2399, 1
  %2402 = extractvalue %dx.types.ResRet.f32 %2399, 2
  br label %2403

; <label>:2403                                    ; preds = %2358, %2313
  %2404 = phi float [ %2400, %2358 ], [ 0.000000e+00, %2313 ]
  %2405 = phi float [ %2401, %2358 ], [ 0.000000e+00, %2313 ]
  %2406 = phi float [ %2402, %2358 ], [ 0.000000e+00, %2313 ]
  %2407 = fmul fast float %2404, %2324
  %2408 = fmul fast float %2405, %2324
  %2409 = fmul fast float %2406, %2324
  %2410 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2007, i32 %2284, i32 %2158, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2411 = extractvalue %dx.types.ResRet.i32 %2410, 0
  %2412 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2411, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2413 = extractvalue %dx.types.ResRet.f32 %2412, 0
  %2414 = extractvalue %dx.types.ResRet.f32 %2412, 1
  %2415 = extractvalue %dx.types.ResRet.f32 %2412, 2
  %2416 = fadd fast float %2023, %2413
  %2417 = fadd fast float %2289, %2414
  %2418 = fadd fast float %2163, %2415
  %2419 = fsub fast float %141, %2416
  %2420 = fsub fast float %145, %2417
  %2421 = fsub fast float %149, %2418
  %2422 = call float @dx.op.dot3.f32(i32 55, float %2419, float %2420, float %2421, float %2419, float %2420, float %2421)  ; Dot3(ax,ay,az,bx,by,bz)
  %2423 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2419, float %2420, float %2421)  ; Dot3(ax,ay,az,bx,by,bz)
  %2424 = fmul fast float %2423, 2.000000e+00
  %2425 = fsub fast float %2422, %2044
  %2426 = fmul fast float %2424, %2424
  %2427 = fmul fast float %2047, %2425
  %2428 = fsub fast float %2426, %2427
  %2429 = fcmp fast ult float %2428, 0.000000e+00
  br i1 %2429, label %2435, label %2430, !dx.controlflow.hints !80

; <label>:2430                                    ; preds = %2403
  %2431 = call float @dx.op.unary.f32(i32 24, float %2428)  ; Sqrt(value)
  %2432 = fsub fast float %2431, %2424
  %2433 = fmul fast float %2041, 2.000000e+00
  %2434 = fdiv fast float %2432, %2433
  br label %2435

; <label>:2435                                    ; preds = %2430, %2403
  %2436 = phi float [ %2434, %2430 ], [ -1.000000e+00, %2403 ]
  %2437 = fmul fast float %2436, %180
  %2438 = fmul fast float %2436, %181
  %2439 = fmul fast float %2436, %182
  %2440 = fadd fast float %2419, %2437
  %2441 = fadd fast float %2420, %2438
  %2442 = fadd fast float %2421, %2439
  %2443 = fmul fast float %2436, %2436
  %2444 = call float @dx.op.dot3.f32(i32 55, float %2440, float %2441, float %2442, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2445 = fmul fast float %2444, %2036
  %2446 = fdiv fast float %2443, %2445
  %2447 = call float @dx.op.dot3.f32(i32 55, float %2440, float %2441, float %2442, float %2440, float %2441, float %2442)  ; Dot3(ax,ay,az,bx,by,bz)
  %2448 = call float @dx.op.unary.f32(i32 25, float %2447)  ; Rsqrt(value)
  %2449 = fmul fast float %2448, %2440
  %2450 = fmul fast float %2448, %2441
  %2451 = fmul fast float %2448, %2442
  %2452 = call float @dx.op.unary.f32(i32 6, float %2449)  ; FAbs(value)
  %2453 = call float @dx.op.unary.f32(i32 6, float %2450)  ; FAbs(value)
  %2454 = call float @dx.op.unary.f32(i32 6, float %2451)  ; FAbs(value)
  %2455 = fsub fast float 1.000000e+00, %2454
  %2456 = call float @dx.op.unary.f32(i32 24, float %2455)  ; Sqrt(value)
  %2457 = call float @dx.op.binary.f32(i32 36, float %2452, float %2453)  ; FMin(a,b)
  %2458 = call float @dx.op.binary.f32(i32 35, float %2452, float %2453)  ; FMax(a,b)
  %2459 = fadd fast float %2458, 0x3BF0000000000000
  %2460 = fdiv fast float %2457, %2459
  %2461 = fmul fast float %2460, 0x3F99BE1040000000
  %2462 = fsub fast float 0x3FA5746D00000000, %2461
  %2463 = fmul fast float %2462, %2460
  %2464 = fadd fast float %2463, 0x3FB692C5C0000000
  %2465 = fmul fast float %2464, %2460
  %2466 = fadd fast float %2465, 0xBFCFA8A1C0000000
  %2467 = fmul fast float %2466, %2460
  %2468 = fadd fast float %2467, 0x3F79384B40000000
  %2469 = fmul fast float %2468, %2460
  %2470 = fadd fast float %2469, 0x3FE45BF7C0000000
  %2471 = fmul fast float %2470, %2460
  %2472 = fadd fast float %2471, 0x3ED10F8960000000
  %2473 = fcmp fast olt float %2452, %2453
  %2474 = fsub fast float 0x3FEFFFF780000000, %2471
  %2475 = select i1 %2473, float %2474, float %2472
  %2476 = fmul fast float %2475, %2456
  %2477 = fsub fast float %2456, %2476
  %2478 = fcmp fast olt float %2451, 0.000000e+00
  %2479 = icmp eq i32 %2411, -1
  br i1 %2479, label %2525, label %2480

; <label>:2480                                    ; preds = %2435
  %2481 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2482 = extractvalue %dx.types.CBufRet.i32 %2481, 1
  %2483 = and i32 %2482, 31
  %2484 = lshr i32 %2411, %2483
  %2485 = mul i32 %2484, %2100
  %2486 = uitofp i32 %2485 to float
  %2487 = fsub fast float 1.000000e+00, %2477
  %2488 = select i1 %2478, float %2487, float %2476
  %2489 = bitcast float %2488 to i32
  %2490 = bitcast float %2450 to i32
  %2491 = and i32 %2490, -2147483648
  %2492 = xor i32 %2489, %2491
  %2493 = bitcast i32 %2492 to float
  %2494 = fmul fast float %2493, 5.000000e-01
  %2495 = fadd fast float %2494, 5.000000e-01
  %2496 = fmul fast float %2495, %1981
  %2497 = fadd fast float %2496, %2103
  %2498 = fadd fast float %2497, %2486
  %2499 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2500 = fmul fast float %2498, %2499
  %2501 = extractvalue %dx.types.CBufRet.i32 %2481, 0
  %2502 = and i32 %2501, %2411
  %2503 = mul i32 %2502, %2100
  %2504 = uitofp i32 %2503 to float
  %2505 = fsub fast float 1.000000e+00, %2476
  %2506 = select i1 %2478, float %2505, float %2477
  %2507 = bitcast float %2506 to i32
  %2508 = bitcast float %2449 to i32
  %2509 = and i32 %2508, -2147483648
  %2510 = xor i32 %2507, %2509
  %2511 = bitcast i32 %2510 to float
  %2512 = fmul fast float %2511, 5.000000e-01
  %2513 = fadd fast float %2512, 5.000000e-01
  %2514 = fmul fast float %2513, %1981
  %2515 = fadd fast float %2514, %2103
  %2516 = fadd fast float %2515, %2504
  %2517 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %2518 = fmul fast float %2516, %2517
  %2519 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2520 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2521 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2519, %dx.types.Handle %2520, float %2518, float %2500, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2522 = extractvalue %dx.types.ResRet.f32 %2521, 0
  %2523 = extractvalue %dx.types.ResRet.f32 %2521, 1
  %2524 = extractvalue %dx.types.ResRet.f32 %2521, 2
  br label %2525

; <label>:2525                                    ; preds = %2480, %2435
  %2526 = phi float [ %2522, %2480 ], [ 0.000000e+00, %2435 ]
  %2527 = phi float [ %2523, %2480 ], [ 0.000000e+00, %2435 ]
  %2528 = phi float [ %2524, %2480 ], [ 0.000000e+00, %2435 ]
  %2529 = fmul fast float %2526, %2446
  %2530 = fmul fast float %2527, %2446
  %2531 = fmul fast float %2528, %2446
  %2532 = add i32 %1997, 1
  %2533 = add i32 %2006, %2532
  %2534 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2533, i32 %1998, i32 %1999, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2535 = extractvalue %dx.types.ResRet.i32 %2534, 0
  %2536 = uitofp i32 %2532 to float
  %2537 = fmul fast float %2014, %2536
  %2538 = fadd fast float %2537, %2020
  %2539 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2535, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2540 = extractvalue %dx.types.ResRet.f32 %2539, 0
  %2541 = extractvalue %dx.types.ResRet.f32 %2539, 1
  %2542 = extractvalue %dx.types.ResRet.f32 %2539, 2
  %2543 = fadd fast float %2538, %2540
  %2544 = fadd fast float %2024, %2541
  %2545 = fadd fast float %2025, %2542
  %2546 = fsub fast float %141, %2543
  %2547 = fsub fast float %145, %2544
  %2548 = fsub fast float %149, %2545
  %2549 = call float @dx.op.dot3.f32(i32 55, float %2546, float %2547, float %2548, float %2546, float %2547, float %2548)  ; Dot3(ax,ay,az,bx,by,bz)
  %2550 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2546, float %2547, float %2548)  ; Dot3(ax,ay,az,bx,by,bz)
  %2551 = fmul fast float %2550, 2.000000e+00
  %2552 = fsub fast float %2549, %2044
  %2553 = fmul fast float %2551, %2551
  %2554 = fmul fast float %2047, %2552
  %2555 = fsub fast float %2553, %2554
  %2556 = fcmp fast ult float %2555, 0.000000e+00
  br i1 %2556, label %2562, label %2557, !dx.controlflow.hints !80

; <label>:2557                                    ; preds = %2525
  %2558 = call float @dx.op.unary.f32(i32 24, float %2555)  ; Sqrt(value)
  %2559 = fsub fast float %2558, %2551
  %2560 = fmul fast float %2041, 2.000000e+00
  %2561 = fdiv fast float %2559, %2560
  br label %2562

; <label>:2562                                    ; preds = %2557, %2525
  %2563 = phi float [ %2561, %2557 ], [ -1.000000e+00, %2525 ]
  %2564 = fmul fast float %2563, %180
  %2565 = fmul fast float %2563, %181
  %2566 = fmul fast float %2563, %182
  %2567 = fadd fast float %2546, %2564
  %2568 = fadd fast float %2547, %2565
  %2569 = fadd fast float %2548, %2566
  %2570 = fmul fast float %2563, %2563
  %2571 = call float @dx.op.dot3.f32(i32 55, float %2567, float %2568, float %2569, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2572 = fmul fast float %2571, %2036
  %2573 = fdiv fast float %2570, %2572
  %2574 = call float @dx.op.dot3.f32(i32 55, float %2567, float %2568, float %2569, float %2567, float %2568, float %2569)  ; Dot3(ax,ay,az,bx,by,bz)
  %2575 = call float @dx.op.unary.f32(i32 25, float %2574)  ; Rsqrt(value)
  %2576 = fmul fast float %2575, %2567
  %2577 = fmul fast float %2575, %2568
  %2578 = fmul fast float %2575, %2569
  %2579 = call float @dx.op.unary.f32(i32 6, float %2576)  ; FAbs(value)
  %2580 = call float @dx.op.unary.f32(i32 6, float %2577)  ; FAbs(value)
  %2581 = call float @dx.op.unary.f32(i32 6, float %2578)  ; FAbs(value)
  %2582 = fsub fast float 1.000000e+00, %2581
  %2583 = call float @dx.op.unary.f32(i32 24, float %2582)  ; Sqrt(value)
  %2584 = call float @dx.op.binary.f32(i32 36, float %2579, float %2580)  ; FMin(a,b)
  %2585 = call float @dx.op.binary.f32(i32 35, float %2579, float %2580)  ; FMax(a,b)
  %2586 = fadd fast float %2585, 0x3BF0000000000000
  %2587 = fdiv fast float %2584, %2586
  %2588 = fmul fast float %2587, 0x3F99BE1040000000
  %2589 = fsub fast float 0x3FA5746D00000000, %2588
  %2590 = fmul fast float %2589, %2587
  %2591 = fadd fast float %2590, 0x3FB692C5C0000000
  %2592 = fmul fast float %2591, %2587
  %2593 = fadd fast float %2592, 0xBFCFA8A1C0000000
  %2594 = fmul fast float %2593, %2587
  %2595 = fadd fast float %2594, 0x3F79384B40000000
  %2596 = fmul fast float %2595, %2587
  %2597 = fadd fast float %2596, 0x3FE45BF7C0000000
  %2598 = fmul fast float %2597, %2587
  %2599 = fadd fast float %2598, 0x3ED10F8960000000
  %2600 = fcmp fast olt float %2579, %2580
  %2601 = fsub fast float 0x3FEFFFF780000000, %2598
  %2602 = select i1 %2600, float %2601, float %2599
  %2603 = fmul fast float %2602, %2583
  %2604 = fsub fast float %2583, %2603
  %2605 = fcmp fast olt float %2578, 0.000000e+00
  %2606 = icmp eq i32 %2535, -1
  br i1 %2606, label %2652, label %2607

; <label>:2607                                    ; preds = %2562
  %2608 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2609 = extractvalue %dx.types.CBufRet.i32 %2608, 1
  %2610 = and i32 %2609, 31
  %2611 = lshr i32 %2535, %2610
  %2612 = mul i32 %2611, %2100
  %2613 = uitofp i32 %2612 to float
  %2614 = fsub fast float 1.000000e+00, %2604
  %2615 = select i1 %2605, float %2614, float %2603
  %2616 = bitcast float %2615 to i32
  %2617 = bitcast float %2577 to i32
  %2618 = and i32 %2617, -2147483648
  %2619 = xor i32 %2616, %2618
  %2620 = bitcast i32 %2619 to float
  %2621 = fmul fast float %2620, 5.000000e-01
  %2622 = fadd fast float %2621, 5.000000e-01
  %2623 = fmul fast float %2622, %1981
  %2624 = fadd fast float %2623, %2103
  %2625 = fadd fast float %2624, %2613
  %2626 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2627 = fmul fast float %2625, %2626
  %2628 = extractvalue %dx.types.CBufRet.i32 %2608, 0
  %2629 = and i32 %2628, %2535
  %2630 = mul i32 %2629, %2100
  %2631 = uitofp i32 %2630 to float
  %2632 = fsub fast float 1.000000e+00, %2603
  %2633 = select i1 %2605, float %2632, float %2604
  %2634 = bitcast float %2633 to i32
  %2635 = bitcast float %2576 to i32
  %2636 = and i32 %2635, -2147483648
  %2637 = xor i32 %2634, %2636
  %2638 = bitcast i32 %2637 to float
  %2639 = fmul fast float %2638, 5.000000e-01
  %2640 = fadd fast float %2639, 5.000000e-01
  %2641 = fmul fast float %2640, %1981
  %2642 = fadd fast float %2641, %2103
  %2643 = fadd fast float %2642, %2631
  %2644 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %2645 = fmul fast float %2643, %2644
  %2646 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2647 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2648 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2646, %dx.types.Handle %2647, float %2645, float %2627, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2649 = extractvalue %dx.types.ResRet.f32 %2648, 0
  %2650 = extractvalue %dx.types.ResRet.f32 %2648, 1
  %2651 = extractvalue %dx.types.ResRet.f32 %2648, 2
  br label %2652

; <label>:2652                                    ; preds = %2607, %2562
  %2653 = phi float [ %2649, %2607 ], [ 0.000000e+00, %2562 ]
  %2654 = phi float [ %2650, %2607 ], [ 0.000000e+00, %2562 ]
  %2655 = phi float [ %2651, %2607 ], [ 0.000000e+00, %2562 ]
  %2656 = fmul fast float %2653, %2573
  %2657 = fmul fast float %2654, %2573
  %2658 = fmul fast float %2655, %2573
  %2659 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2533, i32 %1998, i32 %2158, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2660 = extractvalue %dx.types.ResRet.i32 %2659, 0
  %2661 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2660, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2662 = extractvalue %dx.types.ResRet.f32 %2661, 0
  %2663 = extractvalue %dx.types.ResRet.f32 %2661, 1
  %2664 = extractvalue %dx.types.ResRet.f32 %2661, 2
  %2665 = fadd fast float %2538, %2662
  %2666 = fadd fast float %2024, %2663
  %2667 = fadd fast float %2163, %2664
  %2668 = fsub fast float %141, %2665
  %2669 = fsub fast float %145, %2666
  %2670 = fsub fast float %149, %2667
  %2671 = call float @dx.op.dot3.f32(i32 55, float %2668, float %2669, float %2670, float %2668, float %2669, float %2670)  ; Dot3(ax,ay,az,bx,by,bz)
  %2672 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2668, float %2669, float %2670)  ; Dot3(ax,ay,az,bx,by,bz)
  %2673 = fmul fast float %2672, 2.000000e+00
  %2674 = fsub fast float %2671, %2044
  %2675 = fmul fast float %2673, %2673
  %2676 = fmul fast float %2047, %2674
  %2677 = fsub fast float %2675, %2676
  %2678 = fcmp fast ult float %2677, 0.000000e+00
  br i1 %2678, label %2684, label %2679, !dx.controlflow.hints !80

; <label>:2679                                    ; preds = %2652
  %2680 = call float @dx.op.unary.f32(i32 24, float %2677)  ; Sqrt(value)
  %2681 = fsub fast float %2680, %2673
  %2682 = fmul fast float %2041, 2.000000e+00
  %2683 = fdiv fast float %2681, %2682
  br label %2684

; <label>:2684                                    ; preds = %2679, %2652
  %2685 = phi float [ %2683, %2679 ], [ -1.000000e+00, %2652 ]
  %2686 = fmul fast float %2685, %180
  %2687 = fmul fast float %2685, %181
  %2688 = fmul fast float %2685, %182
  %2689 = fadd fast float %2668, %2686
  %2690 = fadd fast float %2669, %2687
  %2691 = fadd fast float %2670, %2688
  %2692 = fmul fast float %2685, %2685
  %2693 = call float @dx.op.dot3.f32(i32 55, float %2689, float %2690, float %2691, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2694 = fmul fast float %2693, %2036
  %2695 = fdiv fast float %2692, %2694
  %2696 = call float @dx.op.dot3.f32(i32 55, float %2689, float %2690, float %2691, float %2689, float %2690, float %2691)  ; Dot3(ax,ay,az,bx,by,bz)
  %2697 = call float @dx.op.unary.f32(i32 25, float %2696)  ; Rsqrt(value)
  %2698 = fmul fast float %2697, %2689
  %2699 = fmul fast float %2697, %2690
  %2700 = fmul fast float %2697, %2691
  %2701 = call float @dx.op.unary.f32(i32 6, float %2698)  ; FAbs(value)
  %2702 = call float @dx.op.unary.f32(i32 6, float %2699)  ; FAbs(value)
  %2703 = call float @dx.op.unary.f32(i32 6, float %2700)  ; FAbs(value)
  %2704 = fsub fast float 1.000000e+00, %2703
  %2705 = call float @dx.op.unary.f32(i32 24, float %2704)  ; Sqrt(value)
  %2706 = call float @dx.op.binary.f32(i32 36, float %2701, float %2702)  ; FMin(a,b)
  %2707 = call float @dx.op.binary.f32(i32 35, float %2701, float %2702)  ; FMax(a,b)
  %2708 = fadd fast float %2707, 0x3BF0000000000000
  %2709 = fdiv fast float %2706, %2708
  %2710 = fmul fast float %2709, 0x3F99BE1040000000
  %2711 = fsub fast float 0x3FA5746D00000000, %2710
  %2712 = fmul fast float %2711, %2709
  %2713 = fadd fast float %2712, 0x3FB692C5C0000000
  %2714 = fmul fast float %2713, %2709
  %2715 = fadd fast float %2714, 0xBFCFA8A1C0000000
  %2716 = fmul fast float %2715, %2709
  %2717 = fadd fast float %2716, 0x3F79384B40000000
  %2718 = fmul fast float %2717, %2709
  %2719 = fadd fast float %2718, 0x3FE45BF7C0000000
  %2720 = fmul fast float %2719, %2709
  %2721 = fadd fast float %2720, 0x3ED10F8960000000
  %2722 = fcmp fast olt float %2701, %2702
  %2723 = fsub fast float 0x3FEFFFF780000000, %2720
  %2724 = select i1 %2722, float %2723, float %2721
  %2725 = fmul fast float %2724, %2705
  %2726 = fsub fast float %2705, %2725
  %2727 = fcmp fast olt float %2700, 0.000000e+00
  %2728 = icmp eq i32 %2660, -1
  br i1 %2728, label %2774, label %2729

; <label>:2729                                    ; preds = %2684
  %2730 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2731 = extractvalue %dx.types.CBufRet.i32 %2730, 1
  %2732 = and i32 %2731, 31
  %2733 = lshr i32 %2660, %2732
  %2734 = mul i32 %2733, %2100
  %2735 = uitofp i32 %2734 to float
  %2736 = fsub fast float 1.000000e+00, %2726
  %2737 = select i1 %2727, float %2736, float %2725
  %2738 = bitcast float %2737 to i32
  %2739 = bitcast float %2699 to i32
  %2740 = and i32 %2739, -2147483648
  %2741 = xor i32 %2738, %2740
  %2742 = bitcast i32 %2741 to float
  %2743 = fmul fast float %2742, 5.000000e-01
  %2744 = fadd fast float %2743, 5.000000e-01
  %2745 = fmul fast float %2744, %1981
  %2746 = fadd fast float %2745, %2103
  %2747 = fadd fast float %2746, %2735
  %2748 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2749 = fmul fast float %2747, %2748
  %2750 = extractvalue %dx.types.CBufRet.i32 %2730, 0
  %2751 = and i32 %2750, %2660
  %2752 = mul i32 %2751, %2100
  %2753 = uitofp i32 %2752 to float
  %2754 = fsub fast float 1.000000e+00, %2725
  %2755 = select i1 %2727, float %2754, float %2726
  %2756 = bitcast float %2755 to i32
  %2757 = bitcast float %2698 to i32
  %2758 = and i32 %2757, -2147483648
  %2759 = xor i32 %2756, %2758
  %2760 = bitcast i32 %2759 to float
  %2761 = fmul fast float %2760, 5.000000e-01
  %2762 = fadd fast float %2761, 5.000000e-01
  %2763 = fmul fast float %2762, %1981
  %2764 = fadd fast float %2763, %2103
  %2765 = fadd fast float %2764, %2753
  %2766 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %2767 = fmul fast float %2765, %2766
  %2768 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2769 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2770 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2768, %dx.types.Handle %2769, float %2767, float %2749, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2771 = extractvalue %dx.types.ResRet.f32 %2770, 0
  %2772 = extractvalue %dx.types.ResRet.f32 %2770, 1
  %2773 = extractvalue %dx.types.ResRet.f32 %2770, 2
  br label %2774

; <label>:2774                                    ; preds = %2729, %2684
  %2775 = phi float [ %2771, %2729 ], [ 0.000000e+00, %2684 ]
  %2776 = phi float [ %2772, %2729 ], [ 0.000000e+00, %2684 ]
  %2777 = phi float [ %2773, %2729 ], [ 0.000000e+00, %2684 ]
  %2778 = fmul fast float %2775, %2695
  %2779 = fmul fast float %2776, %2695
  %2780 = fmul fast float %2777, %2695
  %2781 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2533, i32 %2284, i32 %1999, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2782 = extractvalue %dx.types.ResRet.i32 %2781, 0
  %2783 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2782, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2784 = extractvalue %dx.types.ResRet.f32 %2783, 0
  %2785 = extractvalue %dx.types.ResRet.f32 %2783, 1
  %2786 = extractvalue %dx.types.ResRet.f32 %2783, 2
  %2787 = fadd fast float %2538, %2784
  %2788 = fadd fast float %2289, %2785
  %2789 = fadd fast float %2025, %2786
  %2790 = fsub fast float %141, %2787
  %2791 = fsub fast float %145, %2788
  %2792 = fsub fast float %149, %2789
  %2793 = call float @dx.op.dot3.f32(i32 55, float %2790, float %2791, float %2792, float %2790, float %2791, float %2792)  ; Dot3(ax,ay,az,bx,by,bz)
  %2794 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2790, float %2791, float %2792)  ; Dot3(ax,ay,az,bx,by,bz)
  %2795 = fmul fast float %2794, 2.000000e+00
  %2796 = fsub fast float %2793, %2044
  %2797 = fmul fast float %2795, %2795
  %2798 = fmul fast float %2047, %2796
  %2799 = fsub fast float %2797, %2798
  %2800 = fcmp fast ult float %2799, 0.000000e+00
  br i1 %2800, label %2806, label %2801, !dx.controlflow.hints !80

; <label>:2801                                    ; preds = %2774
  %2802 = call float @dx.op.unary.f32(i32 24, float %2799)  ; Sqrt(value)
  %2803 = fsub fast float %2802, %2795
  %2804 = fmul fast float %2041, 2.000000e+00
  %2805 = fdiv fast float %2803, %2804
  br label %2806

; <label>:2806                                    ; preds = %2801, %2774
  %2807 = phi float [ %2805, %2801 ], [ -1.000000e+00, %2774 ]
  %2808 = fmul fast float %2807, %180
  %2809 = fmul fast float %2807, %181
  %2810 = fmul fast float %2807, %182
  %2811 = fadd fast float %2790, %2808
  %2812 = fadd fast float %2791, %2809
  %2813 = fadd fast float %2792, %2810
  %2814 = fmul fast float %2807, %2807
  %2815 = call float @dx.op.dot3.f32(i32 55, float %2811, float %2812, float %2813, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2816 = fmul fast float %2815, %2036
  %2817 = fdiv fast float %2814, %2816
  %2818 = call float @dx.op.dot3.f32(i32 55, float %2811, float %2812, float %2813, float %2811, float %2812, float %2813)  ; Dot3(ax,ay,az,bx,by,bz)
  %2819 = call float @dx.op.unary.f32(i32 25, float %2818)  ; Rsqrt(value)
  %2820 = fmul fast float %2819, %2811
  %2821 = fmul fast float %2819, %2812
  %2822 = fmul fast float %2819, %2813
  %2823 = call float @dx.op.unary.f32(i32 6, float %2820)  ; FAbs(value)
  %2824 = call float @dx.op.unary.f32(i32 6, float %2821)  ; FAbs(value)
  %2825 = call float @dx.op.unary.f32(i32 6, float %2822)  ; FAbs(value)
  %2826 = fsub fast float 1.000000e+00, %2825
  %2827 = call float @dx.op.unary.f32(i32 24, float %2826)  ; Sqrt(value)
  %2828 = call float @dx.op.binary.f32(i32 36, float %2823, float %2824)  ; FMin(a,b)
  %2829 = call float @dx.op.binary.f32(i32 35, float %2823, float %2824)  ; FMax(a,b)
  %2830 = fadd fast float %2829, 0x3BF0000000000000
  %2831 = fdiv fast float %2828, %2830
  %2832 = fmul fast float %2831, 0x3F99BE1040000000
  %2833 = fsub fast float 0x3FA5746D00000000, %2832
  %2834 = fmul fast float %2833, %2831
  %2835 = fadd fast float %2834, 0x3FB692C5C0000000
  %2836 = fmul fast float %2835, %2831
  %2837 = fadd fast float %2836, 0xBFCFA8A1C0000000
  %2838 = fmul fast float %2837, %2831
  %2839 = fadd fast float %2838, 0x3F79384B40000000
  %2840 = fmul fast float %2839, %2831
  %2841 = fadd fast float %2840, 0x3FE45BF7C0000000
  %2842 = fmul fast float %2841, %2831
  %2843 = fadd fast float %2842, 0x3ED10F8960000000
  %2844 = fcmp fast olt float %2823, %2824
  %2845 = fsub fast float 0x3FEFFFF780000000, %2842
  %2846 = select i1 %2844, float %2845, float %2843
  %2847 = fmul fast float %2846, %2827
  %2848 = fsub fast float %2827, %2847
  %2849 = fcmp fast olt float %2822, 0.000000e+00
  %2850 = icmp eq i32 %2782, -1
  br i1 %2850, label %2896, label %2851

; <label>:2851                                    ; preds = %2806
  %2852 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2853 = extractvalue %dx.types.CBufRet.i32 %2852, 1
  %2854 = and i32 %2853, 31
  %2855 = lshr i32 %2782, %2854
  %2856 = mul i32 %2855, %2100
  %2857 = uitofp i32 %2856 to float
  %2858 = fsub fast float 1.000000e+00, %2848
  %2859 = select i1 %2849, float %2858, float %2847
  %2860 = bitcast float %2859 to i32
  %2861 = bitcast float %2821 to i32
  %2862 = and i32 %2861, -2147483648
  %2863 = xor i32 %2860, %2862
  %2864 = bitcast i32 %2863 to float
  %2865 = fmul fast float %2864, 5.000000e-01
  %2866 = fadd fast float %2865, 5.000000e-01
  %2867 = fmul fast float %2866, %1981
  %2868 = fadd fast float %2867, %2103
  %2869 = fadd fast float %2868, %2857
  %2870 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2871 = fmul fast float %2869, %2870
  %2872 = extractvalue %dx.types.CBufRet.i32 %2852, 0
  %2873 = and i32 %2872, %2782
  %2874 = mul i32 %2873, %2100
  %2875 = uitofp i32 %2874 to float
  %2876 = fsub fast float 1.000000e+00, %2847
  %2877 = select i1 %2849, float %2876, float %2848
  %2878 = bitcast float %2877 to i32
  %2879 = bitcast float %2820 to i32
  %2880 = and i32 %2879, -2147483648
  %2881 = xor i32 %2878, %2880
  %2882 = bitcast i32 %2881 to float
  %2883 = fmul fast float %2882, 5.000000e-01
  %2884 = fadd fast float %2883, 5.000000e-01
  %2885 = fmul fast float %2884, %1981
  %2886 = fadd fast float %2885, %2103
  %2887 = fadd fast float %2886, %2875
  %2888 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %2889 = fmul fast float %2887, %2888
  %2890 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2891 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2892 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2890, %dx.types.Handle %2891, float %2889, float %2871, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2893 = extractvalue %dx.types.ResRet.f32 %2892, 0
  %2894 = extractvalue %dx.types.ResRet.f32 %2892, 1
  %2895 = extractvalue %dx.types.ResRet.f32 %2892, 2
  br label %2896

; <label>:2896                                    ; preds = %2851, %2806
  %2897 = phi float [ %2893, %2851 ], [ 0.000000e+00, %2806 ]
  %2898 = phi float [ %2894, %2851 ], [ 0.000000e+00, %2806 ]
  %2899 = phi float [ %2895, %2851 ], [ 0.000000e+00, %2806 ]
  %2900 = fmul fast float %2897, %2817
  %2901 = fmul fast float %2898, %2817
  %2902 = fmul fast float %2899, %2817
  %2903 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2008, i32 0, i32 %2533, i32 %2284, i32 %2158, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2904 = extractvalue %dx.types.ResRet.i32 %2903, 0
  %2905 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2026, i32 %2904, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2906 = extractvalue %dx.types.ResRet.f32 %2905, 0
  %2907 = extractvalue %dx.types.ResRet.f32 %2905, 1
  %2908 = extractvalue %dx.types.ResRet.f32 %2905, 2
  %2909 = fadd fast float %2538, %2906
  %2910 = fadd fast float %2289, %2907
  %2911 = fadd fast float %2163, %2908
  %2912 = fsub fast float %141, %2909
  %2913 = fsub fast float %145, %2910
  %2914 = fsub fast float %149, %2911
  %2915 = call float @dx.op.dot3.f32(i32 55, float %2912, float %2913, float %2914, float %2912, float %2913, float %2914)  ; Dot3(ax,ay,az,bx,by,bz)
  %2916 = call float @dx.op.dot3.f32(i32 55, float %180, float %181, float %182, float %2912, float %2913, float %2914)  ; Dot3(ax,ay,az,bx,by,bz)
  %2917 = fmul fast float %2916, 2.000000e+00
  %2918 = fsub fast float %2915, %2044
  %2919 = fmul fast float %2917, %2917
  %2920 = fmul fast float %2047, %2918
  %2921 = fsub fast float %2919, %2920
  %2922 = fcmp fast ult float %2921, 0.000000e+00
  br i1 %2922, label %2928, label %2923, !dx.controlflow.hints !80

; <label>:2923                                    ; preds = %2896
  %2924 = call float @dx.op.unary.f32(i32 24, float %2921)  ; Sqrt(value)
  %2925 = fsub fast float %2924, %2917
  %2926 = fmul fast float %2041, 2.000000e+00
  %2927 = fdiv fast float %2925, %2926
  br label %2928

; <label>:2928                                    ; preds = %2923, %2896
  %2929 = phi float [ %2927, %2923 ], [ -1.000000e+00, %2896 ]
  %2930 = fmul fast float %2929, %180
  %2931 = fmul fast float %2929, %181
  %2932 = fmul fast float %2929, %182
  %2933 = fadd fast float %2912, %2930
  %2934 = fadd fast float %2913, %2931
  %2935 = fadd fast float %2914, %2932
  %2936 = fmul fast float %2929, %2929
  %2937 = call float @dx.op.dot3.f32(i32 55, float %2933, float %2934, float %2935, float %180, float %181, float %182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2938 = fmul fast float %2937, %2036
  %2939 = fdiv fast float %2936, %2938
  %2940 = call float @dx.op.dot3.f32(i32 55, float %2933, float %2934, float %2935, float %2933, float %2934, float %2935)  ; Dot3(ax,ay,az,bx,by,bz)
  %2941 = call float @dx.op.unary.f32(i32 25, float %2940)  ; Rsqrt(value)
  %2942 = fmul fast float %2941, %2933
  %2943 = fmul fast float %2941, %2934
  %2944 = fmul fast float %2941, %2935
  %2945 = call float @dx.op.unary.f32(i32 6, float %2942)  ; FAbs(value)
  %2946 = call float @dx.op.unary.f32(i32 6, float %2943)  ; FAbs(value)
  %2947 = call float @dx.op.unary.f32(i32 6, float %2944)  ; FAbs(value)
  %2948 = fsub fast float 1.000000e+00, %2947
  %2949 = call float @dx.op.unary.f32(i32 24, float %2948)  ; Sqrt(value)
  %2950 = call float @dx.op.binary.f32(i32 36, float %2945, float %2946)  ; FMin(a,b)
  %2951 = call float @dx.op.binary.f32(i32 35, float %2945, float %2946)  ; FMax(a,b)
  %2952 = fadd fast float %2951, 0x3BF0000000000000
  %2953 = fdiv fast float %2950, %2952
  %2954 = fmul fast float %2953, 0x3F99BE1040000000
  %2955 = fsub fast float 0x3FA5746D00000000, %2954
  %2956 = fmul fast float %2955, %2953
  %2957 = fadd fast float %2956, 0x3FB692C5C0000000
  %2958 = fmul fast float %2957, %2953
  %2959 = fadd fast float %2958, 0xBFCFA8A1C0000000
  %2960 = fmul fast float %2959, %2953
  %2961 = fadd fast float %2960, 0x3F79384B40000000
  %2962 = fmul fast float %2961, %2953
  %2963 = fadd fast float %2962, 0x3FE45BF7C0000000
  %2964 = fmul fast float %2963, %2953
  %2965 = fadd fast float %2964, 0x3ED10F8960000000
  %2966 = fcmp fast olt float %2945, %2946
  %2967 = fsub fast float 0x3FEFFFF780000000, %2964
  %2968 = select i1 %2966, float %2967, float %2965
  %2969 = fmul fast float %2968, %2949
  %2970 = fsub fast float %2949, %2969
  %2971 = fcmp fast olt float %2944, 0.000000e+00
  %2972 = icmp eq i32 %2904, -1
  br i1 %2972, label %3018, label %2973

; <label>:2973                                    ; preds = %2928
  %2974 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %2975 = extractvalue %dx.types.CBufRet.i32 %2974, 1
  %2976 = and i32 %2975, 31
  %2977 = lshr i32 %2904, %2976
  %2978 = mul i32 %2977, %2100
  %2979 = uitofp i32 %2978 to float
  %2980 = fsub fast float 1.000000e+00, %2970
  %2981 = select i1 %2971, float %2980, float %2969
  %2982 = bitcast float %2981 to i32
  %2983 = bitcast float %2943 to i32
  %2984 = and i32 %2983, -2147483648
  %2985 = xor i32 %2982, %2984
  %2986 = bitcast i32 %2985 to float
  %2987 = fmul fast float %2986, 5.000000e-01
  %2988 = fadd fast float %2987, 5.000000e-01
  %2989 = fmul fast float %2988, %1981
  %2990 = fadd fast float %2989, %2103
  %2991 = fadd fast float %2990, %2979
  %2992 = extractvalue %dx.types.CBufRet.f32 %2104, 1
  %2993 = fmul fast float %2991, %2992
  %2994 = extractvalue %dx.types.CBufRet.i32 %2974, 0
  %2995 = and i32 %2994, %2904
  %2996 = mul i32 %2995, %2100
  %2997 = uitofp i32 %2996 to float
  %2998 = fsub fast float 1.000000e+00, %2969
  %2999 = select i1 %2971, float %2998, float %2970
  %3000 = bitcast float %2999 to i32
  %3001 = bitcast float %2942 to i32
  %3002 = and i32 %3001, -2147483648
  %3003 = xor i32 %3000, %3002
  %3004 = bitcast i32 %3003 to float
  %3005 = fmul fast float %3004, 5.000000e-01
  %3006 = fadd fast float %3005, 5.000000e-01
  %3007 = fmul fast float %3006, %1981
  %3008 = fadd fast float %3007, %2103
  %3009 = fadd fast float %3008, %2997
  %3010 = extractvalue %dx.types.CBufRet.f32 %2104, 0
  %3011 = fmul fast float %3009, %3010
  %3012 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %3013 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3014 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3012, %dx.types.Handle %3013, float %3011, float %2993, float undef, float undef, i32 0, i32 0, i32 undef, float %1987)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3015 = extractvalue %dx.types.ResRet.f32 %3014, 0
  %3016 = extractvalue %dx.types.ResRet.f32 %3014, 1
  %3017 = extractvalue %dx.types.ResRet.f32 %3014, 2
  br label %3018

; <label>:3018                                    ; preds = %2973, %2928
  %3019 = phi float [ %3015, %2973 ], [ 0.000000e+00, %2928 ]
  %3020 = phi float [ %3016, %2973 ], [ 0.000000e+00, %2928 ]
  %3021 = phi float [ %3017, %2973 ], [ 0.000000e+00, %2928 ]
  %3022 = fmul fast float %3019, %2939
  %3023 = fmul fast float %3020, %2939
  %3024 = fmul fast float %3021, %2939
  %3025 = fsub fast float %2281, %2155
  %3026 = fsub fast float %2282, %2156
  %3027 = fsub fast float %2283, %2157
  %3028 = fmul fast float %3025, %2002
  %3029 = fmul fast float %3026, %2002
  %3030 = fmul fast float %3027, %2002
  %3031 = fadd fast float %3028, %2155
  %3032 = fadd fast float %3029, %2156
  %3033 = fadd fast float %3030, %2157
  %3034 = fsub fast float %2529, %2407
  %3035 = fsub fast float %2530, %2408
  %3036 = fsub fast float %2531, %2409
  %3037 = fmul fast float %3034, %2002
  %3038 = fmul fast float %3035, %2002
  %3039 = fmul fast float %3036, %2002
  %3040 = fsub fast float %2778, %2656
  %3041 = fsub fast float %2779, %2657
  %3042 = fsub fast float %2780, %2658
  %3043 = fmul fast float %3040, %2002
  %3044 = fmul fast float %3041, %2002
  %3045 = fmul fast float %3042, %2002
  %3046 = fadd fast float %3043, %2656
  %3047 = fadd fast float %3044, %2657
  %3048 = fadd fast float %3045, %2658
  %3049 = fsub fast float %3022, %2900
  %3050 = fsub fast float %3023, %2901
  %3051 = fsub fast float %3024, %2902
  %3052 = fmul fast float %3049, %2002
  %3053 = fmul fast float %3050, %2002
  %3054 = fmul fast float %3051, %2002
  %3055 = fsub fast float %2407, %3031
  %3056 = fadd fast float %3055, %3037
  %3057 = fsub fast float %2408, %3032
  %3058 = fadd fast float %3057, %3038
  %3059 = fsub fast float %2409, %3033
  %3060 = fadd fast float %3059, %3039
  %3061 = fmul fast float %3056, %2001
  %3062 = fmul fast float %3058, %2001
  %3063 = fmul fast float %3060, %2001
  %3064 = fadd fast float %3061, %3031
  %3065 = fadd fast float %3062, %3032
  %3066 = fadd fast float %3063, %3033
  %3067 = fsub fast float %2900, %3046
  %3068 = fadd fast float %3067, %3052
  %3069 = fsub fast float %2901, %3047
  %3070 = fadd fast float %3069, %3053
  %3071 = fsub fast float %2902, %3048
  %3072 = fadd fast float %3071, %3054
  %3073 = fmul fast float %3068, %2001
  %3074 = fmul fast float %3070, %2001
  %3075 = fmul fast float %3072, %2001
  %3076 = fsub fast float %3046, %3064
  %3077 = fadd fast float %3076, %3073
  %3078 = fsub fast float %3047, %3065
  %3079 = fadd fast float %3078, %3074
  %3080 = fsub fast float %3048, %3066
  %3081 = fadd fast float %3080, %3075
  %3082 = fmul fast float %3077, %2000
  %3083 = fmul fast float %3079, %2000
  %3084 = fmul fast float %3081, %2000
  %3085 = fadd fast float %3082, %3064
  %3086 = fadd fast float %3083, %3065
  %3087 = fadd fast float %3084, %3066
  %3088 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %3089 = extractvalue %dx.types.CBufRet.i32 %3088, 2
  %3090 = icmp eq i32 %3089, 0
  br i1 %3090, label %3091, label %3127

; <label>:3091                                    ; preds = %3018
  %3092 = extractvalue %dx.types.CBufRet.i32 %3088, 3
  %3093 = icmp eq i32 %3092, 0
  br i1 %3093, label %3094, label %3127

; <label>:3094                                    ; preds = %3091
  %3095 = fmul fast float %3085, %1601
  %3096 = fmul fast float %3086, %1601
  %3097 = fmul fast float %3087, %1601
  %3098 = fadd fast float %3095, %1880
  %3099 = fadd fast float %3096, %1881
  %3100 = fadd fast float %3097, %1882
  br label %3127

; <label>:3101                                    ; preds = %1885
  %3102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3103 = extractvalue %dx.types.CBufRet.f32 %3102, 1
  %3104 = fcmp fast ogt float %3103, 0.000000e+00
  br i1 %3104, label %3105, label %3127

; <label>:3105                                    ; preds = %3101
  %3106 = extractvalue %dx.types.CBufRet.f32 %3102, 0
  %3107 = fadd fast float %3106, 0xC02BEAFA60000000
  %3108 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3109 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3110 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3108, %dx.types.Handle %3109, float %180, float %181, float %182, float undef, i32 undef, i32 undef, i32 undef, float %3107)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3111 = extractvalue %dx.types.ResRet.f32 %3110, 0
  %3112 = extractvalue %dx.types.ResRet.f32 %3110, 1
  %3113 = extractvalue %dx.types.ResRet.f32 %3110, 2
  %3114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %3115 = extractvalue %dx.types.CBufRet.f32 %3114, 0
  %3116 = extractvalue %dx.types.CBufRet.f32 %3114, 1
  %3117 = extractvalue %dx.types.CBufRet.f32 %3114, 2
  %3118 = fmul fast float %3111, %1601
  %3119 = fmul fast float %3118, %3115
  %3120 = fmul fast float %3112, %1601
  %3121 = fmul fast float %3120, %3116
  %3122 = fmul fast float %3113, %1601
  %3123 = fmul fast float %3122, %3117
  %3124 = fadd fast float %3119, %1880
  %3125 = fadd fast float %3121, %1881
  %3126 = fadd fast float %3123, %1882
  br label %3127

; <label>:3127                                    ; preds = %3105, %3101, %3094, %3091, %3018, %1879
  %3128 = phi float [ %1880, %1879 ], [ %3098, %3094 ], [ %1880, %3091 ], [ %3085, %3018 ], [ %3124, %3105 ], [ %1880, %3101 ]
  %3129 = phi float [ %1881, %1879 ], [ %3099, %3094 ], [ %1881, %3091 ], [ %3086, %3018 ], [ %3125, %3105 ], [ %1881, %3101 ]
  %3130 = phi float [ %1882, %1879 ], [ %3100, %3094 ], [ %1882, %3091 ], [ %3087, %3018 ], [ %3126, %3105 ], [ %1882, %3101 ]
  %3131 = phi float [ %1600, %1879 ], [ %188, %3094 ], [ %188, %3091 ], [ %188, %3018 ], [ %1887, %3105 ], [ %1887, %3101 ]
  %3132 = phi float [ %1884, %1879 ], [ %1884, %3094 ], [ %1884, %3091 ], [ %1884, %3018 ], [ 1.000000e+00, %3105 ], [ 1.000000e+00, %3101 ]
  %3133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3134 = extractvalue %dx.types.CBufRet.f32 %3133, 1
  %3135 = fcmp fast ogt float %3134, 0.000000e+00
  br i1 %3135, label %3136, label %3168

; <label>:3136                                    ; preds = %3127
  %3137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3138 = extractvalue %dx.types.CBufRet.f32 %3137, 1
  %3139 = fcmp fast ogt float %3138, 0.000000e+00
  br i1 %3139, label %3140, label %3168

; <label>:3140                                    ; preds = %3136
  %3141 = extractvalue %dx.types.CBufRet.f32 %3137, 2
  %3142 = extractvalue %dx.types.CBufRet.f32 %3133, 0
  %3143 = call float @dx.op.binary.f32(i32 35, float %3141, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3144 = call float @dx.op.unary.f32(i32 23, float %3143)  ; Log(value)
  %3145 = fmul fast float %3144, 0x3FF3333340000000
  %3146 = fadd fast float %3142, -2.000000e+00
  %3147 = fadd fast float %3146, %3145
  %3148 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3149 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3150 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3148, %dx.types.Handle %3149, float %180, float %181, float %182, float undef, i32 undef, i32 undef, i32 undef, float %3147)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3151 = extractvalue %dx.types.ResRet.f32 %3150, 0
  %3152 = extractvalue %dx.types.ResRet.f32 %3150, 1
  %3153 = extractvalue %dx.types.ResRet.f32 %3150, 2
  %3154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %3155 = extractvalue %dx.types.CBufRet.f32 %3154, 0
  %3156 = extractvalue %dx.types.CBufRet.f32 %3154, 1
  %3157 = extractvalue %dx.types.CBufRet.f32 %3154, 2
  %3158 = fmul fast float %3155, %3151
  %3159 = fmul fast float %3156, %3152
  %3160 = fmul fast float %3157, %3153
  %3161 = extractvalue %dx.types.CBufRet.f32 %3137, 3
  %3162 = fmul fast float %3161, %1600
  %3163 = call float @dx.op.unary.f32(i32 7, float %3162)  ; Saturate(value)
  %3164 = fmul fast float %3163, %3138
  %3165 = fmul fast float %3158, %3164
  %3166 = fmul fast float %3159, %3164
  %3167 = fmul fast float %3160, %3164
  br label %3168

; <label>:3168                                    ; preds = %3140, %3136, %3127
  %3169 = phi float [ %3165, %3140 ], [ 0.000000e+00, %3136 ], [ 0.000000e+00, %3127 ]
  %3170 = phi float [ %3166, %3140 ], [ 0.000000e+00, %3136 ], [ 0.000000e+00, %3127 ]
  %3171 = phi float [ %3167, %3140 ], [ 0.000000e+00, %3136 ], [ 0.000000e+00, %3127 ]
  %3172 = fadd fast float %3169, %3128
  %3173 = fadd fast float %3170, %3129
  %3174 = fadd fast float %3171, %3130
  %3175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %3176 = extractvalue %dx.types.CBufRet.f32 %3175, 2
  %3177 = fmul fast float %3176, %3172
  %3178 = fmul fast float %3176, %3173
  %3179 = fmul fast float %3176, %3174
  %3180 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %47, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3181 = extractvalue %dx.types.CBufRet.i32 %3180, 0
  %3182 = icmp eq i32 %3181, 0
  br i1 %3182, label %3448, label %3183

; <label>:3183                                    ; preds = %3168
  %3184 = fmul fast float %3131, %180
  %3185 = fmul fast float %3131, %181
  %3186 = fmul fast float %3131, %182
  %3187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %3188 = extractvalue %dx.types.CBufRet.f32 %3187, 3
  %3189 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3190 = extractvalue %dx.types.CBufRet.f32 %3189, 2
  %3191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %3192 = extractvalue %dx.types.CBufRet.f32 %3191, 2
  %3193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %3194 = extractvalue %dx.types.CBufRet.f32 %3193, 2
  %3195 = fmul fast float %3192, 2.097152e+06
  %3196 = fadd fast float %3195, %3194
  %3197 = call float @dx.op.binary.f32(i32 36, float %3196, float %3190)  ; FMin(a,b)
  %3198 = fsub fast float %3186, %3197
  %3199 = fadd fast float %3198, %3194
  %3200 = fadd fast float %3199, %3195
  %3201 = call float @dx.op.dot3.f32(i32 55, float %3184, float %3185, float %3200, float %3184, float %3185, float %3200)  ; Dot3(ax,ay,az,bx,by,bz)
  %3202 = call float @dx.op.binary.f32(i32 35, float %3201, float 0x3E45798EE0000000)  ; FMax(a,b)
  %3203 = call float @dx.op.unary.f32(i32 25, float %3202)  ; Rsqrt(value)
  %3204 = fmul fast float %3203, %3201
  %3205 = fmul fast float %3203, %3184
  %3206 = fmul fast float %3203, %3185
  %3207 = fmul fast float %3200, %3203
  %3208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %3209 = extractvalue %dx.types.CBufRet.f32 %3189, 3
  %3210 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3209)  ; FMax(a,b)
  %3211 = fcmp fast ogt float %3210, 0.000000e+00
  %3212 = extractvalue %dx.types.CBufRet.f32 %3189, 1
  %3213 = extractvalue %dx.types.CBufRet.f32 %3208, 1
  br i1 %3211, label %3217, label %3214

; <label>:3214                                    ; preds = %3183
  %3215 = extractvalue %dx.types.CBufRet.f32 %3208, 0
  %3216 = extractvalue %dx.types.CBufRet.f32 %3189, 0
  br label %3241

; <label>:3217                                    ; preds = %3183
  %3218 = fmul fast float %3210, %3203
  %3219 = fmul fast float %3218, %3200
  %3220 = fadd fast float %3219, %3197
  %3221 = fsub fast float %3200, %3219
  %3222 = fsub fast float 1.000000e+00, %3218
  %3223 = fmul fast float %3222, %3204
  %3224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3225 = extractvalue %dx.types.CBufRet.f32 %3224, 1
  %3226 = fsub fast float %3220, %3225
  %3227 = fmul fast float %3226, %3212
  %3228 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3227)  ; FMax(a,b)
  %3229 = extractvalue %dx.types.CBufRet.f32 %3224, 0
  %3230 = fsub fast float -0.000000e+00, %3228
  %3231 = call float @dx.op.unary.f32(i32 21, float %3230)  ; Exp(value)
  %3232 = fmul fast float %3229, %3231
  %3233 = extractvalue %dx.types.CBufRet.f32 %3208, 3
  %3234 = fsub fast float %3220, %3233
  %3235 = fmul fast float %3234, %3213
  %3236 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3235)  ; FMax(a,b)
  %3237 = extractvalue %dx.types.CBufRet.f32 %3208, 2
  %3238 = fsub fast float -0.000000e+00, %3236
  %3239 = call float @dx.op.unary.f32(i32 21, float %3238)  ; Exp(value)
  %3240 = fmul fast float %3237, %3239
  br label %3241

; <label>:3241                                    ; preds = %3217, %3214
  %3242 = phi float [ %3232, %3217 ], [ %3216, %3214 ]
  %3243 = phi float [ %3240, %3217 ], [ %3215, %3214 ]
  %3244 = phi float [ %3223, %3217 ], [ %3204, %3214 ]
  %3245 = phi float [ %3221, %3217 ], [ %3200, %3214 ]
  %3246 = fmul fast float %3212, %3245
  %3247 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3246)  ; FMax(a,b)
  %3248 = fsub fast float -0.000000e+00, %3247
  %3249 = call float @dx.op.unary.f32(i32 21, float %3248)  ; Exp(value)
  %3250 = fsub fast float 1.000000e+00, %3249
  %3251 = fdiv fast float %3250, %3247
  %3252 = fmul fast float %3247, 0x3FCEBFBE00000000
  %3253 = fsub fast float 0x3FE62E4300000000, %3252
  %3254 = call float @dx.op.unary.f32(i32 6, float %3247)  ; FAbs(value)
  %3255 = fcmp fast ogt float %3254, 0x3F847AE140000000
  %3256 = select i1 %3255, float %3251, float %3253
  %3257 = fmul fast float %3256, %3242
  %3258 = fmul fast float %3213, %3245
  %3259 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3258)  ; FMax(a,b)
  %3260 = fsub fast float -0.000000e+00, %3259
  %3261 = call float @dx.op.unary.f32(i32 21, float %3260)  ; Exp(value)
  %3262 = fsub fast float 1.000000e+00, %3261
  %3263 = fdiv fast float %3262, %3259
  %3264 = fmul fast float %3259, 0x3FCEBFBE00000000
  %3265 = fsub fast float 0x3FE62E4300000000, %3264
  %3266 = call float @dx.op.unary.f32(i32 6, float %3259)  ; FAbs(value)
  %3267 = fcmp fast ogt float %3266, 0x3F847AE140000000
  %3268 = select i1 %3267, float %3263, float %3265
  %3269 = fmul fast float %3268, %3243
  %3270 = fadd fast float %3269, %3257
  %3271 = extractvalue %dx.types.CBufRet.f32 %3187, 0
  %3272 = extractvalue %dx.types.CBufRet.f32 %3187, 1
  %3273 = extractvalue %dx.types.CBufRet.f32 %3187, 2
  %3274 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3275 = extractvalue %dx.types.CBufRet.f32 %3274, 2
  %3276 = fcmp fast ogt float %3275, 0.000000e+00
  br i1 %3276, label %3277, label %3313, !dx.controlflow.hints !81

; <label>:3277                                    ; preds = %3241
  %3278 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %3279 = extractvalue %dx.types.CBufRet.f32 %3278, 0
  %3280 = fmul fast float %3279, %3204
  %3281 = extractvalue %dx.types.CBufRet.f32 %3278, 1
  %3282 = fadd fast float %3280, %3281
  %3283 = call float @dx.op.unary.f32(i32 7, float %3282)  ; Saturate(value)
  %3284 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %3285 = extractvalue %dx.types.CBufRet.f32 %3284, 1
  %3286 = extractvalue %dx.types.CBufRet.f32 %3284, 0
  %3287 = fsub fast float -0.000000e+00, %3286
  %3288 = call float @dx.op.dot2.f32(i32 54, float %3184, float %3185, float %3285, float %3287)  ; Dot2(ax,ay,bx,by)
  %3289 = call float @dx.op.dot2.f32(i32 54, float %3184, float %3185, float %3286, float %3285)  ; Dot2(ax,ay,bx,by)
  %3290 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3291 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3292 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3290, %dx.types.Handle %3291, float %3288, float %3289, float %3200, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3293 = extractvalue %dx.types.ResRet.f32 %3292, 0
  %3294 = extractvalue %dx.types.ResRet.f32 %3292, 1
  %3295 = extractvalue %dx.types.ResRet.f32 %3292, 2
  %3296 = extractvalue %dx.types.CBufRet.f32 %3278, 2
  %3297 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3290, %dx.types.Handle %3291, float %3288, float %3289, float %3200, float undef, i32 undef, i32 undef, i32 undef, float %3296)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3298 = extractvalue %dx.types.ResRet.f32 %3297, 0
  %3299 = extractvalue %dx.types.ResRet.f32 %3297, 1
  %3300 = extractvalue %dx.types.ResRet.f32 %3297, 2
  %3301 = fsub fast float %3293, %3298
  %3302 = fsub fast float %3294, %3299
  %3303 = fsub fast float %3295, %3300
  %3304 = fmul fast float %3301, %3283
  %3305 = fmul fast float %3302, %3283
  %3306 = fmul fast float %3303, %3283
  %3307 = fadd fast float %3304, %3298
  %3308 = fadd fast float %3305, %3299
  %3309 = fadd fast float %3306, %3300
  %3310 = fmul fast float %3307, %3271
  %3311 = fmul fast float %3308, %3272
  %3312 = fmul fast float %3309, %3273
  br label %3313

; <label>:3313                                    ; preds = %3277, %3241
  %3314 = phi float [ %3310, %3277 ], [ %3271, %3241 ]
  %3315 = phi float [ %3311, %3277 ], [ %3272, %3241 ]
  %3316 = phi float [ %3312, %3277 ], [ %3273, %3241 ]
  %3317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3318 = extractvalue %dx.types.CBufRet.f32 %3317, 0
  %3319 = extractvalue %dx.types.CBufRet.f32 %3317, 1
  %3320 = extractvalue %dx.types.CBufRet.f32 %3317, 2
  %3321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %3322 = extractvalue %dx.types.CBufRet.f32 %3321, 1
  %3323 = fmul fast float %3322, %3318
  %3324 = fmul fast float %3322, %3319
  %3325 = fmul fast float %3322, %3320
  %3326 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3327 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3328 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3326, %dx.types.Handle %3327, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3329 = extractvalue %dx.types.ResRet.f32 %3328, 0
  %3330 = extractvalue %dx.types.ResRet.f32 %3328, 1
  %3331 = extractvalue %dx.types.ResRet.f32 %3328, 2
  %3332 = fmul fast float %3323, %3329
  %3333 = fmul fast float %3324, %3330
  %3334 = fmul fast float %3325, %3331
  %3335 = fadd fast float %3332, %3314
  %3336 = fadd fast float %3333, %3315
  %3337 = fadd fast float %3334, %3316
  %3338 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3339 = extractvalue %dx.types.CBufRet.f32 %3338, 3
  %3340 = fcmp fast oge float %3339, 0.000000e+00
  %3341 = fcmp fast oeq float %3275, 0.000000e+00
  %3342 = and i1 %3340, %3341
  br i1 %3342, label %3343, label %3414

; <label>:3343                                    ; preds = %3313
  %3344 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %3345 = extractvalue %dx.types.CBufRet.f32 %3344, 0
  %3346 = extractvalue %dx.types.CBufRet.f32 %3344, 1
  %3347 = extractvalue %dx.types.CBufRet.f32 %3344, 2
  %3348 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %3349 = extractvalue %dx.types.CBufRet.f32 %3348, 0
  %3350 = extractvalue %dx.types.CBufRet.f32 %3348, 1
  %3351 = extractvalue %dx.types.CBufRet.f32 %3348, 2
  %3352 = fmul fast float %3322, 0x3FB45F3060000000
  %3353 = fmul fast float %3352, %3349
  %3354 = fmul fast float %3352, %3350
  %3355 = fmul fast float %3352, %3351
  %3356 = fadd fast float %3353, %3345
  %3357 = fadd fast float %3354, %3346
  %3358 = fadd fast float %3355, %3347
  %3359 = extractvalue %dx.types.CBufRet.f32 %3344, 3
  %3360 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %3361 = extractvalue %dx.types.CBufRet.f32 %3360, 0
  %3362 = extractvalue %dx.types.CBufRet.f32 %3360, 1
  %3363 = extractvalue %dx.types.CBufRet.f32 %3360, 2
  %3364 = call float @dx.op.dot3.f32(i32 55, float %3205, float %3206, float %3207, float %3361, float %3362, float %3363)  ; Dot3(ax,ay,az,bx,by,bz)
  %3365 = call float @dx.op.unary.f32(i32 7, float %3364)  ; Saturate(value)
  %3366 = call float @dx.op.unary.f32(i32 23, float %3365)  ; Log(value)
  %3367 = fmul fast float %3366, %3359
  %3368 = call float @dx.op.unary.f32(i32 21, float %3367)  ; Exp(value)
  %3369 = fmul fast float %3368, %3356
  %3370 = fmul fast float %3368, %3357
  %3371 = fmul fast float %3368, %3358
  %3372 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %3373 = extractvalue %dx.types.CBufRet.f32 %3372, 3
  %3374 = fcmp fast ogt float %3373, 0.000000e+00
  br i1 %3374, label %3375, label %3400

; <label>:3375                                    ; preds = %3343
  %3376 = extractvalue %dx.types.CBufRet.f32 %3372, 0
  %3377 = extractvalue %dx.types.CBufRet.f32 %3372, 1
  %3378 = extractvalue %dx.types.CBufRet.f32 %3372, 2
  %3379 = fmul fast float %3352, %3376
  %3380 = fmul fast float %3352, %3377
  %3381 = fmul fast float %3352, %3378
  %3382 = fadd fast float %3379, %3345
  %3383 = fadd fast float %3380, %3346
  %3384 = fadd fast float %3381, %3347
  %3385 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %3386 = extractvalue %dx.types.CBufRet.f32 %3385, 0
  %3387 = extractvalue %dx.types.CBufRet.f32 %3385, 1
  %3388 = extractvalue %dx.types.CBufRet.f32 %3385, 2
  %3389 = call float @dx.op.dot3.f32(i32 55, float %3205, float %3206, float %3207, float %3386, float %3387, float %3388)  ; Dot3(ax,ay,az,bx,by,bz)
  %3390 = call float @dx.op.unary.f32(i32 7, float %3389)  ; Saturate(value)
  %3391 = call float @dx.op.unary.f32(i32 23, float %3390)  ; Log(value)
  %3392 = fmul fast float %3391, %3359
  %3393 = call float @dx.op.unary.f32(i32 21, float %3392)  ; Exp(value)
  %3394 = fmul fast float %3393, %3382
  %3395 = fmul fast float %3393, %3383
  %3396 = fmul fast float %3393, %3384
  %3397 = fadd fast float %3394, %3369
  %3398 = fadd fast float %3395, %3370
  %3399 = fadd fast float %3396, %3371
  br label %3400

; <label>:3400                                    ; preds = %3375, %3343
  %3401 = phi float [ %3397, %3375 ], [ %3369, %3343 ]
  %3402 = phi float [ %3398, %3375 ], [ %3370, %3343 ]
  %3403 = phi float [ %3399, %3375 ], [ %3371, %3343 ]
  %3404 = fsub fast float %3244, %3339
  %3405 = call float @dx.op.binary.f32(i32 35, float %3404, float 0.000000e+00)  ; FMax(a,b)
  %3406 = fmul fast float %3270, %3405
  %3407 = fsub fast float -0.000000e+00, %3406
  %3408 = call float @dx.op.unary.f32(i32 21, float %3407)  ; Exp(value)
  %3409 = call float @dx.op.unary.f32(i32 7, float %3408)  ; Saturate(value)
  %3410 = fsub fast float 1.000000e+00, %3409
  %3411 = fmul fast float %3410, %3401
  %3412 = fmul fast float %3410, %3402
  %3413 = fmul fast float %3410, %3403
  br label %3414

; <label>:3414                                    ; preds = %3400, %3313
  %3415 = phi float [ %3411, %3400 ], [ 0.000000e+00, %3313 ]
  %3416 = phi float [ %3412, %3400 ], [ 0.000000e+00, %3313 ]
  %3417 = phi float [ %3413, %3400 ], [ 0.000000e+00, %3313 ]
  %3418 = fmul fast float %3244, %3270
  %3419 = fsub fast float -0.000000e+00, %3418
  %3420 = call float @dx.op.unary.f32(i32 21, float %3419)  ; Exp(value)
  %3421 = call float @dx.op.unary.f32(i32 7, float %3420)  ; Saturate(value)
  %3422 = call float @dx.op.binary.f32(i32 35, float %3421, float %3188)  ; FMax(a,b)
  %3423 = extractvalue %dx.types.CBufRet.f32 %3274, 3
  %3424 = fcmp fast ogt float %3423, 0.000000e+00
  %3425 = fcmp fast ogt float %3204, %3423
  %3426 = and i1 %3424, %3425
  %3427 = select i1 %3426, float 0.000000e+00, float %3415
  %3428 = select i1 %3426, float 0.000000e+00, float %3416
  %3429 = select i1 %3426, float 0.000000e+00, float %3417
  %3430 = select i1 %3426, float 1.000000e+00, float %3422
  %3431 = fsub fast float 1.000000e+00, %3430
  %3432 = fmul fast float %3431, %3335
  %3433 = fmul fast float %3431, %3336
  %3434 = fmul fast float %3431, %3337
  %3435 = fadd fast float %3432, %3427
  %3436 = fadd fast float %3433, %3428
  %3437 = fadd fast float %3434, %3429
  %3438 = fmul fast float %3430, %3177
  %3439 = fmul fast float %3430, %3178
  %3440 = fmul fast float %3430, %3179
  %3441 = fmul fast float %3176, %3132
  %3442 = fmul fast float %3441, %3435
  %3443 = fmul fast float %3441, %3436
  %3444 = fmul fast float %3441, %3437
  %3445 = fadd fast float %3442, %3438
  %3446 = fadd fast float %3443, %3439
  %3447 = fadd fast float %3444, %3440
  br label %3448

; <label>:3448                                    ; preds = %3414, %3168
  %3449 = phi float [ %3445, %3414 ], [ %3177, %3168 ]
  %3450 = phi float [ %3446, %3414 ], [ %3178, %3168 ]
  %3451 = phi float [ %3447, %3414 ], [ %3179, %3168 ]
  %3452 = call float @dx.op.binary.f32(i32 35, float %3450, float %3451)  ; FMax(a,b)
  %3453 = call float @dx.op.binary.f32(i32 35, float %3449, float %3452)  ; FMax(a,b)
  %3454 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %3455 = extractvalue %dx.types.CBufRet.f32 %3454, 2
  %3456 = fcmp fast ogt float %3453, %3455
  br i1 %3456, label %3457, label %3462

; <label>:3457                                    ; preds = %3448
  %3458 = fdiv fast float %3455, %3453
  %3459 = fmul fast float %3458, %3449
  %3460 = fmul fast float %3458, %3450
  %3461 = fmul fast float %3458, %3451
  br label %3462

; <label>:3462                                    ; preds = %3457, %3448
  %3463 = phi float [ %3459, %3457 ], [ %3449, %3448 ]
  %3464 = phi float [ %3460, %3457 ], [ %3450, %3448 ]
  %3465 = phi float [ %3461, %3457 ], [ %3451, %3448 ]
  %3466 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3466, i32 %59, i32 %60, i32 undef, float %3463, float %3464, float %3465, float %3463, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3467 = call float @dx.op.binary.f32(i32 35, float %3131, float 0.000000e+00)  ; FMax(a,b)
  %3468 = select i1 %1605, float -1.000000e+00, float 1.000000e+00
  %3469 = fmul fast float %3467, %3468
  %3470 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3470, i32 %59, i32 %60, i32 undef, float %3469, float %3469, float %3469, float %3469, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3471

; <label>:3471                                    ; preds = %3462, %0
  ret void

; <label>:3472                                    ; preds = %1475
  %3473 = fsub fast float %1462, %1457
  %3474 = call float @dx.op.unary.f32(i32 6, float %3473)  ; FAbs(value)
  %3475 = fsub fast float %3474, %1463
  %3476 = fdiv fast float %3475, %1464
  %3477 = call float @dx.op.unary.f32(i32 7, float %3476)  ; Saturate(value)
  %3478 = fsub fast float 1.000000e+00, %3477
  br label %3479

; <label>:3479                                    ; preds = %3472, %1475
  %3480 = phi float [ %3478, %3472 ], [ %1479, %1475 ]
  %3481 = fcmp uge float %1458, 1.000000e+00
  %3482 = or i1 %1067, %3481
  %3483 = select i1 %3481, float 0.000000e+00, float 1.000000e+00
  br i1 %3482, label %3491, label %3484

; <label>:3484                                    ; preds = %3479
  %3485 = fsub fast float %1462, %1458
  %3486 = call float @dx.op.unary.f32(i32 6, float %3485)  ; FAbs(value)
  %3487 = fsub fast float %3486, %1463
  %3488 = fdiv fast float %3487, %1464
  %3489 = call float @dx.op.unary.f32(i32 7, float %3488)  ; Saturate(value)
  %3490 = fsub fast float 1.000000e+00, %3489
  br label %3491

; <label>:3491                                    ; preds = %3484, %3479
  %3492 = phi float [ %3490, %3484 ], [ %3483, %3479 ]
  %3493 = fcmp uge float %1459, 1.000000e+00
  %3494 = or i1 %1067, %3493
  %3495 = select i1 %3493, float 0.000000e+00, float 1.000000e+00
  br i1 %3494, label %3503, label %3496

; <label>:3496                                    ; preds = %3491
  %3497 = fsub fast float %1462, %1459
  %3498 = call float @dx.op.unary.f32(i32 6, float %3497)  ; FAbs(value)
  %3499 = fsub fast float %3498, %1463
  %3500 = fdiv fast float %3499, %1464
  %3501 = call float @dx.op.unary.f32(i32 7, float %3500)  ; Saturate(value)
  %3502 = fsub fast float 1.000000e+00, %3501
  br label %3503

; <label>:3503                                    ; preds = %3496, %3491
  %3504 = phi float [ %3502, %3496 ], [ %3495, %3491 ]
  %3505 = fmul fast float %1476, %1437
  %3506 = fmul fast float %3480, %1438
  %3507 = fmul fast float %3492, %1440
  %3508 = fmul fast float %3504, %1441
  %3509 = call float @dx.op.dot4.f32(i32 56, float %3505, float %3506, float %3507, float %3508, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3510 = fmul fast float %3509, %1450
  %3511 = fcmp fast ogt float %3510, 0.000000e+00
  br i1 %3511, label %1480, label %1220
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!56}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !34, !42, !48}
!5 = !{!6, !8, !10, !11, !12, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33}
!6 = !{i32 0, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 5}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !7}
!11 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 16}
!14 = !{i32 5, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!15 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!18 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 12, i32 0, !13}
!24 = !{i32 15, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 15, i32 1, i32 4, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!26 = !{i32 17, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 12, i32 0, !13}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !7}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !7}
!29 = !{i32 20, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 21, i32 1, i32 10, i32 0, !9}
!31 = !{i32 22, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 22, i32 1, i32 10, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !7}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !7}
!34 = !{!35, !37, !38, !40, !41}
!35 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!36 = !{i32 1, i32 4}
!37 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!38 = !{i32 2, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !39}
!39 = !{i32 1, i32 8}
!40 = !{i32 3, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!41 = !{i32 4, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!42 = !{!43, !44, !45, !46, !47}
!43 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1320, null}
!44 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!45 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 140, null}
!46 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!47 = !{i32 4, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 4, i32 1, i32 180, null}
!48 = !{!49, !50, !51, !52, !53, !54, !55}
!49 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!50 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!51 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!52 = !{i32 3, %struct.SamplerState* undef, !"", i32 1000, i32 5, i32 1, i32 0, null}
!53 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!54 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!55 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!56 = !{void ()* @ReflectionTraceVoxelsCS, !"ReflectionTraceVoxelsCS", null, !4, !57}
!57 = !{i32 0, i64 16, i32 4, !58, i32 5, !59}
!58 = !{i32 64, i32 1, i32 1}
!59 = !{i32 0}
!60 = distinct !{!60, !61}
!61 = !{!"llvm.loop.unroll.disable"}
!62 = distinct !{!62, !61}
!63 = !{!64, !64, i64 0}
!64 = !{!"int", !65, i64 0}
!65 = !{!"omnipotent char", !66, i64 0}
!66 = !{!"Simple C/C++ TBAA"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!69 = distinct !{!69, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!70 = !{!71, !73, !75, !77}
!71 = distinct !{!71, !72, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!72 = distinct !{!72, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!73 = distinct !{!73, !74, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z: %ConeTraceResult"}
!74 = distinct !{!74, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z"}
!75 = distinct !{!75, !76, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!76 = distinct !{!76, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!77 = distinct !{!77, !78, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!78 = distinct !{!78, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!79 = !{!73, !75, !77}
!80 = distinct !{!80, !"dx.controlflow.hints", i32 2}
!81 = distinct !{!81, !"dx.controlflow.hints", i32 1}
