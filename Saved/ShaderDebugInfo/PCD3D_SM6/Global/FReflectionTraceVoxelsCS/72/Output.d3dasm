;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 05a94137c28557a9ffd1d24494d35fa9
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  144
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  148
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  152
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  160
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint ReflectionDownsampleFactor;              ; Offset:  272
;       uint2 ReflectionTracingViewSize;              ; Offset:  280
;       uint2 ReflectionTracingBufferSize;            ; Offset:  288
;       float MaxRayIntensity;                        ; Offset:  296
;       float ReflectionSmoothBias;                   ; Offset:  300
;       uint ReflectionPass;                          ; Offset:  304
;       uint UseJitter;                               ; Offset:  308
;       uint UseHighResSurface;                       ; Offset:  312
;       float NearFieldMaxTraceDistance;              ; Offset:  320
;       float CardTraceEndDistanceFromCamera;         ; Offset:  484
;       float MaxTraceDistance;                       ; Offset:  504
;       float MaxMeshSDFTraceDistance;                ; Offset:  508
;       float SurfaceBias;                            ; Offset:  512
;       int HeightfieldMaxTracingSteps;               ; Offset:  528
;       float ReprojectionRadiusScale;                ; Offset:  640
;       float InvClipmapFadeSize;                     ; Offset:  652
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  656
;       uint RadianceProbeClipmapResolution;          ; Offset:  664
;       uint NumRadianceProbeClipmaps;                ; Offset:  668
;       uint RadianceProbeResolution;                 ; Offset:  672
;       uint FinalProbeResolution;                    ; Offset:  676
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  680
;       uint CalculateIrradiance;                     ; Offset:  684
;       uint IrradianceProbeResolution;               ; Offset:  688
;       uint OcclusionProbeResolution;                ; Offset:  692
;       float4 RadianceProbeSettings[6];              ; Offset:  752
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  848
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  944
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1040
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1048
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1056
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1064
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1068
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1072
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1076
;       float4 HZBUvFactorAndInvFactor;               ; Offset: 1120
;       float2 PrevSceneColorBilinearUVMin;           ; Offset: 1136
;       float2 PrevSceneColorBilinearUVMax;           ; Offset: 1144
;       float4 PrevScreenPositionScaleBias;           ; Offset: 1152
;       float4 PrevScreenPositionScaleBiasForDepth;   ; Offset: 1168
;       float PrevSceneColorPreExposureCorrection;    ; Offset: 1184
;       float2 HZBBaseTexelSize;                      ; Offset: 1192
;       float4 HZBUVToScreenUVScaleBias;              ; Offset: 1200
;       float RelativeDepthThickness;                 ; Offset: 1296
;       float SampleSceneColorNormalTreshold;         ; Offset: 1300
;       float DistantScreenTraceSlopeCompareTolerance;; Offset: 1312
;       float DistantScreenTraceMaxTraceDistance;     ; Offset: 1316
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1320
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_AllocatedPageCountBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  200
;       uint PrePadding_VirtualVoxel_204;             ; Offset:  204
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  208
;       float PrePadding_VirtualVoxel_212;            ; Offset:  212
;       float PrePadding_VirtualVoxel_216;            ; Offset:  216
;       float PrePadding_VirtualVoxel_220;            ; Offset:  220
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  224
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   228
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S1             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S2             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S3             s2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T1             t1     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T2             t2     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf      T3             t3     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o      T4             t4     1
; VirtualVoxel_PageTexture          texture     u32          3d      T5             t5     1
; GBufferVelocityTexture            texture     f32          2d      T6             t6     1
; DownsampledDepth                  texture     f32          2d      T7             t7     1
; RayBuffer                         texture     f32          2d      T8             t8     1
; RayTraceDistance                  texture     u32          2d      T9             t9     1
; CompactedTraceTexelAllocator      texture     u32         buf     T10            t10     1
; CompactedTraceTexelData           texture     u32         buf     T11            t11     1
; PrevSceneColorTexture             texture     f32          2d     T12            t12     1
; DistantScreenTraceFurthestHZBTexture   texture     f32          2d     T13            t13     1
; RWTraceHit                            UAV     f32          2d      U0             u0     1
; RWTraceRadiance                       UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, float, <2 x float>, <4 x float>, float, float, float, float }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceVoxelsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 228 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 1320 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %33 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %32, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %34 = extractvalue %dx.types.ResRet.i32 %33, 0
  %35 = icmp ult i32 %31, %34
  br i1 %35, label %36, label %1348

; <label>:36                                      ; preds = %0
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %38 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %37, i32 %31, i32 undef)  ; BufferLoad(srv,index,wot)
  %39 = extractvalue %dx.types.ResRet.i32 %38, 0
  %40 = and i32 %39, 65535
  %41 = lshr i32 %39, 16
  %42 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.i32 %42, 0
  %44 = mul i32 %43, %40
  %45 = mul i32 %43, %41
  %46 = uitofp i32 %44 to float
  %47 = uitofp i32 %45 to float
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = fadd fast float %49, 5.000000e-01
  %52 = fadd fast float %51, %46
  %53 = fadd fast float %50, 5.000000e-01
  %54 = fadd fast float %53, %47
  %55 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.f32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.f32 %55, 1
  %58 = fadd fast float %49, -1.000000e+00
  %59 = fadd fast float %58, %56
  %60 = fadd fast float %50, -1.000000e+00
  %61 = fadd fast float %60, %57
  %62 = call float @dx.op.binary.f32(i32 36, float %52, float %59)  ; FMin(a,b)
  %63 = call float @dx.op.binary.f32(i32 36, float %54, float %61)  ; FMin(a,b)
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 3
  %67 = fmul fast float %65, %62
  %68 = fmul fast float %66, %63
  %69 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %70 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %71 = extractvalue %dx.types.ResRet.f32 %70, 0
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 3
  %75 = fsub fast float %67, %74
  %76 = fsub fast float %68, %73
  %77 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %79 = fdiv fast float %75, %77
  %80 = fdiv fast float %76, %78
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %87 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %88 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = fmul fast float %79, %71
  %98 = fmul fast float %80, %71
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 3
  %101 = bitcast float %100 to i32
  %102 = icmp ne i32 %101, 0
  %103 = select i1 %102, float %79, float %97
  %104 = select i1 %102, float %80, float %98
  %105 = fmul fast float %103, %82
  %106 = call float @dx.op.tertiary.f32(i32 46, float %104, float %86, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.tertiary.f32(i32 46, float %71, float %90, float %106)  ; FMad(a,b,c)
  %108 = fadd fast float %107, %94
  %109 = fsub fast float -0.000000e+00, %108
  %110 = fmul fast float %103, %83
  %111 = call float @dx.op.tertiary.f32(i32 46, float %104, float %87, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %71, float %91, float %111)  ; FMad(a,b,c)
  %113 = fadd fast float %112, %95
  %114 = fsub fast float -0.000000e+00, %113
  %115 = fmul fast float %103, %84
  %116 = call float @dx.op.tertiary.f32(i32 46, float %104, float %88, float %115)  ; FMad(a,b,c)
  %117 = call float @dx.op.tertiary.f32(i32 46, float %71, float %92, float %116)  ; FMad(a,b,c)
  %118 = fadd fast float %117, %96
  %119 = fsub fast float -0.000000e+00, %118
  %120 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %121 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %120, i32 0, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %122 = extractvalue %dx.types.ResRet.f32 %121, 0
  %123 = extractvalue %dx.types.ResRet.f32 %121, 1
  %124 = extractvalue %dx.types.ResRet.f32 %121, 2
  %125 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %126 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %125, i32 0, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %127 = extractvalue %dx.types.ResRet.i32 %126, 0
  %128 = and i32 %127, 32767
  %129 = call float @dx.op.legacyF16ToF32(i32 131, i32 %128)  ; LegacyF16ToF32(value)
  %130 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.i32 %130, 2
  %132 = call float @dx.op.binary.f32(i32 36, float %129, float %129)  ; FMin(a,b)
  %133 = fmul fast float %132, %122
  %134 = fmul fast float %132, %123
  %135 = fmul fast float %132, %124
  %136 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.i32 %136, 1
  %138 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %139 = extractvalue %dx.types.CBufRet.i32 %138, 1
  %140 = icmp ugt i32 %137, 1
  %141 = select i1 %140, i32 0, i32 %139
  %142 = mul i32 %40, 1664525
  %143 = mul i32 %41, 1664525
  %144 = mul i32 %141, 1664525
  %145 = add i32 %142, 1013904223
  %146 = add i32 %143, 1013904223
  %147 = add i32 %144, 1013904223
  %148 = mul i32 %147, %146
  %149 = add i32 %145, %148
  %150 = mul i32 %149, %147
  %151 = add i32 %150, %146
  %152 = mul i32 %151, %149
  %153 = add i32 %152, %147
  %154 = mul i32 %153, %151
  %155 = add i32 %154, %149
  %156 = add i32 %142, 1042201148
  %157 = add i32 %143, 1042201148
  %158 = mul i32 %147, %157
  %159 = add i32 %156, %158
  %160 = mul i32 %159, %147
  %161 = add i32 %160, %157
  %162 = icmp eq i32 %137, 0
  br i1 %162, label %187, label %163

; <label>:163                                     ; preds = %36
  %164 = mul i32 %161, %159
  %165 = add i32 %164, %147
  %166 = mul i32 %165, %161
  %167 = add i32 %166, %159
  %168 = lshr i32 %167, 16
  %169 = mul i32 %155, %153
  %170 = add i32 %169, %151
  %171 = lshr i32 %155, 16
  %172 = uitofp i32 %141 to float
  %173 = fmul fast float %172, 1.250000e-01
  %174 = uitofp i32 %171 to float
  %175 = fmul fast float %174, 0x3EF0000000000000
  %176 = fadd fast float %175, %173
  %177 = call float @dx.op.unary.f32(i32 22, float %176)  ; Frc(value)
  %178 = call i32 @dx.op.unary.i32(i32 30, i32 %141)  ; Bfrev(value)
  %179 = xor i32 %178, %170
  %180 = lshr i32 %179, 16
  %181 = uitofp i32 %180 to float
  %182 = fmul fast float %181, 0x3EF0000000000000
  %183 = uitofp i32 %168 to float
  %184 = fmul fast float %183, 0x3EF0000000000000
  %185 = fadd fast float %184, %173
  %186 = call float @dx.op.unary.f32(i32 22, float %185)  ; Frc(value)
  br label %187

; <label>:187                                     ; preds = %163, %36
  %188 = phi float [ %177, %163 ], [ 0.000000e+00, %36 ]
  %189 = phi float [ %182, %163 ], [ 0.000000e+00, %36 ]
  %190 = phi float [ %186, %163 ], [ 0.000000e+00, %36 ]
  %191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.f32 %191, 0
  %193 = fmul fast float %192, %122
  %194 = fmul fast float %192, %123
  %195 = fmul fast float %192, %124
  %196 = fadd fast float %188, -5.000000e-01
  %197 = fadd fast float %189, -5.000000e-01
  %198 = fadd fast float %190, -5.000000e-01
  %199 = fadd fast float %196, %193
  %200 = fadd fast float %197, %194
  %201 = fadd fast float %198, %195
  %202 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %203 = extractvalue %dx.types.CBufRet.i32 %202, 0
  %204 = extractvalue %dx.types.CBufRet.i32 %202, 1
  %205 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %206 = extractvalue %dx.types.CBufRet.i32 %205, 0
  %207 = extractvalue %dx.types.CBufRet.i32 %205, 1
  %208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %209 = extractvalue %dx.types.CBufRet.f32 %208, 0
  %210 = extractvalue %dx.types.CBufRet.f32 %191, 3
  %211 = extractvalue %dx.types.CBufRet.i32 %136, 0
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %477, label %213

; <label>:213                                     ; preds = %187
  br label %214

; <label>:214                                     ; preds = %468, %213
  %215 = phi i32 [ %472, %468 ], [ 0, %213 ]
  %216 = phi i32 [ %471, %468 ], [ 0, %213 ]
  %217 = phi float [ %470, %468 ], [ %132, %213 ]
  %218 = phi float [ %469, %468 ], [ 1.000000e+00, %213 ]
  %219 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %220 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %219, i32 %215, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %221 = extractvalue %dx.types.ResRet.f32 %220, 0
  %222 = extractvalue %dx.types.ResRet.f32 %220, 1
  %223 = extractvalue %dx.types.ResRet.f32 %220, 2
  %224 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %219, i32 %215, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %225 = extractvalue %dx.types.ResRet.i32 %224, 0
  %226 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %219, i32 %215, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %227 = extractvalue %dx.types.ResRet.f32 %226, 0
  %228 = extractvalue %dx.types.ResRet.f32 %226, 1
  %229 = extractvalue %dx.types.ResRet.f32 %226, 2
  %230 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %219, i32 %215, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %231 = extractvalue %dx.types.ResRet.i32 %230, 0
  %232 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %233 = extractvalue %dx.types.CBufRet.i32 %232, 0
  %234 = and i32 %225, 255
  %235 = lshr i32 %225, 8
  %236 = and i32 %235, 255
  %237 = lshr i32 %225, 16
  %238 = and i32 %237, 255
  %239 = mul i32 %233, %234
  %240 = mul i32 %233, %236
  %241 = mul i32 %233, %238
  %242 = and i32 %231, 4194303
  %243 = lshr i32 %231, 22
  %244 = uitofp i32 %243 to float
  %245 = fmul fast float %244, 0x3F84050140000000
  %246 = icmp ne i32 %234, 0
  %247 = icmp ne i32 %236, 0
  %248 = icmp ne i32 %238, 0
  %249 = and i1 %246, %247
  %250 = and i1 %248, %249
  %251 = fmul fast float %245, %199
  %252 = fmul fast float %245, %200
  %253 = fmul fast float %245, %201
  %254 = fadd fast float %251, %108
  %255 = fadd fast float %252, %113
  %256 = fadd fast float %253, %118
  %257 = fdiv fast float 0x4059933340000000, %244
  br i1 %250, label %258, label %459

; <label>:258                                     ; preds = %214
  %259 = fsub fast float %133, %251
  %260 = fsub fast float %134, %252
  %261 = fsub fast float %135, %253
  %262 = fdiv fast float 1.000000e+00, %259
  %263 = fdiv fast float 1.000000e+00, %260
  %264 = fdiv fast float 1.000000e+00, %261
  %265 = fsub fast float %221, %254
  %266 = fsub fast float %222, %255
  %267 = fsub fast float %223, %256
  %268 = fmul fast float %262, %265
  %269 = fmul fast float %263, %266
  %270 = fmul fast float %264, %267
  %271 = fsub fast float %227, %254
  %272 = fsub fast float %228, %255
  %273 = fsub fast float %229, %256
  %274 = fmul fast float %262, %271
  %275 = fmul fast float %263, %272
  %276 = fmul fast float %264, %273
  %277 = call float @dx.op.binary.f32(i32 36, float %268, float %274)  ; FMin(a,b)
  %278 = call float @dx.op.binary.f32(i32 36, float %269, float %275)  ; FMin(a,b)
  %279 = call float @dx.op.binary.f32(i32 36, float %270, float %276)  ; FMin(a,b)
  %280 = call float @dx.op.binary.f32(i32 35, float %268, float %274)  ; FMax(a,b)
  %281 = call float @dx.op.binary.f32(i32 35, float %269, float %275)  ; FMax(a,b)
  %282 = call float @dx.op.binary.f32(i32 35, float %270, float %276)  ; FMax(a,b)
  %283 = call float @dx.op.binary.f32(i32 35, float %278, float %279)  ; FMax(a,b)
  %284 = call float @dx.op.binary.f32(i32 35, float %277, float %283)  ; FMax(a,b)
  %285 = call float @dx.op.binary.f32(i32 36, float %281, float %282)  ; FMin(a,b)
  %286 = call float @dx.op.binary.f32(i32 36, float %280, float %285)  ; FMin(a,b)
  %287 = call float @dx.op.unary.f32(i32 7, float %284)  ; Saturate(value)
  %288 = call float @dx.op.unary.f32(i32 7, float %286)  ; Saturate(value)
  %289 = fcmp fast olt float %287, %288
  br i1 %289, label %290, label %459

; <label>:290                                     ; preds = %258
  %291 = fmul fast float %287, %259
  %292 = fmul fast float %287, %260
  %293 = fmul fast float %287, %261
  %294 = fadd fast float %291, %254
  %295 = fadd fast float %292, %255
  %296 = fadd fast float %293, %256
  %297 = fsub fast float %288, %287
  %298 = fmul fast float %259, %297
  %299 = fsub fast float %288, %287
  %300 = fmul fast float %260, %299
  %301 = fsub fast float %288, %287
  %302 = fmul fast float %261, %301
  %303 = fmul fast float %298, %298
  %304 = fmul fast float %300, %300
  %305 = fadd fast float %303, %304
  %306 = fmul fast float %302, %302
  %307 = fadd fast float %305, %306
  %308 = call float @dx.op.unary.f32(i32 24, float %307)  ; Sqrt(value)
  %309 = call float @dx.op.binary.f32(i32 36, float %308, float %132)  ; FMin(a,b)
  %310 = call float @dx.op.dot3.f32(i32 55, float %298, float %300, float %302, float %298, float %300, float %302)  ; Dot3(ax,ay,az,bx,by,bz)
  %311 = call float @dx.op.unary.f32(i32 25, float %310)  ; Rsqrt(value)
  %312 = fdiv fast float %309, %245
  %313 = call float @dx.op.unary.f32(i32 28, float %312)  ; Round_pi(value)
  %314 = call float @dx.op.binary.f32(i32 36, float %313, float 1.024000e+03)  ; FMin(a,b)
  %315 = fdiv fast float %309, %314
  %316 = fcmp fast ogt float %314, 0.000000e+00
  br i1 %316, label %317, label %459

; <label>:317                                     ; preds = %290
  br label %318

; <label>:318                                     ; preds = %451, %317
  %319 = phi i32 [ %402, %451 ], [ 9999, %317 ]
  %320 = phi i32 [ %403, %451 ], [ 9999, %317 ]
  %321 = phi i32 [ %404, %451 ], [ 9999, %317 ]
  %322 = phi i32 [ %405, %451 ], [ 0, %317 ]
  %323 = phi i32 [ %406, %451 ], [ 0, %317 ]
  %324 = phi i32 [ %407, %451 ], [ 0, %317 ]
  %325 = phi i32 [ %408, %451 ], [ 0, %317 ]
  %326 = phi float [ %455, %451 ], [ 1.000000e+00, %317 ]
  %327 = phi float [ %456, %451 ], [ 0.000000e+00, %317 ]
  %328 = phi float [ %452, %451 ], [ 0.000000e+00, %317 ]
  %329 = fmul fast float %326, %315
  %330 = call float @dx.op.binary.f32(i32 35, float %329, float 0.000000e+00)  ; FMax(a,b)
  %331 = fmul fast float %298, %245
  %332 = fmul fast float %331, %311
  %333 = fmul fast float %332, %327
  %334 = fmul fast float %300, %245
  %335 = fmul fast float %334, %311
  %336 = fmul fast float %335, %327
  %337 = fmul fast float %302, %245
  %338 = fmul fast float %337, %311
  %339 = fmul fast float %338, %327
  %340 = fadd fast float %294, %333
  %341 = fadd fast float %295, %336
  %342 = fadd fast float %296, %339
  %343 = fmul fast float %196, %330
  %344 = fmul fast float %197, %330
  %345 = fmul fast float %198, %330
  %346 = fadd fast float %340, %343
  %347 = fadd fast float %341, %344
  %348 = fadd fast float %342, %345
  %349 = add i32 %239, -1
  %350 = add i32 %240, -1
  %351 = add i32 %241, -1
  %352 = fsub fast float %346, %221
  %353 = fsub fast float %347, %222
  %354 = fsub fast float %348, %223
  %355 = fsub fast float %227, %221
  %356 = fsub fast float %228, %222
  %357 = fsub fast float %229, %223
  %358 = fdiv fast float %352, %355
  %359 = fdiv fast float %353, %356
  %360 = fdiv fast float %354, %357
  %361 = call float @dx.op.unary.f32(i32 7, float %358)  ; Saturate(value)
  %362 = call float @dx.op.unary.f32(i32 7, float %359)  ; Saturate(value)
  %363 = call float @dx.op.unary.f32(i32 7, float %360)  ; Saturate(value)
  %364 = uitofp i32 %239 to float
  %365 = uitofp i32 %240 to float
  %366 = uitofp i32 %241 to float
  %367 = fmul fast float %361, %364
  %368 = fmul fast float %362, %365
  %369 = fmul fast float %363, %366
  %370 = fptoui float %367 to i32
  %371 = fptoui float %368 to i32
  %372 = fptoui float %369 to i32
  %373 = call i32 @dx.op.binary.i32(i32 40, i32 %370, i32 %349)  ; UMin(a,b)
  %374 = call i32 @dx.op.binary.i32(i32 40, i32 %371, i32 %350)  ; UMin(a,b)
  %375 = call i32 @dx.op.binary.i32(i32 40, i32 %372, i32 %351)  ; UMin(a,b)
  %376 = and i32 %207, 31
  %377 = lshr i32 %373, %376
  %378 = lshr i32 %374, %376
  %379 = lshr i32 %375, %376
  %380 = icmp ne i32 %377, %319
  %381 = icmp ne i32 %378, %320
  %382 = icmp ne i32 %379, %321
  %383 = or i1 %380, %381
  %384 = or i1 %383, %382
  br i1 %384, label %385, label %401

; <label>:385                                     ; preds = %318
  %386 = mul i32 %379, %236
  %387 = add i32 %386, %378
  %388 = mul i32 %387, %234
  %389 = add i32 %377, %242
  %390 = add i32 %389, %388
  %391 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %392 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %391, i32 %390, i32 undef)  ; BufferLoad(srv,index,wot)
  %393 = extractvalue %dx.types.ResRet.i32 %392, 0
  %394 = icmp ne i32 %393, -1
  %395 = zext i1 %394 to i32
  %396 = mul i32 %203, %204
  %397 = urem i32 %393, %396
  %398 = urem i32 %397, %203
  %399 = udiv i32 %397, %203
  %400 = udiv i32 %393, %396
  br label %401

; <label>:401                                     ; preds = %385, %318
  %402 = phi i32 [ %377, %385 ], [ %319, %318 ]
  %403 = phi i32 [ %378, %385 ], [ %320, %318 ]
  %404 = phi i32 [ %379, %385 ], [ %321, %318 ]
  %405 = phi i32 [ %395, %385 ], [ %322, %318 ]
  %406 = phi i32 [ %398, %385 ], [ %323, %318 ]
  %407 = phi i32 [ %399, %385 ], [ %324, %318 ]
  %408 = phi i32 [ %400, %385 ], [ %325, %318 ]
  %409 = icmp eq i32 %405, 0
  br i1 %409, label %451, label %410

; <label>:410                                     ; preds = %401
  %411 = shl i32 %406, %376
  %412 = shl i32 %407, %376
  %413 = shl i32 %408, %376
  %414 = shl i32 %377, %376
  %415 = shl i32 %378, %376
  %416 = shl i32 %379, %376
  %417 = sub i32 %373, %414
  %418 = sub i32 %374, %415
  %419 = sub i32 %375, %416
  %420 = add i32 %417, %411
  %421 = add i32 %418, %412
  %422 = add i32 %419, %413
  %423 = fmul fast float %330, %257
  %424 = call float @dx.op.unary.f32(i32 23, float %423)  ; Log(value)
  %425 = fptoui float %424 to i32
  %426 = and i32 %425, 31
  %427 = lshr i32 %420, %426
  %428 = lshr i32 %421, %426
  %429 = lshr i32 %422, %426
  %430 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %431 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %430, i32 %425, i32 %427, i32 %428, i32 %429, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %432 = extractvalue %dx.types.ResRet.i32 %431, 0
  %433 = and i32 %432, 16777215
  %434 = uitofp i32 %433 to float
  %435 = fmul fast float %209, 0x3F50624DE0000000
  %436 = fmul fast float %435, %257
  %437 = fmul fast float %436, %330
  %438 = fmul fast float %437, %434
  %439 = fadd fast float %438, %328
  %440 = fcmp fast ogt float %439, 1.000000e+00
  br i1 %440, label %441, label %451

; <label>:441                                     ; preds = %410
  %442 = fsub fast float %346, %254
  %443 = fsub fast float %347, %255
  %444 = fsub fast float %348, %256
  %445 = fmul fast float %442, %442
  %446 = fmul fast float %443, %443
  %447 = fadd fast float %445, %446
  %448 = fmul fast float %444, %444
  %449 = fadd fast float %447, %448
  %450 = call float @dx.op.unary.f32(i32 24, float %449)  ; Sqrt(value)
  br label %459

; <label>:451                                     ; preds = %410, %401
  %452 = phi float [ %439, %410 ], [ %328, %401 ]
  %453 = fmul fast float %326, %210
  %454 = uitofp i32 %206 to float
  %455 = call float @dx.op.binary.f32(i32 36, float %454, float %453)  ; FMin(a,b)
  %456 = fadd fast float %455, %327
  %457 = fcmp fast olt float %456, %314
  br i1 %457, label %318, label %458

; <label>:458                                     ; preds = %451
  br label %459

; <label>:459                                     ; preds = %458, %441, %290, %258, %214
  %460 = phi float [ %450, %441 ], [ -1.000000e+00, %258 ], [ -1.000000e+00, %214 ], [ -1.000000e+00, %290 ], [ -1.000000e+00, %458 ]
  %461 = phi float [ %439, %441 ], [ 0.000000e+00, %258 ], [ 0.000000e+00, %214 ], [ 0.000000e+00, %290 ], [ %452, %458 ]
  %462 = fcmp fast ult float %460, 0.000000e+00
  br i1 %462, label %468, label %463

; <label>:463                                     ; preds = %459
  %464 = fsub fast float 1.000000e+00, %461
  %465 = call float @dx.op.unary.f32(i32 7, float %464)  ; Saturate(value)
  %466 = call float @dx.op.binary.f32(i32 36, float %218, float %465)  ; FMin(a,b)
  %467 = call float @dx.op.binary.f32(i32 36, float %217, float %460)  ; FMin(a,b)
  br label %468

; <label>:468                                     ; preds = %463, %459
  %469 = phi float [ %466, %463 ], [ %218, %459 ]
  %470 = phi float [ %467, %463 ], [ %217, %459 ]
  %471 = phi i32 [ 1, %463 ], [ %216, %459 ]
  %472 = add nuw i32 %215, 1
  %473 = fcmp fast ogt float %469, 0x3F847AE140000000
  %474 = icmp ult i32 %472, %211
  %475 = and i1 %473, %474
  br i1 %475, label %214, label %476

; <label>:476                                     ; preds = %468
  br label %477

; <label>:477                                     ; preds = %476, %187
  %478 = phi i32 [ 0, %187 ], [ %471, %476 ]
  %479 = phi float [ %132, %187 ], [ %470, %476 ]
  %480 = phi float [ 1.000000e+00, %187 ], [ %469, %476 ]
  %481 = icmp ne i32 %478, 0
  %482 = fcmp fast olt float %479, %132
  %483 = and i1 %482, %481
  br i1 %483, label %484, label %486

; <label>:484                                     ; preds = %477
  %485 = call float @dx.op.binary.f32(i32 36, float %479, float %129)  ; FMin(a,b)
  br label %486

; <label>:486                                     ; preds = %484, %477
  %487 = phi float [ %480, %484 ], [ 1.000000e+00, %477 ]
  %488 = phi float [ %485, %484 ], [ %129, %477 ]
  %489 = fcmp fast ole float %487, 5.000000e-01
  %490 = select i1 %489, float %488, float 6.550400e+04
  %491 = zext i1 %489 to i32
  %492 = fsub fast float 1.000000e+00, %487
  %493 = call float @dx.op.unary.f32(i32 7, float %492)  ; Saturate(value)
  br i1 %489, label %969, label %494

; <label>:494                                     ; preds = %486
  %495 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %496 = extractvalue %dx.types.CBufRet.f32 %495, 1
  %497 = fmul fast float %496, %122
  %498 = fmul fast float %496, %123
  %499 = fmul fast float %496, %124
  %500 = add i32 %131, 194
  %501 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %500)  ; CBufferLoadLegacy(handle,regIndex)
  %502 = extractvalue %dx.types.CBufRet.f32 %501, 3
  %503 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %504 = extractvalue %dx.types.CBufRet.f32 %503, 0
  %505 = fmul fast float %504, %502
  %506 = fsub fast float %502, %505
  %507 = extractvalue %dx.types.CBufRet.f32 %501, 0
  %508 = extractvalue %dx.types.CBufRet.f32 %501, 1
  %509 = extractvalue %dx.types.CBufRet.f32 %501, 2
  %510 = fdiv fast float 1.000000e+00, %497
  %511 = fdiv fast float 1.000000e+00, %498
  %512 = fdiv fast float 1.000000e+00, %499
  %513 = fsub fast float %109, %506
  %514 = fadd fast float %513, %507
  %515 = fsub fast float %114, %506
  %516 = fadd fast float %515, %508
  %517 = fsub fast float %119, %506
  %518 = fadd fast float %517, %509
  %519 = fmul fast float %514, %510
  %520 = fmul fast float %516, %511
  %521 = fmul fast float %518, %512
  %522 = fsub fast float %506, %108
  %523 = fadd fast float %522, %507
  %524 = fsub fast float %506, %113
  %525 = fadd fast float %524, %508
  %526 = fsub fast float %506, %118
  %527 = fadd fast float %526, %509
  %528 = fmul fast float %523, %510
  %529 = fmul fast float %525, %511
  %530 = fmul fast float %527, %512
  %531 = call float @dx.op.binary.f32(i32 36, float %519, float %528)  ; FMin(a,b)
  %532 = call float @dx.op.binary.f32(i32 36, float %520, float %529)  ; FMin(a,b)
  %533 = call float @dx.op.binary.f32(i32 36, float %521, float %530)  ; FMin(a,b)
  %534 = call float @dx.op.binary.f32(i32 35, float %519, float %528)  ; FMax(a,b)
  %535 = call float @dx.op.binary.f32(i32 35, float %520, float %529)  ; FMax(a,b)
  %536 = call float @dx.op.binary.f32(i32 35, float %521, float %530)  ; FMax(a,b)
  %537 = call float @dx.op.binary.f32(i32 35, float %532, float %533)  ; FMax(a,b)
  %538 = call float @dx.op.binary.f32(i32 35, float %531, float %537)  ; FMax(a,b)
  %539 = call float @dx.op.binary.f32(i32 36, float %535, float %536)  ; FMin(a,b)
  %540 = call float @dx.op.binary.f32(i32 36, float %534, float %539)  ; FMin(a,b)
  %541 = call float @dx.op.unary.f32(i32 7, float %538)  ; Saturate(value)
  %542 = call float @dx.op.unary.f32(i32 7, float %540)  ; Saturate(value)
  %543 = fcmp fast olt float %541, %542
  br i1 %543, label %544, label %554

; <label>:544                                     ; preds = %494
  %545 = fmul fast float %497, %542
  %546 = fmul fast float %498, %542
  %547 = fmul fast float %499, %542
  %548 = fadd fast float %545, %108
  %549 = fadd fast float %546, %113
  %550 = fadd fast float %547, %118
  %551 = fsub fast float 1.000000e+00, %542
  %552 = fmul fast float %551, %496
  %553 = call float @dx.op.binary.f32(i32 35, float %552, float 0.000000e+00)  ; FMax(a,b)
  br label %554

; <label>:554                                     ; preds = %544, %494
  %555 = phi float [ %548, %544 ], [ %108, %494 ]
  %556 = phi float [ %549, %544 ], [ %113, %494 ]
  %557 = phi float [ %550, %544 ], [ %118, %494 ]
  %558 = phi float [ %553, %544 ], [ %496, %494 ]
  %559 = fcmp fast ogt float %558, 0.000000e+00
  br i1 %559, label %560, label %969

; <label>:560                                     ; preds = %554
  %561 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %562 = extractvalue %dx.types.CBufRet.f32 %561, 0
  %563 = extractvalue %dx.types.CBufRet.f32 %561, 1
  %564 = extractvalue %dx.types.CBufRet.f32 %561, 2
  %565 = extractvalue %dx.types.CBufRet.f32 %561, 3
  %566 = uitofp i32 %40 to float
  %567 = uitofp i32 %41 to float
  %568 = fadd fast float %566, 5.000000e-01
  %569 = fadd fast float %567, 5.000000e-01
  %570 = uitofp i32 %139 to float
  %571 = fmul fast float %570, 0x4040551EC0000000
  %572 = fmul fast float %570, 0x4027A147A0000000
  %573 = fadd fast float %568, %571
  %574 = fadd fast float %569, %572
  %575 = call float @dx.op.dot2.f32(i32 54, float %573, float %574, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %576 = call float @dx.op.unary.f32(i32 22, float %575)  ; Frc(value)
  %577 = fmul fast float %576, 0x404A7DD040000000
  %578 = call float @dx.op.unary.f32(i32 22, float %577)  ; Frc(value)
  %579 = fadd fast float %578, -5.000000e-01
  %580 = extractvalue %dx.types.CBufRet.f32 %495, 0
  %581 = call float @dx.op.binary.f32(i32 36, float %558, float 1.000000e+06)  ; FMin(a,b)
  %582 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %583 = extractvalue %dx.types.CBufRet.f32 %582, 2
  %584 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %585 = extractvalue %dx.types.CBufRet.f32 %584, 2
  %586 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %587 = extractvalue %dx.types.CBufRet.f32 %586, 2
  %588 = fmul fast float %583, %122
  %589 = call float @dx.op.tertiary.f32(i32 46, float %123, float %585, float %588)  ; FMad(a,b,c)
  %590 = call float @dx.op.tertiary.f32(i32 46, float %124, float %587, float %589)  ; FMad(a,b,c)
  %591 = fcmp fast olt float %590, 0.000000e+00
  br i1 %591, label %592, label %596

; <label>:592                                     ; preds = %560
  %593 = fmul fast float %71, 0xBFEE666660000000
  %594 = fdiv fast float %593, %590
  %595 = call float @dx.op.binary.f32(i32 36, float %594, float %581)  ; FMin(a,b)
  br label %596

; <label>:596                                     ; preds = %592, %560
  %597 = phi float [ %595, %592 ], [ %581, %560 ]
  %598 = fmul fast float %597, %122
  %599 = fmul fast float %597, %123
  %600 = fmul fast float %597, %124
  %601 = fadd fast float %598, %555
  %602 = fadd fast float %599, %556
  %603 = fadd fast float %600, %557
  %604 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %605 = extractvalue %dx.types.CBufRet.f32 %604, 0
  %606 = extractvalue %dx.types.CBufRet.f32 %604, 1
  %607 = extractvalue %dx.types.CBufRet.f32 %604, 2
  %608 = extractvalue %dx.types.CBufRet.f32 %604, 3
  %609 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %610 = extractvalue %dx.types.CBufRet.f32 %609, 0
  %611 = extractvalue %dx.types.CBufRet.f32 %609, 1
  %612 = extractvalue %dx.types.CBufRet.f32 %609, 2
  %613 = extractvalue %dx.types.CBufRet.f32 %609, 3
  %614 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %615 = extractvalue %dx.types.CBufRet.f32 %614, 0
  %616 = extractvalue %dx.types.CBufRet.f32 %614, 1
  %617 = extractvalue %dx.types.CBufRet.f32 %614, 2
  %618 = extractvalue %dx.types.CBufRet.f32 %614, 3
  %619 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %620 = extractvalue %dx.types.CBufRet.f32 %619, 0
  %621 = extractvalue %dx.types.CBufRet.f32 %619, 1
  %622 = extractvalue %dx.types.CBufRet.f32 %619, 2
  %623 = extractvalue %dx.types.CBufRet.f32 %619, 3
  %624 = fmul fast float %605, %555
  %625 = call float @dx.op.tertiary.f32(i32 46, float %556, float %610, float %624)  ; FMad(a,b,c)
  %626 = call float @dx.op.tertiary.f32(i32 46, float %557, float %615, float %625)  ; FMad(a,b,c)
  %627 = fadd fast float %626, %620
  %628 = fmul fast float %606, %555
  %629 = call float @dx.op.tertiary.f32(i32 46, float %556, float %611, float %628)  ; FMad(a,b,c)
  %630 = call float @dx.op.tertiary.f32(i32 46, float %557, float %616, float %629)  ; FMad(a,b,c)
  %631 = fadd fast float %630, %621
  %632 = fmul fast float %607, %555
  %633 = call float @dx.op.tertiary.f32(i32 46, float %556, float %612, float %632)  ; FMad(a,b,c)
  %634 = call float @dx.op.tertiary.f32(i32 46, float %557, float %617, float %633)  ; FMad(a,b,c)
  %635 = fadd fast float %634, %622
  %636 = fmul fast float %608, %555
  %637 = call float @dx.op.tertiary.f32(i32 46, float %556, float %613, float %636)  ; FMad(a,b,c)
  %638 = call float @dx.op.tertiary.f32(i32 46, float %557, float %618, float %637)  ; FMad(a,b,c)
  %639 = fadd fast float %638, %623
  %640 = fmul fast float %605, %601
  %641 = call float @dx.op.tertiary.f32(i32 46, float %602, float %610, float %640)  ; FMad(a,b,c)
  %642 = call float @dx.op.tertiary.f32(i32 46, float %603, float %615, float %641)  ; FMad(a,b,c)
  %643 = fadd fast float %642, %620
  %644 = fmul fast float %606, %601
  %645 = call float @dx.op.tertiary.f32(i32 46, float %602, float %611, float %644)  ; FMad(a,b,c)
  %646 = call float @dx.op.tertiary.f32(i32 46, float %603, float %616, float %645)  ; FMad(a,b,c)
  %647 = fadd fast float %646, %621
  %648 = fmul fast float %607, %601
  %649 = call float @dx.op.tertiary.f32(i32 46, float %602, float %612, float %648)  ; FMad(a,b,c)
  %650 = call float @dx.op.tertiary.f32(i32 46, float %603, float %617, float %649)  ; FMad(a,b,c)
  %651 = fadd fast float %650, %622
  %652 = fmul fast float %608, %601
  %653 = call float @dx.op.tertiary.f32(i32 46, float %602, float %613, float %652)  ; FMad(a,b,c)
  %654 = call float @dx.op.tertiary.f32(i32 46, float %603, float %618, float %653)  ; FMad(a,b,c)
  %655 = fadd fast float %654, %623
  %656 = fdiv fast float 1.000000e+00, %639
  %657 = fmul fast float %656, %627
  %658 = fmul fast float %656, %631
  %659 = fmul fast float %656, %635
  %660 = fdiv fast float 1.000000e+00, %655
  %661 = fmul fast float %660, %643
  %662 = fmul fast float %660, %647
  %663 = fmul fast float %660, %651
  %664 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %665 = extractvalue %dx.types.CBufRet.f32 %664, 2
  %666 = extractvalue %dx.types.CBufRet.f32 %664, 3
  %667 = call float @dx.op.tertiary.f32(i32 46, float %597, float %665, float 0.000000e+00)  ; FMad(a,b,c)
  %668 = call float @dx.op.tertiary.f32(i32 46, float %597, float %666, float 0.000000e+00)  ; FMad(a,b,c)
  %669 = fadd fast float %667, %635
  %670 = fadd fast float %668, %639
  %671 = fdiv fast float 1.000000e+00, %670
  %672 = fmul fast float %671, %669
  %673 = fsub fast float %661, %657
  %674 = fsub fast float %662, %658
  %675 = fsub fast float %663, %659
  %676 = fmul fast float %673, %673
  %677 = fmul fast float %674, %674
  %678 = fadd fast float %676, %677
  %679 = call float @dx.op.unary.f32(i32 24, float %678)  ; Sqrt(value)
  %680 = fmul fast float %679, 5.000000e-01
  %681 = fmul fast float %680, %657
  %682 = fmul fast float %680, %658
  %683 = fadd fast float %681, %673
  %684 = fadd fast float %682, %674
  %685 = call float @dx.op.unary.f32(i32 6, float %683)  ; FAbs(value)
  %686 = call float @dx.op.unary.f32(i32 6, float %684)  ; FAbs(value)
  %687 = fsub fast float %685, %680
  %688 = fsub fast float %686, %680
  %689 = call float @dx.op.binary.f32(i32 35, float %687, float 0.000000e+00)  ; FMax(a,b)
  %690 = call float @dx.op.binary.f32(i32 35, float %688, float 0.000000e+00)  ; FMax(a,b)
  %691 = call float @dx.op.unary.f32(i32 6, float %673)  ; FAbs(value)
  %692 = call float @dx.op.unary.f32(i32 6, float %674)  ; FAbs(value)
  %693 = fdiv fast float %689, %691
  %694 = fdiv fast float %690, %692
  %695 = fsub fast float 1.000000e+00, %693
  %696 = fsub fast float 1.000000e+00, %694
  %697 = call float @dx.op.binary.f32(i32 36, float %695, float %696)  ; FMin(a,b)
  %698 = fdiv fast float %697, %680
  %699 = call float @dx.op.binary.f32(i32 36, float %698, float 1.000000e+00)  ; FMin(a,b)
  %700 = fmul fast float %699, %675
  %701 = icmp eq i32 %101, 0
  %702 = fsub fast float %659, %672
  %703 = fmul fast float %702, %580
  br i1 %701, label %706, label %704

; <label>:704                                     ; preds = %596
  %705 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %703)  ; FMax(a,b)
  br label %709

; <label>:706                                     ; preds = %596
  %707 = call float @dx.op.unary.f32(i32 6, float %700)  ; FAbs(value)
  %708 = call float @dx.op.binary.f32(i32 35, float %707, float %703)  ; FMax(a,b)
  br label %709

; <label>:709                                     ; preds = %706, %704
  %710 = phi float [ %705, %704 ], [ %708, %706 ]
  %711 = fmul fast float %657, 5.000000e-01
  %712 = fmul fast float %658, 5.000000e-01
  %713 = fadd fast float %711, 5.000000e-01
  %714 = fsub fast float 5.000000e-01, %712
  %715 = fmul fast float %713, %562
  %716 = fmul fast float %714, %563
  %717 = fmul fast float %710, 6.250000e-02
  %718 = fmul fast float %562, 3.125000e-02
  %719 = fmul fast float %718, %673
  %720 = fmul fast float %719, %699
  %721 = fmul fast float %563, -3.125000e-02
  %722 = fmul fast float %721, %674
  %723 = fmul fast float %722, %699
  %724 = fmul fast float %700, 6.250000e-02
  %725 = fmul fast float %720, %579
  %726 = fmul fast float %723, %579
  %727 = fmul fast float %724, %579
  %728 = fadd fast float %725, %715
  %729 = fadd fast float %726, %716
  %730 = fadd fast float %727, %659
  br label %731

; <label>:731                                     ; preds = %792, %709
  %732 = phi float [ %776, %792 ], [ 0.000000e+00, %709 ]
  %733 = phi i32 [ %793, %792 ], [ 0, %709 ]
  %734 = uitofp i32 %733 to float
  %735 = fadd fast float %734, 1.000000e+00
  %736 = fmul fast float %735, %720
  %737 = fmul fast float %735, %723
  %738 = fadd fast float %736, %728
  %739 = fadd fast float %737, %729
  %740 = fmul fast float %735, %724
  %741 = fadd fast float %740, %730
  %742 = fadd fast float %734, 2.000000e+00
  %743 = fmul fast float %742, %720
  %744 = fmul fast float %742, %723
  %745 = fadd fast float %743, %728
  %746 = fadd fast float %744, %729
  %747 = fmul fast float %742, %724
  %748 = fadd fast float %747, %730
  %749 = fadd fast float %734, 3.000000e+00
  %750 = fmul fast float %749, %720
  %751 = fmul fast float %749, %723
  %752 = fadd fast float %750, %728
  %753 = fadd fast float %751, %729
  %754 = fmul fast float %749, %724
  %755 = fadd fast float %754, %730
  %756 = fadd fast float %734, 4.000000e+00
  %757 = fmul fast float %756, %720
  %758 = fmul fast float %756, %723
  %759 = fadd fast float %757, %728
  %760 = fadd fast float %758, %729
  %761 = fmul fast float %756, %724
  %762 = fadd fast float %761, %730
  %763 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %764 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %765 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %763, %dx.types.Handle %764, float %738, float %739, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %766 = extractvalue %dx.types.ResRet.f32 %765, 0
  %767 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %763, %dx.types.Handle %764, float %745, float %746, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %768 = extractvalue %dx.types.ResRet.f32 %767, 0
  %769 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %763, %dx.types.Handle %764, float %752, float %753, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %770 = extractvalue %dx.types.ResRet.f32 %769, 0
  %771 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %763, %dx.types.Handle %764, float %759, float %760, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %772 = extractvalue %dx.types.ResRet.f32 %771, 0
  %773 = fsub fast float %741, %766
  %774 = fsub fast float %748, %768
  %775 = fsub fast float %755, %770
  %776 = fsub fast float %762, %772
  %777 = fadd fast float %773, %717
  %778 = fadd fast float %774, %717
  %779 = fadd fast float %775, %717
  %780 = fadd fast float %776, %717
  %781 = call float @dx.op.unary.f32(i32 6, float %777)  ; FAbs(value)
  %782 = call float @dx.op.unary.f32(i32 6, float %778)  ; FAbs(value)
  %783 = call float @dx.op.unary.f32(i32 6, float %779)  ; FAbs(value)
  %784 = call float @dx.op.unary.f32(i32 6, float %780)  ; FAbs(value)
  %785 = fcmp fast olt float %781, %717
  %786 = fcmp fast olt float %782, %717
  %787 = fcmp fast olt float %783, %717
  %788 = fcmp fast olt float %784, %717
  %789 = or i1 %785, %786
  %790 = or i1 %789, %787
  %791 = or i1 %790, %788
  br i1 %791, label %795, label %792

; <label>:792                                     ; preds = %731
  %793 = add nuw nsw i32 %733, 4
  %794 = icmp ult i32 %793, 16
  br i1 %794, label %731, label %795, !llvm.loop !41

; <label>:795                                     ; preds = %792, %731
  %796 = phi i1 [ false, %792 ], [ true, %731 ]
  %797 = phi i1 [ false, %792 ], [ %787, %731 ]
  %798 = phi i1 [ false, %792 ], [ %786, %731 ]
  %799 = phi i1 [ false, %792 ], [ %785, %731 ]
  %800 = phi float [ %776, %792 ], [ %732, %731 ]
  %801 = phi i32 [ %793, %792 ], [ %733, %731 ]
  %802 = uitofp i32 %801 to float
  br i1 %796, label %803, label %818, !dx.controlflow.hints !43

; <label>:803                                     ; preds = %795
  %804 = select i1 %797, float %774, float %775
  %805 = select i1 %797, float %775, float %776
  %806 = select i1 %797, float 2.000000e+00, float 3.000000e+00
  %807 = select i1 %798, float %773, float %804
  %808 = select i1 %798, float %774, float %805
  %809 = select i1 %798, float 1.000000e+00, float %806
  %810 = select i1 %799, float %800, float %807
  %811 = select i1 %799, float %773, float %808
  %812 = select i1 %799, float 0.000000e+00, float %809
  %813 = fadd fast float %802, %812
  %814 = fsub fast float %810, %811
  %815 = fdiv fast float %810, %814
  %816 = call float @dx.op.unary.f32(i32 7, float %815)  ; Saturate(value)
  %817 = fadd fast float %813, %816
  br label %818

; <label>:818                                     ; preds = %803, %795
  %819 = phi float [ %817, %803 ], [ %802, %795 ]
  %820 = fmul fast float %819, %720
  %821 = fmul fast float %819, %723
  %822 = fmul fast float %819, %724
  %823 = fadd fast float %820, %728
  %824 = fadd fast float %821, %729
  %825 = fadd fast float %822, %730
  %826 = fmul fast float %564, 2.000000e+00
  %827 = fmul fast float %826, %823
  %828 = fmul fast float %565, 2.000000e+00
  %829 = fmul fast float %828, %824
  %830 = fadd fast float %827, -1.000000e+00
  %831 = fsub fast float 1.000000e+00, %829
  %832 = fmul fast float %830, %77
  %833 = fmul fast float %831, %78
  %834 = zext i1 %796 to i32
  br i1 %796, label %835, label %962

; <label>:835                                     ; preds = %818
  %836 = fadd fast float %833, %73
  %837 = fadd fast float %832, %74
  %838 = fdiv fast float %832, %77
  %839 = fdiv fast float %833, %78
  %840 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 113)  ; CBufferLoadLegacy(handle,regIndex)
  %841 = extractvalue %dx.types.CBufRet.f32 %840, 0
  %842 = extractvalue %dx.types.CBufRet.f32 %840, 1
  %843 = extractvalue %dx.types.CBufRet.f32 %840, 3
  %844 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %845 = extractvalue %dx.types.CBufRet.f32 %844, 0
  %846 = extractvalue %dx.types.CBufRet.f32 %844, 1
  %847 = extractvalue %dx.types.CBufRet.f32 %844, 3
  %848 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 115)  ; CBufferLoadLegacy(handle,regIndex)
  %849 = extractvalue %dx.types.CBufRet.f32 %848, 0
  %850 = extractvalue %dx.types.CBufRet.f32 %848, 1
  %851 = extractvalue %dx.types.CBufRet.f32 %848, 3
  %852 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %853 = extractvalue %dx.types.CBufRet.f32 %852, 0
  %854 = extractvalue %dx.types.CBufRet.f32 %852, 1
  %855 = extractvalue %dx.types.CBufRet.f32 %852, 3
  %856 = fmul fast float %841, %838
  %857 = call float @dx.op.tertiary.f32(i32 46, float %839, float %845, float %856)  ; FMad(a,b,c)
  %858 = call float @dx.op.tertiary.f32(i32 46, float %825, float %849, float %857)  ; FMad(a,b,c)
  %859 = fadd fast float %858, %853
  %860 = fmul fast float %842, %838
  %861 = call float @dx.op.tertiary.f32(i32 46, float %839, float %846, float %860)  ; FMad(a,b,c)
  %862 = call float @dx.op.tertiary.f32(i32 46, float %825, float %850, float %861)  ; FMad(a,b,c)
  %863 = fadd fast float %862, %854
  %864 = fmul fast float %843, %838
  %865 = call float @dx.op.tertiary.f32(i32 46, float %839, float %847, float %864)  ; FMad(a,b,c)
  %866 = call float @dx.op.tertiary.f32(i32 46, float %825, float %851, float %865)  ; FMad(a,b,c)
  %867 = fadd fast float %866, %855
  %868 = fdiv fast float %859, %867
  %869 = fdiv fast float %863, %867
  %870 = fsub fast float %838, %868
  %871 = fsub fast float %839, %869
  %872 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %873 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %872, %dx.types.Handle %764, float %837, float %836, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %874 = extractvalue %dx.types.ResRet.f32 %873, 0
  %875 = fcmp fast ogt float %874, 0.000000e+00
  br i1 %875, label %876, label %890

; <label>:876                                     ; preds = %835
  %877 = extractvalue %dx.types.ResRet.f32 %873, 1
  %878 = fmul fast float %874, 0x4010083560000000
  %879 = fmul fast float %877, 0x4010083560000000
  %880 = fadd fast float %878, 0xC000082560000000
  %881 = fadd fast float %879, 0xC000082560000000
  %882 = call float @dx.op.unary.f32(i32 6, float %880)  ; FAbs(value)
  %883 = call float @dx.op.unary.f32(i32 6, float %881)  ; FAbs(value)
  %884 = fmul fast float %874, 0x4000083560000000
  %885 = fadd fast float %884, 0xBFF0082560000000
  %886 = fmul fast float %885, %882
  %887 = fmul fast float %877, 0x4000083560000000
  %888 = fadd fast float %887, 0xBFF0082560000000
  %889 = fmul fast float %888, %883
  br label %890

; <label>:890                                     ; preds = %876, %835
  %891 = phi float [ %886, %876 ], [ %870, %835 ]
  %892 = phi float [ %889, %876 ], [ %871, %835 ]
  %893 = fsub fast float %838, %891
  %894 = fsub fast float %839, %892
  %895 = call float @dx.op.unary.f32(i32 6, float %893)  ; FAbs(value)
  %896 = call float @dx.op.unary.f32(i32 6, float %894)  ; FAbs(value)
  %897 = fmul fast float %895, 5.000000e+00
  %898 = fmul fast float %896, 5.000000e+00
  %899 = fadd fast float %897, -4.000000e+00
  %900 = fadd fast float %898, -4.000000e+00
  %901 = call float @dx.op.unary.f32(i32 7, float %899)  ; Saturate(value)
  %902 = call float @dx.op.unary.f32(i32 7, float %900)  ; Saturate(value)
  %903 = call float @dx.op.dot2.f32(i32 54, float %901, float %902, float %901, float %902)  ; Dot2(ax,ay,bx,by)
  %904 = fsub fast float 1.000000e+00, %903
  %905 = call float @dx.op.unary.f32(i32 7, float %904)  ; Saturate(value)
  %906 = call float @dx.op.unary.f32(i32 6, float %838)  ; FAbs(value)
  %907 = call float @dx.op.unary.f32(i32 6, float %839)  ; FAbs(value)
  %908 = fmul fast float %906, 5.000000e+00
  %909 = fmul fast float %907, 5.000000e+00
  %910 = fadd fast float %908, -4.000000e+00
  %911 = fadd fast float %909, -4.000000e+00
  %912 = call float @dx.op.unary.f32(i32 7, float %910)  ; Saturate(value)
  %913 = call float @dx.op.unary.f32(i32 7, float %911)  ; Saturate(value)
  %914 = call float @dx.op.dot2.f32(i32 54, float %912, float %913, float %912, float %913)  ; Dot2(ax,ay,bx,by)
  %915 = fsub fast float 1.000000e+00, %914
  %916 = call float @dx.op.unary.f32(i32 7, float %915)  ; Saturate(value)
  %917 = call float @dx.op.binary.f32(i32 36, float %916, float %905)  ; FMin(a,b)
  %918 = fcmp fast olt float %917, %578
  %919 = select i1 %918, i32 0, i32 %834
  %920 = icmp eq i32 %919, 0
  br i1 %920, label %962, label %921

; <label>:921                                     ; preds = %890
  %922 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %923 = extractvalue %dx.types.CBufRet.f32 %922, 0
  %924 = extractvalue %dx.types.CBufRet.f32 %922, 1
  %925 = fmul fast float %923, %893
  %926 = fmul fast float %924, %894
  %927 = extractvalue %dx.types.CBufRet.f32 %922, 2
  %928 = extractvalue %dx.types.CBufRet.f32 %922, 3
  %929 = fadd fast float %925, %927
  %930 = fadd fast float %926, %928
  %931 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %932 = extractvalue %dx.types.CBufRet.f32 %931, 2
  %933 = extractvalue %dx.types.CBufRet.f32 %931, 3
  %934 = extractvalue %dx.types.CBufRet.f32 %931, 0
  %935 = extractvalue %dx.types.CBufRet.f32 %931, 1
  %936 = call float @dx.op.binary.f32(i32 35, float %929, float %934)  ; FMax(a,b)
  %937 = call float @dx.op.binary.f32(i32 35, float %930, float %935)  ; FMax(a,b)
  %938 = call float @dx.op.binary.f32(i32 36, float %936, float %932)  ; FMin(a,b)
  %939 = call float @dx.op.binary.f32(i32 36, float %937, float %933)  ; FMin(a,b)
  %940 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %941 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %940, %dx.types.Handle %764, float %938, float %939, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %942 = extractvalue %dx.types.ResRet.f32 %941, 0
  %943 = extractvalue %dx.types.ResRet.f32 %941, 1
  %944 = extractvalue %dx.types.ResRet.f32 %941, 2
  %945 = fsub fast float -0.000000e+00, %942
  %946 = fsub fast float -0.000000e+00, %943
  %947 = fsub fast float -0.000000e+00, %944
  %948 = call float @dx.op.binary.f32(i32 36, float %945, float 0.000000e+00)  ; FMin(a,b)
  %949 = call float @dx.op.binary.f32(i32 36, float %946, float 0.000000e+00)  ; FMin(a,b)
  %950 = call float @dx.op.binary.f32(i32 36, float %947, float 0.000000e+00)  ; FMin(a,b)
  %951 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %952 = extractvalue %dx.types.CBufRet.f32 %951, 0
  %953 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %954 = extractvalue %dx.types.CBufRet.f32 %953, 3
  %955 = fmul fast float %954, %952
  %956 = fmul fast float %948, %955
  %957 = fsub fast float -0.000000e+00, %956
  %958 = fmul fast float %949, %955
  %959 = fsub fast float -0.000000e+00, %958
  %960 = fmul fast float %950, %955
  %961 = fsub fast float -0.000000e+00, %960
  br label %962

; <label>:962                                     ; preds = %921, %890, %818
  %963 = phi float [ %957, %921 ], [ 0.000000e+00, %890 ], [ 0.000000e+00, %818 ]
  %964 = phi float [ %959, %921 ], [ 0.000000e+00, %890 ], [ 0.000000e+00, %818 ]
  %965 = phi float [ %961, %921 ], [ 0.000000e+00, %890 ], [ 0.000000e+00, %818 ]
  %966 = phi i32 [ %919, %921 ], [ 0, %890 ], [ %834, %818 ]
  %967 = icmp ne i32 %966, 0
  %968 = zext i1 %967 to i32
  br label %969

; <label>:969                                     ; preds = %962, %554, %486
  %970 = phi float [ 0.000000e+00, %486 ], [ %963, %962 ], [ 0.000000e+00, %554 ]
  %971 = phi float [ 0.000000e+00, %486 ], [ %964, %962 ], [ 0.000000e+00, %554 ]
  %972 = phi float [ 0.000000e+00, %486 ], [ %965, %962 ], [ 0.000000e+00, %554 ]
  %973 = phi i32 [ %491, %486 ], [ %968, %962 ], [ %491, %554 ]
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %975, label %1003

; <label>:975                                     ; preds = %969
  %976 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %977 = extractvalue %dx.types.CBufRet.f32 %976, 2
  %978 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %979 = extractvalue %dx.types.CBufRet.f32 %978, 1
  %980 = fcmp fast ogt float %979, 0.000000e+00
  br i1 %980, label %981, label %1003

; <label>:981                                     ; preds = %975
  %982 = extractvalue %dx.types.CBufRet.f32 %978, 0
  %983 = fadd fast float %982, 0xC02BEAFA60000000
  %984 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %985 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %986 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %984, %dx.types.Handle %985, float %122, float %123, float %124, float undef, i32 undef, i32 undef, i32 undef, float %983)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %987 = extractvalue %dx.types.ResRet.f32 %986, 0
  %988 = extractvalue %dx.types.ResRet.f32 %986, 1
  %989 = extractvalue %dx.types.ResRet.f32 %986, 2
  %990 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %991 = extractvalue %dx.types.CBufRet.f32 %990, 0
  %992 = extractvalue %dx.types.CBufRet.f32 %990, 1
  %993 = extractvalue %dx.types.CBufRet.f32 %990, 2
  %994 = fmul fast float %987, %487
  %995 = fmul fast float %994, %991
  %996 = fmul fast float %988, %487
  %997 = fmul fast float %996, %992
  %998 = fmul fast float %989, %487
  %999 = fmul fast float %998, %993
  %1000 = fadd fast float %995, %970
  %1001 = fadd fast float %997, %971
  %1002 = fadd fast float %999, %972
  br label %1003

; <label>:1003                                    ; preds = %981, %975, %969
  %1004 = phi float [ %970, %969 ], [ %1000, %981 ], [ %970, %975 ]
  %1005 = phi float [ %971, %969 ], [ %1001, %981 ], [ %971, %975 ]
  %1006 = phi float [ %972, %969 ], [ %1002, %981 ], [ %972, %975 ]
  %1007 = phi float [ %490, %969 ], [ %977, %981 ], [ %977, %975 ]
  %1008 = phi float [ %493, %969 ], [ 1.000000e+00, %981 ], [ 1.000000e+00, %975 ]
  %1009 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1010 = extractvalue %dx.types.CBufRet.f32 %1009, 1
  %1011 = fcmp fast ogt float %1010, 0.000000e+00
  br i1 %1011, label %1012, label %1044

; <label>:1012                                    ; preds = %1003
  %1013 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1014 = extractvalue %dx.types.CBufRet.f32 %1013, 1
  %1015 = fcmp fast ogt float %1014, 0.000000e+00
  br i1 %1015, label %1016, label %1044

; <label>:1016                                    ; preds = %1012
  %1017 = extractvalue %dx.types.CBufRet.f32 %1013, 2
  %1018 = extractvalue %dx.types.CBufRet.f32 %1009, 0
  %1019 = call float @dx.op.binary.f32(i32 35, float %1017, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1020 = call float @dx.op.unary.f32(i32 23, float %1019)  ; Log(value)
  %1021 = fmul fast float %1020, 0x3FF3333340000000
  %1022 = fadd fast float %1018, -2.000000e+00
  %1023 = fadd fast float %1022, %1021
  %1024 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1025 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1026 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1024, %dx.types.Handle %1025, float %122, float %123, float %124, float undef, i32 undef, i32 undef, i32 undef, float %1023)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1027 = extractvalue %dx.types.ResRet.f32 %1026, 0
  %1028 = extractvalue %dx.types.ResRet.f32 %1026, 1
  %1029 = extractvalue %dx.types.ResRet.f32 %1026, 2
  %1030 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %1031 = extractvalue %dx.types.CBufRet.f32 %1030, 0
  %1032 = extractvalue %dx.types.CBufRet.f32 %1030, 1
  %1033 = extractvalue %dx.types.CBufRet.f32 %1030, 2
  %1034 = fmul fast float %1031, %1027
  %1035 = fmul fast float %1032, %1028
  %1036 = fmul fast float %1033, %1029
  %1037 = extractvalue %dx.types.CBufRet.f32 %1013, 3
  %1038 = fmul fast float %1037, %488
  %1039 = call float @dx.op.unary.f32(i32 7, float %1038)  ; Saturate(value)
  %1040 = fmul fast float %1039, %1014
  %1041 = fmul fast float %1034, %1040
  %1042 = fmul fast float %1035, %1040
  %1043 = fmul fast float %1036, %1040
  br label %1044

; <label>:1044                                    ; preds = %1016, %1012, %1003
  %1045 = phi float [ %1041, %1016 ], [ 0.000000e+00, %1012 ], [ 0.000000e+00, %1003 ]
  %1046 = phi float [ %1042, %1016 ], [ 0.000000e+00, %1012 ], [ 0.000000e+00, %1003 ]
  %1047 = phi float [ %1043, %1016 ], [ 0.000000e+00, %1012 ], [ 0.000000e+00, %1003 ]
  %1048 = fadd fast float %1045, %1004
  %1049 = fadd fast float %1046, %1005
  %1050 = fadd fast float %1047, %1006
  %1051 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1052 = extractvalue %dx.types.CBufRet.f32 %1051, 2
  %1053 = fmul fast float %1052, %1048
  %1054 = fmul fast float %1052, %1049
  %1055 = fmul fast float %1052, %1050
  %1056 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1057 = extractvalue %dx.types.CBufRet.i32 %1056, 0
  %1058 = icmp eq i32 %1057, 0
  br i1 %1058, label %1324, label %1059

; <label>:1059                                    ; preds = %1044
  %1060 = fmul fast float %1007, %122
  %1061 = fmul fast float %1007, %123
  %1062 = fmul fast float %1007, %124
  %1063 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1064 = extractvalue %dx.types.CBufRet.f32 %1063, 3
  %1065 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1066 = extractvalue %dx.types.CBufRet.f32 %1065, 2
  %1067 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %1068 = extractvalue %dx.types.CBufRet.f32 %1067, 2
  %1069 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %1070 = extractvalue %dx.types.CBufRet.f32 %1069, 2
  %1071 = fmul fast float %1068, 2.097152e+06
  %1072 = fadd fast float %1071, %1070
  %1073 = call float @dx.op.binary.f32(i32 36, float %1072, float %1066)  ; FMin(a,b)
  %1074 = fsub fast float %1062, %1073
  %1075 = fadd fast float %1074, %1070
  %1076 = fadd fast float %1075, %1071
  %1077 = call float @dx.op.dot3.f32(i32 55, float %1060, float %1061, float %1076, float %1060, float %1061, float %1076)  ; Dot3(ax,ay,az,bx,by,bz)
  %1078 = call float @dx.op.binary.f32(i32 35, float %1077, float 0x3E45798EE0000000)  ; FMax(a,b)
  %1079 = call float @dx.op.unary.f32(i32 25, float %1078)  ; Rsqrt(value)
  %1080 = fmul fast float %1079, %1077
  %1081 = fmul fast float %1079, %1060
  %1082 = fmul fast float %1079, %1061
  %1083 = fmul fast float %1076, %1079
  %1084 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1085 = extractvalue %dx.types.CBufRet.f32 %1065, 3
  %1086 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1085)  ; FMax(a,b)
  %1087 = fcmp fast ogt float %1086, 0.000000e+00
  %1088 = extractvalue %dx.types.CBufRet.f32 %1065, 1
  %1089 = extractvalue %dx.types.CBufRet.f32 %1084, 1
  br i1 %1087, label %1093, label %1090

; <label>:1090                                    ; preds = %1059
  %1091 = extractvalue %dx.types.CBufRet.f32 %1084, 0
  %1092 = extractvalue %dx.types.CBufRet.f32 %1065, 0
  br label %1117

; <label>:1093                                    ; preds = %1059
  %1094 = fmul fast float %1086, %1079
  %1095 = fmul fast float %1094, %1076
  %1096 = fadd fast float %1095, %1073
  %1097 = fsub fast float %1076, %1095
  %1098 = fsub fast float 1.000000e+00, %1094
  %1099 = fmul fast float %1098, %1080
  %1100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1101 = extractvalue %dx.types.CBufRet.f32 %1100, 1
  %1102 = fsub fast float %1096, %1101
  %1103 = fmul fast float %1102, %1088
  %1104 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %1103)  ; FMax(a,b)
  %1105 = extractvalue %dx.types.CBufRet.f32 %1100, 0
  %1106 = fsub fast float -0.000000e+00, %1104
  %1107 = call float @dx.op.unary.f32(i32 21, float %1106)  ; Exp(value)
  %1108 = fmul fast float %1105, %1107
  %1109 = extractvalue %dx.types.CBufRet.f32 %1084, 3
  %1110 = fsub fast float %1096, %1109
  %1111 = fmul fast float %1110, %1089
  %1112 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %1111)  ; FMax(a,b)
  %1113 = extractvalue %dx.types.CBufRet.f32 %1084, 2
  %1114 = fsub fast float -0.000000e+00, %1112
  %1115 = call float @dx.op.unary.f32(i32 21, float %1114)  ; Exp(value)
  %1116 = fmul fast float %1113, %1115
  br label %1117

; <label>:1117                                    ; preds = %1093, %1090
  %1118 = phi float [ %1108, %1093 ], [ %1092, %1090 ]
  %1119 = phi float [ %1116, %1093 ], [ %1091, %1090 ]
  %1120 = phi float [ %1099, %1093 ], [ %1080, %1090 ]
  %1121 = phi float [ %1097, %1093 ], [ %1076, %1090 ]
  %1122 = fmul fast float %1088, %1121
  %1123 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %1122)  ; FMax(a,b)
  %1124 = fsub fast float -0.000000e+00, %1123
  %1125 = call float @dx.op.unary.f32(i32 21, float %1124)  ; Exp(value)
  %1126 = fsub fast float 1.000000e+00, %1125
  %1127 = fdiv fast float %1126, %1123
  %1128 = fmul fast float %1123, 0x3FCEBFBE00000000
  %1129 = fsub fast float 0x3FE62E4300000000, %1128
  %1130 = call float @dx.op.unary.f32(i32 6, float %1123)  ; FAbs(value)
  %1131 = fcmp fast ogt float %1130, 0x3F847AE140000000
  %1132 = select i1 %1131, float %1127, float %1129
  %1133 = fmul fast float %1132, %1118
  %1134 = fmul fast float %1089, %1121
  %1135 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %1134)  ; FMax(a,b)
  %1136 = fsub fast float -0.000000e+00, %1135
  %1137 = call float @dx.op.unary.f32(i32 21, float %1136)  ; Exp(value)
  %1138 = fsub fast float 1.000000e+00, %1137
  %1139 = fdiv fast float %1138, %1135
  %1140 = fmul fast float %1135, 0x3FCEBFBE00000000
  %1141 = fsub fast float 0x3FE62E4300000000, %1140
  %1142 = call float @dx.op.unary.f32(i32 6, float %1135)  ; FAbs(value)
  %1143 = fcmp fast ogt float %1142, 0x3F847AE140000000
  %1144 = select i1 %1143, float %1139, float %1141
  %1145 = fmul fast float %1144, %1119
  %1146 = fadd fast float %1145, %1133
  %1147 = extractvalue %dx.types.CBufRet.f32 %1063, 0
  %1148 = extractvalue %dx.types.CBufRet.f32 %1063, 1
  %1149 = extractvalue %dx.types.CBufRet.f32 %1063, 2
  %1150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1151 = extractvalue %dx.types.CBufRet.f32 %1150, 2
  %1152 = fcmp fast ogt float %1151, 0.000000e+00
  br i1 %1152, label %1153, label %1189, !dx.controlflow.hints !44

; <label>:1153                                    ; preds = %1117
  %1154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1155 = extractvalue %dx.types.CBufRet.f32 %1154, 0
  %1156 = fmul fast float %1155, %1080
  %1157 = extractvalue %dx.types.CBufRet.f32 %1154, 1
  %1158 = fadd fast float %1156, %1157
  %1159 = call float @dx.op.unary.f32(i32 7, float %1158)  ; Saturate(value)
  %1160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1161 = extractvalue %dx.types.CBufRet.f32 %1160, 1
  %1162 = extractvalue %dx.types.CBufRet.f32 %1160, 0
  %1163 = fsub fast float -0.000000e+00, %1162
  %1164 = call float @dx.op.dot2.f32(i32 54, float %1060, float %1061, float %1161, float %1163)  ; Dot2(ax,ay,bx,by)
  %1165 = call float @dx.op.dot2.f32(i32 54, float %1060, float %1061, float %1162, float %1161)  ; Dot2(ax,ay,bx,by)
  %1166 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1167 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1168 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1166, %dx.types.Handle %1167, float %1164, float %1165, float %1076, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1169 = extractvalue %dx.types.ResRet.f32 %1168, 0
  %1170 = extractvalue %dx.types.ResRet.f32 %1168, 1
  %1171 = extractvalue %dx.types.ResRet.f32 %1168, 2
  %1172 = extractvalue %dx.types.CBufRet.f32 %1154, 2
  %1173 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1166, %dx.types.Handle %1167, float %1164, float %1165, float %1076, float undef, i32 undef, i32 undef, i32 undef, float %1172)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1174 = extractvalue %dx.types.ResRet.f32 %1173, 0
  %1175 = extractvalue %dx.types.ResRet.f32 %1173, 1
  %1176 = extractvalue %dx.types.ResRet.f32 %1173, 2
  %1177 = fsub fast float %1169, %1174
  %1178 = fsub fast float %1170, %1175
  %1179 = fsub fast float %1171, %1176
  %1180 = fmul fast float %1177, %1159
  %1181 = fmul fast float %1178, %1159
  %1182 = fmul fast float %1179, %1159
  %1183 = fadd fast float %1180, %1174
  %1184 = fadd fast float %1181, %1175
  %1185 = fadd fast float %1182, %1176
  %1186 = fmul fast float %1183, %1147
  %1187 = fmul fast float %1184, %1148
  %1188 = fmul fast float %1185, %1149
  br label %1189

; <label>:1189                                    ; preds = %1153, %1117
  %1190 = phi float [ %1186, %1153 ], [ %1147, %1117 ]
  %1191 = phi float [ %1187, %1153 ], [ %1148, %1117 ]
  %1192 = phi float [ %1188, %1153 ], [ %1149, %1117 ]
  %1193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1194 = extractvalue %dx.types.CBufRet.f32 %1193, 0
  %1195 = extractvalue %dx.types.CBufRet.f32 %1193, 1
  %1196 = extractvalue %dx.types.CBufRet.f32 %1193, 2
  %1197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %1198 = extractvalue %dx.types.CBufRet.f32 %1197, 1
  %1199 = fmul fast float %1198, %1194
  %1200 = fmul fast float %1198, %1195
  %1201 = fmul fast float %1198, %1196
  %1202 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1203 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1204 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1202, %dx.types.Handle %1203, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1205 = extractvalue %dx.types.ResRet.f32 %1204, 0
  %1206 = extractvalue %dx.types.ResRet.f32 %1204, 1
  %1207 = extractvalue %dx.types.ResRet.f32 %1204, 2
  %1208 = fmul fast float %1199, %1205
  %1209 = fmul fast float %1200, %1206
  %1210 = fmul fast float %1201, %1207
  %1211 = fadd fast float %1208, %1190
  %1212 = fadd fast float %1209, %1191
  %1213 = fadd fast float %1210, %1192
  %1214 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1215 = extractvalue %dx.types.CBufRet.f32 %1214, 3
  %1216 = fcmp fast oge float %1215, 0.000000e+00
  %1217 = fcmp fast oeq float %1151, 0.000000e+00
  %1218 = and i1 %1216, %1217
  br i1 %1218, label %1219, label %1290

; <label>:1219                                    ; preds = %1189
  %1220 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1221 = extractvalue %dx.types.CBufRet.f32 %1220, 0
  %1222 = extractvalue %dx.types.CBufRet.f32 %1220, 1
  %1223 = extractvalue %dx.types.CBufRet.f32 %1220, 2
  %1224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %1225 = extractvalue %dx.types.CBufRet.f32 %1224, 0
  %1226 = extractvalue %dx.types.CBufRet.f32 %1224, 1
  %1227 = extractvalue %dx.types.CBufRet.f32 %1224, 2
  %1228 = fmul fast float %1198, 0x3FB45F3060000000
  %1229 = fmul fast float %1228, %1225
  %1230 = fmul fast float %1228, %1226
  %1231 = fmul fast float %1228, %1227
  %1232 = fadd fast float %1229, %1221
  %1233 = fadd fast float %1230, %1222
  %1234 = fadd fast float %1231, %1223
  %1235 = extractvalue %dx.types.CBufRet.f32 %1220, 3
  %1236 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %1237 = extractvalue %dx.types.CBufRet.f32 %1236, 0
  %1238 = extractvalue %dx.types.CBufRet.f32 %1236, 1
  %1239 = extractvalue %dx.types.CBufRet.f32 %1236, 2
  %1240 = call float @dx.op.dot3.f32(i32 55, float %1081, float %1082, float %1083, float %1237, float %1238, float %1239)  ; Dot3(ax,ay,az,bx,by,bz)
  %1241 = call float @dx.op.unary.f32(i32 7, float %1240)  ; Saturate(value)
  %1242 = call float @dx.op.unary.f32(i32 23, float %1241)  ; Log(value)
  %1243 = fmul fast float %1242, %1235
  %1244 = call float @dx.op.unary.f32(i32 21, float %1243)  ; Exp(value)
  %1245 = fmul fast float %1244, %1232
  %1246 = fmul fast float %1244, %1233
  %1247 = fmul fast float %1244, %1234
  %1248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %1249 = extractvalue %dx.types.CBufRet.f32 %1248, 3
  %1250 = fcmp fast ogt float %1249, 0.000000e+00
  br i1 %1250, label %1251, label %1276

; <label>:1251                                    ; preds = %1219
  %1252 = extractvalue %dx.types.CBufRet.f32 %1248, 0
  %1253 = extractvalue %dx.types.CBufRet.f32 %1248, 1
  %1254 = extractvalue %dx.types.CBufRet.f32 %1248, 2
  %1255 = fmul fast float %1228, %1252
  %1256 = fmul fast float %1228, %1253
  %1257 = fmul fast float %1228, %1254
  %1258 = fadd fast float %1255, %1221
  %1259 = fadd fast float %1256, %1222
  %1260 = fadd fast float %1257, %1223
  %1261 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %1262 = extractvalue %dx.types.CBufRet.f32 %1261, 0
  %1263 = extractvalue %dx.types.CBufRet.f32 %1261, 1
  %1264 = extractvalue %dx.types.CBufRet.f32 %1261, 2
  %1265 = call float @dx.op.dot3.f32(i32 55, float %1081, float %1082, float %1083, float %1262, float %1263, float %1264)  ; Dot3(ax,ay,az,bx,by,bz)
  %1266 = call float @dx.op.unary.f32(i32 7, float %1265)  ; Saturate(value)
  %1267 = call float @dx.op.unary.f32(i32 23, float %1266)  ; Log(value)
  %1268 = fmul fast float %1267, %1235
  %1269 = call float @dx.op.unary.f32(i32 21, float %1268)  ; Exp(value)
  %1270 = fmul fast float %1269, %1258
  %1271 = fmul fast float %1269, %1259
  %1272 = fmul fast float %1269, %1260
  %1273 = fadd fast float %1270, %1245
  %1274 = fadd fast float %1271, %1246
  %1275 = fadd fast float %1272, %1247
  br label %1276

; <label>:1276                                    ; preds = %1251, %1219
  %1277 = phi float [ %1273, %1251 ], [ %1245, %1219 ]
  %1278 = phi float [ %1274, %1251 ], [ %1246, %1219 ]
  %1279 = phi float [ %1275, %1251 ], [ %1247, %1219 ]
  %1280 = fsub fast float %1120, %1215
  %1281 = call float @dx.op.binary.f32(i32 35, float %1280, float 0.000000e+00)  ; FMax(a,b)
  %1282 = fmul fast float %1146, %1281
  %1283 = fsub fast float -0.000000e+00, %1282
  %1284 = call float @dx.op.unary.f32(i32 21, float %1283)  ; Exp(value)
  %1285 = call float @dx.op.unary.f32(i32 7, float %1284)  ; Saturate(value)
  %1286 = fsub fast float 1.000000e+00, %1285
  %1287 = fmul fast float %1286, %1277
  %1288 = fmul fast float %1286, %1278
  %1289 = fmul fast float %1286, %1279
  br label %1290

; <label>:1290                                    ; preds = %1276, %1189
  %1291 = phi float [ %1287, %1276 ], [ 0.000000e+00, %1189 ]
  %1292 = phi float [ %1288, %1276 ], [ 0.000000e+00, %1189 ]
  %1293 = phi float [ %1289, %1276 ], [ 0.000000e+00, %1189 ]
  %1294 = fmul fast float %1120, %1146
  %1295 = fsub fast float -0.000000e+00, %1294
  %1296 = call float @dx.op.unary.f32(i32 21, float %1295)  ; Exp(value)
  %1297 = call float @dx.op.unary.f32(i32 7, float %1296)  ; Saturate(value)
  %1298 = call float @dx.op.binary.f32(i32 35, float %1297, float %1064)  ; FMax(a,b)
  %1299 = extractvalue %dx.types.CBufRet.f32 %1150, 3
  %1300 = fcmp fast ogt float %1299, 0.000000e+00
  %1301 = fcmp fast ogt float %1080, %1299
  %1302 = and i1 %1300, %1301
  %1303 = select i1 %1302, float 0.000000e+00, float %1291
  %1304 = select i1 %1302, float 0.000000e+00, float %1292
  %1305 = select i1 %1302, float 0.000000e+00, float %1293
  %1306 = select i1 %1302, float 1.000000e+00, float %1298
  %1307 = fsub fast float 1.000000e+00, %1306
  %1308 = fmul fast float %1307, %1211
  %1309 = fmul fast float %1307, %1212
  %1310 = fmul fast float %1307, %1213
  %1311 = fadd fast float %1308, %1303
  %1312 = fadd fast float %1309, %1304
  %1313 = fadd fast float %1310, %1305
  %1314 = fmul fast float %1306, %1053
  %1315 = fmul fast float %1306, %1054
  %1316 = fmul fast float %1306, %1055
  %1317 = fmul fast float %1052, %1008
  %1318 = fmul fast float %1317, %1311
  %1319 = fmul fast float %1317, %1312
  %1320 = fmul fast float %1317, %1313
  %1321 = fadd fast float %1318, %1314
  %1322 = fadd fast float %1319, %1315
  %1323 = fadd fast float %1320, %1316
  br label %1324

; <label>:1324                                    ; preds = %1290, %1044
  %1325 = phi float [ %1321, %1290 ], [ %1053, %1044 ]
  %1326 = phi float [ %1322, %1290 ], [ %1054, %1044 ]
  %1327 = phi float [ %1323, %1290 ], [ %1055, %1044 ]
  %1328 = call float @dx.op.binary.f32(i32 35, float %1326, float %1327)  ; FMax(a,b)
  %1329 = call float @dx.op.binary.f32(i32 35, float %1325, float %1328)  ; FMax(a,b)
  %1330 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1331 = extractvalue %dx.types.CBufRet.f32 %1330, 2
  %1332 = fcmp fast ogt float %1329, %1331
  br i1 %1332, label %1333, label %1338

; <label>:1333                                    ; preds = %1324
  %1334 = fdiv fast float %1331, %1329
  %1335 = fmul fast float %1334, %1325
  %1336 = fmul fast float %1334, %1326
  %1337 = fmul fast float %1334, %1327
  br label %1338

; <label>:1338                                    ; preds = %1333, %1324
  %1339 = phi float [ %1335, %1333 ], [ %1325, %1324 ]
  %1340 = phi float [ %1336, %1333 ], [ %1326, %1324 ]
  %1341 = phi float [ %1337, %1333 ], [ %1327, %1324 ]
  %1342 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1342, i32 %40, i32 %41, i32 undef, float %1339, float %1340, float %1341, float %1339, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1343 = icmp ne i32 %973, 0
  %1344 = call float @dx.op.binary.f32(i32 35, float %1007, float 0.000000e+00)  ; FMax(a,b)
  %1345 = select i1 %1343, float -1.000000e+00, float 1.000000e+00
  %1346 = fmul fast float %1344, %1345
  %1347 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1347, i32 %40, i32 %41, i32 undef, float %1346, float %1346, float %1346, float %1346, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1348

; <label>:1348                                    ; preds = %1338, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!37}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !23, !26, !32}
!5 = !{!6, !8, !9, !10, !12, !14, !15, !16, !17, !18, !19, !20, !21, !22}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 5, i32 0, !7}
!9 = !{i32 2, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 5, i32 0, !7}
!10 = !{i32 3, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 3, i32 1, i32 10, i32 0, !11}
!11 = !{i32 0, i32 5}
!12 = !{i32 4, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 32}
!14 = !{i32 5, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !11}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!18 = !{i32 9, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !11}
!19 = !{i32 10, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !11}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !11}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{!24, !25}
!24 = !{i32 0, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!25 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!26 = !{!27, !28, !29, !30, !31}
!27 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1320, null}
!28 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!29 = !{i32 2, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 2, i32 1, i32 76, null}
!30 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!31 = !{i32 4, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 4, i32 1, i32 228, null}
!32 = !{!33, !34, !35, !36}
!33 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!34 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!35 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!36 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!37 = !{void ()* @ReflectionTraceVoxelsCS, !"ReflectionTraceVoxelsCS", null, !4, !38}
!38 = !{i32 0, i64 16, i32 4, !39, i32 5, !40}
!39 = !{i32 64, i32 1, i32 1}
!40 = !{i32 0}
!41 = distinct !{!41, !42}
!42 = !{!"llvm.loop.unroll.disable"}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
