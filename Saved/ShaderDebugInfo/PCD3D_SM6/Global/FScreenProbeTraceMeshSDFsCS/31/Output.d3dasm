;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: ebde763281ceab415899ca7ef95f9c00
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(32,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint NumSceneObjects;                         ; Offset:  272
;       uint NumSceneHeightfieldObjects;              ; Offset:  296
;       float3 DistanceFieldBrickSize;                ; Offset:  352
;       float3 DistanceFieldUniqueDataBrickSize;      ; Offset:  368
;       uint3 DistanceFieldBrickAtlasSizeInBricks;    ; Offset:  384
;       uint3 DistanceFieldBrickAtlasMask;            ; Offset:  400
;       uint3 DistanceFieldBrickAtlasSizeLog2;        ; Offset:  416
;       float3 DistanceFieldBrickAtlasTexelSize;      ; Offset:  432
;       float3 DistanceFieldBrickAtlasHalfTexelSize;  ; Offset:  448
;       float3 DistanceFieldBrickOffsetToAtlasUVScale;; Offset:  464
;       float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;; Offset:  480
;       float MeshSDFNotCoveredExpandSurfaceScale;    ; Offset:  496
;       float MeshSDFNotCoveredMinStepScale;          ; Offset:  500
;       float MeshSDFDitheredTransparencyStepThreshold;; Offset:  504
;       uint CardGridPixelSizeShift;                  ; Offset:  536
;       float3 CardGridZParams;                       ; Offset:  544
;       uint3 CullGridSize;                           ; Offset:  560
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:  624
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:  628
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:  632
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:  636
;       uint ScreenProbeDownsampleFactor;             ; Offset:  640
;       uint2 ScreenProbeViewSize;                    ; Offset:  648
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:  656
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:  664
;       float ScreenProbeGatherMaxMip;                ; Offset:  672
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:  676
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:  680
;       float2 SampleRadianceProbeUVMul;              ; Offset:  688
;       float2 SampleRadianceProbeUVAdd;              ; Offset:  696
;       float2 SampleRadianceAtlasUVMul;              ; Offset:  704
;       uint NumUniformScreenProbes;                  ; Offset:  716
;       uint MaxNumAdaptiveProbes;                    ; Offset:  720
;       int FixedJitterIndex;                         ; Offset:  724
;       uint MaxImportanceSamplingOctahedronResolution;; Offset:  880
;       uint ScreenProbeBRDFOctahedronResolution;     ; Offset:  884
;       float StepFactor;                             ; Offset:  928
;       float CardTraceEndDistanceFromCamera;         ; Offset:  932
;       float MinSampleRadius;                        ; Offset:  944
;       float MinTraceDistance;                       ; Offset:  948
;       float MaxTraceDistance;                       ; Offset:  952
;       float MaxMeshSDFTraceDistance;                ; Offset:  956
;       float SurfaceBias;                            ; Offset:  960
;       float CardInterpolateInfluenceRadius;         ; Offset:  964
;       int HeightfieldMaxTracingSteps;               ; Offset:  976
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   980
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_Scene
; {
;
;   struct UniformBufferConstants_Scene
;   {
;
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstanceSceneData;; Offset:    0
;       uint PrePadding_Scene_GPUScene_4;             ; Offset:    4
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstancePayloadData;; Offset:    8
;       uint PrePadding_Scene_GPUScene_12;            ; Offset:   12
;       uint BindlessResource_Scene_GPUScene_GPUScenePrimitiveSceneData;; Offset:   16
;       uint PrePadding_Scene_GPUScene_20;            ; Offset:   20
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightmapData;; Offset:   24
;       uint PrePadding_Scene_GPUScene_28;            ; Offset:   28
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightData;; Offset:   32
;       uint PrePadding_Scene_GPUScene_36;            ; Offset:   36
;       uint Scene_GPUScene_InstanceDataSOAStride;    ; Offset:   40
;       uint Scene_GPUScene_GPUSceneFrameNumber;      ; Offset:   44
;       int Scene_GPUScene_NumInstances;              ; Offset:   48
;       int Scene_GPUScene_NumScenePrimitives;        ; Offset:   52
;   
;   } UniformBufferConstants_Scene;                   ; Offset:    0 Size:    56
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_NumPrimitiveGroups;       ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       float PrePadding_LumenCardScene_44;           ; Offset:   44
;       uint BindlessResource_LumenCardScene_CardData;; Offset:   48
;       uint PrePadding_LumenCardScene_52;            ; Offset:   52
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:   56
;       uint PrePadding_LumenCardScene_60;            ; Offset:   60
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:   64
;       uint PrePadding_LumenCardScene_68;            ; Offset:   68
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:   72
;       uint PrePadding_LumenCardScene_76;            ; Offset:   76
;       uint BindlessResource_LumenCardScene_PrimitiveGroupData;; Offset:   80
;       uint PrePadding_LumenCardScene_84;            ; Offset:   84
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:   88
;       uint PrePadding_LumenCardScene_92;            ; Offset:   92
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:   96
;       uint PrePadding_LumenCardScene_100;           ; Offset:  100
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  104
;       uint PrePadding_LumenCardScene_108;           ; Offset:  108
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  136
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   140
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_AllocatedPageCountBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  200
;       uint PrePadding_VirtualVoxel_204;             ; Offset:  204
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  208
;       float PrePadding_VirtualVoxel_212;            ; Offset:  212
;       float PrePadding_VirtualVoxel_216;            ; Offset:  216
;       float PrePadding_VirtualVoxel_220;            ; Offset:  220
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  224
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   228
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_HeightfieldData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for SceneDistanceFieldAssetData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneObjectData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for AdaptiveScreenProbeData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for CompactedTraceTexelAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for CompactedTraceTexelData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Scene      cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB4            cb4     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB5            cb5     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB6            cb6     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB7            cb7     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearWrappedSampler   sampler      NA          NA      S1   s2,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S2   s3,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S3             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S4             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o      T1             t1     1
; Scene_GPUScene_GPUSceneInstancePayloadData   texture  struct         r/o      T2             t2     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T3             t3     1
; LumenCardScene_CardData           texture  struct         r/o      T4             t4     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T5             t5     1
; LumenCardScene_HeightfieldData    texture  struct         r/o      T6             t6     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T7             t7     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T8             t8     1
; LumenCardScene_OpacityAtlas       texture     f32          2d      T9             t9     1
; LumenCardScene_DepthAtlas         texture     f32          2d     T10            t10     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube     T11            t11     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T12            t12     1
; BlueNoise_Vec2Texture             texture     f32          2d     T13            t13     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf     T14            t14     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T15            t15     1
; VirtualVoxel_PageTexture          texture     u32          3d     T16            t16     1
; FinalLightingAtlas                texture     f32          2d     T17            t17     1
; DepthAtlas                        texture     f32          2d     T18            t18     1
; DistanceFieldIndirectionTable     texture    byte         r/o     T19            t19     1
; DistanceFieldBrickTexture         texture     f32          3d     T20            t20     1
; SceneDistanceFieldAssetData       texture  struct         r/o     T21            t21     1
; SceneObjectData                   texture  struct         r/o     T22            t22     1
; NumGridCulledMeshSDFObjects       texture     u32         buf     T23            t23     1
; GridCulledMeshSDFObjectStartOffsetArray   texture     u32         buf     T24            t24     1
; GridCulledMeshSDFObjectIndicesArray   texture     u32         buf     T25            t25     1
; NumGridCulledHeightfieldObjects   texture     u32         buf     T26            t26     1
; GridCulledHeightfieldObjectStartOffsetArray   texture     u32         buf     T27            t27     1
; GridCulledHeightfieldObjectIndicesArray   texture     u32         buf     T28            t28     1
; ScreenProbeSceneDepth             texture     u32          2d     T29            t29     1
; ScreenProbeWorldNormal            texture     f32          2d     T30            t30     1
; ScreenProbeWorldSpeed             texture     u32          2d     T31            t31     1
; AdaptiveScreenProbeData           texture  struct         r/o     T32            t32     1
; CompactedTraceTexelAllocator      texture  struct         r/o     T33            t33     1
; CompactedTraceTexelData           texture  struct         r/o     T34            t34     1
; StructuredImportanceSampledRayInfosForTracing   texture     u32          2d     T35            t35     1
; RWTraceHit                            UAV     u32          2d      U0             u0     1
; RWTraceRadiance                       UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 2> >" = type { <2 x float>, %"class.Texture2D<vector<float, 2> >::mips_type" }
%"class.Texture2D<vector<float, 2> >::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, i32, <3 x float>, <3 x float>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, float, float, float, i32, <3 x float>, <3 x i32>, i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_Scene = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32 }
%struct.SamplerState = type { i32 }

define void @ScreenProbeTraceMeshSDFsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 35, i32 35, i32 0, i8 0 }, i32 35, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 34, i32 34, i32 0, i8 0 }, i32 34, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 33, i32 33, i32 0, i8 0 }, i32 33, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 32, i32 32, i32 0, i8 0 }, i32 32, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 31, i32 31, i32 0, i8 0 }, i32 31, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 30, i32 30, i32 0, i8 0 }, i32 30, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 29, i32 29, i32 0, i8 0 }, i32 29, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 28, i32 28, i32 0, i8 0 }, i32 28, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 27, i32 27, i32 0, i8 0 }, i32 27, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 1000, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 2 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 2 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %47 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %48 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %49 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %50 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %51 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %52 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %53 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 13, i32 228 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %54 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %55 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %47, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %56 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %48, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %49, %dx.types.ResourceProperties { i32 13, i32 140 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %58 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %50, %dx.types.ResourceProperties { i32 13, i32 56 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %51, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %60 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %52, %dx.types.ResourceProperties { i32 13, i32 980 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %61 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %62 = alloca [6 x i32], align 4
  %63 = alloca [6 x i32], align 4
  %64 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.i32 %64, 2
  %66 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %67 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %66, i32 0, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %68 = extractvalue %dx.types.ResRet.i32 %67, 0
  %69 = icmp ult i32 %61, %68
  br i1 %69, label %70, label %4165

; <label>:70                                      ; preds = %0
  %71 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %72 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %71, i32 %61, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %73 = extractvalue %dx.types.ResRet.i32 %72, 0
  %74 = and i32 %73, 1048575
  %75 = lshr i32 %73, 20
  %76 = and i32 %75, 31
  %77 = lshr i32 %73, 25
  %78 = and i32 %77, 31
  %79 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.i32 %79, 0
  %81 = urem i32 %74, %80
  %82 = udiv i32 %74, %80
  %83 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.i32 %83, 2
  %85 = urem i32 %74, %84
  %86 = udiv i32 %74, %84
  %87 = extractvalue %dx.types.CBufRet.i32 %83, 0
  %88 = mul i32 %87, %85
  %89 = mul i32 %87, %86
  %90 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.i32 %90, 1
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %93, label %96

; <label>:93                                      ; preds = %70
  %94 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.i32 %94, 1
  br label %96

; <label>:96                                      ; preds = %93, %70
  %97 = phi i32 [ %95, %93 ], [ %91, %70 ]
  %98 = uitofp i32 %97 to float
  %99 = fmul fast float %98, 1.250000e-01
  %100 = call float @dx.op.unary.f32(i32 22, float %99)  ; Frc(value)
  %101 = call i32 @dx.op.unary.i32(i32 30, i32 %97)  ; Bfrev(value)
  %102 = lshr i32 %101, 16
  %103 = uitofp i32 %102 to float
  %104 = fmul fast float %103, 0x3EF0000000000000
  %105 = uitofp i32 %87 to float
  %106 = fmul fast float %105, %100
  %107 = fmul fast float %104, %105
  %108 = fptoui float %106 to i32
  %109 = fptoui float %107 to i32
  %110 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.i32 %110, 0
  %112 = extractvalue %dx.types.CBufRet.i32 %110, 1
  %113 = add i32 %111, %88
  %114 = add i32 %113, %108
  %115 = add i32 %112, %89
  %116 = add i32 %115, %109
  %117 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.i32 %117, 3
  %119 = icmp ult i32 %74, %118
  br i1 %119, label %127, label %120

; <label>:120                                     ; preds = %96
  %121 = sub i32 %74, %118
  %122 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %123 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %122, i32 %121, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %124 = extractvalue %dx.types.ResRet.i32 %123, 0
  %125 = and i32 %124, 65535
  %126 = lshr i32 %124, 16
  br label %127

; <label>:127                                     ; preds = %120, %96
  %128 = phi i32 [ %125, %120 ], [ %114, %96 ]
  %129 = phi i32 [ %126, %120 ], [ %116, %96 ]
  br i1 %92, label %130, label %133

; <label>:130                                     ; preds = %127
  %131 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.i32 %131, 1
  br label %133

; <label>:133                                     ; preds = %130, %127
  %134 = phi i32 [ %132, %130 ], [ %91, %127 ]
  %135 = uitofp i32 %134 to float
  %136 = fmul fast float %135, 1.250000e-01
  %137 = call float @dx.op.unary.f32(i32 22, float %136)  ; Frc(value)
  %138 = call i32 @dx.op.unary.i32(i32 30, i32 %134)  ; Bfrev(value)
  %139 = lshr i32 %138, 16
  %140 = uitofp i32 %139 to float
  %141 = fmul fast float %140, 0x3EF0000000000000
  %142 = fmul fast float %105, %137
  %143 = fmul fast float %141, %105
  %144 = fptoui float %142 to i32
  %145 = fptoui float %143 to i32
  %146 = sub i32 %128, %111
  %147 = sub i32 %146, %144
  %148 = sub i32 %129, %112
  %149 = sub i32 %148, %145
  %150 = udiv i32 %147, %87
  %151 = udiv i32 %149, %87
  %152 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.i32 %152, 0
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 0
  %159 = extractvalue %dx.types.CBufRet.f32 %157, 1
  %160 = fadd fast float %155, -1.000000e+00
  %161 = fadd fast float %160, %158
  %162 = fadd fast float %156, -1.000000e+00
  %163 = fadd fast float %162, %159
  %164 = uitofp i32 %128 to float
  %165 = uitofp i32 %129 to float
  %166 = call float @dx.op.binary.f32(i32 36, float %164, float %161)  ; FMin(a,b)
  %167 = call float @dx.op.binary.f32(i32 36, float %165, float %163)  ; FMin(a,b)
  %168 = fadd fast float %166, 5.000000e-01
  %169 = fadd fast float %167, 5.000000e-01
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 2
  %172 = extractvalue %dx.types.CBufRet.f32 %170, 3
  %173 = fmul fast float %171, %168
  %174 = fmul fast float %172, %169
  %175 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %176 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %175, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %177 = extractvalue %dx.types.ResRet.i32 %176, 0
  %178 = bitcast i32 %177 to float
  %179 = mul i32 %153, %81
  %180 = mul i32 %153, %82
  %181 = add i32 %179, %76
  %182 = add i32 %180, %78
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 3
  %186 = fsub fast float %173, %185
  %187 = fsub fast float %174, %184
  %188 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %189 = extractvalue %dx.types.CBufRet.f32 %183, 1
  %190 = fdiv fast float %186, %188
  %191 = fdiv fast float %187, %189
  %192 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %193 = extractvalue %dx.types.CBufRet.f32 %192, 0
  %194 = extractvalue %dx.types.CBufRet.f32 %192, 1
  %195 = extractvalue %dx.types.CBufRet.f32 %192, 2
  %196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %197 = extractvalue %dx.types.CBufRet.f32 %196, 0
  %198 = extractvalue %dx.types.CBufRet.f32 %196, 1
  %199 = extractvalue %dx.types.CBufRet.f32 %196, 2
  %200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %201 = extractvalue %dx.types.CBufRet.f32 %200, 0
  %202 = extractvalue %dx.types.CBufRet.f32 %200, 1
  %203 = extractvalue %dx.types.CBufRet.f32 %200, 2
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %207 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %208 = fmul fast float %190, %178
  %209 = fmul fast float %191, %178
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 3
  %212 = bitcast float %211 to i32
  %213 = icmp ne i32 %212, 0
  %214 = select i1 %213, float %190, float %208
  %215 = select i1 %213, float %191, float %209
  %216 = fmul fast float %214, %193
  %217 = call float @dx.op.tertiary.f32(i32 46, float %215, float %197, float %216)  ; FMad(a,b,c)
  %218 = call float @dx.op.tertiary.f32(i32 46, float %178, float %201, float %217)  ; FMad(a,b,c)
  %219 = fadd fast float %218, %205
  %220 = fmul fast float %214, %194
  %221 = call float @dx.op.tertiary.f32(i32 46, float %215, float %198, float %220)  ; FMad(a,b,c)
  %222 = call float @dx.op.tertiary.f32(i32 46, float %178, float %202, float %221)  ; FMad(a,b,c)
  %223 = fadd fast float %222, %206
  %224 = fmul fast float %214, %195
  %225 = call float @dx.op.tertiary.f32(i32 46, float %215, float %199, float %224)  ; FMad(a,b,c)
  %226 = call float @dx.op.tertiary.f32(i32 46, float %178, float %203, float %225)  ; FMad(a,b,c)
  %227 = fadd fast float %226, %207
  %228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %229 = extractvalue %dx.types.CBufRet.f32 %228, 0
  %230 = extractvalue %dx.types.CBufRet.f32 %228, 1
  %231 = extractvalue %dx.types.CBufRet.f32 %228, 2
  %232 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %233 = extractvalue %dx.types.CBufRet.f32 %232, 0
  %234 = extractvalue %dx.types.CBufRet.f32 %232, 1
  %235 = extractvalue %dx.types.CBufRet.f32 %232, 2
  %236 = fmul fast float %229, 2.097152e+06
  %237 = fmul fast float %230, 2.097152e+06
  %238 = fmul fast float %231, 2.097152e+06
  %239 = fsub fast float %233, %236
  %240 = fsub fast float %234, %237
  %241 = fsub fast float %235, %238
  %242 = fsub fast float %219, %239
  %243 = fsub fast float %223, %240
  %244 = fsub fast float %227, %241
  %245 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %246 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %245, i32 undef, i32 %181, i32 %182, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %247 = extractvalue %dx.types.ResRet.i32 %246, 0
  %248 = and i32 %247, 536870911
  %249 = uitofp i32 %248 to float
  %250 = fmul fast float %249, 1.000000e+01
  %251 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %252 = extractvalue %dx.types.CBufRet.f32 %251, 2
  br i1 %92, label %253, label %256

; <label>:253                                     ; preds = %133
  %254 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %255 = extractvalue %dx.types.CBufRet.i32 %254, 2
  br label %256

; <label>:256                                     ; preds = %253, %133
  %257 = phi i32 [ %255, %253 ], [ %91, %133 ]
  %258 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %54, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.i32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.i32 %258, 1
  %261 = extractvalue %dx.types.CBufRet.i32 %258, 2
  %262 = and i32 %259, %150
  %263 = and i32 %260, %151
  %264 = and i32 %261, %257
  %265 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %54, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %266 = extractvalue %dx.types.CBufRet.i32 %265, 1
  %267 = mul i32 %264, %266
  %268 = add i32 %267, %263
  %269 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %270 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %269, i32 0, i32 %262, i32 %268, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %271 = extractvalue %dx.types.ResRet.f32 %270, 0
  %272 = extractvalue %dx.types.ResRet.f32 %270, 1
  %273 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %274 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %273, i32 0, i32 %181, i32 %182, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %275 = extractvalue %dx.types.ResRet.i32 %274, 0
  %276 = and i32 %275, 63
  %277 = lshr i32 %275, 6
  %278 = and i32 %277, 63
  %279 = lshr i32 %275, 12
  %280 = and i32 %279, 15
  %281 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.i32 %281, 0
  %283 = lshr i32 %282, %280
  %284 = uitofp i32 %283 to float
  %285 = uitofp i32 %276 to float
  %286 = uitofp i32 %278 to float
  %287 = fadd fast float %285, %271
  %288 = fadd fast float %286, %272
  %289 = fdiv fast float 2.000000e+00, %284
  %290 = fmul fast float %289, %287
  %291 = fmul fast float %289, %288
  %292 = fadd fast float %290, -1.000000e+00
  %293 = fadd fast float %291, -1.000000e+00
  %294 = call float @dx.op.unary.f32(i32 6, float %292)  ; FAbs(value)
  %295 = call float @dx.op.unary.f32(i32 6, float %293)  ; FAbs(value)
  %296 = fsub fast float 1.000000e+00, %294
  %297 = fsub fast float %296, %295
  %298 = call float @dx.op.unary.f32(i32 6, float %297)  ; FAbs(value)
  %299 = fsub fast float 1.000000e+00, %298
  %300 = fcmp fast oeq float %299, 0.000000e+00
  br i1 %300, label %306, label %301

; <label>:301                                     ; preds = %256
  %302 = fsub fast float %295, %294
  %303 = fdiv fast float %302, %299
  %304 = fadd fast float %303, 1.000000e+00
  %305 = fmul fast float %304, 0x3FE921FB60000000
  br label %306

; <label>:306                                     ; preds = %301, %256
  %307 = phi float [ %305, %301 ], [ 0.000000e+00, %256 ]
  %308 = fmul fast float %299, %299
  %309 = fsub fast float 2.000000e+00, %308
  %310 = call float @dx.op.unary.f32(i32 24, float %309)  ; Sqrt(value)
  %311 = fmul fast float %310, %299
  %312 = fcmp fast ogt float %292, 0.000000e+00
  %313 = fcmp fast olt float %292, 0.000000e+00
  %314 = zext i1 %312 to i32
  %315 = zext i1 %313 to i32
  %316 = sub nsw i32 %314, %315
  %317 = sitofp i32 %316 to float
  %318 = fmul fast float %311, %317
  %319 = call float @dx.op.unary.f32(i32 12, float %307)  ; Cos(value)
  %320 = call float @dx.op.unary.f32(i32 6, float %319)  ; FAbs(value)
  %321 = fmul fast float %318, %320
  %322 = fcmp fast ogt float %293, 0.000000e+00
  %323 = fcmp fast olt float %293, 0.000000e+00
  %324 = zext i1 %322 to i32
  %325 = zext i1 %323 to i32
  %326 = sub nsw i32 %324, %325
  %327 = sitofp i32 %326 to float
  %328 = fmul fast float %311, %327
  %329 = call float @dx.op.unary.f32(i32 13, float %307)  ; Sin(value)
  %330 = call float @dx.op.unary.f32(i32 6, float %329)  ; FAbs(value)
  %331 = fmul fast float %328, %330
  %332 = fcmp fast ogt float %297, 0.000000e+00
  %333 = fcmp fast olt float %297, 0.000000e+00
  %334 = zext i1 %332 to i32
  %335 = zext i1 %333 to i32
  %336 = sub nsw i32 %334, %335
  %337 = sitofp i32 %336 to float
  %338 = fsub fast float 1.000000e+00, %308
  %339 = fmul fast float %337, %338
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = fmul fast float %341, %321
  %343 = fmul fast float %341, %331
  %344 = fmul fast float %341, %339
  %345 = fadd fast float %342, %219
  %346 = fadd fast float %343, %223
  %347 = fadd fast float %344, %227
  %348 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 521 })  ; AnnotateHandle(res,props)  resource: Texture2D<2xF32>
  %349 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %348, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %350 = extractvalue %dx.types.ResRet.f32 %349, 0
  %351 = extractvalue %dx.types.ResRet.f32 %349, 1
  %352 = fmul fast float %350, 2.000000e+00
  %353 = fmul fast float %351, 2.000000e+00
  %354 = fadd fast float %352, -1.000000e+00
  %355 = fadd fast float %353, -1.000000e+00
  %356 = call float @dx.op.unary.f32(i32 6, float %354)  ; FAbs(value)
  %357 = call float @dx.op.unary.f32(i32 6, float %355)  ; FAbs(value)
  %358 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %356, float %357)  ; Dot2(ax,ay,bx,by)
  %359 = fsub fast float 1.000000e+00, %358
  %360 = fsub fast float -0.000000e+00, %359
  %361 = call float @dx.op.binary.f32(i32 35, float %360, float 0.000000e+00)  ; FMax(a,b)
  %362 = fsub fast float -0.000000e+00, %361
  %363 = fcmp fast oge float %354, 0.000000e+00
  %364 = fcmp fast oge float %355, 0.000000e+00
  %365 = select i1 %363, float %362, float %361
  %366 = select i1 %364, float %362, float %361
  %367 = fadd fast float %365, %354
  %368 = fadd fast float %366, %355
  %369 = call float @dx.op.dot3.f32(i32 55, float %367, float %368, float %359, float %367, float %368, float %359)  ; Dot3(ax,ay,az,bx,by,bz)
  %370 = call float @dx.op.unary.f32(i32 25, float %369)  ; Rsqrt(value)
  %371 = fmul fast float %367, %370
  %372 = fmul fast float %368, %370
  %373 = fmul fast float %370, %359
  %374 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %375 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %374, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %376 = extractvalue %dx.types.ResRet.i32 %375, 0
  %377 = and i32 %376, 32768
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %386, label %379

; <label>:379                                     ; preds = %306
  %380 = call float @dx.op.dot3.f32(i32 55, float %371, float %372, float %373, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %381 = fcmp fast olt float %380, 0.000000e+00
  br i1 %381, label %382, label %386

; <label>:382                                     ; preds = %379
  %383 = fsub fast float -0.000000e+00, %371
  %384 = fsub fast float -0.000000e+00, %372
  %385 = fsub fast float -0.000000e+00, %373
  br label %386

; <label>:386                                     ; preds = %382, %379, %306
  %387 = phi float [ %383, %382 ], [ %371, %379 ], [ %371, %306 ]
  %388 = phi float [ %384, %382 ], [ %372, %379 ], [ %372, %306 ]
  %389 = phi float [ %385, %382 ], [ %373, %379 ], [ %373, %306 ]
  %390 = fmul fast float %387, %341
  %391 = fmul fast float %388, %341
  %392 = fmul fast float %389, %341
  %393 = fadd fast float %345, %390
  %394 = fadd fast float %346, %391
  %395 = fadd fast float %347, %392
  %396 = fsub fast float %393, %239
  %397 = fsub fast float %394, %240
  %398 = fsub fast float %395, %241
  %399 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %400 = extractvalue %dx.types.CBufRet.f32 %399, 0
  %401 = fmul fast float %341, 2.000000e+00
  %402 = fsub fast float %250, %401
  %403 = extractvalue %dx.types.CBufRet.f32 %251, 1
  %404 = call float @dx.op.binary.f32(i32 35, float %403, float %402)  ; FMax(a,b)
  %405 = extractvalue %dx.types.CBufRet.f32 %251, 3
  %406 = call float @dx.op.binary.f32(i32 36, float %405, float %252)  ; FMin(a,b)
  %407 = mul i32 %153, %150
  %408 = mul i32 %153, %151
  %409 = add i32 %407, %76
  %410 = add i32 %408, %78
  %411 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %412 = extractvalue %dx.types.CBufRet.f32 %411, 0
  %413 = fmul fast float %412, %178
  %414 = extractvalue %dx.types.CBufRet.f32 %411, 1
  %415 = fadd fast float %413, %414
  %416 = call float @dx.op.unary.f32(i32 23, float %415)  ; Log(value)
  %417 = extractvalue %dx.types.CBufRet.f32 %411, 2
  %418 = fmul fast float %417, %416
  %419 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %418)  ; FMax(a,b)
  %420 = fptoui float %419 to i32
  %421 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %422 = extractvalue %dx.types.CBufRet.i32 %421, 2
  %423 = add i32 %422, -1
  %424 = call i32 @dx.op.binary.i32(i32 40, i32 %420, i32 %423)  ; UMin(a,b)
  %425 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %426 = extractvalue %dx.types.CBufRet.i32 %425, 2
  %427 = and i32 %426, 31
  %428 = lshr i32 %146, %427
  %429 = lshr i32 %148, %427
  %430 = extractvalue %dx.types.CBufRet.i32 %421, 1
  %431 = mul i32 %430, %424
  %432 = add i32 %431, %429
  %433 = extractvalue %dx.types.CBufRet.i32 %421, 0
  %434 = mul i32 %432, %433
  %435 = add i32 %434, %428
  %436 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %437 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %436, i32 %435, i32 undef)  ; BufferLoad(srv,index,wot)
  %438 = extractvalue %dx.types.ResRet.i32 %437, 0
  %439 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %440 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %439, i32 %435, i32 undef)  ; BufferLoad(srv,index,wot)
  %441 = extractvalue %dx.types.ResRet.i32 %440, 0
  %442 = fcmp fast ogt float %406, %404
  br i1 %442, label %443, label %2213

; <label>:443                                     ; preds = %386
  %444 = icmp eq i32 %438, 0
  br i1 %444, label %782, label %445

; <label>:445                                     ; preds = %443
  br label %446

; <label>:446                                     ; preds = %776, %445
  %447 = phi i32 [ %779, %776 ], [ 0, %445 ]
  %448 = phi i32 [ %777, %776 ], [ 0, %445 ]
  %449 = phi float [ %778, %776 ], [ %406, %445 ]
  %450 = add i32 %447, %441
  %451 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %452 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %451, i32 %450, i32 undef)  ; BufferLoad(srv,index,wot)
  %453 = extractvalue %dx.types.ResRet.i32 %452, 0
  %454 = uitofp i32 %409 to float
  %455 = uitofp i32 %410 to float
  %456 = mul i32 %453, 10
  %457 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %458 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %457, i32 %456, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %459 = extractvalue %dx.types.ResRet.f32 %458, 0
  %460 = extractvalue %dx.types.ResRet.f32 %458, 1
  %461 = extractvalue %dx.types.ResRet.f32 %458, 2
  %462 = or i32 %456, 1
  %463 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %457, i32 %462, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %464 = extractvalue %dx.types.ResRet.f32 %463, 0
  %465 = extractvalue %dx.types.ResRet.f32 %463, 1
  %466 = extractvalue %dx.types.ResRet.f32 %463, 2
  %467 = extractvalue %dx.types.ResRet.f32 %463, 3
  %468 = add i32 %456, 2
  %469 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %457, i32 %468, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %470 = extractvalue %dx.types.ResRet.f32 %469, 0
  %471 = extractvalue %dx.types.ResRet.f32 %469, 1
  %472 = extractvalue %dx.types.ResRet.f32 %469, 2
  %473 = extractvalue %dx.types.ResRet.f32 %469, 3
  %474 = add i32 %456, 3
  %475 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %457, i32 %474, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %476 = extractvalue %dx.types.ResRet.f32 %475, 0
  %477 = extractvalue %dx.types.ResRet.f32 %475, 1
  %478 = extractvalue %dx.types.ResRet.f32 %475, 2
  %479 = extractvalue %dx.types.ResRet.f32 %475, 3
  %480 = add i32 %456, 4
  %481 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %457, i32 %480, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %482 = extractvalue %dx.types.ResRet.f32 %481, 0
  %483 = extractvalue %dx.types.ResRet.f32 %481, 1
  %484 = extractvalue %dx.types.ResRet.f32 %481, 2
  %485 = extractvalue %dx.types.ResRet.f32 %481, 3
  %486 = call float @dx.op.unary.f32(i32 6, float %485)  ; FAbs(value)
  %487 = fcmp fast olt float %485, 0.000000e+00
  %488 = add i32 %456, 9
  %489 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %457, i32 %488, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %490 = extractvalue %dx.types.ResRet.f32 %489, 0
  %491 = extractvalue %dx.types.ResRet.f32 %489, 1
  %492 = extractvalue %dx.types.ResRet.f32 %489, 2
  %493 = extractvalue %dx.types.ResRet.f32 %489, 3
  %494 = bitcast float %493 to i32
  %495 = fmul fast float %459, -2.097152e+06
  %496 = fmul fast float %460, -2.097152e+06
  %497 = fmul fast float %461, -2.097152e+06
  %498 = fmul fast float %464, %495
  %499 = call float @dx.op.tertiary.f32(i32 46, float %496, float %465, float %498)  ; FMad(a,b,c)
  %500 = call float @dx.op.tertiary.f32(i32 46, float %497, float %466, float %499)  ; FMad(a,b,c)
  %501 = fadd fast float %500, %467
  %502 = fmul fast float %470, %495
  %503 = call float @dx.op.tertiary.f32(i32 46, float %496, float %471, float %502)  ; FMad(a,b,c)
  %504 = call float @dx.op.tertiary.f32(i32 46, float %497, float %472, float %503)  ; FMad(a,b,c)
  %505 = fadd fast float %504, %473
  %506 = fmul fast float %476, %495
  %507 = call float @dx.op.tertiary.f32(i32 46, float %496, float %477, float %506)  ; FMad(a,b,c)
  %508 = call float @dx.op.tertiary.f32(i32 46, float %497, float %478, float %507)  ; FMad(a,b,c)
  %509 = fadd fast float %508, %479
  br i1 %487, label %513, label %510

; <label>:510                                     ; preds = %446
  %511 = fadd fast float %486, %449
  %512 = call float @dx.op.binary.f32(i32 36, float %406, float %511)  ; FMin(a,b)
  br label %513

; <label>:513                                     ; preds = %510, %446
  %514 = phi float [ %406, %446 ], [ %512, %510 ]
  %515 = fmul fast float %514, %321
  %516 = fmul fast float %514, %331
  %517 = fmul fast float %514, %339
  %518 = fadd fast float %515, %396
  %519 = fadd fast float %516, %397
  %520 = fadd fast float %517, %398
  %521 = fmul fast float %464, %396
  %522 = call float @dx.op.tertiary.f32(i32 46, float %397, float %465, float %521)  ; FMad(a,b,c)
  %523 = call float @dx.op.tertiary.f32(i32 46, float %398, float %466, float %522)  ; FMad(a,b,c)
  %524 = fadd fast float %501, %523
  %525 = fmul fast float %470, %396
  %526 = call float @dx.op.tertiary.f32(i32 46, float %397, float %471, float %525)  ; FMad(a,b,c)
  %527 = call float @dx.op.tertiary.f32(i32 46, float %398, float %472, float %526)  ; FMad(a,b,c)
  %528 = fadd fast float %505, %527
  %529 = fmul fast float %476, %396
  %530 = call float @dx.op.tertiary.f32(i32 46, float %397, float %477, float %529)  ; FMad(a,b,c)
  %531 = call float @dx.op.tertiary.f32(i32 46, float %398, float %478, float %530)  ; FMad(a,b,c)
  %532 = fadd fast float %509, %531
  %533 = fmul fast float %518, %464
  %534 = call float @dx.op.tertiary.f32(i32 46, float %519, float %465, float %533)  ; FMad(a,b,c)
  %535 = call float @dx.op.tertiary.f32(i32 46, float %520, float %466, float %534)  ; FMad(a,b,c)
  %536 = fmul fast float %518, %470
  %537 = call float @dx.op.tertiary.f32(i32 46, float %519, float %471, float %536)  ; FMad(a,b,c)
  %538 = call float @dx.op.tertiary.f32(i32 46, float %520, float %472, float %537)  ; FMad(a,b,c)
  %539 = fmul fast float %518, %476
  %540 = call float @dx.op.tertiary.f32(i32 46, float %519, float %477, float %539)  ; FMad(a,b,c)
  %541 = call float @dx.op.tertiary.f32(i32 46, float %520, float %478, float %540)  ; FMad(a,b,c)
  %542 = fsub fast float %535, %523
  %543 = fsub fast float %538, %527
  %544 = fsub fast float %541, %531
  %545 = fmul fast float %542, %542
  %546 = fmul fast float %543, %543
  %547 = fadd fast float %546, %545
  %548 = fmul fast float %544, %544
  %549 = fadd fast float %547, %548
  %550 = call float @dx.op.unary.f32(i32 24, float %549)  ; Sqrt(value)
  %551 = fdiv fast float %404, %514
  %552 = fmul fast float %551, %550
  %553 = fdiv fast float %542, %550
  %554 = fdiv fast float %543, %550
  %555 = fdiv fast float %544, %550
  %556 = fsub fast float -0.000000e+00, %482
  %557 = fsub fast float -0.000000e+00, %483
  %558 = fsub fast float -0.000000e+00, %484
  %559 = fdiv fast float 1.000000e+00, %542
  %560 = fdiv fast float 1.000000e+00, %543
  %561 = fdiv fast float 1.000000e+00, %544
  %562 = fsub fast float %556, %524
  %563 = fsub fast float %557, %528
  %564 = fsub fast float %558, %532
  %565 = fmul fast float %559, %562
  %566 = fmul fast float %560, %563
  %567 = fmul fast float %561, %564
  %568 = fsub fast float %482, %524
  %569 = fsub fast float %483, %528
  %570 = fsub fast float %484, %532
  %571 = fmul fast float %559, %568
  %572 = fmul fast float %560, %569
  %573 = fmul fast float %561, %570
  %574 = call float @dx.op.binary.f32(i32 36, float %565, float %571)  ; FMin(a,b)
  %575 = call float @dx.op.binary.f32(i32 36, float %566, float %572)  ; FMin(a,b)
  %576 = call float @dx.op.binary.f32(i32 36, float %567, float %573)  ; FMin(a,b)
  %577 = call float @dx.op.binary.f32(i32 35, float %565, float %571)  ; FMax(a,b)
  %578 = call float @dx.op.binary.f32(i32 35, float %566, float %572)  ; FMax(a,b)
  %579 = call float @dx.op.binary.f32(i32 35, float %567, float %573)  ; FMax(a,b)
  %580 = call float @dx.op.binary.f32(i32 35, float %575, float %576)  ; FMax(a,b)
  %581 = call float @dx.op.binary.f32(i32 35, float %574, float %580)  ; FMax(a,b)
  %582 = call float @dx.op.binary.f32(i32 36, float %578, float %579)  ; FMin(a,b)
  %583 = call float @dx.op.binary.f32(i32 36, float %577, float %582)  ; FMin(a,b)
  %584 = call float @dx.op.unary.f32(i32 7, float %581)  ; Saturate(value)
  %585 = call float @dx.op.unary.f32(i32 7, float %583)  ; Saturate(value)
  %586 = fmul fast float %584, %550
  %587 = fmul fast float %585, %550
  %588 = call float @dx.op.binary.f32(i32 35, float %586, float %552)  ; FMax(a,b)
  %589 = fcmp fast olt float %588, %587
  br i1 %589, label %590, label %776, !dx.controlflow.hints !70

; <label>:590                                     ; preds = %513
  %591 = mul i32 %494, 9
  %592 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %593 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %592, i32 %591, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %594 = extractvalue %dx.types.ResRet.f32 %593, 0
  %595 = bitcast float %594 to i32
  %596 = lshr i32 %595, 30
  %597 = mul nuw nsw i32 %596, 3
  %598 = add i32 %591, -3
  %599 = add i32 %598, %597
  %600 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %592, i32 %599, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %601 = extractvalue %dx.types.ResRet.f32 %600, 0
  %602 = extractvalue %dx.types.ResRet.f32 %600, 1
  %603 = bitcast float %601 to i32
  %604 = bitcast float %602 to i32
  %605 = add i32 %599, 1
  %606 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %592, i32 %605, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %607 = extractvalue %dx.types.ResRet.f32 %606, 0
  %608 = extractvalue %dx.types.ResRet.f32 %606, 1
  %609 = extractvalue %dx.types.ResRet.f32 %606, 2
  %610 = extractvalue %dx.types.ResRet.f32 %606, 3
  %611 = add i32 %599, 2
  %612 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %592, i32 %611, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %613 = extractvalue %dx.types.ResRet.f32 %612, 0
  %614 = extractvalue %dx.types.ResRet.f32 %612, 1
  %615 = extractvalue %dx.types.ResRet.f32 %612, 2
  %616 = extractvalue %dx.types.ResRet.f32 %612, 3
  %617 = and i32 %603, 1023
  %618 = lshr i32 %603, 10
  %619 = and i32 %618, 1023
  %620 = select i1 %487, float 0.000000e+00, float 1.000000e+00
  %621 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %622 = extractvalue %dx.types.CBufRet.f32 %621, 0
  %623 = fsub fast float 1.000000e+00, %622
  %624 = fmul fast float %623, %620
  %625 = fadd fast float %624, %622
  br label %626

; <label>:626                                     ; preds = %750, %590
  %627 = phi float [ %588, %590 ], [ %747, %750 ]
  %628 = phi i32 [ 0, %590 ], [ %751, %750 ]
  %629 = fmul fast float %627, %553
  %630 = fmul fast float %627, %554
  %631 = fmul fast float %627, %555
  %632 = fadd fast float %629, %524
  %633 = fadd fast float %630, %528
  %634 = fadd fast float %631, %532
  %635 = fmul fast float %632, %607
  %636 = fmul fast float %633, %608
  %637 = fmul fast float %634, %609
  %638 = fadd fast float %635, %613
  %639 = fadd fast float %636, %614
  %640 = fadd fast float %637, %615
  %641 = fptosi float %638 to i32
  %642 = fptosi float %639 to i32
  %643 = fptosi float %640 to i32
  %644 = mul i32 %643, %619
  %645 = add i32 %644, %642
  %646 = mul i32 %645, %617
  %647 = add i32 %641, %604
  %648 = add i32 %647, %646
  %649 = shl i32 %648, 2
  %650 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %651 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %650, i32 %649, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %652 = extractvalue %dx.types.ResRet.i32 %651, 0
  %653 = icmp eq i32 %652, -1
  br i1 %653, label %706, label %654

; <label>:654                                     ; preds = %626
  %655 = sitofp i32 %641 to float
  %656 = sitofp i32 %642 to float
  %657 = sitofp i32 %643 to float
  %658 = fsub fast float %638, %655
  %659 = fsub fast float %639, %656
  %660 = fsub fast float %640, %657
  %661 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %662 = extractvalue %dx.types.CBufRet.i32 %661, 0
  %663 = and i32 %662, %652
  %664 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %665 = extractvalue %dx.types.CBufRet.i32 %664, 0
  %666 = and i32 %665, 31
  %667 = lshr i32 %652, %666
  %668 = extractvalue %dx.types.CBufRet.i32 %661, 1
  %669 = and i32 %667, %668
  %670 = extractvalue %dx.types.CBufRet.i32 %664, 1
  %671 = add i32 %670, %665
  %672 = and i32 %671, 31
  %673 = lshr i32 %652, %672
  %674 = uitofp i32 %663 to float
  %675 = uitofp i32 %669 to float
  %676 = uitofp i32 %673 to float
  %677 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %678 = extractvalue %dx.types.CBufRet.f32 %677, 0
  %679 = extractvalue %dx.types.CBufRet.f32 %677, 1
  %680 = extractvalue %dx.types.CBufRet.f32 %677, 2
  %681 = fmul fast float %678, %674
  %682 = fmul fast float %675, %679
  %683 = fmul fast float %676, %680
  %684 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %685 = extractvalue %dx.types.CBufRet.f32 %684, 0
  %686 = extractvalue %dx.types.CBufRet.f32 %684, 1
  %687 = extractvalue %dx.types.CBufRet.f32 %684, 2
  %688 = fmul fast float %685, %658
  %689 = fmul fast float %686, %659
  %690 = fmul fast float %687, %660
  %691 = fadd fast float %688, %681
  %692 = fadd fast float %689, %682
  %693 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %694 = extractvalue %dx.types.CBufRet.f32 %693, 0
  %695 = extractvalue %dx.types.CBufRet.f32 %693, 1
  %696 = extractvalue %dx.types.CBufRet.f32 %693, 2
  %697 = fadd fast float %691, %694
  %698 = fadd fast float %692, %695
  %699 = fadd fast float %696, %690
  %700 = fadd fast float %699, %683
  %701 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %702 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %703 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %701, %dx.types.Handle %702, float %697, float %698, float %700, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %704 = extractvalue %dx.types.ResRet.f32 %703, 0
  %705 = fmul fast float %704, %610
  br label %706

; <label>:706                                     ; preds = %654, %626
  %707 = phi float [ %705, %654 ], [ %610, %626 ]
  %708 = fadd float %616, %707
  %709 = fmul fast float %486, 2.000000e+00
  %710 = fdiv fast float %627, %709
  %711 = call float @dx.op.unary.f32(i32 7, float %710)  ; Saturate(value)
  %712 = fmul fast float %625, %486
  %713 = fmul fast float %712, %711
  %714 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %715 = extractvalue %dx.types.CBufRet.i32 %714, 1
  %716 = shl i32 %715, 6
  %717 = add i32 %716, %628
  %718 = uitofp i32 %717 to float
  %719 = fcmp fast olt float %708, %713
  br i1 %719, label %720, label %739

; <label>:720                                     ; preds = %706
  %721 = fmul fast float %718, 0x4040551EC0000000
  %722 = fadd fast float %721, %454
  %723 = fmul fast float %718, 0x4027A147A0000000
  %724 = fadd fast float %723, %455
  %725 = call float @dx.op.dot2.f32(i32 54, float %722, float %724, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %726 = call float @dx.op.unary.f32(i32 22, float %725)  ; Frc(value)
  %727 = fmul fast float %726, 0x404A7DD040000000
  %728 = call float @dx.op.unary.f32(i32 22, float %727)  ; Frc(value)
  %729 = fsub fast float 1.000000e+00, %620
  %730 = fmul fast float %728, %729
  %731 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %732 = extractvalue %dx.types.CBufRet.f32 %731, 2
  %733 = fcmp fast ugt float %730, %732
  br i1 %733, label %739, label %734

; <label>:734                                     ; preds = %720
  %735 = fadd fast float %708, %627
  %736 = fsub fast float %735, %713
  %737 = call float @dx.op.binary.f32(i32 35, float %736, float %588)  ; FMax(a,b)
  %738 = call float @dx.op.binary.f32(i32 36, float %737, float %587)  ; FMin(a,b)
  br label %755

; <label>:739                                     ; preds = %720, %706
  %740 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %741 = extractvalue %dx.types.CBufRet.f32 %740, 1
  %742 = fsub fast float 1.000000e+00, %741
  %743 = fmul fast float %742, %620
  %744 = fadd fast float %743, %741
  %745 = fmul fast float %744, 9.765625e-04
  %746 = call float @dx.op.binary.f32(i32 35, float %708, float %745)  ; FMax(a,b)
  %747 = fadd fast float %746, %627
  %748 = fadd fast float %713, %587
  %749 = fcmp fast ogt float %747, %748
  br i1 %749, label %753, label %750

; <label>:750                                     ; preds = %739
  %751 = add nuw nsw i32 %628, 1
  %752 = icmp ult i32 %751, 64
  br i1 %752, label %626, label %753, !llvm.loop !71

; <label>:753                                     ; preds = %750, %739
  %754 = phi i32 [ %751, %750 ], [ %628, %739 ]
  br label %755

; <label>:755                                     ; preds = %753, %734
  %756 = phi float [ %738, %734 ], [ %747, %753 ]
  %757 = phi i32 [ %628, %734 ], [ %754, %753 ]
  %758 = phi i1 [ true, %734 ], [ false, %753 ]
  %759 = icmp eq i32 %757, 64
  %760 = or i1 %759, %758
  br i1 %760, label %761, label %776

; <label>:761                                     ; preds = %755
  %762 = fmul fast float %553, %490
  %763 = fmul fast float %762, %756
  %764 = fmul fast float %554, %491
  %765 = fmul fast float %764, %756
  %766 = fmul fast float %555, %492
  %767 = fmul fast float %766, %756
  %768 = fmul fast float %763, %763
  %769 = fmul fast float %765, %765
  %770 = fadd fast float %768, %769
  %771 = fmul fast float %767, %767
  %772 = fadd fast float %770, %771
  %773 = call float @dx.op.unary.f32(i32 24, float %772)  ; Sqrt(value)
  %774 = fcmp fast olt float %773, %449
  br i1 %774, label %775, label %776

; <label>:775                                     ; preds = %761
  br label %776

; <label>:776                                     ; preds = %775, %761, %755, %513
  %777 = phi i32 [ %453, %775 ], [ %448, %761 ], [ %448, %755 ], [ %448, %513 ]
  %778 = phi float [ %773, %775 ], [ %449, %761 ], [ %449, %755 ], [ %449, %513 ]
  %779 = add nuw i32 %447, 1
  %780 = icmp eq i32 %779, %438
  br i1 %780, label %781, label %446

; <label>:781                                     ; preds = %776
  br label %782

; <label>:782                                     ; preds = %781, %443
  %783 = phi i32 [ 0, %443 ], [ %777, %781 ]
  %784 = phi float [ %406, %443 ], [ %778, %781 ]
  %785 = fcmp fast olt float %784, %406
  br i1 %785, label %786, label %2213

; <label>:786                                     ; preds = %782
  %787 = mul i32 %783, 10
  %788 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %789 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %788, i32 %787, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %790 = extractvalue %dx.types.ResRet.f32 %789, 0
  %791 = extractvalue %dx.types.ResRet.f32 %789, 1
  %792 = extractvalue %dx.types.ResRet.f32 %789, 2
  %793 = or i32 %787, 1
  %794 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %788, i32 %793, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %795 = extractvalue %dx.types.ResRet.f32 %794, 0
  %796 = extractvalue %dx.types.ResRet.f32 %794, 1
  %797 = extractvalue %dx.types.ResRet.f32 %794, 2
  %798 = extractvalue %dx.types.ResRet.f32 %794, 3
  %799 = add i32 %787, 2
  %800 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %788, i32 %799, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %801 = extractvalue %dx.types.ResRet.f32 %800, 0
  %802 = extractvalue %dx.types.ResRet.f32 %800, 1
  %803 = extractvalue %dx.types.ResRet.f32 %800, 2
  %804 = extractvalue %dx.types.ResRet.f32 %800, 3
  %805 = add i32 %787, 3
  %806 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %788, i32 %805, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %807 = extractvalue %dx.types.ResRet.f32 %806, 0
  %808 = extractvalue %dx.types.ResRet.f32 %806, 1
  %809 = extractvalue %dx.types.ResRet.f32 %806, 2
  %810 = extractvalue %dx.types.ResRet.f32 %806, 3
  %811 = add i32 %787, 4
  %812 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %788, i32 %811, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %813 = extractvalue %dx.types.ResRet.f32 %812, 0
  %814 = extractvalue %dx.types.ResRet.f32 %812, 1
  %815 = extractvalue %dx.types.ResRet.f32 %812, 2
  %816 = add i32 %787, 5
  %817 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %788, i32 %816, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %818 = extractvalue %dx.types.ResRet.f32 %817, 3
  %819 = bitcast float %818 to i32
  %820 = add i32 %787, 9
  %821 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %788, i32 %820, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %822 = extractvalue %dx.types.ResRet.f32 %821, 3
  %823 = bitcast float %822 to i32
  %824 = fmul fast float %790, -2.097152e+06
  %825 = fmul fast float %791, -2.097152e+06
  %826 = fmul fast float %792, -2.097152e+06
  %827 = fmul fast float %795, %824
  %828 = call float @dx.op.tertiary.f32(i32 46, float %825, float %796, float %827)  ; FMad(a,b,c)
  %829 = call float @dx.op.tertiary.f32(i32 46, float %826, float %797, float %828)  ; FMad(a,b,c)
  %830 = fadd fast float %829, %798
  %831 = fmul fast float %801, %824
  %832 = call float @dx.op.tertiary.f32(i32 46, float %825, float %802, float %831)  ; FMad(a,b,c)
  %833 = call float @dx.op.tertiary.f32(i32 46, float %826, float %803, float %832)  ; FMad(a,b,c)
  %834 = fadd fast float %833, %804
  %835 = fmul fast float %807, %824
  %836 = call float @dx.op.tertiary.f32(i32 46, float %825, float %808, float %835)  ; FMad(a,b,c)
  %837 = call float @dx.op.tertiary.f32(i32 46, float %826, float %809, float %836)  ; FMad(a,b,c)
  %838 = fadd fast float %837, %810
  %839 = fmul fast float %784, %321
  %840 = fmul fast float %784, %331
  %841 = fmul fast float %784, %339
  %842 = fadd fast float %839, %396
  %843 = fadd fast float %840, %397
  %844 = fadd fast float %841, %398
  %845 = fmul fast float %795, %842
  %846 = call float @dx.op.tertiary.f32(i32 46, float %843, float %796, float %845)  ; FMad(a,b,c)
  %847 = call float @dx.op.tertiary.f32(i32 46, float %844, float %797, float %846)  ; FMad(a,b,c)
  %848 = fadd fast float %830, %847
  %849 = fmul fast float %801, %842
  %850 = call float @dx.op.tertiary.f32(i32 46, float %843, float %802, float %849)  ; FMad(a,b,c)
  %851 = call float @dx.op.tertiary.f32(i32 46, float %844, float %803, float %850)  ; FMad(a,b,c)
  %852 = fadd fast float %834, %851
  %853 = fmul fast float %807, %842
  %854 = call float @dx.op.tertiary.f32(i32 46, float %843, float %808, float %853)  ; FMad(a,b,c)
  %855 = call float @dx.op.tertiary.f32(i32 46, float %844, float %809, float %854)  ; FMad(a,b,c)
  %856 = fadd fast float %838, %855
  %857 = fsub fast float -0.000000e+00, %813
  %858 = fsub fast float -0.000000e+00, %814
  %859 = fsub fast float -0.000000e+00, %815
  %860 = call float @dx.op.binary.f32(i32 35, float %848, float %857)  ; FMax(a,b)
  %861 = call float @dx.op.binary.f32(i32 35, float %852, float %858)  ; FMax(a,b)
  %862 = call float @dx.op.binary.f32(i32 35, float %856, float %859)  ; FMax(a,b)
  %863 = call float @dx.op.binary.f32(i32 36, float %860, float %813)  ; FMin(a,b)
  %864 = call float @dx.op.binary.f32(i32 36, float %861, float %814)  ; FMin(a,b)
  %865 = call float @dx.op.binary.f32(i32 36, float %862, float %815)  ; FMin(a,b)
  %866 = mul i32 %823, 9
  %867 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %868 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %867, i32 %866, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %869 = extractvalue %dx.types.ResRet.f32 %868, 0
  %870 = bitcast float %869 to i32
  %871 = lshr i32 %870, 30
  %872 = mul nuw nsw i32 %871, 3
  %873 = add i32 %866, -3
  %874 = add i32 %873, %872
  %875 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %867, i32 %874, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %876 = extractvalue %dx.types.ResRet.f32 %875, 0
  %877 = extractvalue %dx.types.ResRet.f32 %875, 1
  %878 = bitcast float %876 to i32
  %879 = bitcast float %877 to i32
  %880 = add i32 %874, 1
  %881 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %867, i32 %880, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %882 = extractvalue %dx.types.ResRet.f32 %881, 0
  %883 = extractvalue %dx.types.ResRet.f32 %881, 1
  %884 = extractvalue %dx.types.ResRet.f32 %881, 2
  %885 = extractvalue %dx.types.ResRet.f32 %881, 3
  %886 = add i32 %874, 2
  %887 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %867, i32 %886, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %888 = extractvalue %dx.types.ResRet.f32 %887, 0
  %889 = extractvalue %dx.types.ResRet.f32 %887, 1
  %890 = extractvalue %dx.types.ResRet.f32 %887, 2
  %891 = and i32 %878, 1023
  %892 = lshr i32 %878, 10
  %893 = and i32 %892, 1023
  %894 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %895 = extractvalue %dx.types.CBufRet.f32 %894, 0
  %896 = extractvalue %dx.types.CBufRet.f32 %894, 1
  %897 = extractvalue %dx.types.CBufRet.f32 %894, 2
  %898 = fmul fast float %895, %882
  %899 = fmul fast float %896, %883
  %900 = fmul fast float %897, %884
  %901 = fdiv fast float 5.000000e-01, %898
  %902 = fdiv fast float 5.000000e-01, %899
  %903 = fdiv fast float 5.000000e-01, %900
  %904 = fadd fast float %901, %863
  %905 = fmul fast float %904, %882
  %906 = fmul fast float %883, %864
  %907 = fmul fast float %884, %865
  %908 = fadd fast float %905, %888
  %909 = fadd fast float %889, %906
  %910 = fadd fast float %890, %907
  %911 = fptosi float %908 to i32
  %912 = fptosi float %909 to i32
  %913 = fptosi float %910 to i32
  %914 = mul i32 %913, %893
  %915 = add i32 %914, %912
  %916 = mul i32 %915, %891
  %917 = add i32 %911, %879
  %918 = add i32 %917, %916
  %919 = shl i32 %918, 2
  %920 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %921 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %920, i32 %919, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %922 = extractvalue %dx.types.ResRet.i32 %921, 0
  %923 = icmp eq i32 %922, -1
  br i1 %923, label %976, label %924

; <label>:924                                     ; preds = %786
  %925 = sitofp i32 %911 to float
  %926 = sitofp i32 %912 to float
  %927 = sitofp i32 %913 to float
  %928 = fsub fast float %908, %925
  %929 = fsub fast float %909, %926
  %930 = fsub fast float %910, %927
  %931 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %932 = extractvalue %dx.types.CBufRet.i32 %931, 0
  %933 = and i32 %932, %922
  %934 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %935 = extractvalue %dx.types.CBufRet.i32 %934, 0
  %936 = and i32 %935, 31
  %937 = lshr i32 %922, %936
  %938 = extractvalue %dx.types.CBufRet.i32 %931, 1
  %939 = and i32 %937, %938
  %940 = extractvalue %dx.types.CBufRet.i32 %934, 1
  %941 = add i32 %940, %935
  %942 = and i32 %941, 31
  %943 = lshr i32 %922, %942
  %944 = uitofp i32 %933 to float
  %945 = uitofp i32 %939 to float
  %946 = uitofp i32 %943 to float
  %947 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %948 = extractvalue %dx.types.CBufRet.f32 %947, 0
  %949 = extractvalue %dx.types.CBufRet.f32 %947, 1
  %950 = extractvalue %dx.types.CBufRet.f32 %947, 2
  %951 = fmul fast float %948, %944
  %952 = fmul fast float %945, %949
  %953 = fmul fast float %946, %950
  %954 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %955 = extractvalue %dx.types.CBufRet.f32 %954, 0
  %956 = extractvalue %dx.types.CBufRet.f32 %954, 1
  %957 = extractvalue %dx.types.CBufRet.f32 %954, 2
  %958 = fmul fast float %955, %928
  %959 = fmul fast float %956, %929
  %960 = fmul fast float %957, %930
  %961 = fadd fast float %958, %951
  %962 = fadd fast float %959, %952
  %963 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %964 = extractvalue %dx.types.CBufRet.f32 %963, 0
  %965 = extractvalue %dx.types.CBufRet.f32 %963, 1
  %966 = extractvalue %dx.types.CBufRet.f32 %963, 2
  %967 = fadd fast float %961, %964
  %968 = fadd fast float %962, %965
  %969 = fadd fast float %966, %960
  %970 = fadd fast float %969, %953
  %971 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %972 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %973 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %971, %dx.types.Handle %972, float %967, float %968, float %970, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %974 = extractvalue %dx.types.ResRet.f32 %973, 0
  %975 = fmul fast float %974, %885
  br label %976

; <label>:976                                     ; preds = %924, %786
  %977 = phi float [ %975, %924 ], [ %885, %786 ]
  %978 = fsub fast float %863, %901
  %979 = fmul fast float %978, %882
  %980 = fadd fast float %979, %888
  %981 = fptosi float %980 to i32
  %982 = add i32 %981, %879
  %983 = add i32 %982, %916
  %984 = shl i32 %983, 2
  %985 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %920, i32 %984, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %986 = extractvalue %dx.types.ResRet.i32 %985, 0
  %987 = icmp eq i32 %986, -1
  br i1 %987, label %1040, label %988

; <label>:988                                     ; preds = %976
  %989 = sitofp i32 %981 to float
  %990 = sitofp i32 %912 to float
  %991 = sitofp i32 %913 to float
  %992 = fsub fast float %980, %989
  %993 = fsub fast float %909, %990
  %994 = fsub fast float %910, %991
  %995 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %996 = extractvalue %dx.types.CBufRet.i32 %995, 0
  %997 = and i32 %996, %986
  %998 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %999 = extractvalue %dx.types.CBufRet.i32 %998, 0
  %1000 = and i32 %999, 31
  %1001 = lshr i32 %986, %1000
  %1002 = extractvalue %dx.types.CBufRet.i32 %995, 1
  %1003 = and i32 %1001, %1002
  %1004 = extractvalue %dx.types.CBufRet.i32 %998, 1
  %1005 = add i32 %1004, %999
  %1006 = and i32 %1005, 31
  %1007 = lshr i32 %986, %1006
  %1008 = uitofp i32 %997 to float
  %1009 = uitofp i32 %1003 to float
  %1010 = uitofp i32 %1007 to float
  %1011 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1012 = extractvalue %dx.types.CBufRet.f32 %1011, 0
  %1013 = extractvalue %dx.types.CBufRet.f32 %1011, 1
  %1014 = extractvalue %dx.types.CBufRet.f32 %1011, 2
  %1015 = fmul fast float %1012, %1008
  %1016 = fmul fast float %1009, %1013
  %1017 = fmul fast float %1010, %1014
  %1018 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1019 = extractvalue %dx.types.CBufRet.f32 %1018, 0
  %1020 = extractvalue %dx.types.CBufRet.f32 %1018, 1
  %1021 = extractvalue %dx.types.CBufRet.f32 %1018, 2
  %1022 = fmul fast float %1019, %992
  %1023 = fmul fast float %1020, %993
  %1024 = fmul fast float %1021, %994
  %1025 = fadd fast float %1022, %1015
  %1026 = fadd fast float %1023, %1016
  %1027 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1028 = extractvalue %dx.types.CBufRet.f32 %1027, 0
  %1029 = extractvalue %dx.types.CBufRet.f32 %1027, 1
  %1030 = extractvalue %dx.types.CBufRet.f32 %1027, 2
  %1031 = fadd fast float %1025, %1028
  %1032 = fadd fast float %1026, %1029
  %1033 = fadd fast float %1030, %1024
  %1034 = fadd fast float %1033, %1017
  %1035 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1036 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1037 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1035, %dx.types.Handle %1036, float %1031, float %1032, float %1034, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1038 = extractvalue %dx.types.ResRet.f32 %1037, 0
  %1039 = fmul fast float %1038, %885
  br label %1040

; <label>:1040                                    ; preds = %988, %976
  %1041 = phi float [ %1039, %988 ], [ %885, %976 ]
  %1042 = fadd fast float %902, %864
  %1043 = fmul fast float %882, %863
  %1044 = fmul fast float %1042, %883
  %1045 = fadd fast float %888, %1043
  %1046 = fadd fast float %1044, %889
  %1047 = fptosi float %1045 to i32
  %1048 = fptosi float %1046 to i32
  %1049 = add i32 %1048, %914
  %1050 = mul i32 %1049, %891
  %1051 = add i32 %1047, %879
  %1052 = add i32 %1051, %1050
  %1053 = shl i32 %1052, 2
  %1054 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %920, i32 %1053, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1055 = extractvalue %dx.types.ResRet.i32 %1054, 0
  %1056 = icmp eq i32 %1055, -1
  br i1 %1056, label %1109, label %1057

; <label>:1057                                    ; preds = %1040
  %1058 = sitofp i32 %1047 to float
  %1059 = sitofp i32 %1048 to float
  %1060 = sitofp i32 %913 to float
  %1061 = fsub fast float %1045, %1058
  %1062 = fsub fast float %1046, %1059
  %1063 = fsub fast float %910, %1060
  %1064 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %1065 = extractvalue %dx.types.CBufRet.i32 %1064, 0
  %1066 = and i32 %1065, %1055
  %1067 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %1068 = extractvalue %dx.types.CBufRet.i32 %1067, 0
  %1069 = and i32 %1068, 31
  %1070 = lshr i32 %1055, %1069
  %1071 = extractvalue %dx.types.CBufRet.i32 %1064, 1
  %1072 = and i32 %1070, %1071
  %1073 = extractvalue %dx.types.CBufRet.i32 %1067, 1
  %1074 = add i32 %1073, %1068
  %1075 = and i32 %1074, 31
  %1076 = lshr i32 %1055, %1075
  %1077 = uitofp i32 %1066 to float
  %1078 = uitofp i32 %1072 to float
  %1079 = uitofp i32 %1076 to float
  %1080 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1081 = extractvalue %dx.types.CBufRet.f32 %1080, 0
  %1082 = extractvalue %dx.types.CBufRet.f32 %1080, 1
  %1083 = extractvalue %dx.types.CBufRet.f32 %1080, 2
  %1084 = fmul fast float %1081, %1077
  %1085 = fmul fast float %1078, %1082
  %1086 = fmul fast float %1079, %1083
  %1087 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1088 = extractvalue %dx.types.CBufRet.f32 %1087, 0
  %1089 = extractvalue %dx.types.CBufRet.f32 %1087, 1
  %1090 = extractvalue %dx.types.CBufRet.f32 %1087, 2
  %1091 = fmul fast float %1088, %1061
  %1092 = fmul fast float %1089, %1062
  %1093 = fmul fast float %1090, %1063
  %1094 = fadd fast float %1091, %1084
  %1095 = fadd fast float %1092, %1085
  %1096 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1097 = extractvalue %dx.types.CBufRet.f32 %1096, 0
  %1098 = extractvalue %dx.types.CBufRet.f32 %1096, 1
  %1099 = extractvalue %dx.types.CBufRet.f32 %1096, 2
  %1100 = fadd fast float %1094, %1097
  %1101 = fadd fast float %1095, %1098
  %1102 = fadd fast float %1099, %1093
  %1103 = fadd fast float %1102, %1086
  %1104 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1105 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1106 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1104, %dx.types.Handle %1105, float %1100, float %1101, float %1103, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1107 = extractvalue %dx.types.ResRet.f32 %1106, 0
  %1108 = fmul fast float %1107, %885
  br label %1109

; <label>:1109                                    ; preds = %1057, %1040
  %1110 = phi float [ %1108, %1057 ], [ %885, %1040 ]
  %1111 = fsub fast float %864, %902
  %1112 = fmul fast float %1111, %883
  %1113 = fadd fast float %1112, %889
  %1114 = fptosi float %1113 to i32
  %1115 = add i32 %1114, %914
  %1116 = mul i32 %1115, %891
  %1117 = add i32 %1051, %1116
  %1118 = shl i32 %1117, 2
  %1119 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %920, i32 %1118, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1120 = extractvalue %dx.types.ResRet.i32 %1119, 0
  %1121 = icmp eq i32 %1120, -1
  br i1 %1121, label %1174, label %1122

; <label>:1122                                    ; preds = %1109
  %1123 = sitofp i32 %1047 to float
  %1124 = sitofp i32 %1114 to float
  %1125 = sitofp i32 %913 to float
  %1126 = fsub fast float %1045, %1123
  %1127 = fsub fast float %1113, %1124
  %1128 = fsub fast float %910, %1125
  %1129 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %1130 = extractvalue %dx.types.CBufRet.i32 %1129, 0
  %1131 = and i32 %1130, %1120
  %1132 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %1133 = extractvalue %dx.types.CBufRet.i32 %1132, 0
  %1134 = and i32 %1133, 31
  %1135 = lshr i32 %1120, %1134
  %1136 = extractvalue %dx.types.CBufRet.i32 %1129, 1
  %1137 = and i32 %1135, %1136
  %1138 = extractvalue %dx.types.CBufRet.i32 %1132, 1
  %1139 = add i32 %1138, %1133
  %1140 = and i32 %1139, 31
  %1141 = lshr i32 %1120, %1140
  %1142 = uitofp i32 %1131 to float
  %1143 = uitofp i32 %1137 to float
  %1144 = uitofp i32 %1141 to float
  %1145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1146 = extractvalue %dx.types.CBufRet.f32 %1145, 0
  %1147 = extractvalue %dx.types.CBufRet.f32 %1145, 1
  %1148 = extractvalue %dx.types.CBufRet.f32 %1145, 2
  %1149 = fmul fast float %1146, %1142
  %1150 = fmul fast float %1143, %1147
  %1151 = fmul fast float %1144, %1148
  %1152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1153 = extractvalue %dx.types.CBufRet.f32 %1152, 0
  %1154 = extractvalue %dx.types.CBufRet.f32 %1152, 1
  %1155 = extractvalue %dx.types.CBufRet.f32 %1152, 2
  %1156 = fmul fast float %1153, %1126
  %1157 = fmul fast float %1154, %1127
  %1158 = fmul fast float %1155, %1128
  %1159 = fadd fast float %1156, %1149
  %1160 = fadd fast float %1157, %1150
  %1161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1162 = extractvalue %dx.types.CBufRet.f32 %1161, 0
  %1163 = extractvalue %dx.types.CBufRet.f32 %1161, 1
  %1164 = extractvalue %dx.types.CBufRet.f32 %1161, 2
  %1165 = fadd fast float %1159, %1162
  %1166 = fadd fast float %1160, %1163
  %1167 = fadd fast float %1164, %1158
  %1168 = fadd fast float %1167, %1151
  %1169 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1170 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1171 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1169, %dx.types.Handle %1170, float %1165, float %1166, float %1168, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1172 = extractvalue %dx.types.ResRet.f32 %1171, 0
  %1173 = fmul fast float %1172, %885
  br label %1174

; <label>:1174                                    ; preds = %1122, %1109
  %1175 = phi float [ %1173, %1122 ], [ %885, %1109 ]
  %1176 = fadd fast float %903, %865
  %1177 = fmul fast float %1176, %884
  %1178 = fadd fast float %1177, %890
  %1179 = fptosi float %1178 to i32
  %1180 = mul i32 %1179, %893
  %1181 = add i32 %1180, %912
  %1182 = mul i32 %1181, %891
  %1183 = add i32 %1051, %1182
  %1184 = shl i32 %1183, 2
  %1185 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %920, i32 %1184, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1186 = extractvalue %dx.types.ResRet.i32 %1185, 0
  %1187 = icmp eq i32 %1186, -1
  br i1 %1187, label %1240, label %1188

; <label>:1188                                    ; preds = %1174
  %1189 = sitofp i32 %1047 to float
  %1190 = sitofp i32 %912 to float
  %1191 = sitofp i32 %1179 to float
  %1192 = fsub fast float %1045, %1189
  %1193 = fsub fast float %909, %1190
  %1194 = fsub fast float %1178, %1191
  %1195 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %1196 = extractvalue %dx.types.CBufRet.i32 %1195, 0
  %1197 = and i32 %1196, %1186
  %1198 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %1199 = extractvalue %dx.types.CBufRet.i32 %1198, 0
  %1200 = and i32 %1199, 31
  %1201 = lshr i32 %1186, %1200
  %1202 = extractvalue %dx.types.CBufRet.i32 %1195, 1
  %1203 = and i32 %1201, %1202
  %1204 = extractvalue %dx.types.CBufRet.i32 %1198, 1
  %1205 = add i32 %1204, %1199
  %1206 = and i32 %1205, 31
  %1207 = lshr i32 %1186, %1206
  %1208 = uitofp i32 %1197 to float
  %1209 = uitofp i32 %1203 to float
  %1210 = uitofp i32 %1207 to float
  %1211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1212 = extractvalue %dx.types.CBufRet.f32 %1211, 0
  %1213 = extractvalue %dx.types.CBufRet.f32 %1211, 1
  %1214 = extractvalue %dx.types.CBufRet.f32 %1211, 2
  %1215 = fmul fast float %1212, %1208
  %1216 = fmul fast float %1209, %1213
  %1217 = fmul fast float %1210, %1214
  %1218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1219 = extractvalue %dx.types.CBufRet.f32 %1218, 0
  %1220 = extractvalue %dx.types.CBufRet.f32 %1218, 1
  %1221 = extractvalue %dx.types.CBufRet.f32 %1218, 2
  %1222 = fmul fast float %1219, %1192
  %1223 = fmul fast float %1220, %1193
  %1224 = fmul fast float %1221, %1194
  %1225 = fadd fast float %1222, %1215
  %1226 = fadd fast float %1223, %1216
  %1227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1228 = extractvalue %dx.types.CBufRet.f32 %1227, 0
  %1229 = extractvalue %dx.types.CBufRet.f32 %1227, 1
  %1230 = extractvalue %dx.types.CBufRet.f32 %1227, 2
  %1231 = fadd fast float %1225, %1228
  %1232 = fadd fast float %1226, %1229
  %1233 = fadd fast float %1230, %1224
  %1234 = fadd fast float %1233, %1217
  %1235 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1236 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1237 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1235, %dx.types.Handle %1236, float %1231, float %1232, float %1234, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1238 = extractvalue %dx.types.ResRet.f32 %1237, 0
  %1239 = fmul fast float %1238, %885
  br label %1240

; <label>:1240                                    ; preds = %1188, %1174
  %1241 = phi float [ %1239, %1188 ], [ %885, %1174 ]
  %1242 = fsub fast float %865, %903
  %1243 = fmul fast float %1242, %884
  %1244 = fadd fast float %1243, %890
  %1245 = fptosi float %1244 to i32
  %1246 = mul i32 %1245, %893
  %1247 = add i32 %1246, %912
  %1248 = mul i32 %1247, %891
  %1249 = add i32 %1051, %1248
  %1250 = shl i32 %1249, 2
  %1251 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %920, i32 %1250, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1252 = extractvalue %dx.types.ResRet.i32 %1251, 0
  %1253 = icmp eq i32 %1252, -1
  br i1 %1253, label %1306, label %1254

; <label>:1254                                    ; preds = %1240
  %1255 = sitofp i32 %1047 to float
  %1256 = sitofp i32 %912 to float
  %1257 = sitofp i32 %1245 to float
  %1258 = fsub fast float %1045, %1255
  %1259 = fsub fast float %909, %1256
  %1260 = fsub fast float %1244, %1257
  %1261 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %1262 = extractvalue %dx.types.CBufRet.i32 %1261, 0
  %1263 = and i32 %1262, %1252
  %1264 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %1265 = extractvalue %dx.types.CBufRet.i32 %1264, 0
  %1266 = and i32 %1265, 31
  %1267 = lshr i32 %1252, %1266
  %1268 = extractvalue %dx.types.CBufRet.i32 %1261, 1
  %1269 = and i32 %1267, %1268
  %1270 = extractvalue %dx.types.CBufRet.i32 %1264, 1
  %1271 = add i32 %1270, %1265
  %1272 = and i32 %1271, 31
  %1273 = lshr i32 %1252, %1272
  %1274 = uitofp i32 %1263 to float
  %1275 = uitofp i32 %1269 to float
  %1276 = uitofp i32 %1273 to float
  %1277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1278 = extractvalue %dx.types.CBufRet.f32 %1277, 0
  %1279 = extractvalue %dx.types.CBufRet.f32 %1277, 1
  %1280 = extractvalue %dx.types.CBufRet.f32 %1277, 2
  %1281 = fmul fast float %1278, %1274
  %1282 = fmul fast float %1275, %1279
  %1283 = fmul fast float %1276, %1280
  %1284 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1285 = extractvalue %dx.types.CBufRet.f32 %1284, 0
  %1286 = extractvalue %dx.types.CBufRet.f32 %1284, 1
  %1287 = extractvalue %dx.types.CBufRet.f32 %1284, 2
  %1288 = fmul fast float %1285, %1258
  %1289 = fmul fast float %1286, %1259
  %1290 = fmul fast float %1287, %1260
  %1291 = fadd fast float %1288, %1281
  %1292 = fadd fast float %1289, %1282
  %1293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1294 = extractvalue %dx.types.CBufRet.f32 %1293, 0
  %1295 = extractvalue %dx.types.CBufRet.f32 %1293, 1
  %1296 = extractvalue %dx.types.CBufRet.f32 %1293, 2
  %1297 = fadd fast float %1291, %1294
  %1298 = fadd fast float %1292, %1295
  %1299 = fadd fast float %1296, %1290
  %1300 = fadd fast float %1299, %1283
  %1301 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1302 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1303 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1301, %dx.types.Handle %1302, float %1297, float %1298, float %1300, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1304 = extractvalue %dx.types.ResRet.f32 %1303, 0
  %1305 = fmul fast float %1304, %885
  br label %1306

; <label>:1306                                    ; preds = %1254, %1240
  %1307 = phi float [ %1305, %1254 ], [ %885, %1240 ]
  %1308 = fsub fast float %977, %1041
  %1309 = fsub fast float %1110, %1175
  %1310 = fsub fast float %1241, %1307
  %1311 = fmul fast float %1308, %1308
  %1312 = fmul fast float %1309, %1309
  %1313 = fadd fast float %1312, %1311
  %1314 = fmul fast float %1310, %1310
  %1315 = fadd fast float %1313, %1314
  %1316 = call float @dx.op.unary.f32(i32 24, float %1315)  ; Sqrt(value)
  %1317 = fcmp fast ogt float %1316, 0.000000e+00
  br i1 %1317, label %1318, label %1322

; <label>:1318                                    ; preds = %1306
  %1319 = fdiv fast float %1308, %1316
  %1320 = fdiv fast float %1309, %1316
  %1321 = fdiv fast float %1310, %1316
  br label %1322

; <label>:1322                                    ; preds = %1318, %1306
  %1323 = phi float [ %1319, %1318 ], [ 0.000000e+00, %1306 ]
  %1324 = phi float [ %1320, %1318 ], [ 0.000000e+00, %1306 ]
  %1325 = phi float [ %1321, %1318 ], [ 0.000000e+00, %1306 ]
  %1326 = fmul fast float %1323, %795
  %1327 = call float @dx.op.tertiary.f32(i32 46, float %1324, float %801, float %1326)  ; FMad(a,b,c)
  %1328 = call float @dx.op.tertiary.f32(i32 46, float %1325, float %807, float %1327)  ; FMad(a,b,c)
  %1329 = fmul fast float %1323, %796
  %1330 = call float @dx.op.tertiary.f32(i32 46, float %1324, float %802, float %1329)  ; FMad(a,b,c)
  %1331 = call float @dx.op.tertiary.f32(i32 46, float %1325, float %808, float %1330)  ; FMad(a,b,c)
  %1332 = fmul fast float %1323, %797
  %1333 = call float @dx.op.tertiary.f32(i32 46, float %1324, float %803, float %1332)  ; FMad(a,b,c)
  %1334 = call float @dx.op.tertiary.f32(i32 46, float %1325, float %809, float %1333)  ; FMad(a,b,c)
  %1335 = fmul fast float %1328, %1328
  %1336 = fmul fast float %1331, %1331
  %1337 = fadd fast float %1336, %1335
  %1338 = fmul fast float %1334, %1334
  %1339 = fadd fast float %1337, %1338
  %1340 = call float @dx.op.unary.f32(i32 24, float %1339)  ; Sqrt(value)
  %1341 = fcmp fast ogt float %1340, 0.000000e+00
  br i1 %1341, label %1342, label %1346

; <label>:1342                                    ; preds = %1322
  %1343 = fdiv fast float %1328, %1340
  %1344 = fdiv fast float %1331, %1340
  %1345 = fdiv fast float %1334, %1340
  br label %1346

; <label>:1346                                    ; preds = %1342, %1322
  %1347 = phi float [ %1343, %1342 ], [ 0.000000e+00, %1322 ]
  %1348 = phi float [ %1344, %1342 ], [ 0.000000e+00, %1322 ]
  %1349 = phi float [ %1345, %1342 ], [ 0.000000e+00, %1322 ]
  %1350 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1351 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1350, i32 %819, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1352 = extractvalue %dx.types.ResRet.f32 %1351, 0
  %1353 = bitcast float %1352 to i32
  %1354 = and i32 %1353, 1048575
  %1355 = lshr i32 %1353, 20
  %1356 = icmp eq i32 %1354, 1048575
  br i1 %1356, label %1683, label %1357, !dx.controlflow.hints !73

; <label>:1357                                    ; preds = %1346
  %1358 = extractvalue %dx.types.ResRet.f32 %1351, 1
  %1359 = bitcast float %1358 to i32
  %1360 = and i32 %1359, 16777215
  %1361 = mul nuw nsw i32 %1354, 41
  %1362 = add nuw nsw i32 %1361, 26
  %1363 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1364 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1363, i32 %1362, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1365 = extractvalue %dx.types.ResRet.f32 %1364, 3
  %1366 = bitcast float %1365 to i32
  %1367 = add nuw nsw i32 %1361, 27
  %1368 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1363, i32 %1367, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1369 = extractvalue %dx.types.ResRet.f32 %1368, 3
  %1370 = bitcast float %1369 to i32
  %1371 = and i32 %1370, 16777215
  %1372 = mul i32 %1371, %1360
  %1373 = and i32 %1355, 64
  %1374 = icmp ne i32 %1373, 0
  %1375 = and i32 %1355, 8
  %1376 = and i32 %1355, 288
  %1377 = icmp ne i32 %1376, 0
  %1378 = zext i1 %1377 to i32
  %1379 = select i1 %1374, i32 2, i32 %1378
  %1380 = add i32 %1366, %1379
  %1381 = add i32 %1380, %1372
  %1382 = add nuw nsw i32 %1361, 1
  %1383 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1363, i32 %1382, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1384 = extractvalue %dx.types.ResRet.f32 %1383, 0
  %1385 = extractvalue %dx.types.ResRet.f32 %1383, 1
  %1386 = extractvalue %dx.types.ResRet.f32 %1383, 2
  %1387 = add nuw nsw i32 %1361, 14
  %1388 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1363, i32 %1387, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1389 = extractvalue %dx.types.ResRet.f32 %1388, 0
  %1390 = extractvalue %dx.types.ResRet.f32 %1388, 1
  %1391 = extractvalue %dx.types.ResRet.f32 %1388, 2
  %1392 = add nuw nsw i32 %1361, 15
  %1393 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1363, i32 %1392, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1394 = extractvalue %dx.types.ResRet.f32 %1393, 0
  %1395 = extractvalue %dx.types.ResRet.f32 %1393, 1
  %1396 = extractvalue %dx.types.ResRet.f32 %1393, 2
  %1397 = add nuw nsw i32 %1361, 16
  %1398 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1363, i32 %1397, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1399 = extractvalue %dx.types.ResRet.f32 %1398, 0
  %1400 = extractvalue %dx.types.ResRet.f32 %1398, 1
  %1401 = extractvalue %dx.types.ResRet.f32 %1398, 2
  %1402 = add i32 %819, %65
  %1403 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1350, i32 %1402, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1404 = extractvalue %dx.types.ResRet.f32 %1403, 0
  %1405 = extractvalue %dx.types.ResRet.f32 %1403, 1
  %1406 = extractvalue %dx.types.ResRet.f32 %1403, 2
  %1407 = extractvalue %dx.types.ResRet.f32 %1403, 3
  %1408 = bitcast float %1404 to i32
  %1409 = bitcast float %1405 to i32
  %1410 = bitcast float %1406 to i32
  %1411 = bitcast float %1407 to i32
  %1412 = shl i32 %65, 1
  %1413 = add i32 %819, %1412
  %1414 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1350, i32 %1413, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1415 = extractvalue %dx.types.ResRet.f32 %1414, 0
  %1416 = extractvalue %dx.types.ResRet.f32 %1414, 1
  %1417 = extractvalue %dx.types.ResRet.f32 %1414, 2
  %1418 = and i32 %1408, 65535
  %1419 = uitofp i32 %1418 to float
  %1420 = lshr i32 %1408, 16
  %1421 = uitofp i32 %1420 to float
  %1422 = and i32 %1409, 32767
  %1423 = uitofp i32 %1422 to float
  %1424 = fadd fast float %1419, -3.276800e+04
  %1425 = fadd fast float %1421, -3.276800e+04
  %1426 = fadd fast float %1423, -1.638400e+04
  %1427 = fmul fast float %1426, 0x3F06A0F8E0000000
  %1428 = and i32 %1409, 32768
  %1429 = icmp ne i32 %1428, 0
  %1430 = fadd fast float %1424, %1425
  %1431 = fmul fast float %1430, 0x3F00002000000000
  %1432 = fsub fast float %1424, %1425
  %1433 = fmul fast float %1432, 0x3F00002000000000
  %1434 = call float @dx.op.unary.f32(i32 6, float %1431)  ; FAbs(value)
  %1435 = call float @dx.op.unary.f32(i32 6, float %1433)  ; FAbs(value)
  %1436 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %1434, float %1435)  ; Dot2(ax,ay,bx,by)
  %1437 = fsub fast float 2.000000e+00, %1436
  %1438 = call float @dx.op.dot3.f32(i32 55, float %1431, float %1433, float %1437, float %1431, float %1433, float %1437)  ; Dot3(ax,ay,az,bx,by,bz)
  %1439 = call float @dx.op.unary.f32(i32 25, float %1438)  ; Rsqrt(value)
  %1440 = fmul fast float %1439, %1431
  %1441 = fmul fast float %1439, %1433
  %1442 = fmul fast float %1439, %1437
  %1443 = fadd fast float %1442, 1.000000e+00
  %1444 = fdiv fast float 1.000000e+00, %1443
  %1445 = fmul fast float %1441, %1440
  %1446 = fmul fast float %1445, %1444
  %1447 = fsub fast float -0.000000e+00, %1446
  %1448 = fmul fast float %1440, %1440
  %1449 = fmul fast float %1448, %1444
  %1450 = fsub fast float 1.000000e+00, %1449
  %1451 = fmul fast float %1441, %1441
  %1452 = fmul fast float %1451, %1444
  %1453 = fsub fast float 1.000000e+00, %1452
  %1454 = fmul fast float %1427, %1427
  %1455 = fsub fast float 1.000000e+00, %1454
  %1456 = call float @dx.op.unary.f32(i32 24, float %1455)  ; Sqrt(value)
  %1457 = select i1 %1429, float %1427, float %1456
  %1458 = select i1 %1429, float %1456, float %1427
  %1459 = fmul fast float %1450, %1457
  %1460 = fmul fast float %1457, %1447
  %1461 = fmul fast float %1457, %1440
  %1462 = fmul fast float %1458, %1447
  %1463 = fmul fast float %1453, %1458
  %1464 = fmul fast float %1441, %1458
  %1465 = fsub fast float -0.000000e+00, %1464
  %1466 = fadd fast float %1459, %1462
  %1467 = fadd fast float %1460, %1463
  %1468 = fsub fast float %1465, %1461
  %1469 = fmul fast float %1468, %1441
  %1470 = fmul fast float %1467, %1442
  %1471 = fsub fast float %1469, %1470
  %1472 = fmul fast float %1466, %1442
  %1473 = fmul fast float %1468, %1440
  %1474 = fsub fast float %1472, %1473
  %1475 = fmul fast float %1467, %1440
  %1476 = fmul fast float %1466, %1441
  %1477 = fsub fast float %1475, %1476
  %1478 = lshr i32 %1411, 16
  %1479 = shl i32 %1478, 23
  %1480 = add i32 %1479, -125829120
  %1481 = bitcast i32 %1480 to float
  %1482 = lshr i32 %1410, 16
  %1483 = and i32 %1410, 65535
  %1484 = and i32 %1411, 65535
  %1485 = uitofp i32 %1483 to float
  %1486 = uitofp i32 %1482 to float
  %1487 = uitofp i32 %1484 to float
  %1488 = fadd fast float %1485, -3.276800e+04
  %1489 = fadd fast float %1486, -3.276800e+04
  %1490 = fadd fast float %1487, -3.276800e+04
  %1491 = fmul fast float %1481, %1488
  %1492 = fmul fast float %1481, %1489
  %1493 = fmul fast float %1481, %1490
  %1494 = fmul fast float %1466, %1491
  %1495 = fmul fast float %1467, %1491
  %1496 = fmul fast float %1468, %1491
  %1497 = fmul fast float %1471, %1492
  %1498 = fmul fast float %1474, %1492
  %1499 = fmul fast float %1477, %1492
  %1500 = fmul fast float %1440, %1493
  %1501 = fmul fast float %1441, %1493
  %1502 = fmul fast float %1442, %1493
  %1503 = call float @dx.op.unary.f32(i32 6, float %1491)  ; FAbs(value)
  %1504 = call float @dx.op.unary.f32(i32 6, float %1492)  ; FAbs(value)
  %1505 = call float @dx.op.unary.f32(i32 6, float %1493)  ; FAbs(value)
  %1506 = fdiv fast float 1.000000e+00, %1503
  %1507 = fdiv fast float 1.000000e+00, %1504
  %1508 = fdiv fast float 1.000000e+00, %1505
  %1509 = fmul fast float %1506, %1506
  %1510 = fmul fast float %1494, %1509
  %1511 = fmul fast float %1495, %1509
  %1512 = fmul fast float %1509, %1496
  %1513 = fmul fast float %1507, %1507
  %1514 = fmul fast float %1497, %1513
  %1515 = fmul fast float %1498, %1513
  %1516 = fmul fast float %1499, %1513
  %1517 = fmul fast float %1508, %1508
  %1518 = fmul fast float %1517, %1500
  %1519 = fmul fast float %1517, %1501
  %1520 = fmul fast float %1517, %1502
  %1521 = fsub fast float -0.000000e+00, %1415
  %1522 = fsub fast float -0.000000e+00, %1416
  %1523 = fsub fast float -0.000000e+00, %1417
  %1524 = fmul fast float %1510, %1521
  %1525 = call float @dx.op.tertiary.f32(i32 46, float %1522, float %1511, float %1524)  ; FMad(a,b,c)
  %1526 = call float @dx.op.tertiary.f32(i32 46, float %1523, float %1512, float %1525)  ; FMad(a,b,c)
  %1527 = fmul fast float %1514, %1521
  %1528 = call float @dx.op.tertiary.f32(i32 46, float %1522, float %1515, float %1527)  ; FMad(a,b,c)
  %1529 = call float @dx.op.tertiary.f32(i32 46, float %1523, float %1516, float %1528)  ; FMad(a,b,c)
  %1530 = fmul fast float %1518, %1521
  %1531 = call float @dx.op.tertiary.f32(i32 46, float %1522, float %1519, float %1530)  ; FMad(a,b,c)
  %1532 = call float @dx.op.tertiary.f32(i32 46, float %1523, float %1520, float %1531)  ; FMad(a,b,c)
  %1533 = fsub fast float -0.000000e+00, %1384
  %1534 = fsub fast float -0.000000e+00, %1385
  %1535 = fsub fast float -0.000000e+00, %1386
  %1536 = icmp eq i32 %1381, -1
  %1537 = icmp eq i32 %1375, 0
  %1538 = or i1 %1537, %1536
  br i1 %1538, label %1640, label %1539, !dx.controlflow.hints !74

; <label>:1539                                    ; preds = %1357
  %1540 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1541 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1540, i32 %1381, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1542 = extractvalue %dx.types.ResRet.f32 %1541, 0
  %1543 = extractvalue %dx.types.ResRet.f32 %1541, 1
  %1544 = extractvalue %dx.types.ResRet.f32 %1541, 2
  %1545 = extractvalue %dx.types.ResRet.f32 %1541, 3
  %1546 = bitcast float %1542 to i32
  %1547 = bitcast float %1543 to i32
  %1548 = bitcast float %1544 to i32
  %1549 = bitcast float %1545 to i32
  %1550 = add i32 %1381, 1
  %1551 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1540, i32 %1550, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1552 = extractvalue %dx.types.ResRet.f32 %1551, 0
  %1553 = extractvalue %dx.types.ResRet.f32 %1551, 1
  %1554 = extractvalue %dx.types.ResRet.f32 %1551, 2
  %1555 = and i32 %1546, 65535
  %1556 = uitofp i32 %1555 to float
  %1557 = lshr i32 %1546, 16
  %1558 = uitofp i32 %1557 to float
  %1559 = and i32 %1547, 32767
  %1560 = uitofp i32 %1559 to float
  %1561 = fadd fast float %1556, -3.276800e+04
  %1562 = fadd fast float %1558, -3.276800e+04
  %1563 = fadd fast float %1560, -1.638400e+04
  %1564 = fmul fast float %1563, 0x3F06A0F8E0000000
  %1565 = and i32 %1547, 32768
  %1566 = icmp ne i32 %1565, 0
  %1567 = fadd fast float %1561, %1562
  %1568 = fmul fast float %1567, 0x3F00002000000000
  %1569 = fsub fast float %1561, %1562
  %1570 = fmul fast float %1569, 0x3F00002000000000
  %1571 = call float @dx.op.unary.f32(i32 6, float %1568)  ; FAbs(value)
  %1572 = call float @dx.op.unary.f32(i32 6, float %1570)  ; FAbs(value)
  %1573 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %1571, float %1572)  ; Dot2(ax,ay,bx,by)
  %1574 = fsub fast float 2.000000e+00, %1573
  %1575 = call float @dx.op.dot3.f32(i32 55, float %1568, float %1570, float %1574, float %1568, float %1570, float %1574)  ; Dot3(ax,ay,az,bx,by,bz)
  %1576 = call float @dx.op.unary.f32(i32 25, float %1575)  ; Rsqrt(value)
  %1577 = fmul fast float %1576, %1568
  %1578 = fmul fast float %1576, %1570
  %1579 = fmul fast float %1576, %1574
  %1580 = fadd fast float %1579, 1.000000e+00
  %1581 = fdiv fast float 1.000000e+00, %1580
  %1582 = fmul fast float %1578, %1577
  %1583 = fmul fast float %1582, %1581
  %1584 = fsub fast float -0.000000e+00, %1583
  %1585 = fmul fast float %1577, %1577
  %1586 = fmul fast float %1585, %1581
  %1587 = fsub fast float 1.000000e+00, %1586
  %1588 = fmul fast float %1578, %1578
  %1589 = fmul fast float %1588, %1581
  %1590 = fsub fast float 1.000000e+00, %1589
  %1591 = fmul fast float %1564, %1564
  %1592 = fsub fast float 1.000000e+00, %1591
  %1593 = call float @dx.op.unary.f32(i32 24, float %1592)  ; Sqrt(value)
  %1594 = select i1 %1566, float %1564, float %1593
  %1595 = select i1 %1566, float %1593, float %1564
  %1596 = fmul fast float %1587, %1594
  %1597 = fmul fast float %1594, %1584
  %1598 = fmul fast float %1594, %1577
  %1599 = fmul fast float %1595, %1584
  %1600 = fmul fast float %1590, %1595
  %1601 = fmul fast float %1578, %1595
  %1602 = fsub fast float -0.000000e+00, %1601
  %1603 = fadd fast float %1596, %1599
  %1604 = fadd fast float %1597, %1600
  %1605 = fsub fast float %1602, %1598
  %1606 = fmul fast float %1605, %1578
  %1607 = fmul fast float %1604, %1579
  %1608 = fsub fast float %1606, %1607
  %1609 = fmul fast float %1603, %1579
  %1610 = fmul fast float %1605, %1577
  %1611 = fsub fast float %1609, %1610
  %1612 = fmul fast float %1604, %1577
  %1613 = fmul fast float %1603, %1578
  %1614 = fsub fast float %1612, %1613
  %1615 = lshr i32 %1549, 16
  %1616 = shl i32 %1615, 23
  %1617 = add i32 %1616, -125829120
  %1618 = bitcast i32 %1617 to float
  %1619 = lshr i32 %1548, 16
  %1620 = and i32 %1548, 65535
  %1621 = and i32 %1549, 65535
  %1622 = uitofp i32 %1620 to float
  %1623 = uitofp i32 %1619 to float
  %1624 = uitofp i32 %1621 to float
  %1625 = fadd fast float %1622, -3.276800e+04
  %1626 = fadd fast float %1623, -3.276800e+04
  %1627 = fadd fast float %1624, -3.276800e+04
  %1628 = fmul fast float %1618, %1625
  %1629 = fmul fast float %1618, %1626
  %1630 = fmul fast float %1618, %1627
  %1631 = fmul fast float %1603, %1628
  %1632 = fmul fast float %1604, %1628
  %1633 = fmul fast float %1605, %1628
  %1634 = fmul fast float %1608, %1629
  %1635 = fmul fast float %1611, %1629
  %1636 = fmul fast float %1614, %1629
  %1637 = fmul fast float %1577, %1630
  %1638 = fmul fast float %1578, %1630
  %1639 = fmul fast float %1579, %1630
  br label %1683

; <label>:1640                                    ; preds = %1357
  %1641 = extractvalue %dx.types.ResRet.f32 %1398, 3
  %1642 = extractvalue %dx.types.ResRet.f32 %1393, 3
  %1643 = extractvalue %dx.types.ResRet.f32 %1388, 3
  %1644 = fmul fast float %1494, %1389
  %1645 = call float @dx.op.tertiary.f32(i32 46, float %1495, float %1390, float %1644)  ; FMad(a,b,c)
  %1646 = call float @dx.op.tertiary.f32(i32 46, float %1496, float %1391, float %1645)  ; FMad(a,b,c)
  %1647 = fmul fast float %1494, %1394
  %1648 = call float @dx.op.tertiary.f32(i32 46, float %1495, float %1395, float %1647)  ; FMad(a,b,c)
  %1649 = call float @dx.op.tertiary.f32(i32 46, float %1496, float %1396, float %1648)  ; FMad(a,b,c)
  %1650 = fmul fast float %1494, %1399
  %1651 = call float @dx.op.tertiary.f32(i32 46, float %1495, float %1400, float %1650)  ; FMad(a,b,c)
  %1652 = call float @dx.op.tertiary.f32(i32 46, float %1496, float %1401, float %1651)  ; FMad(a,b,c)
  %1653 = fmul fast float %1497, %1389
  %1654 = call float @dx.op.tertiary.f32(i32 46, float %1498, float %1390, float %1653)  ; FMad(a,b,c)
  %1655 = call float @dx.op.tertiary.f32(i32 46, float %1499, float %1391, float %1654)  ; FMad(a,b,c)
  %1656 = fmul fast float %1497, %1394
  %1657 = call float @dx.op.tertiary.f32(i32 46, float %1498, float %1395, float %1656)  ; FMad(a,b,c)
  %1658 = call float @dx.op.tertiary.f32(i32 46, float %1499, float %1396, float %1657)  ; FMad(a,b,c)
  %1659 = fmul fast float %1497, %1399
  %1660 = call float @dx.op.tertiary.f32(i32 46, float %1498, float %1400, float %1659)  ; FMad(a,b,c)
  %1661 = call float @dx.op.tertiary.f32(i32 46, float %1499, float %1401, float %1660)  ; FMad(a,b,c)
  %1662 = fmul fast float %1500, %1389
  %1663 = call float @dx.op.tertiary.f32(i32 46, float %1501, float %1390, float %1662)  ; FMad(a,b,c)
  %1664 = call float @dx.op.tertiary.f32(i32 46, float %1502, float %1391, float %1663)  ; FMad(a,b,c)
  %1665 = fmul fast float %1500, %1394
  %1666 = call float @dx.op.tertiary.f32(i32 46, float %1501, float %1395, float %1665)  ; FMad(a,b,c)
  %1667 = call float @dx.op.tertiary.f32(i32 46, float %1502, float %1396, float %1666)  ; FMad(a,b,c)
  %1668 = fmul fast float %1500, %1399
  %1669 = call float @dx.op.tertiary.f32(i32 46, float %1501, float %1400, float %1668)  ; FMad(a,b,c)
  %1670 = call float @dx.op.tertiary.f32(i32 46, float %1502, float %1401, float %1669)  ; FMad(a,b,c)
  %1671 = fmul fast float %1415, %1389
  %1672 = call float @dx.op.tertiary.f32(i32 46, float %1416, float %1390, float %1671)  ; FMad(a,b,c)
  %1673 = call float @dx.op.tertiary.f32(i32 46, float %1417, float %1391, float %1672)  ; FMad(a,b,c)
  %1674 = fadd fast float %1673, %1643
  %1675 = fmul fast float %1415, %1394
  %1676 = call float @dx.op.tertiary.f32(i32 46, float %1416, float %1395, float %1675)  ; FMad(a,b,c)
  %1677 = call float @dx.op.tertiary.f32(i32 46, float %1417, float %1396, float %1676)  ; FMad(a,b,c)
  %1678 = fadd fast float %1677, %1642
  %1679 = fmul fast float %1415, %1399
  %1680 = call float @dx.op.tertiary.f32(i32 46, float %1416, float %1400, float %1679)  ; FMad(a,b,c)
  %1681 = call float @dx.op.tertiary.f32(i32 46, float %1417, float %1401, float %1680)  ; FMad(a,b,c)
  %1682 = fadd fast float %1681, %1641
  br label %1683

; <label>:1683                                    ; preds = %1640, %1539, %1346
  %1684 = phi float [ 0.000000e+00, %1346 ], [ %1631, %1539 ], [ %1646, %1640 ]
  %1685 = phi float [ 0.000000e+00, %1346 ], [ %1632, %1539 ], [ %1649, %1640 ]
  %1686 = phi float [ 0.000000e+00, %1346 ], [ %1633, %1539 ], [ %1652, %1640 ]
  %1687 = phi float [ 0.000000e+00, %1346 ], [ %1634, %1539 ], [ %1655, %1640 ]
  %1688 = phi float [ 0.000000e+00, %1346 ], [ %1635, %1539 ], [ %1658, %1640 ]
  %1689 = phi float [ 0.000000e+00, %1346 ], [ %1636, %1539 ], [ %1661, %1640 ]
  %1690 = phi float [ 0.000000e+00, %1346 ], [ %1637, %1539 ], [ %1664, %1640 ]
  %1691 = phi float [ 0.000000e+00, %1346 ], [ %1638, %1539 ], [ %1667, %1640 ]
  %1692 = phi float [ 0.000000e+00, %1346 ], [ %1639, %1539 ], [ %1670, %1640 ]
  %1693 = phi float [ 0.000000e+00, %1346 ], [ %1552, %1539 ], [ %1674, %1640 ]
  %1694 = phi float [ 0.000000e+00, %1346 ], [ %1553, %1539 ], [ %1678, %1640 ]
  %1695 = phi float [ 0.000000e+00, %1346 ], [ %1554, %1539 ], [ %1682, %1640 ]
  %1696 = phi float [ 0.000000e+00, %1346 ], [ %1384, %1539 ], [ %1384, %1640 ]
  %1697 = phi float [ 0.000000e+00, %1346 ], [ %1385, %1539 ], [ %1385, %1640 ]
  %1698 = phi float [ 0.000000e+00, %1346 ], [ %1386, %1539 ], [ %1386, %1640 ]
  %1699 = phi float [ 0.000000e+00, %1346 ], [ %1510, %1539 ], [ %1510, %1640 ]
  %1700 = phi float [ 0.000000e+00, %1346 ], [ %1514, %1539 ], [ %1514, %1640 ]
  %1701 = phi float [ 0.000000e+00, %1346 ], [ %1518, %1539 ], [ %1518, %1640 ]
  %1702 = phi float [ 0.000000e+00, %1346 ], [ %1511, %1539 ], [ %1511, %1640 ]
  %1703 = phi float [ 0.000000e+00, %1346 ], [ %1515, %1539 ], [ %1515, %1640 ]
  %1704 = phi float [ 0.000000e+00, %1346 ], [ %1519, %1539 ], [ %1519, %1640 ]
  %1705 = phi float [ 0.000000e+00, %1346 ], [ %1512, %1539 ], [ %1512, %1640 ]
  %1706 = phi float [ 0.000000e+00, %1346 ], [ %1516, %1539 ], [ %1516, %1640 ]
  %1707 = phi float [ 0.000000e+00, %1346 ], [ %1520, %1539 ], [ %1520, %1640 ]
  %1708 = phi float [ 0.000000e+00, %1346 ], [ %1526, %1539 ], [ %1526, %1640 ]
  %1709 = phi float [ 0.000000e+00, %1346 ], [ %1529, %1539 ], [ %1529, %1640 ]
  %1710 = phi float [ 0.000000e+00, %1346 ], [ %1532, %1539 ], [ %1532, %1640 ]
  %1711 = phi float [ 0.000000e+00, %1346 ], [ 1.000000e+00, %1539 ], [ 1.000000e+00, %1640 ]
  %1712 = phi float [ 0.000000e+00, %1346 ], [ %1533, %1539 ], [ %1533, %1640 ]
  %1713 = phi float [ 0.000000e+00, %1346 ], [ %1534, %1539 ], [ %1534, %1640 ]
  %1714 = phi float [ 0.000000e+00, %1346 ], [ %1535, %1539 ], [ %1535, %1640 ]
  %1715 = fmul fast float %1712, 2.097152e+06
  %1716 = fmul fast float %1713, 2.097152e+06
  %1717 = fmul fast float %1714, 2.097152e+06
  %1718 = fmul fast float %1715, %1699
  %1719 = call float @dx.op.tertiary.f32(i32 46, float %1716, float %1702, float %1718)  ; FMad(a,b,c)
  %1720 = call float @dx.op.tertiary.f32(i32 46, float %1717, float %1705, float %1719)  ; FMad(a,b,c)
  %1721 = fadd fast float %1720, %1708
  %1722 = fmul fast float %1715, %1700
  %1723 = call float @dx.op.tertiary.f32(i32 46, float %1716, float %1703, float %1722)  ; FMad(a,b,c)
  %1724 = call float @dx.op.tertiary.f32(i32 46, float %1717, float %1706, float %1723)  ; FMad(a,b,c)
  %1725 = fadd fast float %1724, %1709
  %1726 = fmul fast float %1715, %1701
  %1727 = call float @dx.op.tertiary.f32(i32 46, float %1716, float %1704, float %1726)  ; FMad(a,b,c)
  %1728 = call float @dx.op.tertiary.f32(i32 46, float %1717, float %1707, float %1727)  ; FMad(a,b,c)
  %1729 = fadd fast float %1728, %1710
  %1730 = fmul fast float %1699, %842
  %1731 = call float @dx.op.tertiary.f32(i32 46, float %843, float %1702, float %1730)  ; FMad(a,b,c)
  %1732 = call float @dx.op.tertiary.f32(i32 46, float %844, float %1705, float %1731)  ; FMad(a,b,c)
  %1733 = fadd fast float %1721, %1732
  %1734 = fmul fast float %1700, %842
  %1735 = call float @dx.op.tertiary.f32(i32 46, float %843, float %1703, float %1734)  ; FMad(a,b,c)
  %1736 = call float @dx.op.tertiary.f32(i32 46, float %844, float %1706, float %1735)  ; FMad(a,b,c)
  %1737 = fadd fast float %1725, %1736
  %1738 = fmul fast float %1701, %842
  %1739 = call float @dx.op.tertiary.f32(i32 46, float %843, float %1704, float %1738)  ; FMad(a,b,c)
  %1740 = call float @dx.op.tertiary.f32(i32 46, float %844, float %1707, float %1739)  ; FMad(a,b,c)
  %1741 = fadd fast float %1729, %1740
  %1742 = fmul fast float %1696, 2.097152e+06
  %1743 = fmul fast float %1697, 2.097152e+06
  %1744 = fmul fast float %1698, 2.097152e+06
  %1745 = fadd fast float %1742, %1693
  %1746 = fadd fast float %1743, %1694
  %1747 = fadd fast float %1744, %1695
  %1748 = fmul fast float %1733, %1684
  %1749 = call float @dx.op.tertiary.f32(i32 46, float %1737, float %1687, float %1748)  ; FMad(a,b,c)
  %1750 = call float @dx.op.tertiary.f32(i32 46, float %1741, float %1690, float %1749)  ; FMad(a,b,c)
  %1751 = call float @dx.op.tertiary.f32(i32 46, float %1711, float %1745, float %1750)  ; FMad(a,b,c)
  %1752 = fmul fast float %1733, %1685
  %1753 = call float @dx.op.tertiary.f32(i32 46, float %1737, float %1688, float %1752)  ; FMad(a,b,c)
  %1754 = call float @dx.op.tertiary.f32(i32 46, float %1741, float %1691, float %1753)  ; FMad(a,b,c)
  %1755 = call float @dx.op.tertiary.f32(i32 46, float %1711, float %1746, float %1754)  ; FMad(a,b,c)
  %1756 = fmul fast float %1733, %1686
  %1757 = call float @dx.op.tertiary.f32(i32 46, float %1737, float %1689, float %1756)  ; FMad(a,b,c)
  %1758 = call float @dx.op.tertiary.f32(i32 46, float %1741, float %1692, float %1757)  ; FMad(a,b,c)
  %1759 = call float @dx.op.tertiary.f32(i32 46, float %1711, float %1747, float %1758)  ; FMad(a,b,c)
  %1760 = fsub fast float %842, %1751
  %1761 = fsub fast float %843, %1755
  %1762 = fsub fast float %844, %1759
  %1763 = shl i32 %819, 2
  %1764 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1765 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1764, i32 %1763, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1766 = extractvalue %dx.types.ResRet.i32 %1765, 0
  %1767 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1768 = extractvalue %dx.types.CBufRet.i32 %1767, 1
  %1769 = icmp ult i32 %1766, %1768
  br i1 %1769, label %1770, label %2203

; <label>:1770                                    ; preds = %1683
  %1771 = mul i32 %1766, 6
  %1772 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1773 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1772, i32 %1771, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1774 = extractvalue %dx.types.ResRet.f32 %1773, 0
  %1775 = extractvalue %dx.types.ResRet.f32 %1773, 1
  %1776 = extractvalue %dx.types.ResRet.f32 %1773, 2
  %1777 = or i32 %1771, 1
  %1778 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1772, i32 %1777, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1779 = extractvalue %dx.types.ResRet.f32 %1778, 0
  %1780 = extractvalue %dx.types.ResRet.f32 %1778, 1
  %1781 = extractvalue %dx.types.ResRet.f32 %1778, 2
  %1782 = extractvalue %dx.types.ResRet.f32 %1778, 3
  %1783 = add i32 %1771, 2
  %1784 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1772, i32 %1783, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1785 = extractvalue %dx.types.ResRet.f32 %1784, 0
  %1786 = extractvalue %dx.types.ResRet.f32 %1784, 1
  %1787 = extractvalue %dx.types.ResRet.f32 %1784, 2
  %1788 = extractvalue %dx.types.ResRet.f32 %1784, 3
  %1789 = add i32 %1771, 3
  %1790 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1772, i32 %1789, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1791 = extractvalue %dx.types.ResRet.f32 %1790, 0
  %1792 = extractvalue %dx.types.ResRet.f32 %1790, 1
  %1793 = extractvalue %dx.types.ResRet.f32 %1790, 2
  %1794 = extractvalue %dx.types.ResRet.f32 %1790, 3
  %1795 = fmul fast float %1774, 2.097152e+06
  %1796 = fmul fast float %1775, 2.097152e+06
  %1797 = fmul fast float %1776, 2.097152e+06
  %1798 = add i32 %1771, 4
  %1799 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1772, i32 %1798, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1800 = extractvalue %dx.types.ResRet.f32 %1799, 0
  %1801 = extractvalue %dx.types.ResRet.f32 %1799, 1
  %1802 = extractvalue %dx.types.ResRet.f32 %1799, 2
  %1803 = extractvalue %dx.types.ResRet.f32 %1799, 3
  %1804 = bitcast float %1800 to i32
  %1805 = bitcast float %1801 to i32
  %1806 = add i32 %1771, 5
  %1807 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1772, i32 %1806, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1808 = extractvalue %dx.types.ResRet.f32 %1807, 0
  %1809 = extractvalue %dx.types.ResRet.f32 %1807, 1
  %1810 = extractvalue %dx.types.ResRet.f32 %1807, 2
  %1811 = extractvalue %dx.types.ResRet.f32 %1807, 3
  %1812 = and i32 %1805, 65536
  %1813 = icmp ne i32 %1812, 0
  %1814 = and i32 %1805, 131072
  %1815 = icmp ne i32 %1814, 0
  %1816 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 0
  %1817 = bitcast i32* %1816 to float*
  store float %1802, float* %1817, align 4, !tbaa !75, !alias.scope !79, !noalias !82
  %1818 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 1
  %1819 = bitcast i32* %1818 to float*
  store float %1803, float* %1819, align 4, !tbaa !75, !alias.scope !79, !noalias !82
  %1820 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 2
  %1821 = bitcast i32* %1820 to float*
  store float %1808, float* %1821, align 4, !tbaa !75, !alias.scope !79, !noalias !82
  %1822 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 3
  %1823 = bitcast i32* %1822 to float*
  store float %1809, float* %1823, align 4, !tbaa !75, !alias.scope !79, !noalias !82
  %1824 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 4
  %1825 = bitcast i32* %1824 to float*
  store float %1810, float* %1825, align 4, !tbaa !75, !alias.scope !79, !noalias !82
  %1826 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 5
  %1827 = bitcast i32* %1826 to float*
  store float %1811, float* %1827, align 4, !tbaa !75, !alias.scope !79, !noalias !82
  %1828 = select i1 %1815, float 7.000000e+01, float 2.000000e+01
  %1829 = fsub fast float %842, %1795
  %1830 = fsub fast float %1829, %1782
  %1831 = fsub fast float %843, %1796
  %1832 = fsub fast float %1831, %1788
  %1833 = fsub fast float %844, %1797
  %1834 = fsub fast float %1833, %1794
  %1835 = fmul fast float %1830, %1779
  %1836 = call float @dx.op.tertiary.f32(i32 46, float %1832, float %1785, float %1835)  ; FMad(a,b,c)
  %1837 = call float @dx.op.tertiary.f32(i32 46, float %1834, float %1791, float %1836)  ; FMad(a,b,c)
  %1838 = fmul fast float %1830, %1780
  %1839 = call float @dx.op.tertiary.f32(i32 46, float %1832, float %1786, float %1838)  ; FMad(a,b,c)
  %1840 = call float @dx.op.tertiary.f32(i32 46, float %1834, float %1792, float %1839)  ; FMad(a,b,c)
  %1841 = fmul fast float %1830, %1781
  %1842 = call float @dx.op.tertiary.f32(i32 46, float %1832, float %1787, float %1841)  ; FMad(a,b,c)
  %1843 = call float @dx.op.tertiary.f32(i32 46, float %1834, float %1793, float %1842)  ; FMad(a,b,c)
  %1844 = fmul fast float %1779, %1347
  %1845 = call float @dx.op.tertiary.f32(i32 46, float %1348, float %1785, float %1844)  ; FMad(a,b,c)
  %1846 = call float @dx.op.tertiary.f32(i32 46, float %1349, float %1791, float %1845)  ; FMad(a,b,c)
  %1847 = fmul fast float %1780, %1347
  %1848 = call float @dx.op.tertiary.f32(i32 46, float %1348, float %1786, float %1847)  ; FMad(a,b,c)
  %1849 = call float @dx.op.tertiary.f32(i32 46, float %1349, float %1792, float %1848)  ; FMad(a,b,c)
  %1850 = fmul fast float %1781, %1347
  %1851 = call float @dx.op.tertiary.f32(i32 46, float %1348, float %1787, float %1850)  ; FMad(a,b,c)
  %1852 = call float @dx.op.tertiary.f32(i32 46, float %1349, float %1793, float %1851)  ; FMad(a,b,c)
  %1853 = fmul fast float %1846, %1846
  %1854 = fmul fast float %1849, %1849
  %1855 = fmul fast float %1852, %1852
  %1856 = fcmp fast ogt float %1853, 0.000000e+00
  br i1 %1856, label %1857, label %1862

; <label>:1857                                    ; preds = %1770
  %1858 = fcmp uge float %1846, 0.000000e+00
  %1859 = zext i1 %1858 to i32
  %1860 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 %1859
  %1861 = load i32, i32* %1860, align 4, !tbaa !75, !noalias !82
  br label %1862

; <label>:1862                                    ; preds = %1857, %1770
  %1863 = phi i32 [ %1861, %1857 ], [ 0, %1770 ]
  %1864 = fcmp fast ogt float %1854, 0.000000e+00
  br i1 %1864, label %1865, label %1871

; <label>:1865                                    ; preds = %1862
  %1866 = fcmp fast olt float %1849, 0.000000e+00
  %1867 = select i1 %1866, i32 2, i32 3
  %1868 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 %1867
  %1869 = load i32, i32* %1868, align 4, !tbaa !75, !noalias !82
  %1870 = or i32 %1869, %1863
  br label %1871

; <label>:1871                                    ; preds = %1865, %1862
  %1872 = phi i32 [ %1870, %1865 ], [ %1863, %1862 ]
  %1873 = fcmp fast ogt float %1855, 0.000000e+00
  br i1 %1873, label %1874, label %1880

; <label>:1874                                    ; preds = %1871
  %1875 = fcmp fast olt float %1852, 0.000000e+00
  %1876 = select i1 %1875, i32 4, i32 5
  %1877 = getelementptr inbounds [6 x i32], [6 x i32]* %63, i32 0, i32 %1876
  %1878 = load i32, i32* %1877, align 4, !tbaa !75, !noalias !82
  %1879 = or i32 %1878, %1872
  br label %1880

; <label>:1880                                    ; preds = %1874, %1871
  %1881 = phi i32 [ %1879, %1874 ], [ %1872, %1871 ]
  %1882 = icmp eq i32 %1881, 0
  br i1 %1882, label %1927, label %1883

; <label>:1883                                    ; preds = %1880
  br label %1884

; <label>:1884                                    ; preds = %1884, %1883
  %1885 = phi i32 [ %1890, %1884 ], [ %1881, %1883 ]
  %1886 = phi i32 [ %1924, %1884 ], [ 0, %1883 ]
  %1887 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1885)  ; FirstbitLo(value)
  %1888 = and i32 %1887, 31
  %1889 = shl i32 1, %1888
  %1890 = xor i32 %1889, %1885
  %1891 = add i32 %1887, %1804
  %1892 = mul i32 %1891, 10
  %1893 = add i32 %1892, 6
  %1894 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1895 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1894, i32 %1893, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1896 = extractvalue %dx.types.ResRet.f32 %1895, 3
  %1897 = add i32 %1892, 7
  %1898 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1894, i32 %1897, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1899 = extractvalue %dx.types.ResRet.f32 %1898, 3
  %1900 = add i32 %1892, 8
  %1901 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1894, i32 %1900, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1902 = extractvalue %dx.types.ResRet.f32 %1901, 3
  %1903 = add i32 %1892, 9
  %1904 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1894, i32 %1903, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1905 = extractvalue %dx.types.ResRet.f32 %1904, 0
  %1906 = extractvalue %dx.types.ResRet.f32 %1904, 1
  %1907 = extractvalue %dx.types.ResRet.f32 %1904, 2
  %1908 = fsub fast float %1837, %1896
  %1909 = fsub fast float %1840, %1899
  %1910 = fsub fast float %1843, %1902
  %1911 = call float @dx.op.unary.f32(i32 6, float %1908)  ; FAbs(value)
  %1912 = call float @dx.op.unary.f32(i32 6, float %1909)  ; FAbs(value)
  %1913 = call float @dx.op.unary.f32(i32 6, float %1910)  ; FAbs(value)
  %1914 = fmul fast float %1828, 5.000000e-01
  %1915 = fadd fast float %1905, %1914
  %1916 = fadd fast float %1906, %1914
  %1917 = fadd fast float %1907, %1914
  %1918 = fcmp fast ole float %1911, %1915
  %1919 = fcmp fast ole float %1912, %1916
  %1920 = fcmp fast ole float %1913, %1917
  %1921 = and i1 %1918, %1919
  %1922 = and i1 %1921, %1920
  %1923 = select i1 %1922, i32 %1889, i32 0
  %1924 = or i32 %1923, %1886
  %1925 = icmp eq i32 %1885, %1889
  br i1 %1925, label %1926, label %1884

; <label>:1926                                    ; preds = %1884
  br label %1927

; <label>:1927                                    ; preds = %1926, %1880
  %1928 = phi i32 [ 0, %1880 ], [ %1924, %1926 ]
  %1929 = select i1 %1813, i32 1, i32 %1928
  %1930 = icmp eq i32 %1929, 0
  br i1 %1930, label %2203, label %1931

; <label>:1931                                    ; preds = %1927
  br label %1932

; <label>:1932                                    ; preds = %1952, %1931
  %1933 = phi float [ %1953, %1952 ], [ 0.000000e+00, %1931 ]
  %1934 = phi float [ %1954, %1952 ], [ 0.000000e+00, %1931 ]
  %1935 = phi float [ %1955, %1952 ], [ 0.000000e+00, %1931 ]
  %1936 = phi float [ %1956, %1952 ], [ 0.000000e+00, %1931 ]
  %1937 = phi float [ %1957, %1952 ], [ 0.000000e+00, %1931 ]
  %1938 = phi i32 [ %1942, %1952 ], [ %1929, %1931 ]
  %1939 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1938)  ; FirstbitLo(value)
  %1940 = and i32 %1939, 31
  %1941 = shl i32 1, %1940
  %1942 = xor i32 %1941, %1938
  %1943 = add i32 %1939, %1804
  %1944 = mul i32 %1943, 10
  %1945 = add i32 %1944, 4
  %1946 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1947 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1946, i32 %1945, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1948 = extractvalue %dx.types.ResRet.f32 %1947, 3
  %1949 = bitcast float %1948 to i32
  %1950 = and i32 %1949, 16777216
  %1951 = icmp eq i32 %1950, 0
  br i1 %1951, label %1952, label %1959

; <label>:1952                                    ; preds = %4237, %2201, %2169, %2138, %2019, %1963, %1959, %1932
  %1953 = phi float [ %1933, %1932 ], [ %4244, %2201 ], [ %1933, %2169 ], [ %1933, %4237 ], [ %1933, %2138 ], [ %1933, %2019 ], [ %1933, %1963 ], [ %1933, %1959 ]
  %1954 = phi float [ %1934, %1932 ], [ %2196, %2201 ], [ %2196, %2169 ], [ %1934, %4237 ], [ %1934, %2138 ], [ %1934, %2019 ], [ %1934, %1963 ], [ %1934, %1959 ]
  %1955 = phi float [ %1935, %1932 ], [ %2197, %2201 ], [ %2197, %2169 ], [ %1935, %4237 ], [ %1935, %2138 ], [ %1935, %2019 ], [ %1935, %1963 ], [ %1935, %1959 ]
  %1956 = phi float [ %1936, %1932 ], [ %2198, %2201 ], [ %2198, %2169 ], [ %1936, %4237 ], [ %1936, %2138 ], [ %1936, %2019 ], [ %1936, %1963 ], [ %1936, %1959 ]
  %1957 = phi float [ %1937, %1932 ], [ %2199, %2201 ], [ %2199, %2169 ], [ %1937, %4237 ], [ %1937, %2138 ], [ %1937, %2019 ], [ %1937, %1963 ], [ %1937, %1959 ]
  %1958 = icmp eq i32 %1938, %1941
  br i1 %1958, label %2202, label %1932

; <label>:1959                                    ; preds = %1932
  %1960 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1961 = extractvalue %dx.types.CBufRet.i32 %1960, 0
  %1962 = icmp ult i32 %1943, %1961
  br i1 %1962, label %1963, label %1952

; <label>:1963                                    ; preds = %1959
  %1964 = extractvalue %dx.types.ResRet.f32 %1947, 0
  %1965 = extractvalue %dx.types.ResRet.f32 %1947, 1
  %1966 = extractvalue %dx.types.ResRet.f32 %1947, 2
  %1967 = add i32 %1944, 5
  %1968 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1946, i32 %1967, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1969 = extractvalue %dx.types.ResRet.f32 %1968, 0
  %1970 = add i32 %1944, 6
  %1971 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1946, i32 %1970, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1972 = add i32 %1944, 7
  %1973 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1946, i32 %1972, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1974 = add i32 %1944, 8
  %1975 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1946, i32 %1974, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1976 = call float @dx.op.unary.f32(i32 6, float %1964)  ; FAbs(value)
  %1977 = call float @dx.op.unary.f32(i32 6, float %1965)  ; FAbs(value)
  %1978 = call float @dx.op.unary.f32(i32 6, float %1966)  ; FAbs(value)
  %1979 = lshr i32 %1949, 16
  %1980 = and i32 %1979, 15
  %1981 = bitcast float %1969 to i32
  %1982 = and i32 %1981, 65535
  %1983 = extractvalue %dx.types.ResRet.f32 %1975, 3
  %1984 = extractvalue %dx.types.ResRet.f32 %1975, 2
  %1985 = extractvalue %dx.types.ResRet.f32 %1975, 1
  %1986 = extractvalue %dx.types.ResRet.f32 %1975, 0
  %1987 = extractvalue %dx.types.ResRet.f32 %1973, 3
  %1988 = extractvalue %dx.types.ResRet.f32 %1973, 2
  %1989 = extractvalue %dx.types.ResRet.f32 %1973, 1
  %1990 = extractvalue %dx.types.ResRet.f32 %1973, 0
  %1991 = extractvalue %dx.types.ResRet.f32 %1971, 3
  %1992 = extractvalue %dx.types.ResRet.f32 %1971, 2
  %1993 = extractvalue %dx.types.ResRet.f32 %1971, 1
  %1994 = extractvalue %dx.types.ResRet.f32 %1971, 0
  %1995 = fsub fast float %1837, %1991
  %1996 = fsub fast float %1840, %1987
  %1997 = fsub fast float %1843, %1983
  %1998 = fmul fast float %1995, %1994
  %1999 = call float @dx.op.tertiary.f32(i32 46, float %1996, float %1990, float %1998)  ; FMad(a,b,c)
  %2000 = call float @dx.op.tertiary.f32(i32 46, float %1997, float %1986, float %1999)  ; FMad(a,b,c)
  %2001 = fmul fast float %1995, %1993
  %2002 = call float @dx.op.tertiary.f32(i32 46, float %1996, float %1989, float %2001)  ; FMad(a,b,c)
  %2003 = call float @dx.op.tertiary.f32(i32 46, float %1997, float %1985, float %2002)  ; FMad(a,b,c)
  %2004 = fmul fast float %1995, %1992
  %2005 = call float @dx.op.tertiary.f32(i32 46, float %1996, float %1988, float %2004)  ; FMad(a,b,c)
  %2006 = call float @dx.op.tertiary.f32(i32 46, float %1997, float %1984, float %2005)  ; FMad(a,b,c)
  %2007 = call float @dx.op.unary.f32(i32 6, float %2000)  ; FAbs(value)
  %2008 = call float @dx.op.unary.f32(i32 6, float %2003)  ; FAbs(value)
  %2009 = call float @dx.op.unary.f32(i32 6, float %2006)  ; FAbs(value)
  %2010 = fmul fast float %1828, 5.000000e-01
  %2011 = fadd fast float %1976, %2010
  %2012 = fadd fast float %1977, %2010
  %2013 = fadd fast float %1978, %2010
  %2014 = fcmp fast ole float %2007, %2011
  %2015 = fcmp fast ole float %2008, %2012
  %2016 = fcmp fast ole float %2009, %2013
  %2017 = and i1 %2014, %2015
  %2018 = and i1 %2017, %2016
  br i1 %2018, label %2019, label %1952

; <label>:2019                                    ; preds = %1963
  %2020 = extractvalue %dx.types.ResRet.f32 %1968, 1
  %2021 = bitcast float %2020 to i32
  %2022 = lshr i32 %1981, 16
  %2023 = fsub fast float -0.000000e+00, %1976
  %2024 = fsub fast float -0.000000e+00, %1977
  %2025 = call float @dx.op.binary.f32(i32 35, float %2000, float %2023)  ; FMax(a,b)
  %2026 = call float @dx.op.binary.f32(i32 35, float %2003, float %2024)  ; FMax(a,b)
  %2027 = call float @dx.op.binary.f32(i32 36, float %2025, float %1976)  ; FMin(a,b)
  %2028 = call float @dx.op.binary.f32(i32 36, float %2026, float %1977)  ; FMin(a,b)
  %2029 = fdiv fast float %2027, %1976
  %2030 = fdiv fast float %2028, %1977
  %2031 = fmul fast float %2029, 5.000000e-01
  %2032 = fmul fast float %2030, 5.000000e-01
  %2033 = fadd fast float %2031, 5.000000e-01
  %2034 = fsub fast float 5.000000e-01, %2032
  %2035 = call float @dx.op.unary.f32(i32 7, float %2033)  ; Saturate(value)
  %2036 = call float @dx.op.unary.f32(i32 7, float %2034)  ; Saturate(value)
  %2037 = call float @dx.op.binary.f32(i32 36, float %2035, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2038 = call float @dx.op.binary.f32(i32 36, float %2036, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2039 = uitofp i32 %1982 to float
  %2040 = uitofp i32 %2022 to float
  %2041 = fmul fast float %2037, %2039
  %2042 = fmul fast float %2038, %2040
  %2043 = fptoui float %2041 to i32
  %2044 = fptoui float %2042 to i32
  %2045 = mul i32 %2044, %1982
  %2046 = add i32 %2043, %2021
  %2047 = add i32 %2046, %2045
  %2048 = shl i32 %2047, 3
  %2049 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2050 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2049, i32 %2048, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2051 = extractvalue %dx.types.ResRet.i32 %2050, 0
  %2052 = shl i32 %2051, 3
  %2053 = and i32 %2052, 32760
  %2054 = lshr i32 %2051, 9
  %2055 = and i32 %2054, 32760
  %2056 = lshr i32 %2051, 24
  %2057 = and i32 %2056, 15
  %2058 = lshr i32 %2051, 28
  %2059 = add nuw nsw i32 %2057, 25
  %2060 = add nuw nsw i32 %2058, 25
  %2061 = and i32 %2059, 31
  %2062 = and i32 %2060, 31
  %2063 = shl i32 1, %2061
  %2064 = shl i32 1, %2062
  %2065 = icmp ugt i32 %2057, 7
  %2066 = icmp slt i32 %2051, 0
  %2067 = select i1 %2065, i32 %2063, i32 1
  %2068 = select i1 %2066, i32 %2064, i32 1
  %2069 = uitofp i32 %2067 to float
  %2070 = uitofp i32 %2068 to float
  %2071 = fmul fast float %2069, %2037
  %2072 = fmul fast float %2070, %2038
  %2073 = fptoui float %2071 to i32
  %2074 = fptoui float %2072 to i32
  %2075 = shl i32 1, %2057
  %2076 = shl i32 1, %2058
  %2077 = call float @dx.op.unary.f32(i32 22, float %2071)  ; Frc(value)
  %2078 = call float @dx.op.unary.f32(i32 22, float %2072)  ; Frc(value)
  %2079 = icmp eq i32 %2073, 0
  %2080 = icmp eq i32 %2074, 0
  %2081 = select i1 %2079, float 0.000000e+00, float 5.000000e-01
  %2082 = select i1 %2080, float 0.000000e+00, float 5.000000e-01
  %2083 = add i32 %2073, 1
  %2084 = add i32 %2074, 1
  %2085 = icmp eq i32 %2083, %2067
  %2086 = icmp eq i32 %2084, %2068
  %2087 = uitofp i32 %2075 to float
  %2088 = select i1 %2065, float 1.280000e+02, float %2087
  %2089 = uitofp i32 %2076 to float
  %2090 = select i1 %2066, float 1.280000e+02, float %2089
  %2091 = fsub fast float %2088, %2081
  %2092 = fsub fast float %2090, %2082
  %2093 = select i1 %2085, float -0.000000e+00, float -5.000000e-01
  %2094 = fadd fast float %2091, %2093
  %2095 = select i1 %2086, float -0.000000e+00, float -5.000000e-01
  %2096 = fadd fast float %2092, %2095
  %2097 = fmul fast float %2094, %2077
  %2098 = fmul fast float %2096, %2078
  %2099 = fadd fast float %2097, %2081
  %2100 = fadd fast float %2098, %2082
  %2101 = fadd fast float %2088, -1.500000e+00
  %2102 = fadd fast float %2090, -1.500000e+00
  %2103 = call float @dx.op.binary.f32(i32 35, float %2099, float 5.000000e-01)  ; FMax(a,b)
  %2104 = call float @dx.op.binary.f32(i32 35, float %2100, float 5.000000e-01)  ; FMax(a,b)
  %2105 = call float @dx.op.binary.f32(i32 36, float %2103, float %2101)  ; FMin(a,b)
  %2106 = call float @dx.op.binary.f32(i32 36, float %2104, float %2102)  ; FMin(a,b)
  %2107 = uitofp i32 %2053 to float
  %2108 = uitofp i32 %2055 to float
  %2109 = fadd fast float %2105, %2107
  %2110 = fadd fast float %2106, %2108
  %2111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2112 = extractvalue %dx.types.CBufRet.f32 %2111, 0
  %2113 = extractvalue %dx.types.CBufRet.f32 %2111, 1
  %2114 = fmul fast float %2112, %2109
  %2115 = fmul fast float %2113, %2110
  %2116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2117 = extractvalue %dx.types.CBufRet.f32 %2116, 2
  %2118 = extractvalue %dx.types.CBufRet.f32 %2116, 3
  %2119 = fmul fast float %2114, %2117
  %2120 = fmul fast float %2115, %2118
  %2121 = fadd fast float %2119, 0x3FE0100000000000
  %2122 = fadd fast float %2120, 0x3FE0100000000000
  %2123 = call float @dx.op.unary.f32(i32 22, float %2121)  ; Frc(value)
  %2124 = call float @dx.op.unary.f32(i32 22, float %2122)  ; Frc(value)
  %2125 = fsub fast float 1.000000e+00, %2123
  %2126 = fmul fast float %2125, %2124
  %2127 = fmul fast float %2124, %2123
  %2128 = fsub fast float 1.000000e+00, %2124
  %2129 = fmul fast float %2128, %2123
  %2130 = fmul fast float %2128, %2125
  %2131 = icmp eq i32 %2057, 0
  br i1 %2131, label %1952, label %2132

; <label>:2132                                    ; preds = %2019
  br i1 %1813, label %2138, label %2133

; <label>:2133                                    ; preds = %2132
  %2134 = icmp ult i32 %1980, 2
  br i1 %2134, label %2138, label %2135

; <label>:2135                                    ; preds = %2133
  %2136 = icmp ult i32 %1980, 4
  %2137 = select i1 %2136, float %1854, float %1855
  br label %2138

; <label>:2138                                    ; preds = %2135, %2133, %2132
  %2139 = phi float [ 1.000000e+00, %2132 ], [ %1853, %2133 ], [ %2137, %2135 ]
  %2140 = fcmp fast ogt float %2139, 0.000000e+00
  br i1 %2140, label %2141, label %1952

; <label>:2141                                    ; preds = %2138
  %2142 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2143 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2144 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2142, %dx.types.Handle %2143, float %2114, float %2115, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2145 = extractvalue %dx.types.ResRet.f32 %2144, 0
  %2146 = extractvalue %dx.types.ResRet.f32 %2144, 1
  %2147 = extractvalue %dx.types.ResRet.f32 %2144, 2
  %2148 = extractvalue %dx.types.ResRet.f32 %2144, 3
  %2149 = fdiv fast float %2006, %1978
  %2150 = fmul fast float %2149, 5.000000e-01
  %2151 = fsub fast float 5.000000e-01, %2150
  %2152 = fdiv fast float %1828, %1978
  %2153 = fmul fast float %2152, 2.500000e-01
  %2154 = fcmp uge float %2145, 1.000000e+00
  %2155 = or i1 %1813, %2154
  %2156 = select i1 %2154, float 0.000000e+00, float 1.000000e+00
  br i1 %2155, label %2164, label %2157

; <label>:2157                                    ; preds = %2141
  %2158 = fsub fast float %2151, %2145
  %2159 = call float @dx.op.unary.f32(i32 6, float %2158)  ; FAbs(value)
  %2160 = fsub fast float %2159, %2152
  %2161 = fdiv fast float %2160, %2153
  %2162 = call float @dx.op.unary.f32(i32 7, float %2161)  ; Saturate(value)
  %2163 = fsub fast float 1.000000e+00, %2162
  br label %2164

; <label>:2164                                    ; preds = %2157, %2141
  %2165 = phi float [ %2163, %2157 ], [ %2156, %2141 ]
  %2166 = fcmp uge float %2146, 1.000000e+00
  %2167 = or i1 %1813, %2166
  %2168 = select i1 %2166, float 0.000000e+00, float 1.000000e+00
  br i1 %2167, label %4213, label %4206

; <label>:2169                                    ; preds = %4237
  %2170 = fdiv fast float %4239, %4243
  %2171 = fdiv fast float %4240, %4243
  %2172 = fdiv fast float %4241, %4243
  %2173 = fdiv fast float %4242, %4243
  %2174 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2175 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2174, %dx.types.Handle %2143, float %2114, float %2115, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2176 = extractvalue %dx.types.ResRet.f32 %2175, 0
  %2177 = extractvalue %dx.types.ResRet.f32 %2175, 1
  %2178 = extractvalue %dx.types.ResRet.f32 %2175, 2
  %2179 = extractvalue %dx.types.ResRet.f32 %2175, 3
  %2180 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2174, %dx.types.Handle %2143, float %2114, float %2115, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2181 = extractvalue %dx.types.ResRet.f32 %2180, 0
  %2182 = extractvalue %dx.types.ResRet.f32 %2180, 1
  %2183 = extractvalue %dx.types.ResRet.f32 %2180, 2
  %2184 = extractvalue %dx.types.ResRet.f32 %2180, 3
  %2185 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2174, %dx.types.Handle %2143, float %2114, float %2115, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2186 = extractvalue %dx.types.ResRet.f32 %2185, 0
  %2187 = extractvalue %dx.types.ResRet.f32 %2185, 1
  %2188 = extractvalue %dx.types.ResRet.f32 %2185, 2
  %2189 = extractvalue %dx.types.ResRet.f32 %2185, 3
  %2190 = call float @dx.op.dot4.f32(i32 56, float %2176, float %2177, float %2178, float %2179, float %2170, float %2171, float %2172, float %2173)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2191 = call float @dx.op.dot4.f32(i32 56, float %2181, float %2182, float %2183, float %2184, float %2170, float %2171, float %2172, float %2173)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2192 = call float @dx.op.dot4.f32(i32 56, float %2186, float %2187, float %2188, float %2189, float %2170, float %2171, float %2172, float %2173)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2193 = fmul fast float %2190, %4244
  %2194 = fmul fast float %2191, %4244
  %2195 = fmul fast float %2192, %4244
  %2196 = fadd fast float %2193, %1934
  %2197 = fadd fast float %2194, %1935
  %2198 = fadd fast float %2195, %1936
  %2199 = fadd fast float %4244, %1937
  %2200 = fcmp fast ogt float %4244, %1933
  br i1 %2200, label %2201, label %1952

; <label>:2201                                    ; preds = %2169
  br label %1952

; <label>:2202                                    ; preds = %1952
  br label %2203

; <label>:2203                                    ; preds = %2202, %1927, %1683
  %2204 = phi float [ 0.000000e+00, %1683 ], [ 0.000000e+00, %1927 ], [ %1954, %2202 ]
  %2205 = phi float [ 0.000000e+00, %1683 ], [ 0.000000e+00, %1927 ], [ %1955, %2202 ]
  %2206 = phi float [ 0.000000e+00, %1683 ], [ 0.000000e+00, %1927 ], [ %1956, %2202 ]
  %2207 = phi float [ 0.000000e+00, %1683 ], [ 0.000000e+00, %1927 ], [ %1957, %2202 ]
  %2208 = fcmp fast ogt float %2207, 0.000000e+00
  br i1 %2208, label %2209, label %2213

; <label>:2209                                    ; preds = %2203
  %2210 = fdiv fast float %2204, %2207
  %2211 = fdiv fast float %2205, %2207
  %2212 = fdiv fast float %2206, %2207
  br label %2213

; <label>:2213                                    ; preds = %2209, %2203, %782, %386
  %2214 = phi float [ 0.000000e+00, %386 ], [ 0.000000e+00, %782 ], [ %1760, %2209 ], [ %1760, %2203 ]
  %2215 = phi float [ 0.000000e+00, %386 ], [ 0.000000e+00, %782 ], [ %1761, %2209 ], [ %1761, %2203 ]
  %2216 = phi float [ 0.000000e+00, %386 ], [ 0.000000e+00, %782 ], [ %1762, %2209 ], [ %1762, %2203 ]
  %2217 = phi float [ %252, %386 ], [ %784, %782 ], [ %784, %2209 ], [ %784, %2203 ]
  %2218 = phi float [ 1.000000e+00, %386 ], [ 1.000000e+00, %782 ], [ 0.000000e+00, %2209 ], [ 0.000000e+00, %2203 ]
  %2219 = phi float [ 0.000000e+00, %386 ], [ 0.000000e+00, %782 ], [ %2210, %2209 ], [ 0.000000e+00, %2203 ]
  %2220 = phi float [ 0.000000e+00, %386 ], [ 0.000000e+00, %782 ], [ %2211, %2209 ], [ 0.000000e+00, %2203 ]
  %2221 = phi float [ 0.000000e+00, %386 ], [ 0.000000e+00, %782 ], [ %2212, %2209 ], [ 0.000000e+00, %2203 ]
  %2222 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2223 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2222, i32 %435, i32 undef)  ; BufferLoad(srv,index,wot)
  %2224 = extractvalue %dx.types.ResRet.i32 %2223, 0
  %2225 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2226 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2225, i32 %435, i32 undef)  ; BufferLoad(srv,index,wot)
  %2227 = extractvalue %dx.types.ResRet.i32 %2226, 0
  br i1 %442, label %2228, label %3398

; <label>:2228                                    ; preds = %2213
  %2229 = call float @dx.op.binary.f32(i32 36, float %406, float %2217)  ; FMin(a,b)
  %2230 = icmp eq i32 %2224, 0
  br i1 %2230, label %2937, label %2231

; <label>:2231                                    ; preds = %2228
  br label %2232

; <label>:2232                                    ; preds = %2922, %2231
  %2233 = phi float [ %2931, %2922 ], [ %2229, %2231 ]
  %2234 = phi i32 [ %2932, %2922 ], [ 0, %2231 ]
  %2235 = phi i32 [ %2933, %2922 ], [ 0, %2231 ]
  %2236 = phi i32 [ %2934, %2922 ], [ 0, %2231 ]
  %2237 = add i32 %2236, %2227
  %2238 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2239 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2238, i32 %2237, i32 undef)  ; BufferLoad(srv,index,wot)
  %2240 = extractvalue %dx.types.ResRet.i32 %2239, 0
  %2241 = mul i32 %2240, 3
  %2242 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2243 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2242, i32 %2241, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2244 = extractvalue %dx.types.ResRet.f32 %2243, 3
  %2245 = bitcast float %2244 to i32
  %2246 = mul i32 %2245, 6
  %2247 = add i32 %2246, 4
  %2248 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2249 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2248, i32 %2247, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2250 = extractvalue %dx.types.ResRet.f32 %2249, 0
  %2251 = bitcast float %2250 to i32
  %2252 = mul i32 %2251, 10
  %2253 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2254 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2253, i32 %2252, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2255 = extractvalue %dx.types.ResRet.f32 %2254, 0
  %2256 = extractvalue %dx.types.ResRet.f32 %2254, 1
  %2257 = extractvalue %dx.types.ResRet.f32 %2254, 2
  %2258 = or i32 %2252, 1
  %2259 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2253, i32 %2258, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2260 = extractvalue %dx.types.ResRet.f32 %2259, 0
  %2261 = extractvalue %dx.types.ResRet.f32 %2259, 1
  %2262 = extractvalue %dx.types.ResRet.f32 %2259, 2
  %2263 = extractvalue %dx.types.ResRet.f32 %2259, 3
  %2264 = add i32 %2252, 2
  %2265 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2253, i32 %2264, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2266 = extractvalue %dx.types.ResRet.f32 %2265, 0
  %2267 = extractvalue %dx.types.ResRet.f32 %2265, 1
  %2268 = extractvalue %dx.types.ResRet.f32 %2265, 2
  %2269 = extractvalue %dx.types.ResRet.f32 %2265, 3
  %2270 = add i32 %2252, 3
  %2271 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2253, i32 %2270, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2272 = extractvalue %dx.types.ResRet.f32 %2271, 0
  %2273 = extractvalue %dx.types.ResRet.f32 %2271, 1
  %2274 = extractvalue %dx.types.ResRet.f32 %2271, 2
  %2275 = extractvalue %dx.types.ResRet.f32 %2271, 3
  %2276 = add i32 %2252, 4
  %2277 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2253, i32 %2276, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2278 = extractvalue %dx.types.ResRet.f32 %2277, 0
  %2279 = extractvalue %dx.types.ResRet.f32 %2277, 1
  %2280 = extractvalue %dx.types.ResRet.f32 %2277, 2
  %2281 = add i32 %2252, 5
  %2282 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2253, i32 %2281, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2283 = extractvalue %dx.types.ResRet.f32 %2282, 0
  %2284 = extractvalue %dx.types.ResRet.f32 %2282, 1
  %2285 = add i32 %2252, 9
  %2286 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2253, i32 %2285, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2287 = extractvalue %dx.types.ResRet.f32 %2286, 3
  %2288 = fmul fast float %2255, 2.097152e+06
  %2289 = fmul fast float %2256, 2.097152e+06
  %2290 = fmul fast float %2257, 2.097152e+06
  %2291 = call float @dx.op.unary.f32(i32 6, float %2278)  ; FAbs(value)
  %2292 = call float @dx.op.unary.f32(i32 6, float %2279)  ; FAbs(value)
  %2293 = call float @dx.op.unary.f32(i32 6, float %2280)  ; FAbs(value)
  %2294 = bitcast float %2283 to i32
  %2295 = and i32 %2294, 65535
  %2296 = lshr i32 %2294, 16
  %2297 = bitcast float %2284 to i32
  %2298 = fsub fast float %396, %2288
  %2299 = fsub fast float %2298, %2263
  %2300 = fsub fast float %397, %2289
  %2301 = fsub fast float %2300, %2269
  %2302 = fsub fast float %398, %2290
  %2303 = fsub fast float %2302, %2275
  %2304 = fmul fast float %2299, %2260
  %2305 = call float @dx.op.tertiary.f32(i32 46, float %2301, float %2266, float %2304)  ; FMad(a,b,c)
  %2306 = call float @dx.op.tertiary.f32(i32 46, float %2303, float %2272, float %2305)  ; FMad(a,b,c)
  %2307 = fmul fast float %2299, %2261
  %2308 = call float @dx.op.tertiary.f32(i32 46, float %2301, float %2267, float %2307)  ; FMad(a,b,c)
  %2309 = call float @dx.op.tertiary.f32(i32 46, float %2303, float %2273, float %2308)  ; FMad(a,b,c)
  %2310 = fmul fast float %2299, %2262
  %2311 = call float @dx.op.tertiary.f32(i32 46, float %2301, float %2268, float %2310)  ; FMad(a,b,c)
  %2312 = call float @dx.op.tertiary.f32(i32 46, float %2303, float %2274, float %2311)  ; FMad(a,b,c)
  %2313 = fmul fast float %2260, %321
  %2314 = call float @dx.op.tertiary.f32(i32 46, float %331, float %2266, float %2313)  ; FMad(a,b,c)
  %2315 = call float @dx.op.tertiary.f32(i32 46, float %339, float %2272, float %2314)  ; FMad(a,b,c)
  %2316 = fmul fast float %2261, %321
  %2317 = call float @dx.op.tertiary.f32(i32 46, float %331, float %2267, float %2316)  ; FMad(a,b,c)
  %2318 = call float @dx.op.tertiary.f32(i32 46, float %339, float %2273, float %2317)  ; FMad(a,b,c)
  %2319 = fmul fast float %2262, %321
  %2320 = call float @dx.op.tertiary.f32(i32 46, float %331, float %2268, float %2319)  ; FMad(a,b,c)
  %2321 = call float @dx.op.tertiary.f32(i32 46, float %339, float %2274, float %2320)  ; FMad(a,b,c)
  %2322 = fmul fast float %2315, %2229
  %2323 = fmul fast float %2318, %2229
  %2324 = fmul fast float %2321, %2229
  %2325 = fsub fast float -0.000000e+00, %2291
  %2326 = fsub fast float -0.000000e+00, %2292
  %2327 = fsub fast float -0.000000e+00, %2293
  %2328 = fdiv fast float 1.000000e+00, %2322
  %2329 = fdiv fast float 1.000000e+00, %2323
  %2330 = fdiv fast float 1.000000e+00, %2324
  %2331 = fsub fast float %2325, %2306
  %2332 = fsub fast float %2326, %2309
  %2333 = fsub fast float %2327, %2312
  %2334 = fmul fast float %2328, %2331
  %2335 = fmul fast float %2329, %2332
  %2336 = fmul fast float %2330, %2333
  %2337 = fsub fast float %2291, %2306
  %2338 = fsub fast float %2292, %2309
  %2339 = fsub fast float %2293, %2312
  %2340 = fmul fast float %2328, %2337
  %2341 = fmul fast float %2329, %2338
  %2342 = fmul fast float %2330, %2339
  %2343 = call float @dx.op.binary.f32(i32 36, float %2334, float %2340)  ; FMin(a,b)
  %2344 = call float @dx.op.binary.f32(i32 36, float %2335, float %2341)  ; FMin(a,b)
  %2345 = call float @dx.op.binary.f32(i32 36, float %2336, float %2342)  ; FMin(a,b)
  %2346 = call float @dx.op.binary.f32(i32 35, float %2334, float %2340)  ; FMax(a,b)
  %2347 = call float @dx.op.binary.f32(i32 35, float %2335, float %2341)  ; FMax(a,b)
  %2348 = call float @dx.op.binary.f32(i32 35, float %2336, float %2342)  ; FMax(a,b)
  %2349 = call float @dx.op.binary.f32(i32 35, float %2344, float %2345)  ; FMax(a,b)
  %2350 = call float @dx.op.binary.f32(i32 35, float %2343, float %2349)  ; FMax(a,b)
  %2351 = call float @dx.op.binary.f32(i32 36, float %2347, float %2348)  ; FMin(a,b)
  %2352 = call float @dx.op.binary.f32(i32 36, float %2346, float %2351)  ; FMin(a,b)
  %2353 = call float @dx.op.unary.f32(i32 7, float %2350)  ; Saturate(value)
  %2354 = call float @dx.op.unary.f32(i32 7, float %2352)  ; Saturate(value)
  %2355 = fmul fast float %2322, %2322
  %2356 = fmul fast float %2323, %2323
  %2357 = fadd fast float %2356, %2355
  %2358 = fmul fast float %2324, %2324
  %2359 = fadd fast float %2357, %2358
  %2360 = call float @dx.op.unary.f32(i32 24, float %2359)  ; Sqrt(value)
  %2361 = fmul fast float %2360, %2353
  %2362 = fmul fast float %2360, %2354
  %2363 = call float @dx.op.binary.f32(i32 35, float %2361, float %404)  ; FMax(a,b)
  %2364 = call float @dx.op.binary.f32(i32 36, float %2362, float %2229)  ; FMin(a,b)
  %2365 = fcmp fast olt float %2363, %2364
  br i1 %2365, label %2366, label %2922

; <label>:2366                                    ; preds = %2232
  %2367 = extractvalue %dx.types.ResRet.f32 %2277, 3
  %2368 = bitcast float %2367 to i32
  %2369 = and i32 %2368, 16777216
  %2370 = icmp eq i32 %2369, 0
  br i1 %2370, label %2922, label %2371

; <label>:2371                                    ; preds = %2366
  %2372 = fmul fast float %2363, %2315
  %2373 = fmul fast float %2363, %2318
  %2374 = fmul fast float %2363, %2321
  %2375 = fadd fast float %2372, %2306
  %2376 = fadd fast float %2373, %2309
  %2377 = fadd fast float %2374, %2312
  %2378 = fdiv fast float %2375, %2291
  %2379 = fdiv fast float %2376, %2292
  %2380 = fmul fast float %2378, 5.000000e-01
  %2381 = fmul fast float %2379, 5.000000e-01
  %2382 = fadd fast float %2380, 5.000000e-01
  %2383 = fsub fast float 5.000000e-01, %2381
  %2384 = call float @dx.op.unary.f32(i32 7, float %2382)  ; Saturate(value)
  %2385 = call float @dx.op.unary.f32(i32 7, float %2383)  ; Saturate(value)
  %2386 = call float @dx.op.binary.f32(i32 36, float %2384, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2387 = call float @dx.op.binary.f32(i32 36, float %2385, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2388 = uitofp i32 %2295 to float
  %2389 = uitofp i32 %2296 to float
  %2390 = fmul fast float %2386, %2388
  %2391 = fmul fast float %2387, %2389
  %2392 = fptoui float %2390 to i32
  %2393 = fptoui float %2391 to i32
  %2394 = mul i32 %2393, %2295
  %2395 = add i32 %2392, %2297
  %2396 = add i32 %2395, %2394
  %2397 = shl i32 %2396, 3
  %2398 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2399 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2398, i32 %2397, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2400 = extractvalue %dx.types.ResRet.i32 %2399, 0
  %2401 = shl i32 %2400, 3
  %2402 = and i32 %2401, 32760
  %2403 = lshr i32 %2400, 9
  %2404 = and i32 %2403, 32760
  %2405 = lshr i32 %2400, 24
  %2406 = and i32 %2405, 15
  %2407 = lshr i32 %2400, 28
  %2408 = add nuw nsw i32 %2406, 25
  %2409 = add nuw nsw i32 %2407, 25
  %2410 = and i32 %2408, 31
  %2411 = and i32 %2409, 31
  %2412 = shl i32 1, %2410
  %2413 = shl i32 1, %2411
  %2414 = icmp ugt i32 %2406, 7
  %2415 = icmp slt i32 %2400, 0
  %2416 = select i1 %2414, i32 %2412, i32 1
  %2417 = select i1 %2415, i32 %2413, i32 1
  %2418 = uitofp i32 %2416 to float
  %2419 = uitofp i32 %2417 to float
  %2420 = fmul fast float %2418, %2386
  %2421 = fmul fast float %2419, %2387
  %2422 = fptoui float %2420 to i32
  %2423 = fptoui float %2421 to i32
  %2424 = shl i32 1, %2406
  %2425 = shl i32 1, %2407
  %2426 = call float @dx.op.unary.f32(i32 22, float %2420)  ; Frc(value)
  %2427 = call float @dx.op.unary.f32(i32 22, float %2421)  ; Frc(value)
  %2428 = icmp eq i32 %2422, 0
  %2429 = icmp eq i32 %2423, 0
  %2430 = select i1 %2428, float 0.000000e+00, float 5.000000e-01
  %2431 = select i1 %2429, float 0.000000e+00, float 5.000000e-01
  %2432 = add i32 %2422, 1
  %2433 = add i32 %2423, 1
  %2434 = icmp eq i32 %2432, %2416
  %2435 = icmp eq i32 %2433, %2417
  %2436 = uitofp i32 %2424 to float
  %2437 = select i1 %2414, float 1.280000e+02, float %2436
  %2438 = uitofp i32 %2425 to float
  %2439 = select i1 %2415, float 1.280000e+02, float %2438
  %2440 = fsub fast float %2437, %2430
  %2441 = fsub fast float %2439, %2431
  %2442 = select i1 %2434, float -0.000000e+00, float -5.000000e-01
  %2443 = fadd fast float %2440, %2442
  %2444 = select i1 %2435, float -0.000000e+00, float -5.000000e-01
  %2445 = fadd fast float %2441, %2444
  %2446 = fmul fast float %2443, %2426
  %2447 = fmul fast float %2445, %2427
  %2448 = fadd fast float %2446, %2430
  %2449 = fadd fast float %2447, %2431
  %2450 = fadd fast float %2437, -1.500000e+00
  %2451 = fadd fast float %2439, -1.500000e+00
  %2452 = call float @dx.op.binary.f32(i32 35, float %2448, float 5.000000e-01)  ; FMax(a,b)
  %2453 = call float @dx.op.binary.f32(i32 35, float %2449, float 5.000000e-01)  ; FMax(a,b)
  %2454 = call float @dx.op.binary.f32(i32 36, float %2452, float %2450)  ; FMin(a,b)
  %2455 = call float @dx.op.binary.f32(i32 36, float %2453, float %2451)  ; FMin(a,b)
  %2456 = uitofp i32 %2402 to float
  %2457 = uitofp i32 %2404 to float
  %2458 = fadd fast float %2454, %2456
  %2459 = fadd fast float %2455, %2457
  %2460 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2461 = extractvalue %dx.types.CBufRet.f32 %2460, 0
  %2462 = extractvalue %dx.types.CBufRet.f32 %2460, 1
  %2463 = fmul fast float %2461, %2458
  %2464 = fmul fast float %2462, %2459
  %2465 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2466 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2467 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2465, %dx.types.Handle %2466, float %2463, float %2464, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2468 = extractvalue %dx.types.ResRet.f32 %2467, 0
  %2469 = fmul fast float %2468, 2.000000e+00
  %2470 = fadd fast float %2469, -1.000000e+00
  %2471 = fmul fast float %2470, %2293
  %2472 = fsub fast float -0.000000e+00, %2471
  %2473 = fcmp fast ogt float %2377, %2472
  %2474 = zext i1 %2473 to i32
  %2475 = fcmp fast olt float %2363, %2287
  br i1 %2475, label %2476, label %2676

; <label>:2476                                    ; preds = %2371
  %2477 = fmul fast float %2315, %2287
  %2478 = fmul fast float %2318, %2287
  %2479 = fmul fast float %2321, %2287
  %2480 = fadd fast float %2477, %2306
  %2481 = fadd fast float %2478, %2309
  %2482 = fadd fast float %2479, %2312
  %2483 = fdiv fast float %2480, %2291
  %2484 = fdiv fast float %2481, %2292
  %2485 = fmul fast float %2483, 5.000000e-01
  %2486 = fmul fast float %2484, 5.000000e-01
  %2487 = fadd fast float %2485, 5.000000e-01
  %2488 = fsub fast float 5.000000e-01, %2486
  %2489 = call float @dx.op.unary.f32(i32 7, float %2487)  ; Saturate(value)
  %2490 = call float @dx.op.unary.f32(i32 7, float %2488)  ; Saturate(value)
  %2491 = call float @dx.op.binary.f32(i32 36, float %2489, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2492 = call float @dx.op.binary.f32(i32 36, float %2490, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2493 = fmul fast float %2491, %2388
  %2494 = fmul fast float %2492, %2389
  %2495 = fptoui float %2493 to i32
  %2496 = fptoui float %2494 to i32
  %2497 = mul i32 %2496, %2295
  %2498 = add i32 %2495, %2297
  %2499 = add i32 %2498, %2497
  %2500 = shl i32 %2499, 3
  %2501 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2398, i32 %2500, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2502 = extractvalue %dx.types.ResRet.i32 %2501, 0
  %2503 = shl i32 %2502, 3
  %2504 = and i32 %2503, 32760
  %2505 = lshr i32 %2502, 9
  %2506 = and i32 %2505, 32760
  %2507 = lshr i32 %2502, 24
  %2508 = and i32 %2507, 15
  %2509 = lshr i32 %2502, 28
  %2510 = add nuw nsw i32 %2508, 25
  %2511 = add nuw nsw i32 %2509, 25
  %2512 = and i32 %2510, 31
  %2513 = and i32 %2511, 31
  %2514 = shl i32 1, %2512
  %2515 = shl i32 1, %2513
  %2516 = icmp ugt i32 %2508, 7
  %2517 = icmp slt i32 %2502, 0
  %2518 = select i1 %2516, i32 %2514, i32 1
  %2519 = select i1 %2517, i32 %2515, i32 1
  %2520 = uitofp i32 %2518 to float
  %2521 = uitofp i32 %2519 to float
  %2522 = fmul fast float %2520, %2491
  %2523 = fmul fast float %2521, %2492
  %2524 = fptoui float %2522 to i32
  %2525 = fptoui float %2523 to i32
  %2526 = shl i32 1, %2508
  %2527 = shl i32 1, %2509
  %2528 = call float @dx.op.unary.f32(i32 22, float %2522)  ; Frc(value)
  %2529 = call float @dx.op.unary.f32(i32 22, float %2523)  ; Frc(value)
  %2530 = icmp eq i32 %2524, 0
  %2531 = icmp eq i32 %2525, 0
  %2532 = select i1 %2530, float 0.000000e+00, float 5.000000e-01
  %2533 = select i1 %2531, float 0.000000e+00, float 5.000000e-01
  %2534 = add i32 %2524, 1
  %2535 = add i32 %2525, 1
  %2536 = icmp eq i32 %2534, %2518
  %2537 = icmp eq i32 %2535, %2519
  %2538 = uitofp i32 %2526 to float
  %2539 = select i1 %2516, float 1.280000e+02, float %2538
  %2540 = uitofp i32 %2527 to float
  %2541 = select i1 %2517, float 1.280000e+02, float %2540
  %2542 = fsub fast float %2539, %2532
  %2543 = fsub fast float %2541, %2533
  %2544 = select i1 %2536, float -0.000000e+00, float -5.000000e-01
  %2545 = fadd fast float %2542, %2544
  %2546 = select i1 %2537, float -0.000000e+00, float -5.000000e-01
  %2547 = fadd fast float %2543, %2546
  %2548 = fmul fast float %2545, %2528
  %2549 = fmul fast float %2547, %2529
  %2550 = fadd fast float %2548, %2532
  %2551 = fadd fast float %2549, %2533
  %2552 = fadd fast float %2539, -1.500000e+00
  %2553 = fadd fast float %2541, -1.500000e+00
  %2554 = call float @dx.op.binary.f32(i32 35, float %2550, float 5.000000e-01)  ; FMax(a,b)
  %2555 = call float @dx.op.binary.f32(i32 35, float %2551, float 5.000000e-01)  ; FMax(a,b)
  %2556 = call float @dx.op.binary.f32(i32 36, float %2554, float %2552)  ; FMin(a,b)
  %2557 = call float @dx.op.binary.f32(i32 36, float %2555, float %2553)  ; FMin(a,b)
  %2558 = uitofp i32 %2504 to float
  %2559 = uitofp i32 %2506 to float
  %2560 = fadd fast float %2556, %2558
  %2561 = fadd fast float %2557, %2559
  %2562 = fmul fast float %2461, %2560
  %2563 = fmul fast float %2462, %2561
  %2564 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2465, %dx.types.Handle %2466, float %2562, float %2563, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2565 = extractvalue %dx.types.ResRet.f32 %2564, 0
  %2566 = fmul fast float %2565, 2.000000e+00
  %2567 = fadd fast float %2566, -1.000000e+00
  %2568 = fmul fast float %2567, %2293
  %2569 = fsub fast float -0.000000e+00, %2568
  %2570 = fcmp fast ogt float %2482, %2569
  %2571 = zext i1 %2570 to i32
  br i1 %2473, label %2572, label %2676

; <label>:2572                                    ; preds = %2476
  br i1 %2570, label %2676, label %2573

; <label>:2573                                    ; preds = %2572
  %2574 = fadd fast float %2471, %2377
  %2575 = fsub fast float %2363, %2287
  %2576 = fmul fast float %2575, %2321
  %2577 = fadd fast float %2471, %2576
  %2578 = fsub fast float %2577, %2568
  %2579 = fdiv fast float %2574, %2578
  %2580 = fmul fast float %2579, %2287
  %2581 = fadd fast float %2580, %2363
  %2582 = call float @dx.op.binary.f32(i32 35, float %2581, float %2363)  ; FMax(a,b)
  %2583 = call float @dx.op.binary.f32(i32 36, float %2582, float %2364)  ; FMin(a,b)
  %2584 = fmul fast float %2583, %2315
  %2585 = fmul fast float %2583, %2318
  %2586 = fadd fast float %2584, %2306
  %2587 = fadd fast float %2585, %2309
  %2588 = fdiv fast float %2586, %2291
  %2589 = fdiv fast float %2587, %2292
  %2590 = fmul fast float %2588, 5.000000e-01
  %2591 = fmul fast float %2589, 5.000000e-01
  %2592 = fadd fast float %2590, 5.000000e-01
  %2593 = fsub fast float 5.000000e-01, %2591
  %2594 = call float @dx.op.unary.f32(i32 7, float %2592)  ; Saturate(value)
  %2595 = call float @dx.op.unary.f32(i32 7, float %2593)  ; Saturate(value)
  %2596 = call float @dx.op.binary.f32(i32 36, float %2594, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2597 = call float @dx.op.binary.f32(i32 36, float %2595, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2598 = fmul fast float %2596, %2388
  %2599 = fmul fast float %2597, %2389
  %2600 = fptoui float %2598 to i32
  %2601 = fptoui float %2599 to i32
  %2602 = mul i32 %2601, %2295
  %2603 = add i32 %2600, %2297
  %2604 = add i32 %2603, %2602
  %2605 = shl i32 %2604, 3
  %2606 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2398, i32 %2605, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2607 = extractvalue %dx.types.ResRet.i32 %2606, 0
  %2608 = shl i32 %2607, 3
  %2609 = and i32 %2608, 32760
  %2610 = lshr i32 %2607, 9
  %2611 = and i32 %2610, 32760
  %2612 = lshr i32 %2607, 24
  %2613 = and i32 %2612, 15
  %2614 = lshr i32 %2607, 28
  %2615 = add nuw nsw i32 %2613, 25
  %2616 = add nuw nsw i32 %2614, 25
  %2617 = and i32 %2615, 31
  %2618 = and i32 %2616, 31
  %2619 = shl i32 1, %2617
  %2620 = shl i32 1, %2618
  %2621 = icmp ugt i32 %2613, 7
  %2622 = icmp slt i32 %2607, 0
  %2623 = select i1 %2621, i32 %2619, i32 1
  %2624 = select i1 %2622, i32 %2620, i32 1
  %2625 = uitofp i32 %2623 to float
  %2626 = uitofp i32 %2624 to float
  %2627 = fmul fast float %2625, %2596
  %2628 = fmul fast float %2626, %2597
  %2629 = fptoui float %2627 to i32
  %2630 = fptoui float %2628 to i32
  %2631 = shl i32 1, %2613
  %2632 = shl i32 1, %2614
  %2633 = call float @dx.op.unary.f32(i32 22, float %2627)  ; Frc(value)
  %2634 = call float @dx.op.unary.f32(i32 22, float %2628)  ; Frc(value)
  %2635 = icmp eq i32 %2629, 0
  %2636 = icmp eq i32 %2630, 0
  %2637 = select i1 %2635, float 0.000000e+00, float 5.000000e-01
  %2638 = select i1 %2636, float 0.000000e+00, float 5.000000e-01
  %2639 = add i32 %2629, 1
  %2640 = add i32 %2630, 1
  %2641 = icmp eq i32 %2639, %2623
  %2642 = icmp eq i32 %2640, %2624
  %2643 = uitofp i32 %2631 to float
  %2644 = select i1 %2621, float 1.280000e+02, float %2643
  %2645 = uitofp i32 %2632 to float
  %2646 = select i1 %2622, float 1.280000e+02, float %2645
  %2647 = fsub fast float %2644, %2637
  %2648 = fsub fast float %2646, %2638
  %2649 = select i1 %2641, float -0.000000e+00, float -5.000000e-01
  %2650 = fadd fast float %2647, %2649
  %2651 = select i1 %2642, float -0.000000e+00, float -5.000000e-01
  %2652 = fadd fast float %2648, %2651
  %2653 = fmul fast float %2650, %2633
  %2654 = fmul fast float %2652, %2634
  %2655 = fadd fast float %2653, %2637
  %2656 = fadd fast float %2654, %2638
  %2657 = fadd fast float %2644, -1.500000e+00
  %2658 = fadd fast float %2646, -1.500000e+00
  %2659 = call float @dx.op.binary.f32(i32 35, float %2655, float 5.000000e-01)  ; FMax(a,b)
  %2660 = call float @dx.op.binary.f32(i32 35, float %2656, float 5.000000e-01)  ; FMax(a,b)
  %2661 = call float @dx.op.binary.f32(i32 36, float %2659, float %2657)  ; FMin(a,b)
  %2662 = call float @dx.op.binary.f32(i32 36, float %2660, float %2658)  ; FMin(a,b)
  %2663 = uitofp i32 %2609 to float
  %2664 = uitofp i32 %2611 to float
  %2665 = fadd fast float %2661, %2663
  %2666 = fadd fast float %2662, %2664
  %2667 = fmul fast float %2461, %2665
  %2668 = fmul fast float %2462, %2666
  %2669 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2670 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2669, %dx.types.Handle %2466, float %2667, float %2668, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2671 = extractvalue %dx.types.ResRet.f32 %2670, 0
  %2672 = fcmp fast ogt float %2671, 5.000000e-01
  %2673 = select i1 %2672, float %2583, float %2229
  %2674 = zext i1 %2672 to i32
  %2675 = zext i1 %2672 to i32
  br label %2676

; <label>:2676                                    ; preds = %2573, %2572, %2476, %2371
  %2677 = phi i32 [ %2474, %2371 ], [ %2571, %2572 ], [ %2571, %2476 ], [ %2571, %2573 ]
  %2678 = phi float [ %2472, %2371 ], [ %2569, %2572 ], [ %2569, %2476 ], [ %2569, %2573 ]
  %2679 = phi float [ %2377, %2371 ], [ %2482, %2572 ], [ %2482, %2476 ], [ %2482, %2573 ]
  %2680 = phi float [ %2363, %2371 ], [ %2287, %2572 ], [ %2287, %2476 ], [ %2287, %2573 ]
  %2681 = phi float [ %2229, %2371 ], [ %2229, %2572 ], [ %2229, %2476 ], [ %2673, %2573 ]
  %2682 = phi i32 [ 0, %2371 ], [ 0, %2572 ], [ 0, %2476 ], [ %2674, %2573 ]
  %2683 = phi i32 [ 0, %2371 ], [ 0, %2572 ], [ 0, %2476 ], [ %2675, %2573 ]
  %2684 = icmp eq i32 %2683, 0
  br i1 %2684, label %2685, label %2922

; <label>:2685                                    ; preds = %2676
  %2686 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %2687 = extractvalue %dx.types.CBufRet.i32 %2686, 0
  %2688 = fsub fast float %2364, %2680
  %2689 = sitofp i32 %2687 to float
  %2690 = fdiv fast float %2688, %2689
  %2691 = fmul fast float %2287, %400
  %2692 = call float @dx.op.binary.f32(i32 35, float %2691, float %2690)  ; FMax(a,b)
  %2693 = icmp sgt i32 %2687, 0
  br i1 %2693, label %2694, label %2922

; <label>:2694                                    ; preds = %2685
  br label %2695

; <label>:2695                                    ; preds = %2917, %2694
  %2696 = phi i32 [ %2805, %2917 ], [ %2677, %2694 ]
  %2697 = phi float [ %2803, %2917 ], [ %2678, %2694 ]
  %2698 = phi float [ %2710, %2917 ], [ %2679, %2694 ]
  %2699 = phi float [ %2704, %2917 ], [ %2680, %2694 ]
  %2700 = phi i32 [ %2918, %2917 ], [ 0, %2694 ]
  %2701 = phi float [ %2911, %2917 ], [ %2681, %2694 ]
  %2702 = phi i32 [ %2912, %2917 ], [ %2682, %2694 ]
  %2703 = fadd fast float %2699, %2692
  %2704 = call float @dx.op.binary.f32(i32 36, float %2703, float %2364)  ; FMin(a,b)
  %2705 = fmul fast float %2704, %2315
  %2706 = fmul fast float %2704, %2318
  %2707 = fmul fast float %2704, %2321
  %2708 = fadd fast float %2705, %2306
  %2709 = fadd fast float %2706, %2309
  %2710 = fadd fast float %2707, %2312
  %2711 = fdiv fast float %2708, %2291
  %2712 = fdiv fast float %2709, %2292
  %2713 = fmul fast float %2711, 5.000000e-01
  %2714 = fmul fast float %2712, 5.000000e-01
  %2715 = fadd fast float %2713, 5.000000e-01
  %2716 = fsub fast float 5.000000e-01, %2714
  %2717 = call float @dx.op.unary.f32(i32 7, float %2715)  ; Saturate(value)
  %2718 = call float @dx.op.unary.f32(i32 7, float %2716)  ; Saturate(value)
  %2719 = call float @dx.op.binary.f32(i32 36, float %2717, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2720 = call float @dx.op.binary.f32(i32 36, float %2718, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2721 = fmul fast float %2719, %2388
  %2722 = fmul fast float %2720, %2389
  %2723 = fptoui float %2721 to i32
  %2724 = fptoui float %2722 to i32
  %2725 = mul i32 %2724, %2295
  %2726 = add i32 %2723, %2297
  %2727 = add i32 %2726, %2725
  %2728 = shl i32 %2727, 3
  %2729 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2730 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2729, i32 %2728, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2731 = extractvalue %dx.types.ResRet.i32 %2730, 0
  %2732 = shl i32 %2731, 3
  %2733 = and i32 %2732, 32760
  %2734 = lshr i32 %2731, 9
  %2735 = and i32 %2734, 32760
  %2736 = lshr i32 %2731, 24
  %2737 = and i32 %2736, 15
  %2738 = lshr i32 %2731, 28
  %2739 = add nuw nsw i32 %2737, 25
  %2740 = add nuw nsw i32 %2738, 25
  %2741 = and i32 %2739, 31
  %2742 = and i32 %2740, 31
  %2743 = shl i32 1, %2741
  %2744 = shl i32 1, %2742
  %2745 = icmp ugt i32 %2737, 7
  %2746 = icmp slt i32 %2731, 0
  %2747 = select i1 %2745, i32 %2743, i32 1
  %2748 = select i1 %2746, i32 %2744, i32 1
  %2749 = uitofp i32 %2747 to float
  %2750 = uitofp i32 %2748 to float
  %2751 = fmul fast float %2749, %2719
  %2752 = fmul fast float %2750, %2720
  %2753 = fptoui float %2751 to i32
  %2754 = fptoui float %2752 to i32
  %2755 = shl i32 1, %2737
  %2756 = shl i32 1, %2738
  %2757 = call float @dx.op.unary.f32(i32 22, float %2751)  ; Frc(value)
  %2758 = call float @dx.op.unary.f32(i32 22, float %2752)  ; Frc(value)
  %2759 = icmp eq i32 %2753, 0
  %2760 = icmp eq i32 %2754, 0
  %2761 = select i1 %2759, float 0.000000e+00, float 5.000000e-01
  %2762 = select i1 %2760, float 0.000000e+00, float 5.000000e-01
  %2763 = add i32 %2753, 1
  %2764 = add i32 %2754, 1
  %2765 = icmp eq i32 %2763, %2747
  %2766 = icmp eq i32 %2764, %2748
  %2767 = uitofp i32 %2755 to float
  %2768 = select i1 %2745, float 1.280000e+02, float %2767
  %2769 = uitofp i32 %2756 to float
  %2770 = select i1 %2746, float 1.280000e+02, float %2769
  %2771 = fsub fast float %2768, %2761
  %2772 = fsub fast float %2770, %2762
  %2773 = select i1 %2765, float -0.000000e+00, float -5.000000e-01
  %2774 = fadd fast float %2771, %2773
  %2775 = select i1 %2766, float -0.000000e+00, float -5.000000e-01
  %2776 = fadd fast float %2772, %2775
  %2777 = fmul fast float %2774, %2757
  %2778 = fmul fast float %2776, %2758
  %2779 = fadd fast float %2777, %2761
  %2780 = fadd fast float %2778, %2762
  %2781 = fadd fast float %2768, -1.500000e+00
  %2782 = fadd fast float %2770, -1.500000e+00
  %2783 = call float @dx.op.binary.f32(i32 35, float %2779, float 5.000000e-01)  ; FMax(a,b)
  %2784 = call float @dx.op.binary.f32(i32 35, float %2780, float 5.000000e-01)  ; FMax(a,b)
  %2785 = call float @dx.op.binary.f32(i32 36, float %2783, float %2781)  ; FMin(a,b)
  %2786 = call float @dx.op.binary.f32(i32 36, float %2784, float %2782)  ; FMin(a,b)
  %2787 = uitofp i32 %2733 to float
  %2788 = uitofp i32 %2735 to float
  %2789 = fadd fast float %2785, %2787
  %2790 = fadd fast float %2786, %2788
  %2791 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2792 = extractvalue %dx.types.CBufRet.f32 %2791, 0
  %2793 = extractvalue %dx.types.CBufRet.f32 %2791, 1
  %2794 = fmul fast float %2792, %2789
  %2795 = fmul fast float %2793, %2790
  %2796 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2797 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2798 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2796, %dx.types.Handle %2797, float %2794, float %2795, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2799 = extractvalue %dx.types.ResRet.f32 %2798, 0
  %2800 = fmul fast float %2799, 2.000000e+00
  %2801 = fadd fast float %2800, -1.000000e+00
  %2802 = fmul fast float %2801, %2293
  %2803 = fsub fast float -0.000000e+00, %2802
  %2804 = fcmp fast ogt float %2710, %2803
  %2805 = zext i1 %2804 to i32
  %2806 = icmp ne i32 %2696, 0
  %2807 = xor i1 %2806, %2804
  br i1 %2807, label %2808, label %2910

; <label>:2808                                    ; preds = %2695
  %2809 = fsub fast float %2698, %2697
  %2810 = fsub fast float %2809, %2710
  %2811 = fsub fast float %2810, %2802
  %2812 = fdiv fast float %2809, %2811
  %2813 = fmul fast float %2812, %2692
  %2814 = fadd fast float %2813, %2699
  %2815 = call float @dx.op.binary.f32(i32 35, float %2814, float %2680)  ; FMax(a,b)
  %2816 = call float @dx.op.binary.f32(i32 36, float %2815, float %2364)  ; FMin(a,b)
  %2817 = fmul fast float %2816, %2315
  %2818 = fmul fast float %2816, %2318
  %2819 = fadd fast float %2817, %2306
  %2820 = fadd fast float %2818, %2309
  %2821 = fdiv fast float %2819, %2291
  %2822 = fdiv fast float %2820, %2292
  %2823 = fmul fast float %2821, 5.000000e-01
  %2824 = fmul fast float %2822, 5.000000e-01
  %2825 = fadd fast float %2823, 5.000000e-01
  %2826 = fsub fast float 5.000000e-01, %2824
  %2827 = call float @dx.op.unary.f32(i32 7, float %2825)  ; Saturate(value)
  %2828 = call float @dx.op.unary.f32(i32 7, float %2826)  ; Saturate(value)
  %2829 = call float @dx.op.binary.f32(i32 36, float %2827, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2830 = call float @dx.op.binary.f32(i32 36, float %2828, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2831 = fmul fast float %2829, %2388
  %2832 = fmul fast float %2830, %2389
  %2833 = fptoui float %2831 to i32
  %2834 = fptoui float %2832 to i32
  %2835 = mul i32 %2834, %2295
  %2836 = add i32 %2833, %2297
  %2837 = add i32 %2836, %2835
  %2838 = shl i32 %2837, 3
  %2839 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2729, i32 %2838, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2840 = extractvalue %dx.types.ResRet.i32 %2839, 0
  %2841 = shl i32 %2840, 3
  %2842 = and i32 %2841, 32760
  %2843 = lshr i32 %2840, 9
  %2844 = and i32 %2843, 32760
  %2845 = lshr i32 %2840, 24
  %2846 = and i32 %2845, 15
  %2847 = lshr i32 %2840, 28
  %2848 = add nuw nsw i32 %2846, 25
  %2849 = add nuw nsw i32 %2847, 25
  %2850 = and i32 %2848, 31
  %2851 = and i32 %2849, 31
  %2852 = shl i32 1, %2850
  %2853 = shl i32 1, %2851
  %2854 = icmp ugt i32 %2846, 7
  %2855 = icmp slt i32 %2840, 0
  %2856 = select i1 %2854, i32 %2852, i32 1
  %2857 = select i1 %2855, i32 %2853, i32 1
  %2858 = uitofp i32 %2856 to float
  %2859 = uitofp i32 %2857 to float
  %2860 = fmul fast float %2858, %2829
  %2861 = fmul fast float %2859, %2830
  %2862 = fptoui float %2860 to i32
  %2863 = fptoui float %2861 to i32
  %2864 = shl i32 1, %2846
  %2865 = shl i32 1, %2847
  %2866 = call float @dx.op.unary.f32(i32 22, float %2860)  ; Frc(value)
  %2867 = call float @dx.op.unary.f32(i32 22, float %2861)  ; Frc(value)
  %2868 = icmp eq i32 %2862, 0
  %2869 = icmp eq i32 %2863, 0
  %2870 = select i1 %2868, float 0.000000e+00, float 5.000000e-01
  %2871 = select i1 %2869, float 0.000000e+00, float 5.000000e-01
  %2872 = add i32 %2862, 1
  %2873 = add i32 %2863, 1
  %2874 = icmp eq i32 %2872, %2856
  %2875 = icmp eq i32 %2873, %2857
  %2876 = uitofp i32 %2864 to float
  %2877 = select i1 %2854, float 1.280000e+02, float %2876
  %2878 = uitofp i32 %2865 to float
  %2879 = select i1 %2855, float 1.280000e+02, float %2878
  %2880 = fsub fast float %2877, %2870
  %2881 = fsub fast float %2879, %2871
  %2882 = select i1 %2874, float -0.000000e+00, float -5.000000e-01
  %2883 = fadd fast float %2880, %2882
  %2884 = select i1 %2875, float -0.000000e+00, float -5.000000e-01
  %2885 = fadd fast float %2881, %2884
  %2886 = fmul fast float %2883, %2866
  %2887 = fmul fast float %2885, %2867
  %2888 = fadd fast float %2886, %2870
  %2889 = fadd fast float %2887, %2871
  %2890 = fadd fast float %2877, -1.500000e+00
  %2891 = fadd fast float %2879, -1.500000e+00
  %2892 = call float @dx.op.binary.f32(i32 35, float %2888, float 5.000000e-01)  ; FMax(a,b)
  %2893 = call float @dx.op.binary.f32(i32 35, float %2889, float 5.000000e-01)  ; FMax(a,b)
  %2894 = call float @dx.op.binary.f32(i32 36, float %2892, float %2890)  ; FMin(a,b)
  %2895 = call float @dx.op.binary.f32(i32 36, float %2893, float %2891)  ; FMin(a,b)
  %2896 = uitofp i32 %2842 to float
  %2897 = uitofp i32 %2844 to float
  %2898 = fadd fast float %2894, %2896
  %2899 = fadd fast float %2895, %2897
  %2900 = fmul fast float %2792, %2898
  %2901 = fmul fast float %2793, %2899
  %2902 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2903 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2902, %dx.types.Handle %2797, float %2900, float %2901, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2904 = extractvalue %dx.types.ResRet.f32 %2903, 0
  %2905 = fcmp fast ogt float %2904, 5.000000e-01
  %2906 = xor i32 %2805, 1
  %2907 = select i1 %2905, float %2816, float %2701
  %2908 = select i1 %2905, i32 %2906, i32 %2702
  %2909 = zext i1 %2905 to i32
  br label %2910

; <label>:2910                                    ; preds = %2808, %2695
  %2911 = phi float [ %2701, %2695 ], [ %2907, %2808 ]
  %2912 = phi i32 [ %2702, %2695 ], [ %2908, %2808 ]
  %2913 = phi i32 [ 0, %2695 ], [ %2909, %2808 ]
  %2914 = icmp ne i32 %2913, 0
  %2915 = fcmp fast oge float %2704, %2364
  %2916 = or i1 %2915, %2914
  br i1 %2916, label %2920, label %2917

; <label>:2917                                    ; preds = %2910
  %2918 = add nuw nsw i32 %2700, 1
  %2919 = icmp slt i32 %2918, %2687
  br i1 %2919, label %2695, label %2920

; <label>:2920                                    ; preds = %2917, %2910
  %2921 = phi i32 [ 0, %2917 ], [ %2913, %2910 ]
  br label %2922

; <label>:2922                                    ; preds = %2920, %2685, %2676, %2366, %2232
  %2923 = phi float [ %2681, %2676 ], [ %2229, %2366 ], [ %2229, %2232 ], [ %2681, %2685 ], [ %2911, %2920 ]
  %2924 = phi i32 [ %2682, %2676 ], [ 0, %2366 ], [ 0, %2232 ], [ %2682, %2685 ], [ %2912, %2920 ]
  %2925 = phi i32 [ %2683, %2676 ], [ 0, %2366 ], [ 0, %2232 ], [ 0, %2685 ], [ %2921, %2920 ]
  %2926 = icmp ne i32 %2925, 0
  %2927 = fcmp fast olt float %2923, %2233
  %2928 = and i1 %2927, %2926
  %2929 = icmp ne i32 %2924, 0
  %2930 = zext i1 %2929 to i32
  %2931 = select i1 %2928, float %2923, float %2233
  %2932 = select i1 %2928, i32 %2240, i32 %2234
  %2933 = select i1 %2928, i32 %2930, i32 %2235
  %2934 = add nuw i32 %2236, 1
  %2935 = icmp eq i32 %2934, %2224
  br i1 %2935, label %2936, label %2232

; <label>:2936                                    ; preds = %2922
  br label %2937

; <label>:2937                                    ; preds = %2936, %2228
  %2938 = phi float [ %2229, %2228 ], [ %2931, %2936 ]
  %2939 = phi i32 [ 0, %2228 ], [ %2932, %2936 ]
  %2940 = phi i32 [ 0, %2228 ], [ %2933, %2936 ]
  %2941 = fcmp fast olt float %2938, %2229
  br i1 %2941, label %2942, label %3393

; <label>:2942                                    ; preds = %2937
  %2943 = mul i32 %2939, 3
  %2944 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2945 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2944, i32 %2943, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2946 = extractvalue %dx.types.ResRet.f32 %2945, 3
  %2947 = bitcast float %2946 to i32
  %2948 = fmul fast float %2938, %321
  %2949 = fmul fast float %2938, %331
  %2950 = fmul fast float %2938, %339
  %2951 = icmp eq i32 %2940, 0
  br i1 %2951, label %3393, label %2952

; <label>:2952                                    ; preds = %2942
  %2953 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2954 = extractvalue %dx.types.CBufRet.i32 %2953, 1
  %2955 = icmp ult i32 %2947, %2954
  br i1 %2955, label %2956, label %3383

; <label>:2956                                    ; preds = %2952
  %2957 = mul i32 %2947, 6
  %2958 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2959 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2958, i32 %2957, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2960 = extractvalue %dx.types.ResRet.f32 %2959, 0
  %2961 = extractvalue %dx.types.ResRet.f32 %2959, 1
  %2962 = extractvalue %dx.types.ResRet.f32 %2959, 2
  %2963 = or i32 %2957, 1
  %2964 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2958, i32 %2963, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2965 = extractvalue %dx.types.ResRet.f32 %2964, 0
  %2966 = extractvalue %dx.types.ResRet.f32 %2964, 1
  %2967 = extractvalue %dx.types.ResRet.f32 %2964, 2
  %2968 = extractvalue %dx.types.ResRet.f32 %2964, 3
  %2969 = add i32 %2957, 2
  %2970 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2958, i32 %2969, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2971 = extractvalue %dx.types.ResRet.f32 %2970, 0
  %2972 = extractvalue %dx.types.ResRet.f32 %2970, 1
  %2973 = extractvalue %dx.types.ResRet.f32 %2970, 2
  %2974 = extractvalue %dx.types.ResRet.f32 %2970, 3
  %2975 = add i32 %2957, 3
  %2976 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2958, i32 %2975, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2977 = extractvalue %dx.types.ResRet.f32 %2976, 0
  %2978 = extractvalue %dx.types.ResRet.f32 %2976, 1
  %2979 = extractvalue %dx.types.ResRet.f32 %2976, 2
  %2980 = extractvalue %dx.types.ResRet.f32 %2976, 3
  %2981 = fmul fast float %2960, 2.097152e+06
  %2982 = fmul fast float %2961, 2.097152e+06
  %2983 = fmul fast float %2962, 2.097152e+06
  %2984 = add i32 %2957, 4
  %2985 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2958, i32 %2984, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2986 = extractvalue %dx.types.ResRet.f32 %2985, 0
  %2987 = extractvalue %dx.types.ResRet.f32 %2985, 1
  %2988 = extractvalue %dx.types.ResRet.f32 %2985, 2
  %2989 = extractvalue %dx.types.ResRet.f32 %2985, 3
  %2990 = bitcast float %2986 to i32
  %2991 = bitcast float %2987 to i32
  %2992 = add i32 %2957, 5
  %2993 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2958, i32 %2992, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2994 = extractvalue %dx.types.ResRet.f32 %2993, 0
  %2995 = extractvalue %dx.types.ResRet.f32 %2993, 1
  %2996 = extractvalue %dx.types.ResRet.f32 %2993, 2
  %2997 = extractvalue %dx.types.ResRet.f32 %2993, 3
  %2998 = and i32 %2991, 65536
  %2999 = icmp ne i32 %2998, 0
  %3000 = and i32 %2991, 131072
  %3001 = icmp ne i32 %3000, 0
  %3002 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 0
  %3003 = bitcast i32* %3002 to float*
  store float %2988, float* %3003, align 4, !tbaa !75, !alias.scope !91, !noalias !94
  %3004 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 1
  %3005 = bitcast i32* %3004 to float*
  store float %2989, float* %3005, align 4, !tbaa !75, !alias.scope !91, !noalias !94
  %3006 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 2
  %3007 = bitcast i32* %3006 to float*
  store float %2994, float* %3007, align 4, !tbaa !75, !alias.scope !91, !noalias !94
  %3008 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 3
  %3009 = bitcast i32* %3008 to float*
  store float %2995, float* %3009, align 4, !tbaa !75, !alias.scope !91, !noalias !94
  %3010 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 4
  %3011 = bitcast i32* %3010 to float*
  store float %2996, float* %3011, align 4, !tbaa !75, !alias.scope !91, !noalias !94
  %3012 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 5
  %3013 = bitcast i32* %3012 to float*
  store float %2997, float* %3013, align 4, !tbaa !75, !alias.scope !91, !noalias !94
  %3014 = select i1 %3001, float 7.000000e+01, float 2.000000e+01
  %3015 = fadd fast float %2948, %396
  %3016 = fsub fast float %3015, %2981
  %3017 = fsub fast float %3016, %2968
  %3018 = fadd fast float %2949, %397
  %3019 = fsub fast float %3018, %2982
  %3020 = fsub fast float %3019, %2974
  %3021 = fadd fast float %2950, %398
  %3022 = fsub fast float %3021, %2983
  %3023 = fsub fast float %3022, %2980
  %3024 = fmul fast float %3017, %2965
  %3025 = call float @dx.op.tertiary.f32(i32 46, float %3020, float %2971, float %3024)  ; FMad(a,b,c)
  %3026 = call float @dx.op.tertiary.f32(i32 46, float %3023, float %2977, float %3025)  ; FMad(a,b,c)
  %3027 = fmul fast float %3017, %2966
  %3028 = call float @dx.op.tertiary.f32(i32 46, float %3020, float %2972, float %3027)  ; FMad(a,b,c)
  %3029 = call float @dx.op.tertiary.f32(i32 46, float %3023, float %2978, float %3028)  ; FMad(a,b,c)
  %3030 = fmul fast float %3017, %2967
  %3031 = call float @dx.op.tertiary.f32(i32 46, float %3020, float %2973, float %3030)  ; FMad(a,b,c)
  %3032 = call float @dx.op.tertiary.f32(i32 46, float %3023, float %2979, float %3031)  ; FMad(a,b,c)
  %3033 = fmul fast float %2977, %2977
  %3034 = fmul fast float %2978, %2978
  %3035 = fmul fast float %2979, %2979
  %3036 = fcmp fast ogt float %3033, 0.000000e+00
  br i1 %3036, label %3037, label %3042

; <label>:3037                                    ; preds = %2956
  %3038 = fcmp uge float %2977, 0.000000e+00
  %3039 = zext i1 %3038 to i32
  %3040 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 %3039
  %3041 = load i32, i32* %3040, align 4, !tbaa !75, !noalias !94
  br label %3042

; <label>:3042                                    ; preds = %3037, %2956
  %3043 = phi i32 [ %3041, %3037 ], [ 0, %2956 ]
  %3044 = fcmp fast ogt float %3034, 0.000000e+00
  br i1 %3044, label %3045, label %3051

; <label>:3045                                    ; preds = %3042
  %3046 = fcmp fast olt float %2978, 0.000000e+00
  %3047 = select i1 %3046, i32 2, i32 3
  %3048 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 %3047
  %3049 = load i32, i32* %3048, align 4, !tbaa !75, !noalias !94
  %3050 = or i32 %3049, %3043
  br label %3051

; <label>:3051                                    ; preds = %3045, %3042
  %3052 = phi i32 [ %3050, %3045 ], [ %3043, %3042 ]
  %3053 = fcmp fast ogt float %3035, 0.000000e+00
  br i1 %3053, label %3054, label %3060

; <label>:3054                                    ; preds = %3051
  %3055 = fcmp fast olt float %2979, 0.000000e+00
  %3056 = select i1 %3055, i32 4, i32 5
  %3057 = getelementptr inbounds [6 x i32], [6 x i32]* %62, i32 0, i32 %3056
  %3058 = load i32, i32* %3057, align 4, !tbaa !75, !noalias !94
  %3059 = or i32 %3058, %3052
  br label %3060

; <label>:3060                                    ; preds = %3054, %3051
  %3061 = phi i32 [ %3059, %3054 ], [ %3052, %3051 ]
  %3062 = icmp eq i32 %3061, 0
  br i1 %3062, label %3107, label %3063

; <label>:3063                                    ; preds = %3060
  br label %3064

; <label>:3064                                    ; preds = %3064, %3063
  %3065 = phi i32 [ %3070, %3064 ], [ %3061, %3063 ]
  %3066 = phi i32 [ %3104, %3064 ], [ 0, %3063 ]
  %3067 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %3065)  ; FirstbitLo(value)
  %3068 = and i32 %3067, 31
  %3069 = shl i32 1, %3068
  %3070 = xor i32 %3069, %3065
  %3071 = add i32 %3067, %2990
  %3072 = mul i32 %3071, 10
  %3073 = add i32 %3072, 6
  %3074 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3075 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3074, i32 %3073, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3076 = extractvalue %dx.types.ResRet.f32 %3075, 3
  %3077 = add i32 %3072, 7
  %3078 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3074, i32 %3077, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3079 = extractvalue %dx.types.ResRet.f32 %3078, 3
  %3080 = add i32 %3072, 8
  %3081 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3074, i32 %3080, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3082 = extractvalue %dx.types.ResRet.f32 %3081, 3
  %3083 = add i32 %3072, 9
  %3084 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3074, i32 %3083, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3085 = extractvalue %dx.types.ResRet.f32 %3084, 0
  %3086 = extractvalue %dx.types.ResRet.f32 %3084, 1
  %3087 = extractvalue %dx.types.ResRet.f32 %3084, 2
  %3088 = fsub fast float %3026, %3076
  %3089 = fsub fast float %3029, %3079
  %3090 = fsub fast float %3032, %3082
  %3091 = call float @dx.op.unary.f32(i32 6, float %3088)  ; FAbs(value)
  %3092 = call float @dx.op.unary.f32(i32 6, float %3089)  ; FAbs(value)
  %3093 = call float @dx.op.unary.f32(i32 6, float %3090)  ; FAbs(value)
  %3094 = fmul fast float %3014, 5.000000e-01
  %3095 = fadd fast float %3085, %3094
  %3096 = fadd fast float %3086, %3094
  %3097 = fadd fast float %3087, %3094
  %3098 = fcmp fast ole float %3091, %3095
  %3099 = fcmp fast ole float %3092, %3096
  %3100 = fcmp fast ole float %3093, %3097
  %3101 = and i1 %3098, %3099
  %3102 = and i1 %3101, %3100
  %3103 = select i1 %3102, i32 %3069, i32 0
  %3104 = or i32 %3103, %3066
  %3105 = icmp eq i32 %3065, %3069
  br i1 %3105, label %3106, label %3064

; <label>:3106                                    ; preds = %3064
  br label %3107

; <label>:3107                                    ; preds = %3106, %3060
  %3108 = phi i32 [ 0, %3060 ], [ %3104, %3106 ]
  %3109 = select i1 %2999, i32 1, i32 %3108
  %3110 = icmp eq i32 %3109, 0
  br i1 %3110, label %3383, label %3111

; <label>:3111                                    ; preds = %3107
  br label %3112

; <label>:3112                                    ; preds = %3132, %3111
  %3113 = phi float [ %3133, %3132 ], [ 0.000000e+00, %3111 ]
  %3114 = phi float [ %3134, %3132 ], [ 0.000000e+00, %3111 ]
  %3115 = phi float [ %3135, %3132 ], [ 0.000000e+00, %3111 ]
  %3116 = phi float [ %3136, %3132 ], [ 0.000000e+00, %3111 ]
  %3117 = phi float [ %3137, %3132 ], [ 0.000000e+00, %3111 ]
  %3118 = phi i32 [ %3122, %3132 ], [ %3109, %3111 ]
  %3119 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %3118)  ; FirstbitLo(value)
  %3120 = and i32 %3119, 31
  %3121 = shl i32 1, %3120
  %3122 = xor i32 %3121, %3118
  %3123 = add i32 %3119, %2990
  %3124 = mul i32 %3123, 10
  %3125 = add i32 %3124, 4
  %3126 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3127 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3126, i32 %3125, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3128 = extractvalue %dx.types.ResRet.f32 %3127, 3
  %3129 = bitcast float %3128 to i32
  %3130 = and i32 %3129, 16777216
  %3131 = icmp eq i32 %3130, 0
  br i1 %3131, label %3132, label %3139

; <label>:3132                                    ; preds = %4197, %3381, %3349, %3318, %3199, %3143, %3139, %3112
  %3133 = phi float [ %3113, %3112 ], [ %4204, %3381 ], [ %3113, %3349 ], [ %3113, %4197 ], [ %3113, %3318 ], [ %3113, %3199 ], [ %3113, %3143 ], [ %3113, %3139 ]
  %3134 = phi float [ %3114, %3112 ], [ %3376, %3381 ], [ %3376, %3349 ], [ %3114, %4197 ], [ %3114, %3318 ], [ %3114, %3199 ], [ %3114, %3143 ], [ %3114, %3139 ]
  %3135 = phi float [ %3115, %3112 ], [ %3377, %3381 ], [ %3377, %3349 ], [ %3115, %4197 ], [ %3115, %3318 ], [ %3115, %3199 ], [ %3115, %3143 ], [ %3115, %3139 ]
  %3136 = phi float [ %3116, %3112 ], [ %3378, %3381 ], [ %3378, %3349 ], [ %3116, %4197 ], [ %3116, %3318 ], [ %3116, %3199 ], [ %3116, %3143 ], [ %3116, %3139 ]
  %3137 = phi float [ %3117, %3112 ], [ %3379, %3381 ], [ %3379, %3349 ], [ %3117, %4197 ], [ %3117, %3318 ], [ %3117, %3199 ], [ %3117, %3143 ], [ %3117, %3139 ]
  %3138 = icmp eq i32 %3118, %3121
  br i1 %3138, label %3382, label %3112

; <label>:3139                                    ; preds = %3112
  %3140 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3141 = extractvalue %dx.types.CBufRet.i32 %3140, 0
  %3142 = icmp ult i32 %3123, %3141
  br i1 %3142, label %3143, label %3132

; <label>:3143                                    ; preds = %3139
  %3144 = extractvalue %dx.types.ResRet.f32 %3127, 0
  %3145 = extractvalue %dx.types.ResRet.f32 %3127, 1
  %3146 = extractvalue %dx.types.ResRet.f32 %3127, 2
  %3147 = add i32 %3124, 5
  %3148 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3126, i32 %3147, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3149 = extractvalue %dx.types.ResRet.f32 %3148, 0
  %3150 = add i32 %3124, 6
  %3151 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3126, i32 %3150, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3152 = add i32 %3124, 7
  %3153 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3126, i32 %3152, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3154 = add i32 %3124, 8
  %3155 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3126, i32 %3154, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3156 = call float @dx.op.unary.f32(i32 6, float %3144)  ; FAbs(value)
  %3157 = call float @dx.op.unary.f32(i32 6, float %3145)  ; FAbs(value)
  %3158 = call float @dx.op.unary.f32(i32 6, float %3146)  ; FAbs(value)
  %3159 = lshr i32 %3129, 16
  %3160 = and i32 %3159, 15
  %3161 = bitcast float %3149 to i32
  %3162 = and i32 %3161, 65535
  %3163 = extractvalue %dx.types.ResRet.f32 %3155, 3
  %3164 = extractvalue %dx.types.ResRet.f32 %3155, 2
  %3165 = extractvalue %dx.types.ResRet.f32 %3155, 1
  %3166 = extractvalue %dx.types.ResRet.f32 %3155, 0
  %3167 = extractvalue %dx.types.ResRet.f32 %3153, 3
  %3168 = extractvalue %dx.types.ResRet.f32 %3153, 2
  %3169 = extractvalue %dx.types.ResRet.f32 %3153, 1
  %3170 = extractvalue %dx.types.ResRet.f32 %3153, 0
  %3171 = extractvalue %dx.types.ResRet.f32 %3151, 3
  %3172 = extractvalue %dx.types.ResRet.f32 %3151, 2
  %3173 = extractvalue %dx.types.ResRet.f32 %3151, 1
  %3174 = extractvalue %dx.types.ResRet.f32 %3151, 0
  %3175 = fsub fast float %3026, %3171
  %3176 = fsub fast float %3029, %3167
  %3177 = fsub fast float %3032, %3163
  %3178 = fmul fast float %3175, %3174
  %3179 = call float @dx.op.tertiary.f32(i32 46, float %3176, float %3170, float %3178)  ; FMad(a,b,c)
  %3180 = call float @dx.op.tertiary.f32(i32 46, float %3177, float %3166, float %3179)  ; FMad(a,b,c)
  %3181 = fmul fast float %3175, %3173
  %3182 = call float @dx.op.tertiary.f32(i32 46, float %3176, float %3169, float %3181)  ; FMad(a,b,c)
  %3183 = call float @dx.op.tertiary.f32(i32 46, float %3177, float %3165, float %3182)  ; FMad(a,b,c)
  %3184 = fmul fast float %3175, %3172
  %3185 = call float @dx.op.tertiary.f32(i32 46, float %3176, float %3168, float %3184)  ; FMad(a,b,c)
  %3186 = call float @dx.op.tertiary.f32(i32 46, float %3177, float %3164, float %3185)  ; FMad(a,b,c)
  %3187 = call float @dx.op.unary.f32(i32 6, float %3180)  ; FAbs(value)
  %3188 = call float @dx.op.unary.f32(i32 6, float %3183)  ; FAbs(value)
  %3189 = call float @dx.op.unary.f32(i32 6, float %3186)  ; FAbs(value)
  %3190 = fmul fast float %3014, 5.000000e-01
  %3191 = fadd fast float %3156, %3190
  %3192 = fadd fast float %3157, %3190
  %3193 = fadd fast float %3158, %3190
  %3194 = fcmp fast ole float %3187, %3191
  %3195 = fcmp fast ole float %3188, %3192
  %3196 = fcmp fast ole float %3189, %3193
  %3197 = and i1 %3194, %3195
  %3198 = and i1 %3197, %3196
  br i1 %3198, label %3199, label %3132

; <label>:3199                                    ; preds = %3143
  %3200 = extractvalue %dx.types.ResRet.f32 %3148, 1
  %3201 = bitcast float %3200 to i32
  %3202 = lshr i32 %3161, 16
  %3203 = fsub fast float -0.000000e+00, %3156
  %3204 = fsub fast float -0.000000e+00, %3157
  %3205 = call float @dx.op.binary.f32(i32 35, float %3180, float %3203)  ; FMax(a,b)
  %3206 = call float @dx.op.binary.f32(i32 35, float %3183, float %3204)  ; FMax(a,b)
  %3207 = call float @dx.op.binary.f32(i32 36, float %3205, float %3156)  ; FMin(a,b)
  %3208 = call float @dx.op.binary.f32(i32 36, float %3206, float %3157)  ; FMin(a,b)
  %3209 = fdiv fast float %3207, %3156
  %3210 = fdiv fast float %3208, %3157
  %3211 = fmul fast float %3209, 5.000000e-01
  %3212 = fmul fast float %3210, 5.000000e-01
  %3213 = fadd fast float %3211, 5.000000e-01
  %3214 = fsub fast float 5.000000e-01, %3212
  %3215 = call float @dx.op.unary.f32(i32 7, float %3213)  ; Saturate(value)
  %3216 = call float @dx.op.unary.f32(i32 7, float %3214)  ; Saturate(value)
  %3217 = call float @dx.op.binary.f32(i32 36, float %3215, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %3218 = call float @dx.op.binary.f32(i32 36, float %3216, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %3219 = uitofp i32 %3162 to float
  %3220 = uitofp i32 %3202 to float
  %3221 = fmul fast float %3217, %3219
  %3222 = fmul fast float %3218, %3220
  %3223 = fptoui float %3221 to i32
  %3224 = fptoui float %3222 to i32
  %3225 = mul i32 %3224, %3162
  %3226 = add i32 %3223, %3201
  %3227 = add i32 %3226, %3225
  %3228 = shl i32 %3227, 3
  %3229 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %3230 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %3229, i32 %3228, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3231 = extractvalue %dx.types.ResRet.i32 %3230, 0
  %3232 = shl i32 %3231, 3
  %3233 = and i32 %3232, 32760
  %3234 = lshr i32 %3231, 9
  %3235 = and i32 %3234, 32760
  %3236 = lshr i32 %3231, 24
  %3237 = and i32 %3236, 15
  %3238 = lshr i32 %3231, 28
  %3239 = add nuw nsw i32 %3237, 25
  %3240 = add nuw nsw i32 %3238, 25
  %3241 = and i32 %3239, 31
  %3242 = and i32 %3240, 31
  %3243 = shl i32 1, %3241
  %3244 = shl i32 1, %3242
  %3245 = icmp ugt i32 %3237, 7
  %3246 = icmp slt i32 %3231, 0
  %3247 = select i1 %3245, i32 %3243, i32 1
  %3248 = select i1 %3246, i32 %3244, i32 1
  %3249 = uitofp i32 %3247 to float
  %3250 = uitofp i32 %3248 to float
  %3251 = fmul fast float %3249, %3217
  %3252 = fmul fast float %3250, %3218
  %3253 = fptoui float %3251 to i32
  %3254 = fptoui float %3252 to i32
  %3255 = shl i32 1, %3237
  %3256 = shl i32 1, %3238
  %3257 = call float @dx.op.unary.f32(i32 22, float %3251)  ; Frc(value)
  %3258 = call float @dx.op.unary.f32(i32 22, float %3252)  ; Frc(value)
  %3259 = icmp eq i32 %3253, 0
  %3260 = icmp eq i32 %3254, 0
  %3261 = select i1 %3259, float 0.000000e+00, float 5.000000e-01
  %3262 = select i1 %3260, float 0.000000e+00, float 5.000000e-01
  %3263 = add i32 %3253, 1
  %3264 = add i32 %3254, 1
  %3265 = icmp eq i32 %3263, %3247
  %3266 = icmp eq i32 %3264, %3248
  %3267 = uitofp i32 %3255 to float
  %3268 = select i1 %3245, float 1.280000e+02, float %3267
  %3269 = uitofp i32 %3256 to float
  %3270 = select i1 %3246, float 1.280000e+02, float %3269
  %3271 = fsub fast float %3268, %3261
  %3272 = fsub fast float %3270, %3262
  %3273 = select i1 %3265, float -0.000000e+00, float -5.000000e-01
  %3274 = fadd fast float %3271, %3273
  %3275 = select i1 %3266, float -0.000000e+00, float -5.000000e-01
  %3276 = fadd fast float %3272, %3275
  %3277 = fmul fast float %3274, %3257
  %3278 = fmul fast float %3276, %3258
  %3279 = fadd fast float %3277, %3261
  %3280 = fadd fast float %3278, %3262
  %3281 = fadd fast float %3268, -1.500000e+00
  %3282 = fadd fast float %3270, -1.500000e+00
  %3283 = call float @dx.op.binary.f32(i32 35, float %3279, float 5.000000e-01)  ; FMax(a,b)
  %3284 = call float @dx.op.binary.f32(i32 35, float %3280, float 5.000000e-01)  ; FMax(a,b)
  %3285 = call float @dx.op.binary.f32(i32 36, float %3283, float %3281)  ; FMin(a,b)
  %3286 = call float @dx.op.binary.f32(i32 36, float %3284, float %3282)  ; FMin(a,b)
  %3287 = uitofp i32 %3233 to float
  %3288 = uitofp i32 %3235 to float
  %3289 = fadd fast float %3285, %3287
  %3290 = fadd fast float %3286, %3288
  %3291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %3292 = extractvalue %dx.types.CBufRet.f32 %3291, 0
  %3293 = extractvalue %dx.types.CBufRet.f32 %3291, 1
  %3294 = fmul fast float %3292, %3289
  %3295 = fmul fast float %3293, %3290
  %3296 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %3297 = extractvalue %dx.types.CBufRet.f32 %3296, 2
  %3298 = extractvalue %dx.types.CBufRet.f32 %3296, 3
  %3299 = fmul fast float %3294, %3297
  %3300 = fmul fast float %3295, %3298
  %3301 = fadd fast float %3299, 0x3FE0100000000000
  %3302 = fadd fast float %3300, 0x3FE0100000000000
  %3303 = call float @dx.op.unary.f32(i32 22, float %3301)  ; Frc(value)
  %3304 = call float @dx.op.unary.f32(i32 22, float %3302)  ; Frc(value)
  %3305 = fsub fast float 1.000000e+00, %3303
  %3306 = fmul fast float %3305, %3304
  %3307 = fmul fast float %3304, %3303
  %3308 = fsub fast float 1.000000e+00, %3304
  %3309 = fmul fast float %3308, %3303
  %3310 = fmul fast float %3308, %3305
  %3311 = icmp eq i32 %3237, 0
  br i1 %3311, label %3132, label %3312

; <label>:3312                                    ; preds = %3199
  br i1 %2999, label %3318, label %3313

; <label>:3313                                    ; preds = %3312
  %3314 = icmp ult i32 %3160, 2
  br i1 %3314, label %3318, label %3315

; <label>:3315                                    ; preds = %3313
  %3316 = icmp ult i32 %3160, 4
  %3317 = select i1 %3316, float %3034, float %3035
  br label %3318

; <label>:3318                                    ; preds = %3315, %3313, %3312
  %3319 = phi float [ 1.000000e+00, %3312 ], [ %3033, %3313 ], [ %3317, %3315 ]
  %3320 = fcmp fast ogt float %3319, 0.000000e+00
  br i1 %3320, label %3321, label %3132

; <label>:3321                                    ; preds = %3318
  %3322 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3323 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3324 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %3322, %dx.types.Handle %3323, float %3294, float %3295, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %3325 = extractvalue %dx.types.ResRet.f32 %3324, 0
  %3326 = extractvalue %dx.types.ResRet.f32 %3324, 1
  %3327 = extractvalue %dx.types.ResRet.f32 %3324, 2
  %3328 = extractvalue %dx.types.ResRet.f32 %3324, 3
  %3329 = fdiv fast float %3186, %3158
  %3330 = fmul fast float %3329, 5.000000e-01
  %3331 = fsub fast float 5.000000e-01, %3330
  %3332 = fdiv fast float %3014, %3158
  %3333 = fmul fast float %3332, 2.500000e-01
  %3334 = fcmp uge float %3325, 1.000000e+00
  %3335 = or i1 %2999, %3334
  %3336 = select i1 %3334, float 0.000000e+00, float 1.000000e+00
  br i1 %3335, label %3344, label %3337

; <label>:3337                                    ; preds = %3321
  %3338 = fsub fast float %3331, %3325
  %3339 = call float @dx.op.unary.f32(i32 6, float %3338)  ; FAbs(value)
  %3340 = fsub fast float %3339, %3332
  %3341 = fdiv fast float %3340, %3333
  %3342 = call float @dx.op.unary.f32(i32 7, float %3341)  ; Saturate(value)
  %3343 = fsub fast float 1.000000e+00, %3342
  br label %3344

; <label>:3344                                    ; preds = %3337, %3321
  %3345 = phi float [ %3343, %3337 ], [ %3336, %3321 ]
  %3346 = fcmp uge float %3326, 1.000000e+00
  %3347 = or i1 %2999, %3346
  %3348 = select i1 %3346, float 0.000000e+00, float 1.000000e+00
  br i1 %3347, label %4173, label %4166

; <label>:3349                                    ; preds = %4197
  %3350 = fdiv fast float %4199, %4203
  %3351 = fdiv fast float %4200, %4203
  %3352 = fdiv fast float %4201, %4203
  %3353 = fdiv fast float %4202, %4203
  %3354 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3355 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %3354, %dx.types.Handle %3323, float %3294, float %3295, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %3356 = extractvalue %dx.types.ResRet.f32 %3355, 0
  %3357 = extractvalue %dx.types.ResRet.f32 %3355, 1
  %3358 = extractvalue %dx.types.ResRet.f32 %3355, 2
  %3359 = extractvalue %dx.types.ResRet.f32 %3355, 3
  %3360 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %3354, %dx.types.Handle %3323, float %3294, float %3295, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %3361 = extractvalue %dx.types.ResRet.f32 %3360, 0
  %3362 = extractvalue %dx.types.ResRet.f32 %3360, 1
  %3363 = extractvalue %dx.types.ResRet.f32 %3360, 2
  %3364 = extractvalue %dx.types.ResRet.f32 %3360, 3
  %3365 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %3354, %dx.types.Handle %3323, float %3294, float %3295, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %3366 = extractvalue %dx.types.ResRet.f32 %3365, 0
  %3367 = extractvalue %dx.types.ResRet.f32 %3365, 1
  %3368 = extractvalue %dx.types.ResRet.f32 %3365, 2
  %3369 = extractvalue %dx.types.ResRet.f32 %3365, 3
  %3370 = call float @dx.op.dot4.f32(i32 56, float %3356, float %3357, float %3358, float %3359, float %3350, float %3351, float %3352, float %3353)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3371 = call float @dx.op.dot4.f32(i32 56, float %3361, float %3362, float %3363, float %3364, float %3350, float %3351, float %3352, float %3353)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3372 = call float @dx.op.dot4.f32(i32 56, float %3366, float %3367, float %3368, float %3369, float %3350, float %3351, float %3352, float %3353)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3373 = fmul fast float %3370, %4204
  %3374 = fmul fast float %3371, %4204
  %3375 = fmul fast float %3372, %4204
  %3376 = fadd fast float %3373, %3114
  %3377 = fadd fast float %3374, %3115
  %3378 = fadd fast float %3375, %3116
  %3379 = fadd fast float %4204, %3117
  %3380 = fcmp fast ogt float %4204, %3113
  br i1 %3380, label %3381, label %3132

; <label>:3381                                    ; preds = %3349
  br label %3132

; <label>:3382                                    ; preds = %3132
  br label %3383

; <label>:3383                                    ; preds = %3382, %3107, %2952
  %3384 = phi float [ 0.000000e+00, %2952 ], [ 0.000000e+00, %3107 ], [ %3134, %3382 ]
  %3385 = phi float [ 0.000000e+00, %2952 ], [ 0.000000e+00, %3107 ], [ %3135, %3382 ]
  %3386 = phi float [ 0.000000e+00, %2952 ], [ 0.000000e+00, %3107 ], [ %3136, %3382 ]
  %3387 = phi float [ 0.000000e+00, %2952 ], [ 0.000000e+00, %3107 ], [ %3137, %3382 ]
  %3388 = fcmp fast ogt float %3387, 0.000000e+00
  br i1 %3388, label %3389, label %3393

; <label>:3389                                    ; preds = %3383
  %3390 = fdiv fast float %3384, %3387
  %3391 = fdiv fast float %3385, %3387
  %3392 = fdiv fast float %3386, %3387
  br label %3393

; <label>:3393                                    ; preds = %3389, %3383, %2942, %2937
  %3394 = phi float [ 0.000000e+00, %2937 ], [ %3390, %3389 ], [ 0.000000e+00, %3383 ], [ 0.000000e+00, %2942 ]
  %3395 = phi float [ 0.000000e+00, %2937 ], [ %3391, %3389 ], [ 0.000000e+00, %3383 ], [ 0.000000e+00, %2942 ]
  %3396 = phi float [ 0.000000e+00, %2937 ], [ %3392, %3389 ], [ 0.000000e+00, %3383 ], [ 0.000000e+00, %2942 ]
  br i1 %2941, label %3397, label %3398

; <label>:3397                                    ; preds = %3393
  br label %3398

; <label>:3398                                    ; preds = %3397, %3393, %2213
  %3399 = phi float [ %2214, %2213 ], [ 0.000000e+00, %3397 ], [ %2214, %3393 ]
  %3400 = phi float [ %2215, %2213 ], [ 0.000000e+00, %3397 ], [ %2215, %3393 ]
  %3401 = phi float [ %2216, %2213 ], [ 0.000000e+00, %3397 ], [ %2216, %3393 ]
  %3402 = phi float [ %2217, %2213 ], [ %2938, %3397 ], [ %2217, %3393 ]
  %3403 = phi float [ %2218, %2213 ], [ 0.000000e+00, %3397 ], [ %2218, %3393 ]
  %3404 = phi float [ %2219, %2213 ], [ %3394, %3397 ], [ %2219, %3393 ]
  %3405 = phi float [ %2220, %2213 ], [ %3395, %3397 ], [ %2220, %3393 ]
  %3406 = phi float [ %2221, %2213 ], [ %3396, %3397 ], [ %2221, %3393 ]
  %3407 = call float @dx.op.binary.f32(i32 36, float %252, float %3402)  ; FMin(a,b)
  %3408 = fmul fast float %3407, %321
  %3409 = fmul fast float %3407, %331
  %3410 = fmul fast float %3407, %339
  %3411 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3412 = extractvalue %dx.types.CBufRet.i32 %3411, 1
  %3413 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %3414 = extractvalue %dx.types.CBufRet.i32 %3413, 1
  %3415 = icmp ugt i32 %3412, 1
  %3416 = select i1 %3415, i32 0, i32 %3414
  %3417 = mul i32 %128, 1664525
  %3418 = mul i32 %129, 1664525
  %3419 = mul i32 %3416, 1664525
  %3420 = add i32 %3417, 1013904223
  %3421 = add i32 %3418, 1013904223
  %3422 = add i32 %3419, 1013904223
  %3423 = mul i32 %3422, %3421
  %3424 = add i32 %3420, %3423
  %3425 = mul i32 %3424, %3422
  %3426 = add i32 %3425, %3421
  %3427 = mul i32 %3426, %3424
  %3428 = add i32 %3427, %3422
  %3429 = mul i32 %3428, %3426
  %3430 = add i32 %3429, %3424
  %3431 = add i32 %3417, 1042201148
  %3432 = add i32 %3418, 1042201148
  %3433 = mul i32 %3422, %3432
  %3434 = add i32 %3431, %3433
  %3435 = mul i32 %3434, %3422
  %3436 = add i32 %3435, %3432
  %3437 = icmp eq i32 %3412, 0
  br i1 %3437, label %3465, label %3438

; <label>:3438                                    ; preds = %3398
  %3439 = mul i32 %3436, %3434
  %3440 = add i32 %3439, %3422
  %3441 = mul i32 %3440, %3436
  %3442 = add i32 %3441, %3434
  %3443 = lshr i32 %3442, 16
  %3444 = mul i32 %3430, %3428
  %3445 = add i32 %3444, %3426
  %3446 = lshr i32 %3430, 16
  %3447 = uitofp i32 %3416 to float
  %3448 = fmul fast float %3447, 1.250000e-01
  %3449 = uitofp i32 %3446 to float
  %3450 = fmul fast float %3449, 0x3EF0000000000000
  %3451 = fadd fast float %3450, %3448
  %3452 = call float @dx.op.unary.f32(i32 22, float %3451)  ; Frc(value)
  %3453 = call i32 @dx.op.unary.i32(i32 30, i32 %3416)  ; Bfrev(value)
  %3454 = xor i32 %3453, %3445
  %3455 = lshr i32 %3454, 16
  %3456 = uitofp i32 %3455 to float
  %3457 = fmul fast float %3456, 0x3EF0000000000000
  %3458 = uitofp i32 %3443 to float
  %3459 = fmul fast float %3458, 0x3EF0000000000000
  %3460 = fadd fast float %3459, %3448
  %3461 = call float @dx.op.unary.f32(i32 22, float %3460)  ; Frc(value)
  %3462 = fadd float %3452, -5.000000e-01
  %3463 = fadd float %3457, -5.000000e-01
  %3464 = fadd float %3461, -5.000000e-01
  br label %3465

; <label>:3465                                    ; preds = %3438, %3398
  %3466 = phi float [ %3462, %3438 ], [ -5.000000e-01, %3398 ]
  %3467 = phi float [ %3463, %3438 ], [ -5.000000e-01, %3398 ]
  %3468 = phi float [ %3464, %3438 ], [ -5.000000e-01, %3398 ]
  %3469 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3470 = extractvalue %dx.types.CBufRet.f32 %3469, 0
  %3471 = fmul fast float %3470, %321
  %3472 = fmul fast float %3470, %331
  %3473 = fmul fast float %3470, %339
  %3474 = fadd fast float %3466, %3471
  %3475 = fadd fast float %3467, %3472
  %3476 = fadd fast float %3468, %3473
  %3477 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3478 = extractvalue %dx.types.CBufRet.i32 %3477, 0
  %3479 = extractvalue %dx.types.CBufRet.i32 %3477, 1
  %3480 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %3481 = extractvalue %dx.types.CBufRet.i32 %3480, 0
  %3482 = extractvalue %dx.types.CBufRet.i32 %3480, 1
  %3483 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3484 = extractvalue %dx.types.CBufRet.f32 %3483, 2
  %3485 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %3486 = extractvalue %dx.types.CBufRet.f32 %3485, 1
  %3487 = extractvalue %dx.types.CBufRet.i32 %3411, 0
  %3488 = icmp eq i32 %3487, 0
  br i1 %3488, label %3753, label %3489

; <label>:3489                                    ; preds = %3465
  br label %3490

; <label>:3490                                    ; preds = %3744, %3489
  %3491 = phi i32 [ %3748, %3744 ], [ 0, %3489 ]
  %3492 = phi i32 [ %3747, %3744 ], [ 0, %3489 ]
  %3493 = phi float [ %3746, %3744 ], [ %3407, %3489 ]
  %3494 = phi float [ %3745, %3744 ], [ 1.000000e+00, %3489 ]
  %3495 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %3496 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3495, i32 %3491, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3497 = extractvalue %dx.types.ResRet.f32 %3496, 0
  %3498 = extractvalue %dx.types.ResRet.f32 %3496, 1
  %3499 = extractvalue %dx.types.ResRet.f32 %3496, 2
  %3500 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %3495, i32 %3491, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3501 = extractvalue %dx.types.ResRet.i32 %3500, 0
  %3502 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3495, i32 %3491, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3503 = extractvalue %dx.types.ResRet.f32 %3502, 0
  %3504 = extractvalue %dx.types.ResRet.f32 %3502, 1
  %3505 = extractvalue %dx.types.ResRet.f32 %3502, 2
  %3506 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %3495, i32 %3491, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3507 = extractvalue %dx.types.ResRet.i32 %3506, 0
  %3508 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %3509 = extractvalue %dx.types.CBufRet.i32 %3508, 0
  %3510 = and i32 %3501, 255
  %3511 = lshr i32 %3501, 8
  %3512 = and i32 %3511, 255
  %3513 = lshr i32 %3501, 16
  %3514 = and i32 %3513, 255
  %3515 = mul i32 %3509, %3510
  %3516 = mul i32 %3509, %3512
  %3517 = mul i32 %3509, %3514
  %3518 = and i32 %3507, 4194303
  %3519 = lshr i32 %3507, 22
  %3520 = uitofp i32 %3519 to float
  %3521 = fmul fast float %3520, 0x3F84050140000000
  %3522 = icmp ne i32 %3510, 0
  %3523 = icmp ne i32 %3512, 0
  %3524 = icmp ne i32 %3514, 0
  %3525 = and i1 %3522, %3523
  %3526 = and i1 %3524, %3525
  %3527 = fmul fast float %3521, %3474
  %3528 = fmul fast float %3521, %3475
  %3529 = fmul fast float %3521, %3476
  %3530 = fadd fast float %3527, %219
  %3531 = fadd fast float %3528, %223
  %3532 = fadd fast float %3529, %227
  %3533 = fdiv fast float 0x4059933340000000, %3520
  br i1 %3526, label %3534, label %3735

; <label>:3534                                    ; preds = %3490
  %3535 = fsub fast float %3408, %3527
  %3536 = fsub fast float %3409, %3528
  %3537 = fsub fast float %3410, %3529
  %3538 = fdiv fast float 1.000000e+00, %3535
  %3539 = fdiv fast float 1.000000e+00, %3536
  %3540 = fdiv fast float 1.000000e+00, %3537
  %3541 = fsub fast float %3497, %3530
  %3542 = fsub fast float %3498, %3531
  %3543 = fsub fast float %3499, %3532
  %3544 = fmul fast float %3538, %3541
  %3545 = fmul fast float %3539, %3542
  %3546 = fmul fast float %3540, %3543
  %3547 = fsub fast float %3503, %3530
  %3548 = fsub fast float %3504, %3531
  %3549 = fsub fast float %3505, %3532
  %3550 = fmul fast float %3538, %3547
  %3551 = fmul fast float %3539, %3548
  %3552 = fmul fast float %3540, %3549
  %3553 = call float @dx.op.binary.f32(i32 36, float %3544, float %3550)  ; FMin(a,b)
  %3554 = call float @dx.op.binary.f32(i32 36, float %3545, float %3551)  ; FMin(a,b)
  %3555 = call float @dx.op.binary.f32(i32 36, float %3546, float %3552)  ; FMin(a,b)
  %3556 = call float @dx.op.binary.f32(i32 35, float %3544, float %3550)  ; FMax(a,b)
  %3557 = call float @dx.op.binary.f32(i32 35, float %3545, float %3551)  ; FMax(a,b)
  %3558 = call float @dx.op.binary.f32(i32 35, float %3546, float %3552)  ; FMax(a,b)
  %3559 = call float @dx.op.binary.f32(i32 35, float %3554, float %3555)  ; FMax(a,b)
  %3560 = call float @dx.op.binary.f32(i32 35, float %3553, float %3559)  ; FMax(a,b)
  %3561 = call float @dx.op.binary.f32(i32 36, float %3557, float %3558)  ; FMin(a,b)
  %3562 = call float @dx.op.binary.f32(i32 36, float %3556, float %3561)  ; FMin(a,b)
  %3563 = call float @dx.op.unary.f32(i32 7, float %3560)  ; Saturate(value)
  %3564 = call float @dx.op.unary.f32(i32 7, float %3562)  ; Saturate(value)
  %3565 = fcmp fast olt float %3563, %3564
  br i1 %3565, label %3566, label %3735

; <label>:3566                                    ; preds = %3534
  %3567 = fmul fast float %3563, %3535
  %3568 = fmul fast float %3563, %3536
  %3569 = fmul fast float %3563, %3537
  %3570 = fadd fast float %3567, %3530
  %3571 = fadd fast float %3568, %3531
  %3572 = fadd fast float %3569, %3532
  %3573 = fsub fast float %3564, %3563
  %3574 = fmul fast float %3535, %3573
  %3575 = fsub fast float %3564, %3563
  %3576 = fmul fast float %3536, %3575
  %3577 = fsub fast float %3564, %3563
  %3578 = fmul fast float %3537, %3577
  %3579 = fmul fast float %3574, %3574
  %3580 = fmul fast float %3576, %3576
  %3581 = fadd fast float %3579, %3580
  %3582 = fmul fast float %3578, %3578
  %3583 = fadd fast float %3581, %3582
  %3584 = call float @dx.op.unary.f32(i32 24, float %3583)  ; Sqrt(value)
  %3585 = call float @dx.op.binary.f32(i32 36, float %3584, float %3407)  ; FMin(a,b)
  %3586 = call float @dx.op.dot3.f32(i32 55, float %3574, float %3576, float %3578, float %3574, float %3576, float %3578)  ; Dot3(ax,ay,az,bx,by,bz)
  %3587 = call float @dx.op.unary.f32(i32 25, float %3586)  ; Rsqrt(value)
  %3588 = fdiv fast float %3585, %3521
  %3589 = call float @dx.op.unary.f32(i32 28, float %3588)  ; Round_pi(value)
  %3590 = call float @dx.op.binary.f32(i32 36, float %3589, float 1.024000e+03)  ; FMin(a,b)
  %3591 = fdiv fast float %3585, %3590
  %3592 = fcmp fast ogt float %3590, 0.000000e+00
  br i1 %3592, label %3593, label %3735

; <label>:3593                                    ; preds = %3566
  br label %3594

; <label>:3594                                    ; preds = %3727, %3593
  %3595 = phi i32 [ %3678, %3727 ], [ 9999, %3593 ]
  %3596 = phi i32 [ %3679, %3727 ], [ 9999, %3593 ]
  %3597 = phi i32 [ %3680, %3727 ], [ 9999, %3593 ]
  %3598 = phi i32 [ %3681, %3727 ], [ 0, %3593 ]
  %3599 = phi i32 [ %3682, %3727 ], [ 0, %3593 ]
  %3600 = phi i32 [ %3683, %3727 ], [ 0, %3593 ]
  %3601 = phi i32 [ %3684, %3727 ], [ 0, %3593 ]
  %3602 = phi float [ %3731, %3727 ], [ 1.000000e+00, %3593 ]
  %3603 = phi float [ %3732, %3727 ], [ 0.000000e+00, %3593 ]
  %3604 = phi float [ %3728, %3727 ], [ 0.000000e+00, %3593 ]
  %3605 = fmul fast float %3602, %3591
  %3606 = call float @dx.op.binary.f32(i32 35, float %3605, float 0.000000e+00)  ; FMax(a,b)
  %3607 = fmul fast float %3574, %3521
  %3608 = fmul fast float %3607, %3587
  %3609 = fmul fast float %3608, %3603
  %3610 = fmul fast float %3576, %3521
  %3611 = fmul fast float %3610, %3587
  %3612 = fmul fast float %3611, %3603
  %3613 = fmul fast float %3578, %3521
  %3614 = fmul fast float %3613, %3587
  %3615 = fmul fast float %3614, %3603
  %3616 = fadd fast float %3570, %3609
  %3617 = fadd fast float %3571, %3612
  %3618 = fadd fast float %3572, %3615
  %3619 = fmul fast float %3466, %3606
  %3620 = fmul fast float %3467, %3606
  %3621 = fmul fast float %3468, %3606
  %3622 = fadd fast float %3616, %3619
  %3623 = fadd fast float %3617, %3620
  %3624 = fadd fast float %3618, %3621
  %3625 = add i32 %3515, -1
  %3626 = add i32 %3516, -1
  %3627 = add i32 %3517, -1
  %3628 = fsub fast float %3622, %3497
  %3629 = fsub fast float %3623, %3498
  %3630 = fsub fast float %3624, %3499
  %3631 = fsub fast float %3503, %3497
  %3632 = fsub fast float %3504, %3498
  %3633 = fsub fast float %3505, %3499
  %3634 = fdiv fast float %3628, %3631
  %3635 = fdiv fast float %3629, %3632
  %3636 = fdiv fast float %3630, %3633
  %3637 = call float @dx.op.unary.f32(i32 7, float %3634)  ; Saturate(value)
  %3638 = call float @dx.op.unary.f32(i32 7, float %3635)  ; Saturate(value)
  %3639 = call float @dx.op.unary.f32(i32 7, float %3636)  ; Saturate(value)
  %3640 = uitofp i32 %3515 to float
  %3641 = uitofp i32 %3516 to float
  %3642 = uitofp i32 %3517 to float
  %3643 = fmul fast float %3637, %3640
  %3644 = fmul fast float %3638, %3641
  %3645 = fmul fast float %3639, %3642
  %3646 = fptoui float %3643 to i32
  %3647 = fptoui float %3644 to i32
  %3648 = fptoui float %3645 to i32
  %3649 = call i32 @dx.op.binary.i32(i32 40, i32 %3646, i32 %3625)  ; UMin(a,b)
  %3650 = call i32 @dx.op.binary.i32(i32 40, i32 %3647, i32 %3626)  ; UMin(a,b)
  %3651 = call i32 @dx.op.binary.i32(i32 40, i32 %3648, i32 %3627)  ; UMin(a,b)
  %3652 = and i32 %3482, 31
  %3653 = lshr i32 %3649, %3652
  %3654 = lshr i32 %3650, %3652
  %3655 = lshr i32 %3651, %3652
  %3656 = icmp ne i32 %3653, %3595
  %3657 = icmp ne i32 %3654, %3596
  %3658 = icmp ne i32 %3655, %3597
  %3659 = or i1 %3656, %3657
  %3660 = or i1 %3659, %3658
  br i1 %3660, label %3661, label %3677

; <label>:3661                                    ; preds = %3594
  %3662 = mul i32 %3655, %3512
  %3663 = add i32 %3662, %3654
  %3664 = mul i32 %3663, %3510
  %3665 = add i32 %3653, %3518
  %3666 = add i32 %3665, %3664
  %3667 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %3668 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %3667, i32 %3666, i32 undef)  ; BufferLoad(srv,index,wot)
  %3669 = extractvalue %dx.types.ResRet.i32 %3668, 0
  %3670 = icmp ne i32 %3669, -1
  %3671 = zext i1 %3670 to i32
  %3672 = mul i32 %3478, %3479
  %3673 = urem i32 %3669, %3672
  %3674 = urem i32 %3673, %3478
  %3675 = udiv i32 %3673, %3478
  %3676 = udiv i32 %3669, %3672
  br label %3677

; <label>:3677                                    ; preds = %3661, %3594
  %3678 = phi i32 [ %3653, %3661 ], [ %3595, %3594 ]
  %3679 = phi i32 [ %3654, %3661 ], [ %3596, %3594 ]
  %3680 = phi i32 [ %3655, %3661 ], [ %3597, %3594 ]
  %3681 = phi i32 [ %3671, %3661 ], [ %3598, %3594 ]
  %3682 = phi i32 [ %3674, %3661 ], [ %3599, %3594 ]
  %3683 = phi i32 [ %3675, %3661 ], [ %3600, %3594 ]
  %3684 = phi i32 [ %3676, %3661 ], [ %3601, %3594 ]
  %3685 = icmp eq i32 %3681, 0
  br i1 %3685, label %3727, label %3686

; <label>:3686                                    ; preds = %3677
  %3687 = shl i32 %3682, %3652
  %3688 = shl i32 %3683, %3652
  %3689 = shl i32 %3684, %3652
  %3690 = shl i32 %3653, %3652
  %3691 = shl i32 %3654, %3652
  %3692 = shl i32 %3655, %3652
  %3693 = sub i32 %3649, %3690
  %3694 = sub i32 %3650, %3691
  %3695 = sub i32 %3651, %3692
  %3696 = add i32 %3693, %3687
  %3697 = add i32 %3694, %3688
  %3698 = add i32 %3695, %3689
  %3699 = fmul fast float %3606, %3533
  %3700 = call float @dx.op.unary.f32(i32 23, float %3699)  ; Log(value)
  %3701 = fptoui float %3700 to i32
  %3702 = and i32 %3701, 31
  %3703 = lshr i32 %3696, %3702
  %3704 = lshr i32 %3697, %3702
  %3705 = lshr i32 %3698, %3702
  %3706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %3707 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %3706, i32 %3701, i32 %3703, i32 %3704, i32 %3705, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3708 = extractvalue %dx.types.ResRet.i32 %3707, 0
  %3709 = and i32 %3708, 16777215
  %3710 = uitofp i32 %3709 to float
  %3711 = fmul fast float %3484, 0x3F50624DE0000000
  %3712 = fmul fast float %3711, %3533
  %3713 = fmul fast float %3712, %3606
  %3714 = fmul fast float %3713, %3710
  %3715 = fadd fast float %3714, %3604
  %3716 = fcmp fast ogt float %3715, 1.000000e+00
  br i1 %3716, label %3717, label %3727

; <label>:3717                                    ; preds = %3686
  %3718 = fsub fast float %3622, %3530
  %3719 = fsub fast float %3623, %3531
  %3720 = fsub fast float %3624, %3532
  %3721 = fmul fast float %3718, %3718
  %3722 = fmul fast float %3719, %3719
  %3723 = fadd fast float %3721, %3722
  %3724 = fmul fast float %3720, %3720
  %3725 = fadd fast float %3723, %3724
  %3726 = call float @dx.op.unary.f32(i32 24, float %3725)  ; Sqrt(value)
  br label %3735

; <label>:3727                                    ; preds = %3686, %3677
  %3728 = phi float [ %3715, %3686 ], [ %3604, %3677 ]
  %3729 = fmul fast float %3602, %3486
  %3730 = uitofp i32 %3481 to float
  %3731 = call float @dx.op.binary.f32(i32 36, float %3730, float %3729)  ; FMin(a,b)
  %3732 = fadd fast float %3731, %3603
  %3733 = fcmp fast olt float %3732, %3590
  br i1 %3733, label %3594, label %3734

; <label>:3734                                    ; preds = %3727
  br label %3735

; <label>:3735                                    ; preds = %3734, %3717, %3566, %3534, %3490
  %3736 = phi float [ %3726, %3717 ], [ -1.000000e+00, %3534 ], [ -1.000000e+00, %3490 ], [ -1.000000e+00, %3566 ], [ -1.000000e+00, %3734 ]
  %3737 = phi float [ %3715, %3717 ], [ 0.000000e+00, %3534 ], [ 0.000000e+00, %3490 ], [ 0.000000e+00, %3566 ], [ %3728, %3734 ]
  %3738 = fcmp fast ult float %3736, 0.000000e+00
  br i1 %3738, label %3744, label %3739

; <label>:3739                                    ; preds = %3735
  %3740 = fsub fast float 1.000000e+00, %3737
  %3741 = call float @dx.op.unary.f32(i32 7, float %3740)  ; Saturate(value)
  %3742 = call float @dx.op.binary.f32(i32 36, float %3494, float %3741)  ; FMin(a,b)
  %3743 = call float @dx.op.binary.f32(i32 36, float %3493, float %3736)  ; FMin(a,b)
  br label %3744

; <label>:3744                                    ; preds = %3739, %3735
  %3745 = phi float [ %3742, %3739 ], [ %3494, %3735 ]
  %3746 = phi float [ %3743, %3739 ], [ %3493, %3735 ]
  %3747 = phi i32 [ 1, %3739 ], [ %3492, %3735 ]
  %3748 = add nuw i32 %3491, 1
  %3749 = fcmp fast ogt float %3745, 0x3F847AE140000000
  %3750 = icmp ult i32 %3748, %3487
  %3751 = and i1 %3749, %3750
  br i1 %3751, label %3490, label %3752

; <label>:3752                                    ; preds = %3744
  br label %3753

; <label>:3753                                    ; preds = %3752, %3465
  %3754 = phi i32 [ 0, %3465 ], [ %3747, %3752 ]
  %3755 = phi float [ %3407, %3465 ], [ %3746, %3752 ]
  %3756 = phi float [ 1.000000e+00, %3465 ], [ %3745, %3752 ]
  %3757 = icmp ne i32 %3754, 0
  %3758 = fcmp fast olt float %3755, %3407
  %3759 = and i1 %3758, %3757
  br i1 %3759, label %3760, label %3766

; <label>:3760                                    ; preds = %3753
  %3761 = fmul fast float %3756, %3404
  %3762 = fmul fast float %3756, %3405
  %3763 = fmul fast float %3756, %3406
  %3764 = fmul fast float %3756, %3403
  %3765 = call float @dx.op.binary.f32(i32 36, float %3755, float %3402)  ; FMin(a,b)
  br label %3766

; <label>:3766                                    ; preds = %3760, %3753
  %3767 = phi float [ %3765, %3760 ], [ %3402, %3753 ]
  %3768 = phi float [ %3764, %3760 ], [ %3403, %3753 ]
  %3769 = phi float [ %3761, %3760 ], [ %3404, %3753 ]
  %3770 = phi float [ %3762, %3760 ], [ %3405, %3753 ]
  %3771 = phi float [ %3763, %3760 ], [ %3406, %3753 ]
  %3772 = and i32 %376, 32767
  %3773 = call float @dx.op.legacyF16ToF32(i32 131, i32 %3772)  ; LegacyF16ToF32(value)
  %3774 = fmul fast float %3399, %3399
  %3775 = fmul fast float %3400, %3400
  %3776 = fadd fast float %3775, %3774
  %3777 = fmul fast float %3401, %3401
  %3778 = fadd fast float %3776, %3777
  %3779 = call float @dx.op.unary.f32(i32 24, float %3778)  ; Sqrt(value)
  %3780 = fsub fast float %3773, %3779
  %3781 = call float @dx.op.unary.f32(i32 6, float %3780)  ; FAbs(value)
  %3782 = call float @dx.op.binary.f32(i32 35, float %178, float 1.000000e+02)  ; FMax(a,b)
  %3783 = fdiv fast float %3781, %3782
  %3784 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %3785 = extractvalue %dx.types.CBufRet.f32 %3784, 1
  %3786 = fcmp fast ogt float %3783, %3785
  %3787 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %3788 = extractvalue %dx.types.CBufRet.f32 %3787, 0
  %3789 = extractvalue %dx.types.CBufRet.f32 %3787, 1
  %3790 = extractvalue %dx.types.CBufRet.f32 %3787, 2
  %3791 = fsub fast float %3788, %242
  %3792 = fadd fast float %3791, %236
  %3793 = fsub fast float %3789, %243
  %3794 = fadd fast float %3793, %237
  %3795 = fsub fast float %3790, %244
  %3796 = fadd fast float %3795, %238
  %3797 = fmul fast float %3792, %3792
  %3798 = fmul fast float %3794, %3794
  %3799 = fadd fast float %3797, %3798
  %3800 = fmul fast float %3796, %3796
  %3801 = fadd fast float %3799, %3800
  %3802 = call float @dx.op.unary.f32(i32 24, float %3801)  ; Sqrt(value)
  %3803 = fmul fast float %3802, 6.000000e+00
  %3804 = extractvalue %dx.types.CBufRet.f32 %399, 1
  %3805 = fdiv fast float %3803, %3804
  %3806 = fadd fast float %3805, -5.000000e+00
  %3807 = call float @dx.op.unary.f32(i32 7, float %3806)  ; Saturate(value)
  %3808 = fsub fast float 1.000000e+00, %3768
  %3809 = call float @dx.op.unary.f32(i32 7, float %3808)  ; Saturate(value)
  %3810 = fmul fast float %3807, %3808
  %3811 = fadd fast float %3810, %3768
  %3812 = uitofp i32 %181 to float
  %3813 = uitofp i32 %182 to float
  %3814 = fadd fast float %3812, 5.000000e-01
  %3815 = fadd fast float %3813, 5.000000e-01
  %3816 = call float @dx.op.dot2.f32(i32 54, float %3814, float %3815, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %3817 = call float @dx.op.unary.f32(i32 22, float %3816)  ; Frc(value)
  %3818 = fmul fast float %3817, 0x404A7DD040000000
  %3819 = call float @dx.op.unary.f32(i32 22, float %3818)  ; Frc(value)
  %3820 = fcmp fast olt float %3811, %3819
  br i1 %3820, label %3821, label %4141

; <label>:3821                                    ; preds = %3766
  %3822 = fsub fast float 1.000000e+00, %3807
  %3823 = fmul fast float %3822, %3769
  %3824 = fmul fast float %3822, %3770
  %3825 = fmul fast float %3822, %3771
  %3826 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3827 = extractvalue %dx.types.CBufRet.f32 %3826, 1
  %3828 = fcmp fast ogt float %3827, 0.000000e+00
  br i1 %3828, label %3829, label %3861

; <label>:3829                                    ; preds = %3821
  %3830 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3831 = extractvalue %dx.types.CBufRet.f32 %3830, 1
  %3832 = fcmp fast ogt float %3831, 0.000000e+00
  br i1 %3832, label %3833, label %3861

; <label>:3833                                    ; preds = %3829
  %3834 = extractvalue %dx.types.CBufRet.f32 %3830, 2
  %3835 = extractvalue %dx.types.CBufRet.f32 %3826, 0
  %3836 = call float @dx.op.binary.f32(i32 35, float %3834, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3837 = call float @dx.op.unary.f32(i32 23, float %3836)  ; Log(value)
  %3838 = fmul fast float %3837, 0x3FF3333340000000
  %3839 = fadd fast float %3835, -2.000000e+00
  %3840 = fadd fast float %3839, %3838
  %3841 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3842 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3843 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3841, %dx.types.Handle %3842, float %321, float %331, float %339, float undef, i32 undef, i32 undef, i32 undef, float %3840)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3844 = extractvalue %dx.types.ResRet.f32 %3843, 0
  %3845 = extractvalue %dx.types.ResRet.f32 %3843, 1
  %3846 = extractvalue %dx.types.ResRet.f32 %3843, 2
  %3847 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %3848 = extractvalue %dx.types.CBufRet.f32 %3847, 0
  %3849 = extractvalue %dx.types.CBufRet.f32 %3847, 1
  %3850 = extractvalue %dx.types.CBufRet.f32 %3847, 2
  %3851 = fmul fast float %3848, %3844
  %3852 = fmul fast float %3849, %3845
  %3853 = fmul fast float %3850, %3846
  %3854 = extractvalue %dx.types.CBufRet.f32 %3830, 3
  %3855 = fmul fast float %3854, %3767
  %3856 = call float @dx.op.unary.f32(i32 7, float %3855)  ; Saturate(value)
  %3857 = fmul fast float %3856, %3831
  %3858 = fmul fast float %3851, %3857
  %3859 = fmul fast float %3852, %3857
  %3860 = fmul fast float %3853, %3857
  br label %3861

; <label>:3861                                    ; preds = %3833, %3829, %3821
  %3862 = phi float [ %3858, %3833 ], [ 0.000000e+00, %3829 ], [ 0.000000e+00, %3821 ]
  %3863 = phi float [ %3859, %3833 ], [ 0.000000e+00, %3829 ], [ 0.000000e+00, %3821 ]
  %3864 = phi float [ %3860, %3833 ], [ 0.000000e+00, %3829 ], [ 0.000000e+00, %3821 ]
  %3865 = fadd fast float %3862, %3823
  %3866 = fadd fast float %3863, %3824
  %3867 = fadd fast float %3864, %3825
  %3868 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %3869 = extractvalue %dx.types.CBufRet.f32 %3868, 2
  %3870 = fmul fast float %3869, %3865
  %3871 = fmul fast float %3869, %3866
  %3872 = fmul fast float %3869, %3867
  %3873 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3874 = extractvalue %dx.types.CBufRet.i32 %3873, 0
  %3875 = icmp eq i32 %3874, 0
  br i1 %3875, label %4136, label %3876

; <label>:3876                                    ; preds = %3861
  %3877 = fmul fast float %3767, %321
  %3878 = fmul fast float %3767, %331
  %3879 = fmul fast float %3767, %339
  %3880 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %3881 = extractvalue %dx.types.CBufRet.f32 %3880, 3
  %3882 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3883 = extractvalue %dx.types.CBufRet.f32 %3882, 2
  %3884 = fadd fast float %238, %3790
  %3885 = call float @dx.op.binary.f32(i32 36, float %3884, float %3883)  ; FMin(a,b)
  %3886 = fsub fast float %3879, %3885
  %3887 = fadd fast float %3886, %3790
  %3888 = fadd fast float %3887, %238
  %3889 = call float @dx.op.dot3.f32(i32 55, float %3877, float %3878, float %3888, float %3877, float %3878, float %3888)  ; Dot3(ax,ay,az,bx,by,bz)
  %3890 = call float @dx.op.binary.f32(i32 35, float %3889, float 0x3E45798EE0000000)  ; FMax(a,b)
  %3891 = call float @dx.op.unary.f32(i32 25, float %3890)  ; Rsqrt(value)
  %3892 = fmul fast float %3891, %3889
  %3893 = fmul fast float %3891, %3877
  %3894 = fmul fast float %3891, %3878
  %3895 = fmul fast float %3888, %3891
  %3896 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %3897 = extractvalue %dx.types.CBufRet.f32 %3882, 3
  %3898 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3897)  ; FMax(a,b)
  %3899 = fcmp fast ogt float %3898, 0.000000e+00
  %3900 = extractvalue %dx.types.CBufRet.f32 %3882, 1
  %3901 = extractvalue %dx.types.CBufRet.f32 %3896, 1
  br i1 %3899, label %3905, label %3902

; <label>:3902                                    ; preds = %3876
  %3903 = extractvalue %dx.types.CBufRet.f32 %3896, 0
  %3904 = extractvalue %dx.types.CBufRet.f32 %3882, 0
  br label %3929

; <label>:3905                                    ; preds = %3876
  %3906 = fmul fast float %3898, %3891
  %3907 = fmul fast float %3906, %3888
  %3908 = fadd fast float %3907, %3885
  %3909 = fsub fast float %3888, %3907
  %3910 = fsub fast float 1.000000e+00, %3906
  %3911 = fmul fast float %3910, %3892
  %3912 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3913 = extractvalue %dx.types.CBufRet.f32 %3912, 1
  %3914 = fsub fast float %3908, %3913
  %3915 = fmul fast float %3914, %3900
  %3916 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3915)  ; FMax(a,b)
  %3917 = extractvalue %dx.types.CBufRet.f32 %3912, 0
  %3918 = fsub fast float -0.000000e+00, %3916
  %3919 = call float @dx.op.unary.f32(i32 21, float %3918)  ; Exp(value)
  %3920 = fmul fast float %3917, %3919
  %3921 = extractvalue %dx.types.CBufRet.f32 %3896, 3
  %3922 = fsub fast float %3908, %3921
  %3923 = fmul fast float %3922, %3901
  %3924 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3923)  ; FMax(a,b)
  %3925 = extractvalue %dx.types.CBufRet.f32 %3896, 2
  %3926 = fsub fast float -0.000000e+00, %3924
  %3927 = call float @dx.op.unary.f32(i32 21, float %3926)  ; Exp(value)
  %3928 = fmul fast float %3925, %3927
  br label %3929

; <label>:3929                                    ; preds = %3905, %3902
  %3930 = phi float [ %3920, %3905 ], [ %3904, %3902 ]
  %3931 = phi float [ %3928, %3905 ], [ %3903, %3902 ]
  %3932 = phi float [ %3911, %3905 ], [ %3892, %3902 ]
  %3933 = phi float [ %3909, %3905 ], [ %3888, %3902 ]
  %3934 = fmul fast float %3900, %3933
  %3935 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3934)  ; FMax(a,b)
  %3936 = fsub fast float -0.000000e+00, %3935
  %3937 = call float @dx.op.unary.f32(i32 21, float %3936)  ; Exp(value)
  %3938 = fsub fast float 1.000000e+00, %3937
  %3939 = fdiv fast float %3938, %3935
  %3940 = fmul fast float %3935, 0x3FCEBFBE00000000
  %3941 = fsub fast float 0x3FE62E4300000000, %3940
  %3942 = call float @dx.op.unary.f32(i32 6, float %3935)  ; FAbs(value)
  %3943 = fcmp fast ogt float %3942, 0x3F847AE140000000
  %3944 = select i1 %3943, float %3939, float %3941
  %3945 = fmul fast float %3944, %3930
  %3946 = fmul fast float %3901, %3933
  %3947 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3946)  ; FMax(a,b)
  %3948 = fsub fast float -0.000000e+00, %3947
  %3949 = call float @dx.op.unary.f32(i32 21, float %3948)  ; Exp(value)
  %3950 = fsub fast float 1.000000e+00, %3949
  %3951 = fdiv fast float %3950, %3947
  %3952 = fmul fast float %3947, 0x3FCEBFBE00000000
  %3953 = fsub fast float 0x3FE62E4300000000, %3952
  %3954 = call float @dx.op.unary.f32(i32 6, float %3947)  ; FAbs(value)
  %3955 = fcmp fast ogt float %3954, 0x3F847AE140000000
  %3956 = select i1 %3955, float %3951, float %3953
  %3957 = fmul fast float %3956, %3931
  %3958 = fadd fast float %3957, %3945
  %3959 = extractvalue %dx.types.CBufRet.f32 %3880, 0
  %3960 = extractvalue %dx.types.CBufRet.f32 %3880, 1
  %3961 = extractvalue %dx.types.CBufRet.f32 %3880, 2
  %3962 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3963 = extractvalue %dx.types.CBufRet.f32 %3962, 2
  %3964 = fcmp fast ogt float %3963, 0.000000e+00
  br i1 %3964, label %3965, label %4001, !dx.controlflow.hints !104

; <label>:3965                                    ; preds = %3929
  %3966 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %3967 = extractvalue %dx.types.CBufRet.f32 %3966, 0
  %3968 = fmul fast float %3967, %3892
  %3969 = extractvalue %dx.types.CBufRet.f32 %3966, 1
  %3970 = fadd fast float %3968, %3969
  %3971 = call float @dx.op.unary.f32(i32 7, float %3970)  ; Saturate(value)
  %3972 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %3973 = extractvalue %dx.types.CBufRet.f32 %3972, 1
  %3974 = extractvalue %dx.types.CBufRet.f32 %3972, 0
  %3975 = fsub fast float -0.000000e+00, %3974
  %3976 = call float @dx.op.dot2.f32(i32 54, float %3877, float %3878, float %3973, float %3975)  ; Dot2(ax,ay,bx,by)
  %3977 = call float @dx.op.dot2.f32(i32 54, float %3877, float %3878, float %3974, float %3973)  ; Dot2(ax,ay,bx,by)
  %3978 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3979 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3980 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3978, %dx.types.Handle %3979, float %3976, float %3977, float %3888, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3981 = extractvalue %dx.types.ResRet.f32 %3980, 0
  %3982 = extractvalue %dx.types.ResRet.f32 %3980, 1
  %3983 = extractvalue %dx.types.ResRet.f32 %3980, 2
  %3984 = extractvalue %dx.types.CBufRet.f32 %3966, 2
  %3985 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3978, %dx.types.Handle %3979, float %3976, float %3977, float %3888, float undef, i32 undef, i32 undef, i32 undef, float %3984)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3986 = extractvalue %dx.types.ResRet.f32 %3985, 0
  %3987 = extractvalue %dx.types.ResRet.f32 %3985, 1
  %3988 = extractvalue %dx.types.ResRet.f32 %3985, 2
  %3989 = fsub fast float %3981, %3986
  %3990 = fsub fast float %3982, %3987
  %3991 = fsub fast float %3983, %3988
  %3992 = fmul fast float %3989, %3971
  %3993 = fmul fast float %3990, %3971
  %3994 = fmul fast float %3991, %3971
  %3995 = fadd fast float %3992, %3986
  %3996 = fadd fast float %3993, %3987
  %3997 = fadd fast float %3994, %3988
  %3998 = fmul fast float %3995, %3959
  %3999 = fmul fast float %3996, %3960
  %4000 = fmul fast float %3997, %3961
  br label %4001

; <label>:4001                                    ; preds = %3965, %3929
  %4002 = phi float [ %3998, %3965 ], [ %3959, %3929 ]
  %4003 = phi float [ %3999, %3965 ], [ %3960, %3929 ]
  %4004 = phi float [ %4000, %3965 ], [ %3961, %3929 ]
  %4005 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %4006 = extractvalue %dx.types.CBufRet.f32 %4005, 0
  %4007 = extractvalue %dx.types.CBufRet.f32 %4005, 1
  %4008 = extractvalue %dx.types.CBufRet.f32 %4005, 2
  %4009 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %4010 = extractvalue %dx.types.CBufRet.f32 %4009, 1
  %4011 = fmul fast float %4010, %4006
  %4012 = fmul fast float %4010, %4007
  %4013 = fmul fast float %4010, %4008
  %4014 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4015 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4016 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4014, %dx.types.Handle %4015, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4017 = extractvalue %dx.types.ResRet.f32 %4016, 0
  %4018 = extractvalue %dx.types.ResRet.f32 %4016, 1
  %4019 = extractvalue %dx.types.ResRet.f32 %4016, 2
  %4020 = fmul fast float %4011, %4017
  %4021 = fmul fast float %4012, %4018
  %4022 = fmul fast float %4013, %4019
  %4023 = fadd fast float %4020, %4002
  %4024 = fadd fast float %4021, %4003
  %4025 = fadd fast float %4022, %4004
  %4026 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %4027 = extractvalue %dx.types.CBufRet.f32 %4026, 3
  %4028 = fcmp fast oge float %4027, 0.000000e+00
  %4029 = fcmp fast oeq float %3963, 0.000000e+00
  %4030 = and i1 %4028, %4029
  br i1 %4030, label %4031, label %4102

; <label>:4031                                    ; preds = %4001
  %4032 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %4033 = extractvalue %dx.types.CBufRet.f32 %4032, 0
  %4034 = extractvalue %dx.types.CBufRet.f32 %4032, 1
  %4035 = extractvalue %dx.types.CBufRet.f32 %4032, 2
  %4036 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %4037 = extractvalue %dx.types.CBufRet.f32 %4036, 0
  %4038 = extractvalue %dx.types.CBufRet.f32 %4036, 1
  %4039 = extractvalue %dx.types.CBufRet.f32 %4036, 2
  %4040 = fmul fast float %4010, 0x3FB45F3060000000
  %4041 = fmul fast float %4040, %4037
  %4042 = fmul fast float %4040, %4038
  %4043 = fmul fast float %4040, %4039
  %4044 = fadd fast float %4041, %4033
  %4045 = fadd fast float %4042, %4034
  %4046 = fadd fast float %4043, %4035
  %4047 = extractvalue %dx.types.CBufRet.f32 %4032, 3
  %4048 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %4049 = extractvalue %dx.types.CBufRet.f32 %4048, 0
  %4050 = extractvalue %dx.types.CBufRet.f32 %4048, 1
  %4051 = extractvalue %dx.types.CBufRet.f32 %4048, 2
  %4052 = call float @dx.op.dot3.f32(i32 55, float %3893, float %3894, float %3895, float %4049, float %4050, float %4051)  ; Dot3(ax,ay,az,bx,by,bz)
  %4053 = call float @dx.op.unary.f32(i32 7, float %4052)  ; Saturate(value)
  %4054 = call float @dx.op.unary.f32(i32 23, float %4053)  ; Log(value)
  %4055 = fmul fast float %4054, %4047
  %4056 = call float @dx.op.unary.f32(i32 21, float %4055)  ; Exp(value)
  %4057 = fmul fast float %4056, %4044
  %4058 = fmul fast float %4056, %4045
  %4059 = fmul fast float %4056, %4046
  %4060 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %4061 = extractvalue %dx.types.CBufRet.f32 %4060, 3
  %4062 = fcmp fast ogt float %4061, 0.000000e+00
  br i1 %4062, label %4063, label %4088

; <label>:4063                                    ; preds = %4031
  %4064 = extractvalue %dx.types.CBufRet.f32 %4060, 0
  %4065 = extractvalue %dx.types.CBufRet.f32 %4060, 1
  %4066 = extractvalue %dx.types.CBufRet.f32 %4060, 2
  %4067 = fmul fast float %4040, %4064
  %4068 = fmul fast float %4040, %4065
  %4069 = fmul fast float %4040, %4066
  %4070 = fadd fast float %4067, %4033
  %4071 = fadd fast float %4068, %4034
  %4072 = fadd fast float %4069, %4035
  %4073 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %4074 = extractvalue %dx.types.CBufRet.f32 %4073, 0
  %4075 = extractvalue %dx.types.CBufRet.f32 %4073, 1
  %4076 = extractvalue %dx.types.CBufRet.f32 %4073, 2
  %4077 = call float @dx.op.dot3.f32(i32 55, float %3893, float %3894, float %3895, float %4074, float %4075, float %4076)  ; Dot3(ax,ay,az,bx,by,bz)
  %4078 = call float @dx.op.unary.f32(i32 7, float %4077)  ; Saturate(value)
  %4079 = call float @dx.op.unary.f32(i32 23, float %4078)  ; Log(value)
  %4080 = fmul fast float %4079, %4047
  %4081 = call float @dx.op.unary.f32(i32 21, float %4080)  ; Exp(value)
  %4082 = fmul fast float %4081, %4070
  %4083 = fmul fast float %4081, %4071
  %4084 = fmul fast float %4081, %4072
  %4085 = fadd fast float %4082, %4057
  %4086 = fadd fast float %4083, %4058
  %4087 = fadd fast float %4084, %4059
  br label %4088

; <label>:4088                                    ; preds = %4063, %4031
  %4089 = phi float [ %4085, %4063 ], [ %4057, %4031 ]
  %4090 = phi float [ %4086, %4063 ], [ %4058, %4031 ]
  %4091 = phi float [ %4087, %4063 ], [ %4059, %4031 ]
  %4092 = fsub fast float %3932, %4027
  %4093 = call float @dx.op.binary.f32(i32 35, float %4092, float 0.000000e+00)  ; FMax(a,b)
  %4094 = fmul fast float %3958, %4093
  %4095 = fsub fast float -0.000000e+00, %4094
  %4096 = call float @dx.op.unary.f32(i32 21, float %4095)  ; Exp(value)
  %4097 = call float @dx.op.unary.f32(i32 7, float %4096)  ; Saturate(value)
  %4098 = fsub fast float 1.000000e+00, %4097
  %4099 = fmul fast float %4098, %4089
  %4100 = fmul fast float %4098, %4090
  %4101 = fmul fast float %4098, %4091
  br label %4102

; <label>:4102                                    ; preds = %4088, %4001
  %4103 = phi float [ %4099, %4088 ], [ 0.000000e+00, %4001 ]
  %4104 = phi float [ %4100, %4088 ], [ 0.000000e+00, %4001 ]
  %4105 = phi float [ %4101, %4088 ], [ 0.000000e+00, %4001 ]
  %4106 = fmul fast float %3932, %3958
  %4107 = fsub fast float -0.000000e+00, %4106
  %4108 = call float @dx.op.unary.f32(i32 21, float %4107)  ; Exp(value)
  %4109 = call float @dx.op.unary.f32(i32 7, float %4108)  ; Saturate(value)
  %4110 = call float @dx.op.binary.f32(i32 35, float %4109, float %3881)  ; FMax(a,b)
  %4111 = extractvalue %dx.types.CBufRet.f32 %3962, 3
  %4112 = fcmp fast ogt float %4111, 0.000000e+00
  %4113 = fcmp fast ogt float %3892, %4111
  %4114 = and i1 %4112, %4113
  %4115 = select i1 %4114, float 0.000000e+00, float %4103
  %4116 = select i1 %4114, float 0.000000e+00, float %4104
  %4117 = select i1 %4114, float 0.000000e+00, float %4105
  %4118 = select i1 %4114, float 1.000000e+00, float %4110
  %4119 = fsub fast float 1.000000e+00, %4118
  %4120 = fmul fast float %4119, %4023
  %4121 = fmul fast float %4119, %4024
  %4122 = fmul fast float %4119, %4025
  %4123 = fadd fast float %4120, %4115
  %4124 = fadd fast float %4121, %4116
  %4125 = fadd fast float %4122, %4117
  %4126 = fmul fast float %4118, %3870
  %4127 = fmul fast float %4118, %3871
  %4128 = fmul fast float %4118, %3872
  %4129 = fmul fast float %3869, %3809
  %4130 = fmul fast float %4129, %4123
  %4131 = fmul fast float %4129, %4124
  %4132 = fmul fast float %4129, %4125
  %4133 = fadd fast float %4130, %4126
  %4134 = fadd fast float %4131, %4127
  %4135 = fadd fast float %4132, %4128
  br label %4136

; <label>:4136                                    ; preds = %4102, %3861
  %4137 = phi float [ %4133, %4102 ], [ %3870, %3861 ]
  %4138 = phi float [ %4134, %4102 ], [ %3871, %3861 ]
  %4139 = phi float [ %4135, %4102 ], [ %3872, %3861 ]
  %4140 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %4140, i32 %181, i32 %182, i32 undef, float %4137, float %4138, float %4139, float %4137, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %4141

; <label>:4141                                    ; preds = %4136, %3766
  %4142 = fsub fast float %219, %393
  %4143 = fsub fast float %223, %394
  %4144 = fsub fast float %227, %395
  %4145 = fmul fast float %4142, %4142
  %4146 = fmul fast float %4143, %4143
  %4147 = fadd fast float %4145, %4146
  %4148 = fmul fast float %4144, %4144
  %4149 = fadd fast float %4147, %4148
  %4150 = call float @dx.op.unary.f32(i32 24, float %4149)  ; Sqrt(value)
  %4151 = fadd fast float %4150, %3767
  %4152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %4153 = extractvalue %dx.types.CBufRet.f32 %4152, 2
  %4154 = call float @dx.op.binary.f32(i32 36, float %4151, float %4153)  ; FMin(a,b)
  %4155 = call float @dx.op.binary.f32(i32 35, float %4154, float 0.000000e+00)  ; FMax(a,b)
  %4156 = fmul fast float %4155, 0x3FB99999A0000000
  %4157 = fadd fast float %4156, 5.000000e-01
  %4158 = fptoui float %4157 to i32
  %4159 = call i32 @dx.op.binary.i32(i32 40, i32 %4158, i32 536870911)  ; UMin(a,b)
  %4160 = select i1 %3820, i32 536870912, i32 0
  %4161 = select i1 %3786, i32 1073741824, i32 0
  %4162 = or i32 %4160, %4161
  %4163 = or i32 %4162, %4159
  %4164 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %4164, i32 %181, i32 %182, i32 undef, i32 %4163, i32 %4163, i32 %4163, i32 %4163, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %4165

; <label>:4165                                    ; preds = %4141, %0
  ret void

; <label>:4166                                    ; preds = %3344
  %4167 = fsub fast float %3331, %3326
  %4168 = call float @dx.op.unary.f32(i32 6, float %4167)  ; FAbs(value)
  %4169 = fsub fast float %4168, %3332
  %4170 = fdiv fast float %4169, %3333
  %4171 = call float @dx.op.unary.f32(i32 7, float %4170)  ; Saturate(value)
  %4172 = fsub fast float 1.000000e+00, %4171
  br label %4173

; <label>:4173                                    ; preds = %4166, %3344
  %4174 = phi float [ %4172, %4166 ], [ %3348, %3344 ]
  %4175 = fcmp uge float %3327, 1.000000e+00
  %4176 = or i1 %2999, %4175
  %4177 = select i1 %4175, float 0.000000e+00, float 1.000000e+00
  br i1 %4176, label %4185, label %4178

; <label>:4178                                    ; preds = %4173
  %4179 = fsub fast float %3331, %3327
  %4180 = call float @dx.op.unary.f32(i32 6, float %4179)  ; FAbs(value)
  %4181 = fsub fast float %4180, %3332
  %4182 = fdiv fast float %4181, %3333
  %4183 = call float @dx.op.unary.f32(i32 7, float %4182)  ; Saturate(value)
  %4184 = fsub fast float 1.000000e+00, %4183
  br label %4185

; <label>:4185                                    ; preds = %4178, %4173
  %4186 = phi float [ %4184, %4178 ], [ %4177, %4173 ]
  %4187 = fcmp uge float %3328, 1.000000e+00
  %4188 = or i1 %2999, %4187
  %4189 = select i1 %4187, float 0.000000e+00, float 1.000000e+00
  br i1 %4188, label %4197, label %4190

; <label>:4190                                    ; preds = %4185
  %4191 = fsub fast float %3331, %3328
  %4192 = call float @dx.op.unary.f32(i32 6, float %4191)  ; FAbs(value)
  %4193 = fsub fast float %4192, %3332
  %4194 = fdiv fast float %4193, %3333
  %4195 = call float @dx.op.unary.f32(i32 7, float %4194)  ; Saturate(value)
  %4196 = fsub fast float 1.000000e+00, %4195
  br label %4197

; <label>:4197                                    ; preds = %4190, %4185
  %4198 = phi float [ %4196, %4190 ], [ %4189, %4185 ]
  %4199 = fmul fast float %3345, %3306
  %4200 = fmul fast float %4174, %3307
  %4201 = fmul fast float %4186, %3309
  %4202 = fmul fast float %4198, %3310
  %4203 = call float @dx.op.dot4.f32(i32 56, float %4199, float %4200, float %4201, float %4202, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %4204 = fmul fast float %4203, %3319
  %4205 = fcmp fast ogt float %4204, 0.000000e+00
  br i1 %4205, label %3349, label %3132

; <label>:4206                                    ; preds = %2164
  %4207 = fsub fast float %2151, %2146
  %4208 = call float @dx.op.unary.f32(i32 6, float %4207)  ; FAbs(value)
  %4209 = fsub fast float %4208, %2152
  %4210 = fdiv fast float %4209, %2153
  %4211 = call float @dx.op.unary.f32(i32 7, float %4210)  ; Saturate(value)
  %4212 = fsub fast float 1.000000e+00, %4211
  br label %4213

; <label>:4213                                    ; preds = %4206, %2164
  %4214 = phi float [ %4212, %4206 ], [ %2168, %2164 ]
  %4215 = fcmp uge float %2147, 1.000000e+00
  %4216 = or i1 %1813, %4215
  %4217 = select i1 %4215, float 0.000000e+00, float 1.000000e+00
  br i1 %4216, label %4225, label %4218

; <label>:4218                                    ; preds = %4213
  %4219 = fsub fast float %2151, %2147
  %4220 = call float @dx.op.unary.f32(i32 6, float %4219)  ; FAbs(value)
  %4221 = fsub fast float %4220, %2152
  %4222 = fdiv fast float %4221, %2153
  %4223 = call float @dx.op.unary.f32(i32 7, float %4222)  ; Saturate(value)
  %4224 = fsub fast float 1.000000e+00, %4223
  br label %4225

; <label>:4225                                    ; preds = %4218, %4213
  %4226 = phi float [ %4224, %4218 ], [ %4217, %4213 ]
  %4227 = fcmp uge float %2148, 1.000000e+00
  %4228 = or i1 %1813, %4227
  %4229 = select i1 %4227, float 0.000000e+00, float 1.000000e+00
  br i1 %4228, label %4237, label %4230

; <label>:4230                                    ; preds = %4225
  %4231 = fsub fast float %2151, %2148
  %4232 = call float @dx.op.unary.f32(i32 6, float %4231)  ; FAbs(value)
  %4233 = fsub fast float %4232, %2152
  %4234 = fdiv fast float %4233, %2153
  %4235 = call float @dx.op.unary.f32(i32 7, float %4234)  ; Saturate(value)
  %4236 = fsub fast float 1.000000e+00, %4235
  br label %4237

; <label>:4237                                    ; preds = %4230, %4225
  %4238 = phi float [ %4236, %4230 ], [ %4229, %4225 ]
  %4239 = fmul fast float %2165, %2126
  %4240 = fmul fast float %4214, %2127
  %4241 = fmul fast float %4226, %2129
  %4242 = fmul fast float %4238, %2130
  %4243 = call float @dx.op.dot4.f32(i32 56, float %4239, float %4240, float %4241, float %4242, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %4244 = fmul fast float %4243, %2139
  %4245 = fcmp fast ogt float %4244, 0.000000e+00
  br i1 %4245, label %2169, label %1952
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!66}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !47, !50, !59}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !24, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !44, !45, !46}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 16}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !9}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !9}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !9}
!13 = !{i32 5, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !9}
!14 = !{i32 6, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !9}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 8, i32 1, i32 11, i32 0, null}
!17 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!18 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!19 = !{i32 11, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 5, i32 0, !7}
!20 = !{i32 12, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 5, i32 0, !7}
!21 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!22 = !{i32 14, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 10, i32 0, !23}
!23 = !{i32 0, i32 5}
!24 = !{i32 15, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 15, i32 1, i32 12, i32 0, !25}
!25 = !{i32 1, i32 32}
!26 = !{i32 16, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 16, i32 1, i32 4, i32 0, !23}
!27 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !7}
!28 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !7}
!29 = !{i32 19, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 19, i32 1, i32 11, i32 0, null}
!30 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !7}
!31 = !{i32 21, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 12, i32 0, !9}
!32 = !{i32 22, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 12, i32 0, !9}
!33 = !{i32 23, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 23, i32 1, i32 10, i32 0, !23}
!34 = !{i32 24, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 24, i32 1, i32 10, i32 0, !23}
!35 = !{i32 25, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 25, i32 1, i32 10, i32 0, !23}
!36 = !{i32 26, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 26, i32 1, i32 10, i32 0, !23}
!37 = !{i32 27, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 27, i32 1, i32 10, i32 0, !23}
!38 = !{i32 28, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 28, i32 1, i32 10, i32 0, !23}
!39 = !{i32 29, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 29, i32 1, i32 2, i32 0, !23}
!40 = !{i32 30, %"class.Texture2D<vector<float, 2> >"* undef, !"", i32 0, i32 30, i32 1, i32 2, i32 0, !7}
!41 = !{i32 31, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 31, i32 1, i32 2, i32 0, !23}
!42 = !{i32 32, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 32, i32 1, i32 12, i32 0, !43}
!43 = !{i32 1, i32 4}
!44 = !{i32 33, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 33, i32 1, i32 12, i32 0, !43}
!45 = !{i32 34, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 34, i32 1, i32 12, i32 0, !43}
!46 = !{i32 35, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 35, i32 1, i32 2, i32 0, !23}
!47 = !{!48, !49}
!48 = !{i32 0, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !23}
!49 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!50 = !{!51, !52, !53, !54, !55, !56, !57, !58}
!51 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 980, null}
!52 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!53 = !{i32 2, %UniformBufferConstants_Scene* undef, !"", i32 0, i32 2, i32 1, i32 56, null}
!54 = !{i32 3, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 3, i32 1, i32 140, null}
!55 = !{i32 4, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 4, i32 1, i32 76, null}
!56 = !{i32 5, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 5, i32 1, i32 180, null}
!57 = !{i32 6, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 6, i32 1, i32 44, null}
!58 = !{i32 7, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 7, i32 1, i32 228, null}
!59 = !{!60, !61, !62, !63, !64, !65}
!60 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!61 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 2, i32 1, i32 0, null}
!62 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!63 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!64 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!65 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!66 = !{void ()* @ScreenProbeTraceMeshSDFsCS, !"ScreenProbeTraceMeshSDFsCS", null, !4, !67}
!67 = !{i32 0, i64 16, i32 4, !68, i32 5, !69}
!68 = !{i32 32, i32 1, i32 1}
!69 = !{i32 0}
!70 = distinct !{!70, !"dx.controlflow.hints", i32 1}
!71 = distinct !{!71, !72}
!72 = !{!"llvm.loop.unroll.disable"}
!73 = distinct !{!73, !"dx.controlflow.hints", i32 1}
!74 = distinct !{!74, !"dx.controlflow.hints", i32 1}
!75 = !{!76, !76, i64 0}
!76 = !{!"int", !77, i64 0}
!77 = !{!"omnipotent char", !78, i64 0}
!78 = !{!"Simple C/C++ TBAA"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!81 = distinct !{!81, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!82 = !{!83, !85, !87, !89}
!83 = distinct !{!83, !84, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!84 = distinct !{!84, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!85 = distinct !{!85, !86, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z: %agg.result"}
!86 = distinct !{!86, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z"}
!87 = distinct !{!87, !88, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!88 = distinct !{!88, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!89 = distinct !{!89, !90, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!90 = distinct !{!90, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!93 = distinct !{!93, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!94 = !{!95, !97, !99, !101, !102}
!95 = distinct !{!95, !96, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!96 = distinct !{!96, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!97 = distinct !{!97, !98, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z: %agg.result"}
!98 = distinct !{!98, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z"}
!99 = distinct !{!99, !100, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %agg.result"}
!100 = distinct !{!100, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z"}
!101 = distinct !{!101, !100, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!102 = distinct !{!102, !103, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!103 = distinct !{!103, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!104 = distinct !{!104, !"dx.controlflow.hints", i32 1}
