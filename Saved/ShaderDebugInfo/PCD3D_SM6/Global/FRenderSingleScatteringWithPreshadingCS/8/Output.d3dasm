;
; Note: shader requires additional functionality:
;       Typed UAV Load Additional Formats
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 22e812a3bd5e45462012a17c6b51e103
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       int bApplyEmissionAndTransmittance;           ; Offset:   96
;       int bApplyDirectLighting;                     ; Offset:  100
;       int LightType;                                ; Offset:  104
;       float VolumetricScatteringIntensity;          ; Offset:  128
;       row_major float4x4 TranslatedWorldToShadowMatrix;; Offset:  160
;       float4 ShadowmapMinMax;                       ; Offset:  224
;       float4 DepthBiasParameters;                   ; Offset:  240
;       float4 ShadowInjectParams;                    ; Offset:  256
;       row_major float4x4 ShadowViewProjectionMatrices[6];; Offset:  352
;       float InvShadowmapResolution;                 ; Offset:  736
;       uint bStaticallyShadowed;                     ; Offset:  752
;       row_major float4x4 TranslatedWorldToStaticShadowMatrix;; Offset:  784
;       float4 StaticShadowBufferSize;                ; Offset:  848
;       uint VirtualShadowMapId;                      ; Offset:  880
;       int MipLevel;                                 ; Offset:  912
;       uint3 LightingCacheResolution;                ; Offset:  944
;       float LightingCacheVoxelBias;                 ; Offset:  956
;       float MaxTraceDistance;                       ; Offset:  976
;       float StepSize;                               ; Offset:  980
;       int MaxStepCount;                             ; Offset:  984
;       int bJitter;                                  ; Offset:  988
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   992
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_SparseVoxelUniformBuffer
; {
;
;   struct hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer
;   {
;
;       row_major float4x4 SparseVoxelUniformBuffer_LocalToWorld;; Offset:    0
;       row_major float4x4 SparseVoxelUniformBuffer_WorldToLocal;; Offset:   64
;       float3 SparseVoxelUniformBuffer_LocalBoundsOrigin;; Offset:  128
;       float PrePadding_SparseVoxelUniformBuffer_140;; Offset:  140
;       float3 SparseVoxelUniformBuffer_LocalBoundsExtent;; Offset:  144
;       float PrePadding_SparseVoxelUniformBuffer_156;; Offset:  156
;       int3 SparseVoxelUniformBuffer_VolumeResolution;; Offset:  160
;       int PrePadding_SparseVoxelUniformBuffer_172;  ; Offset:  172
;       uint BindlessResource_SparseVoxelUniformBuffer_ExtinctionTexture;; Offset:  176
;       uint PrePadding_SparseVoxelUniformBuffer_180; ; Offset:  180
;       uint BindlessResource_SparseVoxelUniformBuffer_EmissionTexture;; Offset:  184
;       uint PrePadding_SparseVoxelUniformBuffer_188; ; Offset:  188
;       uint BindlessResource_SparseVoxelUniformBuffer_AlbedoTexture;; Offset:  192
;       uint PrePadding_SparseVoxelUniformBuffer_196; ; Offset:  196
;       uint BindlessSampler_SparseVoxelUniformBuffer_TextureSampler;; Offset:  200
;       uint PrePadding_SparseVoxelUniformBuffer_204; ; Offset:  204
;       int3 SparseVoxelUniformBuffer_LightingCacheResolution;; Offset:  208
;       int PrePadding_SparseVoxelUniformBuffer_220;  ; Offset:  220
;       uint BindlessResource_SparseVoxelUniformBuffer_NumVoxelsBuffer;; Offset:  224
;       uint PrePadding_SparseVoxelUniformBuffer_228; ; Offset:  228
;       uint BindlessResource_SparseVoxelUniformBuffer_VoxelBuffer;; Offset:  232
;       uint PrePadding_SparseVoxelUniformBuffer_236; ; Offset:  236
;       int SparseVoxelUniformBuffer_MipLevel;        ; Offset:  240
;       float SparseVoxelUniformBuffer_MaxTraceDistance;; Offset:  244
;       float SparseVoxelUniformBuffer_MaxShadowTraceDistance;; Offset:  248
;       float SparseVoxelUniformBuffer_StepSize;      ; Offset:  252
;       float SparseVoxelUniformBuffer_StepFactor;    ; Offset:  256
;       float SparseVoxelUniformBuffer_ShadowStepSize;; Offset:  260
;       float SparseVoxelUniformBuffer_ShadowStepFactor;; Offset:  264
;   
;   } UniformBufferConstants_SparseVoxelUniformBuffer;; Offset:    0 Size:   268
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid32Bit;; Offset:  704
;       uint PrePadding_ForwardLightData_708;         ; Offset:  708
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid16Bit;; Offset:  712
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   716
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RayMarchingTilesBuffer
; {
;
;   struct struct.FRayMarchingTile
;   {
;
;       uint2 PixelOffset;                            ; Offset:    0
;       uint Voxels[2];                               ; Offset:    8
;       uint Id;                                      ; Offset:   16
;       uint Padding[3];                              ; Offset:   20
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_SparseVoxelUniformBuffer   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB4            cb4     1
; SparseVoxelUniformBuffer_TextureSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; ShadowDepthTextureSampler         sampler      NA          NA      S2             s2     1
; ShadowDepthCubeTextureSampler     sampler      NA          NA      S3             s3     1
; StaticShadowDepthTextureSampler   sampler      NA          NA      S4             s4     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T0             t0     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T1             t1     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T2             t2     1
; SparseVoxelUniformBuffer_ExtinctionTexture   texture     f32          3d      T3             t3     1
; SparseVoxelUniformBuffer_EmissionTexture   texture     f32          3d      T4             t4     1
; SparseVoxelUniformBuffer_AlbedoTexture   texture     f32          3d      T5             t5     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T6             t6     1
; SceneDepthTexture                 texture     f32          2d      T7             t7     1
; ShadowDepthTexture                texture     f32          2d      T8             t8     1
; ShadowDepthCubeTexture            texture     f32        cube      T9             t9     1
; StaticShadowDepthTexture          texture     f32          2d     T10            t10     1
; RayMarchingTilesBuffer            texture  struct         r/o     T11            t11     1
; RWLightingTexture                     UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<FRayMarchingTile>" = type { %struct.FRayMarchingTile }
%struct.FRayMarchingTile = type { <2 x i32>, [2 x i32], i32, [3 x i32] }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { i32, i32, i32, float, [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, [6 x [4 x <4 x float>]], float, i32, [4 x <4 x float>], <4 x float>, i32, i32, <3 x i32>, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer = type { [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }
%struct.SamplerComparisonState = type { i32 }

define void @RenderSingleScatteringWithPreshadingCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 716 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 268 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 992 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %30 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %31 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.i32 %31, 0
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = extractvalue %dx.types.CBufRet.f32 %33, 3
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %41 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %40, i32 %29, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %42 = extractvalue %dx.types.ResRet.i32 %41, 0
  %43 = extractvalue %dx.types.ResRet.i32 %41, 1
  %44 = and i32 %30, 7
  %45 = lshr i32 %30, 3
  %46 = add i32 %42, %44
  %47 = add i32 %43, %45
  %48 = uitofp i32 %46 to float
  %49 = uitofp i32 %47 to float
  %50 = fptoui float %48 to i32
  %51 = fptoui float %49 to i32
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %53 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %52, i32 undef, i32 %50, i32 %51, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %54 = extractvalue %dx.types.ResRet.f32 %53, 3
  %55 = fsub fast float 1.000000e+00, %54
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = fcmp fast oge float %48, %57
  %60 = fcmp fast oge float %49, %58
  %61 = or i1 %59, %60
  br i1 %61, label %1806, label %62

; <label>:62                                      ; preds = %0
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = fadd fast float %64, %48
  %67 = fadd fast float %65, %49
  %68 = fptosi float %66 to i32
  %69 = fptosi float %67 to i32
  %70 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %71 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %70, i32 0, i32 %68, i32 %69, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %72 = extractvalue %dx.types.ResRet.f32 %71, 0
  %73 = call float @dx.op.binary.f32(i32 35, float 0x3D71979980000000, float %72)  ; FMax(a,b)
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = fmul fast float %77, %73
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %80 = fadd fast float %78, %79
  %81 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %82 = fmul fast float %81, %73
  %83 = extractvalue %dx.types.CBufRet.f32 %76, 3
  %84 = fsub fast float %82, %83
  %85 = fdiv fast float 1.000000e+00, %84
  %86 = fadd fast float %80, %85
  %87 = call float @dx.op.binary.f32(i32 36, float %86, float %75)  ; FMin(a,b)
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %90 = bitcast float %89 to i32
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %98, label %92, !dx.controlflow.hints !40

; <label>:92                                      ; preds = %62
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %95 = fmul fast float %94, %87
  %96 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %97 = fadd fast float %95, %96
  br label %102

; <label>:98                                      ; preds = %62
  %99 = fadd fast float %83, %87
  %100 = fmul fast float %99, %81
  %101 = fdiv fast float 1.000000e+00, %100
  br label %102

; <label>:102                                     ; preds = %98, %92
  %103 = phi float [ %97, %92 ], [ %101, %98 ]
  %104 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.i32 %104, 3
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %119, label %107

; <label>:107                                     ; preds = %102
  %108 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.i32 %108, 1
  %110 = uitofp i32 %109 to float
  %111 = fmul fast float %110, 0x4040551EC0000000
  %112 = fmul fast float %110, 0x4027A147A0000000
  %113 = fadd fast float %111, %66
  %114 = fadd fast float %112, %67
  %115 = call float @dx.op.dot2.f32(i32 54, float %113, float %114, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %116 = call float @dx.op.unary.f32(i32 22, float %115)  ; Frc(value)
  %117 = fmul fast float %116, 0x404A7DD040000000
  %118 = call float @dx.op.unary.f32(i32 22, float %117)  ; Frc(value)
  br label %119

; <label>:119                                     ; preds = %107, %102
  %120 = phi float [ %118, %107 ], [ 0.000000e+00, %102 ]
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 0
  %127 = extractvalue %dx.types.CBufRet.f32 %125, 1
  %128 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %129 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %130 = extractvalue %dx.types.CBufRet.f32 %129, 0
  %131 = extractvalue %dx.types.CBufRet.f32 %129, 1
  %132 = extractvalue %dx.types.CBufRet.f32 %129, 2
  %133 = fsub fast float %130, %126
  %134 = fsub fast float %131, %127
  %135 = fsub fast float %132, %128
  %136 = fmul fast float %122, 2.097152e+06
  %137 = fmul fast float %123, 2.097152e+06
  %138 = fmul fast float %124, 2.097152e+06
  %139 = fadd fast float %133, %136
  %140 = fadd fast float %134, %137
  %141 = fadd fast float %135, %138
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 121)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 0
  %144 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %145 = fadd fast float %143, %66
  %146 = fadd fast float %144, %67
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = extractvalue %dx.types.CBufRet.f32 %147, 3
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %154 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %155 = extractvalue %dx.types.CBufRet.f32 %152, 2
  %156 = extractvalue %dx.types.CBufRet.f32 %152, 3
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 0
  %159 = extractvalue %dx.types.CBufRet.f32 %157, 1
  %160 = extractvalue %dx.types.CBufRet.f32 %157, 2
  %161 = extractvalue %dx.types.CBufRet.f32 %157, 3
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = extractvalue %dx.types.CBufRet.f32 %162, 3
  %167 = fmul fast float %145, %148
  %168 = call float @dx.op.tertiary.f32(i32 46, float %146, float %153, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %103, float %158, float %168)  ; FMad(a,b,c)
  %170 = fadd fast float %169, %163
  %171 = fmul fast float %145, %149
  %172 = call float @dx.op.tertiary.f32(i32 46, float %146, float %154, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %103, float %159, float %172)  ; FMad(a,b,c)
  %174 = fadd fast float %173, %164
  %175 = fmul fast float %145, %150
  %176 = call float @dx.op.tertiary.f32(i32 46, float %146, float %155, float %175)  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float %103, float %160, float %176)  ; FMad(a,b,c)
  %178 = fadd fast float %177, %165
  %179 = fmul fast float %145, %151
  %180 = call float @dx.op.tertiary.f32(i32 46, float %146, float %156, float %179)  ; FMad(a,b,c)
  %181 = call float @dx.op.tertiary.f32(i32 46, float %103, float %161, float %180)  ; FMad(a,b,c)
  %182 = fadd fast float %181, %166
  %183 = fdiv fast float %170, %182
  %184 = fdiv fast float %174, %182
  %185 = fdiv fast float %178, %182
  %186 = fsub fast float %183, %126
  %187 = fsub fast float %184, %127
  %188 = fsub fast float %185, %128
  %189 = fadd fast float %186, %136
  %190 = fadd fast float %187, %137
  %191 = fadd fast float %188, %138
  %192 = fsub fast float %183, %130
  %193 = fsub fast float %184, %131
  %194 = fsub fast float %185, %132
  %195 = fmul fast float %192, %192
  %196 = fmul fast float %193, %193
  %197 = fadd fast float %195, %196
  %198 = fmul fast float %194, %194
  %199 = fadd fast float %197, %198
  %200 = call float @dx.op.unary.f32(i32 24, float %199)  ; Sqrt(value)
  %201 = fdiv fast float %192, %200
  %202 = fdiv fast float %193, %200
  %203 = fdiv fast float %194, %200
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %207 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %209 = extractvalue %dx.types.CBufRet.f32 %208, 0
  %210 = extractvalue %dx.types.CBufRet.f32 %208, 1
  %211 = extractvalue %dx.types.CBufRet.f32 %208, 2
  %212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.f32 %212, 0
  %214 = extractvalue %dx.types.CBufRet.f32 %212, 1
  %215 = extractvalue %dx.types.CBufRet.f32 %212, 2
  %216 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.f32 %216, 0
  %218 = extractvalue %dx.types.CBufRet.f32 %216, 1
  %219 = extractvalue %dx.types.CBufRet.f32 %216, 2
  %220 = fmul fast float %205, %139
  %221 = call float @dx.op.tertiary.f32(i32 46, float %140, float %209, float %220)  ; FMad(a,b,c)
  %222 = call float @dx.op.tertiary.f32(i32 46, float %141, float %213, float %221)  ; FMad(a,b,c)
  %223 = fadd fast float %222, %217
  %224 = fmul fast float %206, %139
  %225 = call float @dx.op.tertiary.f32(i32 46, float %140, float %210, float %224)  ; FMad(a,b,c)
  %226 = call float @dx.op.tertiary.f32(i32 46, float %141, float %214, float %225)  ; FMad(a,b,c)
  %227 = fadd fast float %226, %218
  %228 = fmul fast float %207, %139
  %229 = call float @dx.op.tertiary.f32(i32 46, float %140, float %211, float %228)  ; FMad(a,b,c)
  %230 = call float @dx.op.tertiary.f32(i32 46, float %141, float %215, float %229)  ; FMad(a,b,c)
  %231 = fadd fast float %230, %219
  %232 = fmul fast float %205, %189
  %233 = call float @dx.op.tertiary.f32(i32 46, float %190, float %209, float %232)  ; FMad(a,b,c)
  %234 = call float @dx.op.tertiary.f32(i32 46, float %191, float %213, float %233)  ; FMad(a,b,c)
  %235 = fmul fast float %206, %189
  %236 = call float @dx.op.tertiary.f32(i32 46, float %190, float %210, float %235)  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %191, float %214, float %236)  ; FMad(a,b,c)
  %238 = fmul fast float %207, %189
  %239 = call float @dx.op.tertiary.f32(i32 46, float %190, float %211, float %238)  ; FMad(a,b,c)
  %240 = call float @dx.op.tertiary.f32(i32 46, float %191, float %215, float %239)  ; FMad(a,b,c)
  %241 = fsub fast float %234, %222
  %242 = fsub fast float %237, %226
  %243 = fsub fast float %240, %230
  %244 = fmul fast float %241, %241
  %245 = fmul fast float %242, %242
  %246 = fadd fast float %245, %244
  %247 = fmul fast float %243, %243
  %248 = fadd fast float %246, %247
  %249 = call float @dx.op.unary.f32(i32 24, float %248)  ; Sqrt(value)
  %250 = fdiv fast float %241, %249
  %251 = fdiv fast float %242, %249
  %252 = fdiv fast float %243, %249
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %258 = extractvalue %dx.types.CBufRet.f32 %257, 0
  %259 = extractvalue %dx.types.CBufRet.f32 %257, 1
  %260 = extractvalue %dx.types.CBufRet.f32 %257, 2
  %261 = fdiv fast float 1.000000e+00, %250
  %262 = fdiv fast float 1.000000e+00, %251
  %263 = fdiv fast float 1.000000e+00, %252
  %264 = fsub fast float %254, %223
  %265 = fsub fast float %264, %258
  %266 = fsub fast float %255, %227
  %267 = fsub fast float %266, %259
  %268 = fsub fast float %256, %231
  %269 = fsub fast float %268, %260
  %270 = fmul fast float %261, %265
  %271 = fmul fast float %262, %267
  %272 = fmul fast float %263, %269
  %273 = fadd fast float %264, %258
  %274 = fadd fast float %266, %259
  %275 = fadd fast float %268, %260
  %276 = fmul fast float %273, %261
  %277 = fmul fast float %274, %262
  %278 = fmul fast float %263, %275
  %279 = call float @dx.op.binary.f32(i32 36, float %270, float %276)  ; FMin(a,b)
  %280 = call float @dx.op.binary.f32(i32 36, float %271, float %277)  ; FMin(a,b)
  %281 = call float @dx.op.binary.f32(i32 36, float %272, float %278)  ; FMin(a,b)
  %282 = call float @dx.op.binary.f32(i32 35, float %270, float %276)  ; FMax(a,b)
  %283 = call float @dx.op.binary.f32(i32 35, float %271, float %277)  ; FMax(a,b)
  %284 = call float @dx.op.binary.f32(i32 35, float %272, float %278)  ; FMax(a,b)
  %285 = call float @dx.op.binary.f32(i32 35, float %280, float %281)  ; FMax(a,b)
  %286 = call float @dx.op.binary.f32(i32 35, float %279, float %285)  ; FMax(a,b)
  %287 = call float @dx.op.binary.f32(i32 36, float %283, float %284)  ; FMin(a,b)
  %288 = call float @dx.op.binary.f32(i32 36, float %282, float %287)  ; FMin(a,b)
  %289 = call float @dx.op.binary.f32(i32 35, float %286, float 0.000000e+00)  ; FMax(a,b)
  %290 = call float @dx.op.binary.f32(i32 36, float %288, float %249)  ; FMin(a,b)
  %291 = fsub fast float %290, %289
  %292 = fcmp fast ugt float %291, 0.000000e+00
  br i1 %292, label %293, label %1806

; <label>:293                                     ; preds = %119
  %294 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.i32 %294, 1
  %296 = extractvalue %dx.types.CBufRet.i32 %294, 0
  %297 = extractvalue %dx.types.CBufRet.i32 %104, 2
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 3
  %300 = fcmp fast ugt float %299, 0.000000e+00
  br i1 %300, label %323, label %301

; <label>:301                                     ; preds = %293
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 0
  %304 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %305 = extractvalue %dx.types.CBufRet.i32 %304, 0
  %306 = extractvalue %dx.types.CBufRet.i32 %304, 1
  %307 = extractvalue %dx.types.CBufRet.i32 %304, 2
  %308 = uitofp i32 %305 to float
  %309 = uitofp i32 %306 to float
  %310 = uitofp i32 %307 to float
  %311 = fmul fast float %308, %250
  %312 = fdiv fast float %258, %311
  %313 = fmul fast float %309, %251
  %314 = fdiv fast float %259, %313
  %315 = fmul fast float %310, %252
  %316 = fdiv fast float %260, %315
  %317 = call float @dx.op.unary.f32(i32 6, float %312)  ; FAbs(value)
  %318 = call float @dx.op.unary.f32(i32 6, float %314)  ; FAbs(value)
  %319 = call float @dx.op.unary.f32(i32 6, float %316)  ; FAbs(value)
  %320 = call float @dx.op.binary.f32(i32 36, float %318, float %319)  ; FMin(a,b)
  %321 = call float @dx.op.binary.f32(i32 36, float %317, float %320)  ; FMin(a,b)
  %322 = fmul fast float %321, %303
  br label %323

; <label>:323                                     ; preds = %301, %293
  %324 = phi float [ %322, %301 ], [ %299, %293 ]
  %325 = call float @dx.op.binary.f32(i32 35, float %324, float 0x3F847AE140000000)  ; FMax(a,b)
  %326 = fmul fast float %290, %250
  %327 = fmul fast float %290, %251
  %328 = fmul fast float %290, %252
  %329 = fadd fast float %326, %223
  %330 = fadd fast float %327, %227
  %331 = fadd fast float %328, %231
  %332 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %333 = extractvalue %dx.types.CBufRet.f32 %332, 0
  %334 = extractvalue %dx.types.CBufRet.f32 %332, 1
  %335 = extractvalue %dx.types.CBufRet.f32 %332, 2
  %336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %337 = extractvalue %dx.types.CBufRet.f32 %336, 0
  %338 = extractvalue %dx.types.CBufRet.f32 %336, 1
  %339 = extractvalue %dx.types.CBufRet.f32 %336, 2
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = extractvalue %dx.types.CBufRet.f32 %340, 1
  %343 = extractvalue %dx.types.CBufRet.f32 %340, 2
  %344 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %345 = extractvalue %dx.types.CBufRet.f32 %344, 0
  %346 = extractvalue %dx.types.CBufRet.f32 %344, 1
  %347 = extractvalue %dx.types.CBufRet.f32 %344, 2
  %348 = fmul fast float %333, %329
  %349 = call float @dx.op.tertiary.f32(i32 46, float %330, float %337, float %348)  ; FMad(a,b,c)
  %350 = call float @dx.op.tertiary.f32(i32 46, float %331, float %341, float %349)  ; FMad(a,b,c)
  %351 = fmul fast float %334, %329
  %352 = call float @dx.op.tertiary.f32(i32 46, float %330, float %338, float %351)  ; FMad(a,b,c)
  %353 = call float @dx.op.tertiary.f32(i32 46, float %331, float %342, float %352)  ; FMad(a,b,c)
  %354 = fmul fast float %335, %329
  %355 = call float @dx.op.tertiary.f32(i32 46, float %330, float %339, float %354)  ; FMad(a,b,c)
  %356 = call float @dx.op.tertiary.f32(i32 46, float %331, float %343, float %355)  ; FMad(a,b,c)
  %357 = fsub fast float %345, %139
  %358 = fadd fast float %357, %350
  %359 = fsub fast float %346, %140
  %360 = fadd fast float %359, %353
  %361 = fsub fast float %347, %141
  %362 = fadd fast float %361, %356
  %363 = fmul fast float %358, %358
  %364 = fmul fast float %360, %360
  %365 = fadd fast float %364, %363
  %366 = fmul fast float %362, %362
  %367 = fadd fast float %365, %366
  %368 = call float @dx.op.unary.f32(i32 24, float %367)  ; Sqrt(value)
  %369 = fdiv fast float %368, %290
  %370 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %371 = extractvalue %dx.types.CBufRet.f32 %370, 0
  %372 = extractvalue %dx.types.CBufRet.i32 %294, 2
  %373 = icmp ne i32 %372, 0
  %374 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %375 = extractvalue %dx.types.CBufRet.f32 %374, 0
  %376 = extractvalue %dx.types.CBufRet.f32 %374, 1
  %377 = extractvalue %dx.types.CBufRet.f32 %374, 2
  %378 = extractvalue %dx.types.CBufRet.f32 %374, 3
  %379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %380 = extractvalue %dx.types.CBufRet.f32 %379, 0
  %381 = extractvalue %dx.types.CBufRet.f32 %379, 1
  %382 = extractvalue %dx.types.CBufRet.f32 %379, 2
  %383 = extractvalue %dx.types.CBufRet.f32 %379, 3
  %384 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %385 = extractvalue %dx.types.CBufRet.f32 %384, 0
  %386 = extractvalue %dx.types.CBufRet.f32 %384, 1
  %387 = extractvalue %dx.types.CBufRet.f32 %384, 2
  %388 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %389 = extractvalue %dx.types.CBufRet.f32 %388, 0
  %390 = extractvalue %dx.types.CBufRet.f32 %388, 1
  %391 = extractvalue %dx.types.CBufRet.f32 %388, 2
  %392 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %393 = extractvalue %dx.types.CBufRet.f32 %392, 0
  %394 = extractvalue %dx.types.CBufRet.f32 %392, 1
  %395 = extractvalue %dx.types.CBufRet.f32 %388, 3
  %396 = fsub fast float -0.000000e+00, %395
  %397 = extractvalue %dx.types.CBufRet.f32 %392, 3
  %398 = select i1 %373, float %397, float 0.000000e+00
  %399 = fsub fast float -0.000000e+00, %398
  %400 = fcmp fast oeq float %383, 0.000000e+00
  %401 = and i1 %373, %400
  %402 = icmp eq i32 %372, 2
  %403 = icmp eq i32 %372, 3
  %404 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %405 = extractvalue %dx.types.CBufRet.f32 %404, 0
  %406 = extractvalue %dx.types.CBufRet.f32 %404, 1
  %407 = fmul fast float %258, 2.000000e+00
  %408 = fmul fast float %259, 2.000000e+00
  %409 = fmul fast float %260, 2.000000e+00
  %410 = fmul fast float %407, %407
  %411 = fmul fast float %408, %408
  %412 = fadd fast float %410, %411
  %413 = fmul fast float %409, %409
  %414 = fadd fast float %412, %413
  %415 = call float @dx.op.unary.f32(i32 24, float %414)  ; Sqrt(value)
  %416 = fdiv fast float %415, %325
  %417 = call float @dx.op.binary.f32(i32 35, float %416, float 1.000000e+00)  ; FMax(a,b)
  %418 = fptoui float %417 to i32
  %419 = icmp ugt i32 %418, %297
  %420 = uitofp i32 %297 to float
  %421 = fdiv fast float %415, %420
  %422 = select i1 %419, float %421, float %325
  %423 = call float @dx.op.unary.f32(i32 6, float %291)  ; FAbs(value)
  %424 = fdiv fast float %423, %422
  %425 = call float @dx.op.unary.f32(i32 28, float %424)  ; Round_pi(value)
  %426 = call float @dx.op.binary.f32(i32 35, float %425, float 1.000000e+00)  ; FMax(a,b)
  %427 = fptoui float %426 to i32
  %428 = icmp eq i32 %427, 0
  br i1 %428, label %1768, label %429

; <label>:429                                     ; preds = %323
  br label %430

; <label>:430                                     ; preds = %1761, %429
  %431 = phi i32 [ %1762, %1761 ], [ 0, %429 ]
  %432 = phi float [ %1743, %1761 ], [ 0.000000e+00, %429 ]
  %433 = phi float [ %1744, %1761 ], [ 0.000000e+00, %429 ]
  %434 = phi float [ %1745, %1761 ], [ 0.000000e+00, %429 ]
  %435 = phi float [ %1753, %1761 ], [ %55, %429 ]
  %436 = phi float [ %1754, %1761 ], [ %55, %429 ]
  %437 = phi float [ %1755, %1761 ], [ %55, %429 ]
  %438 = uitofp i32 %431 to float
  %439 = fadd fast float %438, %120
  %440 = fmul fast float %439, %422
  %441 = fadd fast float %440, %289
  %442 = fmul fast float %441, %250
  %443 = fmul fast float %441, %251
  %444 = fmul fast float %441, %252
  %445 = fadd fast float %442, %223
  %446 = fadd fast float %443, %227
  %447 = fadd fast float %444, %231
  %448 = fmul fast float %369, %201
  %449 = fmul fast float %448, %441
  %450 = fmul fast float %369, %202
  %451 = fmul fast float %450, %441
  %452 = fmul fast float %369, %203
  %453 = fmul fast float %452, %441
  %454 = fadd fast float %139, %449
  %455 = fadd fast float %140, %451
  %456 = fadd fast float %141, %453
  %457 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %458 = extractvalue %dx.types.CBufRet.f32 %457, 0
  %459 = extractvalue %dx.types.CBufRet.f32 %457, 1
  %460 = extractvalue %dx.types.CBufRet.f32 %457, 2
  %461 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %462 = extractvalue %dx.types.CBufRet.f32 %461, 0
  %463 = extractvalue %dx.types.CBufRet.f32 %461, 1
  %464 = extractvalue %dx.types.CBufRet.f32 %461, 2
  %465 = fsub fast float %458, %462
  %466 = fsub fast float %459, %463
  %467 = fsub fast float %460, %464
  %468 = fsub fast float %445, %465
  %469 = fsub fast float %446, %466
  %470 = fsub fast float %447, %467
  %471 = fadd fast float %462, %462
  %472 = fadd fast float %463, %463
  %473 = fadd fast float %464, %464
  %474 = fdiv fast float %468, %471
  %475 = fdiv fast float %469, %472
  %476 = fdiv fast float %470, %473
  %477 = icmp eq i32 %296, 0
  br i1 %477, label %494, label %478

; <label>:478                                     ; preds = %430
  %479 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %480 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %481 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %479, %dx.types.Handle %480, float %474, float %475, float %476, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %482 = extractvalue %dx.types.ResRet.f32 %481, 0
  %483 = extractvalue %dx.types.ResRet.f32 %481, 1
  %484 = extractvalue %dx.types.ResRet.f32 %481, 2
  %485 = fmul fast float %435, %422
  %486 = fmul fast float %485, %482
  %487 = fmul fast float %436, %422
  %488 = fmul fast float %487, %483
  %489 = fmul fast float %437, %422
  %490 = fmul fast float %489, %484
  %491 = fadd fast float %486, %432
  %492 = fadd fast float %488, %433
  %493 = fadd fast float %490, %434
  br label %494

; <label>:494                                     ; preds = %478, %430
  %495 = phi float [ %491, %478 ], [ %432, %430 ]
  %496 = phi float [ %492, %478 ], [ %433, %430 ]
  %497 = phi float [ %493, %478 ], [ %434, %430 ]
  %498 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %499 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %500 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %498, %dx.types.Handle %499, float %474, float %475, float %476, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %501 = extractvalue %dx.types.ResRet.f32 %500, 0
  %502 = extractvalue %dx.types.ResRet.f32 %500, 1
  %503 = extractvalue %dx.types.ResRet.f32 %500, 2
  %504 = icmp eq i32 %295, 0
  br i1 %504, label %1742, label %505

; <label>:505                                     ; preds = %494
  %506 = fcmp fast ogt float %501, 0.000000e+00
  %507 = fcmp fast ogt float %502, 0.000000e+00
  %508 = fcmp fast ogt float %503, 0.000000e+00
  %509 = or i1 %506, %507
  %510 = or i1 %508, %509
  br i1 %510, label %511, label %1742

; <label>:511                                     ; preds = %505
  %512 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %513 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %512, %dx.types.Handle %499, float %474, float %475, float %476, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %514 = extractvalue %dx.types.ResRet.f32 %513, 0
  %515 = extractvalue %dx.types.ResRet.f32 %513, 1
  %516 = extractvalue %dx.types.ResRet.f32 %513, 2
  %517 = fcmp fast ogt float %514, 0.000000e+00
  %518 = fcmp fast ogt float %515, 0.000000e+00
  %519 = fcmp fast ogt float %516, 0.000000e+00
  %520 = or i1 %517, %518
  %521 = or i1 %519, %520
  br i1 %521, label %522, label %1742

; <label>:522                                     ; preds = %511
  %523 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %524 = extractvalue %dx.types.CBufRet.f32 %523, 0
  %525 = extractvalue %dx.types.CBufRet.f32 %523, 1
  %526 = extractvalue %dx.types.CBufRet.f32 %523, 2
  %527 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %528 = extractvalue %dx.types.CBufRet.f32 %527, 0
  %529 = extractvalue %dx.types.CBufRet.f32 %527, 1
  %530 = extractvalue %dx.types.CBufRet.f32 %527, 2
  %531 = fadd fast float %454, %528
  %532 = fadd fast float %455, %529
  %533 = fadd fast float %456, %530
  %534 = fmul fast float %524, 2.097152e+06
  %535 = fmul fast float %525, 2.097152e+06
  %536 = fmul fast float %526, 2.097152e+06
  %537 = fsub fast float %531, %534
  %538 = fsub fast float %532, %535
  %539 = fsub fast float %533, %536
  %540 = icmp eq i32 %372, 0
  br i1 %540, label %848, label %541

; <label>:541                                     ; preds = %522
  %542 = fsub fast float %375, %537
  %543 = fsub fast float %376, %538
  %544 = fsub fast float %377, %539
  %545 = call float @dx.op.dot3.f32(i32 55, float %542, float %543, float %544, float %542, float %543, float %544)  ; Dot3(ax,ay,az,bx,by,bz)
  %546 = call float @dx.op.unary.f32(i32 25, float %545)  ; Rsqrt(value)
  %547 = fmul fast float %546, %542
  %548 = fmul fast float %546, %543
  %549 = fmul fast float %546, %544
  br i1 %401, label %550, label %557

; <label>:550                                     ; preds = %541
  %551 = fmul fast float %378, %378
  %552 = fmul fast float %551, %545
  %553 = fmul fast float %552, %552
  %554 = fsub fast float 1.000000e+00, %553
  %555 = call float @dx.op.unary.f32(i32 7, float %554)  ; Saturate(value)
  %556 = fmul fast float %555, %555
  br label %567

; <label>:557                                     ; preds = %541
  %558 = fmul fast float %542, %378
  %559 = fmul fast float %543, %378
  %560 = fmul fast float %544, %378
  %561 = call float @dx.op.dot3.f32(i32 55, float %558, float %559, float %560, float %558, float %559, float %560)  ; Dot3(ax,ay,az,bx,by,bz)
  %562 = call float @dx.op.unary.f32(i32 7, float %561)  ; Saturate(value)
  %563 = fsub fast float 1.000000e+00, %562
  %564 = call float @dx.op.unary.f32(i32 23, float %563)  ; Log(value)
  %565 = fmul fast float %564, %383
  %566 = call float @dx.op.unary.f32(i32 21, float %565)  ; Exp(value)
  br label %567

; <label>:567                                     ; preds = %557, %550
  %568 = phi float [ %556, %550 ], [ %566, %557 ]
  br i1 %402, label %569, label %576

; <label>:569                                     ; preds = %567
  %570 = call float @dx.op.dot3.f32(i32 55, float %547, float %548, float %549, float %385, float %386, float %387)  ; Dot3(ax,ay,az,bx,by,bz)
  %571 = fsub fast float %570, %393
  %572 = fmul fast float %571, %394
  %573 = call float @dx.op.unary.f32(i32 7, float %572)  ; Saturate(value)
  %574 = fmul fast float %573, %573
  %575 = fmul fast float %574, %568
  br label %576

; <label>:576                                     ; preds = %569, %567
  %577 = phi float [ %575, %569 ], [ %568, %567 ]
  br i1 %403, label %578, label %582

; <label>:578                                     ; preds = %576
  %579 = call float @dx.op.dot3.f32(i32 55, float %385, float %386, float %387, float %547, float %548, float %549)  ; Dot3(ax,ay,az,bx,by,bz)
  %580 = fcmp fast olt float %579, 0.000000e+00
  %581 = select i1 %580, float 0.000000e+00, float %577
  br label %582

; <label>:582                                     ; preds = %578, %576
  %583 = phi float [ %581, %578 ], [ %577, %576 ]
  br i1 %403, label %584, label %819

; <label>:584                                     ; preds = %582
  %585 = fmul fast float %390, %387
  %586 = fmul fast float %391, %386
  %587 = fsub fast float %585, %586
  %588 = fmul fast float %391, %385
  %589 = fmul fast float %389, %387
  %590 = fsub fast float %588, %589
  %591 = fmul fast float %389, %386
  %592 = fmul fast float %390, %385
  %593 = fsub fast float %591, %592
  %594 = fcmp fast ogt float %405, 0x3FA1EB8520000000
  br i1 %594, label %595, label %690

; <label>:595                                     ; preds = %584
  %596 = fmul fast float %542, %587
  %597 = call float @dx.op.tertiary.f32(i32 46, float %590, float %543, float %596)  ; FMad(a,b,c)
  %598 = call float @dx.op.tertiary.f32(i32 46, float %593, float %544, float %597)  ; FMad(a,b,c)
  %599 = fmul fast float %542, %389
  %600 = call float @dx.op.tertiary.f32(i32 46, float %390, float %543, float %599)  ; FMad(a,b,c)
  %601 = call float @dx.op.tertiary.f32(i32 46, float %391, float %544, float %600)  ; FMad(a,b,c)
  %602 = fmul fast float %542, %385
  %603 = call float @dx.op.tertiary.f32(i32 46, float %386, float %543, float %602)  ; FMad(a,b,c)
  %604 = call float @dx.op.tertiary.f32(i32 46, float %387, float %544, float %603)  ; FMad(a,b,c)
  %605 = fmul fast float %405, %405
  %606 = fsub fast float 1.000000e+00, %605
  %607 = call float @dx.op.unary.f32(i32 24, float %606)  ; Sqrt(value)
  %608 = fmul fast float %406, %405
  %609 = call float @dx.op.binary.f32(i32 36, float %604, float %608)  ; FMin(a,b)
  %610 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %608)  ; FMax(a,b)
  %611 = fdiv fast float %609, %610
  %612 = fmul fast float %607, %406
  %613 = fmul fast float %612, %611
  %614 = fcmp fast ogt float %598, 0.000000e+00
  %615 = fcmp fast ogt float %601, 0.000000e+00
  %616 = fcmp fast olt float %598, 0.000000e+00
  %617 = fcmp fast olt float %601, 0.000000e+00
  %618 = zext i1 %614 to i32
  %619 = zext i1 %615 to i32
  %620 = zext i1 %616 to i32
  %621 = zext i1 %617 to i32
  %622 = sub nsw i32 %618, %620
  %623 = sub nsw i32 %619, %621
  %624 = sitofp i32 %622 to float
  %625 = sitofp i32 %623 to float
  %626 = fadd fast float %613, %395
  %627 = fadd fast float %613, %398
  %628 = call float @dx.op.unary.f32(i32 6, float %598)  ; FAbs(value)
  %629 = call float @dx.op.unary.f32(i32 6, float %601)  ; FAbs(value)
  %630 = call float @dx.op.binary.f32(i32 35, float %628, float %626)  ; FMax(a,b)
  %631 = call float @dx.op.binary.f32(i32 35, float %629, float %627)  ; FMax(a,b)
  %632 = fsub fast float %396, %613
  %633 = fadd fast float %632, %630
  %634 = fmul fast float %633, %624
  %635 = fsub fast float %399, %613
  %636 = fadd fast float %635, %631
  %637 = fmul fast float %636, %625
  %638 = fsub fast float %604, %609
  %639 = call float @dx.op.binary.f32(i32 35, float %638, float 0x3F50624DE0000000)  ; FMax(a,b)
  %640 = call float @dx.op.unary.f32(i32 6, float %634)  ; FAbs(value)
  %641 = call float @dx.op.unary.f32(i32 6, float %637)  ; FAbs(value)
  %642 = fdiv fast float %640, %639
  %643 = fdiv fast float %641, %639
  %644 = fmul fast float %642, %609
  %645 = fmul fast float %643, %609
  %646 = fsub fast float %644, %613
  %647 = fsub fast float %645, %613
  %648 = fsub fast float -0.000000e+00, %624
  %649 = fsub fast float -0.000000e+00, %625
  %650 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %648)  ; FMax(a,b)
  %651 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %649)  ; FMax(a,b)
  %652 = fmul fast float %646, %650
  %653 = fmul fast float %647, %651
  %654 = fsub fast float %652, %395
  %655 = fsub fast float %653, %398
  %656 = call float @dx.op.binary.f32(i32 35, float %654, float %396)  ; FMax(a,b)
  %657 = call float @dx.op.binary.f32(i32 35, float %655, float %399)  ; FMax(a,b)
  %658 = call float @dx.op.binary.f32(i32 36, float %656, float %395)  ; FMin(a,b)
  %659 = call float @dx.op.binary.f32(i32 36, float %657, float %398)  ; FMin(a,b)
  %660 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %624)  ; FMax(a,b)
  %661 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %625)  ; FMax(a,b)
  %662 = fmul fast float %660, %646
  %663 = fmul fast float %661, %647
  %664 = fsub fast float %395, %662
  %665 = fsub fast float %398, %663
  %666 = call float @dx.op.binary.f32(i32 35, float %664, float %396)  ; FMax(a,b)
  %667 = call float @dx.op.binary.f32(i32 35, float %665, float %399)  ; FMax(a,b)
  %668 = call float @dx.op.binary.f32(i32 36, float %666, float %395)  ; FMin(a,b)
  %669 = call float @dx.op.binary.f32(i32 36, float %667, float %398)  ; FMin(a,b)
  %670 = fadd fast float %668, %658
  %671 = fadd fast float %669, %659
  %672 = fmul fast float %670, 5.000000e-01
  %673 = fmul fast float %671, 5.000000e-01
  %674 = fsub fast float %668, %658
  %675 = fsub fast float %669, %659
  %676 = fmul fast float %674, 5.000000e-01
  %677 = fmul fast float %675, 5.000000e-01
  %678 = fmul fast float %672, %587
  %679 = fmul fast float %672, %590
  %680 = fmul fast float %672, %593
  %681 = fsub fast float %542, %678
  %682 = fsub fast float %543, %679
  %683 = fsub fast float %544, %680
  %684 = fmul fast float %673, %389
  %685 = fmul fast float %673, %390
  %686 = fmul fast float %673, %391
  %687 = fsub fast float %681, %684
  %688 = fsub fast float %682, %685
  %689 = fsub fast float %683, %686
  br label %690

; <label>:690                                     ; preds = %595, %584
  %691 = phi float [ %687, %595 ], [ %542, %584 ]
  %692 = phi float [ %688, %595 ], [ %543, %584 ]
  %693 = phi float [ %689, %595 ], [ %544, %584 ]
  %694 = phi float [ %676, %595 ], [ %395, %584 ]
  %695 = phi float [ %677, %595 ], [ %398, %584 ]
  %696 = fcmp fast oeq float %694, 0.000000e+00
  %697 = fcmp fast oeq float %695, 0.000000e+00
  %698 = or i1 %696, %697
  br i1 %698, label %816, label %699

; <label>:699                                     ; preds = %690
  %700 = call float @dx.op.dot3.f32(i32 55, float %587, float %590, float %593, float %691, float %692, float %693)  ; Dot3(ax,ay,az,bx,by,bz)
  %701 = call float @dx.op.dot3.f32(i32 55, float %389, float %390, float %391, float %691, float %692, float %693)  ; Dot3(ax,ay,az,bx,by,bz)
  %702 = call float @dx.op.dot3.f32(i32 55, float %385, float %386, float %387, float %691, float %692, float %693)  ; Dot3(ax,ay,az,bx,by,bz)
  %703 = fsub fast float %700, %694
  %704 = fadd fast float %700, %694
  %705 = fsub fast float %701, %695
  %706 = fadd fast float %701, %695
  %707 = fmul fast float %702, %702
  %708 = call float @dx.op.dot2.f32(i32 54, float %703, float %705, float %703, float %705)  ; Dot2(ax,ay,bx,by)
  %709 = fadd fast float %708, %707
  %710 = call float @dx.op.unary.f32(i32 25, float %709)  ; Rsqrt(value)
  %711 = fmul fast float %710, %703
  %712 = fmul fast float %710, %705
  %713 = fmul fast float %710, %702
  %714 = call float @dx.op.dot2.f32(i32 54, float %704, float %705, float %704, float %705)  ; Dot2(ax,ay,bx,by)
  %715 = fadd fast float %714, %707
  %716 = call float @dx.op.unary.f32(i32 25, float %715)  ; Rsqrt(value)
  %717 = fmul fast float %716, %704
  %718 = fmul fast float %716, %705
  %719 = fmul fast float %716, %702
  %720 = call float @dx.op.dot2.f32(i32 54, float %704, float %706, float %704, float %706)  ; Dot2(ax,ay,bx,by)
  %721 = fadd fast float %720, %707
  %722 = call float @dx.op.unary.f32(i32 25, float %721)  ; Rsqrt(value)
  %723 = fmul fast float %722, %704
  %724 = fmul fast float %722, %706
  %725 = fmul fast float %722, %702
  %726 = call float @dx.op.dot2.f32(i32 54, float %703, float %706, float %703, float %706)  ; Dot2(ax,ay,bx,by)
  %727 = fadd fast float %726, %707
  %728 = call float @dx.op.unary.f32(i32 25, float %727)  ; Rsqrt(value)
  %729 = fmul fast float %728, %703
  %730 = fmul fast float %728, %706
  %731 = fmul fast float %728, %702
  %732 = call float @dx.op.dot3.f32(i32 55, float %711, float %712, float %713, float %717, float %718, float %719)  ; Dot3(ax,ay,az,bx,by,bz)
  %733 = call float @dx.op.dot3.f32(i32 55, float %717, float %718, float %719, float %723, float %724, float %725)  ; Dot3(ax,ay,az,bx,by,bz)
  %734 = call float @dx.op.dot3.f32(i32 55, float %723, float %724, float %725, float %729, float %730, float %731)  ; Dot3(ax,ay,az,bx,by,bz)
  %735 = call float @dx.op.dot3.f32(i32 55, float %729, float %730, float %731, float %711, float %712, float %713)  ; Dot3(ax,ay,az,bx,by,bz)
  %736 = fmul fast float %732, 0x3FC6666660000000
  %737 = fsub fast float 0x3FF921FF20000000, %736
  %738 = fadd fast float %732, 1.000000e+00
  %739 = call float @dx.op.unary.f32(i32 25, float %738)  ; Rsqrt(value)
  %740 = fmul fast float %733, 0x3FC6666660000000
  %741 = fsub fast float 0x3FF921FF20000000, %740
  %742 = fadd fast float %733, 1.000000e+00
  %743 = call float @dx.op.unary.f32(i32 25, float %742)  ; Rsqrt(value)
  %744 = fmul fast float %743, %741
  %745 = fmul fast float %734, 0x3FC6666660000000
  %746 = fsub fast float 0x3FF921FF20000000, %745
  %747 = fadd fast float %734, 1.000000e+00
  %748 = call float @dx.op.unary.f32(i32 25, float %747)  ; Rsqrt(value)
  %749 = fmul fast float %735, 0x3FC6666660000000
  %750 = fsub fast float 0x3FF921FF20000000, %749
  %751 = fadd fast float %735, 1.000000e+00
  %752 = call float @dx.op.unary.f32(i32 25, float %751)  ; Rsqrt(value)
  %753 = fmul fast float %752, %750
  %754 = fmul fast float %737, %739
  %755 = fsub fast float -0.000000e+00, %754
  %756 = fmul fast float %711, %755
  %757 = fmul fast float %712, %755
  %758 = fmul fast float %713, %755
  %759 = fmul fast float %744, %723
  %760 = fmul fast float %744, %724
  %761 = fmul fast float %744, %725
  %762 = fadd fast float %759, %756
  %763 = fadd fast float %760, %757
  %764 = fadd fast float %761, %758
  %765 = fmul fast float %764, %718
  %766 = fmul fast float %763, %719
  %767 = fsub fast float %765, %766
  %768 = fmul fast float %762, %719
  %769 = fmul fast float %764, %717
  %770 = fsub fast float %768, %769
  %771 = fmul fast float %763, %717
  %772 = fmul fast float %762, %718
  %773 = fsub fast float %771, %772
  %774 = fmul fast float %753, %711
  %775 = fmul fast float %753, %712
  %776 = fmul fast float %753, %713
  %777 = fmul fast float %746, %748
  %778 = fsub fast float -0.000000e+00, %777
  %779 = fmul fast float %723, %778
  %780 = fmul fast float %724, %778
  %781 = fmul fast float %725, %778
  %782 = fadd fast float %774, %779
  %783 = fadd fast float %775, %780
  %784 = fadd fast float %776, %781
  %785 = fmul fast float %784, %730
  %786 = fmul fast float %783, %731
  %787 = fsub fast float %785, %786
  %788 = fmul fast float %782, %731
  %789 = fmul fast float %784, %729
  %790 = fsub fast float %788, %789
  %791 = fmul fast float %783, %729
  %792 = fmul fast float %782, %730
  %793 = fsub fast float %791, %792
  %794 = fadd fast float %787, %767
  %795 = fadd fast float %790, %770
  %796 = fadd fast float %793, %773
  %797 = fmul fast float %794, %587
  %798 = fmul fast float %794, %590
  %799 = fmul fast float %794, %593
  %800 = fmul fast float %795, %389
  %801 = fmul fast float %795, %390
  %802 = fmul fast float %795, %391
  %803 = fadd fast float %797, %800
  %804 = fadd fast float %798, %801
  %805 = fadd fast float %799, %802
  %806 = fmul fast float %796, %385
  %807 = fmul fast float %796, %386
  %808 = fmul fast float %796, %387
  %809 = fadd fast float %803, %806
  %810 = fadd fast float %804, %807
  %811 = fadd fast float %805, %808
  %812 = call float @dx.op.dot3.f32(i32 55, float %809, float %810, float %811, float %809, float %810, float %811)  ; Dot3(ax,ay,az,bx,by,bz)
  %813 = call float @dx.op.unary.f32(i32 25, float %812)  ; Rsqrt(value)
  %814 = fmul fast float %812, 5.000000e-01
  %815 = fmul fast float %814, %813
  br label %816

; <label>:816                                     ; preds = %699, %690
  %817 = phi float [ %815, %699 ], [ 0.000000e+00, %690 ]
  %818 = fmul fast float %817, %583
  br label %848

; <label>:819                                     ; preds = %582
  %820 = fmul fast float %398, 5.000000e-01
  %821 = fmul fast float %820, %389
  %822 = fmul fast float %820, %390
  %823 = fmul fast float %820, %391
  %824 = fsub fast float %542, %821
  %825 = fsub fast float %543, %822
  %826 = fsub fast float %544, %823
  %827 = fadd fast float %542, %821
  %828 = fadd fast float %543, %822
  %829 = fadd fast float %544, %823
  %830 = fcmp fast ogt float %398, 0.000000e+00
  %831 = call float @dx.op.dot3.f32(i32 55, float %824, float %825, float %826, float %824, float %825, float %826)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %830, label %832, label %842, !dx.controlflow.hints !41

; <label>:832                                     ; preds = %819
  %833 = call float @dx.op.dot3.f32(i32 55, float %827, float %828, float %829, float %827, float %828, float %829)  ; Dot3(ax,ay,az,bx,by,bz)
  %834 = call float @dx.op.unary.f32(i32 25, float %831)  ; Rsqrt(value)
  %835 = call float @dx.op.unary.f32(i32 25, float %833)  ; Rsqrt(value)
  %836 = fmul fast float %835, %834
  %837 = call float @dx.op.dot3.f32(i32 55, float %824, float %825, float %826, float %827, float %828, float %829)  ; Dot3(ax,ay,az,bx,by,bz)
  %838 = fmul fast float %836, 5.000000e-01
  %839 = fmul fast float %838, %837
  %840 = fadd fast float %839, 5.000000e-01
  %841 = fdiv fast float %836, %840
  br label %844

; <label>:842                                     ; preds = %819
  %843 = fdiv fast float 1.000000e+00, %831
  br label %844

; <label>:844                                     ; preds = %842, %832
  %845 = phi float [ %841, %832 ], [ %843, %842 ]
  %846 = select i1 %401, float %845, float 1.000000e+00
  %847 = fmul fast float %846, %583
  br label %848

; <label>:848                                     ; preds = %844, %816, %522
  %849 = phi float [ %818, %816 ], [ %847, %844 ], [ 1.000000e+00, %522 ]
  br i1 %540, label %850, label %943

; <label>:850                                     ; preds = %848
  %851 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 62)  ; CBufferLoadLegacy(handle,regIndex)
  %852 = extractvalue %dx.types.CBufRet.f32 %851, 0
  %853 = extractvalue %dx.types.CBufRet.f32 %851, 1
  %854 = extractvalue %dx.types.CBufRet.f32 %851, 2
  %855 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %856 = extractvalue %dx.types.CBufRet.f32 %855, 0
  %857 = extractvalue %dx.types.CBufRet.f32 %855, 1
  %858 = extractvalue %dx.types.CBufRet.f32 %855, 2
  %859 = fsub fast float %537, %856
  %860 = fsub fast float %538, %857
  %861 = fsub fast float %539, %858
  %862 = call float @dx.op.dot3.f32(i32 55, float %859, float %860, float %861, float %852, float %853, float %854)  ; Dot3(ax,ay,az,bx,by,bz)
  %863 = icmp eq i32 %32, 0
  br i1 %863, label %1256, label %864

; <label>:864                                     ; preds = %850
  %865 = fcmp fast oge float %862, %34
  %866 = fcmp fast oge float %862, %35
  %867 = fcmp fast oge float %862, %36
  %868 = fcmp fast oge float %862, %37
  %869 = zext i1 %865 to i32
  %870 = zext i1 %866 to i32
  %871 = zext i1 %867 to i32
  %872 = zext i1 %868 to i32
  %873 = add nuw nsw i32 %869, %870
  %874 = add nuw nsw i32 %873, %871
  %875 = add nuw nsw i32 %874, %872
  %876 = icmp ult i32 %875, %32
  br i1 %876, label %877, label %1256

; <label>:877                                     ; preds = %864
  %878 = shl nuw nsw i32 %875, 2
  %879 = add nuw nsw i32 %878, 9
  %880 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 %879)  ; CBufferLoadLegacy(handle,regIndex)
  %881 = extractvalue %dx.types.CBufRet.f32 %880, 0
  %882 = extractvalue %dx.types.CBufRet.f32 %880, 1
  %883 = extractvalue %dx.types.CBufRet.f32 %880, 3
  %884 = add nuw nsw i32 %878, 10
  %885 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 %884)  ; CBufferLoadLegacy(handle,regIndex)
  %886 = extractvalue %dx.types.CBufRet.f32 %885, 0
  %887 = extractvalue %dx.types.CBufRet.f32 %885, 1
  %888 = extractvalue %dx.types.CBufRet.f32 %885, 3
  %889 = add nuw nsw i32 %878, 11
  %890 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 %889)  ; CBufferLoadLegacy(handle,regIndex)
  %891 = extractvalue %dx.types.CBufRet.f32 %890, 0
  %892 = extractvalue %dx.types.CBufRet.f32 %890, 1
  %893 = extractvalue %dx.types.CBufRet.f32 %890, 3
  %894 = add nuw nsw i32 %878, 12
  %895 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 %894)  ; CBufferLoadLegacy(handle,regIndex)
  %896 = extractvalue %dx.types.CBufRet.f32 %895, 0
  %897 = extractvalue %dx.types.CBufRet.f32 %895, 1
  %898 = extractvalue %dx.types.CBufRet.f32 %895, 3
  %899 = fmul fast float %881, %537
  %900 = call float @dx.op.tertiary.f32(i32 46, float %538, float %886, float %899)  ; FMad(a,b,c)
  %901 = call float @dx.op.tertiary.f32(i32 46, float %539, float %891, float %900)  ; FMad(a,b,c)
  %902 = fadd fast float %901, %896
  %903 = fmul fast float %882, %537
  %904 = call float @dx.op.tertiary.f32(i32 46, float %538, float %887, float %903)  ; FMad(a,b,c)
  %905 = call float @dx.op.tertiary.f32(i32 46, float %539, float %892, float %904)  ; FMad(a,b,c)
  %906 = fadd fast float %905, %897
  %907 = fmul fast float %883, %537
  %908 = call float @dx.op.tertiary.f32(i32 46, float %538, float %888, float %907)  ; FMad(a,b,c)
  %909 = call float @dx.op.tertiary.f32(i32 46, float %539, float %893, float %908)  ; FMad(a,b,c)
  %910 = fadd fast float %909, %898
  %911 = fdiv fast float %902, %910
  %912 = fdiv fast float %906, %910
  %913 = add nuw nsw i32 %875, 25
  %914 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 %913)  ; CBufferLoadLegacy(handle,regIndex)
  %915 = extractvalue %dx.types.CBufRet.f32 %914, 0
  %916 = extractvalue %dx.types.CBufRet.f32 %914, 1
  %917 = extractvalue %dx.types.CBufRet.f32 %914, 2
  %918 = extractvalue %dx.types.CBufRet.f32 %914, 3
  %919 = fcmp fast ole float %911, %917
  %920 = fcmp fast ole float %912, %918
  %921 = fcmp fast oge float %911, %915
  %922 = fcmp fast oge float %912, %916
  %923 = and i1 %921, %919
  %924 = and i1 %922, %920
  %925 = and i1 %923, %924
  br i1 %925, label %926, label %1256

; <label>:926                                     ; preds = %877
  %927 = extractvalue %dx.types.CBufRet.f32 %895, 2
  %928 = extractvalue %dx.types.CBufRet.f32 %890, 2
  %929 = extractvalue %dx.types.CBufRet.f32 %885, 2
  %930 = extractvalue %dx.types.CBufRet.f32 %880, 2
  %931 = fmul fast float %930, %537
  %932 = call float @dx.op.tertiary.f32(i32 46, float %538, float %929, float %931)  ; FMad(a,b,c)
  %933 = call float @dx.op.tertiary.f32(i32 46, float %539, float %928, float %932)  ; FMad(a,b,c)
  %934 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %935 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %936 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %934, %dx.types.Handle %935, float %911, float %912, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %937 = extractvalue %dx.types.ResRet.f32 %936, 0
  %938 = fsub fast float 1.000000e+00, %927
  %939 = fsub fast float %938, %933
  %940 = fsub fast float %937, %39
  %941 = fcmp fast olt float %939, %940
  %942 = uitofp i1 %941 to float
  br label %1256

; <label>:943                                     ; preds = %848
  %944 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %945 = extractvalue %dx.types.CBufRet.i32 %944, 0
  %946 = icmp eq i32 %945, 0
  br i1 %946, label %1105, label %947, !dx.controlflow.hints !42

; <label>:947                                     ; preds = %943
  br i1 %402, label %995, label %948, !dx.controlflow.hints !43

; <label>:948                                     ; preds = %947
  %949 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %950 = extractvalue %dx.types.CBufRet.f32 %949, 0
  %951 = extractvalue %dx.types.CBufRet.f32 %949, 1
  %952 = extractvalue %dx.types.CBufRet.f32 %949, 2
  %953 = fsub fast float %537, %950
  %954 = fsub fast float %538, %951
  %955 = fsub fast float %539, %952
  %956 = fmul fast float %953, %953
  %957 = fmul fast float %954, %954
  %958 = fadd fast float %956, %957
  %959 = fmul fast float %955, %955
  %960 = fadd fast float %958, %959
  %961 = call float @dx.op.unary.f32(i32 24, float %960)  ; Sqrt(value)
  %962 = fdiv fast float %953, %961
  %963 = fdiv fast float %954, %961
  %964 = fdiv fast float %955, %961
  %965 = fdiv fast float %963, %962
  %966 = call float @dx.op.unary.f32(i32 17, float %965)  ; Atan(value)
  %967 = fadd fast float %966, 0x400921FB60000000
  %968 = fadd fast float %966, 0xC00921FB60000000
  %969 = fcmp fast olt float %962, 0.000000e+00
  %970 = fcmp fast oeq float %962, 0.000000e+00
  %971 = fcmp fast oge float %963, 0.000000e+00
  %972 = fcmp fast olt float %963, 0.000000e+00
  %973 = and i1 %969, %971
  %974 = select i1 %973, float %967, float %966
  %975 = and i1 %969, %972
  %976 = select i1 %975, float %968, float %974
  %977 = and i1 %970, %972
  %978 = and i1 %970, %971
  %979 = fmul fast float %976, 0x3FC45F3060000000
  %980 = select i1 %977, float -2.500000e-01, float %979
  %981 = select i1 %978, float 2.500000e-01, float %980
  %982 = fcmp fast ogt float %981, 0.000000e+00
  %983 = fadd fast float %981, 1.000000e+00
  %984 = select i1 %982, float %981, float %983
  %985 = call float @dx.op.unary.f32(i32 15, float %964)  ; Acos(value)
  %986 = fmul fast float %985, 0x3FD45F3060000000
  %987 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %988 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %989 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %987, %dx.types.Handle %988, float %984, float %986, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %990 = extractvalue %dx.types.ResRet.f32 %989, 0
  %991 = extractvalue %dx.types.CBufRet.f32 %949, 3
  %992 = fmul fast float %991, %961
  %993 = fcmp fast olt float %992, %990
  %994 = uitofp i1 %993 to float
  br label %1105

; <label>:995                                     ; preds = %947
  %996 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %997 = extractvalue %dx.types.CBufRet.f32 %996, 0
  %998 = extractvalue %dx.types.CBufRet.f32 %996, 1
  %999 = extractvalue %dx.types.CBufRet.f32 %996, 3
  %1000 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1001 = extractvalue %dx.types.CBufRet.f32 %1000, 0
  %1002 = extractvalue %dx.types.CBufRet.f32 %1000, 1
  %1003 = extractvalue %dx.types.CBufRet.f32 %1000, 3
  %1004 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1005 = extractvalue %dx.types.CBufRet.f32 %1004, 0
  %1006 = extractvalue %dx.types.CBufRet.f32 %1004, 1
  %1007 = extractvalue %dx.types.CBufRet.f32 %1004, 3
  %1008 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %1009 = extractvalue %dx.types.CBufRet.f32 %1008, 0
  %1010 = extractvalue %dx.types.CBufRet.f32 %1008, 1
  %1011 = extractvalue %dx.types.CBufRet.f32 %1008, 3
  %1012 = fmul fast float %997, %537
  %1013 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1001, float %1012)  ; FMad(a,b,c)
  %1014 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1005, float %1013)  ; FMad(a,b,c)
  %1015 = fadd fast float %1014, %1009
  %1016 = fmul fast float %998, %537
  %1017 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1002, float %1016)  ; FMad(a,b,c)
  %1018 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1006, float %1017)  ; FMad(a,b,c)
  %1019 = fadd fast float %1018, %1010
  %1020 = fmul fast float %999, %537
  %1021 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1003, float %1020)  ; FMad(a,b,c)
  %1022 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1007, float %1021)  ; FMad(a,b,c)
  %1023 = fadd fast float %1022, %1011
  %1024 = fdiv fast float %1015, %1023
  %1025 = fdiv fast float %1019, %1023
  %1026 = fcmp fast ole float %1024, 1.000000e+00
  %1027 = fcmp fast ole float %1025, 1.000000e+00
  %1028 = fcmp fast oge float %1024, 0.000000e+00
  %1029 = fcmp fast oge float %1025, 0.000000e+00
  %1030 = and i1 %1028, %1026
  %1031 = and i1 %1029, %1027
  %1032 = and i1 %1030, %1031
  br i1 %1032, label %1033, label %1105

; <label>:1033                                    ; preds = %995
  %1034 = extractvalue %dx.types.CBufRet.f32 %1008, 2
  %1035 = extractvalue %dx.types.CBufRet.f32 %1004, 2
  %1036 = extractvalue %dx.types.CBufRet.f32 %1000, 2
  %1037 = extractvalue %dx.types.CBufRet.f32 %996, 2
  %1038 = fmul fast float %1037, %537
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1036, float %1038)  ; FMad(a,b,c)
  %1040 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1035, float %1039)  ; FMad(a,b,c)
  %1041 = fadd fast float %1040, %1034
  %1042 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %1043 = extractvalue %dx.types.CBufRet.f32 %1042, 0
  %1044 = extractvalue %dx.types.CBufRet.f32 %1042, 1
  %1045 = extractvalue %dx.types.CBufRet.f32 %1042, 2
  %1046 = extractvalue %dx.types.CBufRet.f32 %1042, 3
  %1047 = fmul fast float %1043, %1024
  %1048 = fmul fast float %1044, %1025
  %1049 = fadd fast float %1047, -5.000000e-01
  %1050 = fadd fast float %1048, -5.000000e-01
  %1051 = call float @dx.op.unary.f32(i32 22, float %1049)  ; Frc(value)
  %1052 = call float @dx.op.unary.f32(i32 22, float %1050)  ; Frc(value)
  %1053 = call float @dx.op.unary.f32(i32 27, float %1049)  ; Round_ni(value)
  %1054 = call float @dx.op.unary.f32(i32 27, float %1050)  ; Round_ni(value)
  %1055 = fadd fast float %1053, 1.000000e+00
  %1056 = fadd fast float %1054, 1.000000e+00
  %1057 = fmul fast float %1055, %1045
  %1058 = fmul fast float %1056, %1046
  %1059 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1060 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1061 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1059, %dx.types.Handle %1060, float %1057, float %1058, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1062 = extractvalue %dx.types.ResRet.f32 %1061, 0
  %1063 = extractvalue %dx.types.ResRet.f32 %1061, 1
  %1064 = extractvalue %dx.types.ResRet.f32 %1061, 2
  %1065 = extractvalue %dx.types.ResRet.f32 %1061, 3
  %1066 = fmul fast float %1041, 4.000000e+01
  %1067 = fadd fast float %1066, -1.000000e+00
  %1068 = fmul fast float %1062, 4.000000e+01
  %1069 = fmul fast float %1063, 4.000000e+01
  %1070 = fmul fast float %1064, 4.000000e+01
  %1071 = fmul fast float %1065, 4.000000e+01
  %1072 = fsub fast float %1068, %1067
  %1073 = fsub fast float %1069, %1067
  %1074 = fsub fast float %1070, %1067
  %1075 = fsub fast float %1071, %1067
  %1076 = call float @dx.op.unary.f32(i32 7, float %1072)  ; Saturate(value)
  %1077 = call float @dx.op.unary.f32(i32 7, float %1073)  ; Saturate(value)
  %1078 = call float @dx.op.unary.f32(i32 7, float %1074)  ; Saturate(value)
  %1079 = call float @dx.op.unary.f32(i32 7, float %1075)  ; Saturate(value)
  %1080 = fcmp fast ogt float %1062, 0x3FEFAE1480000000
  %1081 = fcmp fast ogt float %1063, 0x3FEFAE1480000000
  %1082 = fcmp fast ogt float %1064, 0x3FEFAE1480000000
  %1083 = fcmp fast ogt float %1065, 0x3FEFAE1480000000
  %1084 = uitofp i1 %1080 to float
  %1085 = uitofp i1 %1081 to float
  %1086 = uitofp i1 %1082 to float
  %1087 = uitofp i1 %1083 to float
  %1088 = fadd fast float %1084, %1076
  %1089 = fadd fast float %1085, %1077
  %1090 = fadd fast float %1078, %1086
  %1091 = fadd fast float %1079, %1087
  %1092 = call float @dx.op.unary.f32(i32 7, float %1088)  ; Saturate(value)
  %1093 = call float @dx.op.unary.f32(i32 7, float %1089)  ; Saturate(value)
  %1094 = call float @dx.op.unary.f32(i32 7, float %1090)  ; Saturate(value)
  %1095 = call float @dx.op.unary.f32(i32 7, float %1091)  ; Saturate(value)
  %1096 = fsub fast float %1094, %1095
  %1097 = fsub fast float %1093, %1092
  %1098 = fmul fast float %1096, %1051
  %1099 = fmul fast float %1097, %1051
  %1100 = fadd fast float %1098, %1095
  %1101 = fadd fast float %1099, %1092
  %1102 = fsub fast float %1101, %1100
  %1103 = fmul fast float %1102, %1052
  %1104 = fadd fast float %1103, %1100
  br label %1105

; <label>:1105                                    ; preds = %1033, %995, %948, %943
  %1106 = phi float [ %994, %948 ], [ %1104, %1033 ], [ 1.000000e+00, %995 ], [ 1.000000e+00, %943 ]
  %1107 = phi i32 [ 1, %948 ], [ 1, %1033 ], [ 0, %995 ], [ 0, %943 ]
  br i1 %402, label %1184, label %1108

; <label>:1108                                    ; preds = %1105
  %1109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %1110 = extractvalue %dx.types.CBufRet.f32 %1109, 0
  %1111 = fmul fast float %1110, 0x402EB851E0000000
  %1112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1113 = extractvalue %dx.types.CBufRet.f32 %1112, 3
  %1114 = extractvalue %dx.types.CBufRet.f32 %1112, 0
  %1115 = extractvalue %dx.types.CBufRet.f32 %1112, 1
  %1116 = extractvalue %dx.types.CBufRet.f32 %1112, 2
  %1117 = fsub fast float %1114, %537
  %1118 = fsub fast float %1115, %538
  %1119 = fsub fast float %1116, %539
  %1120 = fmul fast float %1117, %1117
  %1121 = fmul fast float %1118, %1118
  %1122 = fadd fast float %1120, %1121
  %1123 = fmul fast float %1119, %1119
  %1124 = fadd fast float %1122, %1123
  %1125 = call float @dx.op.unary.f32(i32 24, float %1124)  ; Sqrt(value)
  %1126 = fmul fast float %1125, %1113
  %1127 = fcmp fast olt float %1126, 1.000000e+00
  br i1 %1127, label %1128, label %1181, !dx.controlflow.hints !44

; <label>:1128                                    ; preds = %1108
  %1129 = call float @dx.op.unary.f32(i32 6, float %1117)  ; FAbs(value)
  %1130 = call float @dx.op.unary.f32(i32 6, float %1118)  ; FAbs(value)
  %1131 = call float @dx.op.unary.f32(i32 6, float %1119)  ; FAbs(value)
  %1132 = call float @dx.op.binary.f32(i32 35, float %1130, float %1131)  ; FMax(a,b)
  %1133 = call float @dx.op.binary.f32(i32 35, float %1129, float %1132)  ; FMax(a,b)
  %1134 = fcmp fast oeq float %1133, %1129
  br i1 %1134, label %1135, label %1138

; <label>:1135                                    ; preds = %1128
  %1136 = fcmp fast oeq float %1129, %1117
  %1137 = select i1 %1136, i32 0, i32 4
  br label %1146

; <label>:1138                                    ; preds = %1128
  %1139 = fcmp fast oeq float %1133, %1130
  br i1 %1139, label %1140, label %1143

; <label>:1140                                    ; preds = %1138
  %1141 = fcmp fast oeq float %1130, %1118
  %1142 = select i1 %1141, i32 8, i32 12
  br label %1146

; <label>:1143                                    ; preds = %1138
  %1144 = fcmp fast oeq float %1131, %1119
  %1145 = select i1 %1144, i32 16, i32 20
  br label %1146

; <label>:1146                                    ; preds = %1143, %1140, %1135
  %1147 = phi i32 [ %1137, %1135 ], [ %1142, %1140 ], [ %1145, %1143 ]
  %1148 = add nuw nsw i32 %1147, 22
  %1149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 %1148)  ; CBufferLoadLegacy(handle,regIndex)
  %1150 = extractvalue %dx.types.CBufRet.f32 %1149, 2
  %1151 = extractvalue %dx.types.CBufRet.f32 %1149, 3
  %1152 = add nuw nsw i32 %1147, 23
  %1153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 %1152)  ; CBufferLoadLegacy(handle,regIndex)
  %1154 = extractvalue %dx.types.CBufRet.f32 %1153, 2
  %1155 = extractvalue %dx.types.CBufRet.f32 %1153, 3
  %1156 = add nuw nsw i32 %1147, 24
  %1157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 %1156)  ; CBufferLoadLegacy(handle,regIndex)
  %1158 = extractvalue %dx.types.CBufRet.f32 %1157, 2
  %1159 = extractvalue %dx.types.CBufRet.f32 %1157, 3
  %1160 = add nuw nsw i32 %1147, 25
  %1161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 %1160)  ; CBufferLoadLegacy(handle,regIndex)
  %1162 = extractvalue %dx.types.CBufRet.f32 %1161, 2
  %1163 = extractvalue %dx.types.CBufRet.f32 %1161, 3
  %1164 = fsub fast float -0.000000e+00, %1117
  %1165 = fsub fast float -0.000000e+00, %1118
  %1166 = fsub fast float -0.000000e+00, %1119
  %1167 = fmul fast float %1150, %1164
  %1168 = call float @dx.op.tertiary.f32(i32 46, float %1165, float %1154, float %1167)  ; FMad(a,b,c)
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1166, float %1158, float %1168)  ; FMad(a,b,c)
  %1170 = fmul fast float %1151, %1164
  %1171 = call float @dx.op.tertiary.f32(i32 46, float %1165, float %1155, float %1170)  ; FMad(a,b,c)
  %1172 = call float @dx.op.tertiary.f32(i32 46, float %1166, float %1159, float %1171)  ; FMad(a,b,c)
  %1173 = fadd fast float %1172, %1163
  %1174 = fadd fast float %1162, %1111
  %1175 = fadd fast float %1174, %1169
  %1176 = fdiv fast float %1175, %1173
  %1177 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 32782, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerComparisonState
  %1179 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %1177, %dx.types.Handle %1178, float %1117, float %1118, float %1119, float undef, i32 undef, i32 undef, i32 undef, float %1176)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %1180 = extractvalue %dx.types.ResRet.f32 %1179, 0
  br label %1181

; <label>:1181                                    ; preds = %1146, %1108
  %1182 = phi float [ %1180, %1146 ], [ 1.000000e+00, %1108 ]
  %1183 = fsub fast float 1.000000e+00, %1182
  br label %1250

; <label>:1184                                    ; preds = %1105
  %1185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1186 = extractvalue %dx.types.CBufRet.f32 %1185, 0
  %1187 = extractvalue %dx.types.CBufRet.f32 %1185, 1
  %1188 = extractvalue %dx.types.CBufRet.f32 %1185, 2
  %1189 = extractvalue %dx.types.CBufRet.f32 %1185, 3
  %1190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1191 = extractvalue %dx.types.CBufRet.f32 %1190, 0
  %1192 = extractvalue %dx.types.CBufRet.f32 %1190, 1
  %1193 = extractvalue %dx.types.CBufRet.f32 %1190, 2
  %1194 = extractvalue %dx.types.CBufRet.f32 %1190, 3
  %1195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %1196 = extractvalue %dx.types.CBufRet.f32 %1195, 0
  %1197 = extractvalue %dx.types.CBufRet.f32 %1195, 1
  %1198 = extractvalue %dx.types.CBufRet.f32 %1195, 2
  %1199 = extractvalue %dx.types.CBufRet.f32 %1195, 3
  %1200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %1201 = extractvalue %dx.types.CBufRet.f32 %1200, 0
  %1202 = extractvalue %dx.types.CBufRet.f32 %1200, 1
  %1203 = extractvalue %dx.types.CBufRet.f32 %1200, 2
  %1204 = extractvalue %dx.types.CBufRet.f32 %1200, 3
  %1205 = fmul fast float %1186, %537
  %1206 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1191, float %1205)  ; FMad(a,b,c)
  %1207 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1196, float %1206)  ; FMad(a,b,c)
  %1208 = fadd fast float %1207, %1201
  %1209 = fmul fast float %1187, %537
  %1210 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1192, float %1209)  ; FMad(a,b,c)
  %1211 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1197, float %1210)  ; FMad(a,b,c)
  %1212 = fadd fast float %1211, %1202
  %1213 = fmul fast float %1188, %537
  %1214 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1193, float %1213)  ; FMad(a,b,c)
  %1215 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1198, float %1214)  ; FMad(a,b,c)
  %1216 = fmul fast float %1189, %537
  %1217 = call float @dx.op.tertiary.f32(i32 46, float %538, float %1194, float %1216)  ; FMad(a,b,c)
  %1218 = call float @dx.op.tertiary.f32(i32 46, float %539, float %1199, float %1217)  ; FMad(a,b,c)
  %1219 = fadd fast float %1218, %1204
  %1220 = fdiv fast float %1208, %1219
  %1221 = fdiv fast float %1212, %1219
  %1222 = fsub fast float 1.000000e+00, %1203
  %1223 = fsub fast float %1222, %1215
  %1224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %1225 = extractvalue %dx.types.CBufRet.f32 %1224, 0
  %1226 = extractvalue %dx.types.CBufRet.f32 %1224, 1
  %1227 = fcmp fast oge float %1220, %1225
  %1228 = fcmp fast oge float %1221, %1226
  %1229 = and i1 %1227, %1228
  br i1 %1229, label %1230, label %1250

; <label>:1230                                    ; preds = %1184
  %1231 = extractvalue %dx.types.CBufRet.f32 %1224, 2
  %1232 = extractvalue %dx.types.CBufRet.f32 %1224, 3
  %1233 = fcmp fast ole float %1220, %1231
  %1234 = fcmp fast ole float %1221, %1232
  %1235 = and i1 %1233, %1234
  br i1 %1235, label %1236, label %1250

; <label>:1236                                    ; preds = %1230
  %1237 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1238 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1239 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1237, %dx.types.Handle %1238, float %1220, float %1221, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1240 = extractvalue %dx.types.ResRet.f32 %1239, 0
  %1241 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %1242 = extractvalue %dx.types.CBufRet.f32 %1241, 0
  %1243 = fsub fast float %1240, %1242
  %1244 = fcmp fast olt float %1223, %1243
  %1245 = uitofp i1 %1244 to float
  %1246 = fcmp fast oeq float %1240, 1.000000e+00
  %1247 = uitofp i1 %1246 to float
  %1248 = fadd fast float %1245, %1247
  %1249 = call float @dx.op.unary.f32(i32 7, float %1248)  ; Saturate(value)
  br label %1250

; <label>:1250                                    ; preds = %1236, %1230, %1184, %1181
  %1251 = phi float [ %1183, %1181 ], [ %1249, %1236 ], [ 1.000000e+00, %1230 ], [ 1.000000e+00, %1184 ]
  %1252 = phi i32 [ 1, %1181 ], [ 1, %1236 ], [ %1107, %1230 ], [ %1107, %1184 ]
  %1253 = call float @dx.op.binary.f32(i32 36, float %1106, float %1251)  ; FMin(a,b)
  %1254 = icmp ne i32 %1252, 0
  %1255 = select i1 %1254, float %1253, float 1.000000e+00
  br label %1256

; <label>:1256                                    ; preds = %1250, %926, %877, %864, %850
  %1257 = phi float [ %1255, %1250 ], [ %942, %926 ], [ 1.000000e+00, %877 ], [ 1.000000e+00, %864 ], [ 1.000000e+00, %850 ]
  %1258 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %1259 = extractvalue %dx.types.CBufRet.i32 %1258, 0
  %1260 = icmp eq i32 %1259, -1
  br i1 %1260, label %1715, label %1261

; <label>:1261                                    ; preds = %1256
  %1262 = fsub fast float %537, %528
  %1263 = fsub fast float %538, %529
  %1264 = fsub fast float %539, %530
  %1265 = mul i32 %1259, 336
  %1266 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1267 = add i32 %1265, 128
  %1268 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1267, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1269 = add i32 %1265, 144
  %1270 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1269, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1271 = add i32 %1265, 160
  %1272 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1271, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1273 = add i32 %1265, 176
  %1274 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1273, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1275 = add i32 %1265, 256
  %1276 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1275, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1277 = extractvalue %dx.types.ResRet.i32 %1276, 0
  %1278 = extractvalue %dx.types.ResRet.i32 %1276, 1
  %1279 = extractvalue %dx.types.ResRet.i32 %1276, 2
  %1280 = bitcast i32 %1277 to float
  %1281 = bitcast i32 %1278 to float
  %1282 = bitcast i32 %1279 to float
  %1283 = add i32 %1265, 268
  %1284 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1283, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1285 = extractvalue %dx.types.ResRet.i32 %1284, 0
  %1286 = add i32 %1265, 272
  %1287 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1286, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1288 = add i32 %1265, 288
  %1289 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1288, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1290 = icmp eq i32 %1285, 0
  %1291 = fadd fast float %1280, %524
  %1292 = fadd fast float %1281, %525
  %1293 = fadd fast float %1282, %526
  %1294 = fmul fast float %1291, 2.097152e+06
  %1295 = fmul fast float %1292, 2.097152e+06
  %1296 = fmul fast float %1293, 2.097152e+06
  %1297 = fadd fast float %1294, %1262
  %1298 = fadd fast float %1295, %1263
  %1299 = fadd fast float %1296, %1264
  br i1 %1290, label %1300, label %1540

; <label>:1300                                    ; preds = %1261
  %1301 = extractvalue %dx.types.ResRet.i32 %1289, 2
  %1302 = bitcast i32 %1301 to float
  %1303 = extractvalue %dx.types.ResRet.i32 %1289, 1
  %1304 = bitcast i32 %1303 to float
  %1305 = extractvalue %dx.types.ResRet.i32 %1289, 0
  %1306 = bitcast i32 %1305 to float
  %1307 = add i32 %1265, 316
  %1308 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1307, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1309 = extractvalue %dx.types.ResRet.i32 %1308, 0
  %1310 = add i32 %1265, 312
  %1311 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1310, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1312 = extractvalue %dx.types.ResRet.i32 %1311, 0
  %1313 = add i32 %1265, 300
  %1314 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1313, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1315 = extractvalue %dx.types.ResRet.i32 %1314, 0
  %1316 = bitcast i32 %1315 to float
  %1317 = fadd fast float %1297, %1306
  %1318 = fadd fast float %1298, %1304
  %1319 = fadd fast float %1299, %1302
  %1320 = fmul fast float %1317, %1317
  %1321 = fmul fast float %1318, %1318
  %1322 = fadd fast float %1320, %1321
  %1323 = fmul fast float %1319, %1319
  %1324 = fadd fast float %1322, %1323
  %1325 = call float @dx.op.unary.f32(i32 24, float %1324)  ; Sqrt(value)
  %1326 = call float @dx.op.unary.f32(i32 23, float %1325)  ; Log(value)
  %1327 = fadd fast float %1326, %1316
  %1328 = call float @dx.op.unary.f32(i32 27, float %1327)  ; Round_ni(value)
  %1329 = fptosi float %1328 to i32
  %1330 = sub nsw i32 %1329, %1312
  %1331 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1330)  ; IMax(a,b)
  %1332 = icmp slt i32 %1331, %1309
  br i1 %1332, label %1333, label %1712

; <label>:1333                                    ; preds = %1300
  %1334 = add nsw i32 %1331, %1259
  %1335 = mul i32 %1334, 336
  %1336 = add i32 %1335, 112
  %1337 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1336, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1338 = extractvalue %dx.types.ResRet.i32 %1337, 2
  %1339 = bitcast i32 %1338 to float
  %1340 = add i32 %1335, 128
  %1341 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1340, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1342 = extractvalue %dx.types.ResRet.i32 %1341, 0
  %1343 = extractvalue %dx.types.ResRet.i32 %1341, 1
  %1344 = extractvalue %dx.types.ResRet.i32 %1341, 2
  %1345 = bitcast i32 %1342 to float
  %1346 = bitcast i32 %1343 to float
  %1347 = bitcast i32 %1344 to float
  %1348 = add i32 %1335, 144
  %1349 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1348, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1350 = extractvalue %dx.types.ResRet.i32 %1349, 0
  %1351 = extractvalue %dx.types.ResRet.i32 %1349, 1
  %1352 = extractvalue %dx.types.ResRet.i32 %1349, 2
  %1353 = bitcast i32 %1350 to float
  %1354 = bitcast i32 %1351 to float
  %1355 = bitcast i32 %1352 to float
  %1356 = add i32 %1335, 160
  %1357 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1356, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1358 = extractvalue %dx.types.ResRet.i32 %1357, 0
  %1359 = extractvalue %dx.types.ResRet.i32 %1357, 1
  %1360 = extractvalue %dx.types.ResRet.i32 %1357, 2
  %1361 = bitcast i32 %1358 to float
  %1362 = bitcast i32 %1359 to float
  %1363 = bitcast i32 %1360 to float
  %1364 = add i32 %1335, 176
  %1365 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1364, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1366 = extractvalue %dx.types.ResRet.i32 %1365, 0
  %1367 = extractvalue %dx.types.ResRet.i32 %1365, 1
  %1368 = extractvalue %dx.types.ResRet.i32 %1365, 2
  %1369 = bitcast i32 %1366 to float
  %1370 = bitcast i32 %1367 to float
  %1371 = bitcast i32 %1368 to float
  %1372 = add i32 %1335, 256
  %1373 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1372, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1374 = extractvalue %dx.types.ResRet.i32 %1373, 0
  %1375 = extractvalue %dx.types.ResRet.i32 %1373, 1
  %1376 = extractvalue %dx.types.ResRet.i32 %1373, 2
  %1377 = bitcast i32 %1374 to float
  %1378 = bitcast i32 %1375 to float
  %1379 = bitcast i32 %1376 to float
  %1380 = add i32 %1335, 272
  %1381 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1380, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1382 = extractvalue %dx.types.ResRet.i32 %1381, 0
  %1383 = extractvalue %dx.types.ResRet.i32 %1381, 1
  %1384 = extractvalue %dx.types.ResRet.i32 %1381, 2
  %1385 = bitcast i32 %1382 to float
  %1386 = bitcast i32 %1383 to float
  %1387 = bitcast i32 %1384 to float
  %1388 = fadd fast float %1377, %524
  %1389 = fadd fast float %1378, %525
  %1390 = fadd fast float %1379, %526
  %1391 = fmul fast float %1388, 2.097152e+06
  %1392 = fmul fast float %1389, 2.097152e+06
  %1393 = fmul fast float %1390, 2.097152e+06
  %1394 = fadd fast float %1391, %1262
  %1395 = fadd fast float %1394, %1385
  %1396 = fadd fast float %1392, %1263
  %1397 = fadd fast float %1396, %1386
  %1398 = fadd fast float %1393, %1264
  %1399 = fadd fast float %1398, %1387
  %1400 = fmul fast float %1395, %1345
  %1401 = call float @dx.op.tertiary.f32(i32 46, float %1397, float %1353, float %1400)  ; FMad(a,b,c)
  %1402 = call float @dx.op.tertiary.f32(i32 46, float %1399, float %1361, float %1401)  ; FMad(a,b,c)
  %1403 = fadd fast float %1402, %1369
  %1404 = fmul fast float %1395, %1346
  %1405 = call float @dx.op.tertiary.f32(i32 46, float %1397, float %1354, float %1404)  ; FMad(a,b,c)
  %1406 = call float @dx.op.tertiary.f32(i32 46, float %1399, float %1362, float %1405)  ; FMad(a,b,c)
  %1407 = fadd fast float %1406, %1370
  %1408 = fmul fast float %1395, %1347
  %1409 = call float @dx.op.tertiary.f32(i32 46, float %1397, float %1355, float %1408)  ; FMad(a,b,c)
  %1410 = call float @dx.op.tertiary.f32(i32 46, float %1399, float %1363, float %1409)  ; FMad(a,b,c)
  %1411 = fadd fast float %1410, %1371
  %1412 = fmul fast float %1403, 1.280000e+02
  %1413 = fmul fast float %1407, 1.280000e+02
  %1414 = fptoui float %1412 to i32
  %1415 = fptoui float %1413 to i32
  %1416 = icmp ult i32 %1334, 8192
  br i1 %1416, label %1423, label %1417

; <label>:1417                                    ; preds = %1333
  %1418 = mul i32 %1334, 21845
  %1419 = shl i32 %1415, 7
  %1420 = add i32 %1418, -178946048
  %1421 = add i32 %1420, %1414
  %1422 = add i32 %1421, %1419
  br label %1423

; <label>:1423                                    ; preds = %1417, %1333
  %1424 = phi i32 [ %1422, %1417 ], [ %1334, %1333 ]
  %1425 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1426 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1425, i32 %1424, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1427 = extractvalue %dx.types.ResRet.i32 %1426, 0
  %1428 = lshr i32 %1427, 20
  %1429 = and i32 %1428, 63
  %1430 = and i32 %1427, 134217728
  %1431 = icmp eq i32 %1430, 0
  br i1 %1431, label %1534, label %1432

; <label>:1432                                    ; preds = %1423
  %1433 = icmp eq i32 %1429, 0
  %1434 = zext i1 %1433 to i32
  %1435 = add i32 %1429, %1334
  %1436 = fmul fast float %1403, 1.638400e+04
  %1437 = fmul fast float %1407, 1.638400e+04
  %1438 = fptoui float %1436 to i32
  %1439 = fptoui float %1437 to i32
  br i1 %1433, label %1511, label %1440

; <label>:1440                                    ; preds = %1432
  %1441 = add i32 %1335, 304
  %1442 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1441, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1443 = extractvalue %dx.types.ResRet.i32 %1442, 0
  %1444 = extractvalue %dx.types.ResRet.i32 %1442, 1
  %1445 = mul i32 %1435, 336
  %1446 = add i32 %1445, 112
  %1447 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1446, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1448 = extractvalue %dx.types.ResRet.i32 %1447, 2
  %1449 = bitcast i32 %1448 to float
  %1450 = add i32 %1445, 304
  %1451 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1450, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1452 = extractvalue %dx.types.ResRet.i32 %1451, 0
  %1453 = extractvalue %dx.types.ResRet.i32 %1451, 1
  %1454 = shl i32 %1443, 5
  %1455 = shl i32 %1444, 5
  %1456 = shl i32 %1452, 5
  %1457 = shl i32 %1453, 5
  %1458 = sub i32 %1414, %1454
  %1459 = sub i32 %1415, %1455
  %1460 = and i32 %1428, 31
  %1461 = shl i32 %1456, %1460
  %1462 = shl i32 %1457, %1460
  %1463 = add i32 %1458, %1461
  %1464 = add i32 %1459, %1462
  %1465 = lshr i32 %1463, %1460
  %1466 = lshr i32 %1464, %1460
  %1467 = shl i32 %1465, 7
  %1468 = shl i32 %1466, 7
  %1469 = or i32 %1467, 127
  %1470 = or i32 %1468, 127
  %1471 = sitofp i32 %1443 to float
  %1472 = sitofp i32 %1444 to float
  %1473 = sitofp i32 %1452 to float
  %1474 = sitofp i32 %1453 to float
  %1475 = shl i32 1, %1460
  %1476 = uitofp i32 %1475 to float
  %1477 = fdiv fast float 1.000000e+00, %1476
  %1478 = fmul fast float %1477, %1471
  %1479 = fmul fast float %1477, %1472
  %1480 = fsub fast float %1473, %1478
  %1481 = fsub fast float %1474, %1479
  %1482 = fmul fast float %1480, 2.500000e-01
  %1483 = fmul fast float %1481, 2.500000e-01
  %1484 = fmul fast float %1477, %1339
  %1485 = fsub fast float %1449, %1484
  %1486 = fmul fast float %1477, %1403
  %1487 = fmul fast float %1477, %1407
  %1488 = fadd fast float %1482, %1486
  %1489 = fadd fast float %1483, %1487
  %1490 = fmul fast float %1488, 1.638400e+04
  %1491 = fmul fast float %1489, 1.638400e+04
  %1492 = fptoui float %1490 to i32
  %1493 = fptoui float %1491 to i32
  %1494 = call i32 @dx.op.binary.i32(i32 39, i32 %1492, i32 %1467)  ; UMax(a,b)
  %1495 = call i32 @dx.op.binary.i32(i32 39, i32 %1493, i32 %1468)  ; UMax(a,b)
  %1496 = call i32 @dx.op.binary.i32(i32 40, i32 %1494, i32 %1469)  ; UMin(a,b)
  %1497 = call i32 @dx.op.binary.i32(i32 40, i32 %1495, i32 %1470)  ; UMin(a,b)
  %1498 = icmp ult i32 %1435, 8192
  br i1 %1498, label %1504, label %1499

; <label>:1499                                    ; preds = %1440
  %1500 = mul i32 %1435, 21845
  %1501 = add i32 %1500, -178946048
  %1502 = add i32 %1501, %1465
  %1503 = add i32 %1502, %1468
  br label %1504

; <label>:1504                                    ; preds = %1499, %1440
  %1505 = phi i32 [ %1503, %1499 ], [ %1435, %1440 ]
  %1506 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1425, i32 %1505, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1507 = extractvalue %dx.types.ResRet.i32 %1506, 0
  %1508 = and i32 %1507, 200278016
  %1509 = icmp eq i32 %1508, 134217728
  %1510 = zext i1 %1509 to i32
  br label %1511

; <label>:1511                                    ; preds = %1504, %1432
  %1512 = phi i32 [ %1496, %1504 ], [ %1438, %1432 ]
  %1513 = phi i32 [ %1497, %1504 ], [ %1439, %1432 ]
  %1514 = phi float [ %1477, %1504 ], [ 1.000000e+00, %1432 ]
  %1515 = phi float [ %1485, %1504 ], [ 0.000000e+00, %1432 ]
  %1516 = phi i32 [ %1510, %1504 ], [ %1434, %1432 ]
  %1517 = phi i32 [ %1507, %1504 ], [ %1427, %1432 ]
  %1518 = icmp eq i32 %1516, 0
  br i1 %1518, label %1534, label %1519

; <label>:1519                                    ; preds = %1511
  %1520 = shl i32 %1517, 7
  %1521 = and i32 %1520, 130944
  %1522 = lshr i32 %1517, 3
  %1523 = and i32 %1522, 130944
  %1524 = and i32 %1512, 127
  %1525 = and i32 %1513, 127
  %1526 = or i32 %1521, %1524
  %1527 = or i32 %1523, %1525
  %1528 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1529 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1528, i32 0, i32 %1526, i32 %1527, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1530 = extractvalue %dx.types.ResRet.i32 %1529, 0
  %1531 = bitcast i32 %1530 to float
  %1532 = fsub fast float %1531, %1515
  %1533 = fdiv fast float %1532, %1514
  br label %1534

; <label>:1534                                    ; preds = %1519, %1511, %1423
  %1535 = phi float [ %1533, %1519 ], [ 0.000000e+00, %1511 ], [ 0.000000e+00, %1423 ]
  %1536 = phi i1 [ true, %1519 ], [ false, %1511 ], [ false, %1423 ]
  %1537 = fcmp fast ogt float %1535, %1411
  %1538 = and i1 %1536, %1537
  %1539 = select i1 %1538, float 0.000000e+00, float 1.000000e+00
  br label %1712

; <label>:1540                                    ; preds = %1261
  %1541 = extractvalue %dx.types.ResRet.i32 %1274, 3
  %1542 = extractvalue %dx.types.ResRet.i32 %1274, 2
  %1543 = extractvalue %dx.types.ResRet.i32 %1274, 1
  %1544 = extractvalue %dx.types.ResRet.i32 %1274, 0
  %1545 = extractvalue %dx.types.ResRet.i32 %1272, 3
  %1546 = extractvalue %dx.types.ResRet.i32 %1272, 2
  %1547 = extractvalue %dx.types.ResRet.i32 %1272, 1
  %1548 = extractvalue %dx.types.ResRet.i32 %1272, 0
  %1549 = extractvalue %dx.types.ResRet.i32 %1270, 3
  %1550 = extractvalue %dx.types.ResRet.i32 %1270, 2
  %1551 = extractvalue %dx.types.ResRet.i32 %1270, 1
  %1552 = extractvalue %dx.types.ResRet.i32 %1270, 0
  %1553 = extractvalue %dx.types.ResRet.i32 %1268, 3
  %1554 = extractvalue %dx.types.ResRet.i32 %1268, 2
  %1555 = extractvalue %dx.types.ResRet.i32 %1268, 1
  %1556 = extractvalue %dx.types.ResRet.i32 %1268, 0
  %1557 = extractvalue %dx.types.ResRet.i32 %1287, 2
  %1558 = bitcast i32 %1557 to float
  %1559 = extractvalue %dx.types.ResRet.i32 %1287, 1
  %1560 = bitcast i32 %1559 to float
  %1561 = extractvalue %dx.types.ResRet.i32 %1287, 0
  %1562 = bitcast i32 %1561 to float
  %1563 = fadd fast float %1297, %1562
  %1564 = fadd fast float %1298, %1560
  %1565 = fadd fast float %1299, %1558
  %1566 = icmp eq i32 %1285, 2
  br i1 %1566, label %1613, label %1567

; <label>:1567                                    ; preds = %1540
  %1568 = call float @dx.op.unary.f32(i32 6, float %1563)  ; FAbs(value)
  %1569 = call float @dx.op.unary.f32(i32 6, float %1564)  ; FAbs(value)
  %1570 = fcmp fast ult float %1568, %1569
  %1571 = call float @dx.op.unary.f32(i32 6, float %1565)  ; FAbs(value)
  %1572 = fcmp fast ult float %1568, %1571
  %1573 = or i1 %1570, %1572
  br i1 %1573, label %1577, label %1574

; <label>:1574                                    ; preds = %1567
  %1575 = fcmp ule float %1563, 0.000000e+00
  %1576 = zext i1 %1575 to i32
  br label %1585

; <label>:1577                                    ; preds = %1567
  %1578 = fcmp fast ogt float %1569, %1571
  br i1 %1578, label %1579, label %1582

; <label>:1579                                    ; preds = %1577
  %1580 = fcmp fast ogt float %1564, 0.000000e+00
  %1581 = select i1 %1580, i32 2, i32 3
  br label %1585

; <label>:1582                                    ; preds = %1577
  %1583 = fcmp fast ogt float %1565, 0.000000e+00
  %1584 = select i1 %1583, i32 4, i32 5
  br label %1585

; <label>:1585                                    ; preds = %1582, %1579, %1574
  %1586 = phi i32 [ %1576, %1574 ], [ %1581, %1579 ], [ %1584, %1582 ]
  %1587 = add i32 %1586, %1259
  %1588 = mul i32 %1587, 336
  %1589 = add i32 %1588, 128
  %1590 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1589, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1591 = extractvalue %dx.types.ResRet.i32 %1590, 0
  %1592 = extractvalue %dx.types.ResRet.i32 %1590, 1
  %1593 = extractvalue %dx.types.ResRet.i32 %1590, 2
  %1594 = extractvalue %dx.types.ResRet.i32 %1590, 3
  %1595 = add i32 %1588, 144
  %1596 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1595, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1597 = extractvalue %dx.types.ResRet.i32 %1596, 0
  %1598 = extractvalue %dx.types.ResRet.i32 %1596, 1
  %1599 = extractvalue %dx.types.ResRet.i32 %1596, 2
  %1600 = extractvalue %dx.types.ResRet.i32 %1596, 3
  %1601 = add i32 %1588, 160
  %1602 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1601, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1603 = extractvalue %dx.types.ResRet.i32 %1602, 0
  %1604 = extractvalue %dx.types.ResRet.i32 %1602, 1
  %1605 = extractvalue %dx.types.ResRet.i32 %1602, 2
  %1606 = extractvalue %dx.types.ResRet.i32 %1602, 3
  %1607 = add i32 %1588, 176
  %1608 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1266, i32 %1607, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1609 = extractvalue %dx.types.ResRet.i32 %1608, 0
  %1610 = extractvalue %dx.types.ResRet.i32 %1608, 1
  %1611 = extractvalue %dx.types.ResRet.i32 %1608, 2
  %1612 = extractvalue %dx.types.ResRet.i32 %1608, 3
  br label %1613

; <label>:1613                                    ; preds = %1585, %1540
  %1614 = phi i32 [ %1591, %1585 ], [ %1556, %1540 ]
  %1615 = phi i32 [ %1592, %1585 ], [ %1555, %1540 ]
  %1616 = phi i32 [ %1593, %1585 ], [ %1554, %1540 ]
  %1617 = phi i32 [ %1594, %1585 ], [ %1553, %1540 ]
  %1618 = phi i32 [ %1597, %1585 ], [ %1552, %1540 ]
  %1619 = phi i32 [ %1598, %1585 ], [ %1551, %1540 ]
  %1620 = phi i32 [ %1599, %1585 ], [ %1550, %1540 ]
  %1621 = phi i32 [ %1600, %1585 ], [ %1549, %1540 ]
  %1622 = phi i32 [ %1603, %1585 ], [ %1548, %1540 ]
  %1623 = phi i32 [ %1604, %1585 ], [ %1547, %1540 ]
  %1624 = phi i32 [ %1605, %1585 ], [ %1546, %1540 ]
  %1625 = phi i32 [ %1606, %1585 ], [ %1545, %1540 ]
  %1626 = phi i32 [ %1609, %1585 ], [ %1544, %1540 ]
  %1627 = phi i32 [ %1610, %1585 ], [ %1543, %1540 ]
  %1628 = phi i32 [ %1611, %1585 ], [ %1542, %1540 ]
  %1629 = phi i32 [ %1612, %1585 ], [ %1541, %1540 ]
  %1630 = phi i32 [ %1587, %1585 ], [ %1259, %1540 ]
  %1631 = bitcast i32 %1629 to float
  %1632 = bitcast i32 %1628 to float
  %1633 = bitcast i32 %1627 to float
  %1634 = bitcast i32 %1626 to float
  %1635 = bitcast i32 %1625 to float
  %1636 = bitcast i32 %1624 to float
  %1637 = bitcast i32 %1623 to float
  %1638 = bitcast i32 %1622 to float
  %1639 = bitcast i32 %1621 to float
  %1640 = bitcast i32 %1620 to float
  %1641 = bitcast i32 %1619 to float
  %1642 = bitcast i32 %1618 to float
  %1643 = bitcast i32 %1617 to float
  %1644 = bitcast i32 %1616 to float
  %1645 = bitcast i32 %1615 to float
  %1646 = bitcast i32 %1614 to float
  %1647 = fmul fast float %1646, %1563
  %1648 = call float @dx.op.tertiary.f32(i32 46, float %1564, float %1642, float %1647)  ; FMad(a,b,c)
  %1649 = call float @dx.op.tertiary.f32(i32 46, float %1565, float %1638, float %1648)  ; FMad(a,b,c)
  %1650 = fadd fast float %1649, %1634
  %1651 = fmul fast float %1645, %1563
  %1652 = call float @dx.op.tertiary.f32(i32 46, float %1564, float %1641, float %1651)  ; FMad(a,b,c)
  %1653 = call float @dx.op.tertiary.f32(i32 46, float %1565, float %1637, float %1652)  ; FMad(a,b,c)
  %1654 = fadd fast float %1653, %1633
  %1655 = fmul fast float %1644, %1563
  %1656 = call float @dx.op.tertiary.f32(i32 46, float %1564, float %1640, float %1655)  ; FMad(a,b,c)
  %1657 = call float @dx.op.tertiary.f32(i32 46, float %1565, float %1636, float %1656)  ; FMad(a,b,c)
  %1658 = fadd fast float %1657, %1632
  %1659 = fmul fast float %1643, %1563
  %1660 = call float @dx.op.tertiary.f32(i32 46, float %1564, float %1639, float %1659)  ; FMad(a,b,c)
  %1661 = call float @dx.op.tertiary.f32(i32 46, float %1565, float %1635, float %1660)  ; FMad(a,b,c)
  %1662 = fadd fast float %1661, %1631
  %1663 = fdiv fast float %1650, %1662
  %1664 = fdiv fast float %1654, %1662
  %1665 = fdiv fast float %1658, %1662
  %1666 = icmp ult i32 %1630, 8192
  br i1 %1666, label %1677, label %1667

; <label>:1667                                    ; preds = %1613
  %1668 = fmul fast float %1664, 1.280000e+02
  %1669 = fptoui float %1668 to i32
  %1670 = fmul fast float %1663, 1.280000e+02
  %1671 = fptoui float %1670 to i32
  %1672 = mul i32 %1630, 21845
  %1673 = shl i32 %1669, 7
  %1674 = add i32 %1672, -178946048
  %1675 = add i32 %1674, %1671
  %1676 = add i32 %1675, %1673
  br label %1677

; <label>:1677                                    ; preds = %1667, %1613
  %1678 = phi i32 [ %1676, %1667 ], [ %1630, %1613 ]
  %1679 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1680 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1679, i32 %1678, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1681 = extractvalue %dx.types.ResRet.i32 %1680, 0
  %1682 = lshr i32 %1681, 20
  %1683 = and i32 %1681, 134217728
  %1684 = icmp eq i32 %1683, 0
  %1685 = and i32 %1682, 31
  %1686 = lshr i32 16384, %1685
  %1687 = uitofp i32 %1686 to float
  %1688 = select i1 %1666, float 1.280000e+02, float %1687
  br i1 %1684, label %1706, label %1689

; <label>:1689                                    ; preds = %1677
  %1690 = lshr i32 %1681, 3
  %1691 = and i32 %1690, 130944
  %1692 = fmul fast float %1688, %1664
  %1693 = fptoui float %1692 to i32
  %1694 = and i32 %1693, 127
  %1695 = or i32 %1694, %1691
  %1696 = shl i32 %1681, 7
  %1697 = and i32 %1696, 130944
  %1698 = fmul fast float %1688, %1663
  %1699 = fptoui float %1698 to i32
  %1700 = and i32 %1699, 127
  %1701 = or i32 %1700, %1697
  %1702 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1703 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1702, i32 0, i32 %1701, i32 %1695, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1704 = extractvalue %dx.types.ResRet.i32 %1703, 0
  %1705 = bitcast i32 %1704 to float
  br label %1706

; <label>:1706                                    ; preds = %1689, %1677
  %1707 = phi float [ %1705, %1689 ], [ 0.000000e+00, %1677 ]
  %1708 = phi i1 [ true, %1689 ], [ false, %1677 ]
  %1709 = fcmp fast ogt float %1707, %1665
  %1710 = and i1 %1708, %1709
  %1711 = select i1 %1710, float 0.000000e+00, float 1.000000e+00
  br label %1712

; <label>:1712                                    ; preds = %1706, %1534, %1300
  %1713 = phi float [ 1.000000e+00, %1300 ], [ %1539, %1534 ], [ %1711, %1706 ]
  %1714 = fmul fast float %1713, %1257
  br label %1715

; <label>:1715                                    ; preds = %1712, %1256
  %1716 = phi float [ %1714, %1712 ], [ %1257, %1256 ]
  %1717 = fmul fast float %371, 0x3FB45F3060000000
  %1718 = fmul fast float %1717, %380
  %1719 = fmul fast float %1718, %422
  %1720 = fmul fast float %1719, %435
  %1721 = fmul fast float %1720, %501
  %1722 = fmul fast float %1721, %514
  %1723 = fmul fast float %1722, %849
  %1724 = fmul fast float %1723, %1716
  %1725 = fmul fast float %1717, %381
  %1726 = fmul fast float %1725, %422
  %1727 = fmul fast float %1726, %436
  %1728 = fmul fast float %1727, %502
  %1729 = fmul fast float %1728, %515
  %1730 = fmul fast float %1729, %849
  %1731 = fmul fast float %1730, %1716
  %1732 = fmul fast float %1717, %382
  %1733 = fmul fast float %1732, %422
  %1734 = fmul fast float %1733, %437
  %1735 = fmul fast float %1734, %503
  %1736 = fmul fast float %1735, %516
  %1737 = fmul fast float %1736, %849
  %1738 = fmul fast float %1737, %1716
  %1739 = fadd fast float %1724, %495
  %1740 = fadd fast float %1731, %496
  %1741 = fadd fast float %1738, %497
  br label %1742

; <label>:1742                                    ; preds = %1715, %511, %505, %494
  %1743 = phi float [ %1739, %1715 ], [ %495, %511 ], [ %495, %505 ], [ %495, %494 ]
  %1744 = phi float [ %1740, %1715 ], [ %496, %511 ], [ %496, %505 ], [ %496, %494 ]
  %1745 = phi float [ %1741, %1715 ], [ %497, %511 ], [ %497, %505 ], [ %497, %494 ]
  %1746 = fmul fast float %422, 0xBFF7154760000000
  %1747 = fmul fast float %1746, %501
  %1748 = fmul fast float %1746, %502
  %1749 = fmul fast float %1746, %503
  %1750 = call float @dx.op.unary.f32(i32 21, float %1747)  ; Exp(value)
  %1751 = call float @dx.op.unary.f32(i32 21, float %1748)  ; Exp(value)
  %1752 = call float @dx.op.unary.f32(i32 21, float %1749)  ; Exp(value)
  %1753 = fmul fast float %1750, %435
  %1754 = fmul fast float %1751, %436
  %1755 = fmul fast float %1752, %437
  %1756 = fcmp fast olt float %1753, 0x3E7AD7F2A0000000
  %1757 = fcmp fast olt float %1754, 0x3E7AD7F2A0000000
  %1758 = fcmp fast olt float %1755, 0x3E7AD7F2A0000000
  %1759 = and i1 %1756, %1757
  %1760 = and i1 %1759, %1758
  br i1 %1760, label %1764, label %1761

; <label>:1761                                    ; preds = %1742
  %1762 = add nuw i32 %431, 1
  %1763 = icmp ult i32 %1762, %427
  br i1 %1763, label %430, label %1764

; <label>:1764                                    ; preds = %1761, %1742
  %1765 = phi float [ %1753, %1761 ], [ 0.000000e+00, %1742 ]
  %1766 = phi float [ %1754, %1761 ], [ 0.000000e+00, %1742 ]
  %1767 = phi float [ %1755, %1761 ], [ 0.000000e+00, %1742 ]
  br label %1768

; <label>:1768                                    ; preds = %1764, %323
  %1769 = phi float [ 0.000000e+00, %323 ], [ %1743, %1764 ]
  %1770 = phi float [ 0.000000e+00, %323 ], [ %1744, %1764 ]
  %1771 = phi float [ 0.000000e+00, %323 ], [ %1745, %1764 ]
  %1772 = phi float [ %55, %323 ], [ %1765, %1764 ]
  %1773 = phi float [ %55, %323 ], [ %1766, %1764 ]
  %1774 = phi float [ %55, %323 ], [ %1767, %1764 ]
  %1775 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1776 = extractvalue %dx.types.CBufRet.i32 %1775, 0
  %1777 = icmp ne i32 %1776, 0
  %1778 = fsub fast float 1.000000e+00, %1772
  %1779 = fsub fast float 1.000000e+00, %1773
  %1780 = fsub fast float 1.000000e+00, %1774
  %1781 = select i1 %1777, float %1778, float 0.000000e+00
  %1782 = select i1 %1777, float %1779, float 0.000000e+00
  %1783 = select i1 %1777, float %1780, float 0.000000e+00
  %1784 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1785 = extractvalue %dx.types.CBufRet.f32 %1784, 2
  %1786 = fmul fast float %1785, %1769
  %1787 = fmul fast float %1785, %1770
  %1788 = fmul fast float %1785, %1771
  %1789 = fptoui float %66 to i32
  %1790 = fptoui float %67 to i32
  %1791 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %1792 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1791, i32 undef, i32 %1789, i32 %1790, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1793 = extractvalue %dx.types.ResRet.f32 %1792, 0
  %1794 = extractvalue %dx.types.ResRet.f32 %1792, 1
  %1795 = extractvalue %dx.types.ResRet.f32 %1792, 2
  %1796 = fadd fast float %1793, %1786
  %1797 = fadd fast float %1794, %1787
  %1798 = fadd fast float %1795, %1788
  %1799 = extractvalue %dx.types.ResRet.f32 %1792, 3
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1791, i32 %1789, i32 %1790, i32 undef, float %1796, float %1797, float %1798, float %1799, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1800 = call float @dx.op.dot3.f32(i32 55, float %1781, float %1782, float %1783, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1801 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %1802 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1801, i32 undef, i32 %1789, i32 %1790, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1803 = extractvalue %dx.types.ResRet.f32 %1802, 0
  %1804 = extractvalue %dx.types.ResRet.f32 %1802, 1
  %1805 = extractvalue %dx.types.ResRet.f32 %1802, 2
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1801, i32 %1789, i32 %1790, i32 undef, float %1803, float %1804, float %1805, float %1800, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1806

; <label>:1806                                    ; preds = %1768, %119, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!36}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !22, !24, !30}
!5 = !{!6, !7, !9, !11, !13, !14, !15, !16, !17, !18, !19, !20}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !8}
!8 = !{i32 1, i32 4}
!9 = !{i32 2, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 7, i32 0, !10}
!10 = !{i32 0, i32 5}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !12}
!12 = !{i32 0, i32 9}
!13 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !12}
!14 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !12}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !12}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !12}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !12}
!18 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !12}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !12}
!20 = !{i32 11, %"class.StructuredBuffer<FRayMarchingTile>"* undef, !"", i32 0, i32 11, i32 1, i32 12, i32 0, !21}
!21 = !{i32 1, i32 32}
!22 = !{!23}
!23 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !12}
!24 = !{!25, !26, !27, !28, !29}
!25 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 992, null}
!26 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!27 = !{i32 2, %hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer* undef, !"", i32 0, i32 2, i32 1, i32 268, null}
!28 = !{i32 3, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 3, i32 1, i32 160, null}
!29 = !{i32 4, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 4, i32 1, i32 716, null}
!30 = !{!31, !32, !33, !34, !35}
!31 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!32 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!33 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!34 = !{i32 3, %struct.SamplerComparisonState* undef, !"", i32 0, i32 3, i32 1, i32 1, null}
!35 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!36 = !{void ()* @RenderSingleScatteringWithPreshadingCS, !"RenderSingleScatteringWithPreshadingCS", null, !4, !37}
!37 = !{i32 0, i64 8208, i32 4, !38, i32 5, !39}
!38 = !{i32 64, i32 1, i32 1}
!39 = !{i32 0}
!40 = distinct !{!40, !"dx.controlflow.hints", i32 2}
!41 = distinct !{!41, !"dx.controlflow.hints", i32 1}
!42 = distinct !{!42, !"dx.controlflow.hints", i32 1}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
