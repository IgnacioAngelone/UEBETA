;
; Note: shader requires additional functionality:
;       Typed UAV Load Additional Formats
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 47d312e1e181a49723df0b65086f3c85
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       int bApplyEmissionAndTransmittance;           ; Offset:   96
;       int bApplyDirectLighting;                     ; Offset:  100
;       int LightType;                                ; Offset:  104
;       float VolumetricScatteringIntensity;          ; Offset:  128
;       row_major float4x4 TranslatedWorldToShadowMatrix;; Offset:  160
;       float4 ShadowmapMinMax;                       ; Offset:  224
;       float4 DepthBiasParameters;                   ; Offset:  240
;       float4 ShadowInjectParams;                    ; Offset:  256
;       row_major float4x4 ShadowViewProjectionMatrices[6];; Offset:  352
;       float InvShadowmapResolution;                 ; Offset:  736
;       uint bStaticallyShadowed;                     ; Offset:  752
;       row_major float4x4 TranslatedWorldToStaticShadowMatrix;; Offset:  784
;       float4 StaticShadowBufferSize;                ; Offset:  848
;       uint VirtualShadowMapId;                      ; Offset:  880
;       int MipLevel;                                 ; Offset:  912
;       uint3 LightingCacheResolution;                ; Offset:  944
;       float LightingCacheVoxelBias;                 ; Offset:  956
;       float MaxTraceDistance;                       ; Offset:  976
;       float StepSize;                               ; Offset:  980
;       int MaxStepCount;                             ; Offset:  984
;       int bJitter;                                  ; Offset:  988
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   992
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_SparseVoxelUniformBuffer
; {
;
;   struct hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer
;   {
;
;       row_major float4x4 SparseVoxelUniformBuffer_LocalToWorld;; Offset:    0
;       row_major float4x4 SparseVoxelUniformBuffer_WorldToLocal;; Offset:   64
;       float3 SparseVoxelUniformBuffer_LocalBoundsOrigin;; Offset:  128
;       float PrePadding_SparseVoxelUniformBuffer_140;; Offset:  140
;       float3 SparseVoxelUniformBuffer_LocalBoundsExtent;; Offset:  144
;       float PrePadding_SparseVoxelUniformBuffer_156;; Offset:  156
;       int3 SparseVoxelUniformBuffer_VolumeResolution;; Offset:  160
;       int PrePadding_SparseVoxelUniformBuffer_172;  ; Offset:  172
;       uint BindlessResource_SparseVoxelUniformBuffer_ExtinctionTexture;; Offset:  176
;       uint PrePadding_SparseVoxelUniformBuffer_180; ; Offset:  180
;       uint BindlessResource_SparseVoxelUniformBuffer_EmissionTexture;; Offset:  184
;       uint PrePadding_SparseVoxelUniformBuffer_188; ; Offset:  188
;       uint BindlessResource_SparseVoxelUniformBuffer_AlbedoTexture;; Offset:  192
;       uint PrePadding_SparseVoxelUniformBuffer_196; ; Offset:  196
;       uint BindlessSampler_SparseVoxelUniformBuffer_TextureSampler;; Offset:  200
;       uint PrePadding_SparseVoxelUniformBuffer_204; ; Offset:  204
;       int3 SparseVoxelUniformBuffer_LightingCacheResolution;; Offset:  208
;       int PrePadding_SparseVoxelUniformBuffer_220;  ; Offset:  220
;       uint BindlessResource_SparseVoxelUniformBuffer_NumVoxelsBuffer;; Offset:  224
;       uint PrePadding_SparseVoxelUniformBuffer_228; ; Offset:  228
;       uint BindlessResource_SparseVoxelUniformBuffer_VoxelBuffer;; Offset:  232
;       uint PrePadding_SparseVoxelUniformBuffer_236; ; Offset:  236
;       int SparseVoxelUniformBuffer_MipLevel;        ; Offset:  240
;       float SparseVoxelUniformBuffer_MaxTraceDistance;; Offset:  244
;       float SparseVoxelUniformBuffer_MaxShadowTraceDistance;; Offset:  248
;       float SparseVoxelUniformBuffer_StepSize;      ; Offset:  252
;       float SparseVoxelUniformBuffer_StepFactor;    ; Offset:  256
;       float SparseVoxelUniformBuffer_ShadowStepSize;; Offset:  260
;       float SparseVoxelUniformBuffer_ShadowStepFactor;; Offset:  264
;   
;   } UniformBufferConstants_SparseVoxelUniformBuffer;; Offset:    0 Size:   268
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid32Bit;; Offset:  704
;       uint PrePadding_ForwardLightData_708;         ; Offset:  708
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid16Bit;; Offset:  712
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   716
;
; }
;
; cbuffer UniformBufferConstants_LumenGIVolumeStruct
; {
;
;   struct UniformBufferConstants_LumenGIVolumeStruct
;   {
;
;       float LumenGIVolumeStruct_ReprojectionRadiusScale;; Offset:    0
;       float LumenGIVolumeStruct_ClipmapWorldExtent; ; Offset:    4
;       float LumenGIVolumeStruct_ClipmapDistributionBase;; Offset:    8
;       float LumenGIVolumeStruct_InvClipmapFadeSize; ; Offset:   12
;       int2 LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;; Offset:   16
;       uint LumenGIVolumeStruct_RadianceProbeClipmapResolution;; Offset:   24
;       uint LumenGIVolumeStruct_NumRadianceProbeClipmaps;; Offset:   28
;       uint LumenGIVolumeStruct_RadianceProbeResolution;; Offset:   32
;       uint LumenGIVolumeStruct_FinalProbeResolution;; Offset:   36
;       uint LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;; Offset:   40
;       uint LumenGIVolumeStruct_CalculateIrradiance; ; Offset:   44
;       uint LumenGIVolumeStruct_IrradianceProbeResolution;; Offset:   48
;       uint LumenGIVolumeStruct_OcclusionProbeResolution;; Offset:   52
;       uint LumenGIVolumeStruct_NumProbesToTraceBudget;; Offset:   56
;       uint LumenGIVolumeStruct_RadianceCacheStats;  ; Offset:   60
;       uint BindlessResource_LumenGIVolumeStruct_RadianceProbeIndirectionTexture;; Offset:   64
;       uint PrePadding_LumenGIVolumeStruct_68;       ; Offset:   68
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;; Offset:   72
;       uint PrePadding_LumenGIVolumeStruct_76;       ; Offset:   76
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;; Offset:   80
;       uint PrePadding_LumenGIVolumeStruct_84;       ; Offset:   84
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;; Offset:   88
;       uint PrePadding_LumenGIVolumeStruct_92;       ; Offset:   92
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheDepthAtlas;; Offset:   96
;       uint PrePadding_LumenGIVolumeStruct_100;      ; Offset:  100
;       uint BindlessResource_LumenGIVolumeStruct_ProbeWorldOffset;; Offset:  104
;       uint PrePadding_LumenGIVolumeStruct_108;      ; Offset:  108
;       float4 LumenGIVolumeStruct_RadianceProbeSettings[6];; Offset:  112
;       float4 LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  208
;       float4 LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  304
;       float2 LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;; Offset:  400
;       float2 LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;; Offset:  408
;       float2 LumenGIVolumeStruct_InvProbeDepthAtlasResolution;; Offset:  416
;       uint LumenGIVolumeStruct_OverrideCacheOcclusionLighting;; Offset:  424
;       uint LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;; Offset:  428
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;; Offset:  432
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;; Offset:  436
;       float PrePadding_LumenGIVolumeStruct_440;     ; Offset:  440
;       float PrePadding_LumenGIVolumeStruct_444;     ; Offset:  444
;       uint BindlessResource_LumenGIVolumeStruct_Radiance;; Offset:  448
;       uint PrePadding_LumenGIVolumeStruct_452;      ; Offset:  452
;       uint BindlessResource_LumenGIVolumeStruct_Normal;; Offset:  456
;       uint PrePadding_LumenGIVolumeStruct_460;      ; Offset:  460
;       uint BindlessResource_LumenGIVolumeStruct_SceneDepth;; Offset:  464
;       uint PrePadding_LumenGIVolumeStruct_468;      ; Offset:  468
;       uint LumenGIVolumeStruct_Enabled;             ; Offset:  472
;       float LumenGIVolumeStruct_RelativeDepthThreshold;; Offset:  476
;       float LumenGIVolumeStruct_SpecularScale;      ; Offset:  480
;       float LumenGIVolumeStruct_Contrast;           ; Offset:  484
;       float PrePadding_LumenGIVolumeStruct_488;     ; Offset:  488
;       float PrePadding_LumenGIVolumeStruct_492;     ; Offset:  492
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume0;; Offset:  496
;       uint PrePadding_LumenGIVolumeStruct_500;      ; Offset:  500
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume1;; Offset:  504
;       uint PrePadding_LumenGIVolumeStruct_508;      ; Offset:  508
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;; Offset:  512
;       uint PrePadding_LumenGIVolumeStruct_516;      ; Offset:  516
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;; Offset:  520
;       uint PrePadding_LumenGIVolumeStruct_524;      ; Offset:  524
;       uint BindlessSampler_LumenGIVolumeStruct_TranslucencyGIVolumeSampler;; Offset:  528
;       uint PrePadding_LumenGIVolumeStruct_532;      ; Offset:  532
;       uint PrePadding_LumenGIVolumeStruct_536;      ; Offset:  536
;       uint PrePadding_LumenGIVolumeStruct_540;      ; Offset:  540
;       float3 LumenGIVolumeStruct_TranslucencyGIGridZParams;; Offset:  544
;       uint LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;; Offset:  556
;       int3 LumenGIVolumeStruct_TranslucencyGIGridSize;; Offset:  560
;   
;   } UniformBufferConstants_LumenGIVolumeStruct;     ; Offset:    0 Size:   572
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for SparseVoxelUniformBuffer_VoxelBuffer
; {
;
;   struct struct.FVoxelDataPacked
;   {
;
;       uint LinearIndex;                             ; Offset:    0
;       uint MipLevel;                                ; Offset:    4
;   
;   } $Element;                                       ; Offset:    0 Size:     8
;
; }
;
; Resource bind info for RayMarchingTilesBuffer
; {
;
;   struct struct.FRayMarchingTile
;   {
;
;       uint2 PixelOffset;                            ; Offset:    0
;       uint Voxels[2];                               ; Offset:    8
;       uint Id;                                      ; Offset:   16
;       uint Padding[3];                              ; Offset:   20
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_SparseVoxelUniformBuffer   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB4            cb4     1
; UniformBufferConstants_LumenGIVolumeStruct   cbuffer      NA          NA     CB5            cb5     1
; SparseVoxelUniformBuffer_TextureSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; LumenGIVolumeStruct_TranslucencyGIVolumeSampler   sampler      NA          NA      S2             s2     1
; ShadowDepthTextureSampler         sampler      NA          NA      S3             s3     1
; ShadowDepthCubeTextureSampler     sampler      NA          NA      S4             s4     1
; StaticShadowDepthTextureSampler   sampler      NA          NA      S5             s5     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T0             t0     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T1             t1     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T2             t2     1
; SparseVoxelUniformBuffer_ExtinctionTexture   texture     f32          3d      T3             t3     1
; SparseVoxelUniformBuffer_EmissionTexture   texture     f32          3d      T4             t4     1
; SparseVoxelUniformBuffer_AlbedoTexture   texture     f32          3d      T5             t5     1
; SparseVoxelUniformBuffer_NumVoxelsBuffer   texture     u32         buf      T6             t6     1
; SparseVoxelUniformBuffer_VoxelBuffer   texture  struct         r/o      T7             t7     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T8             t8     1
; LumenGIVolumeStruct_TranslucencyGIVolumeHistory0   texture     f32          3d      T9             t9     1
; LumenGIVolumeStruct_TranslucencyGIVolumeHistory1   texture     f32          3d     T10            t10     1
; SceneDepthTexture                 texture     f32          2d     T11            t11     1
; ShadowDepthTexture                texture     f32          2d     T12            t12     1
; ShadowDepthCubeTexture            texture     f32        cube     T13            t13     1
; StaticShadowDepthTexture          texture     f32          2d     T14            t14     1
; RayMarchingTilesBuffer            texture  struct         r/o     T15            t15     1
; RWLightingTexture                     UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FVoxelDataPacked>" = type { %struct.FVoxelDataPacked }
%struct.FVoxelDataPacked = type { i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<FRayMarchingTile>" = type { %struct.FRayMarchingTile }
%struct.FRayMarchingTile = type { <2 x i32>, [2 x i32], i32, [3 x i32] }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { i32, i32, i32, float, [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, [6 x [4 x <4 x float>]], float, i32, [4 x <4 x float>], <4 x float>, i32, i32, <3 x i32>, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer = type { [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_LumenGIVolumeStruct = type { float, float, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, i32, <3 x i32> }
%struct.SamplerState = type { i32 }
%struct.SamplerComparisonState = type { i32 }

define void @RenderSingleScatteringWithPreshadingCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 572 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 716 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 268 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 992 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %37 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %38 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.i32 %38, 0
  %40 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.f32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.f32 %40, 1
  %43 = extractvalue %dx.types.CBufRet.f32 %40, 2
  %44 = extractvalue %dx.types.CBufRet.f32 %40, 3
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %48 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %47, i32 %36, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %49 = extractvalue %dx.types.ResRet.i32 %48, 0
  %50 = extractvalue %dx.types.ResRet.i32 %48, 1
  %51 = and i32 %37, 7
  %52 = lshr i32 %37, 3
  %53 = add i32 %49, %51
  %54 = add i32 %50, %52
  %55 = uitofp i32 %53 to float
  %56 = uitofp i32 %54 to float
  %57 = fptoui float %55 to i32
  %58 = fptoui float %56 to i32
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %60 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %59, i32 undef, i32 %57, i32 %58, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %61 = extractvalue %dx.types.ResRet.f32 %60, 3
  %62 = fsub fast float 1.000000e+00, %61
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = fcmp fast oge float %55, %64
  %67 = fcmp fast oge float %56, %65
  %68 = or i1 %66, %67
  br i1 %68, label %2169, label %69

; <label>:69                                      ; preds = %0
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = fadd fast float %71, %55
  %74 = fadd fast float %72, %56
  %75 = fptosi float %73 to i32
  %76 = fptosi float %74 to i32
  %77 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %78 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %77, i32 0, i32 %75, i32 %76, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %79 = extractvalue %dx.types.ResRet.f32 %78, 0
  %80 = call float @dx.op.binary.f32(i32 35, float 0x3D71979980000000, float %79)  ; FMax(a,b)
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 0
  %85 = fmul fast float %84, %80
  %86 = extractvalue %dx.types.CBufRet.f32 %83, 1
  %87 = fadd fast float %85, %86
  %88 = extractvalue %dx.types.CBufRet.f32 %83, 2
  %89 = fmul fast float %88, %80
  %90 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %91 = fsub fast float %89, %90
  %92 = fdiv fast float 1.000000e+00, %91
  %93 = fadd fast float %87, %92
  %94 = call float @dx.op.binary.f32(i32 36, float %93, float %82)  ; FMin(a,b)
  %95 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.f32 %95, 3
  %97 = bitcast float %96 to i32
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %105, label %99, !dx.controlflow.hints !47

; <label>:99                                      ; preds = %69
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 2
  %102 = fmul fast float %101, %94
  %103 = extractvalue %dx.types.CBufRet.f32 %95, 2
  %104 = fadd fast float %102, %103
  br label %109

; <label>:105                                     ; preds = %69
  %106 = fadd fast float %90, %94
  %107 = fmul fast float %106, %88
  %108 = fdiv fast float 1.000000e+00, %107
  br label %109

; <label>:109                                     ; preds = %105, %99
  %110 = phi float [ %104, %99 ], [ %108, %105 ]
  %111 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.i32 %111, 3
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %126, label %114

; <label>:114                                     ; preds = %109
  %115 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %116 = extractvalue %dx.types.CBufRet.i32 %115, 1
  %117 = uitofp i32 %116 to float
  %118 = fmul fast float %117, 0x4040551EC0000000
  %119 = fmul fast float %117, 0x4027A147A0000000
  %120 = fadd fast float %118, %73
  %121 = fadd fast float %119, %74
  %122 = call float @dx.op.dot2.f32(i32 54, float %120, float %121, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %123 = call float @dx.op.unary.f32(i32 22, float %122)  ; Frc(value)
  %124 = fmul fast float %123, 0x404A7DD040000000
  %125 = call float @dx.op.unary.f32(i32 22, float %124)  ; Frc(value)
  br label %126

; <label>:126                                     ; preds = %114, %109
  %127 = phi float [ %125, %114 ], [ 0.000000e+00, %109 ]
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 0
  %130 = extractvalue %dx.types.CBufRet.f32 %128, 1
  %131 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 0
  %134 = extractvalue %dx.types.CBufRet.f32 %132, 1
  %135 = extractvalue %dx.types.CBufRet.f32 %132, 2
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = fsub fast float %137, %133
  %141 = fsub fast float %138, %134
  %142 = fsub fast float %139, %135
  %143 = fmul fast float %129, 2.097152e+06
  %144 = fmul fast float %130, 2.097152e+06
  %145 = fmul fast float %131, 2.097152e+06
  %146 = fadd fast float %140, %143
  %147 = fadd fast float %141, %144
  %148 = fadd fast float %142, %145
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 121)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = fadd fast float %150, %73
  %153 = fadd fast float %151, %74
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = extractvalue %dx.types.CBufRet.f32 %154, 3
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = extractvalue %dx.types.CBufRet.f32 %159, 1
  %162 = extractvalue %dx.types.CBufRet.f32 %159, 2
  %163 = extractvalue %dx.types.CBufRet.f32 %159, 3
  %164 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %165 = extractvalue %dx.types.CBufRet.f32 %164, 0
  %166 = extractvalue %dx.types.CBufRet.f32 %164, 1
  %167 = extractvalue %dx.types.CBufRet.f32 %164, 2
  %168 = extractvalue %dx.types.CBufRet.f32 %164, 3
  %169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %170 = extractvalue %dx.types.CBufRet.f32 %169, 0
  %171 = extractvalue %dx.types.CBufRet.f32 %169, 1
  %172 = extractvalue %dx.types.CBufRet.f32 %169, 2
  %173 = extractvalue %dx.types.CBufRet.f32 %169, 3
  %174 = fmul fast float %152, %155
  %175 = call float @dx.op.tertiary.f32(i32 46, float %153, float %160, float %174)  ; FMad(a,b,c)
  %176 = call float @dx.op.tertiary.f32(i32 46, float %110, float %165, float %175)  ; FMad(a,b,c)
  %177 = fadd fast float %176, %170
  %178 = fmul fast float %152, %156
  %179 = call float @dx.op.tertiary.f32(i32 46, float %153, float %161, float %178)  ; FMad(a,b,c)
  %180 = call float @dx.op.tertiary.f32(i32 46, float %110, float %166, float %179)  ; FMad(a,b,c)
  %181 = fadd fast float %180, %171
  %182 = fmul fast float %152, %157
  %183 = call float @dx.op.tertiary.f32(i32 46, float %153, float %162, float %182)  ; FMad(a,b,c)
  %184 = call float @dx.op.tertiary.f32(i32 46, float %110, float %167, float %183)  ; FMad(a,b,c)
  %185 = fadd fast float %184, %172
  %186 = fmul fast float %152, %158
  %187 = call float @dx.op.tertiary.f32(i32 46, float %153, float %163, float %186)  ; FMad(a,b,c)
  %188 = call float @dx.op.tertiary.f32(i32 46, float %110, float %168, float %187)  ; FMad(a,b,c)
  %189 = fadd fast float %188, %173
  %190 = fdiv fast float %177, %189
  %191 = fdiv fast float %181, %189
  %192 = fdiv fast float %185, %189
  %193 = fsub fast float %190, %133
  %194 = fsub fast float %191, %134
  %195 = fsub fast float %192, %135
  %196 = fadd fast float %193, %143
  %197 = fadd fast float %194, %144
  %198 = fadd fast float %195, %145
  %199 = fsub fast float %190, %137
  %200 = fsub fast float %191, %138
  %201 = fsub fast float %192, %139
  %202 = fmul fast float %199, %199
  %203 = fmul fast float %200, %200
  %204 = fadd fast float %202, %203
  %205 = fmul fast float %201, %201
  %206 = fadd fast float %204, %205
  %207 = call float @dx.op.unary.f32(i32 24, float %206)  ; Sqrt(value)
  %208 = fdiv fast float %199, %207
  %209 = fdiv fast float %200, %207
  %210 = fdiv fast float %201, %207
  %211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %212 = extractvalue %dx.types.CBufRet.f32 %211, 0
  %213 = extractvalue %dx.types.CBufRet.f32 %211, 1
  %214 = extractvalue %dx.types.CBufRet.f32 %211, 2
  %215 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %216 = extractvalue %dx.types.CBufRet.f32 %215, 0
  %217 = extractvalue %dx.types.CBufRet.f32 %215, 1
  %218 = extractvalue %dx.types.CBufRet.f32 %215, 2
  %219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %220 = extractvalue %dx.types.CBufRet.f32 %219, 0
  %221 = extractvalue %dx.types.CBufRet.f32 %219, 1
  %222 = extractvalue %dx.types.CBufRet.f32 %219, 2
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %227 = fmul fast float %212, %146
  %228 = call float @dx.op.tertiary.f32(i32 46, float %147, float %216, float %227)  ; FMad(a,b,c)
  %229 = call float @dx.op.tertiary.f32(i32 46, float %148, float %220, float %228)  ; FMad(a,b,c)
  %230 = fadd fast float %229, %224
  %231 = fmul fast float %213, %146
  %232 = call float @dx.op.tertiary.f32(i32 46, float %147, float %217, float %231)  ; FMad(a,b,c)
  %233 = call float @dx.op.tertiary.f32(i32 46, float %148, float %221, float %232)  ; FMad(a,b,c)
  %234 = fadd fast float %233, %225
  %235 = fmul fast float %214, %146
  %236 = call float @dx.op.tertiary.f32(i32 46, float %147, float %218, float %235)  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %148, float %222, float %236)  ; FMad(a,b,c)
  %238 = fadd fast float %237, %226
  %239 = fmul fast float %212, %196
  %240 = call float @dx.op.tertiary.f32(i32 46, float %197, float %216, float %239)  ; FMad(a,b,c)
  %241 = call float @dx.op.tertiary.f32(i32 46, float %198, float %220, float %240)  ; FMad(a,b,c)
  %242 = fmul fast float %213, %196
  %243 = call float @dx.op.tertiary.f32(i32 46, float %197, float %217, float %242)  ; FMad(a,b,c)
  %244 = call float @dx.op.tertiary.f32(i32 46, float %198, float %221, float %243)  ; FMad(a,b,c)
  %245 = fmul fast float %214, %196
  %246 = call float @dx.op.tertiary.f32(i32 46, float %197, float %218, float %245)  ; FMad(a,b,c)
  %247 = call float @dx.op.tertiary.f32(i32 46, float %198, float %222, float %246)  ; FMad(a,b,c)
  %248 = fsub fast float %241, %229
  %249 = fsub fast float %244, %233
  %250 = fsub fast float %247, %237
  %251 = fmul fast float %248, %248
  %252 = fmul fast float %249, %249
  %253 = fadd fast float %252, %251
  %254 = fmul fast float %250, %250
  %255 = fadd fast float %253, %254
  %256 = call float @dx.op.unary.f32(i32 24, float %255)  ; Sqrt(value)
  %257 = fdiv fast float %248, %256
  %258 = fdiv fast float %249, %256
  %259 = fdiv fast float %250, %256
  %260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %261 = extractvalue %dx.types.CBufRet.f32 %260, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %260, 1
  %263 = extractvalue %dx.types.CBufRet.f32 %260, 2
  %264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.f32 %264, 0
  %266 = extractvalue %dx.types.CBufRet.f32 %264, 1
  %267 = extractvalue %dx.types.CBufRet.f32 %264, 2
  %268 = fsub fast float %261, %265
  %269 = fsub fast float %262, %266
  %270 = fsub fast float %263, %267
  %271 = fadd fast float %265, %261
  %272 = fadd fast float %266, %262
  %273 = fadd fast float %267, %263
  %274 = fdiv fast float 1.000000e+00, %257
  %275 = fdiv fast float 1.000000e+00, %258
  %276 = fdiv fast float 1.000000e+00, %259
  %277 = fsub fast float %268, %230
  %278 = fsub fast float %269, %234
  %279 = fsub fast float %270, %238
  %280 = fmul fast float %277, %274
  %281 = fmul fast float %275, %278
  %282 = fmul fast float %276, %279
  %283 = fsub fast float %271, %230
  %284 = fsub fast float %272, %234
  %285 = fsub fast float %273, %238
  %286 = fmul fast float %283, %274
  %287 = fmul fast float %284, %275
  %288 = fmul fast float %285, %276
  %289 = call float @dx.op.binary.f32(i32 36, float %280, float %286)  ; FMin(a,b)
  %290 = call float @dx.op.binary.f32(i32 36, float %281, float %287)  ; FMin(a,b)
  %291 = call float @dx.op.binary.f32(i32 36, float %282, float %288)  ; FMin(a,b)
  %292 = call float @dx.op.binary.f32(i32 35, float %280, float %286)  ; FMax(a,b)
  %293 = call float @dx.op.binary.f32(i32 35, float %281, float %287)  ; FMax(a,b)
  %294 = call float @dx.op.binary.f32(i32 35, float %282, float %288)  ; FMax(a,b)
  %295 = call float @dx.op.binary.f32(i32 35, float %290, float %291)  ; FMax(a,b)
  %296 = call float @dx.op.binary.f32(i32 35, float %289, float %295)  ; FMax(a,b)
  %297 = call float @dx.op.binary.f32(i32 36, float %293, float %294)  ; FMin(a,b)
  %298 = call float @dx.op.binary.f32(i32 36, float %292, float %297)  ; FMin(a,b)
  %299 = call float @dx.op.binary.f32(i32 35, float %296, float 0.000000e+00)  ; FMax(a,b)
  %300 = call float @dx.op.binary.f32(i32 36, float %298, float %256)  ; FMin(a,b)
  %301 = fsub fast float %300, %299
  %302 = fcmp fast ugt float %301, 0.000000e+00
  br i1 %302, label %303, label %2169

; <label>:303                                     ; preds = %126
  %304 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %305 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %304, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %306 = extractvalue %dx.types.ResRet.i32 %305, 0
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %408, label %308

; <label>:308                                     ; preds = %303
  br label %309

; <label>:309                                     ; preds = %309, %308
  %310 = phi i32 [ %402, %309 ], [ 0, %308 ]
  %311 = phi float [ %401, %309 ], [ %300, %308 ]
  %312 = phi float [ %400, %309 ], [ %300, %308 ]
  %313 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 524, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %314 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %313, i32 %310, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %315 = extractvalue %dx.types.ResRet.i32 %314, 0
  %316 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %313, i32 %310, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %317 = extractvalue %dx.types.ResRet.i32 %316, 0
  %318 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %319 = extractvalue %dx.types.CBufRet.i32 %318, 0
  %320 = extractvalue %dx.types.CBufRet.i32 %318, 1
  %321 = and i32 %317, 31
  %322 = lshr i32 %319, %321
  %323 = lshr i32 %320, %321
  %324 = mul i32 %322, %323
  %325 = urem i32 %315, %324
  %326 = urem i32 %325, %322
  %327 = udiv i32 %325, %322
  %328 = udiv i32 %315, %324
  %329 = extractvalue %dx.types.CBufRet.i32 %318, 2
  %330 = ashr i32 %319, %321
  %331 = sitofp i32 %330 to float
  %332 = ashr i32 %320, %321
  %333 = sitofp i32 %332 to float
  %334 = ashr i32 %329, %321
  %335 = sitofp i32 %334 to float
  %336 = uitofp i32 %326 to float
  %337 = uitofp i32 %327 to float
  %338 = uitofp i32 %328 to float
  %339 = fdiv fast float %336, %331
  %340 = fdiv fast float %337, %333
  %341 = fdiv fast float %338, %335
  %342 = add i32 %326, 1
  %343 = add i32 %327, 1
  %344 = add i32 %328, 1
  %345 = uitofp i32 %342 to float
  %346 = uitofp i32 %343 to float
  %347 = uitofp i32 %344 to float
  %348 = fdiv fast float %345, %331
  %349 = fdiv fast float %346, %333
  %350 = fdiv fast float %347, %335
  %351 = fadd fast float %265, %265
  %352 = fadd fast float %266, %266
  %353 = fadd fast float %267, %267
  %354 = fmul fast float %339, %351
  %355 = fmul fast float %340, %352
  %356 = fmul fast float %341, %353
  %357 = fmul fast float %348, %351
  %358 = fmul fast float %349, %352
  %359 = fmul fast float %350, %353
  %360 = fsub fast float 0xBF1A36E2E0000000, %230
  %361 = fadd fast float %360, %268
  %362 = fadd fast float %361, %354
  %363 = fsub fast float 0xBF1A36E2E0000000, %234
  %364 = fadd fast float %363, %269
  %365 = fadd fast float %364, %355
  %366 = fsub fast float 0xBF1A36E2E0000000, %238
  %367 = fadd fast float %366, %270
  %368 = fadd fast float %367, %356
  %369 = fmul fast float %274, %362
  %370 = fmul fast float %275, %365
  %371 = fmul fast float %276, %368
  %372 = fsub fast float 0x3F1A36E2E0000000, %230
  %373 = fadd fast float %372, %268
  %374 = fadd fast float %373, %357
  %375 = fsub fast float 0x3F1A36E2E0000000, %234
  %376 = fadd fast float %375, %269
  %377 = fadd fast float %376, %358
  %378 = fsub fast float 0x3F1A36E2E0000000, %238
  %379 = fadd fast float %378, %270
  %380 = fadd fast float %379, %359
  %381 = fmul fast float %374, %274
  %382 = fmul fast float %377, %275
  %383 = fmul fast float %380, %276
  %384 = call float @dx.op.binary.f32(i32 36, float %369, float %381)  ; FMin(a,b)
  %385 = call float @dx.op.binary.f32(i32 36, float %370, float %382)  ; FMin(a,b)
  %386 = call float @dx.op.binary.f32(i32 36, float %371, float %383)  ; FMin(a,b)
  %387 = call float @dx.op.binary.f32(i32 35, float %369, float %381)  ; FMax(a,b)
  %388 = call float @dx.op.binary.f32(i32 35, float %370, float %382)  ; FMax(a,b)
  %389 = call float @dx.op.binary.f32(i32 35, float %371, float %383)  ; FMax(a,b)
  %390 = call float @dx.op.binary.f32(i32 35, float %385, float %386)  ; FMax(a,b)
  %391 = call float @dx.op.binary.f32(i32 35, float %384, float %390)  ; FMax(a,b)
  %392 = call float @dx.op.binary.f32(i32 36, float %388, float %389)  ; FMin(a,b)
  %393 = call float @dx.op.binary.f32(i32 36, float %387, float %392)  ; FMin(a,b)
  %394 = call float @dx.op.binary.f32(i32 35, float %391, float 0.000000e+00)  ; FMax(a,b)
  %395 = call float @dx.op.binary.f32(i32 36, float %393, float %300)  ; FMin(a,b)
  %396 = fsub fast float %395, %394
  %397 = fcmp fast ogt float %396, 0.000000e+00
  %398 = fcmp fast olt float %394, %312
  %399 = and i1 %398, %397
  %400 = select i1 %399, float %394, float %312
  %401 = select i1 %399, float %395, float %311
  %402 = add i32 %310, 1
  %403 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %404 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %403, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %405 = extractvalue %dx.types.ResRet.i32 %404, 0
  %406 = icmp ult i32 %402, %405
  br i1 %406, label %309, label %407

; <label>:407                                     ; preds = %309
  br label %408

; <label>:408                                     ; preds = %407, %303
  %409 = phi float [ %300, %303 ], [ %401, %407 ]
  %410 = phi float [ %300, %303 ], [ %400, %407 ]
  %411 = fsub fast float %409, %410
  %412 = fcmp fast ogt float %411, 0.000000e+00
  br i1 %412, label %413, label %2131

; <label>:413                                     ; preds = %408
  br label %414

; <label>:414                                     ; preds = %2125, %413
  %415 = phi float [ %2014, %2125 ], [ 0.000000e+00, %413 ]
  %416 = phi float [ %2015, %2125 ], [ 0.000000e+00, %413 ]
  %417 = phi float [ %2016, %2125 ], [ 0.000000e+00, %413 ]
  %418 = phi float [ %2017, %2125 ], [ %62, %413 ]
  %419 = phi float [ %2018, %2125 ], [ %62, %413 ]
  %420 = phi float [ %2019, %2125 ], [ %62, %413 ]
  %421 = phi float [ %2127, %2125 ], [ %410, %413 ]
  %422 = phi float [ %2126, %2125 ], [ %409, %413 ]
  %423 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %424 = extractvalue %dx.types.CBufRet.i32 %423, 1
  %425 = extractvalue %dx.types.CBufRet.i32 %423, 0
  %426 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %427 = extractvalue %dx.types.CBufRet.i32 %426, 2
  %428 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %429 = extractvalue %dx.types.CBufRet.f32 %428, 3
  %430 = fcmp fast ugt float %429, 0.000000e+00
  br i1 %430, label %457, label %431

; <label>:431                                     ; preds = %414
  %432 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %433 = extractvalue %dx.types.CBufRet.f32 %432, 0
  %434 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %435 = extractvalue %dx.types.CBufRet.f32 %434, 0
  %436 = extractvalue %dx.types.CBufRet.f32 %434, 1
  %437 = extractvalue %dx.types.CBufRet.f32 %434, 2
  %438 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %439 = extractvalue %dx.types.CBufRet.i32 %438, 0
  %440 = extractvalue %dx.types.CBufRet.i32 %438, 1
  %441 = extractvalue %dx.types.CBufRet.i32 %438, 2
  %442 = uitofp i32 %439 to float
  %443 = uitofp i32 %440 to float
  %444 = uitofp i32 %441 to float
  %445 = fmul fast float %442, %257
  %446 = fdiv fast float %435, %445
  %447 = fmul fast float %443, %258
  %448 = fdiv fast float %436, %447
  %449 = fmul fast float %444, %259
  %450 = fdiv fast float %437, %449
  %451 = call float @dx.op.unary.f32(i32 6, float %446)  ; FAbs(value)
  %452 = call float @dx.op.unary.f32(i32 6, float %448)  ; FAbs(value)
  %453 = call float @dx.op.unary.f32(i32 6, float %450)  ; FAbs(value)
  %454 = call float @dx.op.binary.f32(i32 36, float %452, float %453)  ; FMin(a,b)
  %455 = call float @dx.op.binary.f32(i32 36, float %451, float %454)  ; FMin(a,b)
  %456 = fmul fast float %455, %433
  br label %457

; <label>:457                                     ; preds = %431, %414
  %458 = phi float [ %456, %431 ], [ %429, %414 ]
  %459 = call float @dx.op.binary.f32(i32 35, float %458, float 0x3F847AE140000000)  ; FMax(a,b)
  %460 = fmul fast float %422, %257
  %461 = fmul fast float %422, %258
  %462 = fmul fast float %422, %259
  %463 = fadd fast float %460, %230
  %464 = fadd fast float %461, %234
  %465 = fadd fast float %462, %238
  %466 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %467 = extractvalue %dx.types.CBufRet.f32 %466, 0
  %468 = extractvalue %dx.types.CBufRet.f32 %466, 1
  %469 = extractvalue %dx.types.CBufRet.f32 %466, 2
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %472 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %473 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %474 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %475 = extractvalue %dx.types.CBufRet.f32 %474, 0
  %476 = extractvalue %dx.types.CBufRet.f32 %474, 1
  %477 = extractvalue %dx.types.CBufRet.f32 %474, 2
  %478 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %479 = extractvalue %dx.types.CBufRet.f32 %478, 0
  %480 = extractvalue %dx.types.CBufRet.f32 %478, 1
  %481 = extractvalue %dx.types.CBufRet.f32 %478, 2
  %482 = fmul fast float %467, %463
  %483 = call float @dx.op.tertiary.f32(i32 46, float %464, float %471, float %482)  ; FMad(a,b,c)
  %484 = call float @dx.op.tertiary.f32(i32 46, float %465, float %475, float %483)  ; FMad(a,b,c)
  %485 = fmul fast float %468, %463
  %486 = call float @dx.op.tertiary.f32(i32 46, float %464, float %472, float %485)  ; FMad(a,b,c)
  %487 = call float @dx.op.tertiary.f32(i32 46, float %465, float %476, float %486)  ; FMad(a,b,c)
  %488 = fmul fast float %469, %463
  %489 = call float @dx.op.tertiary.f32(i32 46, float %464, float %473, float %488)  ; FMad(a,b,c)
  %490 = call float @dx.op.tertiary.f32(i32 46, float %465, float %477, float %489)  ; FMad(a,b,c)
  %491 = fsub fast float %479, %146
  %492 = fadd fast float %491, %484
  %493 = fsub fast float %480, %147
  %494 = fadd fast float %493, %487
  %495 = fsub fast float %481, %148
  %496 = fadd fast float %495, %490
  %497 = fmul fast float %492, %492
  %498 = fmul fast float %494, %494
  %499 = fadd fast float %498, %497
  %500 = fmul fast float %496, %496
  %501 = fadd fast float %499, %500
  %502 = call float @dx.op.unary.f32(i32 24, float %501)  ; Sqrt(value)
  %503 = fdiv fast float %502, %422
  %504 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %505 = extractvalue %dx.types.CBufRet.f32 %504, 0
  %506 = extractvalue %dx.types.CBufRet.i32 %423, 2
  %507 = icmp ne i32 %506, 0
  %508 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %509 = extractvalue %dx.types.CBufRet.f32 %508, 0
  %510 = extractvalue %dx.types.CBufRet.f32 %508, 1
  %511 = extractvalue %dx.types.CBufRet.f32 %508, 2
  %512 = extractvalue %dx.types.CBufRet.f32 %508, 3
  %513 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %514 = extractvalue %dx.types.CBufRet.f32 %513, 0
  %515 = extractvalue %dx.types.CBufRet.f32 %513, 1
  %516 = extractvalue %dx.types.CBufRet.f32 %513, 2
  %517 = extractvalue %dx.types.CBufRet.f32 %513, 3
  %518 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %519 = extractvalue %dx.types.CBufRet.f32 %518, 0
  %520 = extractvalue %dx.types.CBufRet.f32 %518, 1
  %521 = extractvalue %dx.types.CBufRet.f32 %518, 2
  %522 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %523 = extractvalue %dx.types.CBufRet.f32 %522, 0
  %524 = extractvalue %dx.types.CBufRet.f32 %522, 1
  %525 = extractvalue %dx.types.CBufRet.f32 %522, 2
  %526 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %527 = extractvalue %dx.types.CBufRet.f32 %526, 0
  %528 = extractvalue %dx.types.CBufRet.f32 %526, 1
  %529 = extractvalue %dx.types.CBufRet.f32 %522, 3
  %530 = fsub fast float -0.000000e+00, %529
  %531 = extractvalue %dx.types.CBufRet.f32 %526, 3
  %532 = select i1 %507, float %531, float 0.000000e+00
  %533 = fsub fast float -0.000000e+00, %532
  %534 = fcmp fast oeq float %517, 0.000000e+00
  %535 = and i1 %507, %534
  %536 = icmp eq i32 %506, 2
  %537 = icmp eq i32 %506, 3
  %538 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %539 = extractvalue %dx.types.CBufRet.f32 %538, 0
  %540 = extractvalue %dx.types.CBufRet.f32 %538, 1
  %541 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %542 = extractvalue %dx.types.CBufRet.f32 %541, 0
  %543 = extractvalue %dx.types.CBufRet.f32 %541, 1
  %544 = extractvalue %dx.types.CBufRet.f32 %541, 2
  %545 = fmul fast float %542, 2.000000e+00
  %546 = fmul fast float %543, 2.000000e+00
  %547 = fmul fast float %544, 2.000000e+00
  %548 = fmul fast float %545, %545
  %549 = fmul fast float %546, %546
  %550 = fadd fast float %548, %549
  %551 = fmul fast float %547, %547
  %552 = fadd fast float %550, %551
  %553 = call float @dx.op.unary.f32(i32 24, float %552)  ; Sqrt(value)
  %554 = fdiv fast float %553, %459
  %555 = call float @dx.op.binary.f32(i32 35, float %554, float 1.000000e+00)  ; FMax(a,b)
  %556 = fptoui float %555 to i32
  %557 = icmp ugt i32 %556, %427
  %558 = uitofp i32 %427 to float
  %559 = fdiv fast float %553, %558
  %560 = select i1 %557, float %559, float %459
  %561 = fsub fast float %422, %421
  %562 = call float @dx.op.unary.f32(i32 6, float %561)  ; FAbs(value)
  %563 = fdiv fast float %562, %560
  %564 = call float @dx.op.unary.f32(i32 28, float %563)  ; Round_pi(value)
  %565 = call float @dx.op.binary.f32(i32 35, float %564, float 1.000000e+00)  ; FMax(a,b)
  %566 = fptoui float %565 to i32
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %2013, label %568

; <label>:568                                     ; preds = %457
  br label %569

; <label>:569                                     ; preds = %2006, %568
  %570 = phi i32 [ %2007, %2006 ], [ 0, %568 ]
  %571 = phi float [ %1988, %2006 ], [ %415, %568 ]
  %572 = phi float [ %1989, %2006 ], [ %416, %568 ]
  %573 = phi float [ %1990, %2006 ], [ %417, %568 ]
  %574 = phi float [ %1998, %2006 ], [ %418, %568 ]
  %575 = phi float [ %1999, %2006 ], [ %419, %568 ]
  %576 = phi float [ %2000, %2006 ], [ %420, %568 ]
  %577 = uitofp i32 %570 to float
  %578 = fadd fast float %577, %127
  %579 = fmul fast float %578, %560
  %580 = fadd fast float %579, %421
  %581 = fmul fast float %580, %257
  %582 = fmul fast float %580, %258
  %583 = fmul fast float %580, %259
  %584 = fadd fast float %581, %230
  %585 = fadd fast float %582, %234
  %586 = fadd fast float %583, %238
  %587 = fmul fast float %503, %208
  %588 = fmul fast float %587, %580
  %589 = fmul fast float %503, %209
  %590 = fmul fast float %589, %580
  %591 = fmul fast float %503, %210
  %592 = fmul fast float %591, %580
  %593 = fadd fast float %588, %146
  %594 = fadd fast float %590, %147
  %595 = fadd fast float %592, %148
  %596 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %597 = extractvalue %dx.types.CBufRet.f32 %596, 0
  %598 = extractvalue %dx.types.CBufRet.f32 %596, 1
  %599 = extractvalue %dx.types.CBufRet.f32 %596, 2
  %600 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %601 = extractvalue %dx.types.CBufRet.f32 %600, 0
  %602 = extractvalue %dx.types.CBufRet.f32 %600, 1
  %603 = extractvalue %dx.types.CBufRet.f32 %600, 2
  %604 = fsub fast float %597, %601
  %605 = fsub fast float %598, %602
  %606 = fsub fast float %599, %603
  %607 = fsub fast float %584, %604
  %608 = fsub fast float %585, %605
  %609 = fsub fast float %586, %606
  %610 = fadd fast float %601, %601
  %611 = fadd fast float %602, %602
  %612 = fadd fast float %603, %603
  %613 = fdiv fast float %607, %610
  %614 = fdiv fast float %608, %611
  %615 = fdiv fast float %609, %612
  %616 = icmp eq i32 %425, 0
  br i1 %616, label %739, label %617

; <label>:617                                     ; preds = %569
  %618 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %619 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %620 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %618, %dx.types.Handle %619, float %613, float %614, float %615, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %621 = extractvalue %dx.types.ResRet.f32 %620, 0
  %622 = extractvalue %dx.types.ResRet.f32 %620, 1
  %623 = extractvalue %dx.types.ResRet.f32 %620, 2
  %624 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %625 = extractvalue %dx.types.CBufRet.f32 %624, 0
  %626 = extractvalue %dx.types.CBufRet.f32 %624, 1
  %627 = extractvalue %dx.types.CBufRet.f32 %624, 3
  %628 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %629 = extractvalue %dx.types.CBufRet.f32 %628, 0
  %630 = extractvalue %dx.types.CBufRet.f32 %628, 1
  %631 = extractvalue %dx.types.CBufRet.f32 %628, 3
  %632 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %633 = extractvalue %dx.types.CBufRet.f32 %632, 0
  %634 = extractvalue %dx.types.CBufRet.f32 %632, 1
  %635 = extractvalue %dx.types.CBufRet.f32 %632, 3
  %636 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %637 = extractvalue %dx.types.CBufRet.f32 %636, 0
  %638 = extractvalue %dx.types.CBufRet.f32 %636, 1
  %639 = extractvalue %dx.types.CBufRet.f32 %636, 3
  %640 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %641 = extractvalue %dx.types.CBufRet.f32 %640, 0
  %642 = extractvalue %dx.types.CBufRet.f32 %640, 1
  %643 = extractvalue %dx.types.CBufRet.f32 %640, 2
  %644 = fmul fast float %641, 2.097152e+06
  %645 = fmul fast float %642, 2.097152e+06
  %646 = fmul fast float %643, 2.097152e+06
  %647 = fsub fast float %593, %644
  %648 = fsub fast float %594, %645
  %649 = fsub fast float %595, %646
  %650 = fmul fast float %647, %625
  %651 = call float @dx.op.tertiary.f32(i32 46, float %648, float %629, float %650)  ; FMad(a,b,c)
  %652 = call float @dx.op.tertiary.f32(i32 46, float %649, float %633, float %651)  ; FMad(a,b,c)
  %653 = fadd fast float %652, %637
  %654 = fmul fast float %647, %626
  %655 = call float @dx.op.tertiary.f32(i32 46, float %648, float %630, float %654)  ; FMad(a,b,c)
  %656 = call float @dx.op.tertiary.f32(i32 46, float %649, float %634, float %655)  ; FMad(a,b,c)
  %657 = fadd fast float %656, %638
  %658 = fmul fast float %647, %627
  %659 = call float @dx.op.tertiary.f32(i32 46, float %648, float %631, float %658)  ; FMad(a,b,c)
  %660 = call float @dx.op.tertiary.f32(i32 46, float %649, float %635, float %659)  ; FMad(a,b,c)
  %661 = fadd fast float %660, %639
  %662 = fdiv fast float %653, %661
  %663 = fdiv fast float %657, %661
  %664 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %665 = extractvalue %dx.types.CBufRet.f32 %664, 0
  %666 = fmul fast float %665, %661
  %667 = extractvalue %dx.types.CBufRet.f32 %664, 1
  %668 = fadd fast float %666, %667
  %669 = call float @dx.op.unary.f32(i32 23, float %668)  ; Log(value)
  %670 = extractvalue %dx.types.CBufRet.f32 %664, 2
  %671 = fmul fast float %670, %669
  %672 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %673 = extractvalue %dx.types.CBufRet.i32 %672, 2
  %674 = sitofp i32 %673 to float
  %675 = fdiv fast float %671, %674
  %676 = fmul fast float %662, 5.000000e-01
  %677 = fmul fast float %663, 5.000000e-01
  %678 = fadd fast float %676, 5.000000e-01
  %679 = fsub fast float 5.000000e-01, %677
  %680 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %681 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %682 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %680, %dx.types.Handle %681, float %678, float %679, float %675, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %683 = extractvalue %dx.types.ResRet.f32 %682, 0
  %684 = extractvalue %dx.types.ResRet.f32 %682, 1
  %685 = extractvalue %dx.types.ResRet.f32 %682, 2
  %686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %687 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %686, %dx.types.Handle %681, float %678, float %679, float %675, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %688 = extractvalue %dx.types.ResRet.f32 %687, 0
  %689 = extractvalue %dx.types.ResRet.f32 %687, 1
  %690 = extractvalue %dx.types.ResRet.f32 %687, 2
  %691 = call float @dx.op.dot3.f32(i32 55, float %683, float %684, float %685, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %692 = fadd fast float %691, 0x3EE4F8B580000000
  %693 = fdiv fast float %683, %692
  %694 = fdiv fast float %684, %692
  %695 = fdiv fast float %685, %692
  %696 = fmul fast float %693, %688
  %697 = fmul fast float %693, %689
  %698 = fmul fast float %693, %690
  %699 = fmul fast float %694, %688
  %700 = fmul fast float %694, %689
  %701 = fmul fast float %694, %690
  %702 = fmul fast float %695, %688
  %703 = fmul fast float %695, %689
  %704 = fmul fast float %695, %690
  %705 = call float @dx.op.dot4.f32(i32 56, float %683, float %696, float %697, float %698, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %706 = call float @dx.op.dot4.f32(i32 56, float %684, float %699, float %700, float %701, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %707 = call float @dx.op.dot4.f32(i32 56, float %685, float %702, float %703, float %704, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %708 = call float @dx.op.binary.f32(i32 35, float %705, float 0.000000e+00)  ; FMax(a,b)
  %709 = call float @dx.op.binary.f32(i32 35, float %706, float 0.000000e+00)  ; FMax(a,b)
  %710 = call float @dx.op.binary.f32(i32 35, float %707, float 0.000000e+00)  ; FMax(a,b)
  %711 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %712 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %711, %dx.types.Handle %619, float %613, float %614, float %615, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %713 = extractvalue %dx.types.ResRet.f32 %712, 0
  %714 = extractvalue %dx.types.ResRet.f32 %712, 1
  %715 = extractvalue %dx.types.ResRet.f32 %712, 2
  %716 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %717 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %716, %dx.types.Handle %619, float %613, float %614, float %615, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %718 = extractvalue %dx.types.ResRet.f32 %717, 0
  %719 = extractvalue %dx.types.ResRet.f32 %717, 1
  %720 = extractvalue %dx.types.ResRet.f32 %717, 2
  %721 = fmul fast float %713, %708
  %722 = fmul fast float %721, %718
  %723 = fmul fast float %714, %709
  %724 = fmul fast float %723, %719
  %725 = fmul fast float %715, %710
  %726 = fmul fast float %725, %720
  %727 = fadd fast float %722, %621
  %728 = fmul fast float %574, %727
  %729 = fmul fast float %728, %560
  %730 = fadd fast float %729, %571
  %731 = fadd fast float %724, %622
  %732 = fmul fast float %575, %731
  %733 = fmul fast float %732, %560
  %734 = fadd fast float %733, %572
  %735 = fadd fast float %726, %623
  %736 = fmul fast float %576, %735
  %737 = fmul fast float %736, %560
  %738 = fadd fast float %737, %573
  br label %739

; <label>:739                                     ; preds = %617, %569
  %740 = phi float [ %730, %617 ], [ %571, %569 ]
  %741 = phi float [ %734, %617 ], [ %572, %569 ]
  %742 = phi float [ %738, %617 ], [ %573, %569 ]
  %743 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %744 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %745 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %743, %dx.types.Handle %744, float %613, float %614, float %615, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %746 = extractvalue %dx.types.ResRet.f32 %745, 0
  %747 = extractvalue %dx.types.ResRet.f32 %745, 1
  %748 = extractvalue %dx.types.ResRet.f32 %745, 2
  %749 = icmp eq i32 %424, 0
  br i1 %749, label %1987, label %750

; <label>:750                                     ; preds = %739
  %751 = fcmp fast ogt float %746, 0.000000e+00
  %752 = fcmp fast ogt float %747, 0.000000e+00
  %753 = fcmp fast ogt float %748, 0.000000e+00
  %754 = or i1 %751, %752
  %755 = or i1 %753, %754
  br i1 %755, label %756, label %1987

; <label>:756                                     ; preds = %750
  %757 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %758 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %757, %dx.types.Handle %744, float %613, float %614, float %615, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %759 = extractvalue %dx.types.ResRet.f32 %758, 0
  %760 = extractvalue %dx.types.ResRet.f32 %758, 1
  %761 = extractvalue %dx.types.ResRet.f32 %758, 2
  %762 = fcmp fast ogt float %759, 0.000000e+00
  %763 = fcmp fast ogt float %760, 0.000000e+00
  %764 = fcmp fast ogt float %761, 0.000000e+00
  %765 = or i1 %762, %763
  %766 = or i1 %764, %765
  br i1 %766, label %767, label %1987

; <label>:767                                     ; preds = %756
  %768 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %769 = extractvalue %dx.types.CBufRet.f32 %768, 0
  %770 = extractvalue %dx.types.CBufRet.f32 %768, 1
  %771 = extractvalue %dx.types.CBufRet.f32 %768, 2
  %772 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %773 = extractvalue %dx.types.CBufRet.f32 %772, 0
  %774 = extractvalue %dx.types.CBufRet.f32 %772, 1
  %775 = extractvalue %dx.types.CBufRet.f32 %772, 2
  %776 = fadd fast float %593, %773
  %777 = fadd fast float %594, %774
  %778 = fadd fast float %595, %775
  %779 = fmul fast float %769, 2.097152e+06
  %780 = fmul fast float %770, 2.097152e+06
  %781 = fmul fast float %771, 2.097152e+06
  %782 = fsub fast float %776, %779
  %783 = fsub fast float %777, %780
  %784 = fsub fast float %778, %781
  %785 = icmp eq i32 %506, 0
  br i1 %785, label %1093, label %786

; <label>:786                                     ; preds = %767
  %787 = fsub fast float %509, %782
  %788 = fsub fast float %510, %783
  %789 = fsub fast float %511, %784
  %790 = call float @dx.op.dot3.f32(i32 55, float %787, float %788, float %789, float %787, float %788, float %789)  ; Dot3(ax,ay,az,bx,by,bz)
  %791 = call float @dx.op.unary.f32(i32 25, float %790)  ; Rsqrt(value)
  %792 = fmul fast float %791, %787
  %793 = fmul fast float %791, %788
  %794 = fmul fast float %791, %789
  br i1 %535, label %795, label %802

; <label>:795                                     ; preds = %786
  %796 = fmul fast float %512, %512
  %797 = fmul fast float %796, %790
  %798 = fmul fast float %797, %797
  %799 = fsub fast float 1.000000e+00, %798
  %800 = call float @dx.op.unary.f32(i32 7, float %799)  ; Saturate(value)
  %801 = fmul fast float %800, %800
  br label %812

; <label>:802                                     ; preds = %786
  %803 = fmul fast float %787, %512
  %804 = fmul fast float %788, %512
  %805 = fmul fast float %789, %512
  %806 = call float @dx.op.dot3.f32(i32 55, float %803, float %804, float %805, float %803, float %804, float %805)  ; Dot3(ax,ay,az,bx,by,bz)
  %807 = call float @dx.op.unary.f32(i32 7, float %806)  ; Saturate(value)
  %808 = fsub fast float 1.000000e+00, %807
  %809 = call float @dx.op.unary.f32(i32 23, float %808)  ; Log(value)
  %810 = fmul fast float %809, %517
  %811 = call float @dx.op.unary.f32(i32 21, float %810)  ; Exp(value)
  br label %812

; <label>:812                                     ; preds = %802, %795
  %813 = phi float [ %801, %795 ], [ %811, %802 ]
  br i1 %536, label %814, label %821

; <label>:814                                     ; preds = %812
  %815 = call float @dx.op.dot3.f32(i32 55, float %792, float %793, float %794, float %519, float %520, float %521)  ; Dot3(ax,ay,az,bx,by,bz)
  %816 = fsub fast float %815, %527
  %817 = fmul fast float %816, %528
  %818 = call float @dx.op.unary.f32(i32 7, float %817)  ; Saturate(value)
  %819 = fmul fast float %818, %818
  %820 = fmul fast float %819, %813
  br label %821

; <label>:821                                     ; preds = %814, %812
  %822 = phi float [ %820, %814 ], [ %813, %812 ]
  br i1 %537, label %823, label %827

; <label>:823                                     ; preds = %821
  %824 = call float @dx.op.dot3.f32(i32 55, float %519, float %520, float %521, float %792, float %793, float %794)  ; Dot3(ax,ay,az,bx,by,bz)
  %825 = fcmp fast olt float %824, 0.000000e+00
  %826 = select i1 %825, float 0.000000e+00, float %822
  br label %827

; <label>:827                                     ; preds = %823, %821
  %828 = phi float [ %826, %823 ], [ %822, %821 ]
  br i1 %537, label %829, label %1064

; <label>:829                                     ; preds = %827
  %830 = fmul fast float %524, %521
  %831 = fmul fast float %525, %520
  %832 = fsub fast float %830, %831
  %833 = fmul fast float %525, %519
  %834 = fmul fast float %523, %521
  %835 = fsub fast float %833, %834
  %836 = fmul fast float %523, %520
  %837 = fmul fast float %524, %519
  %838 = fsub fast float %836, %837
  %839 = fcmp fast ogt float %539, 0x3FA1EB8520000000
  br i1 %839, label %840, label %935

; <label>:840                                     ; preds = %829
  %841 = fmul fast float %787, %832
  %842 = call float @dx.op.tertiary.f32(i32 46, float %835, float %788, float %841)  ; FMad(a,b,c)
  %843 = call float @dx.op.tertiary.f32(i32 46, float %838, float %789, float %842)  ; FMad(a,b,c)
  %844 = fmul fast float %787, %523
  %845 = call float @dx.op.tertiary.f32(i32 46, float %524, float %788, float %844)  ; FMad(a,b,c)
  %846 = call float @dx.op.tertiary.f32(i32 46, float %525, float %789, float %845)  ; FMad(a,b,c)
  %847 = fmul fast float %787, %519
  %848 = call float @dx.op.tertiary.f32(i32 46, float %520, float %788, float %847)  ; FMad(a,b,c)
  %849 = call float @dx.op.tertiary.f32(i32 46, float %521, float %789, float %848)  ; FMad(a,b,c)
  %850 = fmul fast float %539, %539
  %851 = fsub fast float 1.000000e+00, %850
  %852 = call float @dx.op.unary.f32(i32 24, float %851)  ; Sqrt(value)
  %853 = fmul fast float %540, %539
  %854 = call float @dx.op.binary.f32(i32 36, float %849, float %853)  ; FMin(a,b)
  %855 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %853)  ; FMax(a,b)
  %856 = fdiv fast float %854, %855
  %857 = fmul fast float %852, %540
  %858 = fmul fast float %857, %856
  %859 = fcmp fast ogt float %843, 0.000000e+00
  %860 = fcmp fast ogt float %846, 0.000000e+00
  %861 = fcmp fast olt float %843, 0.000000e+00
  %862 = fcmp fast olt float %846, 0.000000e+00
  %863 = zext i1 %859 to i32
  %864 = zext i1 %860 to i32
  %865 = zext i1 %861 to i32
  %866 = zext i1 %862 to i32
  %867 = sub nsw i32 %863, %865
  %868 = sub nsw i32 %864, %866
  %869 = sitofp i32 %867 to float
  %870 = sitofp i32 %868 to float
  %871 = fadd fast float %858, %529
  %872 = fadd fast float %858, %532
  %873 = call float @dx.op.unary.f32(i32 6, float %843)  ; FAbs(value)
  %874 = call float @dx.op.unary.f32(i32 6, float %846)  ; FAbs(value)
  %875 = call float @dx.op.binary.f32(i32 35, float %873, float %871)  ; FMax(a,b)
  %876 = call float @dx.op.binary.f32(i32 35, float %874, float %872)  ; FMax(a,b)
  %877 = fsub fast float %530, %858
  %878 = fadd fast float %877, %875
  %879 = fmul fast float %878, %869
  %880 = fsub fast float %533, %858
  %881 = fadd fast float %880, %876
  %882 = fmul fast float %881, %870
  %883 = fsub fast float %849, %854
  %884 = call float @dx.op.binary.f32(i32 35, float %883, float 0x3F50624DE0000000)  ; FMax(a,b)
  %885 = call float @dx.op.unary.f32(i32 6, float %879)  ; FAbs(value)
  %886 = call float @dx.op.unary.f32(i32 6, float %882)  ; FAbs(value)
  %887 = fdiv fast float %885, %884
  %888 = fdiv fast float %886, %884
  %889 = fmul fast float %887, %854
  %890 = fmul fast float %888, %854
  %891 = fsub fast float %889, %858
  %892 = fsub fast float %890, %858
  %893 = fsub fast float -0.000000e+00, %869
  %894 = fsub fast float -0.000000e+00, %870
  %895 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %893)  ; FMax(a,b)
  %896 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %894)  ; FMax(a,b)
  %897 = fmul fast float %891, %895
  %898 = fmul fast float %892, %896
  %899 = fsub fast float %897, %529
  %900 = fsub fast float %898, %532
  %901 = call float @dx.op.binary.f32(i32 35, float %899, float %530)  ; FMax(a,b)
  %902 = call float @dx.op.binary.f32(i32 35, float %900, float %533)  ; FMax(a,b)
  %903 = call float @dx.op.binary.f32(i32 36, float %901, float %529)  ; FMin(a,b)
  %904 = call float @dx.op.binary.f32(i32 36, float %902, float %532)  ; FMin(a,b)
  %905 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %869)  ; FMax(a,b)
  %906 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %870)  ; FMax(a,b)
  %907 = fmul fast float %905, %891
  %908 = fmul fast float %906, %892
  %909 = fsub fast float %529, %907
  %910 = fsub fast float %532, %908
  %911 = call float @dx.op.binary.f32(i32 35, float %909, float %530)  ; FMax(a,b)
  %912 = call float @dx.op.binary.f32(i32 35, float %910, float %533)  ; FMax(a,b)
  %913 = call float @dx.op.binary.f32(i32 36, float %911, float %529)  ; FMin(a,b)
  %914 = call float @dx.op.binary.f32(i32 36, float %912, float %532)  ; FMin(a,b)
  %915 = fadd fast float %913, %903
  %916 = fadd fast float %914, %904
  %917 = fmul fast float %915, 5.000000e-01
  %918 = fmul fast float %916, 5.000000e-01
  %919 = fsub fast float %913, %903
  %920 = fsub fast float %914, %904
  %921 = fmul fast float %919, 5.000000e-01
  %922 = fmul fast float %920, 5.000000e-01
  %923 = fmul fast float %917, %832
  %924 = fmul fast float %917, %835
  %925 = fmul fast float %917, %838
  %926 = fsub fast float %787, %923
  %927 = fsub fast float %788, %924
  %928 = fsub fast float %789, %925
  %929 = fmul fast float %918, %523
  %930 = fmul fast float %918, %524
  %931 = fmul fast float %918, %525
  %932 = fsub fast float %926, %929
  %933 = fsub fast float %927, %930
  %934 = fsub fast float %928, %931
  br label %935

; <label>:935                                     ; preds = %840, %829
  %936 = phi float [ %932, %840 ], [ %787, %829 ]
  %937 = phi float [ %933, %840 ], [ %788, %829 ]
  %938 = phi float [ %934, %840 ], [ %789, %829 ]
  %939 = phi float [ %921, %840 ], [ %529, %829 ]
  %940 = phi float [ %922, %840 ], [ %532, %829 ]
  %941 = fcmp fast oeq float %939, 0.000000e+00
  %942 = fcmp fast oeq float %940, 0.000000e+00
  %943 = or i1 %941, %942
  br i1 %943, label %1061, label %944

; <label>:944                                     ; preds = %935
  %945 = call float @dx.op.dot3.f32(i32 55, float %832, float %835, float %838, float %936, float %937, float %938)  ; Dot3(ax,ay,az,bx,by,bz)
  %946 = call float @dx.op.dot3.f32(i32 55, float %523, float %524, float %525, float %936, float %937, float %938)  ; Dot3(ax,ay,az,bx,by,bz)
  %947 = call float @dx.op.dot3.f32(i32 55, float %519, float %520, float %521, float %936, float %937, float %938)  ; Dot3(ax,ay,az,bx,by,bz)
  %948 = fsub fast float %945, %939
  %949 = fadd fast float %945, %939
  %950 = fsub fast float %946, %940
  %951 = fadd fast float %946, %940
  %952 = fmul fast float %947, %947
  %953 = call float @dx.op.dot2.f32(i32 54, float %948, float %950, float %948, float %950)  ; Dot2(ax,ay,bx,by)
  %954 = fadd fast float %953, %952
  %955 = call float @dx.op.unary.f32(i32 25, float %954)  ; Rsqrt(value)
  %956 = fmul fast float %955, %948
  %957 = fmul fast float %955, %950
  %958 = fmul fast float %955, %947
  %959 = call float @dx.op.dot2.f32(i32 54, float %949, float %950, float %949, float %950)  ; Dot2(ax,ay,bx,by)
  %960 = fadd fast float %959, %952
  %961 = call float @dx.op.unary.f32(i32 25, float %960)  ; Rsqrt(value)
  %962 = fmul fast float %961, %949
  %963 = fmul fast float %961, %950
  %964 = fmul fast float %961, %947
  %965 = call float @dx.op.dot2.f32(i32 54, float %949, float %951, float %949, float %951)  ; Dot2(ax,ay,bx,by)
  %966 = fadd fast float %965, %952
  %967 = call float @dx.op.unary.f32(i32 25, float %966)  ; Rsqrt(value)
  %968 = fmul fast float %967, %949
  %969 = fmul fast float %967, %951
  %970 = fmul fast float %967, %947
  %971 = call float @dx.op.dot2.f32(i32 54, float %948, float %951, float %948, float %951)  ; Dot2(ax,ay,bx,by)
  %972 = fadd fast float %971, %952
  %973 = call float @dx.op.unary.f32(i32 25, float %972)  ; Rsqrt(value)
  %974 = fmul fast float %973, %948
  %975 = fmul fast float %973, %951
  %976 = fmul fast float %973, %947
  %977 = call float @dx.op.dot3.f32(i32 55, float %956, float %957, float %958, float %962, float %963, float %964)  ; Dot3(ax,ay,az,bx,by,bz)
  %978 = call float @dx.op.dot3.f32(i32 55, float %962, float %963, float %964, float %968, float %969, float %970)  ; Dot3(ax,ay,az,bx,by,bz)
  %979 = call float @dx.op.dot3.f32(i32 55, float %968, float %969, float %970, float %974, float %975, float %976)  ; Dot3(ax,ay,az,bx,by,bz)
  %980 = call float @dx.op.dot3.f32(i32 55, float %974, float %975, float %976, float %956, float %957, float %958)  ; Dot3(ax,ay,az,bx,by,bz)
  %981 = fmul fast float %977, 0x3FC6666660000000
  %982 = fsub fast float 0x3FF921FF20000000, %981
  %983 = fadd fast float %977, 1.000000e+00
  %984 = call float @dx.op.unary.f32(i32 25, float %983)  ; Rsqrt(value)
  %985 = fmul fast float %978, 0x3FC6666660000000
  %986 = fsub fast float 0x3FF921FF20000000, %985
  %987 = fadd fast float %978, 1.000000e+00
  %988 = call float @dx.op.unary.f32(i32 25, float %987)  ; Rsqrt(value)
  %989 = fmul fast float %988, %986
  %990 = fmul fast float %979, 0x3FC6666660000000
  %991 = fsub fast float 0x3FF921FF20000000, %990
  %992 = fadd fast float %979, 1.000000e+00
  %993 = call float @dx.op.unary.f32(i32 25, float %992)  ; Rsqrt(value)
  %994 = fmul fast float %980, 0x3FC6666660000000
  %995 = fsub fast float 0x3FF921FF20000000, %994
  %996 = fadd fast float %980, 1.000000e+00
  %997 = call float @dx.op.unary.f32(i32 25, float %996)  ; Rsqrt(value)
  %998 = fmul fast float %997, %995
  %999 = fmul fast float %982, %984
  %1000 = fsub fast float -0.000000e+00, %999
  %1001 = fmul fast float %956, %1000
  %1002 = fmul fast float %957, %1000
  %1003 = fmul fast float %958, %1000
  %1004 = fmul fast float %989, %968
  %1005 = fmul fast float %989, %969
  %1006 = fmul fast float %989, %970
  %1007 = fadd fast float %1004, %1001
  %1008 = fadd fast float %1005, %1002
  %1009 = fadd fast float %1006, %1003
  %1010 = fmul fast float %1009, %963
  %1011 = fmul fast float %1008, %964
  %1012 = fsub fast float %1010, %1011
  %1013 = fmul fast float %1007, %964
  %1014 = fmul fast float %1009, %962
  %1015 = fsub fast float %1013, %1014
  %1016 = fmul fast float %1008, %962
  %1017 = fmul fast float %1007, %963
  %1018 = fsub fast float %1016, %1017
  %1019 = fmul fast float %998, %956
  %1020 = fmul fast float %998, %957
  %1021 = fmul fast float %998, %958
  %1022 = fmul fast float %991, %993
  %1023 = fsub fast float -0.000000e+00, %1022
  %1024 = fmul fast float %968, %1023
  %1025 = fmul fast float %969, %1023
  %1026 = fmul fast float %970, %1023
  %1027 = fadd fast float %1019, %1024
  %1028 = fadd fast float %1020, %1025
  %1029 = fadd fast float %1021, %1026
  %1030 = fmul fast float %1029, %975
  %1031 = fmul fast float %1028, %976
  %1032 = fsub fast float %1030, %1031
  %1033 = fmul fast float %1027, %976
  %1034 = fmul fast float %1029, %974
  %1035 = fsub fast float %1033, %1034
  %1036 = fmul fast float %1028, %974
  %1037 = fmul fast float %1027, %975
  %1038 = fsub fast float %1036, %1037
  %1039 = fadd fast float %1032, %1012
  %1040 = fadd fast float %1035, %1015
  %1041 = fadd fast float %1038, %1018
  %1042 = fmul fast float %1039, %832
  %1043 = fmul fast float %1039, %835
  %1044 = fmul fast float %1039, %838
  %1045 = fmul fast float %1040, %523
  %1046 = fmul fast float %1040, %524
  %1047 = fmul fast float %1040, %525
  %1048 = fadd fast float %1042, %1045
  %1049 = fadd fast float %1043, %1046
  %1050 = fadd fast float %1044, %1047
  %1051 = fmul fast float %1041, %519
  %1052 = fmul fast float %1041, %520
  %1053 = fmul fast float %1041, %521
  %1054 = fadd fast float %1048, %1051
  %1055 = fadd fast float %1049, %1052
  %1056 = fadd fast float %1050, %1053
  %1057 = call float @dx.op.dot3.f32(i32 55, float %1054, float %1055, float %1056, float %1054, float %1055, float %1056)  ; Dot3(ax,ay,az,bx,by,bz)
  %1058 = call float @dx.op.unary.f32(i32 25, float %1057)  ; Rsqrt(value)
  %1059 = fmul fast float %1057, 5.000000e-01
  %1060 = fmul fast float %1059, %1058
  br label %1061

; <label>:1061                                    ; preds = %944, %935
  %1062 = phi float [ %1060, %944 ], [ 0.000000e+00, %935 ]
  %1063 = fmul fast float %1062, %828
  br label %1093

; <label>:1064                                    ; preds = %827
  %1065 = fmul fast float %532, 5.000000e-01
  %1066 = fmul fast float %1065, %523
  %1067 = fmul fast float %1065, %524
  %1068 = fmul fast float %1065, %525
  %1069 = fsub fast float %787, %1066
  %1070 = fsub fast float %788, %1067
  %1071 = fsub fast float %789, %1068
  %1072 = fadd fast float %787, %1066
  %1073 = fadd fast float %788, %1067
  %1074 = fadd fast float %789, %1068
  %1075 = fcmp fast ogt float %532, 0.000000e+00
  %1076 = call float @dx.op.dot3.f32(i32 55, float %1069, float %1070, float %1071, float %1069, float %1070, float %1071)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1075, label %1077, label %1087, !dx.controlflow.hints !48

; <label>:1077                                    ; preds = %1064
  %1078 = call float @dx.op.dot3.f32(i32 55, float %1072, float %1073, float %1074, float %1072, float %1073, float %1074)  ; Dot3(ax,ay,az,bx,by,bz)
  %1079 = call float @dx.op.unary.f32(i32 25, float %1076)  ; Rsqrt(value)
  %1080 = call float @dx.op.unary.f32(i32 25, float %1078)  ; Rsqrt(value)
  %1081 = fmul fast float %1080, %1079
  %1082 = call float @dx.op.dot3.f32(i32 55, float %1069, float %1070, float %1071, float %1072, float %1073, float %1074)  ; Dot3(ax,ay,az,bx,by,bz)
  %1083 = fmul fast float %1081, 5.000000e-01
  %1084 = fmul fast float %1083, %1082
  %1085 = fadd fast float %1084, 5.000000e-01
  %1086 = fdiv fast float %1081, %1085
  br label %1089

; <label>:1087                                    ; preds = %1064
  %1088 = fdiv fast float 1.000000e+00, %1076
  br label %1089

; <label>:1089                                    ; preds = %1087, %1077
  %1090 = phi float [ %1086, %1077 ], [ %1088, %1087 ]
  %1091 = select i1 %535, float %1090, float 1.000000e+00
  %1092 = fmul fast float %1091, %828
  br label %1093

; <label>:1093                                    ; preds = %1089, %1061, %767
  %1094 = phi float [ %1063, %1061 ], [ %1092, %1089 ], [ 1.000000e+00, %767 ]
  br i1 %785, label %1095, label %1188

; <label>:1095                                    ; preds = %1093
  %1096 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 62)  ; CBufferLoadLegacy(handle,regIndex)
  %1097 = extractvalue %dx.types.CBufRet.f32 %1096, 0
  %1098 = extractvalue %dx.types.CBufRet.f32 %1096, 1
  %1099 = extractvalue %dx.types.CBufRet.f32 %1096, 2
  %1100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %1101 = extractvalue %dx.types.CBufRet.f32 %1100, 0
  %1102 = extractvalue %dx.types.CBufRet.f32 %1100, 1
  %1103 = extractvalue %dx.types.CBufRet.f32 %1100, 2
  %1104 = fsub fast float %782, %1101
  %1105 = fsub fast float %783, %1102
  %1106 = fsub fast float %784, %1103
  %1107 = call float @dx.op.dot3.f32(i32 55, float %1104, float %1105, float %1106, float %1097, float %1098, float %1099)  ; Dot3(ax,ay,az,bx,by,bz)
  %1108 = icmp eq i32 %39, 0
  br i1 %1108, label %1501, label %1109

; <label>:1109                                    ; preds = %1095
  %1110 = fcmp fast oge float %1107, %41
  %1111 = fcmp fast oge float %1107, %42
  %1112 = fcmp fast oge float %1107, %43
  %1113 = fcmp fast oge float %1107, %44
  %1114 = zext i1 %1110 to i32
  %1115 = zext i1 %1111 to i32
  %1116 = zext i1 %1112 to i32
  %1117 = zext i1 %1113 to i32
  %1118 = add nuw nsw i32 %1114, %1115
  %1119 = add nuw nsw i32 %1118, %1116
  %1120 = add nuw nsw i32 %1119, %1117
  %1121 = icmp ult i32 %1120, %39
  br i1 %1121, label %1122, label %1501

; <label>:1122                                    ; preds = %1109
  %1123 = shl nuw nsw i32 %1120, 2
  %1124 = add nuw nsw i32 %1123, 9
  %1125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %1124)  ; CBufferLoadLegacy(handle,regIndex)
  %1126 = extractvalue %dx.types.CBufRet.f32 %1125, 0
  %1127 = extractvalue %dx.types.CBufRet.f32 %1125, 1
  %1128 = extractvalue %dx.types.CBufRet.f32 %1125, 3
  %1129 = add nuw nsw i32 %1123, 10
  %1130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %1129)  ; CBufferLoadLegacy(handle,regIndex)
  %1131 = extractvalue %dx.types.CBufRet.f32 %1130, 0
  %1132 = extractvalue %dx.types.CBufRet.f32 %1130, 1
  %1133 = extractvalue %dx.types.CBufRet.f32 %1130, 3
  %1134 = add nuw nsw i32 %1123, 11
  %1135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %1134)  ; CBufferLoadLegacy(handle,regIndex)
  %1136 = extractvalue %dx.types.CBufRet.f32 %1135, 0
  %1137 = extractvalue %dx.types.CBufRet.f32 %1135, 1
  %1138 = extractvalue %dx.types.CBufRet.f32 %1135, 3
  %1139 = add nuw nsw i32 %1123, 12
  %1140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %1139)  ; CBufferLoadLegacy(handle,regIndex)
  %1141 = extractvalue %dx.types.CBufRet.f32 %1140, 0
  %1142 = extractvalue %dx.types.CBufRet.f32 %1140, 1
  %1143 = extractvalue %dx.types.CBufRet.f32 %1140, 3
  %1144 = fmul fast float %1126, %782
  %1145 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1131, float %1144)  ; FMad(a,b,c)
  %1146 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1136, float %1145)  ; FMad(a,b,c)
  %1147 = fadd fast float %1146, %1141
  %1148 = fmul fast float %1127, %782
  %1149 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1132, float %1148)  ; FMad(a,b,c)
  %1150 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1137, float %1149)  ; FMad(a,b,c)
  %1151 = fadd fast float %1150, %1142
  %1152 = fmul fast float %1128, %782
  %1153 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1133, float %1152)  ; FMad(a,b,c)
  %1154 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1138, float %1153)  ; FMad(a,b,c)
  %1155 = fadd fast float %1154, %1143
  %1156 = fdiv fast float %1147, %1155
  %1157 = fdiv fast float %1151, %1155
  %1158 = add nuw nsw i32 %1120, 25
  %1159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %1158)  ; CBufferLoadLegacy(handle,regIndex)
  %1160 = extractvalue %dx.types.CBufRet.f32 %1159, 0
  %1161 = extractvalue %dx.types.CBufRet.f32 %1159, 1
  %1162 = extractvalue %dx.types.CBufRet.f32 %1159, 2
  %1163 = extractvalue %dx.types.CBufRet.f32 %1159, 3
  %1164 = fcmp fast ole float %1156, %1162
  %1165 = fcmp fast ole float %1157, %1163
  %1166 = fcmp fast oge float %1156, %1160
  %1167 = fcmp fast oge float %1157, %1161
  %1168 = and i1 %1166, %1164
  %1169 = and i1 %1167, %1165
  %1170 = and i1 %1168, %1169
  br i1 %1170, label %1171, label %1501

; <label>:1171                                    ; preds = %1122
  %1172 = extractvalue %dx.types.CBufRet.f32 %1140, 2
  %1173 = extractvalue %dx.types.CBufRet.f32 %1135, 2
  %1174 = extractvalue %dx.types.CBufRet.f32 %1130, 2
  %1175 = extractvalue %dx.types.CBufRet.f32 %1125, 2
  %1176 = fmul fast float %1175, %782
  %1177 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1174, float %1176)  ; FMad(a,b,c)
  %1178 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1173, float %1177)  ; FMad(a,b,c)
  %1179 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1180 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1181 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1179, %dx.types.Handle %1180, float %1156, float %1157, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1182 = extractvalue %dx.types.ResRet.f32 %1181, 0
  %1183 = fsub fast float 1.000000e+00, %1172
  %1184 = fsub fast float %1183, %1178
  %1185 = fsub fast float %1182, %46
  %1186 = fcmp fast olt float %1184, %1185
  %1187 = uitofp i1 %1186 to float
  br label %1501

; <label>:1188                                    ; preds = %1093
  %1189 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %1190 = extractvalue %dx.types.CBufRet.i32 %1189, 0
  %1191 = icmp eq i32 %1190, 0
  br i1 %1191, label %1350, label %1192, !dx.controlflow.hints !49

; <label>:1192                                    ; preds = %1188
  br i1 %536, label %1240, label %1193, !dx.controlflow.hints !50

; <label>:1193                                    ; preds = %1192
  %1194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1195 = extractvalue %dx.types.CBufRet.f32 %1194, 0
  %1196 = extractvalue %dx.types.CBufRet.f32 %1194, 1
  %1197 = extractvalue %dx.types.CBufRet.f32 %1194, 2
  %1198 = fsub fast float %782, %1195
  %1199 = fsub fast float %783, %1196
  %1200 = fsub fast float %784, %1197
  %1201 = fmul fast float %1198, %1198
  %1202 = fmul fast float %1199, %1199
  %1203 = fadd fast float %1201, %1202
  %1204 = fmul fast float %1200, %1200
  %1205 = fadd fast float %1203, %1204
  %1206 = call float @dx.op.unary.f32(i32 24, float %1205)  ; Sqrt(value)
  %1207 = fdiv fast float %1198, %1206
  %1208 = fdiv fast float %1199, %1206
  %1209 = fdiv fast float %1200, %1206
  %1210 = fdiv fast float %1208, %1207
  %1211 = call float @dx.op.unary.f32(i32 17, float %1210)  ; Atan(value)
  %1212 = fadd fast float %1211, 0x400921FB60000000
  %1213 = fadd fast float %1211, 0xC00921FB60000000
  %1214 = fcmp fast olt float %1207, 0.000000e+00
  %1215 = fcmp fast oeq float %1207, 0.000000e+00
  %1216 = fcmp fast oge float %1208, 0.000000e+00
  %1217 = fcmp fast olt float %1208, 0.000000e+00
  %1218 = and i1 %1214, %1216
  %1219 = select i1 %1218, float %1212, float %1211
  %1220 = and i1 %1214, %1217
  %1221 = select i1 %1220, float %1213, float %1219
  %1222 = and i1 %1215, %1217
  %1223 = and i1 %1215, %1216
  %1224 = fmul fast float %1221, 0x3FC45F3060000000
  %1225 = select i1 %1222, float -2.500000e-01, float %1224
  %1226 = select i1 %1223, float 2.500000e-01, float %1225
  %1227 = fcmp fast ogt float %1226, 0.000000e+00
  %1228 = fadd fast float %1226, 1.000000e+00
  %1229 = select i1 %1227, float %1226, float %1228
  %1230 = call float @dx.op.unary.f32(i32 15, float %1209)  ; Acos(value)
  %1231 = fmul fast float %1230, 0x3FD45F3060000000
  %1232 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1233 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1234 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1232, %dx.types.Handle %1233, float %1229, float %1231, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1235 = extractvalue %dx.types.ResRet.f32 %1234, 0
  %1236 = extractvalue %dx.types.CBufRet.f32 %1194, 3
  %1237 = fmul fast float %1236, %1206
  %1238 = fcmp fast olt float %1237, %1235
  %1239 = uitofp i1 %1238 to float
  br label %1350

; <label>:1240                                    ; preds = %1192
  %1241 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %1242 = extractvalue %dx.types.CBufRet.f32 %1241, 0
  %1243 = extractvalue %dx.types.CBufRet.f32 %1241, 1
  %1244 = extractvalue %dx.types.CBufRet.f32 %1241, 3
  %1245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1246 = extractvalue %dx.types.CBufRet.f32 %1245, 0
  %1247 = extractvalue %dx.types.CBufRet.f32 %1245, 1
  %1248 = extractvalue %dx.types.CBufRet.f32 %1245, 3
  %1249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1250 = extractvalue %dx.types.CBufRet.f32 %1249, 0
  %1251 = extractvalue %dx.types.CBufRet.f32 %1249, 1
  %1252 = extractvalue %dx.types.CBufRet.f32 %1249, 3
  %1253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %1254 = extractvalue %dx.types.CBufRet.f32 %1253, 0
  %1255 = extractvalue %dx.types.CBufRet.f32 %1253, 1
  %1256 = extractvalue %dx.types.CBufRet.f32 %1253, 3
  %1257 = fmul fast float %1242, %782
  %1258 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1246, float %1257)  ; FMad(a,b,c)
  %1259 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1250, float %1258)  ; FMad(a,b,c)
  %1260 = fadd fast float %1259, %1254
  %1261 = fmul fast float %1243, %782
  %1262 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1247, float %1261)  ; FMad(a,b,c)
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1251, float %1262)  ; FMad(a,b,c)
  %1264 = fadd fast float %1263, %1255
  %1265 = fmul fast float %1244, %782
  %1266 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1248, float %1265)  ; FMad(a,b,c)
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1252, float %1266)  ; FMad(a,b,c)
  %1268 = fadd fast float %1267, %1256
  %1269 = fdiv fast float %1260, %1268
  %1270 = fdiv fast float %1264, %1268
  %1271 = fcmp fast ole float %1269, 1.000000e+00
  %1272 = fcmp fast ole float %1270, 1.000000e+00
  %1273 = fcmp fast oge float %1269, 0.000000e+00
  %1274 = fcmp fast oge float %1270, 0.000000e+00
  %1275 = and i1 %1273, %1271
  %1276 = and i1 %1274, %1272
  %1277 = and i1 %1275, %1276
  br i1 %1277, label %1278, label %1350

; <label>:1278                                    ; preds = %1240
  %1279 = extractvalue %dx.types.CBufRet.f32 %1253, 2
  %1280 = extractvalue %dx.types.CBufRet.f32 %1249, 2
  %1281 = extractvalue %dx.types.CBufRet.f32 %1245, 2
  %1282 = extractvalue %dx.types.CBufRet.f32 %1241, 2
  %1283 = fmul fast float %1282, %782
  %1284 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1281, float %1283)  ; FMad(a,b,c)
  %1285 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1280, float %1284)  ; FMad(a,b,c)
  %1286 = fadd fast float %1285, %1279
  %1287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %1288 = extractvalue %dx.types.CBufRet.f32 %1287, 0
  %1289 = extractvalue %dx.types.CBufRet.f32 %1287, 1
  %1290 = extractvalue %dx.types.CBufRet.f32 %1287, 2
  %1291 = extractvalue %dx.types.CBufRet.f32 %1287, 3
  %1292 = fmul fast float %1288, %1269
  %1293 = fmul fast float %1289, %1270
  %1294 = fadd fast float %1292, -5.000000e-01
  %1295 = fadd fast float %1293, -5.000000e-01
  %1296 = call float @dx.op.unary.f32(i32 22, float %1294)  ; Frc(value)
  %1297 = call float @dx.op.unary.f32(i32 22, float %1295)  ; Frc(value)
  %1298 = call float @dx.op.unary.f32(i32 27, float %1294)  ; Round_ni(value)
  %1299 = call float @dx.op.unary.f32(i32 27, float %1295)  ; Round_ni(value)
  %1300 = fadd fast float %1298, 1.000000e+00
  %1301 = fadd fast float %1299, 1.000000e+00
  %1302 = fmul fast float %1300, %1290
  %1303 = fmul fast float %1301, %1291
  %1304 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1305 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1306 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1304, %dx.types.Handle %1305, float %1302, float %1303, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1307 = extractvalue %dx.types.ResRet.f32 %1306, 0
  %1308 = extractvalue %dx.types.ResRet.f32 %1306, 1
  %1309 = extractvalue %dx.types.ResRet.f32 %1306, 2
  %1310 = extractvalue %dx.types.ResRet.f32 %1306, 3
  %1311 = fmul fast float %1286, 4.000000e+01
  %1312 = fadd fast float %1311, -1.000000e+00
  %1313 = fmul fast float %1307, 4.000000e+01
  %1314 = fmul fast float %1308, 4.000000e+01
  %1315 = fmul fast float %1309, 4.000000e+01
  %1316 = fmul fast float %1310, 4.000000e+01
  %1317 = fsub fast float %1313, %1312
  %1318 = fsub fast float %1314, %1312
  %1319 = fsub fast float %1315, %1312
  %1320 = fsub fast float %1316, %1312
  %1321 = call float @dx.op.unary.f32(i32 7, float %1317)  ; Saturate(value)
  %1322 = call float @dx.op.unary.f32(i32 7, float %1318)  ; Saturate(value)
  %1323 = call float @dx.op.unary.f32(i32 7, float %1319)  ; Saturate(value)
  %1324 = call float @dx.op.unary.f32(i32 7, float %1320)  ; Saturate(value)
  %1325 = fcmp fast ogt float %1307, 0x3FEFAE1480000000
  %1326 = fcmp fast ogt float %1308, 0x3FEFAE1480000000
  %1327 = fcmp fast ogt float %1309, 0x3FEFAE1480000000
  %1328 = fcmp fast ogt float %1310, 0x3FEFAE1480000000
  %1329 = uitofp i1 %1325 to float
  %1330 = uitofp i1 %1326 to float
  %1331 = uitofp i1 %1327 to float
  %1332 = uitofp i1 %1328 to float
  %1333 = fadd fast float %1329, %1321
  %1334 = fadd fast float %1330, %1322
  %1335 = fadd fast float %1323, %1331
  %1336 = fadd fast float %1324, %1332
  %1337 = call float @dx.op.unary.f32(i32 7, float %1333)  ; Saturate(value)
  %1338 = call float @dx.op.unary.f32(i32 7, float %1334)  ; Saturate(value)
  %1339 = call float @dx.op.unary.f32(i32 7, float %1335)  ; Saturate(value)
  %1340 = call float @dx.op.unary.f32(i32 7, float %1336)  ; Saturate(value)
  %1341 = fsub fast float %1339, %1340
  %1342 = fsub fast float %1338, %1337
  %1343 = fmul fast float %1341, %1296
  %1344 = fmul fast float %1342, %1296
  %1345 = fadd fast float %1343, %1340
  %1346 = fadd fast float %1344, %1337
  %1347 = fsub fast float %1346, %1345
  %1348 = fmul fast float %1347, %1297
  %1349 = fadd fast float %1348, %1345
  br label %1350

; <label>:1350                                    ; preds = %1278, %1240, %1193, %1188
  %1351 = phi float [ %1239, %1193 ], [ %1349, %1278 ], [ 1.000000e+00, %1240 ], [ 1.000000e+00, %1188 ]
  %1352 = phi i32 [ 1, %1193 ], [ 1, %1278 ], [ 0, %1240 ], [ 0, %1188 ]
  br i1 %536, label %1429, label %1353

; <label>:1353                                    ; preds = %1350
  %1354 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %1355 = extractvalue %dx.types.CBufRet.f32 %1354, 0
  %1356 = fmul fast float %1355, 0x402EB851E0000000
  %1357 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1358 = extractvalue %dx.types.CBufRet.f32 %1357, 3
  %1359 = extractvalue %dx.types.CBufRet.f32 %1357, 0
  %1360 = extractvalue %dx.types.CBufRet.f32 %1357, 1
  %1361 = extractvalue %dx.types.CBufRet.f32 %1357, 2
  %1362 = fsub fast float %1359, %782
  %1363 = fsub fast float %1360, %783
  %1364 = fsub fast float %1361, %784
  %1365 = fmul fast float %1362, %1362
  %1366 = fmul fast float %1363, %1363
  %1367 = fadd fast float %1365, %1366
  %1368 = fmul fast float %1364, %1364
  %1369 = fadd fast float %1367, %1368
  %1370 = call float @dx.op.unary.f32(i32 24, float %1369)  ; Sqrt(value)
  %1371 = fmul fast float %1370, %1358
  %1372 = fcmp fast olt float %1371, 1.000000e+00
  br i1 %1372, label %1373, label %1426, !dx.controlflow.hints !51

; <label>:1373                                    ; preds = %1353
  %1374 = call float @dx.op.unary.f32(i32 6, float %1362)  ; FAbs(value)
  %1375 = call float @dx.op.unary.f32(i32 6, float %1363)  ; FAbs(value)
  %1376 = call float @dx.op.unary.f32(i32 6, float %1364)  ; FAbs(value)
  %1377 = call float @dx.op.binary.f32(i32 35, float %1375, float %1376)  ; FMax(a,b)
  %1378 = call float @dx.op.binary.f32(i32 35, float %1374, float %1377)  ; FMax(a,b)
  %1379 = fcmp fast oeq float %1378, %1374
  br i1 %1379, label %1380, label %1383

; <label>:1380                                    ; preds = %1373
  %1381 = fcmp fast oeq float %1374, %1362
  %1382 = select i1 %1381, i32 0, i32 4
  br label %1391

; <label>:1383                                    ; preds = %1373
  %1384 = fcmp fast oeq float %1378, %1375
  br i1 %1384, label %1385, label %1388

; <label>:1385                                    ; preds = %1383
  %1386 = fcmp fast oeq float %1375, %1363
  %1387 = select i1 %1386, i32 8, i32 12
  br label %1391

; <label>:1388                                    ; preds = %1383
  %1389 = fcmp fast oeq float %1376, %1364
  %1390 = select i1 %1389, i32 16, i32 20
  br label %1391

; <label>:1391                                    ; preds = %1388, %1385, %1380
  %1392 = phi i32 [ %1382, %1380 ], [ %1387, %1385 ], [ %1390, %1388 ]
  %1393 = add nuw nsw i32 %1392, 22
  %1394 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %1393)  ; CBufferLoadLegacy(handle,regIndex)
  %1395 = extractvalue %dx.types.CBufRet.f32 %1394, 2
  %1396 = extractvalue %dx.types.CBufRet.f32 %1394, 3
  %1397 = add nuw nsw i32 %1392, 23
  %1398 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %1397)  ; CBufferLoadLegacy(handle,regIndex)
  %1399 = extractvalue %dx.types.CBufRet.f32 %1398, 2
  %1400 = extractvalue %dx.types.CBufRet.f32 %1398, 3
  %1401 = add nuw nsw i32 %1392, 24
  %1402 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %1401)  ; CBufferLoadLegacy(handle,regIndex)
  %1403 = extractvalue %dx.types.CBufRet.f32 %1402, 2
  %1404 = extractvalue %dx.types.CBufRet.f32 %1402, 3
  %1405 = add nuw nsw i32 %1392, 25
  %1406 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %1405)  ; CBufferLoadLegacy(handle,regIndex)
  %1407 = extractvalue %dx.types.CBufRet.f32 %1406, 2
  %1408 = extractvalue %dx.types.CBufRet.f32 %1406, 3
  %1409 = fsub fast float -0.000000e+00, %1362
  %1410 = fsub fast float -0.000000e+00, %1363
  %1411 = fsub fast float -0.000000e+00, %1364
  %1412 = fmul fast float %1395, %1409
  %1413 = call float @dx.op.tertiary.f32(i32 46, float %1410, float %1399, float %1412)  ; FMad(a,b,c)
  %1414 = call float @dx.op.tertiary.f32(i32 46, float %1411, float %1403, float %1413)  ; FMad(a,b,c)
  %1415 = fmul fast float %1396, %1409
  %1416 = call float @dx.op.tertiary.f32(i32 46, float %1410, float %1400, float %1415)  ; FMad(a,b,c)
  %1417 = call float @dx.op.tertiary.f32(i32 46, float %1411, float %1404, float %1416)  ; FMad(a,b,c)
  %1418 = fadd fast float %1417, %1408
  %1419 = fadd fast float %1407, %1356
  %1420 = fadd fast float %1419, %1414
  %1421 = fdiv fast float %1420, %1418
  %1422 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1423 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 32782, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerComparisonState
  %1424 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %1422, %dx.types.Handle %1423, float %1362, float %1363, float %1364, float undef, i32 undef, i32 undef, i32 undef, float %1421)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %1425 = extractvalue %dx.types.ResRet.f32 %1424, 0
  br label %1426

; <label>:1426                                    ; preds = %1391, %1353
  %1427 = phi float [ %1425, %1391 ], [ 1.000000e+00, %1353 ]
  %1428 = fsub fast float 1.000000e+00, %1427
  br label %1495

; <label>:1429                                    ; preds = %1350
  %1430 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1431 = extractvalue %dx.types.CBufRet.f32 %1430, 0
  %1432 = extractvalue %dx.types.CBufRet.f32 %1430, 1
  %1433 = extractvalue %dx.types.CBufRet.f32 %1430, 2
  %1434 = extractvalue %dx.types.CBufRet.f32 %1430, 3
  %1435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1436 = extractvalue %dx.types.CBufRet.f32 %1435, 0
  %1437 = extractvalue %dx.types.CBufRet.f32 %1435, 1
  %1438 = extractvalue %dx.types.CBufRet.f32 %1435, 2
  %1439 = extractvalue %dx.types.CBufRet.f32 %1435, 3
  %1440 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %1441 = extractvalue %dx.types.CBufRet.f32 %1440, 0
  %1442 = extractvalue %dx.types.CBufRet.f32 %1440, 1
  %1443 = extractvalue %dx.types.CBufRet.f32 %1440, 2
  %1444 = extractvalue %dx.types.CBufRet.f32 %1440, 3
  %1445 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %1446 = extractvalue %dx.types.CBufRet.f32 %1445, 0
  %1447 = extractvalue %dx.types.CBufRet.f32 %1445, 1
  %1448 = extractvalue %dx.types.CBufRet.f32 %1445, 2
  %1449 = extractvalue %dx.types.CBufRet.f32 %1445, 3
  %1450 = fmul fast float %1431, %782
  %1451 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1436, float %1450)  ; FMad(a,b,c)
  %1452 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1441, float %1451)  ; FMad(a,b,c)
  %1453 = fadd fast float %1452, %1446
  %1454 = fmul fast float %1432, %782
  %1455 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1437, float %1454)  ; FMad(a,b,c)
  %1456 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1442, float %1455)  ; FMad(a,b,c)
  %1457 = fadd fast float %1456, %1447
  %1458 = fmul fast float %1433, %782
  %1459 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1438, float %1458)  ; FMad(a,b,c)
  %1460 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1443, float %1459)  ; FMad(a,b,c)
  %1461 = fmul fast float %1434, %782
  %1462 = call float @dx.op.tertiary.f32(i32 46, float %783, float %1439, float %1461)  ; FMad(a,b,c)
  %1463 = call float @dx.op.tertiary.f32(i32 46, float %784, float %1444, float %1462)  ; FMad(a,b,c)
  %1464 = fadd fast float %1463, %1449
  %1465 = fdiv fast float %1453, %1464
  %1466 = fdiv fast float %1457, %1464
  %1467 = fsub fast float 1.000000e+00, %1448
  %1468 = fsub fast float %1467, %1460
  %1469 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %1470 = extractvalue %dx.types.CBufRet.f32 %1469, 0
  %1471 = extractvalue %dx.types.CBufRet.f32 %1469, 1
  %1472 = fcmp fast oge float %1465, %1470
  %1473 = fcmp fast oge float %1466, %1471
  %1474 = and i1 %1472, %1473
  br i1 %1474, label %1475, label %1495

; <label>:1475                                    ; preds = %1429
  %1476 = extractvalue %dx.types.CBufRet.f32 %1469, 2
  %1477 = extractvalue %dx.types.CBufRet.f32 %1469, 3
  %1478 = fcmp fast ole float %1465, %1476
  %1479 = fcmp fast ole float %1466, %1477
  %1480 = and i1 %1478, %1479
  br i1 %1480, label %1481, label %1495

; <label>:1481                                    ; preds = %1475
  %1482 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1483 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1484 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1482, %dx.types.Handle %1483, float %1465, float %1466, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1485 = extractvalue %dx.types.ResRet.f32 %1484, 0
  %1486 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %1487 = extractvalue %dx.types.CBufRet.f32 %1486, 0
  %1488 = fsub fast float %1485, %1487
  %1489 = fcmp fast olt float %1468, %1488
  %1490 = uitofp i1 %1489 to float
  %1491 = fcmp fast oeq float %1485, 1.000000e+00
  %1492 = uitofp i1 %1491 to float
  %1493 = fadd fast float %1490, %1492
  %1494 = call float @dx.op.unary.f32(i32 7, float %1493)  ; Saturate(value)
  br label %1495

; <label>:1495                                    ; preds = %1481, %1475, %1429, %1426
  %1496 = phi float [ %1428, %1426 ], [ %1494, %1481 ], [ 1.000000e+00, %1475 ], [ 1.000000e+00, %1429 ]
  %1497 = phi i32 [ 1, %1426 ], [ 1, %1481 ], [ %1352, %1475 ], [ %1352, %1429 ]
  %1498 = call float @dx.op.binary.f32(i32 36, float %1351, float %1496)  ; FMin(a,b)
  %1499 = icmp ne i32 %1497, 0
  %1500 = select i1 %1499, float %1498, float 1.000000e+00
  br label %1501

; <label>:1501                                    ; preds = %1495, %1171, %1122, %1109, %1095
  %1502 = phi float [ %1500, %1495 ], [ %1187, %1171 ], [ 1.000000e+00, %1122 ], [ 1.000000e+00, %1109 ], [ 1.000000e+00, %1095 ]
  %1503 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %1504 = extractvalue %dx.types.CBufRet.i32 %1503, 0
  %1505 = icmp eq i32 %1504, -1
  br i1 %1505, label %1960, label %1506

; <label>:1506                                    ; preds = %1501
  %1507 = fsub fast float %782, %773
  %1508 = fsub fast float %783, %774
  %1509 = fsub fast float %784, %775
  %1510 = mul i32 %1504, 336
  %1511 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1512 = add i32 %1510, 128
  %1513 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1512, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1514 = add i32 %1510, 144
  %1515 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1514, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1516 = add i32 %1510, 160
  %1517 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1516, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1518 = add i32 %1510, 176
  %1519 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1518, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1520 = add i32 %1510, 256
  %1521 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1520, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1522 = extractvalue %dx.types.ResRet.i32 %1521, 0
  %1523 = extractvalue %dx.types.ResRet.i32 %1521, 1
  %1524 = extractvalue %dx.types.ResRet.i32 %1521, 2
  %1525 = bitcast i32 %1522 to float
  %1526 = bitcast i32 %1523 to float
  %1527 = bitcast i32 %1524 to float
  %1528 = add i32 %1510, 268
  %1529 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1528, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1530 = extractvalue %dx.types.ResRet.i32 %1529, 0
  %1531 = add i32 %1510, 272
  %1532 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1531, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1533 = add i32 %1510, 288
  %1534 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1533, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1535 = icmp eq i32 %1530, 0
  %1536 = fadd fast float %1525, %769
  %1537 = fadd fast float %1526, %770
  %1538 = fadd fast float %1527, %771
  %1539 = fmul fast float %1536, 2.097152e+06
  %1540 = fmul fast float %1537, 2.097152e+06
  %1541 = fmul fast float %1538, 2.097152e+06
  %1542 = fadd fast float %1539, %1507
  %1543 = fadd fast float %1540, %1508
  %1544 = fadd fast float %1541, %1509
  br i1 %1535, label %1545, label %1785

; <label>:1545                                    ; preds = %1506
  %1546 = extractvalue %dx.types.ResRet.i32 %1534, 2
  %1547 = bitcast i32 %1546 to float
  %1548 = extractvalue %dx.types.ResRet.i32 %1534, 1
  %1549 = bitcast i32 %1548 to float
  %1550 = extractvalue %dx.types.ResRet.i32 %1534, 0
  %1551 = bitcast i32 %1550 to float
  %1552 = add i32 %1510, 316
  %1553 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1552, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1554 = extractvalue %dx.types.ResRet.i32 %1553, 0
  %1555 = add i32 %1510, 312
  %1556 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1555, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1557 = extractvalue %dx.types.ResRet.i32 %1556, 0
  %1558 = add i32 %1510, 300
  %1559 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1558, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1560 = extractvalue %dx.types.ResRet.i32 %1559, 0
  %1561 = bitcast i32 %1560 to float
  %1562 = fadd fast float %1542, %1551
  %1563 = fadd fast float %1543, %1549
  %1564 = fadd fast float %1544, %1547
  %1565 = fmul fast float %1562, %1562
  %1566 = fmul fast float %1563, %1563
  %1567 = fadd fast float %1565, %1566
  %1568 = fmul fast float %1564, %1564
  %1569 = fadd fast float %1567, %1568
  %1570 = call float @dx.op.unary.f32(i32 24, float %1569)  ; Sqrt(value)
  %1571 = call float @dx.op.unary.f32(i32 23, float %1570)  ; Log(value)
  %1572 = fadd fast float %1571, %1561
  %1573 = call float @dx.op.unary.f32(i32 27, float %1572)  ; Round_ni(value)
  %1574 = fptosi float %1573 to i32
  %1575 = sub nsw i32 %1574, %1557
  %1576 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1575)  ; IMax(a,b)
  %1577 = icmp slt i32 %1576, %1554
  br i1 %1577, label %1578, label %1957

; <label>:1578                                    ; preds = %1545
  %1579 = add nsw i32 %1576, %1504
  %1580 = mul i32 %1579, 336
  %1581 = add i32 %1580, 112
  %1582 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1581, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1583 = extractvalue %dx.types.ResRet.i32 %1582, 2
  %1584 = bitcast i32 %1583 to float
  %1585 = add i32 %1580, 128
  %1586 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1585, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1587 = extractvalue %dx.types.ResRet.i32 %1586, 0
  %1588 = extractvalue %dx.types.ResRet.i32 %1586, 1
  %1589 = extractvalue %dx.types.ResRet.i32 %1586, 2
  %1590 = bitcast i32 %1587 to float
  %1591 = bitcast i32 %1588 to float
  %1592 = bitcast i32 %1589 to float
  %1593 = add i32 %1580, 144
  %1594 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1593, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1595 = extractvalue %dx.types.ResRet.i32 %1594, 0
  %1596 = extractvalue %dx.types.ResRet.i32 %1594, 1
  %1597 = extractvalue %dx.types.ResRet.i32 %1594, 2
  %1598 = bitcast i32 %1595 to float
  %1599 = bitcast i32 %1596 to float
  %1600 = bitcast i32 %1597 to float
  %1601 = add i32 %1580, 160
  %1602 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1601, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1603 = extractvalue %dx.types.ResRet.i32 %1602, 0
  %1604 = extractvalue %dx.types.ResRet.i32 %1602, 1
  %1605 = extractvalue %dx.types.ResRet.i32 %1602, 2
  %1606 = bitcast i32 %1603 to float
  %1607 = bitcast i32 %1604 to float
  %1608 = bitcast i32 %1605 to float
  %1609 = add i32 %1580, 176
  %1610 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1609, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1611 = extractvalue %dx.types.ResRet.i32 %1610, 0
  %1612 = extractvalue %dx.types.ResRet.i32 %1610, 1
  %1613 = extractvalue %dx.types.ResRet.i32 %1610, 2
  %1614 = bitcast i32 %1611 to float
  %1615 = bitcast i32 %1612 to float
  %1616 = bitcast i32 %1613 to float
  %1617 = add i32 %1580, 256
  %1618 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1617, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1619 = extractvalue %dx.types.ResRet.i32 %1618, 0
  %1620 = extractvalue %dx.types.ResRet.i32 %1618, 1
  %1621 = extractvalue %dx.types.ResRet.i32 %1618, 2
  %1622 = bitcast i32 %1619 to float
  %1623 = bitcast i32 %1620 to float
  %1624 = bitcast i32 %1621 to float
  %1625 = add i32 %1580, 272
  %1626 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1625, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1627 = extractvalue %dx.types.ResRet.i32 %1626, 0
  %1628 = extractvalue %dx.types.ResRet.i32 %1626, 1
  %1629 = extractvalue %dx.types.ResRet.i32 %1626, 2
  %1630 = bitcast i32 %1627 to float
  %1631 = bitcast i32 %1628 to float
  %1632 = bitcast i32 %1629 to float
  %1633 = fadd fast float %1622, %769
  %1634 = fadd fast float %1623, %770
  %1635 = fadd fast float %1624, %771
  %1636 = fmul fast float %1633, 2.097152e+06
  %1637 = fmul fast float %1634, 2.097152e+06
  %1638 = fmul fast float %1635, 2.097152e+06
  %1639 = fadd fast float %1636, %1507
  %1640 = fadd fast float %1639, %1630
  %1641 = fadd fast float %1637, %1508
  %1642 = fadd fast float %1641, %1631
  %1643 = fadd fast float %1638, %1509
  %1644 = fadd fast float %1643, %1632
  %1645 = fmul fast float %1640, %1590
  %1646 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1598, float %1645)  ; FMad(a,b,c)
  %1647 = call float @dx.op.tertiary.f32(i32 46, float %1644, float %1606, float %1646)  ; FMad(a,b,c)
  %1648 = fadd fast float %1647, %1614
  %1649 = fmul fast float %1640, %1591
  %1650 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1599, float %1649)  ; FMad(a,b,c)
  %1651 = call float @dx.op.tertiary.f32(i32 46, float %1644, float %1607, float %1650)  ; FMad(a,b,c)
  %1652 = fadd fast float %1651, %1615
  %1653 = fmul fast float %1640, %1592
  %1654 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1600, float %1653)  ; FMad(a,b,c)
  %1655 = call float @dx.op.tertiary.f32(i32 46, float %1644, float %1608, float %1654)  ; FMad(a,b,c)
  %1656 = fadd fast float %1655, %1616
  %1657 = fmul fast float %1648, 1.280000e+02
  %1658 = fmul fast float %1652, 1.280000e+02
  %1659 = fptoui float %1657 to i32
  %1660 = fptoui float %1658 to i32
  %1661 = icmp ult i32 %1579, 8192
  br i1 %1661, label %1668, label %1662

; <label>:1662                                    ; preds = %1578
  %1663 = mul i32 %1579, 21845
  %1664 = shl i32 %1660, 7
  %1665 = add i32 %1663, -178946048
  %1666 = add i32 %1665, %1659
  %1667 = add i32 %1666, %1664
  br label %1668

; <label>:1668                                    ; preds = %1662, %1578
  %1669 = phi i32 [ %1667, %1662 ], [ %1579, %1578 ]
  %1670 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1671 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1670, i32 %1669, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1672 = extractvalue %dx.types.ResRet.i32 %1671, 0
  %1673 = lshr i32 %1672, 20
  %1674 = and i32 %1673, 63
  %1675 = and i32 %1672, 134217728
  %1676 = icmp eq i32 %1675, 0
  br i1 %1676, label %1779, label %1677

; <label>:1677                                    ; preds = %1668
  %1678 = icmp eq i32 %1674, 0
  %1679 = zext i1 %1678 to i32
  %1680 = add i32 %1674, %1579
  %1681 = fmul fast float %1648, 1.638400e+04
  %1682 = fmul fast float %1652, 1.638400e+04
  %1683 = fptoui float %1681 to i32
  %1684 = fptoui float %1682 to i32
  br i1 %1678, label %1756, label %1685

; <label>:1685                                    ; preds = %1677
  %1686 = add i32 %1580, 304
  %1687 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1686, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1688 = extractvalue %dx.types.ResRet.i32 %1687, 0
  %1689 = extractvalue %dx.types.ResRet.i32 %1687, 1
  %1690 = mul i32 %1680, 336
  %1691 = add i32 %1690, 112
  %1692 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1691, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1693 = extractvalue %dx.types.ResRet.i32 %1692, 2
  %1694 = bitcast i32 %1693 to float
  %1695 = add i32 %1690, 304
  %1696 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1695, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1697 = extractvalue %dx.types.ResRet.i32 %1696, 0
  %1698 = extractvalue %dx.types.ResRet.i32 %1696, 1
  %1699 = shl i32 %1688, 5
  %1700 = shl i32 %1689, 5
  %1701 = shl i32 %1697, 5
  %1702 = shl i32 %1698, 5
  %1703 = sub i32 %1659, %1699
  %1704 = sub i32 %1660, %1700
  %1705 = and i32 %1673, 31
  %1706 = shl i32 %1701, %1705
  %1707 = shl i32 %1702, %1705
  %1708 = add i32 %1703, %1706
  %1709 = add i32 %1704, %1707
  %1710 = lshr i32 %1708, %1705
  %1711 = lshr i32 %1709, %1705
  %1712 = shl i32 %1710, 7
  %1713 = shl i32 %1711, 7
  %1714 = or i32 %1712, 127
  %1715 = or i32 %1713, 127
  %1716 = sitofp i32 %1688 to float
  %1717 = sitofp i32 %1689 to float
  %1718 = sitofp i32 %1697 to float
  %1719 = sitofp i32 %1698 to float
  %1720 = shl i32 1, %1705
  %1721 = uitofp i32 %1720 to float
  %1722 = fdiv fast float 1.000000e+00, %1721
  %1723 = fmul fast float %1722, %1716
  %1724 = fmul fast float %1722, %1717
  %1725 = fsub fast float %1718, %1723
  %1726 = fsub fast float %1719, %1724
  %1727 = fmul fast float %1725, 2.500000e-01
  %1728 = fmul fast float %1726, 2.500000e-01
  %1729 = fmul fast float %1722, %1584
  %1730 = fsub fast float %1694, %1729
  %1731 = fmul fast float %1722, %1648
  %1732 = fmul fast float %1722, %1652
  %1733 = fadd fast float %1727, %1731
  %1734 = fadd fast float %1728, %1732
  %1735 = fmul fast float %1733, 1.638400e+04
  %1736 = fmul fast float %1734, 1.638400e+04
  %1737 = fptoui float %1735 to i32
  %1738 = fptoui float %1736 to i32
  %1739 = call i32 @dx.op.binary.i32(i32 39, i32 %1737, i32 %1712)  ; UMax(a,b)
  %1740 = call i32 @dx.op.binary.i32(i32 39, i32 %1738, i32 %1713)  ; UMax(a,b)
  %1741 = call i32 @dx.op.binary.i32(i32 40, i32 %1739, i32 %1714)  ; UMin(a,b)
  %1742 = call i32 @dx.op.binary.i32(i32 40, i32 %1740, i32 %1715)  ; UMin(a,b)
  %1743 = icmp ult i32 %1680, 8192
  br i1 %1743, label %1749, label %1744

; <label>:1744                                    ; preds = %1685
  %1745 = mul i32 %1680, 21845
  %1746 = add i32 %1745, -178946048
  %1747 = add i32 %1746, %1710
  %1748 = add i32 %1747, %1713
  br label %1749

; <label>:1749                                    ; preds = %1744, %1685
  %1750 = phi i32 [ %1748, %1744 ], [ %1680, %1685 ]
  %1751 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1670, i32 %1750, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1752 = extractvalue %dx.types.ResRet.i32 %1751, 0
  %1753 = and i32 %1752, 200278016
  %1754 = icmp eq i32 %1753, 134217728
  %1755 = zext i1 %1754 to i32
  br label %1756

; <label>:1756                                    ; preds = %1749, %1677
  %1757 = phi i32 [ %1741, %1749 ], [ %1683, %1677 ]
  %1758 = phi i32 [ %1742, %1749 ], [ %1684, %1677 ]
  %1759 = phi float [ %1722, %1749 ], [ 1.000000e+00, %1677 ]
  %1760 = phi float [ %1730, %1749 ], [ 0.000000e+00, %1677 ]
  %1761 = phi i32 [ %1755, %1749 ], [ %1679, %1677 ]
  %1762 = phi i32 [ %1752, %1749 ], [ %1672, %1677 ]
  %1763 = icmp eq i32 %1761, 0
  br i1 %1763, label %1779, label %1764

; <label>:1764                                    ; preds = %1756
  %1765 = shl i32 %1762, 7
  %1766 = and i32 %1765, 130944
  %1767 = lshr i32 %1762, 3
  %1768 = and i32 %1767, 130944
  %1769 = and i32 %1757, 127
  %1770 = and i32 %1758, 127
  %1771 = or i32 %1766, %1769
  %1772 = or i32 %1768, %1770
  %1773 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1774 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1773, i32 0, i32 %1771, i32 %1772, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1775 = extractvalue %dx.types.ResRet.i32 %1774, 0
  %1776 = bitcast i32 %1775 to float
  %1777 = fsub fast float %1776, %1760
  %1778 = fdiv fast float %1777, %1759
  br label %1779

; <label>:1779                                    ; preds = %1764, %1756, %1668
  %1780 = phi float [ %1778, %1764 ], [ 0.000000e+00, %1756 ], [ 0.000000e+00, %1668 ]
  %1781 = phi i1 [ true, %1764 ], [ false, %1756 ], [ false, %1668 ]
  %1782 = fcmp fast ogt float %1780, %1656
  %1783 = and i1 %1781, %1782
  %1784 = select i1 %1783, float 0.000000e+00, float 1.000000e+00
  br label %1957

; <label>:1785                                    ; preds = %1506
  %1786 = extractvalue %dx.types.ResRet.i32 %1519, 3
  %1787 = extractvalue %dx.types.ResRet.i32 %1519, 2
  %1788 = extractvalue %dx.types.ResRet.i32 %1519, 1
  %1789 = extractvalue %dx.types.ResRet.i32 %1519, 0
  %1790 = extractvalue %dx.types.ResRet.i32 %1517, 3
  %1791 = extractvalue %dx.types.ResRet.i32 %1517, 2
  %1792 = extractvalue %dx.types.ResRet.i32 %1517, 1
  %1793 = extractvalue %dx.types.ResRet.i32 %1517, 0
  %1794 = extractvalue %dx.types.ResRet.i32 %1515, 3
  %1795 = extractvalue %dx.types.ResRet.i32 %1515, 2
  %1796 = extractvalue %dx.types.ResRet.i32 %1515, 1
  %1797 = extractvalue %dx.types.ResRet.i32 %1515, 0
  %1798 = extractvalue %dx.types.ResRet.i32 %1513, 3
  %1799 = extractvalue %dx.types.ResRet.i32 %1513, 2
  %1800 = extractvalue %dx.types.ResRet.i32 %1513, 1
  %1801 = extractvalue %dx.types.ResRet.i32 %1513, 0
  %1802 = extractvalue %dx.types.ResRet.i32 %1532, 2
  %1803 = bitcast i32 %1802 to float
  %1804 = extractvalue %dx.types.ResRet.i32 %1532, 1
  %1805 = bitcast i32 %1804 to float
  %1806 = extractvalue %dx.types.ResRet.i32 %1532, 0
  %1807 = bitcast i32 %1806 to float
  %1808 = fadd fast float %1542, %1807
  %1809 = fadd fast float %1543, %1805
  %1810 = fadd fast float %1544, %1803
  %1811 = icmp eq i32 %1530, 2
  br i1 %1811, label %1858, label %1812

; <label>:1812                                    ; preds = %1785
  %1813 = call float @dx.op.unary.f32(i32 6, float %1808)  ; FAbs(value)
  %1814 = call float @dx.op.unary.f32(i32 6, float %1809)  ; FAbs(value)
  %1815 = fcmp fast ult float %1813, %1814
  %1816 = call float @dx.op.unary.f32(i32 6, float %1810)  ; FAbs(value)
  %1817 = fcmp fast ult float %1813, %1816
  %1818 = or i1 %1815, %1817
  br i1 %1818, label %1822, label %1819

; <label>:1819                                    ; preds = %1812
  %1820 = fcmp ule float %1808, 0.000000e+00
  %1821 = zext i1 %1820 to i32
  br label %1830

; <label>:1822                                    ; preds = %1812
  %1823 = fcmp fast ogt float %1814, %1816
  br i1 %1823, label %1824, label %1827

; <label>:1824                                    ; preds = %1822
  %1825 = fcmp fast ogt float %1809, 0.000000e+00
  %1826 = select i1 %1825, i32 2, i32 3
  br label %1830

; <label>:1827                                    ; preds = %1822
  %1828 = fcmp fast ogt float %1810, 0.000000e+00
  %1829 = select i1 %1828, i32 4, i32 5
  br label %1830

; <label>:1830                                    ; preds = %1827, %1824, %1819
  %1831 = phi i32 [ %1821, %1819 ], [ %1826, %1824 ], [ %1829, %1827 ]
  %1832 = add i32 %1831, %1504
  %1833 = mul i32 %1832, 336
  %1834 = add i32 %1833, 128
  %1835 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1834, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1836 = extractvalue %dx.types.ResRet.i32 %1835, 0
  %1837 = extractvalue %dx.types.ResRet.i32 %1835, 1
  %1838 = extractvalue %dx.types.ResRet.i32 %1835, 2
  %1839 = extractvalue %dx.types.ResRet.i32 %1835, 3
  %1840 = add i32 %1833, 144
  %1841 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1840, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1842 = extractvalue %dx.types.ResRet.i32 %1841, 0
  %1843 = extractvalue %dx.types.ResRet.i32 %1841, 1
  %1844 = extractvalue %dx.types.ResRet.i32 %1841, 2
  %1845 = extractvalue %dx.types.ResRet.i32 %1841, 3
  %1846 = add i32 %1833, 160
  %1847 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1846, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1848 = extractvalue %dx.types.ResRet.i32 %1847, 0
  %1849 = extractvalue %dx.types.ResRet.i32 %1847, 1
  %1850 = extractvalue %dx.types.ResRet.i32 %1847, 2
  %1851 = extractvalue %dx.types.ResRet.i32 %1847, 3
  %1852 = add i32 %1833, 176
  %1853 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1511, i32 %1852, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1854 = extractvalue %dx.types.ResRet.i32 %1853, 0
  %1855 = extractvalue %dx.types.ResRet.i32 %1853, 1
  %1856 = extractvalue %dx.types.ResRet.i32 %1853, 2
  %1857 = extractvalue %dx.types.ResRet.i32 %1853, 3
  br label %1858

; <label>:1858                                    ; preds = %1830, %1785
  %1859 = phi i32 [ %1836, %1830 ], [ %1801, %1785 ]
  %1860 = phi i32 [ %1837, %1830 ], [ %1800, %1785 ]
  %1861 = phi i32 [ %1838, %1830 ], [ %1799, %1785 ]
  %1862 = phi i32 [ %1839, %1830 ], [ %1798, %1785 ]
  %1863 = phi i32 [ %1842, %1830 ], [ %1797, %1785 ]
  %1864 = phi i32 [ %1843, %1830 ], [ %1796, %1785 ]
  %1865 = phi i32 [ %1844, %1830 ], [ %1795, %1785 ]
  %1866 = phi i32 [ %1845, %1830 ], [ %1794, %1785 ]
  %1867 = phi i32 [ %1848, %1830 ], [ %1793, %1785 ]
  %1868 = phi i32 [ %1849, %1830 ], [ %1792, %1785 ]
  %1869 = phi i32 [ %1850, %1830 ], [ %1791, %1785 ]
  %1870 = phi i32 [ %1851, %1830 ], [ %1790, %1785 ]
  %1871 = phi i32 [ %1854, %1830 ], [ %1789, %1785 ]
  %1872 = phi i32 [ %1855, %1830 ], [ %1788, %1785 ]
  %1873 = phi i32 [ %1856, %1830 ], [ %1787, %1785 ]
  %1874 = phi i32 [ %1857, %1830 ], [ %1786, %1785 ]
  %1875 = phi i32 [ %1832, %1830 ], [ %1504, %1785 ]
  %1876 = bitcast i32 %1874 to float
  %1877 = bitcast i32 %1873 to float
  %1878 = bitcast i32 %1872 to float
  %1879 = bitcast i32 %1871 to float
  %1880 = bitcast i32 %1870 to float
  %1881 = bitcast i32 %1869 to float
  %1882 = bitcast i32 %1868 to float
  %1883 = bitcast i32 %1867 to float
  %1884 = bitcast i32 %1866 to float
  %1885 = bitcast i32 %1865 to float
  %1886 = bitcast i32 %1864 to float
  %1887 = bitcast i32 %1863 to float
  %1888 = bitcast i32 %1862 to float
  %1889 = bitcast i32 %1861 to float
  %1890 = bitcast i32 %1860 to float
  %1891 = bitcast i32 %1859 to float
  %1892 = fmul fast float %1891, %1808
  %1893 = call float @dx.op.tertiary.f32(i32 46, float %1809, float %1887, float %1892)  ; FMad(a,b,c)
  %1894 = call float @dx.op.tertiary.f32(i32 46, float %1810, float %1883, float %1893)  ; FMad(a,b,c)
  %1895 = fadd fast float %1894, %1879
  %1896 = fmul fast float %1890, %1808
  %1897 = call float @dx.op.tertiary.f32(i32 46, float %1809, float %1886, float %1896)  ; FMad(a,b,c)
  %1898 = call float @dx.op.tertiary.f32(i32 46, float %1810, float %1882, float %1897)  ; FMad(a,b,c)
  %1899 = fadd fast float %1898, %1878
  %1900 = fmul fast float %1889, %1808
  %1901 = call float @dx.op.tertiary.f32(i32 46, float %1809, float %1885, float %1900)  ; FMad(a,b,c)
  %1902 = call float @dx.op.tertiary.f32(i32 46, float %1810, float %1881, float %1901)  ; FMad(a,b,c)
  %1903 = fadd fast float %1902, %1877
  %1904 = fmul fast float %1888, %1808
  %1905 = call float @dx.op.tertiary.f32(i32 46, float %1809, float %1884, float %1904)  ; FMad(a,b,c)
  %1906 = call float @dx.op.tertiary.f32(i32 46, float %1810, float %1880, float %1905)  ; FMad(a,b,c)
  %1907 = fadd fast float %1906, %1876
  %1908 = fdiv fast float %1895, %1907
  %1909 = fdiv fast float %1899, %1907
  %1910 = fdiv fast float %1903, %1907
  %1911 = icmp ult i32 %1875, 8192
  br i1 %1911, label %1922, label %1912

; <label>:1912                                    ; preds = %1858
  %1913 = fmul fast float %1909, 1.280000e+02
  %1914 = fptoui float %1913 to i32
  %1915 = fmul fast float %1908, 1.280000e+02
  %1916 = fptoui float %1915 to i32
  %1917 = mul i32 %1875, 21845
  %1918 = shl i32 %1914, 7
  %1919 = add i32 %1917, -178946048
  %1920 = add i32 %1919, %1916
  %1921 = add i32 %1920, %1918
  br label %1922

; <label>:1922                                    ; preds = %1912, %1858
  %1923 = phi i32 [ %1921, %1912 ], [ %1875, %1858 ]
  %1924 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1925 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1924, i32 %1923, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1926 = extractvalue %dx.types.ResRet.i32 %1925, 0
  %1927 = lshr i32 %1926, 20
  %1928 = and i32 %1926, 134217728
  %1929 = icmp eq i32 %1928, 0
  %1930 = and i32 %1927, 31
  %1931 = lshr i32 16384, %1930
  %1932 = uitofp i32 %1931 to float
  %1933 = select i1 %1911, float 1.280000e+02, float %1932
  br i1 %1929, label %1951, label %1934

; <label>:1934                                    ; preds = %1922
  %1935 = lshr i32 %1926, 3
  %1936 = and i32 %1935, 130944
  %1937 = fmul fast float %1933, %1909
  %1938 = fptoui float %1937 to i32
  %1939 = and i32 %1938, 127
  %1940 = or i32 %1939, %1936
  %1941 = shl i32 %1926, 7
  %1942 = and i32 %1941, 130944
  %1943 = fmul fast float %1933, %1908
  %1944 = fptoui float %1943 to i32
  %1945 = and i32 %1944, 127
  %1946 = or i32 %1945, %1942
  %1947 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1948 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1947, i32 0, i32 %1946, i32 %1940, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1949 = extractvalue %dx.types.ResRet.i32 %1948, 0
  %1950 = bitcast i32 %1949 to float
  br label %1951

; <label>:1951                                    ; preds = %1934, %1922
  %1952 = phi float [ %1950, %1934 ], [ 0.000000e+00, %1922 ]
  %1953 = phi i1 [ true, %1934 ], [ false, %1922 ]
  %1954 = fcmp fast ogt float %1952, %1910
  %1955 = and i1 %1953, %1954
  %1956 = select i1 %1955, float 0.000000e+00, float 1.000000e+00
  br label %1957

; <label>:1957                                    ; preds = %1951, %1779, %1545
  %1958 = phi float [ 1.000000e+00, %1545 ], [ %1784, %1779 ], [ %1956, %1951 ]
  %1959 = fmul fast float %1958, %1502
  br label %1960

; <label>:1960                                    ; preds = %1957, %1501
  %1961 = phi float [ %1959, %1957 ], [ %1502, %1501 ]
  %1962 = fmul fast float %505, 0x3FB45F3060000000
  %1963 = fmul fast float %1962, %514
  %1964 = fmul fast float %1963, %560
  %1965 = fmul fast float %1964, %574
  %1966 = fmul fast float %1965, %746
  %1967 = fmul fast float %1966, %759
  %1968 = fmul fast float %1967, %1094
  %1969 = fmul fast float %1968, %1961
  %1970 = fmul fast float %1962, %515
  %1971 = fmul fast float %1970, %560
  %1972 = fmul fast float %1971, %575
  %1973 = fmul fast float %1972, %747
  %1974 = fmul fast float %1973, %760
  %1975 = fmul fast float %1974, %1094
  %1976 = fmul fast float %1975, %1961
  %1977 = fmul fast float %1962, %516
  %1978 = fmul fast float %1977, %560
  %1979 = fmul fast float %1978, %576
  %1980 = fmul fast float %1979, %748
  %1981 = fmul fast float %1980, %761
  %1982 = fmul fast float %1981, %1094
  %1983 = fmul fast float %1982, %1961
  %1984 = fadd fast float %1969, %740
  %1985 = fadd fast float %1976, %741
  %1986 = fadd fast float %1983, %742
  br label %1987

; <label>:1987                                    ; preds = %1960, %756, %750, %739
  %1988 = phi float [ %1984, %1960 ], [ %740, %756 ], [ %740, %750 ], [ %740, %739 ]
  %1989 = phi float [ %1985, %1960 ], [ %741, %756 ], [ %741, %750 ], [ %741, %739 ]
  %1990 = phi float [ %1986, %1960 ], [ %742, %756 ], [ %742, %750 ], [ %742, %739 ]
  %1991 = fmul fast float %560, 0xBFF7154760000000
  %1992 = fmul fast float %1991, %746
  %1993 = fmul fast float %1991, %747
  %1994 = fmul fast float %1991, %748
  %1995 = call float @dx.op.unary.f32(i32 21, float %1992)  ; Exp(value)
  %1996 = call float @dx.op.unary.f32(i32 21, float %1993)  ; Exp(value)
  %1997 = call float @dx.op.unary.f32(i32 21, float %1994)  ; Exp(value)
  %1998 = fmul fast float %1995, %574
  %1999 = fmul fast float %1996, %575
  %2000 = fmul fast float %1997, %576
  %2001 = fcmp fast olt float %1998, 0x3E7AD7F2A0000000
  %2002 = fcmp fast olt float %1999, 0x3E7AD7F2A0000000
  %2003 = fcmp fast olt float %2000, 0x3E7AD7F2A0000000
  %2004 = and i1 %2001, %2002
  %2005 = and i1 %2004, %2003
  br i1 %2005, label %2009, label %2006

; <label>:2006                                    ; preds = %1987
  %2007 = add nuw i32 %570, 1
  %2008 = icmp ult i32 %2007, %566
  br i1 %2008, label %569, label %2009

; <label>:2009                                    ; preds = %2006, %1987
  %2010 = phi float [ %1998, %2006 ], [ 0.000000e+00, %1987 ]
  %2011 = phi float [ %1999, %2006 ], [ 0.000000e+00, %1987 ]
  %2012 = phi float [ %2000, %2006 ], [ 0.000000e+00, %1987 ]
  br label %2013

; <label>:2013                                    ; preds = %2009, %457
  %2014 = phi float [ %415, %457 ], [ %1988, %2009 ]
  %2015 = phi float [ %416, %457 ], [ %1989, %2009 ]
  %2016 = phi float [ %417, %457 ], [ %1990, %2009 ]
  %2017 = phi float [ %418, %457 ], [ %2010, %2009 ]
  %2018 = phi float [ %419, %457 ], [ %2011, %2009 ]
  %2019 = phi float [ %420, %457 ], [ %2012, %2009 ]
  %2020 = fadd fast float %422, 0x3F1A36E2E0000000
  %2021 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2022 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2021, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %2023 = extractvalue %dx.types.ResRet.i32 %2022, 0
  %2024 = icmp eq i32 %2023, 0
  br i1 %2024, label %2125, label %2025

; <label>:2025                                    ; preds = %2013
  br label %2026

; <label>:2026                                    ; preds = %2026, %2025
  %2027 = phi i32 [ %2119, %2026 ], [ 0, %2025 ]
  %2028 = phi float [ %2118, %2026 ], [ %300, %2025 ]
  %2029 = phi float [ %2117, %2026 ], [ %300, %2025 ]
  %2030 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 524, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %2031 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2030, i32 %2027, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2032 = extractvalue %dx.types.ResRet.i32 %2031, 0
  %2033 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2030, i32 %2027, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2034 = extractvalue %dx.types.ResRet.i32 %2033, 0
  %2035 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2036 = extractvalue %dx.types.CBufRet.i32 %2035, 0
  %2037 = extractvalue %dx.types.CBufRet.i32 %2035, 1
  %2038 = and i32 %2034, 31
  %2039 = lshr i32 %2036, %2038
  %2040 = lshr i32 %2037, %2038
  %2041 = mul i32 %2039, %2040
  %2042 = urem i32 %2032, %2041
  %2043 = urem i32 %2042, %2039
  %2044 = udiv i32 %2042, %2039
  %2045 = udiv i32 %2032, %2041
  %2046 = extractvalue %dx.types.CBufRet.i32 %2035, 2
  %2047 = ashr i32 %2036, %2038
  %2048 = sitofp i32 %2047 to float
  %2049 = ashr i32 %2037, %2038
  %2050 = sitofp i32 %2049 to float
  %2051 = ashr i32 %2046, %2038
  %2052 = sitofp i32 %2051 to float
  %2053 = uitofp i32 %2043 to float
  %2054 = uitofp i32 %2044 to float
  %2055 = uitofp i32 %2045 to float
  %2056 = fdiv fast float %2053, %2048
  %2057 = fdiv fast float %2054, %2050
  %2058 = fdiv fast float %2055, %2052
  %2059 = add i32 %2043, 1
  %2060 = add i32 %2044, 1
  %2061 = add i32 %2045, 1
  %2062 = uitofp i32 %2059 to float
  %2063 = uitofp i32 %2060 to float
  %2064 = uitofp i32 %2061 to float
  %2065 = fdiv fast float %2062, %2048
  %2066 = fdiv fast float %2063, %2050
  %2067 = fdiv fast float %2064, %2052
  %2068 = fadd fast float %265, %265
  %2069 = fadd fast float %266, %266
  %2070 = fadd fast float %267, %267
  %2071 = fmul fast float %2056, %2068
  %2072 = fmul fast float %2057, %2069
  %2073 = fmul fast float %2058, %2070
  %2074 = fmul fast float %2065, %2068
  %2075 = fmul fast float %2066, %2069
  %2076 = fmul fast float %2067, %2070
  %2077 = fsub fast float 0xBF1A36E2E0000000, %230
  %2078 = fadd fast float %2077, %268
  %2079 = fadd fast float %2078, %2071
  %2080 = fsub fast float 0xBF1A36E2E0000000, %234
  %2081 = fadd fast float %2080, %269
  %2082 = fadd fast float %2081, %2072
  %2083 = fsub fast float 0xBF1A36E2E0000000, %238
  %2084 = fadd fast float %2083, %270
  %2085 = fadd fast float %2084, %2073
  %2086 = fmul fast float %274, %2079
  %2087 = fmul fast float %275, %2082
  %2088 = fmul fast float %276, %2085
  %2089 = fsub fast float 0x3F1A36E2E0000000, %230
  %2090 = fadd fast float %2089, %268
  %2091 = fadd fast float %2090, %2074
  %2092 = fsub fast float 0x3F1A36E2E0000000, %234
  %2093 = fadd fast float %2092, %269
  %2094 = fadd fast float %2093, %2075
  %2095 = fsub fast float 0x3F1A36E2E0000000, %238
  %2096 = fadd fast float %2095, %270
  %2097 = fadd fast float %2096, %2076
  %2098 = fmul fast float %2091, %274
  %2099 = fmul fast float %2094, %275
  %2100 = fmul fast float %2097, %276
  %2101 = call float @dx.op.binary.f32(i32 36, float %2086, float %2098)  ; FMin(a,b)
  %2102 = call float @dx.op.binary.f32(i32 36, float %2087, float %2099)  ; FMin(a,b)
  %2103 = call float @dx.op.binary.f32(i32 36, float %2088, float %2100)  ; FMin(a,b)
  %2104 = call float @dx.op.binary.f32(i32 35, float %2086, float %2098)  ; FMax(a,b)
  %2105 = call float @dx.op.binary.f32(i32 35, float %2087, float %2099)  ; FMax(a,b)
  %2106 = call float @dx.op.binary.f32(i32 35, float %2088, float %2100)  ; FMax(a,b)
  %2107 = call float @dx.op.binary.f32(i32 35, float %2102, float %2103)  ; FMax(a,b)
  %2108 = call float @dx.op.binary.f32(i32 35, float %2101, float %2107)  ; FMax(a,b)
  %2109 = call float @dx.op.binary.f32(i32 36, float %2105, float %2106)  ; FMin(a,b)
  %2110 = call float @dx.op.binary.f32(i32 36, float %2104, float %2109)  ; FMin(a,b)
  %2111 = call float @dx.op.binary.f32(i32 35, float %2108, float %2020)  ; FMax(a,b)
  %2112 = call float @dx.op.binary.f32(i32 36, float %2110, float %300)  ; FMin(a,b)
  %2113 = fsub fast float %2112, %2111
  %2114 = fcmp fast ogt float %2113, 0.000000e+00
  %2115 = fcmp fast olt float %2111, %2029
  %2116 = and i1 %2115, %2114
  %2117 = select i1 %2116, float %2111, float %2029
  %2118 = select i1 %2116, float %2112, float %2028
  %2119 = add i32 %2027, 1
  %2120 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2121 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2120, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %2122 = extractvalue %dx.types.ResRet.i32 %2121, 0
  %2123 = icmp ult i32 %2119, %2122
  br i1 %2123, label %2026, label %2124

; <label>:2124                                    ; preds = %2026
  br label %2125

; <label>:2125                                    ; preds = %2124, %2013
  %2126 = phi float [ %300, %2013 ], [ %2118, %2124 ]
  %2127 = phi float [ %300, %2013 ], [ %2117, %2124 ]
  %2128 = fsub fast float %2126, %2127
  %2129 = fcmp fast ogt float %2128, 0.000000e+00
  br i1 %2129, label %414, label %2130

; <label>:2130                                    ; preds = %2125
  br label %2131

; <label>:2131                                    ; preds = %2130, %408
  %2132 = phi float [ 0.000000e+00, %408 ], [ %2014, %2130 ]
  %2133 = phi float [ 0.000000e+00, %408 ], [ %2015, %2130 ]
  %2134 = phi float [ 0.000000e+00, %408 ], [ %2016, %2130 ]
  %2135 = phi float [ %62, %408 ], [ %2017, %2130 ]
  %2136 = phi float [ %62, %408 ], [ %2018, %2130 ]
  %2137 = phi float [ %62, %408 ], [ %2019, %2130 ]
  %2138 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2139 = extractvalue %dx.types.CBufRet.i32 %2138, 0
  %2140 = icmp ne i32 %2139, 0
  %2141 = fsub fast float 1.000000e+00, %2135
  %2142 = fsub fast float 1.000000e+00, %2136
  %2143 = fsub fast float 1.000000e+00, %2137
  %2144 = select i1 %2140, float %2141, float 0.000000e+00
  %2145 = select i1 %2140, float %2142, float 0.000000e+00
  %2146 = select i1 %2140, float %2143, float 0.000000e+00
  %2147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %2148 = extractvalue %dx.types.CBufRet.f32 %2147, 2
  %2149 = fmul fast float %2148, %2132
  %2150 = fmul fast float %2148, %2133
  %2151 = fmul fast float %2148, %2134
  %2152 = fptoui float %73 to i32
  %2153 = fptoui float %74 to i32
  %2154 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %2155 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2154, i32 undef, i32 %2152, i32 %2153, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2156 = extractvalue %dx.types.ResRet.f32 %2155, 0
  %2157 = extractvalue %dx.types.ResRet.f32 %2155, 1
  %2158 = extractvalue %dx.types.ResRet.f32 %2155, 2
  %2159 = fadd fast float %2156, %2149
  %2160 = fadd fast float %2157, %2150
  %2161 = fadd fast float %2158, %2151
  %2162 = extractvalue %dx.types.ResRet.f32 %2155, 3
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2154, i32 %2152, i32 %2153, i32 undef, float %2159, float %2160, float %2161, float %2162, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2163 = call float @dx.op.dot3.f32(i32 55, float %2144, float %2145, float %2146, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2164 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %2165 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2164, i32 undef, i32 %2152, i32 %2153, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2166 = extractvalue %dx.types.ResRet.f32 %2165, 0
  %2167 = extractvalue %dx.types.ResRet.f32 %2165, 1
  %2168 = extractvalue %dx.types.ResRet.f32 %2165, 2
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2164, i32 %2152, i32 %2153, i32 undef, float %2166, float %2167, float %2168, float %2163, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2169

; <label>:2169                                    ; preds = %2131, %126, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!43}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !27, !29, !36}
!5 = !{!6, !7, !9, !11, !13, !14, !15, !16, !18, !19, !20, !21, !22, !23, !24, !25}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !8}
!8 = !{i32 1, i32 4}
!9 = !{i32 2, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 7, i32 0, !10}
!10 = !{i32 0, i32 5}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !12}
!12 = !{i32 0, i32 9}
!13 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !12}
!14 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !12}
!15 = !{i32 6, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 10, i32 0, !10}
!16 = !{i32 7, %"class.StructuredBuffer<FVoxelDataPacked>"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 8}
!18 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !12}
!19 = !{i32 9, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 4, i32 0, !12}
!20 = !{i32 10, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 4, i32 0, !12}
!21 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !12}
!22 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !12}
!23 = !{i32 13, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 5, i32 0, !12}
!24 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !12}
!25 = !{i32 15, %"class.StructuredBuffer<FRayMarchingTile>"* undef, !"", i32 0, i32 15, i32 1, i32 12, i32 0, !26}
!26 = !{i32 1, i32 32}
!27 = !{!28}
!28 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !12}
!29 = !{!30, !31, !32, !33, !34, !35}
!30 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 992, null}
!31 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!32 = !{i32 2, %hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer* undef, !"", i32 0, i32 2, i32 1, i32 268, null}
!33 = !{i32 3, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 3, i32 1, i32 160, null}
!34 = !{i32 4, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 4, i32 1, i32 716, null}
!35 = !{i32 5, %UniformBufferConstants_LumenGIVolumeStruct* undef, !"", i32 0, i32 5, i32 1, i32 572, null}
!36 = !{!37, !38, !39, !40, !41, !42}
!37 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!38 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!39 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!40 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!41 = !{i32 4, %struct.SamplerComparisonState* undef, !"", i32 0, i32 4, i32 1, i32 1, null}
!42 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!43 = !{void ()* @RenderSingleScatteringWithPreshadingCS, !"RenderSingleScatteringWithPreshadingCS", null, !4, !44}
!44 = !{i32 0, i64 8208, i32 4, !45, i32 5, !46}
!45 = !{i32 64, i32 1, i32 1}
!46 = !{i32 0}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 2}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 1}
!51 = distinct !{!51, !"dx.controlflow.hints", i32 1}
