#line 1 "MoveShaderParametersToRootConstantBuffer"
cbuffer _RootShaderParameters
{
int bApplyEmissionAndTransmittance : packoffset(c6);
int bApplyDirectLighting : packoffset(c6.y);
int LightType : packoffset(c6.z);
float VolumetricScatteringIntensity : packoffset(c8);
float4x4 TranslatedWorldToShadowMatrix : packoffset(c10);
float4 ShadowmapMinMax : packoffset(c14);
float4 DepthBiasParameters : packoffset(c15);
float4 ShadowInjectParams : packoffset(c16);
float4x4 ShadowViewProjectionMatrices[6] : packoffset(c22);
float InvShadowmapResolution : packoffset(c46);
uint bStaticallyShadowed : packoffset(c47);
float4x4 TranslatedWorldToStaticShadowMatrix : packoffset(c49);
float4 StaticShadowBufferSize : packoffset(c53);
uint VirtualShadowMapId : packoffset(c55);
int MipLevel : packoffset(c57);
uint3 LightingCacheResolution : packoffset(c59);
float LightingCacheVoxelBias : packoffset(c59.w);
float MaxTraceDistance : packoffset(c61);
float StepSize : packoffset(c61.y);
int MaxStepCount : packoffset(c61.z);
int bJitter : packoffset(c61.w);
}

#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 6

#line 2 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MINOR 6

#line 3 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1

#line 4 "DumpShaderDefinesAsCommentedCode"
// #define AMPLIFICATIONSHADER 0

#line 5 "DumpShaderDefinesAsCommentedCode"
// #define CLEAR_COAT_BOTTOM_NORMAL 0

#line 6 "DumpShaderDefinesAsCommentedCode"
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1

#line 7 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DEFINE #define

#line 8 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DXC 1

#line 9 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_SUPPORTS_HLSL2021 1

#line 10 "DumpShaderDefinesAsCommentedCode"
// #define COMPUTESHADER 1

#line 11 "DumpShaderDefinesAsCommentedCode"
// #define DIM_APPLY_SHADOW_TRANSMITTANCE 0

#line 12 "DumpShaderDefinesAsCommentedCode"
// #define DIM_DEBUG 0

#line 13 "DumpShaderDefinesAsCommentedCode"
// #define DIM_SPARSE_VOXEL_TRACING 1

#line 14 "DumpShaderDefinesAsCommentedCode"
// #define DIM_USE_INSCATTERING_VOLUME 0

#line 15 "DumpShaderDefinesAsCommentedCode"
// #define DIM_USE_LUMEN_GI 1

#line 16 "DumpShaderDefinesAsCommentedCode"
// #define DIM_USE_TRANSMITTANCE_VOLUME 0

#line 17 "DumpShaderDefinesAsCommentedCode"
// #define DIM_VOXEL_CULLING 0

#line 18 "DumpShaderDefinesAsCommentedCode"
// #define DO_CHECK 1

#line 19 "DumpShaderDefinesAsCommentedCode"
// #define DO_GUARD_SLOW 0

#line 20 "DumpShaderDefinesAsCommentedCode"
// #define DXT5_NORMALMAPS 0

#line 21 "DumpShaderDefinesAsCommentedCode"
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0

#line 22 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_NON_NANITE_VSM 1

#line 23 "DumpShaderDefinesAsCommentedCode"
// #define FORWARD_SHADING 0

#line 24 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0

#line 25 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_VELOCITY 0

#line 26 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_REFACTOR 1

#line 27 "DumpShaderDefinesAsCommentedCode"
// #define GEOMETRYSHADER 0

#line 28 "DumpShaderDefinesAsCommentedCode"
// #define GET_PRIMITIVE_DATA_OVERRIDE 1

#line 29 "DumpShaderDefinesAsCommentedCode"
// #define HAS_INVERTED_Z_BUFFER 1

#line 30 "DumpShaderDefinesAsCommentedCode"
// #define INDEX_NONE -1

#line 31 "DumpShaderDefinesAsCommentedCode"
// #define INSTANCED_STEREO 0

#line 32 "DumpShaderDefinesAsCommentedCode"
// #define IRIS_NORMAL 0

#line 33 "DumpShaderDefinesAsCommentedCode"
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0

#line 34 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ROUGHDIFFUSE 0

#line 35 "DumpShaderDefinesAsCommentedCode"
// #define MAX_PAGE_AREA_DIAGNOSTIC_SLOTS 32

#line 36 "DumpShaderDefinesAsCommentedCode"
// #define MESHSHADER 0

#line 37 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_MULTI_VIEW 0

#line 38 "DumpShaderDefinesAsCommentedCode"
// #define MULTI_VIEW 0

#line 39 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADER 0

#line 40 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1

#line 41 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BINDLESS 0

#line 42 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1

#line 43 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1

#line 44 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1

#line 45 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 1

#line 46 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 1

#line 47 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0

#line 48 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0

#line 49 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_UB_STRUCT 1

#line 50 "DumpShaderDefinesAsCommentedCode"
// #define POST_PROCESS_ALPHA 0

#line 51 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0

#line 52 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1

#line 53 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_OIT 0

#line 54 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0

#line 55 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1

#line 56 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1

#line 57 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORTS_LUMEN 1

#line 58 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0

#line 59 "DumpShaderDefinesAsCommentedCode"
// #define RAYCALLABLESHADER 0

#line 60 "DumpShaderDefinesAsCommentedCode"
// #define RAYGENSHADER 0

#line 61 "DumpShaderDefinesAsCommentedCode"
// #define RAYHITGROUPSHADER 0

#line 62 "DumpShaderDefinesAsCommentedCode"
// #define RAYMISSSHADER 0

#line 63 "DumpShaderDefinesAsCommentedCode"
// #define SELECTIVE_BASEPASS_OUTPUTS 0

#line 64 "DumpShaderDefinesAsCommentedCode"
// #define SHADING_PATH_DEFERRED 1

#line 65 "DumpShaderDefinesAsCommentedCode"
// #define SM6_PROFILE 1

#line 66 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ADVANCED_DEBUG_ENABLED 0

#line 67 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ENABLED 0

#line 68 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0

#line 69 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0

#line 70 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0

#line 71 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0

#line 72 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_VSM_FOWARD_QUALITY 0

#line 73 "DumpShaderDefinesAsCommentedCode"
// #define THREADGROUP_SIZE_1D 64

#line 74 "DumpShaderDefinesAsCommentedCode"
// #define THREADGROUP_SIZE_2D 8

#line 75 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f

#line 76 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f

#line 77 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f

#line 78 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f

#line 79 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f

#line 80 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f

#line 81 "DumpShaderDefinesAsCommentedCode"
// #define USE_DBUFFER 1

#line 82 "DumpShaderDefinesAsCommentedCode"
// #define VELOCITY_ENCODE_DEPTH 1

#line 83 "DumpShaderDefinesAsCommentedCode"
// #define VERTEXSHADER 0

#line 84 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_SHADOW_MAP 1

#line 85 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0

#line 86 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LEVEL0_DIM_PAGES_XY 128

#line 87 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LOG2_LEVEL0_DIM_PAGES_XY 7

#line 88 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LOG2_PAGE_SIZE 7

#line 89 "DumpShaderDefinesAsCommentedCode"
// #define VSM_MAX_MIP_LEVELS 8

#line 90 "DumpShaderDefinesAsCommentedCode"
// #define VSM_NUM_STATS 32

#line 91 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_SIZE 128

#line 92 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_SIZE_MASK 127

#line 93 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_TABLE_SIZE 21845

#line 94 "DumpShaderDefinesAsCommentedCode"
// #define VSM_RASTER_WINDOW_PAGES 4

#line 95 "DumpShaderDefinesAsCommentedCode"
// #define VSM_VIRTUAL_MAX_RESOLUTION_XY 16384

#line 96 "DumpShaderDefinesAsCommentedCode"
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line 5 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUtils.ush"
struct FVoxelData
{
	uint3 VoxelIndex;
	uint MipLevel;
};

#line 11 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUtils.ush"
struct FVoxelDataPacked
{
	uint LinearIndex;
	uint MipLevel;
};

#line 31 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUtils.ush"
FVoxelData DecodeVoxelData(FVoxelDataPacked VoxelDataPacked, uint3 VolumeResolutionAtMip0)
{
	FVoxelData VoxelData;
	VoxelData.MipLevel = VoxelDataPacked.MipLevel;

	
	uint3 VolumeResolution = VolumeResolutionAtMip0 >> VoxelData.MipLevel;
	VoxelData.VoxelIndex.x = (VoxelDataPacked.LinearIndex % (VolumeResolution.x * VolumeResolution.y)) % VolumeResolution.x;
	VoxelData.VoxelIndex.y = (VoxelDataPacked.LinearIndex % (VolumeResolution.x * VolumeResolution.y)) / VolumeResolution.x;
	VoxelData.VoxelIndex.z = VoxelDataPacked.LinearIndex / (VolumeResolution.x * VolumeResolution.y);

	return VoxelData;
}

#line 66 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUtils.ush"
struct FBox
{
	float3 Min;
	float3 Max;
};

#line 72 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUtils.ush"
FBox GetVoxelBoundingBox(FVoxelData VoxelData, int3 VolumeResolution, float3 ObjectBoundsMin, float3 ObjectBoundsMax)
{
	float3 MipResolution = float3(
		VolumeResolution.x >> VoxelData.MipLevel,
		VolumeResolution.y >> VoxelData.MipLevel,
		VolumeResolution.z >> VoxelData.MipLevel
	);

	float3 UVW0 = VoxelData.VoxelIndex / MipResolution;
	float3 UVW1 = (VoxelData.VoxelIndex + 1) / MipResolution;
	float3 ObjectBoundsExtent = ObjectBoundsMax - ObjectBoundsMin;

	FBox Box;
	const float Epsilon = 0.0001;
	Box.Min = ObjectBoundsMin + ObjectBoundsExtent * UVW0 - Epsilon;
	Box.Max = ObjectBoundsMin + ObjectBoundsExtent * UVW1 + Epsilon;
	return Box;
}

#line 973 "/Engine/Public/Platform.ush"
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 991 "/Engine/Public/Platform.ush"
bool  and_internal(bool  a, bool  b) { return bool(a && b); }

#line 992 "/Engine/Public/Platform.ush"
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }

#line 993 "/Engine/Public/Platform.ush"
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }

#line 994 "/Engine/Public/Platform.ush"
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

#line 1119 "/Engine/Public/Platform.ush"
uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}

#line 116 "/Engine/Private/Common.ush"
const static float PI = 3.1415926535897932f;

#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

#line 11 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

#line 17 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

#line 23 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

#line 58 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};

#line 65 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};

#line 75 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }

#line 76 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }

#line 77 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }

#line 78 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }

#line 79 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 80 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 93 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

#line 103 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 111 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 119 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 127 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 135 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 140 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 161 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

#line 177 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

#line 227 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }

#line 228 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 229 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 230 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 232 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

#line 239 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

#line 256 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(float Value) { return Value; }

#line 257 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(float2 Value) { return Value; }

#line 258 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(float3 Value) { return Value; }

#line 259 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(float4 Value) { return Value; }

#line 260 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(float4x4 Value) { return Value; }

#line 263 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }

#line 264 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }

#line 265 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }

#line 266 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }

#line 267 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }

#line 268 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

#line 270 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }

#line 271 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }

#line 272 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }

#line 273 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }

#line 274 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }

#line 277 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}

#line 284 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}

#line 290 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

#line 296 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

#line 312 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}

#line 318 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}

#line 324 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCNegate(FLWCScalar V) { return MakeLWCScalar(- (( V ).Tile), -V.Offset); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCNegate(FLWCVector2 V) { return MakeLWCVector2(- (( V ).Tile), -V.Offset); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCNegate(FLWCVector3 V) { return MakeLWCVector3(- (( V ).Tile), -V.Offset); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCNegate(FLWCVector4 V) { return MakeLWCVector4(- (( V ).Tile), -V.Offset); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 3 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer  UniformBufferConstants_View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_972;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_988;
	 float3  View_ViewForward;
	 float  PrePadding_View_1004;
	 float3  View_ViewUp;
	 float  PrePadding_View_1020;
	 float3  View_ViewRight;
	 float  PrePadding_View_1036;
	 float3  View_HMDViewNoRollUp;
	 float  PrePadding_View_1052;
	 float3  View_HMDViewNoRollRight;
	 float  PrePadding_View_1068;
	 float4  View_InvDeviceZToWorldZTransform;
	 float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1116;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1132;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1148;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1164;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1628;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1644;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1660;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1676;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_ProjectionDepthThicknessScale;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float4  View_DiffuseOverrideParameter;
	 float4  View_SpecularOverrideParameter;
	 float4  View_NormalOverrideParameter;
	 float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 float  View_OutOfBoundsMask;
	 float  PrePadding_View_2196;
	 float  PrePadding_View_2200;
	 float  PrePadding_View_2204;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_FrameCounter;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 float  View_CameraCut;
	 float  View_UnlitViewmodeMask;
	 float  PrePadding_View_2284;
	 float4  View_DirectionalLightColor;
	 float3  View_DirectionalLightDirection;
	 float  PrePadding_View_2316;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2476;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2492;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2508;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2700;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2856;
	 float  PrePadding_View_2860;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2888;
	 float  PrePadding_View_2892;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3096;
	 float  PrePadding_View_3100;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3516;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3532;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3596;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3612;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3628;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  View_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  View_VolumetricFogPrevUVMax;
	 float2  View_VolumetricFogScreenToResourceUV;
	 float2  View_VolumetricFogUVMax;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3684;
	 float  PrePadding_View_3688;
	 float  PrePadding_View_3692;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3708;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3764;
	 float  PrePadding_View_3768;
	 float  PrePadding_View_3772;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3832;
	 uint  PrePadding_View_3836;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3864;
	 float  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3900;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  View_SpecularProfileTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_View_4540;
	 float4  View_TanAndInvTanHalfFOV;
	 float4  View_PrevTanAndInvTanHalfFOV;
	 float4  View_GlintLUTParameters0;
	 float4  View_GlintLUTParameters1;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4612;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4652;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4660;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4668;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4676;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4684;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4692;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4724;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4732;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4740;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4748;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4756;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4804;
	 uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint  PrePadding_View_4828;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4836;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4844;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4900;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4908;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4916;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4924;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4932;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4940;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4948;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4956;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4996;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_5004;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_5012;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_5020;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_5028;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_5036;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5044;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5052;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5060;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5068;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5076;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5084;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5092;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5100;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5108;
	 uint BindlessResource_View_GGXLTCMatTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessSampler_View_GGXLTCMatSampler ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_GGXLTCAmpTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessSampler_View_GGXLTCAmpSampler ;
	 uint  PrePadding_View_5140;
	 uint BindlessResource_View_SheenLTCTexture ;
	 uint  PrePadding_View_5148;
	 uint BindlessSampler_View_SheenLTCSampler ;
	 uint  PrePadding_View_5156;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5196;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5204;
	 uint BindlessResource_View_GlintTexture ;
	 uint  PrePadding_View_5212;
	 uint BindlessSampler_View_GlintSampler ;
	 uint  PrePadding_View_5220;
	 uint BindlessResource_View_SimpleVolumeTexture ;
	 uint  PrePadding_View_5228;
	 uint BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint  PrePadding_View_5236;
	 uint BindlessResource_View_SimpleVolumeEnvTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint  PrePadding_View_5252;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5260;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5268;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5276;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessResource_View_SpecularProfileTexture ;
	 uint  PrePadding_View_5300;
	 uint BindlessSampler_View_SpecularProfileSampler ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5324;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5348;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5356;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5364;
	 uint  PrePadding_View_5368;
	 uint  PrePadding_View_5372;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5396;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5404;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5412;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5420;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5428;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5436;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5444;
	 uint  PrePadding_View_5448;
	 uint  PrePadding_View_5452;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5468;
	 float3  View_TLASViewTilePosition;
}

#line 480 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_MaterialTextureBilinearWrapedSampler;

#line 481 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_MaterialTextureBilinearClampedSampler;

#line 482 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint4>  View_VolumetricLightmapIndirectionTexture;

#line 483 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickAmbientVector;

#line 484 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients0;

#line 485 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients1;

#line 486 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients2;

#line 487 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients3;

#line 488 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients4;

#line 489 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_VolumetricLightmapBrickSHCoefficients5;

#line 490 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_SkyBentNormalBrickTexture;

#line 491 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_DirectionalLightShadowingBrickTexture;

#line 492 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapBrickAmbientVectorSampler;

#line 493 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler0;

#line 494 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler1;

#line 495 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler2;

#line 496 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler3;

#line 497 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler4;

#line 498 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_VolumetricLightmapTextureSampler5;

#line 499 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SkyBentNormalTextureSampler;

#line 500 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_DirectionalLightShadowingTextureSampler;

#line 501 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldPageAtlasTexture;

#line 502 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldCoverageAtlasTexture;

#line 503 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint>  View_GlobalDistanceFieldPageTableTexture;

#line 504 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldMipTexture;

#line 505 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlobalDistanceFieldPageAtlasTextureSampler;

#line 506 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlobalDistanceFieldCoverageAtlasTextureSampler;

#line 507 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlobalDistanceFieldMipTextureSampler;

#line 508 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_AtmosphereTransmittanceTexture;

#line 509 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_AtmosphereTransmittanceTextureSampler;

#line 510 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_AtmosphereIrradianceTexture;

#line 511 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_AtmosphereIrradianceTextureSampler;

#line 512 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_AtmosphereInscatterTexture;

#line 513 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_AtmosphereInscatterTextureSampler;

#line 514 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PerlinNoiseGradientTexture;

#line 515 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoiseGradientTextureSampler;

#line 516 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_PerlinNoise3DTexture;

#line 517 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoise3DTextureSampler;

#line 518 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<uint>  View_SobolSamplingTexture;

#line 519 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedPointWrappedSampler;

#line 520 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedPointClampedSampler;

#line 521 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearWrappedSampler;

#line 522 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearClampedSampler;

#line 523 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearAnisoClampedSampler;

#line 524 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearWrappedSampler;

#line 525 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearClampedSampler;

#line 526 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PreIntegratedBRDF;

#line 527 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PreIntegratedBRDFSampler;

#line 528 "/Engine/Generated/UniformBuffers/View.ush"
StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap;

#line 529 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_TransmittanceLutTexture;

#line 530 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_TransmittanceLutTextureSampler;

#line 531 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SkyViewLutTexture;

#line 532 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SkyViewLutTextureSampler;

#line 533 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_DistantSkyLightLutTexture;

#line 534 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_DistantSkyLightLutTextureSampler;

#line 535 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_CameraAerialPerspectiveVolume;

#line 536 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_CameraAerialPerspectiveVolumeSampler;

#line 537 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_CameraAerialPerspectiveVolumeMieOnly;

#line 538 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_CameraAerialPerspectiveVolumeMieOnlySampler;

#line 539 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_CameraAerialPerspectiveVolumeRayOnly;

#line 540 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_CameraAerialPerspectiveVolumeRayOnlySampler;

#line 541 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_HairScatteringLUTTexture;

#line 542 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_HairScatteringLUTSampler;

#line 543 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCMatTexture;

#line 544 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCMatSampler;

#line 545 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCAmpTexture;

#line 546 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCAmpSampler;

#line 547 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SheenLTCTexture;

#line 548 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SheenLTCSampler;

#line 549 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyGGXSpecTexture;

#line 550 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float2>  View_ShadingEnergyGGXGlassTexture;

#line 551 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyClothSpecTexture;

#line 552 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float>  View_ShadingEnergyDiffuseTexture;

#line 553 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_ShadingEnergySampler;

#line 554 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray<float4>  View_GlintTexture;

#line 555 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GlintSampler;

#line 556 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float>  View_SimpleVolumeTexture;

#line 557 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SimpleVolumeTextureSampler;

#line 558 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float>  View_SimpleVolumeEnvTexture;

#line 559 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SimpleVolumeEnvTextureSampler;

#line 560 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SSProfilesTexture;

#line 561 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SSProfilesSampler;

#line 562 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SSProfilesTransmissionSampler;

#line 563 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray  View_SSProfilesPreIntegratedTexture;

#line 564 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SSProfilesPreIntegratedSampler;

#line 565 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray  View_SpecularProfileTexture;

#line 566 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SpecularProfileSampler;

#line 567 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float4>  View_WaterIndirection;

#line 568 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float4>  View_WaterData;

#line 569 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float4>  View_RectLightAtlasTexture;

#line 570 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_RectLightAtlasSampler;

#line 571 "/Engine/Generated/UniformBuffers/View.ush"
Texture2DArray<float>  View_IESAtlasTexture;

#line 572 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_IESAtlasSampler;

#line 573 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_LandscapeWeightmapSampler;

#line 574 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<uint>  View_LandscapeIndirection;

#line 575 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float>  View_LandscapePerComponentData;

#line 576 "/Engine/Generated/UniformBuffers/View.ush"
RWStructuredBuffer<uint>  View_VTFeedbackBuffer;

#line 577 "/Engine/Generated/UniformBuffers/View.ush"
Buffer<float>  View_PhysicsFieldClipmapBuffer;

#line 578 "/Engine/Generated/UniformBuffers/View.ush"
static const struct
{
	 float4x4  TranslatedWorldToClip;
	 float4x4  RelativeWorldToClip;
	 float4x4  ClipToRelativeWorld;
	 float4x4  TranslatedWorldToView;
	 float4x4  ViewToTranslatedWorld;
	 float4x4  TranslatedWorldToCameraView;
	 float4x4  CameraViewToTranslatedWorld;
	 float4x4  ViewToClip;
	 float4x4  ViewToClipNoAA;
	 float4x4  ClipToView;
	 float4x4  ClipToTranslatedWorld;
	 float4x4  SVPositionToTranslatedWorld;
	 float4x4  ScreenToRelativeWorld;
	 float4x4  ScreenToTranslatedWorld;
	 float4x4  MobileMultiviewShadowTransform;
	 float3  ViewTilePosition;
	 float3  MatrixTilePosition;
	 float3  ViewForward;
	 float3  ViewUp;
	 float3  ViewRight;
	 float3  HMDViewNoRollUp;
	 float3  HMDViewNoRollRight;
	 float4  InvDeviceZToWorldZTransform;
	 float4  ScreenPositionScaleBias;
	 float3  RelativeWorldCameraOrigin;
	 float3  TranslatedWorldCameraOrigin;
	 float3  RelativeWorldViewOrigin;
	 float3  RelativePreViewTranslation;
	 float4x4  PrevViewToClip;
	 float4x4  PrevClipToView;
	 float4x4  PrevTranslatedWorldToClip;
	 float4x4  PrevTranslatedWorldToView;
	 float4x4  PrevViewToTranslatedWorld;
	 float4x4  PrevTranslatedWorldToCameraView;
	 float4x4  PrevCameraViewToTranslatedWorld;
	 float3  PrevTranslatedWorldCameraOrigin;
	 float3  PrevRelativeWorldCameraOrigin;
	 float3  PrevRelativeWorldViewOrigin;
	 float3  RelativePrevPreViewTranslation;
	 float4x4  PrevClipToRelativeWorld;
	 float4x4  PrevScreenToTranslatedWorld;
	 float4x4  ClipToPrevClip;
	 float4x4  ClipToPrevClipWithAA;
	 float4  TemporalAAJitter;
	 float4  GlobalClippingPlane;
	 float2  FieldOfViewWideAngles;
	 float2  PrevFieldOfViewWideAngles;
	 float4  ViewRectMin;
	 float4  ViewSizeAndInvSize;
	 uint4  ViewRectMinAndSize;
	 float4  LightProbeSizeRatioAndInvSizeRatio;
	 float4  BufferSizeAndInvSize;
	 float4  BufferBilinearUVMinMax;
	 float4  ScreenToViewSpace;
	 float2  BufferToSceneTextureScale;
	 float2  ResolutionFractionAndInv;
	 int  NumSceneColorMSAASamples;
	 float  ProjectionDepthThicknessScale;
	 float  PreExposure;
	 float  OneOverPreExposure;
	 float4  DiffuseOverrideParameter;
	 float4  SpecularOverrideParameter;
	 float4  NormalOverrideParameter;
	 float2  RoughnessOverrideParameter;
	 float  PrevFrameGameTime;
	 float  PrevFrameRealTime;
	 float  OutOfBoundsMask;
	 float3  WorldCameraMovementSinceLastFrame;
	 float  CullingSign;
	 float  NearPlane;
	 float  GameTime;
	 float  RealTime;
	 float  DeltaTime;
	 float  MaterialTextureMipBias;
	 float  MaterialTextureDerivativeMultiply;
	 uint  Random;
	 uint  FrameNumber;
	 uint  FrameCounter;
	 uint  StateFrameIndexMod8;
	 uint  StateFrameIndex;
	 uint  DebugViewModeMask;
	 uint  WorldIsPaused;
	 float  CameraCut;
	 float  UnlitViewmodeMask;
	 float4  DirectionalLightColor;
	 float3  DirectionalLightDirection;
	 float4  TranslucencyLightingVolumeMin[2];
	 float4  TranslucencyLightingVolumeInvSize[2];
	 float4  TemporalAAParams;
	 float4  CircleDOFParams;
	 float  DepthOfFieldSensorWidth;
	 float  DepthOfFieldFocalDistance;
	 float  DepthOfFieldScale;
	 float  DepthOfFieldFocalLength;
	 float  DepthOfFieldFocalRegion;
	 float  DepthOfFieldNearTransitionRegion;
	 float  DepthOfFieldFarTransitionRegion;
	 float  MotionBlurNormalizedToPixel;
	 float  GeneralPurposeTweak;
	 float  GeneralPurposeTweak2;
	 float  DemosaicVposOffset;
	 float  DecalDepthBias;
	 float3  IndirectLightingColorScale;
	 float3  PrecomputedIndirectLightingColorScale;
	 float3  PrecomputedIndirectSpecularColorScale;
	 float4  AtmosphereLightDirection[2];
	 float4  AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  AtmosphereLightIlluminanceOuterSpace[2];
	 float4  AtmosphereLightDiscLuminance[2];
	 float4  AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  SkyViewLutSizeAndInvSize;
	 float3  SkyCameraTranslatedWorldOrigin;
	 float4  SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  SkyViewLutReferential;
	 float4  SkyAtmosphereSkyLuminanceFactor;
	 float  SkyAtmospherePresentInScene;
	 float  SkyAtmosphereHeightFogContribution;
	 float  SkyAtmosphereBottomRadiusKm;
	 float  SkyAtmosphereTopRadiusKm;
	 float4  SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float3  NormalCurvatureToRoughnessScaleBias;
	 float  RenderingReflectionCaptureMask;
	 float  RealTimeReflectionCapture;
	 float  RealTimeReflectionCapturePreExposure;
	 float4  AmbientCubemapTint;
	 float  AmbientCubemapIntensity;
	 float  SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  SkyLightAffectReflectionFlag;
	 float  SkyLightAffectGlobalIlluminationFlag;
	 float4  SkyLightColor;
	 float4  MobileSkyIrradianceEnvironmentMap[8];
	 float  MobilePreviewMode;
	 float  HMDEyePaddingOffset;
	 float  ReflectionCubemapMaxMip;
	 float  ShowDecalsMask;
	 uint  DistanceFieldAOSpecularOcclusionMode;
	 float  IndirectCapsuleSelfShadowingIntensity;
	 float3  ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  StereoPassIndex;
	 float4  GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  GlobalDistanceFieldMipFactor;
	 float  GlobalDistanceFieldMipTransition;
	 int  GlobalDistanceFieldClipmapSizeInPages;
	 float3  GlobalDistanceFieldInvPageAtlasSize;
	 float3  GlobalDistanceFieldInvCoverageAtlasSize;
	 float  GlobalVolumeDimension;
	 float  GlobalVolumeTexelSize;
	 float  MaxGlobalDFAOConeDistance;
	 uint  NumGlobalSDFClipmaps;
	 float  CoveredExpandSurfaceScale;
	 float  NotCoveredExpandSurfaceScale;
	 float  NotCoveredMinStepScale;
	 float  DitheredTransparencyStepThreshold;
	 float  DitheredTransparencyTraceThreshold;
	 int2  CursorPosition;
	 float  bCheckerboardSubsurfaceProfileRendering;
	 float3  VolumetricFogInvGridSize;
	 float3  VolumetricFogGridZParams;
	 float2  VolumetricFogSVPosToVolumeUV;
	 float2  VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  VolumetricFogPrevUVMax;
	 float2  VolumetricFogScreenToResourceUV;
	 float2  VolumetricFogUVMax;
	 float  VolumetricFogMaxDistance;
	 float3  VolumetricLightmapWorldToUVScale;
	 float3  VolumetricLightmapWorldToUVAdd;
	 float3  VolumetricLightmapIndirectionTextureSize;
	 float  VolumetricLightmapBrickSize;
	 float3  VolumetricLightmapBrickTexelSize;
	 float  IndirectLightingCacheShowFlag;
	 float  EyeToPixelSpreadAngle;
	 float4  XRPassthroughCameraUVs[2];
	 float  GlobalVirtualTextureMipBias;
	 uint  VirtualTextureFeedbackShift;
	 uint  VirtualTextureFeedbackMask;
	 uint  VirtualTextureFeedbackStride;
	 uint  VirtualTextureFeedbackJitterOffset;
	 uint  VirtualTextureFeedbackSampleOffset;
	 float4  RuntimeVirtualTextureMipLevel;
	 float2  RuntimeVirtualTexturePackHeight;
	 float4  RuntimeVirtualTextureDebugParams;
	 float  OverrideLandscapeLOD;
	 int  FarShadowStaticMeshLODBias;
	 float  MinRoughness;
	 float4  HairRenderInfo;
	 uint  EnableSkyLight;
	 uint  HairRenderInfoBits;
	 uint  HairComponents;
	 float  bSubsurfacePostprocessEnabled;
	 float4  SSProfilesTextureSizeAndInvSize;
	 float4  SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  SpecularProfileTextureSizeAndInvSize;
	 float3  PhysicsFieldClipmapCenter;
	 float  PhysicsFieldClipmapDistance;
	 int  PhysicsFieldClipmapResolution;
	 int  PhysicsFieldClipmapExponent;
	 int  PhysicsFieldClipmapCount;
	 int  PhysicsFieldTargetCount;
	 int4  PhysicsFieldTargets[32];
	 uint  GPUSceneViewId;
	 float  ViewResolutionFraction;
	 float  SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float4  TanAndInvTanHalfFOV;
	 float4  PrevTanAndInvTanHalfFOV;
	 float4  GlintLUTParameters0;
	 float4  GlintLUTParameters1;
	 uint  bShadingEnergyConservation;
	 uint  bShadingEnergyPreservation;
	 float4  RectLightAtlasSizeAndInvSize;
	 float  RectLightAtlasMaxMipLevel;
	 float4  IESAtlasSizeAndInvSize;
	 float3  TLASRelativePreViewTranslation;
	 float3  TLASViewTilePosition;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	SamplerState GlobalDistanceFieldPageAtlasTextureSampler;
	SamplerState GlobalDistanceFieldCoverageAtlasTextureSampler;
	SamplerState GlobalDistanceFieldMipTextureSampler;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedBilinearAnisoClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> SkyIrradianceEnvironmentMap;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	Texture3D CameraAerialPerspectiveVolumeMieOnly;
	SamplerState CameraAerialPerspectiveVolumeMieOnlySampler;
	Texture3D CameraAerialPerspectiveVolumeRayOnly;
	SamplerState CameraAerialPerspectiveVolumeRayOnlySampler;
	Texture3D HairScatteringLUTTexture;
	SamplerState HairScatteringLUTSampler;
	Texture2D GGXLTCMatTexture;
	SamplerState GGXLTCMatSampler;
	Texture2D GGXLTCAmpTexture;
	SamplerState GGXLTCAmpSampler;
	Texture2D SheenLTCTexture;
	SamplerState SheenLTCSampler;
	Texture2D<float2> ShadingEnergyGGXSpecTexture;
	Texture3D<float2> ShadingEnergyGGXGlassTexture;
	Texture2D<float2> ShadingEnergyClothSpecTexture;
	Texture2D<float> ShadingEnergyDiffuseTexture;
	SamplerState ShadingEnergySampler;
	Texture2DArray<float4> GlintTexture;
	SamplerState GlintSampler;
	Texture3D<float> SimpleVolumeTexture;
	SamplerState SimpleVolumeTextureSampler;
	Texture3D<float> SimpleVolumeEnvTexture;
	SamplerState SimpleVolumeEnvTextureSampler;
	Texture2D SSProfilesTexture;
	SamplerState SSProfilesSampler;
	SamplerState SSProfilesTransmissionSampler;
	Texture2DArray SSProfilesPreIntegratedTexture;
	SamplerState SSProfilesPreIntegratedSampler;
	Texture2DArray SpecularProfileTexture;
	SamplerState SpecularProfileSampler;
	Buffer<float4> WaterIndirection;
	Buffer<float4> WaterData;
	Texture2D<float4> RectLightAtlasTexture;
	SamplerState RectLightAtlasSampler;
	Texture2DArray<float> IESAtlasTexture;
	SamplerState IESAtlasSampler;
	SamplerState LandscapeWeightmapSampler;
	Buffer<uint> LandscapeIndirection;
	Buffer<float> LandscapePerComponentData;
	RWStructuredBuffer<uint> VTFeedbackBuffer;
	Buffer<float> PhysicsFieldClipmapBuffer;
} View = {View_TranslatedWorldToClip,View_RelativeWorldToClip,View_ClipToRelativeWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToRelativeWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewTilePosition,View_MatrixTilePosition,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_RelativeWorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_RelativeWorldViewOrigin,View_RelativePreViewTranslation,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevTranslatedWorldCameraOrigin,View_PrevRelativeWorldCameraOrigin,View_PrevRelativeWorldViewOrigin,View_RelativePrevPreViewTranslation,View_PrevClipToRelativeWorld,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_ClipToPrevClipWithAA,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_ViewRectMinAndSize,View_LightProbeSizeRatioAndInvSizeRatio,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_BufferToSceneTextureScale,View_ResolutionFractionAndInv,View_NumSceneColorMSAASamples,View_ProjectionDepthThicknessScale,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_FrameCounter,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_WorldIsPaused,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_GeneralPurposeTweak,View_GeneralPurposeTweak2,View_DemosaicVposOffset,View_DecalDepthBias,View_IndirectLightingColorScale,View_PrecomputedIndirectLightingColorScale,View_PrecomputedIndirectSpecularColorScale,View_AtmosphereLightDirection,View_AtmosphereLightIlluminanceOnGroundPostTransmittance,View_AtmosphereLightIlluminanceOuterSpace,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle_PPTrans,View_SkyViewLutSizeAndInvSize,View_SkyCameraTranslatedWorldOrigin,View_SkyPlanetTranslatedWorldCenterAndViewHeight,View_SkyViewLutReferential,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmospherePresentInScene,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_RealTimeReflectionCapture,View_RealTimeReflectionCapturePreExposure,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_MobileSkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeTranslatedCenterAndExtent,View_GlobalVolumeTranslatedWorldToUVAddAndMul,View_GlobalDistanceFieldMipTranslatedWorldToUVScale,View_GlobalDistanceFieldMipTranslatedWorldToUVBias,View_GlobalDistanceFieldMipFactor,View_GlobalDistanceFieldMipTransition,View_GlobalDistanceFieldClipmapSizeInPages,View_GlobalDistanceFieldInvPageAtlasSize,View_GlobalDistanceFieldInvCoverageAtlasSize,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDFAOConeDistance,View_NumGlobalSDFClipmaps,View_CoveredExpandSurfaceScale,View_NotCoveredExpandSurfaceScale,View_NotCoveredMinStepScale,View_DitheredTransparencyStepThreshold,View_DitheredTransparencyTraceThreshold,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogViewGridUVToPrevViewRectUV,View_VolumetricFogPrevViewGridRectUVToResourceUV,View_VolumetricFogPrevUVMax,View_VolumetricFogScreenToResourceUV,View_VolumetricFogUVMax,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_XRPassthroughCameraUVs,View_GlobalVirtualTextureMipBias,View_VirtualTextureFeedbackShift,View_VirtualTextureFeedbackMask,View_VirtualTextureFeedbackStride,View_VirtualTextureFeedbackJitterOffset,View_VirtualTextureFeedbackSampleOffset,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_OverrideLandscapeLOD,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_EnableSkyLight,View_HairRenderInfoBits,View_HairComponents,View_bSubsurfacePostprocessEnabled,View_SSProfilesTextureSizeAndInvSize,View_SSProfilesPreIntegratedTextureSizeAndInvSize,View_SpecularProfileTextureSizeAndInvSize,View_PhysicsFieldClipmapCenter,View_PhysicsFieldClipmapDistance,View_PhysicsFieldClipmapResolution,View_PhysicsFieldClipmapExponent,View_PhysicsFieldClipmapCount,View_PhysicsFieldTargetCount,View_PhysicsFieldTargets,View_GPUSceneViewId,View_ViewResolutionFraction,View_SubSurfaceColorAsTransmittanceAtDistanceInMeters,View_TanAndInvTanHalfFOV,View_PrevTanAndInvTanHalfFOV,View_GlintLUTParameters0,View_GlintLUTParameters1,View_bShadingEnergyConservation,View_bShadingEnergyPreservation,View_RectLightAtlasSizeAndInvSize,View_RectLightAtlasMaxMipLevel,View_IESAtlasSizeAndInvSize,View_TLASRelativePreViewTranslation,View_TLASViewTilePosition,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldPageAtlasTexture,View_GlobalDistanceFieldCoverageAtlasTexture,View_GlobalDistanceFieldPageTableTexture,View_GlobalDistanceFieldMipTexture,View_GlobalDistanceFieldPageAtlasTextureSampler,View_GlobalDistanceFieldCoverageAtlasTextureSampler,View_GlobalDistanceFieldMipTextureSampler,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedBilinearAnisoClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,View_SkyIrradianceEnvironmentMap,View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_CameraAerialPerspectiveVolumeMieOnly,View_CameraAerialPerspectiveVolumeMieOnlySampler,View_CameraAerialPerspectiveVolumeRayOnly,View_CameraAerialPerspectiveVolumeRayOnlySampler,View_HairScatteringLUTTexture,View_HairScatteringLUTSampler,View_GGXLTCMatTexture,View_GGXLTCMatSampler,View_GGXLTCAmpTexture,View_GGXLTCAmpSampler,View_SheenLTCTexture,View_SheenLTCSampler,View_ShadingEnergyGGXSpecTexture,View_ShadingEnergyGGXGlassTexture,View_ShadingEnergyClothSpecTexture,View_ShadingEnergyDiffuseTexture,View_ShadingEnergySampler,View_GlintTexture,View_GlintSampler,View_SimpleVolumeTexture,View_SimpleVolumeTextureSampler,View_SimpleVolumeEnvTexture,View_SimpleVolumeEnvTextureSampler,View_SSProfilesTexture,View_SSProfilesSampler,View_SSProfilesTransmissionSampler,View_SSProfilesPreIntegratedTexture,View_SSProfilesPreIntegratedSampler,View_SpecularProfileTexture,View_SpecularProfileSampler,View_WaterIndirection,View_WaterData,View_RectLightAtlasTexture,View_RectLightAtlasSampler,View_IESAtlasTexture,View_IESAtlasSampler,View_LandscapeWeightmapSampler,View_LandscapeIndirection,View_LandscapePerComponentData,View_VTFeedbackBuffer,View_PhysicsFieldClipmapBuffer,};

#line 3 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
cbuffer  UniformBufferConstants_VirtualShadowMap 
{
	 uint  VirtualShadowMap_NumFullShadowMaps;
	 uint  VirtualShadowMap_NumSinglePageShadowMaps;
	 uint  VirtualShadowMap_MaxPhysicalPages;
	 uint  VirtualShadowMap_NumShadowMapSlots;
	 uint  VirtualShadowMap_StaticCachedArrayIndex;
	 uint  VirtualShadowMap_PhysicalPageRowMask;
	 uint  VirtualShadowMap_PhysicalPageRowShift;
	 uint  VirtualShadowMap_PackedShadowMaskMaxLightCount;
	 float4  VirtualShadowMap_RecPhysicalPoolSize;
	 int2  VirtualShadowMap_PhysicalPoolSize;
	 int2  VirtualShadowMap_PhysicalPoolSizePages;
	 uint  VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;
	 float  VirtualShadowMap_CoarsePagePixelThresholdDynamic;
	 float  VirtualShadowMap_CoarsePagePixelThresholdStatic;
	 float  VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;
	 uint BindlessResource_VirtualShadowMap_ProjectionData ;
	 uint  PrePadding_VirtualShadowMap_84;
	 uint BindlessResource_VirtualShadowMap_PageTable ;
	 uint  PrePadding_VirtualShadowMap_92;
	 uint BindlessResource_VirtualShadowMap_PageFlags ;
	 uint  PrePadding_VirtualShadowMap_100;
	 uint BindlessResource_VirtualShadowMap_PageRectBounds ;
	 uint  PrePadding_VirtualShadowMap_108;
	 uint BindlessResource_VirtualShadowMap_PhysicalPagePool ;
}

#line 30 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
ByteAddressBuffer  VirtualShadowMap_ProjectionData;

#line 31 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
StructuredBuffer<uint>  VirtualShadowMap_PageTable;

#line 32 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
StructuredBuffer<uint>  VirtualShadowMap_PageFlags;

#line 33 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
StructuredBuffer<uint4>  VirtualShadowMap_PageRectBounds;

#line 34 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
Texture2DArray<uint>  VirtualShadowMap_PhysicalPagePool;

#line 35 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
static const struct
{
	 uint  NumFullShadowMaps;
	 uint  NumSinglePageShadowMaps;
	 uint  MaxPhysicalPages;
	 uint  NumShadowMapSlots;
	 uint  StaticCachedArrayIndex;
	 uint  PhysicalPageRowMask;
	 uint  PhysicalPageRowShift;
	 uint  PackedShadowMaskMaxLightCount;
	 float4  RecPhysicalPoolSize;
	 int2  PhysicalPoolSize;
	 int2  PhysicalPoolSizePages;
	 uint  bExcludeNonNaniteFromCoarsePages;
	 float  CoarsePagePixelThresholdDynamic;
	 float  CoarsePagePixelThresholdStatic;
	 float  CoarsePagePixelThresholdDynamicNanite;
	ByteAddressBuffer ProjectionData;
	StructuredBuffer<uint> PageTable;
	StructuredBuffer<uint> PageFlags;
	StructuredBuffer<uint4> PageRectBounds;
	Texture2DArray<uint> PhysicalPagePool;
} VirtualShadowMap = {VirtualShadowMap_NumFullShadowMaps,VirtualShadowMap_NumSinglePageShadowMaps,VirtualShadowMap_MaxPhysicalPages,VirtualShadowMap_NumShadowMapSlots,VirtualShadowMap_StaticCachedArrayIndex,VirtualShadowMap_PhysicalPageRowMask,VirtualShadowMap_PhysicalPageRowShift,VirtualShadowMap_PackedShadowMaskMaxLightCount,VirtualShadowMap_RecPhysicalPoolSize,VirtualShadowMap_PhysicalPoolSize,VirtualShadowMap_PhysicalPoolSizePages,VirtualShadowMap_bExcludeNonNaniteFromCoarsePages,VirtualShadowMap_CoarsePagePixelThresholdDynamic,VirtualShadowMap_CoarsePagePixelThresholdStatic,VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite,VirtualShadowMap_ProjectionData,VirtualShadowMap_PageTable,VirtualShadowMap_PageFlags,VirtualShadowMap_PageRectBounds,VirtualShadowMap_PhysicalPagePool,};

#line 3 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
cbuffer  UniformBufferConstants_SparseVoxelUniformBuffer 
{
	 float4x4  SparseVoxelUniformBuffer_LocalToWorld;
	 float4x4  SparseVoxelUniformBuffer_WorldToLocal;
	 float3  SparseVoxelUniformBuffer_LocalBoundsOrigin;
	 float  PrePadding_SparseVoxelUniformBuffer_140;
	 float3  SparseVoxelUniformBuffer_LocalBoundsExtent;
	 float  PrePadding_SparseVoxelUniformBuffer_156;
	 int3  SparseVoxelUniformBuffer_VolumeResolution;
	 int  PrePadding_SparseVoxelUniformBuffer_172;
	 uint BindlessResource_SparseVoxelUniformBuffer_ExtinctionTexture ;
	 uint  PrePadding_SparseVoxelUniformBuffer_180;
	 uint BindlessResource_SparseVoxelUniformBuffer_EmissionTexture ;
	 uint  PrePadding_SparseVoxelUniformBuffer_188;
	 uint BindlessResource_SparseVoxelUniformBuffer_AlbedoTexture ;
	 uint  PrePadding_SparseVoxelUniformBuffer_196;
	 uint BindlessSampler_SparseVoxelUniformBuffer_TextureSampler ;
	 uint  PrePadding_SparseVoxelUniformBuffer_204;
	 int3  SparseVoxelUniformBuffer_LightingCacheResolution;
	 int  PrePadding_SparseVoxelUniformBuffer_220;
	 uint BindlessResource_SparseVoxelUniformBuffer_NumVoxelsBuffer ;
	 uint  PrePadding_SparseVoxelUniformBuffer_228;
	 uint BindlessResource_SparseVoxelUniformBuffer_VoxelBuffer ;
	 uint  PrePadding_SparseVoxelUniformBuffer_236;
	 int  SparseVoxelUniformBuffer_MipLevel;
	 float  SparseVoxelUniformBuffer_MaxTraceDistance;
	 float  SparseVoxelUniformBuffer_MaxShadowTraceDistance;
	 float  SparseVoxelUniformBuffer_StepSize;
	 float  SparseVoxelUniformBuffer_StepFactor;
	 float  SparseVoxelUniformBuffer_ShadowStepSize;
	 float  SparseVoxelUniformBuffer_ShadowStepFactor;
}

#line 35 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
Texture3D  SparseVoxelUniformBuffer_ExtinctionTexture;

#line 36 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
Texture3D  SparseVoxelUniformBuffer_EmissionTexture;

#line 37 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
Texture3D  SparseVoxelUniformBuffer_AlbedoTexture;

#line 38 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
SamplerState  SparseVoxelUniformBuffer_TextureSampler;

#line 39 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
Buffer<uint>  SparseVoxelUniformBuffer_NumVoxelsBuffer;

#line 40 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
StructuredBuffer<FVoxelDataPacked>  SparseVoxelUniformBuffer_VoxelBuffer;

#line 41 "/Engine/Generated/UniformBuffers/SparseVoxelUniformBuffer.ush"
static const struct
{
	 float4x4  LocalToWorld;
	 float4x4  WorldToLocal;
	 float3  LocalBoundsOrigin;
	 float3  LocalBoundsExtent;
	 int3  VolumeResolution;
	 int3  LightingCacheResolution;
	 int  MipLevel;
	 float  MaxTraceDistance;
	 float  MaxShadowTraceDistance;
	 float  StepSize;
	 float  StepFactor;
	 float  ShadowStepSize;
	 float  ShadowStepFactor;
	Texture3D ExtinctionTexture;
	Texture3D EmissionTexture;
	Texture3D AlbedoTexture;
	SamplerState TextureSampler;
	Buffer<uint> NumVoxelsBuffer;
	StructuredBuffer<FVoxelDataPacked> VoxelBuffer;
} SparseVoxelUniformBuffer = {SparseVoxelUniformBuffer_LocalToWorld,SparseVoxelUniformBuffer_WorldToLocal,SparseVoxelUniformBuffer_LocalBoundsOrigin,SparseVoxelUniformBuffer_LocalBoundsExtent,SparseVoxelUniformBuffer_VolumeResolution,SparseVoxelUniformBuffer_LightingCacheResolution,SparseVoxelUniformBuffer_MipLevel,SparseVoxelUniformBuffer_MaxTraceDistance,SparseVoxelUniformBuffer_MaxShadowTraceDistance,SparseVoxelUniformBuffer_StepSize,SparseVoxelUniformBuffer_StepFactor,SparseVoxelUniformBuffer_ShadowStepSize,SparseVoxelUniformBuffer_ShadowStepFactor,SparseVoxelUniformBuffer_ExtinctionTexture,SparseVoxelUniformBuffer_EmissionTexture,SparseVoxelUniformBuffer_AlbedoTexture,SparseVoxelUniformBuffer_TextureSampler,SparseVoxelUniformBuffer_NumVoxelsBuffer,SparseVoxelUniformBuffer_VoxelBuffer,};

#line 3 "/Engine/Generated/UniformBuffers/DeferredLightUniforms.ush"
cbuffer  UniformBufferConstants_DeferredLightUniforms 
{
	 float4  DeferredLightUniforms_ShadowMapChannelMask;
	 float2  DeferredLightUniforms_DistanceFadeMAD;
	 float  DeferredLightUniforms_ContactShadowLength;
	 float  DeferredLightUniforms_ContactShadowCastingIntensity;
	 float  DeferredLightUniforms_ContactShadowNonCastingIntensity;
	 float  DeferredLightUniforms_VolumetricScatteringIntensity;
	 uint  DeferredLightUniforms_ShadowedBits;
	 uint  DeferredLightUniforms_LightingChannelMask;
	 float3  DeferredLightUniforms_TranslatedWorldPosition;
	 float  DeferredLightUniforms_InvRadius;
	 float3  DeferredLightUniforms_Color;
	 float  DeferredLightUniforms_FalloffExponent;
	 float3  DeferredLightUniforms_Direction;
	 float  DeferredLightUniforms_SpecularScale;
	 float3  DeferredLightUniforms_Tangent;
	 float  DeferredLightUniforms_SourceRadius;
	 float2  DeferredLightUniforms_SpotAngles;
	 float  DeferredLightUniforms_SoftSourceRadius;
	 float  DeferredLightUniforms_SourceLength;
	 float  DeferredLightUniforms_RectLightBarnCosAngle;
	 float  DeferredLightUniforms_RectLightBarnLength;
	 float2  DeferredLightUniforms_RectLightAtlasUVOffset;
	 float2  DeferredLightUniforms_RectLightAtlasUVScale;
	 float  DeferredLightUniforms_RectLightAtlasMaxLevel;
	 float  DeferredLightUniforms_IESAtlasIndex;
}

#line 31 "/Engine/Generated/UniformBuffers/DeferredLightUniforms.ush"
static const struct
{
	 float4  ShadowMapChannelMask;
	 float2  DistanceFadeMAD;
	 float  ContactShadowLength;
	 float  ContactShadowCastingIntensity;
	 float  ContactShadowNonCastingIntensity;
	 float  VolumetricScatteringIntensity;
	 uint  ShadowedBits;
	 uint  LightingChannelMask;
	 float3  TranslatedWorldPosition;
	 float  InvRadius;
	 float3  Color;
	 float  FalloffExponent;
	 float3  Direction;
	 float  SpecularScale;
	 float3  Tangent;
	 float  SourceRadius;
	 float2  SpotAngles;
	 float  SoftSourceRadius;
	 float  SourceLength;
	 float  RectLightBarnCosAngle;
	 float  RectLightBarnLength;
	 float2  RectLightAtlasUVOffset;
	 float2  RectLightAtlasUVScale;
	 float  RectLightAtlasMaxLevel;
	 float  IESAtlasIndex;
} DeferredLightUniforms = {DeferredLightUniforms_ShadowMapChannelMask,DeferredLightUniforms_DistanceFadeMAD,DeferredLightUniforms_ContactShadowLength,DeferredLightUniforms_ContactShadowCastingIntensity,DeferredLightUniforms_ContactShadowNonCastingIntensity,DeferredLightUniforms_VolumetricScatteringIntensity,DeferredLightUniforms_ShadowedBits,DeferredLightUniforms_LightingChannelMask,DeferredLightUniforms_TranslatedWorldPosition,DeferredLightUniforms_InvRadius,DeferredLightUniforms_Color,DeferredLightUniforms_FalloffExponent,DeferredLightUniforms_Direction,DeferredLightUniforms_SpecularScale,DeferredLightUniforms_Tangent,DeferredLightUniforms_SourceRadius,DeferredLightUniforms_SpotAngles,DeferredLightUniforms_SoftSourceRadius,DeferredLightUniforms_SourceLength,DeferredLightUniforms_RectLightBarnCosAngle,DeferredLightUniforms_RectLightBarnLength,DeferredLightUniforms_RectLightAtlasUVOffset,DeferredLightUniforms_RectLightAtlasUVScale,DeferredLightUniforms_RectLightAtlasMaxLevel,DeferredLightUniforms_IESAtlasIndex,};

#line 3 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
cbuffer  UniformBufferConstants_ForwardLightData 
{
	 uint  ForwardLightData_NumLocalLights;
	 uint  ForwardLightData_NumReflectionCaptures;
	 uint  ForwardLightData_HasDirectionalLight;
	 uint  ForwardLightData_NumGridCells;
	 int3  ForwardLightData_CulledGridSize;
	 uint  ForwardLightData_MaxCulledLightsPerCell;
	 uint  ForwardLightData_LightGridPixelSizeShift;
	 uint  PrePadding_ForwardLightData_36;
	 uint  PrePadding_ForwardLightData_40;
	 uint  PrePadding_ForwardLightData_44;
	 float3  ForwardLightData_LightGridZParams;
	 float  PrePadding_ForwardLightData_60;
	 float3  ForwardLightData_DirectionalLightDirection;
	 float  ForwardLightData_DirectionalLightSourceRadius;
	 float3  ForwardLightData_DirectionalLightColor;
	 float  ForwardLightData_DirectionalLightVolumetricScatteringIntensity;
	 uint  ForwardLightData_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_ForwardLightData_100;
	 float2  ForwardLightData_DirectionalLightDistanceFadeMAD;
	 uint  ForwardLightData_NumDirectionalLightCascades;
	 int  ForwardLightData_DirectionalLightVSM;
	 int  PrePadding_ForwardLightData_120;
	 int  PrePadding_ForwardLightData_124;
	 float4  ForwardLightData_CascadeEndDepths;
	 float4x4  ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  ForwardLightData_DirectionalLightShadowmapMinMax[4];
	 float4  ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;
	 float  ForwardLightData_DirectionalLightDepthBias;
	 uint  ForwardLightData_DirectionalLightUseStaticShadowing;
	 uint  ForwardLightData_SimpleLightsEndIndex;
	 uint  ForwardLightData_ClusteredDeferredSupportedEndIndex;
	 uint  ForwardLightData_LumenSupportedStartIndex;
	 uint  PrePadding_ForwardLightData_500;
	 uint  PrePadding_ForwardLightData_504;
	 uint  PrePadding_ForwardLightData_508;
	 float4  ForwardLightData_DirectionalLightStaticShadowBufferSize;
	 float4x4  ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  ForwardLightData_DirectLightingShowFlag;
	 float  PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;
	 float  PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;
	 float  PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;
	 float  ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_ForwardLightData_644;
	 uint  PrePadding_ForwardLightData_648;
	 uint  PrePadding_ForwardLightData_652;
	 uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_ForwardLightData_660;
	 uint BindlessSampler_ForwardLightData_ShadowmapSampler ;
	 uint  PrePadding_ForwardLightData_668;
	 uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_ForwardLightData_676;
	 uint BindlessSampler_ForwardLightData_StaticShadowmapSampler ;
	 uint  PrePadding_ForwardLightData_684;
	 uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer ;
	 uint  PrePadding_ForwardLightData_692;
	 uint BindlessResource_ForwardLightData_NumCulledLightsGrid ;
	 uint  PrePadding_ForwardLightData_700;
	 uint BindlessResource_ForwardLightData_CulledLightDataGrid32Bit ;
	 uint  PrePadding_ForwardLightData_708;
	 uint BindlessResource_ForwardLightData_CulledLightDataGrid16Bit ;
}

#line 74 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
Texture2D  ForwardLightData_DirectionalLightShadowmapAtlas;

#line 75 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
SamplerState  ForwardLightData_ShadowmapSampler;

#line 76 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
Texture2D  ForwardLightData_DirectionalLightStaticShadowmap;

#line 77 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
SamplerState  ForwardLightData_StaticShadowmapSampler;

#line 78 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
StructuredBuffer<float4>  ForwardLightData_ForwardLocalLightBuffer;

#line 79 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
StructuredBuffer<uint>  ForwardLightData_NumCulledLightsGrid;

#line 80 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
StructuredBuffer<uint>  ForwardLightData_CulledLightDataGrid32Bit;

#line 81 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
Buffer<uint>  ForwardLightData_CulledLightDataGrid16Bit;

#line 82 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"
static const struct
{
	 uint  NumLocalLights;
	 uint  NumReflectionCaptures;
	 uint  HasDirectionalLight;
	 uint  NumGridCells;
	 int3  CulledGridSize;
	 uint  MaxCulledLightsPerCell;
	 uint  LightGridPixelSizeShift;
	 float3  LightGridZParams;
	 float3  DirectionalLightDirection;
	 float  DirectionalLightSourceRadius;
	 float3  DirectionalLightColor;
	 float  DirectionalLightVolumetricScatteringIntensity;
	 uint  DirectionalLightShadowMapChannelMask;
	 float2  DirectionalLightDistanceFadeMAD;
	 uint  NumDirectionalLightCascades;
	 int  DirectionalLightVSM;
	 float4  CascadeEndDepths;
	 float4x4  DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  DirectionalLightShadowmapMinMax[4];
	 float4  DirectionalLightShadowmapAtlasBufferSize;
	 float  DirectionalLightDepthBias;
	 uint  DirectionalLightUseStaticShadowing;
	 uint  SimpleLightsEndIndex;
	 uint  ClusteredDeferredSupportedEndIndex;
	 uint  LumenSupportedStartIndex;
	 float4  DirectionalLightStaticShadowBufferSize;
	 float4x4  DirectionalLightTranslatedWorldToStaticShadow;
	 uint  DirectLightingShowFlag;
struct {
	 float  ScreenRayLength;
	 int  SMRTRayCount;
	 int  SMRTSamplesPerRay;
	 float  SMRTRayLengthScale;
	 float  SMRTCotMaxRayAngleFromLight;
	 float  SMRTTexelDitherScale;
	 float  SMRTExtrapolateSlope;
	 float  SMRTMaxSlopeBias;
	 uint  SMRTAdaptiveRayCount;
} DirectionalLightSMRTSettings;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	StructuredBuffer<float4> ForwardLocalLightBuffer;
	StructuredBuffer<uint> NumCulledLightsGrid;
	StructuredBuffer<uint> CulledLightDataGrid32Bit;
	Buffer<uint> CulledLightDataGrid16Bit;
} ForwardLightData = {ForwardLightData_NumLocalLights,ForwardLightData_NumReflectionCaptures,ForwardLightData_HasDirectionalLight,ForwardLightData_NumGridCells,ForwardLightData_CulledGridSize,ForwardLightData_MaxCulledLightsPerCell,ForwardLightData_LightGridPixelSizeShift,ForwardLightData_LightGridZParams,ForwardLightData_DirectionalLightDirection,ForwardLightData_DirectionalLightSourceRadius,ForwardLightData_DirectionalLightColor,ForwardLightData_DirectionalLightVolumetricScatteringIntensity,ForwardLightData_DirectionalLightShadowMapChannelMask,ForwardLightData_DirectionalLightDistanceFadeMAD,ForwardLightData_NumDirectionalLightCascades,ForwardLightData_DirectionalLightVSM,ForwardLightData_CascadeEndDepths,ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix,ForwardLightData_DirectionalLightShadowmapMinMax,ForwardLightData_DirectionalLightShadowmapAtlasBufferSize,ForwardLightData_DirectionalLightDepthBias,ForwardLightData_DirectionalLightUseStaticShadowing,ForwardLightData_SimpleLightsEndIndex,ForwardLightData_ClusteredDeferredSupportedEndIndex,ForwardLightData_LumenSupportedStartIndex,ForwardLightData_DirectionalLightStaticShadowBufferSize,ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow,ForwardLightData_DirectLightingShowFlag,{ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength,ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount,ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay,ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale,ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight,ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale,ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope,ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias,ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount,},ForwardLightData_DirectionalLightShadowmapAtlas,ForwardLightData_ShadowmapSampler,ForwardLightData_DirectionalLightStaticShadowmap,ForwardLightData_StaticShadowmapSampler,ForwardLightData_ForwardLocalLightBuffer,ForwardLightData_NumCulledLightsGrid,ForwardLightData_CulledLightDataGrid32Bit,ForwardLightData_CulledLightDataGrid16Bit,};

#line 3 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
cbuffer  UniformBufferConstants_LumenGIVolumeStruct 
{
	 float  LumenGIVolumeStruct_ReprojectionRadiusScale;
	 float  LumenGIVolumeStruct_ClipmapWorldExtent;
	 float  LumenGIVolumeStruct_ClipmapDistributionBase;
	 float  LumenGIVolumeStruct_InvClipmapFadeSize;
	 int2  LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;
	 uint  LumenGIVolumeStruct_RadianceProbeClipmapResolution;
	 uint  LumenGIVolumeStruct_NumRadianceProbeClipmaps;
	 uint  LumenGIVolumeStruct_RadianceProbeResolution;
	 uint  LumenGIVolumeStruct_FinalProbeResolution;
	 uint  LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;
	 uint  LumenGIVolumeStruct_CalculateIrradiance;
	 uint  LumenGIVolumeStruct_IrradianceProbeResolution;
	 uint  LumenGIVolumeStruct_OcclusionProbeResolution;
	 uint  LumenGIVolumeStruct_NumProbesToTraceBudget;
	 uint  LumenGIVolumeStruct_RadianceCacheStats;
	 uint BindlessResource_LumenGIVolumeStruct_RadianceProbeIndirectionTexture ;
	 uint  PrePadding_LumenGIVolumeStruct_68;
	 uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas ;
	 uint  PrePadding_LumenGIVolumeStruct_76;
	 uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas ;
	 uint  PrePadding_LumenGIVolumeStruct_84;
	 uint BindlessResource_LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas ;
	 uint  PrePadding_LumenGIVolumeStruct_92;
	 uint BindlessResource_LumenGIVolumeStruct_RadianceCacheDepthAtlas ;
	 uint  PrePadding_LumenGIVolumeStruct_100;
	 uint BindlessResource_LumenGIVolumeStruct_ProbeWorldOffset ;
	 uint  PrePadding_LumenGIVolumeStruct_108;
	 float4  LumenGIVolumeStruct_RadianceProbeSettings[6];
	 float4  LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];
	 float4  LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];
	 float2  LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;
	 float2  LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;
	 float2  LumenGIVolumeStruct_InvProbeDepthAtlasResolution;
	 uint  LumenGIVolumeStruct_OverrideCacheOcclusionLighting;
	 uint  LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;
	 uint  LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;
	 uint  LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;
	 float  PrePadding_LumenGIVolumeStruct_440;
	 float  PrePadding_LumenGIVolumeStruct_444;
	 uint BindlessResource_LumenGIVolumeStruct_Radiance ;
	 uint  PrePadding_LumenGIVolumeStruct_452;
	 uint BindlessResource_LumenGIVolumeStruct_Normal ;
	 uint  PrePadding_LumenGIVolumeStruct_460;
	 uint BindlessResource_LumenGIVolumeStruct_SceneDepth ;
	 uint  PrePadding_LumenGIVolumeStruct_468;
	 uint  LumenGIVolumeStruct_Enabled;
	 float  LumenGIVolumeStruct_RelativeDepthThreshold;
	 float  LumenGIVolumeStruct_SpecularScale;
	 float  LumenGIVolumeStruct_Contrast;
	 float  PrePadding_LumenGIVolumeStruct_488;
	 float  PrePadding_LumenGIVolumeStruct_492;
	 uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume0 ;
	 uint  PrePadding_LumenGIVolumeStruct_500;
	 uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume1 ;
	 uint  PrePadding_LumenGIVolumeStruct_508;
	 uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory0 ;
	 uint  PrePadding_LumenGIVolumeStruct_516;
	 uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory1 ;
	 uint  PrePadding_LumenGIVolumeStruct_524;
	 uint BindlessSampler_LumenGIVolumeStruct_TranslucencyGIVolumeSampler ;
	 uint  PrePadding_LumenGIVolumeStruct_532;
	 uint  PrePadding_LumenGIVolumeStruct_536;
	 uint  PrePadding_LumenGIVolumeStruct_540;
	 float3  LumenGIVolumeStruct_TranslucencyGIGridZParams;
	 uint  LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;
	 int3  LumenGIVolumeStruct_TranslucencyGIGridSize;
}

#line 72 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture3D<uint>  LumenGIVolumeStruct_RadianceProbeIndirectionTexture;

#line 73 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture2D<float3>  LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;

#line 74 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture2D<float3>  LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;

#line 75 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture2D<float2>  LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;

#line 76 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture2D<float>  LumenGIVolumeStruct_RadianceCacheDepthAtlas;

#line 77 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
StructuredBuffer<float4>  LumenGIVolumeStruct_ProbeWorldOffset;

#line 78 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture2D  LumenGIVolumeStruct_Radiance;

#line 79 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture2D  LumenGIVolumeStruct_Normal;

#line 80 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture2D  LumenGIVolumeStruct_SceneDepth;

#line 81 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture3D  LumenGIVolumeStruct_TranslucencyGIVolume0;

#line 82 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture3D  LumenGIVolumeStruct_TranslucencyGIVolume1;

#line 83 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture3D  LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;

#line 84 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
Texture3D  LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;

#line 85 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
SamplerState  LumenGIVolumeStruct_TranslucencyGIVolumeSampler;

#line 86 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"
static const struct
{
	 float  ReprojectionRadiusScale;
	 float  ClipmapWorldExtent;
	 float  ClipmapDistributionBase;
	 float  InvClipmapFadeSize;
	 int2  ProbeAtlasResolutionInProbes;
	 uint  RadianceProbeClipmapResolution;
	 uint  NumRadianceProbeClipmaps;
	 uint  RadianceProbeResolution;
	 uint  FinalProbeResolution;
	 uint  FinalRadianceAtlasMaxMip;
	 uint  CalculateIrradiance;
	 uint  IrradianceProbeResolution;
	 uint  OcclusionProbeResolution;
	 uint  NumProbesToTraceBudget;
	 uint  RadianceCacheStats;
	 float4  RadianceProbeSettings[6];
	 float4  PaddedWorldPositionToRadianceProbeCoordBias[6];
	 float4  PaddedRadianceProbeCoordToWorldPositionBias[6];
	 float2  InvProbeFinalRadianceAtlasResolution;
	 float2  InvProbeFinalIrradianceAtlasResolution;
	 float2  InvProbeDepthAtlasResolution;
	 uint  OverrideCacheOcclusionLighting;
	 uint  ShowBlackRadianceCacheLighting;
	 uint  ProbeAtlasResolutionModuloMask;
	 uint  ProbeAtlasResolutionDivideShift;
	Texture3D<uint> RadianceProbeIndirectionTexture;
	Texture2D<float3> RadianceCacheFinalRadianceAtlas;
	Texture2D<float3> RadianceCacheFinalIrradianceAtlas;
	Texture2D<float2> RadianceCacheProbeOcclusionAtlas;
	Texture2D<float> RadianceCacheDepthAtlas;
	StructuredBuffer<float4> ProbeWorldOffset;
	 uint  Enabled;
	 float  RelativeDepthThreshold;
	 float  SpecularScale;
	 float  Contrast;
	Texture2D Radiance;
	Texture2D Normal;
	Texture2D SceneDepth;
	 float3  TranslucencyGIGridZParams;
	 uint  TranslucencyGIGridPixelSizeShift;
	 int3  TranslucencyGIGridSize;
	Texture3D TranslucencyGIVolume0;
	Texture3D TranslucencyGIVolume1;
	Texture3D TranslucencyGIVolumeHistory0;
	Texture3D TranslucencyGIVolumeHistory1;
	SamplerState TranslucencyGIVolumeSampler;
} LumenGIVolumeStruct = {LumenGIVolumeStruct_ReprojectionRadiusScale,LumenGIVolumeStruct_ClipmapWorldExtent,LumenGIVolumeStruct_ClipmapDistributionBase,LumenGIVolumeStruct_InvClipmapFadeSize,LumenGIVolumeStruct_ProbeAtlasResolutionInProbes,LumenGIVolumeStruct_RadianceProbeClipmapResolution,LumenGIVolumeStruct_NumRadianceProbeClipmaps,LumenGIVolumeStruct_RadianceProbeResolution,LumenGIVolumeStruct_FinalProbeResolution,LumenGIVolumeStruct_FinalRadianceAtlasMaxMip,LumenGIVolumeStruct_CalculateIrradiance,LumenGIVolumeStruct_IrradianceProbeResolution,LumenGIVolumeStruct_OcclusionProbeResolution,LumenGIVolumeStruct_NumProbesToTraceBudget,LumenGIVolumeStruct_RadianceCacheStats,LumenGIVolumeStruct_RadianceProbeSettings,LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias,LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias,LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution,LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution,LumenGIVolumeStruct_InvProbeDepthAtlasResolution,LumenGIVolumeStruct_OverrideCacheOcclusionLighting,LumenGIVolumeStruct_ShowBlackRadianceCacheLighting,LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask,LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift,LumenGIVolumeStruct_RadianceProbeIndirectionTexture,LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas,LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas,LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas,LumenGIVolumeStruct_RadianceCacheDepthAtlas,LumenGIVolumeStruct_ProbeWorldOffset,LumenGIVolumeStruct_Enabled,LumenGIVolumeStruct_RelativeDepthThreshold,LumenGIVolumeStruct_SpecularScale,LumenGIVolumeStruct_Contrast,LumenGIVolumeStruct_Radiance,LumenGIVolumeStruct_Normal,LumenGIVolumeStruct_SceneDepth,LumenGIVolumeStruct_TranslucencyGIGridZParams,LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift,LumenGIVolumeStruct_TranslucencyGIGridSize,LumenGIVolumeStruct_TranslucencyGIVolume0,LumenGIVolumeStruct_TranslucencyGIVolume1,LumenGIVolumeStruct_TranslucencyGIVolumeHistory0,LumenGIVolumeStruct_TranslucencyGIVolumeHistory1,LumenGIVolumeStruct_TranslucencyGIVolumeSampler,};

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 230 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);

#line 231 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.MatrixTilePosition = View.MatrixTilePosition;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View.RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View.RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View.RelativePreViewTranslation;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View.PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View.PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View.RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View.ProjectionDepthThicknessScale;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.FrameCounter = View.FrameCounter;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.WorldIsPaused = View.WorldIsPaused;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View.GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View.GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View.GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View.VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View.VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View.VolumetricFogPrevUVMax;
	Result.VolumetricFogScreenToResourceUV = View.VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View.VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View.OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View.SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View.TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View.PrevTanAndInvTanHalfFOV;
	Result.GlintLUTParameters0 = View.GlintLUTParameters0;
	Result.GlintLUTParameters1 = View.GlintLUTParameters1;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}

#line 34 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 337 "/Engine/Private/Common.ush"
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 353 "/Engine/Private/Common.ush"
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 595 "/Engine/Private/Common.ush"
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}

#line 13 "/Engine/Private/FastMath.ush"
float FastExp( float x) { return exp2(1.442695f * x); }

#line 14 "/Engine/Private/FastMath.ush"
float2 FastExp( float2 x) { return exp2(1.442695f * x); }

#line 15 "/Engine/Private/FastMath.ush"
float3 FastExp( float3 x) { return exp2(1.442695f * x); }

#line 16 "/Engine/Private/FastMath.ush"
float4 FastExp( float4 x) { return exp2(1.442695f * x); }

#line 26 "/Engine/Private/Random.ush"
float InterleavedGradientNoise( float2 uv, float FrameId )
{
	
	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}

#line 904 "/Engine/Private/Common.ush"
float Square( float x )
{
	return x*x;
}

#line 909 "/Engine/Private/Common.ush"
float2 Square( float2 x )
{
	return x*x;
}

#line 914 "/Engine/Private/Common.ush"
float3 Square( float3 x )
{
	return x*x;
}

#line 919 "/Engine/Private/Common.ush"
float4 Square( float4 x )
{
	return x*x;
}

#line 924 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 929 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 934 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 939 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 1179 "/Engine/Private/Common.ush"
float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View.InvDeviceZToWorldZTransform[0] + View.InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}

#line 1187 "/Engine/Private/Common.ush"
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return asuint(ViewToClip._44);
}

#line 1193 "/Engine/Private/Common.ush"
bool IsOrthoProjection()
{
	return IsOrthoProjection(View.ViewToClip);
}

#line 1201 "/Engine/Private/Common.ush"
float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (IsOrthoProjection())
	{
		
		return SceneDepth * View.ViewToClip[2][2] + View.ViewToClip[3][2];
	}
	else
	{
		
		return 1.0f / ((SceneDepth + View.InvDeviceZToWorldZTransform[3]) * View.InvDeviceZToWorldZTransform[2]);
	}
}

#line 1255 "/Engine/Private/Common.ush"
float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}

#line 1271 "/Engine/Private/Common.ush"
FLWCVector3 SvPositionToWorld(float4 SvPosition)
{
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);
	return LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
}

#line 43 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
bool IsSinglePageVirtualShadowMap(int VirtualShadowMapId)
{
	return VirtualShadowMapId < (1024U * 8U);
}

#line 59 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcLog2LevelDimsPages(uint Level)
{
	return 7 - Level;	
}

#line 69 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcLevelDimsTexels(uint Level)
{
	return uint(16384) >> Level;
}

#line 74 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcLevelOffsets(uint Level)
{
	
	
	
	
	
	
	
	
	
	
	

	
	uint NumBits = Level << 1;
	uint StartBit = (2 * 7 + 2) - NumBits;



	uint Mask = ((1u << NumBits) - 1u) << StartBit;


	return 0x55555555u & Mask;
}

#line 101 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
struct FVirtualSMLevelOffset
{
	bool bIsSinglePageSM;
	uint LevelOffset;
};

#line 121 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcFullPageTableLevelOffset(uint VirtualShadowMapId, uint Level)
{
	 { };
	return (1024U * 8U) + (VirtualShadowMapId - (1024U * 8U)) * 21845 + CalcLevelOffsets(Level);
}

#line 147 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcPageOffsetInFullLevel(uint Level, uint2 PageAddress)
{
	return PageAddress.x + (PageAddress.y << CalcLog2LevelDimsPages(Level));
}

#line 154 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcPageOffset(FVirtualSMLevelOffset LevelOffset, uint Level, uint2 PageAddress)
{
	 { };
	uint Result = LevelOffset.LevelOffset;

	if (!LevelOffset.bIsSinglePageSM)
	{
		Result += CalcPageOffsetInFullLevel(Level, PageAddress);
	}

	return Result;
}

#line 167 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcPageOffset(uint VirtualShadowMapId, uint Level, uint2 PageAddress)
{
	
	if (IsSinglePageVirtualShadowMap(VirtualShadowMapId))
	{
		
		
		
		
		
		return VirtualShadowMapId;
	}
	
	return CalcFullPageTableLevelOffset(VirtualShadowMapId, Level) + CalcPageOffsetInFullLevel(Level, PageAddress);
}

#line 210 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
struct FShadowPhysicalPage
{
	uint2 PhysicalAddress;	
	uint LODOffset;			
	bool bAnyLODValid;		
	bool bThisLODValid;		
};

#line 230 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
FShadowPhysicalPage ShadowDecodePageTable(uint Value)
{
	FShadowPhysicalPage Result;
	Result.PhysicalAddress = uint2(Value & 0x3FF, (Value >> 10) & 0x3FF);
	Result.LODOffset = (Value >> 20) & 0x3F;
	Result.bAnyLODValid = (Value & 0x8000000) != 0;
	Result.bThisLODValid = Result.bAnyLODValid && Result.LODOffset == 0;
	return Result;
}

#line 240 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
FShadowPhysicalPage ShadowGetPhysicalPage(uint PageOffset)
{
	return ShadowDecodePageTable(VirtualShadowMap.PageTable[PageOffset]);
}

#line 260 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
struct FShadowPageTranslationResult
{
	bool bValid;
	uint LODOffset;
	uint2 VirtualTexelAddress;
	float2 VirtualTexelAddressFloat;
	uint2 PhysicalTexelAddress;
};

#line 270 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
FShadowPageTranslationResult ShadowVirtualToPhysicalUV(uint VirtualShadowMapID, float2 ShadowMapUV)
{
	uint2 vPage = uint2(ShadowMapUV * 128);
	FShadowPhysicalPage PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(VirtualShadowMapID, 0, vPage));

	FShadowPageTranslationResult Result;
	Result.bValid = PhysicalPageEntry.bAnyLODValid;
	Result.LODOffset = IsSinglePageVirtualShadowMap(VirtualShadowMapID) ? (8 - 1U) : PhysicalPageEntry.LODOffset;
	
	Result.VirtualTexelAddressFloat = ShadowMapUV * float(CalcLevelDimsTexels(Result.LODOffset));
	Result.VirtualTexelAddress = uint2(Result.VirtualTexelAddressFloat);
	Result.PhysicalTexelAddress = PhysicalPageEntry.PhysicalAddress * 128 + (Result.VirtualTexelAddress & 127);

	return Result;
}

#line 9 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionStructs.ush"
struct FVirtualShadowMapProjectionShaderData
{
	float4x4 TranslatedWorldToShadowViewMatrix;
	float4x4 ShadowViewToClipMatrix;
	float4x4 TranslatedWorldToShadowUVMatrix;
	float4x4 TranslatedWorldToShadowUVNormalMatrix;

	FLWCVector3 PreViewTranslation;
	
	uint LightType;		
	float LightSourceRadius;

	FLWCVector3 ClipmapWorldOrigin;
	float ResolutionLodBias;

	int2 ClipmapCornerRelativeOffset;
	int ClipmapLevel;					
	int ClipmapLevelCountRemaining;		

	uint Flags;
	float LightRadius;

	
	int VirtualShadowMapId;	
	bool bCurrentDistantLight; 
	bool bUnCached; 
};

#line 37 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionStructs.ush"
FVirtualShadowMapProjectionShaderData DecodeVirtualShadowMapProjectionData(ByteAddressBuffer ProjectionData, int VirtualShadowMapId)
{
	FVirtualShadowMapProjectionShaderData Result;
	Result.VirtualShadowMapId = VirtualShadowMapId;

	
	const uint Stride = 16 * 21;
	const uint Base = VirtualShadowMapId * Stride;

	Result.TranslatedWorldToShadowViewMatrix[0]		= asfloat(ProjectionData.Load4(Base + 16*0));
	Result.TranslatedWorldToShadowViewMatrix[1]		= asfloat(ProjectionData.Load4(Base + 16*1));
	Result.TranslatedWorldToShadowViewMatrix[2]		= asfloat(ProjectionData.Load4(Base + 16*2));
	Result.TranslatedWorldToShadowViewMatrix[3]		= asfloat(ProjectionData.Load4(Base + 16*3));
	Result.ShadowViewToClipMatrix[0]				= asfloat(ProjectionData.Load4(Base + 16*4));
	Result.ShadowViewToClipMatrix[1]				= asfloat(ProjectionData.Load4(Base + 16*5));
	Result.ShadowViewToClipMatrix[2]				= asfloat(ProjectionData.Load4(Base + 16*6));
	Result.ShadowViewToClipMatrix[3]				= asfloat(ProjectionData.Load4(Base + 16*7));
	Result.TranslatedWorldToShadowUVMatrix[0]		= asfloat(ProjectionData.Load4(Base + 16*8));
	Result.TranslatedWorldToShadowUVMatrix[1]		= asfloat(ProjectionData.Load4(Base + 16*9));
	Result.TranslatedWorldToShadowUVMatrix[2]		= asfloat(ProjectionData.Load4(Base + 16*10));
	Result.TranslatedWorldToShadowUVMatrix[3]		= asfloat(ProjectionData.Load4(Base + 16*11));
	Result.TranslatedWorldToShadowUVNormalMatrix[0]	= asfloat(ProjectionData.Load4(Base + 16*12));
	Result.TranslatedWorldToShadowUVNormalMatrix[1]	= asfloat(ProjectionData.Load4(Base + 16*13));
	Result.TranslatedWorldToShadowUVNormalMatrix[2]	= asfloat(ProjectionData.Load4(Base + 16*14));
	Result.TranslatedWorldToShadowUVNormalMatrix[3]	= asfloat(ProjectionData.Load4(Base + 16*15));

	
	
	 
	float3 PreViewTranslationTile			= asfloat(ProjectionData.Load3(Base + (16*16 + 4*0)));
	Result.LightType						=		 (ProjectionData.Load (Base + (16*16 + 4*3)));

	float3 PreViewTranslationOffset			= asfloat(ProjectionData.Load3(Base + (16*17 + 4*0)));
	Result.LightSourceRadius				= asfloat(ProjectionData.Load (Base + (16*17 + 4*3)));

	float3 NegativeClipmapWorldOriginOffset = asfloat(ProjectionData.Load3(Base + (16*18 + 4*0)));
	Result.ResolutionLodBias				= asfloat(ProjectionData.Load (Base + (16*18 + 4*3)));
		
	Result.ClipmapCornerRelativeOffset		= asint  (ProjectionData.Load2(Base + (16*19 + 4*0)));
	Result.ClipmapLevel						= asint  (ProjectionData.Load (Base + (16*19 + 4*2)));
	Result.ClipmapLevelCountRemaining		= asint  (ProjectionData.Load (Base + (16*19 + 4*3)));

	Result.Flags 							= asuint (ProjectionData.Load (Base + (16*20 + 4*0)));
	Result.LightRadius 						= asfloat(ProjectionData.Load (Base + (16*20 + 4*1)));

	Result.PreViewTranslation				= MakeLWCVector3(PreViewTranslationTile, PreViewTranslationOffset);
	Result.ClipmapWorldOrigin				= LWCNegate(MakeLWCVector3(PreViewTranslationTile, NegativeClipmapWorldOriginOffset));

	Result.bCurrentDistantLight = (Result.Flags & (1U << 0)) != 0U;
	Result.bUnCached = (Result.Flags & (1U << 1)) != 0U;

	return Result;
}

#line 91 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionStructs.ush"
FVirtualShadowMapProjectionShaderData GetVirtualShadowMapProjectionData(int VirtualShadowMapId)
{
	return DecodeVirtualShadowMapProjectionData(VirtualShadowMap.ProjectionData, VirtualShadowMapId);
}

#line 20 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float CalcAbsoluteClipmapLevel(FVirtualShadowMapProjectionShaderData BaseProjectionData, FLWCVector3 WorldPosition)
{
	float DistanceToClipmapOrigin = length(LWCToFloat(LWCSubtract(WorldPosition, BaseProjectionData.ClipmapWorldOrigin)));
	return log2(DistanceToClipmapOrigin);
}

#line 26 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
int CalcClipmapLevel(FVirtualShadowMapProjectionShaderData BaseProjectionData, FLWCVector3 WorldPosition)
{
	float BiasedLevel = CalcAbsoluteClipmapLevel(BaseProjectionData, WorldPosition) + BaseProjectionData.ResolutionLodBias;
	return int(floor(BiasedLevel));
}

#line 58 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
struct FVirtualShadowMapSample
{
	float Depth;
	uint MipLevel;
	int VirtualShadowMapId;		
	bool bValid;
	uint2 VirtualTexelAddress;
	float2 VirtualTexelAddressFloat;
	uint2 PhysicalTexelAddress;
};

#line 69 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSample InitVirtualShadowMapSample()
{
	FVirtualShadowMapSample Result;
	Result.Depth = 0.0f;
	Result.MipLevel = 0;
	Result.VirtualShadowMapId = -1; 
	Result.bValid = false;
	Result.VirtualTexelAddress = Result.PhysicalTexelAddress = uint2(0U, 0U);
	Result.VirtualTexelAddressFloat = float2(0.0f, 0.0f);
	return Result;
}

#line 81 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float SampleVirtualShadowMapPhysicalDepth(uint2 PhysicalTexelAddress)
{
	return asfloat(VirtualShadowMap.PhysicalPagePool.Load(uint4(PhysicalTexelAddress, 0, 0)));
}

#line 105 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSample SampleVirtualShadowMap(int VirtualShadowMapId, float2 ShadowMapUV)
{
	FShadowPageTranslationResult Page = ShadowVirtualToPhysicalUV(VirtualShadowMapId, ShadowMapUV);
	if (Page.bValid)
	{
		FVirtualShadowMapSample Result = InitVirtualShadowMapSample();
		Result.bValid = true;
		Result.MipLevel = Page.LODOffset;
		Result.VirtualShadowMapId = VirtualShadowMapId;
		Result.VirtualTexelAddress = Page.VirtualTexelAddress;
		Result.VirtualTexelAddressFloat = Page.VirtualTexelAddressFloat;
		Result.PhysicalTexelAddress = Page.PhysicalTexelAddress;
		Result.Depth = SampleVirtualShadowMapPhysicalDepth(Result.PhysicalTexelAddress);
		return Result;
	}

	return InitVirtualShadowMapSample();
}

#line 126 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
struct FVirtualShadowMapClipmapRelativeTransform
{
	float Scale;
	float3 Bias;
};

#line 135 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapClipmapRelativeTransform CalcClipmapRelativeTransform(int ClipmapId, int LevelOffset)
{
	const FVirtualShadowMapProjectionShaderData ProjectionDataA = GetVirtualShadowMapProjectionData(ClipmapId);
	const FVirtualShadowMapProjectionShaderData ProjectionDataB = GetVirtualShadowMapProjectionData(ClipmapId + LevelOffset);

	float2 OffsetA = float2(ProjectionDataA.ClipmapCornerRelativeOffset);
	float2 OffsetB = float2(ProjectionDataB.ClipmapCornerRelativeOffset);

	FVirtualShadowMapClipmapRelativeTransform Result;
	Result.Scale = LevelOffset >= 0 ? rcp(float(1U << LevelOffset)) : float(1U << (-LevelOffset));
	Result.Bias.xy = 0.25f * (OffsetB - Result.Scale * OffsetA);

	
	float OffsetZA = ProjectionDataA.ShadowViewToClipMatrix[3][2];
	float OffsetZB = ProjectionDataB.ShadowViewToClipMatrix[3][2];
	Result.Bias.z = OffsetZB - Result.Scale * OffsetZA;

	return Result;
}

#line 158 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
uint2 CalcClipmapOffsetLevelPage(uint2 BasePage, int ClipmapId, uint LevelOffset)
{
	const FVirtualShadowMapProjectionShaderData ProjectionDataA = GetVirtualShadowMapProjectionData(ClipmapId);
	const FVirtualShadowMapProjectionShaderData ProjectionDataB = GetVirtualShadowMapProjectionData(ClipmapId + LevelOffset);

	const int OffsetScale = (128 >> 2);
	int2 BasePageOffset  = OffsetScale * ProjectionDataA.ClipmapCornerRelativeOffset;
	int2 LevelPageOffset = OffsetScale * ProjectionDataB.ClipmapCornerRelativeOffset;
	return (BasePage - BasePageOffset + (LevelPageOffset << LevelOffset)) >> LevelOffset;
}

#line 171 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSample SampleVirtualShadowMapClipmap(int VirtualShadowMapId, float2 ShadowMapUV)
{
	FVirtualShadowMapSample Result = InitVirtualShadowMapSample();



	uint2 BasePage = uint2(ShadowMapUV * 128);
	FShadowPhysicalPage PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(VirtualShadowMapId, 0, BasePage));
	if (PhysicalPageEntry.bAnyLODValid)
	{	
		uint ClipmapLevelOffset = PhysicalPageEntry.LODOffset;
		int ClipmapLevelId = VirtualShadowMapId + ClipmapLevelOffset;

		Result.VirtualTexelAddressFloat = ShadowMapUV * float(CalcLevelDimsTexels(0));
		Result.VirtualTexelAddress = uint2(Result.VirtualTexelAddressFloat);
		float DepthLevelScale = 1.0f;
		float DepthLevelBias = 0.0f;

		
		if (ClipmapLevelOffset > 0)
		{
			
			
			uint2 vPage = CalcClipmapOffsetLevelPage(BasePage, VirtualShadowMapId, ClipmapLevelOffset);
			uint2 VirtualTexelAddressMin = vPage * 128;
			uint2 VirtualTexelAddressMax = VirtualTexelAddressMin + (128 - 1);

			FVirtualShadowMapClipmapRelativeTransform Transform = CalcClipmapRelativeTransform(VirtualShadowMapId, ClipmapLevelOffset);
			float2 ClipmapUV = ShadowMapUV * Transform.Scale + Transform.Bias.xy;
			DepthLevelScale = Transform.Scale;
			DepthLevelBias = Transform.Bias.z;

			
			Result.VirtualTexelAddressFloat = ClipmapUV * float(CalcLevelDimsTexels(0));
			Result.VirtualTexelAddress = clamp(uint2(Result.VirtualTexelAddressFloat), VirtualTexelAddressMin, VirtualTexelAddressMax);

			PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(ClipmapLevelId, 0, vPage));
		}

		
		if (PhysicalPageEntry.bThisLODValid)
		{
			Result.PhysicalTexelAddress = 
				PhysicalPageEntry.PhysicalAddress * 128 +
				(Result.VirtualTexelAddress & 127);

			
			Result.Depth = (SampleVirtualShadowMapPhysicalDepth(Result.PhysicalTexelAddress) - DepthLevelBias) / DepthLevelScale;
			Result.MipLevel = 0;
			Result.VirtualShadowMapId = ClipmapLevelId;
			Result.bValid = true;
		}
	}
#line 239 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"


	return Result;
}

#line 244 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float ComputeVirtualShadowMapOptimalSlopeBias(
	
	int RequestedVirtualShadowMapId,
	FVirtualShadowMapSample SmSample,
	float3 TranslatedWorldPosition,
	float3 EstimatedGeoWorldNormal,
	bool bClamp = true)
{
	FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(SmSample.VirtualShadowMapId);

	
	float4 NormalPlaneTranslatedWorld = float4(EstimatedGeoWorldNormal, -dot(EstimatedGeoWorldNormal, TranslatedWorldPosition));
	float4 NormalPlaneUV = mul(NormalPlaneTranslatedWorld, ProjectionData.TranslatedWorldToShadowUVNormalMatrix);

	float2 DepthSlopeUV = -NormalPlaneUV.xy / NormalPlaneUV.z;
	float MipLevelDim = float(CalcLevelDimsTexels(SmSample.MipLevel));
	float2 TexelCenter = float2(SmSample.VirtualTexelAddress) + 0.5f;
	float2 TexelCenterOffset = TexelCenter - SmSample.VirtualTexelAddressFloat;
	float2 TexelCenterOffsetUV = TexelCenterOffset / MipLevelDim;
	
	float OptimalSlopeBias = 2.0f * max(0.0f, dot(DepthSlopeUV, TexelCenterOffsetUV));
	
	
	OptimalSlopeBias = bClamp ? min(OptimalSlopeBias, abs(100.0f * ProjectionData.ShadowViewToClipMatrix._33)) : OptimalSlopeBias;

	
	
	
	OptimalSlopeBias *= float(1u << (SmSample.VirtualShadowMapId - RequestedVirtualShadowMapId));

	return OptimalSlopeBias;
}

#line 279 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float ComputeOccluderDistanceOrtho(float4x4 ShadowViewToClip, float OccluderDepth, float ReceiverDepth)
{
	float OccluderViewZ = (OccluderDepth - ShadowViewToClip._43) / ShadowViewToClip._33;
	float ReceiverViewZ = (ReceiverDepth - ShadowViewToClip._43) / ShadowViewToClip._33;

	
	float Result = ReceiverViewZ - OccluderViewZ;
	return max(1e-6f, Result);
}

#line 291 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float ComputeOccluderDistancePerspective(float4x4 ShadowViewToClip, float OccluderDepth, float ReceiverDepth, float ReceiverDistance)
{
	float OccluderViewZ = ShadowViewToClip._43 / (OccluderDepth - ShadowViewToClip._33);
	float ReceiverViewZ = ShadowViewToClip._43 / (ReceiverDepth - ShadowViewToClip._33);

	
	float OccluderDistance = (ReceiverDistance / ReceiverViewZ) * OccluderViewZ;
	float Result = ReceiverDistance - OccluderDistance;	
	return max(1e-6f, Result);
}

#line 302 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
uint VirtualShadowMapGetCubeFace( float3 Dir )
{
	
	if( abs(Dir.x) >= abs(Dir.y) && abs(Dir.x) >= abs(Dir.z) )
		return Dir.x > 0 ? 0 : 1;
	else if( abs(Dir.y) > abs(Dir.z) )
		return Dir.y > 0 ? 2 : 3;
	else
		return Dir.z > 0 ? 4 : 5;
}

#line 313 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
struct FVirtualShadowMapSampleResult
{
	bool bValid;
	float ShadowFactor;	
	float OccluderDistance;

	
	uint ClipmapIndexOrMipLevel;
	uint RayCount;
	uint2 VirtualTexelAddress;
	uint2 PhysicalTexelAddress;
	float3 GeneralDebug;		
};

#line 328 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult InitVirtualShadowMapSampleResult()
{
	FVirtualShadowMapSampleResult Result;
	Result.bValid = false;
	Result.ShadowFactor = 1.0f;
	Result.OccluderDistance = -1.0f;
	Result.ClipmapIndexOrMipLevel = 0;
	Result.VirtualTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	Result.PhysicalTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	Result.RayCount = 0;
	Result.GeneralDebug = float3(0, 0, 0);
	return Result;
}

#line 355 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMapInner(int VirtualShadowMapId, FLWCVector3 WorldPosition, float RayStartDistance, bool bUseOptimalBias, float3 EstimatedGeoWorldNormal)
{
	RayStartDistance = max(RayStartDistance, 0.0f);

	FVirtualShadowMapProjectionShaderData BaseProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);

	if (BaseProjectionData.LightType == 0)
	{
		const int FirstClipmapLevel = BaseProjectionData.ClipmapLevel;
		const int ClipmapLevel = CalcClipmapLevel(BaseProjectionData, WorldPosition);
		int ClipmapIndex = max(0, ClipmapLevel - FirstClipmapLevel);

		
		if (ClipmapIndex < BaseProjectionData.ClipmapLevelCountRemaining)
		{
			int ClipmapLevelVirtualShadowMapId = VirtualShadowMapId + ClipmapIndex;
			FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(ClipmapLevelVirtualShadowMapId);

			
			float3 ShadowTranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ProjectionData.PreViewTranslation));
			float4 ShadowUVz = mul(float4(ShadowTranslatedWorldPosition, 1.0f), ProjectionData.TranslatedWorldToShadowUVMatrix);
			
			FVirtualShadowMapSample SmSample;
			SmSample = SampleVirtualShadowMapClipmap(ClipmapLevelVirtualShadowMapId, ShadowUVz.xy);
			
			if (SmSample.bValid)
			{
				int SampledClipmapIndex = SmSample.VirtualShadowMapId - VirtualShadowMapId;

				FVirtualShadowMapSampleResult Result = InitVirtualShadowMapSampleResult();
				Result.bValid = true;
				Result.ShadowFactor = 1.0f;
				Result.OccluderDistance = -1.0f;
				Result.ClipmapIndexOrMipLevel = ClipmapIndex;
				Result.VirtualTexelAddress = SmSample.VirtualTexelAddress;
				Result.PhysicalTexelAddress = SmSample.PhysicalTexelAddress;
				Result.RayCount = 1;

				float OptimalSlopeBias = bUseOptimalBias 
					? ComputeVirtualShadowMapOptimalSlopeBias(ClipmapLevelVirtualShadowMapId, SmSample, ShadowTranslatedWorldPosition, EstimatedGeoWorldNormal)
					: 0.0f;
				
				float RayStartBias = -RayStartDistance * ProjectionData.ShadowViewToClipMatrix._33;
				float BiasedDepth = SmSample.Depth - OptimalSlopeBias - RayStartBias;

				if (BiasedDepth > ShadowUVz.z)
				{
					Result.ShadowFactor = 0.0f;
					Result.OccluderDistance = ComputeOccluderDistanceOrtho(
						ProjectionData.ShadowViewToClipMatrix,
						SmSample.Depth,
						ShadowUVz.z);
				}

				return Result;
			}
		}
	}
	else
	{
		float3 ShadowTranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, BaseProjectionData.PreViewTranslation));

		if (BaseProjectionData.LightType != 2)
		{
			VirtualShadowMapId += VirtualShadowMapGetCubeFace(ShadowTranslatedWorldPosition);
			BaseProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);
		}

		
		float4 ShadowUVz = mul(float4(ShadowTranslatedWorldPosition, 1.0f), BaseProjectionData.TranslatedWorldToShadowUVMatrix);
		ShadowUVz.xyz /= ShadowUVz.w;

		FVirtualShadowMapSample SmSample = SampleVirtualShadowMap(VirtualShadowMapId, ShadowUVz.xy);
		if (SmSample.bValid)
		{
			FVirtualShadowMapSampleResult Result = InitVirtualShadowMapSampleResult();
			Result.bValid = true;
			Result.ShadowFactor = 1.0f;
			Result.OccluderDistance = -1.0f;
			Result.ClipmapIndexOrMipLevel = SmSample.MipLevel;
			Result.VirtualTexelAddress = SmSample.VirtualTexelAddress;
			Result.PhysicalTexelAddress = SmSample.PhysicalTexelAddress;
			Result.RayCount = 1;

			float OptimalSlopeBias = bUseOptimalBias 
				? ComputeVirtualShadowMapOptimalSlopeBias(VirtualShadowMapId, SmSample, ShadowTranslatedWorldPosition, EstimatedGeoWorldNormal)
				: 0.0f;

			float RayStartBias = -RayStartDistance * BaseProjectionData.ShadowViewToClipMatrix._33 / ShadowUVz.w;
			float BiasedDepth = SmSample.Depth - OptimalSlopeBias - RayStartBias;

			if (BiasedDepth > ShadowUVz.z)
			{
				Result.ShadowFactor = 0.0f;
				
				float ReceiverDistance = length(ShadowTranslatedWorldPosition);
				Result.OccluderDistance = RayStartDistance + ComputeOccluderDistancePerspective(
					BaseProjectionData.ShadowViewToClipMatrix,
					SmSample.Depth,
					ShadowUVz.z,
					ReceiverDistance);
			}

			return Result;
		}
	}

	
	return InitVirtualShadowMapSampleResult();
}

#line 467 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMap(int VirtualShadowMapId, FLWCVector3 WorldPosition, float RayStartDistance, float3 EstimatedGeoWorldNormal)
{
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, true, EstimatedGeoWorldNormal);
}

#line 471 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMap(int VirtualShadowMapId, FLWCVector3 WorldPosition, float RayStartDistance = 0.0f)
{
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, false, float3(0, 0, 0));
}

#line 477 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMapTranslatedWorld(int VirtualShadowMapId, float3 TranslatedWorldPosition, float RayStartDistance, float3 EstimatedGeoWorldNormal)
{
	FLWCVector3 WorldPosition = LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, true, EstimatedGeoWorldNormal);
}

#line 482 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMapTranslatedWorld(int VirtualShadowMapId, float3 TranslatedWorldPosition, float RayStartDistance = 0.0f)
{
	FLWCVector3 WorldPosition = LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, false, float3(0, 0, 0));
}

#line 3 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float4x4 GetLocalToWorld()
{
	return SparseVoxelUniformBuffer.LocalToWorld;
}

#line 8 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float4x4 GetWorldToLocal()
{
	return SparseVoxelUniformBuffer.WorldToLocal;
}

#line 13 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float3 GetLocalBoundsOrigin()
{
	return SparseVoxelUniformBuffer.LocalBoundsOrigin;
}

#line 18 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float3 GetLocalBoundsExtent()
{
	return SparseVoxelUniformBuffer.LocalBoundsExtent;
}

#line 33 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float GetStepSize()
{
	return SparseVoxelUniformBuffer.StepSize;
}

#line 38 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float GetStepFactor()
{
	return SparseVoxelUniformBuffer.StepFactor;
}

#line 43 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float GetShadowStepSize()
{
	return SparseVoxelUniformBuffer.ShadowStepSize;
}

#line 48 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float GetShadowStepFactor()
{
	return SparseVoxelUniformBuffer.ShadowStepFactor;
}

#line 53 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
uint3 GetVolumeResolution()
{
	return SparseVoxelUniformBuffer.VolumeResolution;
}

#line 58 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
uint GetNumVoxels()
{
	return SparseVoxelUniformBuffer.NumVoxelsBuffer[0];
}

#line 63 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
FVoxelDataPacked GetVoxelDataPacked(uint VoxelIndex)
{
	return SparseVoxelUniformBuffer.VoxelBuffer[VoxelIndex];
}

#line 68 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
struct FVolumeSampleContext
{
	float3 UVW;
	float MipLevel;
};

#line 74 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
FVolumeSampleContext CreateVolumeSampleContext(float3 LocalPosition, float3 WorldPosition, float MipLevel)
{
	float3 LocalBoundsMin = GetLocalBoundsOrigin() - GetLocalBoundsExtent();
	float3 LocalBoundsMax = GetLocalBoundsOrigin() + GetLocalBoundsExtent();

	FVolumeSampleContext VolumeSampleContext;
	VolumeSampleContext.UVW = (LocalPosition - LocalBoundsMin) / (LocalBoundsMax - LocalBoundsMin);
	VolumeSampleContext.MipLevel = MipLevel;

	return VolumeSampleContext;
}

#line 86 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float3 SampleExtinction(inout FVolumeSampleContext Context)
{
	float3 Extinction = Texture3DSampleLevel(
		SparseVoxelUniformBuffer.ExtinctionTexture,
		SparseVoxelUniformBuffer.TextureSampler,
		Context.UVW,
		Context.MipLevel).rgb;

	return Extinction;
}

#line 97 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float3 SampleEmission(inout FVolumeSampleContext Context)
{
	float3 Emission = Texture3DSampleLevel(
		SparseVoxelUniformBuffer.EmissionTexture,
		SparseVoxelUniformBuffer.TextureSampler,
		Context.UVW,
		Context.MipLevel).xyz;

	return Emission;
}

#line 108 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesSparseVoxelUniformBufferUtils.ush"
float3 SampleAlbedo(inout FVolumeSampleContext Context)
{
	float3 Albedo = Texture3DSampleLevel(
		SparseVoxelUniformBuffer.AlbedoTexture,
		SparseVoxelUniformBuffer.TextureSampler,
		Context.UVW,
		Context.MipLevel).xyz;

	return Albedo;
}

#line 4 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesTracingUtils.ush"
float2 IntersectAABB(float3 RayOrigin, float3 RayDirection, float RayTMin, float RayTMax, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0 / RayDirection;
	
	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;
	
	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;
	
	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);
	
	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;
	
	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));
	
	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));
	
	return float2(max(BoxIntersections.x, RayTMin), min(BoxIntersections.y, RayTMax));
}

#line 29 "/Engine/Private/DeferredShadingCommon.ush"
Texture2D SceneDepthTexture;

#line 9 "/Engine/Private/DynamicLightingCommon.ush"
float3 GetDeferredLightTranslatedWorldPosition()
{
	return DeferredLightUniforms.TranslatedWorldPosition;
}

#line 18 "/Engine/Private/DynamicLightingCommon.ush"
float RadialAttenuationMask(float3 WorldLightVector)
{
	float NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);
	return 1.0f - saturate(NormalizeDistanceSquared);
}

#line 23 "/Engine/Private/DynamicLightingCommon.ush"
float RadialAttenuation(float3 WorldLightVector, float FalloffExponent)
{
	
	return pow(RadialAttenuationMask(WorldLightVector), FalloffExponent);

	
	
	
	
	















}

#line 56 "/Engine/Private/DynamicLightingCommon.ush"
float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}

#line 60 "/Engine/Private/DynamicLightingCommon.ush"
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}

#line 22 "/Engine/Private/CapsuleLight.ush"
struct FCapsuleLight
{
	float3	LightPos[2];
	float	Length;
	float	Radius;
	float	SoftRadius;
	float	DistBiasSqr;
};

#line 78 "/Engine/Private/CapsuleLight.ush"
float3 LineIrradiance( float3 N, float3 Line0, float3 Line1, float DistanceBiasSqr, out float CosSubtended, out float BaseIrradiance, out float NoL )
{
	float LengthSqr0 = dot( Line0, Line0 );
	float LengthSqr1 = dot( Line1, Line1 );
	float InvLength0 = rsqrt( LengthSqr0 );
	float InvLength1 = rsqrt( LengthSqr1 );
	float InvLength01 = InvLength0 * InvLength1;

	CosSubtended = dot( Line0, Line1 ) * InvLength01;
	BaseIrradiance = InvLength01 / ( CosSubtended * 0.5 + 0.5 + DistanceBiasSqr * InvLength01 );
	NoL = 0.5 * ( dot(N, Line0) * InvLength0 + dot(N, Line1) * InvLength1 );
	
	float3 VectorIrradiance = ( BaseIrradiance * 0.5 ) * ( Line0 * InvLength0 + Line1 * InvLength1 );
	return VectorIrradiance;
}

#line 95 "/Engine/Private/CapsuleLight.ush"
float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{

	float SinAlpha = sqrt( SinAlphaSqr );

	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
#line 115 "/Engine/Private/CapsuleLight.ush"

		
		
		
		
		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );

	}




	return NoL;
}

#line 20 "/Engine/Private/HairShadingCommon.ush"
struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;

	float  OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;

	uint ScatteringComponent;
};

#line 33 "/Engine/Private/HairShadingCommon.ush"
FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;

	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent = 0x1u | 0x2u | 0x4u | (bMultipleScatterEnable ? 0x20u : 0);

	return o;
}

#line 23 "/Engine/Private/LightData.ush"
struct FRectTexture
{
	float2 AtlasUVOffset;
	float2 AtlasUVScale;
	float  AtlasMaxLevel;
};

#line 39 "/Engine/Private/LightData.ush"
struct FRectLightData
{
	float		 BarnCosAngle;
	float		 BarnLength;
	FRectTexture AtlasData;
};

#line 112 "/Engine/Private/LightData.ush"
struct FLightShaderParameters
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float2 SpotAngles;
	float  SpecularScale;
	float  SourceRadius;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float  RectLightAtlasMaxLevel;
	float  IESAtlasIndex;
};

#line 142 "/Engine/Private/LightData.ush"
struct FDeferredLightData
{
	float3 TranslatedWorldPosition;
	float   InvRadius;
	
	float3 Color;
	float   FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float  SoftSourceRadius;
	float2  SpotAngles;
	float  SourceRadius;
	float  SourceLength;
	float   SpecularScale;
	float  ContactShadowLength;
	
	float ContactShadowCastingIntensity;
	
	float ContactShadowNonCastingIntensity;
	float2 DistanceFadeMAD;
	float4  ShadowMapChannelMask;
	
	bool   ContactShadowLengthInWS;
	
	bool   bInverseSquared;
	
	bool   bRadialLight;
	
	bool   bSpotLight;
	bool   bRectLight;
	
	uint   ShadowedBits;
	
	FRectLightData RectLightData;
	
	float  IESAtlasIndex;
	
	FHairTransmittanceData HairTransmittance;
};

#line 14 "/Engine/Private/RectLight.ush"
struct FRect
{
	float3		Origin;
	float3x3	Axis;
	float2		Extent;
	float2		FullExtent;
	float2		Offset;
};

#line 39 "/Engine/Private/RectLight.ush"
float3 RectIrradianceLambert( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{







	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );		
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );		
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );		
	

	float x0 = LocalPosition.x - Rect.Extent.x;
	float x1 = LocalPosition.x + Rect.Extent.x;
	float y0 = LocalPosition.y - Rect.Extent.y;
	float y1 = LocalPosition.y + Rect.Extent.y;
	float z0 = LocalPosition.z;
	float z0Sqr = z0 * z0;
	

	float3 v0 = float3( x0, y0, z0 );
	float3 v1 = float3( x1, y0, z0 );
	float3 v2 = float3( x1, y1, z0 );
	float3 v3 = float3( x0, y1, z0 );

	float3 L0 = v0 * rsqrt( dot( v0.xy, v0.xy ) + z0Sqr );	
	float3 L1 = v1 * rsqrt( dot( v1.xy, v1.xy ) + z0Sqr );	
	float3 L2 = v2 * rsqrt( dot( v2.xy, v2.xy ) + z0Sqr );	
	float3 L3 = v3 * rsqrt( dot( v3.xy, v3.xy ) + z0Sqr );	
	

	









	float c01 = dot( L0, L1 );
	float c12 = dot( L1, L2 );
	float c23 = dot( L2, L3 );
	float c30 = dot( L3, L0 );
	












	
	

	float w01 = ( 1.5708 - 0.175 * c01 ) * rsqrt( c01 + 1 );	
	float w12 = ( 1.5708 - 0.175 * c12 ) * rsqrt( c12 + 1 );	
	float w23 = ( 1.5708 - 0.175 * c23 ) * rsqrt( c23 + 1 );	
	float w30 = ( 1.5708 - 0.175 * c30 ) * rsqrt( c30 + 1 );	
	









	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	



	
	L = L.x * Rect.Axis[0] + L.y * Rect.Axis[1] + L.z * Rect.Axis[2];	

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;

	
	L *= InvLength;

	BaseIrradiance = 0.5 * Length;

	
	
	
	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);

	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );

	return L;
}

#line 651 "/Engine/Private/RectLight.ush"
FRect GetRect(
	float3 ToLight, 
	float3 LightDataDirection, 
	float3 LightDataTangent, 
	float LightDataSourceRadius, 
	float LightDataSourceLength, 
	float LightDataRectLightBarnCosAngle, 
	float LightDataRectLightBarnLength,
	bool bComputeVisibleRect)
{
	
	FRect Rect;
	Rect.Origin = ToLight;
	Rect.Axis[1] = LightDataTangent;
	Rect.Axis[2] = LightDataDirection;
	Rect.Axis[0] = cross( Rect.Axis[1], Rect.Axis[2] );
	Rect.Extent = float2(LightDataSourceRadius, LightDataSourceLength);
	Rect.FullExtent = Rect.Extent;
	Rect.Offset = 0;

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	if (bComputeVisibleRect && LightDataRectLightBarnCosAngle > 0.035f)
	{
		const float3 LightdPdv = -Rect.Axis[1];
		const float3 LightdPdu = -Rect.Axis[0];
		const float2 LightExtent = float2(LightDataSourceRadius, LightDataSourceLength);
		const float BarnLength = LightDataRectLightBarnLength;
	
		
		float3 S_Light = mul(Rect.Axis, ToLight);

		
		
		
		const float CosTheta = LightDataRectLightBarnCosAngle;
		const float SinTheta = sqrt(1 - CosTheta * CosTheta);
		const float BarnDepth = min(S_Light.z, CosTheta * BarnLength);
		const float S_ratio = BarnDepth / max(0.0001f, CosTheta * BarnLength);
		const float D_B = SinTheta * BarnLength * S_ratio;
		
		
		const float2 SignS = sign(S_Light.xy);
		S_Light.xy = SignS * max(abs(S_Light.xy), LightExtent + D_B.xx);
		
		
		const float3 C = float3(SignS * (LightExtent + D_B.xx), BarnDepth);
			
		
		
		const float3 SProj = S_Light - C;
		const float CosEta = max(SProj.z, 0.001f);
		const float2 SinEta = abs(SProj.xy);
		const float2 TanEta = abs(SProj.xy) / CosEta;
		const float2 D_S = BarnDepth * TanEta;

		
		
		
		const float2 MinXY = clamp(-LightExtent + (D_S - D_B.xx) * max(0, -SignS), -LightExtent, LightExtent);
		const float2 MaxXY = clamp( LightExtent - (D_S - D_B.xx) * max(0,  SignS), -LightExtent, LightExtent);
		const float2 RectOffset = 0.5f * (MinXY + MaxXY);

		Rect.Extent = 0.5f * (MaxXY - MinXY);
		Rect.Origin = Rect.Origin + LightdPdu * RectOffset.x + LightdPdv * RectOffset.y;
		Rect.Offset = -RectOffset;
		Rect.FullExtent = LightExtent;
	}

	return Rect;
}

#line 742 "/Engine/Private/RectLight.ush"
FRect GetRect(FLightShaderParameters In, float3 TranslatedWorldPosition)
{
	return GetRect(In.TranslatedWorldPosition - TranslatedWorldPosition,
		In.Direction,
		In.Tangent,
		In.SourceRadius,
		In.SourceLength,
		In.RectLightBarnCosAngle,
		In.RectLightBarnLength,
		true);
}

#line 70 "/Engine/Private/TransmissionCommon.ush"
float GetSubSurfaceTransmission( float OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }

#line 71 "/Engine/Private/TransmissionCommon.ush"
float4 GetSubSurfaceTransmission( float4 OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }

#line 79 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicPhase()
{
	return 1.0f / (4.0f * PI);
}

#line 78 "/Engine/Private/ColorSpace.ush"
float3 Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}

#line 14 "/Engine/Private/CapsuleLightIntegrate.ush"
float IntegrateLight( FCapsuleLight Capsule, bool bInverseSquared )
{
	float Falloff;

	[branch]
	if( Capsule.Length > 0 )
	{
		float NoL;
		float LineCosSubtended = 1;
		LineIrradiance( 0, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float3 ToLight = Capsule.LightPos[0];
		float DistSqr = dot( ToLight, ToLight );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );
	}

	Falloff = bInverseSquared ? Falloff : 1;

	return Falloff;
}

#line 47 "/Engine/Private/RectLightIntegrate.ush"
float IntegrateLight( FRect Rect )
{
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	float NoL;
	float Falloff;




	float3 L = RectIrradianceLambert( 0, Rect, Falloff, NoL );







	
	return Falloff;
}

#line 245 "/Engine/Private/DeferredLightingCommon.ush"
float GetLocalLightAttenuation(
	float3 TranslatedWorldPosition, 
	FDeferredLightData LightData, 
	inout float3 ToLight, 
	inout float3 L)
{
	ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;
		
	float DistanceSqr = dot( ToLight, ToLight );
	L = ToLight * rsqrt( DistanceSqr );

	float LightMask;
	if (LightData.bInverseSquared)
	{
		LightMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );
		
		
		


	}
	else
	{
		LightMask = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}

	if (LightData.bSpotLight)
	{
		LightMask *= SpotAttenuation(L, -LightData.Direction, LightData.SpotAngles);
	}

	if( LightData.bRectLight )
	{
		
		LightMask = dot( LightData.Direction, L ) < 0 ? 0 : LightMask;
	}

	return LightMask;
}

#line 287 "/Engine/Private/DeferredLightingCommon.ush"
FRect GetRect(float3 ToLight, FDeferredLightData LightData)
{
	return GetRect(
		ToLight, 
		LightData.Direction, 
		LightData.Tangent, 
		LightData.SourceRadius, 
		LightData.SourceLength, 
		LightData.RectLightData.BarnCosAngle, 
		LightData.RectLightData.BarnLength,
		1);
}

#line 300 "/Engine/Private/DeferredLightingCommon.ush"
FCapsuleLight GetCapsule( float3 ToLight, FDeferredLightData LightData )
{
	FCapsuleLight Capsule;
	Capsule.Length = LightData.SourceLength;
	Capsule.Radius = LightData.SourceRadius;
	Capsule.SoftRadius = LightData.SoftSourceRadius;
	Capsule.DistBiasSqr = 1;
	Capsule.LightPos[0] = ToLight - 0.5 * Capsule.Length * LightData.Tangent;
	Capsule.LightPos[1] = ToLight + 0.5 * Capsule.Length * LightData.Tangent;
	return Capsule;
}

#line 9 "/Engine/Private/LightDataUniforms.ush"
FDeferredLightData InitDeferredLightFromUniforms(uint InLightType)
{
	const bool bIsRadial = InLightType != 0;

	FDeferredLightData Out;
	Out.TranslatedWorldPosition = GetDeferredLightTranslatedWorldPosition();
	Out.InvRadius				= DeferredLightUniforms.InvRadius;
	Out.Color					= DeferredLightUniforms.Color;
	Out.FalloffExponent			= DeferredLightUniforms.FalloffExponent;
	Out.Direction				= DeferredLightUniforms.Direction;
	Out.Tangent					= DeferredLightUniforms.Tangent;
	Out.SpotAngles				= DeferredLightUniforms.SpotAngles;
	Out.SourceRadius			= DeferredLightUniforms.SourceRadius;
	Out.SourceLength			= bIsRadial ? DeferredLightUniforms.SourceLength : 0;
	Out.SoftSourceRadius		= DeferredLightUniforms.SoftSourceRadius;
	Out.SpecularScale			= DeferredLightUniforms.SpecularScale;
	Out.ContactShadowLength		= abs(DeferredLightUniforms.ContactShadowLength);
	Out.ContactShadowLengthInWS = DeferredLightUniforms.ContactShadowLength < 0.0f;
	Out.ContactShadowCastingIntensity = DeferredLightUniforms.ContactShadowCastingIntensity;
	Out.ContactShadowNonCastingIntensity = DeferredLightUniforms.ContactShadowNonCastingIntensity;
	Out.DistanceFadeMAD			= DeferredLightUniforms.DistanceFadeMAD;
	Out.ShadowMapChannelMask	= DeferredLightUniforms.ShadowMapChannelMask;
	Out.ShadowedBits			= DeferredLightUniforms.ShadowedBits;
	Out.bInverseSquared			= bIsRadial && DeferredLightUniforms.FalloffExponent == 0; 
	Out.bRadialLight			= bIsRadial;
	Out.bSpotLight				= InLightType == 2;
	Out.bRectLight				= InLightType == 3;

	Out.RectLightData.BarnCosAngle				= DeferredLightUniforms.RectLightBarnCosAngle;
	Out.RectLightData.BarnLength				= DeferredLightUniforms.RectLightBarnLength;
	Out.RectLightData.AtlasData.AtlasMaxLevel	= DeferredLightUniforms.RectLightAtlasMaxLevel;
	Out.RectLightData.AtlasData.AtlasUVOffset	= DeferredLightUniforms.RectLightAtlasUVOffset;
	Out.RectLightData.AtlasData.AtlasUVScale	= DeferredLightUniforms.RectLightAtlasUVScale;

	Out.HairTransmittance		= InitHairTransmittanceData();
	return Out;
}

#line 47 "/Engine/Private/LightDataUniforms.ush"
FDeferredLightData InitDeferredLightFromUniforms()
{
	uint LightType = 1;
	if (DeferredLightUniforms.SpotAngles.x > -2.0f)			{ LightType = 2; } 
	if (DeferredLightUniforms.RectLightBarnLength > -2.0f)	{ LightType = 3; }
	return InitDeferredLightFromUniforms(LightType);
}

#line 8 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesLightingUtils.ush"
FDeferredLightData InitDeferredLightFromUniforms(uint LightType, float VolumetricScatteringIntensity)
{
    FDeferredLightData DeferredLightData = InitDeferredLightFromUniforms(LightType);
	DeferredLightData.Color *= VolumetricScatteringIntensity;

    return DeferredLightData;
}

#line 49 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
int bApplyShadowTransmittance;

#line 58 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
float MaxShadowTraceDistance;

#line 70 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
RWTexture2D<float4> RWLightingTexture;

#line 88 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
SamplerState TextureSampler;

#line 138 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
StructuredBuffer<FVoxelDataPacked> VoxelBuffer;

#line 139 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
Buffer<uint> NumVoxelsBuffer;

#line 142 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
struct FRayMarchingTile
{
	uint2 PixelOffset;
	uint Voxels[2];

	
	uint Id;
	uint Padding[3];
};

#line 363 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
struct FTraceVoxelResult
{
	FVoxelData VoxelData;
	float2 HitT;
};

#line 369 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
FTraceVoxelResult TraceVoxels(float3 LocalRayOrigin, float3 LocalRayDirection, float LocalRayTMin, float LocalRayTMax,
	float3 LocalBoundsMin, float3 LocalBoundsMax)
{
	FTraceVoxelResult TraceVoxelResult;
	TraceVoxelResult.HitT.x = LocalRayTMax;
	TraceVoxelResult.HitT.y = LocalRayTMax;

	for (uint VoxelIndex = 0; VoxelIndex < GetNumVoxels(); ++VoxelIndex)
	{
		FVoxelData VoxelData = DecodeVoxelData(GetVoxelDataPacked(VoxelIndex), GetVolumeResolution());

		FBox VoxelBoundingBox = GetVoxelBoundingBox(VoxelData, GetVolumeResolution(), LocalBoundsMin, LocalBoundsMax);
		float2 HitT = IntersectAABB(LocalRayOrigin, LocalRayDirection, LocalRayTMin, LocalRayTMax, VoxelBoundingBox.Min, VoxelBoundingBox.Max);

		bool bIsHit = (HitT.y - HitT.x) > 0.0;
		if (bIsHit && (HitT.x < TraceVoxelResult.HitT.x))
		{
			TraceVoxelResult.HitT = HitT;
			TraceVoxelResult.VoxelData = VoxelData;
		}
	}

	return TraceVoxelResult;
}

#line 394 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
StructuredBuffer<FVoxelDataPacked> VoxelsPerTileBuffer;

#line 396 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
FTraceVoxelResult TraceVoxels(float3 LocalRayOrigin, float3 LocalRayDirection, float LocalRayTMin, float LocalRayTMax,
	float3 LocalBoundsMin, float3 LocalBoundsMax,
	uint VoxelStartIndex, uint VoxelEndIndex)
{
	FTraceVoxelResult TraceVoxelResult;
	TraceVoxelResult.HitT.x = LocalRayTMax;
	TraceVoxelResult.HitT.y = LocalRayTMax;

	for (uint VoxelIndex = VoxelStartIndex; VoxelIndex < VoxelEndIndex; ++VoxelIndex)
	{
		FVoxelData VoxelData = DecodeVoxelData(VoxelsPerTileBuffer[VoxelIndex], GetVolumeResolution());

		FBox VoxelBoundingBox = GetVoxelBoundingBox(VoxelData, GetVolumeResolution(), LocalBoundsMin, LocalBoundsMax);
		float2 HitT = IntersectAABB(LocalRayOrigin, LocalRayDirection, LocalRayTMin, LocalRayTMax, VoxelBoundingBox.Min, VoxelBoundingBox.Max);

		bool bIsHit = (HitT.y - HitT.x) > 0.0;
		if (bIsHit && (HitT.x < TraceVoxelResult.HitT.x))
		{
			TraceVoxelResult.HitT = HitT;
			TraceVoxelResult.VoxelData = VoxelData;
		}
	}

	return TraceVoxelResult;
}

#line 14 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesTransmittanceVolumeUtils.ush"
uint3 GetLightingCacheResolution()
{
	return LightingCacheResolution;
}

#line 19 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesTransmittanceVolumeUtils.ush"
float GetLightingCacheVoxelBias()
{
	return LightingCacheVoxelBias;
}

#line 13 "/Engine/Private/ShadowFilteringCommon.ush"
struct FPCFSamplerSettings
{
	Texture2D		ShadowDepthTexture;
	SamplerState	ShadowDepthTextureSampler;

	
	
	float4			ShadowBufferSize;

	
	float			SceneDepth;

	float			TransitionScale;

	
	bool			bSubsurface;

	
	bool			bTreatMaxDepthUnshadowed;

	
	float			DensityMulConstant;

	
	float2			ProjectionDepthBiasParameters;
};

#line 144 "/Engine/Private/ShadowFilteringCommon.ush"
float PCF1x1(float2 Fraction, float4 Values00)
{
	float2 HorizontalLerp00 = lerp(Values00.wx, Values00.zy, Fraction.xx);

	return lerp(HorizontalLerp00.x, HorizontalLerp00.y, Fraction.y);
}

#line 151 "/Engine/Private/ShadowFilteringCommon.ush"
float4 CalculateOcclusion(float4 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		float4 OccluderDistance = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float4 Occlusion = GetSubSurfaceTransmission(OccluderDistance, Settings.DensityMulConstant);
		
		return  select_internal( ShadowmapDepth > .99f , 1.0f , Occlusion );
	}
	else
	{
		
		
		
		float TransitionScale = Settings.TransitionScale;

		
		
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float4 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

#line 182 "/Engine/Private/ShadowFilteringCommon.ush"
float3 CalculateOcclusion(float3 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		
		
		
		float3 Thickness = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float3 Occlusion = saturate(FastExp(-Thickness * Settings.DensityMulConstant));
		
		return  select_internal( ShadowmapDepth > .99f , 1.0 , Occlusion );
	}
	else
	{
		
		
		
		float TransitionScale = Settings.TransitionScale;

		
		
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float3 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

#line 334 "/Engine/Private/ShadowFilteringCommon.ush"
float Manual1x1PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;	
	float2 Fraction = frac(TexelPos);

	
	float4 Samples;

	
	
	float2 QuadCenter = floor(TexelPos) + 1.0f;	
	Samples = Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, QuadCenter * Settings.ShadowBufferSize.zw);

	float4 Values00 = CalculateOcclusion(Samples, Settings);
	return PCF1x1(Fraction, Values00);
}

#line 53 "/Engine/Private/ForwardShadowingCommon.ush"
uint GetForwardLightingCascadeIndex(float4 CascadeEndDepths, float SceneDepth)
{
	float4 Count = float4(SceneDepth.xxxx >= CascadeEndDepths);
	return uint(Count.x + Count.y + Count.z + Count.w);
}

#line 59 "/Engine/Private/ForwardShadowingCommon.ush"
float ComputeDirectionalLightDynamicShadowing(float3 TranslatedWorldPosition, float SceneDepth, inout bool bShadowingFromValidUVArea)
{
	float ShadowFactor = 1;
	bShadowingFromValidUVArea = false;

	const uint NumCascades = ForwardLightData.NumDirectionalLightCascades;
	if (NumCascades > 0)
	{
		uint CascadeIndex = GetForwardLightingCascadeIndex(ForwardLightData.CascadeEndDepths, SceneDepth);
		if (CascadeIndex < NumCascades)
		{
			
			float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPosition, 1), ForwardLightData.DirectionalLightTranslatedWorldToShadowMatrix[CascadeIndex]);
			float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;
			float4 ShadowmapMinMax = ForwardLightData.DirectionalLightShadowmapMinMax[CascadeIndex];

			
			if (all( and_internal( ShadowUVs >= ShadowmapMinMax.xy , ShadowUVs <= ShadowmapMinMax.zw )))
			{
			
#line  91 "/Engine/Private/ForwardShadowingCommon.ush"

				
				float ShadowDepth = Texture2DSampleLevel(ForwardLightData.DirectionalLightShadowmapAtlas, ForwardLightData.ShadowmapSampler, ShadowUVs, 0).x;
				ShadowFactor = 1 - HomogeneousShadowPosition.z < ShadowDepth - ForwardLightData.DirectionalLightDepthBias.x;
			

				
				bShadowingFromValidUVArea = true;
			}
		}
	}

	return ShadowFactor;
}

#line 7 "/Engine/Private/ShadowProjectionCommon.ush"
Texture2D ShadowDepthTexture;

#line 8 "/Engine/Private/ShadowProjectionCommon.ush"
SamplerState ShadowDepthTextureSampler;

#line 12 "/Engine/Private/ShadowProjectionCommon.ush"
float4 ShadowBufferSize;

#line 17 "/Engine/Private/ShadowProjectionCommon.ush"
TextureCube ShadowDepthCubeTexture;

#line 26 "/Engine/Private/ShadowProjectionCommon.ush"
SamplerComparisonState ShadowDepthCubeTextureSampler;

#line 153 "/Engine/Private/ShadowProjectionCommon.ush"
float CubemapHardwarePCF(
	TextureCube InShadowDepthCubeTexture, SamplerComparisonState InShadowDepthCubeTextureSampler, float4x4 InShadowViewProjectionMatrices[6], float InInvShadowmapResolution,
	float3 WorldPosition, float3 LightPosition, float LightInvRadius, float DepthBias, float SlopeDepthBias, float MaxSlopeDepthBias)
{
	float Shadow = 1;

	float3 WorldSampleToLightVec = LightPosition - WorldPosition.xyz;
	float Distance = length(WorldSampleToLightVec);

	[branch]
	
	if (Distance * LightInvRadius < 1.0f)
	{
		float3 NormalizedLightVector = WorldSampleToLightVec / Distance;
		float3 SideVector = normalize(cross(NormalizedLightVector, float3(0, 0, 1)));
		float3 UpVector = cross(SideVector, NormalizedLightVector);

		SideVector *= InvShadowmapResolution;
		UpVector *= InvShadowmapResolution;

		
		float3 AbsLightVector = abs(WorldSampleToLightVec);
		float MaxCoordinate = max(AbsLightVector.x, max(AbsLightVector.y, AbsLightVector.z));

		int CubeFaceIndex = 0;
		if (MaxCoordinate == AbsLightVector.x)
		{
			CubeFaceIndex = AbsLightVector.x == WorldSampleToLightVec.x ? 0 : 1;
		}
		else if (MaxCoordinate == AbsLightVector.y)
		{
			CubeFaceIndex = AbsLightVector.y == WorldSampleToLightVec.y ? 2 : 3;
		}
		else
		{
			CubeFaceIndex = AbsLightVector.z == WorldSampleToLightVec.z ? 4 : 5;
		}

		
		float4 ShadowPosition = mul(float4(-WorldSampleToLightVec, 1), InShadowViewProjectionMatrices[CubeFaceIndex]);

		
		float CompareDistance = ShadowPosition.z / ShadowPosition.w;
		float ShadowDepthBias = - (DepthBias + SlopeDepthBias) / ShadowPosition.w;

		Shadow = 0;



		Shadow = InShadowDepthCubeTexture.SampleCmpLevelZero(InShadowDepthCubeTextureSampler, WorldSampleToLightVec, CompareDistance - ShadowDepthBias);

#line 239 "/Engine/Private/ShadowProjectionCommon.ush"

		
		










	}

	
	return 1.0f - Shadow;
}

#line 258 "/Engine/Private/ShadowProjectionCommon.ush"
float CubemapHardwarePCF(
	float3 WorldPosition, float3 LightPosition, float LightInvRadius, float DepthBias, float SlopeDepthBias, float MaxSlopeDepthBias)
{
	return CubemapHardwarePCF(ShadowDepthCubeTexture, ShadowDepthCubeTextureSampler, ShadowViewProjectionMatrices, InvShadowmapResolution,
		WorldPosition, LightPosition, LightInvRadius, DepthBias, SlopeDepthBias, MaxSlopeDepthBias);
}

#line 25 "/Engine/Private/VolumeLightingCommon.ush"
Texture2D StaticShadowDepthTexture;

#line 26 "/Engine/Private/VolumeLightingCommon.ush"
SamplerState StaticShadowDepthTextureSampler;

#line 39 "/Engine/Private/VolumeLightingCommonSampling.ush"
float ComputeVolumeShadowing(


	float3 TranslatedWorldPositionForLighting, bool bPointLight, bool bSpotLight, inout bool bShadowFactorValid)
{
	float ShadowFactor = 1;
	bShadowFactorValid = false;

	[branch]
	if (  bStaticallyShadowed )
	{
		bool bUsePointLightShadowing = bPointLight;

		[branch]
		if (bUsePointLightShadowing)
		{
			float3 LightVector = TranslatedWorldPositionForLighting - DeferredLightUniforms.TranslatedWorldPosition;
			float DistanceToLight = length(LightVector);
			float3 NormalizedLightVector = LightVector / DistanceToLight;

			
			float NormalizedTheta = atan2(NormalizedLightVector.y, NormalizedLightVector.x) / (2 * PI);
			
			float U = NormalizedTheta > 0 ? NormalizedTheta : 1 + NormalizedTheta;
			float V = acos(NormalizedLightVector.z) / PI;
			float2 UnwrappedUVs = float2(U, V);

			float ShadowDepth = Texture2DSampleLevel(  StaticShadowDepthTexture ,   StaticShadowDepthTextureSampler , UnwrappedUVs, 0).x;
			ShadowFactor = DistanceToLight * DeferredLightUniforms.InvRadius < ShadowDepth;
			bShadowFactorValid = true;
		}
		else
		{
			
			
			float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPositionForLighting, 1),   TranslatedWorldToStaticShadowMatrix );
			float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;

			
			if (all( and_internal( ShadowUVs >= 0 , ShadowUVs <= 1 )))
			{
				FPCFSamplerSettings Settings;
				Settings.ShadowDepthTexture =   StaticShadowDepthTexture ;
				Settings.ShadowDepthTextureSampler =   StaticShadowDepthTextureSampler ;
				Settings.ShadowBufferSize =   StaticShadowBufferSize ;
				Settings.SceneDepth = HomogeneousShadowPosition.z;
				Settings.TransitionScale = 40;
				Settings.bSubsurface = false;
				
				Settings.bTreatMaxDepthUnshadowed = true;
				Settings.DensityMulConstant = 0;
				Settings.ProjectionDepthBiasParameters = float2(0, 0);

				ShadowFactor = Manual1x1PCF(ShadowUVs, Settings);
				bShadowFactorValid = true;

				




			}
		}
	}		


	bool bUseCubemapShadowing = bPointLight;
	float DynamicShadowFactor = 1;

	if (bUseCubemapShadowing)
	{
		bShadowFactorValid = true;
		const float DepthBias = 0.03f * 512 *   InvShadowmapResolution ;
		const float SlopeDepthBias = 0;
		const float MaxSlopeDepthBias = 0;

		DynamicShadowFactor = CubemapHardwarePCF(
			  ShadowDepthCubeTexture ,   ShadowDepthCubeTextureSampler ,   ShadowViewProjectionMatrices ,   InvShadowmapResolution ,
			TranslatedWorldPositionForLighting, DeferredLightUniforms.TranslatedWorldPosition, DeferredLightUniforms.InvRadius, DepthBias, SlopeDepthBias, MaxSlopeDepthBias);
	}
	else
	{
		
		
		float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPositionForLighting, 1),   TranslatedWorldToShadowMatrix );
		float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;
		float SceneDepth = 1.0f - HomogeneousShadowPosition.z;

		
		if (all(ShadowUVs >=   ShadowmapMinMax .xy) && all(ShadowUVs <=   ShadowmapMinMax .zw))
		{
			bShadowFactorValid = true;
			
			float ShadowDepth = Texture2DSampleLevel(  ShadowDepthTexture ,   ShadowDepthTextureSampler , ShadowUVs, 0).x;
			DynamicShadowFactor = SceneDepth < ShadowDepth -   DepthBiasParameters .x;


			DynamicShadowFactor = saturate(DynamicShadowFactor + (ShadowDepth == 1.0f));

		}
	}

	
	if (!bPointLight && !bSpotLight)
	{
		float Depth = dot(TranslatedWorldPositionForLighting - GetPrimaryView().TranslatedWorldCameraOrigin, View.ViewForward);
		float DistanceFade = saturate(Depth *   ShadowInjectParams .z +   ShadowInjectParams .w);
		DynamicShadowFactor = lerp(DynamicShadowFactor, 1.0f, DistanceFade * DistanceFade);
	}

	
	ShadowFactor = min(ShadowFactor, DynamicShadowFactor);



	return ShadowFactor;
}

#line 24 "/Engine/Private/SHCommon.ush"
struct FTwoBandSHVector
{
	float4 V;
};

#line 30 "/Engine/Private/SHCommon.ush"
struct FTwoBandSHVectorRGB
{
	FTwoBandSHVector R;
	FTwoBandSHVector G;
	FTwoBandSHVector B;
};

#line 139 "/Engine/Private/SHCommon.ush"
float DotSH(FTwoBandSHVector A,FTwoBandSHVector B)
{
	float Result = dot(A.V, B.V);
	return Result;
}

#line 149 "/Engine/Private/SHCommon.ush"
float3 DotSH(FTwoBandSHVectorRGB A,FTwoBandSHVector B)
{
	float3 Result = 0;
	Result.r = DotSH(A.R,B);
	Result.g = DotSH(A.G,B);
	Result.b = DotSH(A.B,B);
	return Result;
}

#line 57 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
Texture3D<uint> RadianceProbeIndirectionTexture;

#line 58 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
Texture2D<float3> RadianceCacheFinalRadianceAtlas;

#line 59 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
Texture2D<float3> RadianceCacheFinalIrradianceAtlas;

#line 60 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
Texture2D<float2> RadianceCacheProbeOcclusionAtlas;

#line 61 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
Texture2D<float> RadianceCacheDepthAtlas;

#line 62 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
StructuredBuffer<float4> ProbeWorldOffset;

#line 64 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float4 RadianceProbeSettings[6];

#line 65 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float4 PaddedWorldPositionToRadianceProbeCoordBias[6];

#line 66 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float4 PaddedRadianceProbeCoordToWorldPositionBias[6];

#line 68 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float ReprojectionRadiusScale;

#line 69 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float InvClipmapFadeSize;

#line 71 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint2 ProbeAtlasResolutionInProbes;

#line 72 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float2 InvProbeFinalRadianceAtlasResolution;

#line 73 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float2 InvProbeFinalIrradianceAtlasResolution;

#line 74 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
float2 InvProbeDepthAtlasResolution;

#line 76 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint NumRadianceProbeClipmaps;

#line 77 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint RadianceProbeClipmapResolution;

#line 79 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint RadianceProbeResolution;

#line 81 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint FinalProbeResolution;

#line 83 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint CalculateIrradiance;

#line 84 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint IrradianceProbeResolution;

#line 86 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint OcclusionProbeResolution;

#line 88 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint FinalRadianceAtlasMaxMip;

#line 89 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint OverrideCacheOcclusionLighting;

#line 90 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint ShowBlackRadianceCacheLighting;

#line 92 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint ProbeAtlasResolutionModuloMask;

#line 93 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"
uint ProbeAtlasResolutionDivideShift;

#line 19 "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"
float3 ComputeTranslucencyGIVolumeUV(FLWCVector3 WorldPosition, FLWCInverseMatrix WorldToClip) 
{
	float4 NDCPosition = LWCMultiply(MakeLWCVector4(WorldPosition, 1.0f), WorldToClip);
	NDCPosition.xy /= NDCPosition.w;
	float NormalizedZSlice = log2(NDCPosition.w * LumenGIVolumeStruct.TranslucencyGIGridZParams.x + LumenGIVolumeStruct.TranslucencyGIGridZParams.y) * LumenGIVolumeStruct.TranslucencyGIGridZParams.z / (float)LumenGIVolumeStruct.TranslucencyGIGridSize.z;
	return float3(NDCPosition.xy * float2(.5f, -.5f) + .5f, NormalizedZSlice);
}

#line 27 "/Engine/Private/Lumen/LumenTranslucencyVolumeShared.ush"
FTwoBandSHVectorRGB GetTranslucencyGIVolumeLighting(FLWCVector3 WorldPosition, FLWCInverseMatrix WorldToClip, bool bTemporalFiltered)
{
	float3 VolumeUV = ComputeTranslucencyGIVolumeUV(WorldPosition, WorldToClip);

	float3 AmbientLightingVector;
	float3 DirectionalLightingVector;
	
	if (bTemporalFiltered)
	{
		AmbientLightingVector = Texture3DSampleLevel(LumenGIVolumeStruct.TranslucencyGIVolumeHistory0, LumenGIVolumeStruct.TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
		DirectionalLightingVector = Texture3DSampleLevel(LumenGIVolumeStruct.TranslucencyGIVolumeHistory1, LumenGIVolumeStruct.TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
	}
	else
	{
		AmbientLightingVector = Texture3DSampleLevel(LumenGIVolumeStruct.TranslucencyGIVolume0, LumenGIVolumeStruct.TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
		DirectionalLightingVector = Texture3DSampleLevel(LumenGIVolumeStruct.TranslucencyGIVolume1, LumenGIVolumeStruct.TranslucencyGIVolumeSampler, VolumeUV, 0).xyz;
	}

	
	FTwoBandSHVectorRGB TranslucentLighting;
	TranslucentLighting.R.V.x = AmbientLightingVector.r;
	TranslucentLighting.G.V.x = AmbientLightingVector.g;
	TranslucentLighting.B.V.x = AmbientLightingVector.b;
	float3 NormalizedAmbientColor = AmbientLightingVector.rgb / ( Luminance( AmbientLightingVector.rgb ) + 0.00001f );

	
	TranslucentLighting.R.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.r;
	TranslucentLighting.G.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.g;
	TranslucentLighting.B.V.yzw = DirectionalLightingVector.rgb * NormalizedAmbientColor.b;
	return TranslucentLighting;
}

#line 21 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
struct FRayMarchingContext
{
	
	float3 LocalRayOrigin;
	float3 LocalRayDirection;
	float LocalRayTMin;
	float LocalRayTMax;

	
	float3 WorldRayOrigin;
	float3 WorldRayDirection;
	float LocalToWorldScale;

	
	float Jitter;
	float StepSize;
	uint MaxStepCount;

	float MipLevel;

	
	int bApplyEmissionAndTransmittance;
	int bApplyDirectLighting;
	int bApplyShadowTransmittance;
};

#line 47 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
FRayMarchingContext CreateRayMarchingContext(
	
	float3 LocalRayOrigin,
	float3 LocalRayDirection,
	float LocalRayTMin,
	float LocalRayTMax,
	
	float3 WorldRayOrigin,
	float3 WorldRayDirection,
	
	float Jitter,
	float StepSize,
	uint MaxStepCount,
	
	int bApplyEmissionAndTransmittance,
	int bApplyDirectLighting,
	int bApplyShadowTransmittance
)
{
	FRayMarchingContext Context = (FRayMarchingContext)0;

	
	Context.LocalRayOrigin = LocalRayOrigin;
	Context.LocalRayDirection = LocalRayDirection;
	Context.LocalRayTMin = LocalRayTMin;
	Context.LocalRayTMax = LocalRayTMax;
	
	Context.WorldRayOrigin = WorldRayOrigin;
	Context.WorldRayDirection = WorldRayDirection;
	
	Context.Jitter = Jitter;
	Context.StepSize = StepSize;
	Context.MaxStepCount = MaxStepCount;
	
	Context.bApplyEmissionAndTransmittance = bApplyEmissionAndTransmittance;
	Context.bApplyDirectLighting = bApplyDirectLighting;
	Context.bApplyShadowTransmittance = bApplyShadowTransmittance;

	
	float3 LocalRayHit = LocalRayOrigin + LocalRayDirection * LocalRayTMax;
	float3 WorldRayHit = mul(float4(LocalRayHit, 1.0), GetLocalToWorld()).xyz;
	float WorldRayTMax = length(WorldRayHit - WorldRayOrigin);
	Context.LocalToWorldScale = WorldRayTMax / LocalRayTMax;

	Context.MipLevel = 0.0f;

	return Context;
}

#line 96 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float CalcStepSize(float3 LocalRayDirection, float LocalStepSize, float LocalStepFactor)
{
	if (LocalStepSize <= 0.0f)
	{
		
		float3 VoxelSize = GetLocalBoundsExtent() / float3(GetVolumeResolution());
		float3 tValues = abs(VoxelSize / LocalRayDirection);
		float VoxelStepSize = min(tValues.x, min(tValues.y, tValues.z));
		LocalStepSize = VoxelStepSize * LocalStepFactor;
	}
	return max(LocalStepSize, 0.01f);
}

#line 109 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float CalcStepSize(float3 LocalRayDirection)
{
	float LocalStepSize = GetStepSize();
	float LocalStepFactor = GetStepFactor();
	return CalcStepSize(LocalRayDirection, LocalStepSize, LocalStepFactor);
}

#line 116 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float CalcShadowStepSize(float3 LocalRayDirection)
{
	float LocalStepSize = GetShadowStepSize();
	float LocalStepFactor = GetShadowStepFactor();
	return CalcStepSize(LocalRayDirection, LocalStepSize, LocalStepFactor);
}

#line 123 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float CalcShadowBias()
{
	float3 VolumeBounds = 2.0f * GetLocalBoundsExtent();
	float3 VoxelSize = VolumeBounds / float3(GetLightingCacheResolution());
	float3 WorldVoxelSize = mul(float4(VoxelSize, 0), GetLocalToWorld()).xyz;
	float VoxelDiagonal = length(WorldVoxelSize);
	float WorldShadowBias = VoxelDiagonal * GetLightingCacheVoxelBias();
	return WorldShadowBias;
}

#line 133 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float RecalculateStepSize(inout FRayMarchingContext Context)
{
	
	float DiagonalLength = length(2.0 * GetLocalBoundsExtent());
	uint MaxStepCount = max(DiagonalLength / Context.StepSize, 1);

	float StepSize = (MaxStepCount > Context.MaxStepCount) ? DiagonalLength / Context.MaxStepCount : Context.StepSize;
	return StepSize;
}

#line 143 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
uint CalcStepCount(inout FRayMarchingContext Context)
{
	Context.StepSize = RecalculateStepSize(Context);

	float HitSpan = length(Context.LocalRayTMax - Context.LocalRayTMin);
	uint StepCount = max(ceil(HitSpan / Context.StepSize), 1);
	return StepCount;
}

#line 152 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float ComputeHardSurfaceShadowFactor(
	float3 TranslatedWorldPosition,
	FDeferredLightData LightData,
	uint LightType
)
{
	float HardSurfaceShadowFactor = 1.0;


	
	if (LightType == 0)
	{
		float SceneDepth = dot(TranslatedWorldPosition - GetPrimaryView().TranslatedWorldCameraOrigin, View.ViewForward);
		bool bShadowingFromValidUVArea = false;
		float ShadowFactor = ComputeDirectionalLightDynamicShadowing(TranslatedWorldPosition, SceneDepth, bShadowingFromValidUVArea);

		if (bShadowingFromValidUVArea)
		{
			HardSurfaceShadowFactor *= ShadowFactor;
		}
	}
	else 
	{
		bool bShadowingFromValidUVArea = false;
		float ShadowFactor = ComputeVolumeShadowing(TranslatedWorldPosition, LightData.bRadialLight && !LightData.bSpotLight, LightData.bSpotLight, bShadowingFromValidUVArea);

		if (bShadowingFromValidUVArea)
		{
			HardSurfaceShadowFactor *= ShadowFactor;
		}
	}


	if (VirtualShadowMapId != -1)
	{
		FVirtualShadowMapSampleResult VirtualShadowMapSample = SampleVirtualShadowMapTranslatedWorld(VirtualShadowMapId, TranslatedWorldPosition);
		HardSurfaceShadowFactor *= VirtualShadowMapSample.ShadowFactor;
	}




	return HardSurfaceShadowFactor;
}

#line 197 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
void RayMarchTransmittance(
	inout FRayMarchingContext RayMarchingContext,
	uint StepCount,
	inout float3 Transmittance
)
{
	for (uint StepIndex = 0; StepIndex < StepCount; ++StepIndex)
	{
		float LocalHitT = RayMarchingContext.LocalRayTMin + RayMarchingContext.StepSize * (RayMarchingContext.Jitter + StepIndex);
		float3 LocalPosition = RayMarchingContext.LocalRayOrigin + RayMarchingContext.LocalRayDirection * LocalHitT;
		float3 WorldPosition = RayMarchingContext.WorldRayOrigin + RayMarchingContext.WorldRayDirection * LocalHitT * RayMarchingContext.LocalToWorldScale;

		FVolumeSampleContext SampleContext = CreateVolumeSampleContext(LocalPosition, WorldPosition, RayMarchingContext.MipLevel);
		float3 Extinction = SampleExtinction(SampleContext);
		Transmittance *= exp(-Extinction * RayMarchingContext.StepSize);

		float Epsilon = 1.0e-7;
		if (all(Transmittance < Epsilon))
		{
			Transmittance = 0.0;
			break;
		}
	}
}

#line 222 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float3 ComputeTransmittance(
	inout FRayMarchingContext RayMarchingContext
)
{





	float3 Transmittance = 1.0;

	float3 LocalBoundsMin = GetLocalBoundsOrigin() - GetLocalBoundsExtent();
	float3 LocalBoundsMax = GetLocalBoundsOrigin() + GetLocalBoundsExtent();
	float2 HitT = IntersectAABB(RayMarchingContext.LocalRayOrigin, RayMarchingContext.LocalRayDirection, RayMarchingContext.LocalRayTMin, RayMarchingContext.LocalRayTMax,
		LocalBoundsMin, LocalBoundsMax);

	float HitSpan = HitT.y - HitT.x;
	if (HitSpan > 0.0)
	{
		RayMarchingContext.LocalRayTMin = HitT.x;
		RayMarchingContext.LocalRayTMax = HitT.y;
		uint StepCount = CalcStepCount(RayMarchingContext);

		RayMarchTransmittance(RayMarchingContext, StepCount, Transmittance);
	}

	return Transmittance;

}

#line 252 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float3 ComputeTransmittance(
	float3 WorldRayOrigin,
	float3 ToLight,
	uint MaxStepCount
)
{










	float3 WorldRayEnd = WorldRayOrigin + ToLight;
	float3 WorldRayDirection = normalize(ToLight);

	float3 LocalRayOrigin = mul(float4(WorldRayOrigin, 1.0), GetWorldToLocal()).xyz;
	float3 LocalRayEnd = mul(float4(WorldRayEnd, 1.0), GetWorldToLocal()).xyz;
	float3 LocalRayDirection = LocalRayEnd - LocalRayOrigin;
	float LocalRayTMin = 0.0;
	float LocalRayTMax = length(LocalRayDirection);
	LocalRayDirection /= LocalRayTMax;

	float ShadowBias = 0.5;
	float ShadowStepSize = CalcShadowStepSize(LocalRayDirection);
	int bApplyEmissionAndTransmittance = 0;
	int bApplyDirectLighting = 0;
	int bApplyShadowTransmittance = 0;

	FRayMarchingContext ShadowRayMarchingContext = CreateRayMarchingContext(
		LocalRayOrigin,
		LocalRayDirection,
		LocalRayTMin,
		LocalRayTMax,
		WorldRayOrigin,
		WorldRayDirection,
		ShadowBias,
		ShadowStepSize,
		MaxStepCount,
		bApplyEmissionAndTransmittance,
		bApplyDirectLighting,
		bApplyShadowTransmittance
		
	);

	float3 Transmittance = ComputeTransmittance(ShadowRayMarchingContext);


	return Transmittance;
}

#line 306 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
float3 ComputeInscattering(
	float3 WorldPosition,
	FDeferredLightData LightData,
	uint LightType,
	uint MaxStepCount,
	float WorldShadowBias,
	bool bApplyShadowTransmittance
)
{
	float3 Inscattering = 0.0;










	float3 L = LightData.Direction;
	
	float3 ToLight = L * 10000;

	float LightAttenuation = 1.0;
	float3 TranslatedWorldPosition =  LWCToFloat( LWCAdd(WorldPosition, GetPrimaryView().PreViewTranslation) );
	if (LightType != 0)
	{
		LightAttenuation = GetLocalLightAttenuation(TranslatedWorldPosition, LightData, ToLight, L);
		if (LightData.bRectLight)
		{
			FRect Rect = GetRect(ToLight, LightData);
			LightAttenuation *= IntegrateLight(Rect);
		}
		else
		{
			FCapsuleLight Capsule = GetCapsule(ToLight, LightData);
			Capsule.DistBiasSqr = 0;
			LightAttenuation *= IntegrateLight(Capsule, LightData.bInverseSquared);
		}
	}

	float HardSurfaceShadowFactor = ComputeHardSurfaceShadowFactor(TranslatedWorldPosition, LightData, LightType);
	Inscattering = LightData.Color * LightAttenuation * HardSurfaceShadowFactor;
	if (any(Inscattering > 0.0) && bApplyShadowTransmittance)
	{
		float3 BiasedWorldPosition = WorldPosition + L * WorldShadowBias;
		Inscattering *= ComputeTransmittance(BiasedWorldPosition, ToLight, MaxStepCount);
	}


	return Inscattering;
}

#line 384 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesRayMarchingUtils.ush"
void RayMarchSingleScattering(
	inout FRayMarchingContext RayMarchingContext,
	FDeferredLightData LightData,
	uint LightType,
	uint StepCount,
	inout float3 Radiance,
	inout float3 Transmittance
)
{
	float WorldShadowBias = CalcShadowBias();

	for (uint StepIndex = 0; StepIndex < StepCount; ++StepIndex)
	{
		float LocalHitT = RayMarchingContext.LocalRayTMin + RayMarchingContext.StepSize * (RayMarchingContext.Jitter + StepIndex);
		float3 LocalPosition = RayMarchingContext.LocalRayOrigin + RayMarchingContext.LocalRayDirection * LocalHitT;
		float3 WorldPosition = RayMarchingContext.WorldRayOrigin + RayMarchingContext.WorldRayDirection * LocalHitT * RayMarchingContext.LocalToWorldScale;
		FVolumeSampleContext SampleContext = CreateVolumeSampleContext(LocalPosition, WorldPosition, RayMarchingContext.MipLevel);

		if (RayMarchingContext.bApplyEmissionAndTransmittance)
		{
			float3 Emission = SampleEmission(SampleContext);
			Radiance += Emission * RayMarchingContext.StepSize * Transmittance;


			float3 TranslucencyEvaluationPosition = WorldPosition;
			FTwoBandSHVectorRGB TranslucencyGISH = GetTranslucencyGIVolumeLighting(LWCPromote(TranslucencyEvaluationPosition), GetPrimaryView().WorldToClip, true);

			FTwoBandSHVector RotatedHGZonalHarmonic;
			float3 CameraVector = normalize(RayMarchingContext.WorldRayDirection);
			float PhaseG = 0.0;
			RotatedHGZonalHarmonic.V = float4(1.0f, CameraVector.y, CameraVector.z, CameraVector.x) * float4(1.0f, PhaseG, PhaseG, PhaseG);
			float3 IndirectInscattering = max(DotSH(TranslucencyGISH, RotatedHGZonalHarmonic), 0);

			float3 Extinction = SampleExtinction(SampleContext);
			float3 Albedo = SampleAlbedo(SampleContext);
			float3 ScatteringCoefficient = Albedo * Extinction;

			
			Radiance += IndirectInscattering * ScatteringCoefficient * Transmittance * RayMarchingContext.StepSize;

		}

		float3 Extinction = SampleExtinction(SampleContext);
		if (RayMarchingContext.bApplyDirectLighting && (any(Extinction > 0.0)))
		{
			float3 Albedo = SampleAlbedo(SampleContext);
			if (any(Albedo > 0.0))
			{
				float3 Inscattering = ComputeInscattering(WorldPosition, LightData, LightType, RayMarchingContext.MaxStepCount, WorldShadowBias, RayMarchingContext.bApplyShadowTransmittance);

				float3 ScatteringCoefficient = Albedo * Extinction;
				float IsotropicPhase = 1.0 / (4.0 * PI);
				Radiance += Inscattering * ScatteringCoefficient * IsotropicPhase * Transmittance * RayMarchingContext.StepSize;
			}
		}

		
		Transmittance *= exp(-Extinction * RayMarchingContext.StepSize);

		float Epsilon = 1.0e-7;
		if (all(Transmittance < Epsilon))
		{
			Transmittance = 0.0;
			break;
		}
	}
}

#line 501 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
StructuredBuffer<FRayMarchingTile> RayMarchingTilesBuffer;

#line 504 "/Engine/Private/HeterogeneousVolumes/HeterogeneousVolumesPreshadingPipeline.usf"
[numthreads(64, 1, 1)]
void RenderSingleScatteringWithPreshadingCS(
	uint GroupId : SV_GroupID,
	uint GroupThreadId : SV_GroupThreadID
)
{
	
	FRayMarchingTile RayMarchingTile = RayMarchingTilesBuffer[GroupId];
	
	uint2 TileCoord = uint2(GroupThreadId % 8, GroupThreadId / 8);
	
	float2 PixelCoord = RayMarchingTile.PixelOffset + TileCoord;

	float3 Radiance = 0.0;
	float3 Transmittance = 1.0 - RWLightingTexture[PixelCoord].a;

	
	if (any(PixelCoord.xy >= View.ViewSizeAndInvSize.xy))
	{
		return;
	}
	PixelCoord += View.ViewRectMin.xy;

	
	float DeviceZ = SceneDepthTexture.Load(int3(PixelCoord, 0)).r;

	DeviceZ = max(0.000000000001, DeviceZ);


	
	float SceneDepth = min(ConvertFromDeviceZ(DeviceZ), MaxTraceDistance);
	DeviceZ = ConvertToDeviceZ(SceneDepth);

	float Jitter = bJitter ? InterleavedGradientNoise(PixelCoord, View.StateFrameIndexMod8) : 0.0;

	
	
	float3 WorldRayOrigin =  LWCToFloat( LWCSubtract(View.TranslatedWorldCameraOrigin, GetPrimaryView().PreViewTranslation) );
	float3 WorldRayEnd =  LWCToFloat( SvPositionToWorld(float4(PixelCoord + View.TemporalAAJitter.xy, DeviceZ, 1)) );
	float3 WorldRayDirection = WorldRayEnd - WorldRayOrigin;
	float WorldRayLength = length(WorldRayDirection);
	WorldRayDirection /= WorldRayLength;

	float3 LocalRayOrigin = mul(float4(WorldRayOrigin, 1.0), GetWorldToLocal()).xyz;
	float3 LocalRayEnd = mul(float4(WorldRayEnd, 1.0), GetWorldToLocal()).xyz;
	float3 LocalRayDirection = LocalRayEnd - LocalRayOrigin;
	float LocalRayLength = length(LocalRayDirection);
	LocalRayDirection /= LocalRayLength;

	float3 LocalBoundsMin = GetLocalBoundsOrigin() - GetLocalBoundsExtent();
	float3 LocalBoundsMax = GetLocalBoundsOrigin() + GetLocalBoundsExtent();

	
	float2 HitT = IntersectAABB(LocalRayOrigin, LocalRayDirection, 0.0, LocalRayLength, LocalBoundsMin, LocalBoundsMax);
	float HitSpan = HitT.y - HitT.x;
	if (HitSpan <= 0.0)
	{
		return;
	}


	float RayTMax = HitT.y;

	




		HitT = TraceVoxels(LocalRayOrigin, LocalRayDirection, 0.0, RayTMax, LocalBoundsMin, LocalBoundsMax).HitT;
	

	HitSpan = HitT.y - HitT.x;

	while (HitSpan > 0.0)

	{
		FRayMarchingContext RayMarchingContext = CreateRayMarchingContext(
			
			LocalRayOrigin,
			LocalRayDirection,
			HitT.x,
			HitT.y,
			
			WorldRayOrigin,
			WorldRayDirection,
			
			Jitter,
			CalcStepSize(LocalRayDirection),
			MaxStepCount,
			bApplyEmissionAndTransmittance,
			bApplyDirectLighting,
			0
		);

		const FDeferredLightData LightData = InitDeferredLightFromUniforms(LightType, VolumetricScatteringIntensity);
		uint StepCount = CalcStepCount(RayMarchingContext);

		RayMarchSingleScattering(
			RayMarchingContext,
			LightData,
			LightType,
			StepCount,
			Radiance,
			Transmittance
		);


	




		HitT = TraceVoxels(LocalRayOrigin, LocalRayDirection, HitT.y + 0.0001, RayTMax, LocalBoundsMin, LocalBoundsMax).HitT;
	

		HitSpan = HitT.y - HitT.x;

	}

	
	float3 Opacity = bApplyEmissionAndTransmittance ? 1.0 - Transmittance : 0.0;
	RWLightingTexture[PixelCoord].rgb += Radiance * View.PreExposure;
	RWLightingTexture[PixelCoord].a = Luminance(Opacity);












}



#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 376963194
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 450888449
VirtualShadowMap, 277877352
SparseVoxelUniformBuffer, 135336209
SceneTexturesStruct, 158338568
MobileSceneTextures, 147131313
DeferredLightUniforms, 10486016
Scene, 273683233
MobileBasePass, 118234733
TranslucentBasePass, 274269473
OpaqueBasePass, 159911720
BasePass, 148439296
ForwardLightData, 466097176
TranslucentSelfShadow, 93653256
Light1Shadow, 198182096
Light0Shadow, 198182096
LumenGIVolumeStruct, 188746712
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_GlobalDistanceFieldPageAtlasTextureSampler, View, 8, 25
View_GlobalDistanceFieldCoverageAtlasTextureSampler, View, 8, 26
View_GlobalDistanceFieldMipTextureSampler, View, 8, 27
View_AtmosphereTransmittanceTexture, View, 5, 28
View_AtmosphereTransmittanceTextureSampler, View, 8, 29
View_AtmosphereIrradianceTexture, View, 5, 30
View_AtmosphereIrradianceTextureSampler, View, 8, 31
View_AtmosphereInscatterTexture, View, 5, 32
View_AtmosphereInscatterTextureSampler, View, 8, 33
View_PerlinNoiseGradientTexture, View, 5, 34
View_PerlinNoiseGradientTextureSampler, View, 8, 35
View_PerlinNoise3DTexture, View, 5, 36
View_PerlinNoise3DTextureSampler, View, 8, 37
View_SobolSamplingTexture, View, 5, 38
View_SharedPointWrappedSampler, View, 8, 39
View_SharedPointClampedSampler, View, 8, 40
View_SharedBilinearWrappedSampler, View, 8, 41
View_SharedBilinearClampedSampler, View, 8, 42
View_SharedBilinearAnisoClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_SkyIrradianceEnvironmentMap, View, 6, 48
View_TransmittanceLutTexture, View, 5, 49
View_TransmittanceLutTextureSampler, View, 8, 50
View_SkyViewLutTexture, View, 5, 51
View_SkyViewLutTextureSampler, View, 8, 52
View_DistantSkyLightLutTexture, View, 5, 53
View_DistantSkyLightLutTextureSampler, View, 8, 54
View_CameraAerialPerspectiveVolume, View, 5, 55
View_CameraAerialPerspectiveVolumeSampler, View, 8, 56
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 57
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 58
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 59
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 60
View_HairScatteringLUTTexture, View, 5, 61
View_HairScatteringLUTSampler, View, 8, 62
View_GGXLTCMatTexture, View, 5, 63
View_GGXLTCMatSampler, View, 8, 64
View_GGXLTCAmpTexture, View, 5, 65
View_GGXLTCAmpSampler, View, 8, 66
View_SheenLTCTexture, View, 5, 67
View_SheenLTCSampler, View, 8, 68
View_ShadingEnergyGGXSpecTexture, View, 5, 69
View_ShadingEnergyGGXGlassTexture, View, 5, 70
View_ShadingEnergyClothSpecTexture, View, 5, 71
View_ShadingEnergyDiffuseTexture, View, 5, 72
View_ShadingEnergySampler, View, 8, 73
View_GlintTexture, View, 5, 74
View_GlintSampler, View, 8, 75
View_SimpleVolumeTexture, View, 5, 76
View_SimpleVolumeTextureSampler, View, 8, 77
View_SimpleVolumeEnvTexture, View, 5, 78
View_SimpleVolumeEnvTextureSampler, View, 8, 79
View_SSProfilesTexture, View, 5, 80
View_SSProfilesSampler, View, 8, 81
View_SSProfilesTransmissionSampler, View, 8, 82
View_SSProfilesPreIntegratedTexture, View, 5, 83
View_SSProfilesPreIntegratedSampler, View, 8, 84
View_SpecularProfileTexture, View, 5, 85
View_SpecularProfileSampler, View, 8, 86
View_WaterIndirection, View, 6, 87
View_WaterData, View, 6, 88
View_RectLightAtlasTexture, View, 5, 89
View_RectLightAtlasSampler, View, 8, 90
View_IESAtlasTexture, View, 5, 91
View_IESAtlasSampler, View, 8, 92
View_LandscapeWeightmapSampler, View, 8, 93
View_LandscapeIndirection, View, 6, 94
View_LandscapePerComponentData, View, 6, 95
View_VTFeedbackBuffer, View, 7, 96
View_PhysicsFieldClipmapBuffer, View, 6, 97
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
VirtualShadowMap_ProjectionData, VirtualShadowMap, 16, 0
VirtualShadowMap_PageTable, VirtualShadowMap, 16, 1
VirtualShadowMap_PageFlags, VirtualShadowMap, 16, 2
VirtualShadowMap_PageRectBounds, VirtualShadowMap, 16, 3
VirtualShadowMap_PhysicalPagePool, VirtualShadowMap, 9, 4
SparseVoxelUniformBuffer_ExtinctionTexture, SparseVoxelUniformBuffer, 9, 0
SparseVoxelUniformBuffer_EmissionTexture, SparseVoxelUniformBuffer, 9, 1
SparseVoxelUniformBuffer_AlbedoTexture, SparseVoxelUniformBuffer, 9, 2
SparseVoxelUniformBuffer_TextureSampler, SparseVoxelUniformBuffer, 8, 3
SparseVoxelUniformBuffer_NumVoxelsBuffer, SparseVoxelUniformBuffer, 16, 4
SparseVoxelUniformBuffer_VoxelBuffer, SparseVoxelUniformBuffer, 16, 5
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_ScenePartialDepthTexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 11
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 12
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 13
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_ScenePartialDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_ScenePartialDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 8
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 9
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 10
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 15
MobileSceneTextures_LocalLightTextureA, MobileSceneTextures, 9, 16
MobileSceneTextures_LocalLightTextureB, MobileSceneTextures, 9, 17
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 19
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 20
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 21
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 22
Scene_GPUScene_GPUSceneInstanceSceneData, Scene, 16, 0
Scene_GPUScene_GPUSceneInstancePayloadData, Scene, 16, 1
Scene_GPUScene_GPUScenePrimitiveSceneData, Scene, 16, 2
Scene_GPUScene_GPUSceneLightmapData, Scene, 16, 3
Scene_GPUScene_GPUSceneLightData, Scene, 16, 4
MobileBasePass_Fog_FogInscatteringColorCubemap, MobileBasePass, 5, 0
MobileBasePass_Fog_FogInscatteringColorSampler, MobileBasePass, 8, 1
MobileBasePass_Fog_IntegratedLightScattering, MobileBasePass, 9, 2
MobileBasePass_Fog_IntegratedLightScatteringSampler, MobileBasePass, 8, 3
MobileBasePass_Forward_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 4
MobileBasePass_Forward_ShadowmapSampler, MobileBasePass, 8, 5
MobileBasePass_Forward_DirectionalLightStaticShadowmap, MobileBasePass, 5, 6
MobileBasePass_Forward_StaticShadowmapSampler, MobileBasePass, 8, 7
MobileBasePass_Forward_ForwardLocalLightBuffer, MobileBasePass, 16, 8
MobileBasePass_Forward_NumCulledLightsGrid, MobileBasePass, 16, 9
MobileBasePass_Forward_CulledLightDataGrid32Bit, MobileBasePass, 16, 10
MobileBasePass_Forward_CulledLightDataGrid16Bit, MobileBasePass, 16, 11
MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 12
MobileBasePass_ForwardMMV_ShadowmapSampler, MobileBasePass, 8, 13
MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap, MobileBasePass, 5, 14
MobileBasePass_ForwardMMV_StaticShadowmapSampler, MobileBasePass, 8, 15
MobileBasePass_ForwardMMV_ForwardLocalLightBuffer, MobileBasePass, 16, 16
MobileBasePass_ForwardMMV_NumCulledLightsGrid, MobileBasePass, 16, 17
MobileBasePass_ForwardMMV_CulledLightDataGrid32Bit, MobileBasePass, 16, 18
MobileBasePass_ForwardMMV_CulledLightDataGrid16Bit, MobileBasePass, 16, 19
MobileBasePass_PlanarReflection_PlanarReflectionTexture, MobileBasePass, 5, 20
MobileBasePass_PlanarReflection_PlanarReflectionSampler, MobileBasePass, 8, 21
MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass, 9, 22
MobileBasePass_SceneTextures_SceneColorTextureSampler, MobileBasePass, 8, 23
MobileBasePass_SceneTextures_SceneDepthTexture, MobileBasePass, 9, 24
MobileBasePass_SceneTextures_SceneDepthTextureSampler, MobileBasePass, 8, 25
MobileBasePass_SceneTextures_ScenePartialDepthTexture, MobileBasePass, 9, 26
MobileBasePass_SceneTextures_ScenePartialDepthTextureSampler, MobileBasePass, 8, 27
MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass, 9, 28
MobileBasePass_SceneTextures_CustomDepthTextureSampler, MobileBasePass, 8, 29
MobileBasePass_SceneTextures_CustomStencilTexture, MobileBasePass, 12, 30
MobileBasePass_SceneTextures_SceneVelocityTexture, MobileBasePass, 9, 31
MobileBasePass_SceneTextures_SceneVelocityTextureSampler, MobileBasePass, 8, 32
MobileBasePass_SceneTextures_GBufferATexture, MobileBasePass, 9, 33
MobileBasePass_SceneTextures_GBufferBTexture, MobileBasePass, 9, 34
MobileBasePass_SceneTextures_GBufferCTexture, MobileBasePass, 9, 35
MobileBasePass_SceneTextures_GBufferDTexture, MobileBasePass, 9, 36
MobileBasePass_SceneTextures_SceneDepthAuxTexture, MobileBasePass, 9, 37
MobileBasePass_SceneTextures_LocalLightTextureA, MobileBasePass, 9, 38
MobileBasePass_SceneTextures_LocalLightTextureB, MobileBasePass, 9, 39
MobileBasePass_SceneTextures_GBufferATextureSampler, MobileBasePass, 8, 40
MobileBasePass_SceneTextures_GBufferBTextureSampler, MobileBasePass, 8, 41
MobileBasePass_SceneTextures_GBufferCTextureSampler, MobileBasePass, 8, 42
MobileBasePass_SceneTextures_GBufferDTextureSampler, MobileBasePass, 8, 43
MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler, MobileBasePass, 8, 44
MobileBasePass_QuadOverdraw, MobileBasePass, 13, 45
MobileBasePass_ReflectionsParameters_SkyLightCubemap, MobileBasePass, 9, 46
MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler, MobileBasePass, 8, 47
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap, MobileBasePass, 5, 48
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler, MobileBasePass, 8, 49
MobileBasePass_ReflectionsParameters_ReflectionCubemap, MobileBasePass, 5, 50
MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler, MobileBasePass, 8, 51
MobileBasePass_ReflectionsParameters_PreIntegratedGF, MobileBasePass, 5, 52
MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler, MobileBasePass, 8, 53
MobileBasePass_PreIntegratedGFTexture, MobileBasePass, 5, 54
MobileBasePass_PreIntegratedGFSampler, MobileBasePass, 8, 55
MobileBasePass_EyeAdaptationBuffer, MobileBasePass, 16, 56
MobileBasePass_RWOcclusionBufferUAV, MobileBasePass, 17, 57
MobileBasePass_AmbientOcclusionTexture, MobileBasePass, 9, 58
MobileBasePass_AmbientOcclusionSampler, MobileBasePass, 8, 59
MobileBasePass_ScreenSpaceShadowMaskTexture, MobileBasePass, 9, 60
MobileBasePass_ScreenSpaceShadowMaskSampler, MobileBasePass, 8, 61
TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 0
TranslucentBasePass_Shared_Forward_ShadowmapSampler, TranslucentBasePass, 8, 1
TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 2
TranslucentBasePass_Shared_Forward_StaticShadowmapSampler, TranslucentBasePass, 8, 3
TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer, TranslucentBasePass, 16, 4
TranslucentBasePass_Shared_Forward_NumCulledLightsGrid, TranslucentBasePass, 16, 5
TranslucentBasePass_Shared_Forward_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 6
TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 7
TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 8
TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler, TranslucentBasePass, 8, 9
TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 10
TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler, TranslucentBasePass, 8, 11
TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, TranslucentBasePass, 16, 12
TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid, TranslucentBasePass, 16, 13
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 14
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 15
TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass, 9, 16
TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, TranslucentBasePass, 8, 17
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, TranslucentBasePass, 5, 18
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, TranslucentBasePass, 8, 19
TranslucentBasePass_Shared_Reflection_ReflectionCubemap, TranslucentBasePass, 5, 20
TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, TranslucentBasePass, 8, 21
TranslucentBasePass_Shared_Reflection_PreIntegratedGF, TranslucentBasePass, 5, 22
TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler, TranslucentBasePass, 8, 23
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture, TranslucentBasePass, 5, 24
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler, TranslucentBasePass, 8, 25
TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap, TranslucentBasePass, 5, 26
TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler, TranslucentBasePass, 8, 27
TranslucentBasePass_Shared_Fog_IntegratedLightScattering, TranslucentBasePass, 9, 28
TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 29
TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap, TranslucentBasePass, 5, 30
TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler, TranslucentBasePass, 8, 31
TranslucentBasePass_Shared_FogISR_IntegratedLightScattering, TranslucentBasePass, 9, 32
TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 33
TranslucentBasePass_SceneTextures_SceneColorTexture, TranslucentBasePass, 9, 34
TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass, 9, 35
TranslucentBasePass_SceneTextures_ScenePartialDepthTexture, TranslucentBasePass, 9, 36
TranslucentBasePass_SceneTextures_GBufferATexture, TranslucentBasePass, 9, 37
TranslucentBasePass_SceneTextures_GBufferBTexture, TranslucentBasePass, 9, 38
TranslucentBasePass_SceneTextures_GBufferCTexture, TranslucentBasePass, 9, 39
TranslucentBasePass_SceneTextures_GBufferDTexture, TranslucentBasePass, 9, 40
TranslucentBasePass_SceneTextures_GBufferETexture, TranslucentBasePass, 9, 41
TranslucentBasePass_SceneTextures_GBufferFTexture, TranslucentBasePass, 9, 42
TranslucentBasePass_SceneTextures_GBufferVelocityTexture, TranslucentBasePass, 9, 43
TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture, TranslucentBasePass, 9, 44
TranslucentBasePass_SceneTextures_CustomDepthTexture, TranslucentBasePass, 9, 45
TranslucentBasePass_SceneTextures_CustomStencilTexture, TranslucentBasePass, 12, 46
TranslucentBasePass_SceneTextures_PointClampSampler, TranslucentBasePass, 8, 47
TranslucentBasePass_Strata_MaterialTextureArray, TranslucentBasePass, 9, 48
TranslucentBasePass_Strata_TopLayerTexture, TranslucentBasePass, 9, 49
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture, TranslucentBasePass, 9, 50
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler, TranslucentBasePass, 8, 51
TranslucentBasePass_OIT_OutOITSampleCount, TranslucentBasePass, 13, 52
TranslucentBasePass_OIT_OutOITSampleColor, TranslucentBasePass, 13, 53
TranslucentBasePass_OIT_OutOITSampleTrans, TranslucentBasePass, 13, 54
TranslucentBasePass_OIT_OutOITSampleDepth, TranslucentBasePass, 13, 55
TranslucentBasePass_HZBTexture, TranslucentBasePass, 9, 56
TranslucentBasePass_HZBSampler, TranslucentBasePass, 8, 57
TranslucentBasePass_PrevSceneColor, TranslucentBasePass, 12, 58
TranslucentBasePass_PrevSceneColorSampler, TranslucentBasePass, 8, 59
TranslucentBasePass_VolumetricCloudColor, TranslucentBasePass, 9, 60
TranslucentBasePass_VolumetricCloudColorSampler, TranslucentBasePass, 8, 61
TranslucentBasePass_VolumetricCloudDepth, TranslucentBasePass, 9, 62
TranslucentBasePass_VolumetricCloudDepthSampler, TranslucentBasePass, 8, 63
TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, TranslucentBasePass, 9, 64
TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, TranslucentBasePass, 9, 65
TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, TranslucentBasePass, 9, 66
TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, TranslucentBasePass, 9, 67
TranslucentBasePass_RadianceProbeIndirectionTexture, TranslucentBasePass, 9, 68
TranslucentBasePass_RadianceCacheFinalRadianceAtlas, TranslucentBasePass, 9, 69
TranslucentBasePass_RadianceCacheFinalIrradianceAtlas, TranslucentBasePass, 9, 70
TranslucentBasePass_RadianceCacheProbeOcclusionAtlas, TranslucentBasePass, 9, 71
TranslucentBasePass_RadianceCacheDepthAtlas, TranslucentBasePass, 9, 72
TranslucentBasePass_ProbeWorldOffset, TranslucentBasePass, 16, 73
TranslucentBasePass_Radiance, TranslucentBasePass, 9, 74
TranslucentBasePass_Normal, TranslucentBasePass, 9, 75
TranslucentBasePass_SceneDepth, TranslucentBasePass, 9, 76
TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass, 9, 77
TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass, 9, 78
TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass, 9, 79
TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass, 9, 80
TranslucentBasePass_TranslucencyGIVolumeSampler, TranslucentBasePass, 8, 81
TranslucentBasePass_PreIntegratedGFTexture, TranslucentBasePass, 5, 82
TranslucentBasePass_PreIntegratedGFSampler, TranslucentBasePass, 8, 83
TranslucentBasePass_EyeAdaptationBuffer, TranslucentBasePass, 16, 84
TranslucentBasePass_SceneColorCopyTexture, TranslucentBasePass, 9, 85
TranslucentBasePass_SceneColorCopySampler, TranslucentBasePass, 8, 86
TranslucentBasePass_BlueNoise_ScalarTexture, TranslucentBasePass, 5, 87
TranslucentBasePass_BlueNoise_Vec2Texture, TranslucentBasePass, 5, 88
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 7
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 8
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 9
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 10
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 11
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 14
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 15
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 16
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 26
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 28
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 30
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 32
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 33
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 34
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 35
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 37
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 41
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 42
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 44
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 46
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 47
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 48
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid32Bit, BasePass, 16, 6
BasePass_Forward_CulledLightDataGrid16Bit, BasePass, 16, 7
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 8
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 9
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 10
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 11
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 12
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 13
BasePass_ForwardISR_CulledLightDataGrid32Bit, BasePass, 16, 14
BasePass_ForwardISR_CulledLightDataGrid16Bit, BasePass, 16, 15
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 16
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 17
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 18
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 19
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 20
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 21
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 22
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 23
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 24
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 25
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 26
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 27
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 28
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 29
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 30
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 31
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 32
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 33
ForwardLightData_DirectionalLightShadowmapAtlas, ForwardLightData, 9, 0
ForwardLightData_ShadowmapSampler, ForwardLightData, 8, 1
ForwardLightData_DirectionalLightStaticShadowmap, ForwardLightData, 5, 2
ForwardLightData_StaticShadowmapSampler, ForwardLightData, 8, 3
ForwardLightData_ForwardLocalLightBuffer, ForwardLightData, 16, 4
ForwardLightData_NumCulledLightsGrid, ForwardLightData, 16, 5
ForwardLightData_CulledLightDataGrid32Bit, ForwardLightData, 16, 6
ForwardLightData_CulledLightDataGrid16Bit, ForwardLightData, 16, 7
TranslucentSelfShadow_Transmission0, TranslucentSelfShadow, 5, 0
TranslucentSelfShadow_Transmission1, TranslucentSelfShadow, 5, 1
TranslucentSelfShadow_Transmission0Sampler, TranslucentSelfShadow, 8, 2
TranslucentSelfShadow_Transmission1Sampler, TranslucentSelfShadow, 8, 3
Light1Shadow_ShadowDepthTexture, Light1Shadow, 9, 0
Light1Shadow_ShadowDepthTextureSampler, Light1Shadow, 8, 1
Light1Shadow_ShadowDepthCubeTexture, Light1Shadow, 9, 2
Light1Shadow_ShadowDepthCubeTexture2, Light1Shadow, 9, 3
Light1Shadow_ShadowDepthCubeTextureSampler, Light1Shadow, 8, 4
Light1Shadow_StaticShadowDepthTexture, Light1Shadow, 5, 5
Light1Shadow_StaticShadowDepthTextureSampler, Light1Shadow, 8, 6
Light0Shadow_ShadowDepthTexture, Light0Shadow, 9, 0
Light0Shadow_ShadowDepthTextureSampler, Light0Shadow, 8, 1
Light0Shadow_ShadowDepthCubeTexture, Light0Shadow, 9, 2
Light0Shadow_ShadowDepthCubeTexture2, Light0Shadow, 9, 3
Light0Shadow_ShadowDepthCubeTextureSampler, Light0Shadow, 8, 4
Light0Shadow_StaticShadowDepthTexture, Light0Shadow, 5, 5
Light0Shadow_StaticShadowDepthTextureSampler, Light0Shadow, 8, 6
LumenGIVolumeStruct_RadianceProbeIndirectionTexture, LumenGIVolumeStruct, 9, 0
LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas, LumenGIVolumeStruct, 9, 1
LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas, LumenGIVolumeStruct, 9, 2
LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas, LumenGIVolumeStruct, 9, 3
LumenGIVolumeStruct_RadianceCacheDepthAtlas, LumenGIVolumeStruct, 9, 4
LumenGIVolumeStruct_ProbeWorldOffset, LumenGIVolumeStruct, 16, 5
LumenGIVolumeStruct_Radiance, LumenGIVolumeStruct, 9, 6
LumenGIVolumeStruct_Normal, LumenGIVolumeStruct, 9, 7
LumenGIVolumeStruct_SceneDepth, LumenGIVolumeStruct, 9, 8
LumenGIVolumeStruct_TranslucencyGIVolume0, LumenGIVolumeStruct, 9, 9
LumenGIVolumeStruct_TranslucencyGIVolume1, LumenGIVolumeStruct, 9, 10
LumenGIVolumeStruct_TranslucencyGIVolumeHistory0, LumenGIVolumeStruct, 9, 11
LumenGIVolumeStruct_TranslucencyGIVolumeHistory1, LumenGIVolumeStruct, 9, 12
LumenGIVolumeStruct_TranslucencyGIVolumeSampler, LumenGIVolumeStruct, 8, 13
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM6 -entry=RenderSingleScatteringWithPreshadingCS -shaderPlatformName=PCD3D_SM6 -cs D:/UE BETA PRUEBAS/UEBETA/Saved/ShaderDebugInfo/PCD3D_SM6/Global/FRenderSingleScatteringWithPreshadingCS/36/HeterogeneousVolumesPreshadingPipeline.usf -cflags=9136246784 -nocrashreports
#endif /*DIRECT COMPILE*/
