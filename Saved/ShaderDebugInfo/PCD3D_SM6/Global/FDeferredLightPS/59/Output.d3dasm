;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xy w
; SV_Position              0   xyzw        1      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: 1e5e88645dba8af81b7e30c9f4f676e3
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB1            cb1     1
; View_SharedTrilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_PreIntegratedBRDFSampler     sampler      NA          NA      S1             s1     1
; View_GGXLTCMatSampler             sampler      NA          NA      S2             s2     1
; View_GGXLTCAmpSampler             sampler      NA          NA      S3             s3     1
; View_SSProfilesTransmissionSampler   sampler      NA          NA      S4             s4     1
; View_IESAtlasSampler              sampler      NA          NA      S5             s5     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S6             s6     1
; LightAttenuationTextureSampler    sampler      NA          NA      S7             s7     1
; View_PreIntegratedBRDF            texture     f32          2d      T0             t0     1
; View_GGXLTCMatTexture             texture     f32          2d      T1             t1     1
; View_GGXLTCAmpTexture             texture     f32          2d      T2             t2     1
; View_SSProfilesTexture            texture     f32          2d      T3             t3     1
; View_RectLightAtlasTexture        texture     f32          2d      T4             t4     1
; View_IESAtlasTexture              texture     f32     2darray      T5             t5     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T6             t6     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T7             t7     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T8             t8     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T9             t9     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d     T10            t10     1
; SceneTexturesStruct_GBufferETexture   texture     f32          2d     T11            t11     1
; SceneTexturesStruct_ScreenSpaceAOTexture   texture     f32          2d     T12            t12     1
; LightAttenuationTexture           texture     f32          2d     T13            t13     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 1 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 2 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 3 depends on inputs: { 0, 1, 3, 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2DArray<float>" = type { float, %"class.Texture2DArray<float>::mips_type" }
%"class.Texture2DArray<float>::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%struct.SamplerState = type { i32 }

define void @DeferredLightPixelMain() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 3 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %28 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %29 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = fdiv fast float %29, %31
  %33 = fdiv fast float %30, %31
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = fmul fast float %35, %32
  %38 = fmul fast float %36, %33
  %39 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %40 = extractvalue %dx.types.CBufRet.f32 %34, 3
  %41 = fadd fast float %37, %40
  %42 = fadd fast float %38, %39
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %45 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %46 = extractvalue %dx.types.ResRet.f32 %45, 0
  %47 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.f32 %47, 0
  %49 = fmul fast float %48, %46
  %50 = extractvalue %dx.types.CBufRet.f32 %47, 1
  %51 = fadd fast float %49, %50
  %52 = extractvalue %dx.types.CBufRet.f32 %47, 2
  %53 = fmul fast float %52, %46
  %54 = extractvalue %dx.types.CBufRet.f32 %47, 3
  %55 = fsub fast float %53, %54
  %56 = fdiv fast float 1.000000e+00, %55
  %57 = fadd fast float %51, %56
  %58 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %59 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %58, %dx.types.Handle %44, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %60 = extractvalue %dx.types.ResRet.f32 %59, 0
  %61 = extractvalue %dx.types.ResRet.f32 %59, 1
  %62 = extractvalue %dx.types.ResRet.f32 %59, 2
  %63 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %64 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %63, %dx.types.Handle %44, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %65 = extractvalue %dx.types.ResRet.f32 %64, 0
  %66 = extractvalue %dx.types.ResRet.f32 %64, 1
  %67 = extractvalue %dx.types.ResRet.f32 %64, 2
  %68 = extractvalue %dx.types.ResRet.f32 %64, 3
  %69 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %70 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %69, %dx.types.Handle %44, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %71 = extractvalue %dx.types.ResRet.f32 %70, 0
  %72 = extractvalue %dx.types.ResRet.f32 %70, 1
  %73 = extractvalue %dx.types.ResRet.f32 %70, 2
  %74 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %75 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %74, %dx.types.Handle %44, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %76 = extractvalue %dx.types.ResRet.f32 %75, 0
  %77 = extractvalue %dx.types.ResRet.f32 %75, 1
  %78 = extractvalue %dx.types.ResRet.f32 %75, 2
  %79 = extractvalue %dx.types.ResRet.f32 %75, 3
  %80 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %81 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %80, %dx.types.Handle %44, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %82 = extractvalue %dx.types.ResRet.f32 %81, 0
  %83 = extractvalue %dx.types.ResRet.f32 %81, 1
  %84 = extractvalue %dx.types.ResRet.f32 %81, 2
  %85 = extractvalue %dx.types.ResRet.f32 %81, 3
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = fmul fast float %87, %41
  %90 = fmul fast float %88, %42
  %91 = fptoui float %89 to i32
  %92 = fptoui float %90 to i32
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 149)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = fptoui float %94 to i32
  %96 = add i32 %91, %92
  %97 = add i32 %96, %95
  %98 = and i32 %97, 1
  %99 = icmp ne i32 %98, 0
  %100 = fmul fast float %68, 2.550000e+02
  %101 = fadd fast float %100, 5.000000e-01
  %102 = fptoui float %101 to i32
  %103 = and i32 %102, 15
  %104 = lshr i32 %102, 4
  %105 = fmul fast float %60, 2.000000e+00
  %106 = fmul fast float %61, 2.000000e+00
  %107 = fmul fast float %62, 2.000000e+00
  %108 = fadd fast float %105, -1.000000e+00
  %109 = fadd fast float %106, -1.000000e+00
  %110 = fadd fast float %107, -1.000000e+00
  %111 = and i32 %102, 14
  %112 = icmp eq i32 %111, 2
  %113 = and i32 %102, 12
  %114 = icmp eq i32 %113, 4
  %115 = or i1 %114, %112
  %116 = icmp eq i32 %111, 8
  %117 = or i1 %116, %115
  %118 = select i1 %117, float %76, float 0.000000e+00
  %119 = select i1 %117, float %77, float 0.000000e+00
  %120 = select i1 %117, float %78, float 0.000000e+00
  %121 = select i1 %117, float %79, float 0.000000e+00
  %122 = and i32 %104, 2
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %128, label %124

; <label>:124                                     ; preds = %0
  %125 = and i32 %104, 4
  %126 = icmp ne i32 %125, 0
  %127 = select i1 %126, float 0.000000e+00, float 1.000000e+00
  br label %128

; <label>:128                                     ; preds = %124, %0
  %129 = phi float [ %127, %124 ], [ %82, %0 ]
  %130 = phi float [ %127, %124 ], [ %83, %0 ]
  %131 = phi float [ %127, %124 ], [ %84, %0 ]
  %132 = phi float [ %127, %124 ], [ %85, %0 ]
  %133 = call float @dx.op.dot3.f32(i32 55, float %108, float %109, float %110, float %108, float %109, float %110)  ; Dot3(ax,ay,az,bx,by,bz)
  %134 = call float @dx.op.unary.f32(i32 25, float %133)  ; Rsqrt(value)
  %135 = fmul fast float %134, %108
  %136 = fmul fast float %134, %109
  %137 = fmul fast float %134, %110
  %138 = icmp eq i32 %103, 9
  %139 = select i1 %138, float 0.000000e+00, float %65
  %140 = fmul fast float %66, 0x3FB47AE140000000
  %141 = fsub fast float %71, %140
  %142 = fsub fast float %72, %140
  %143 = fsub fast float %73, %140
  %144 = fmul fast float %139, %141
  %145 = fmul fast float %139, %142
  %146 = fmul fast float %139, %143
  %147 = fadd fast float %144, %140
  %148 = fadd fast float %145, %140
  %149 = fadd fast float %146, %140
  %150 = icmp eq i32 %103, 5
  %151 = or i1 %150, %138
  br i1 %151, label %152, label %174

; <label>:152                                     ; preds = %128
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 245)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %155 = fcmp fast ogt float %154, 0.000000e+00
  br i1 %155, label %156, label %160

; <label>:156                                     ; preds = %152
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 2
  %159 = fcmp fast ogt float %158, 0.000000e+00
  br label %160

; <label>:160                                     ; preds = %156, %152
  %161 = phi i1 [ false, %152 ], [ %159, %156 ]
  %162 = fcmp fast une float %154, 0.000000e+00
  %163 = select i1 %162, float 1.000000e+00, float %71
  %164 = select i1 %162, float 1.000000e+00, float %72
  %165 = select i1 %162, float 1.000000e+00, float %73
  br i1 %161, label %166, label %174

; <label>:166                                     ; preds = %160
  %167 = uitofp i1 %99 to float
  %168 = xor i1 %99, true
  %169 = uitofp i1 %168 to float
  %170 = fmul fast float %169, %147
  %171 = fmul fast float %169, %148
  %172 = fmul fast float %169, %149
  %173 = fmul fast float %169, %66
  br label %174

; <label>:174                                     ; preds = %166, %160, %128
  %175 = phi float [ %147, %128 ], [ %170, %166 ], [ %147, %160 ]
  %176 = phi float [ %148, %128 ], [ %171, %166 ], [ %148, %160 ]
  %177 = phi float [ %149, %128 ], [ %172, %166 ], [ %149, %160 ]
  %178 = phi float [ %71, %128 ], [ %167, %166 ], [ %163, %160 ]
  %179 = phi float [ %72, %128 ], [ %167, %166 ], [ %164, %160 ]
  %180 = phi float [ %73, %128 ], [ %167, %166 ], [ %165, %160 ]
  %181 = phi float [ %66, %128 ], [ %173, %166 ], [ %66, %160 ]
  %182 = fmul fast float %178, %139
  %183 = fmul fast float %179, %139
  %184 = fmul fast float %180, %139
  %185 = fsub fast float %178, %182
  %186 = fsub fast float %179, %183
  %187 = fsub fast float %180, %184
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %190 = fmul fast float %189, %185
  %191 = fmul fast float %189, %186
  %192 = fmul fast float %189, %187
  %193 = extractvalue %dx.types.CBufRet.f32 %188, 0
  %194 = extractvalue %dx.types.CBufRet.f32 %188, 1
  %195 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %196 = fadd fast float %190, %193
  %197 = fadd fast float %191, %194
  %198 = fadd fast float %192, %195
  %199 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %200 = extractvalue %dx.types.CBufRet.f32 %199, 3
  %201 = fmul fast float %200, %175
  %202 = fmul fast float %200, %176
  %203 = fmul fast float %200, %177
  %204 = extractvalue %dx.types.CBufRet.f32 %199, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %199, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %199, 2
  %207 = fadd fast float %201, %204
  %208 = fadd fast float %202, %205
  %209 = fadd fast float %203, %206
  %210 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %211 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %210, %dx.types.Handle %44, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %212 = extractvalue %dx.types.ResRet.f32 %211, 0
  %213 = icmp eq i32 %103, 0
  br i1 %213, label %5874, label %214, !dx.controlflow.hints !46

; <label>:214                                     ; preds = %174
  %215 = fmul fast float %32, %57
  %216 = fmul fast float %33, %57
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 3
  %219 = bitcast float %218 to i32
  %220 = icmp ne i32 %219, 0
  %221 = select i1 %220, float %32, float %215
  %222 = select i1 %220, float %33, float %216
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.f32 %227, 0
  %229 = extractvalue %dx.types.CBufRet.f32 %227, 1
  %230 = extractvalue %dx.types.CBufRet.f32 %227, 2
  %231 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %232 = extractvalue %dx.types.CBufRet.f32 %231, 0
  %233 = extractvalue %dx.types.CBufRet.f32 %231, 1
  %234 = extractvalue %dx.types.CBufRet.f32 %231, 2
  %235 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %236 = extractvalue %dx.types.CBufRet.f32 %235, 0
  %237 = extractvalue %dx.types.CBufRet.f32 %235, 1
  %238 = extractvalue %dx.types.CBufRet.f32 %235, 2
  %239 = fmul fast float %221, %224
  %240 = call float @dx.op.tertiary.f32(i32 46, float %222, float %228, float %239)  ; FMad(a,b,c)
  %241 = call float @dx.op.tertiary.f32(i32 46, float %57, float %232, float %240)  ; FMad(a,b,c)
  %242 = fadd fast float %241, %236
  %243 = fmul fast float %221, %225
  %244 = call float @dx.op.tertiary.f32(i32 46, float %222, float %229, float %243)  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %57, float %233, float %244)  ; FMad(a,b,c)
  %246 = fadd fast float %245, %237
  %247 = fmul fast float %221, %226
  %248 = call float @dx.op.tertiary.f32(i32 46, float %222, float %230, float %247)  ; FMad(a,b,c)
  %249 = call float @dx.op.tertiary.f32(i32 46, float %57, float %234, float %248)  ; FMad(a,b,c)
  %250 = fadd fast float %249, %238
  %251 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %252 = extractvalue %dx.types.CBufRet.f32 %251, 0
  %253 = extractvalue %dx.types.CBufRet.f32 %251, 1
  %254 = extractvalue %dx.types.CBufRet.f32 %251, 2
  %255 = fsub fast float %242, %252
  %256 = fsub fast float %246, %253
  %257 = fsub fast float %250, %254
  %258 = call float @dx.op.dot3.f32(i32 55, float %255, float %256, float %257, float %255, float %256, float %257)  ; Dot3(ax,ay,az,bx,by,bz)
  %259 = call float @dx.op.unary.f32(i32 25, float %258)  ; Rsqrt(value)
  %260 = fmul fast float %255, %259
  %261 = fmul fast float %256, %259
  %262 = fmul fast float %257, %259
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 0
  %265 = extractvalue %dx.types.CBufRet.f32 %263, 1
  %266 = extractvalue %dx.types.CBufRet.f32 %263, 2
  %267 = extractvalue %dx.types.CBufRet.f32 %263, 3
  %268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %269 = extractvalue %dx.types.CBufRet.f32 %268, 0
  %270 = extractvalue %dx.types.CBufRet.f32 %268, 1
  %271 = extractvalue %dx.types.CBufRet.f32 %268, 2
  %272 = extractvalue %dx.types.CBufRet.f32 %268, 3
  %273 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %274 = extractvalue %dx.types.CBufRet.f32 %273, 0
  %275 = extractvalue %dx.types.CBufRet.f32 %273, 1
  %276 = extractvalue %dx.types.CBufRet.f32 %273, 2
  %277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %278 = extractvalue %dx.types.CBufRet.f32 %277, 0
  %279 = extractvalue %dx.types.CBufRet.f32 %277, 1
  %280 = extractvalue %dx.types.CBufRet.f32 %277, 2
  %281 = extractvalue %dx.types.CBufRet.f32 %277, 3
  %282 = fsub fast float -0.000000e+00, %281
  %283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %284 = extractvalue %dx.types.CBufRet.f32 %283, 3
  %285 = fsub fast float -0.000000e+00, %284
  %286 = extractvalue %dx.types.CBufRet.f32 %273, 3
  %287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %288 = extractvalue %dx.types.CBufRet.f32 %287, 2
  %289 = call float @dx.op.unary.f32(i32 6, float %288)  ; FAbs(value)
  %290 = fcmp fast olt float %288, 0.000000e+00
  %291 = extractvalue %dx.types.CBufRet.f32 %287, 3
  %292 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %293 = extractvalue %dx.types.CBufRet.f32 %292, 0
  %294 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.f32 %294, 0
  %296 = extractvalue %dx.types.CBufRet.f32 %294, 1
  %297 = extractvalue %dx.types.CBufRet.f32 %294, 2
  %298 = extractvalue %dx.types.CBufRet.f32 %294, 3
  %299 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.i32 %299, 2
  %301 = fcmp fast oeq float %272, 0.000000e+00
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 0
  %304 = extractvalue %dx.types.CBufRet.f32 %302, 1
  %305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %306 = extractvalue %dx.types.CBufRet.f32 %305, 2
  %307 = extractvalue %dx.types.CBufRet.f32 %302, 2
  %308 = extractvalue %dx.types.CBufRet.f32 %302, 3
  %309 = extractvalue %dx.types.CBufRet.f32 %305, 0
  %310 = extractvalue %dx.types.CBufRet.f32 %305, 1
  %311 = extractvalue %dx.types.CBufRet.f32 %305, 3
  %312 = fsub fast float -0.000000e+00, %274
  %313 = fsub fast float -0.000000e+00, %275
  %314 = fsub fast float -0.000000e+00, %276
  %315 = fcmp fast ult float %311, 0.000000e+00
  %316 = fsub fast float %264, %242
  %317 = fsub fast float %265, %246
  %318 = fsub fast float %266, %250
  %319 = call float @dx.op.dot3.f32(i32 55, float %316, float %317, float %318, float %316, float %317, float %318)  ; Dot3(ax,ay,az,bx,by,bz)
  %320 = call float @dx.op.unary.f32(i32 25, float %319)  ; Rsqrt(value)
  %321 = fmul fast float %320, %316
  %322 = fmul fast float %320, %317
  %323 = fmul fast float %320, %318
  br i1 %315, label %373, label %324

; <label>:324                                     ; preds = %214
  %325 = fmul fast float %279, %314
  %326 = fmul fast float %280, %313
  %327 = fsub fast float %325, %326
  %328 = fmul fast float %280, %312
  %329 = fmul fast float %278, %314
  %330 = fsub fast float %328, %329
  %331 = fmul fast float %278, %313
  %332 = fmul fast float %279, %312
  %333 = fsub fast float %331, %332
  %334 = call float @dx.op.dot3.f32(i32 55, float %327, float %330, float %333, float %327, float %330, float %333)  ; Dot3(ax,ay,az,bx,by,bz)
  %335 = call float @dx.op.unary.f32(i32 25, float %334)  ; Rsqrt(value)
  %336 = fmul fast float %335, %327
  %337 = fmul fast float %335, %330
  %338 = fmul fast float %335, %333
  %339 = fmul fast float %336, %321
  %340 = call float @dx.op.tertiary.f32(i32 46, float %322, float %337, float %339)  ; FMad(a,b,c)
  %341 = call float @dx.op.tertiary.f32(i32 46, float %323, float %338, float %340)  ; FMad(a,b,c)
  %342 = fmul fast float %321, %278
  %343 = call float @dx.op.tertiary.f32(i32 46, float %322, float %279, float %342)  ; FMad(a,b,c)
  %344 = call float @dx.op.tertiary.f32(i32 46, float %323, float %280, float %343)  ; FMad(a,b,c)
  %345 = call float @dx.op.dot3.f32(i32 55, float %321, float %322, float %323, float %312, float %313, float %314)  ; Dot3(ax,ay,az,bx,by,bz)
  %346 = call float @dx.op.unary.f32(i32 16, float %345)  ; Asin(value)
  %347 = fmul fast float %346, 0x3FD45F3060000000
  %348 = fadd fast float %347, 5.000000e-01
  %349 = fsub fast float -0.000000e+00, %341
  %350 = fsub fast float -0.000000e+00, %344
  %351 = fdiv fast float %350, %349
  %352 = call float @dx.op.unary.f32(i32 17, float %351)  ; Atan(value)
  %353 = fadd fast float %352, 0x400921FB60000000
  %354 = fadd fast float %352, 0xC00921FB60000000
  %355 = fcmp ogt float %341, -0.000000e+00
  %356 = fcmp oeq float %341, -0.000000e+00
  %357 = fcmp ole float %344, -0.000000e+00
  %358 = fcmp ogt float %344, -0.000000e+00
  %359 = and i1 %355, %357
  %360 = select i1 %359, float %353, float %352
  %361 = and i1 %355, %358
  %362 = select i1 %361, float %354, float %360
  %363 = and i1 %356, %358
  %364 = and i1 %356, %357
  %365 = fmul fast float %362, 0x3FC45F3060000000
  %366 = fadd fast float %365, 5.000000e-01
  %367 = select i1 %363, float 2.500000e-01, float %366
  %368 = select i1 %364, float 7.500000e-01, float %367
  %369 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 7, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<F32>
  %370 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %371 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %369, %dx.types.Handle %370, float %348, float %368, float %311, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %372 = extractvalue %dx.types.ResRet.f32 %371, 0
  br label %373

; <label>:373                                     ; preds = %324, %214
  %374 = phi float [ %372, %324 ], [ 1.000000e+00, %214 ]
  %375 = fmul fast float %374, %269
  %376 = fmul fast float %374, %270
  %377 = fmul fast float %374, %271
  %378 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %379 = extractvalue %dx.types.CBufRet.i32 %378, 1
  %380 = uitofp i32 %379 to float
  %381 = fmul fast float %380, 0x4040551EC0000000
  %382 = fmul fast float %380, 0x4027A147A0000000
  %383 = fadd fast float %381, %27
  %384 = fadd fast float %382, %28
  %385 = call float @dx.op.dot2.f32(i32 54, float %383, float %384, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %386 = call float @dx.op.unary.f32(i32 22, float %385)  ; Frc(value)
  %387 = fmul fast float %386, 0x404A7DD040000000
  %388 = call float @dx.op.unary.f32(i32 22, float %387)  ; Frc(value)
  %389 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %390 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %391 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %389, %dx.types.Handle %390, float %41, float %42, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %392 = extractvalue %dx.types.ResRet.f32 %391, 2
  %393 = extractvalue %dx.types.ResRet.f32 %391, 3
  %394 = fmul fast float %392, %392
  %395 = fmul fast float %393, %393
  %396 = fsub fast float -0.000000e+00, %260
  %397 = fsub fast float -0.000000e+00, %261
  %398 = fsub fast float -0.000000e+00, %262
  br i1 %301, label %399, label %406

; <label>:399                                     ; preds = %373
  %400 = fmul fast float %267, %267
  %401 = fmul fast float %400, %319
  %402 = fmul fast float %401, %401
  %403 = fsub fast float 1.000000e+00, %402
  %404 = call float @dx.op.unary.f32(i32 7, float %403)  ; Saturate(value)
  %405 = fmul fast float %404, %404
  br label %416

; <label>:406                                     ; preds = %373
  %407 = fmul fast float %316, %267
  %408 = fmul fast float %317, %267
  %409 = fmul fast float %318, %267
  %410 = call float @dx.op.dot3.f32(i32 55, float %407, float %408, float %409, float %407, float %408, float %409)  ; Dot3(ax,ay,az,bx,by,bz)
  %411 = call float @dx.op.unary.f32(i32 7, float %410)  ; Saturate(value)
  %412 = fsub fast float 1.000000e+00, %411
  %413 = call float @dx.op.unary.f32(i32 23, float %412)  ; Log(value)
  %414 = fmul fast float %413, %272
  %415 = call float @dx.op.unary.f32(i32 21, float %414)  ; Exp(value)
  br label %416

; <label>:416                                     ; preds = %406, %399
  %417 = phi float [ %405, %399 ], [ %415, %406 ]
  %418 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %321, float %322, float %323)  ; Dot3(ax,ay,az,bx,by,bz)
  %419 = fcmp fast olt float %418, 0.000000e+00
  %420 = select i1 %419, float 0.000000e+00, float %417
  %421 = fmul fast float %375, %420
  %422 = fmul fast float %376, %420
  %423 = fmul fast float %377, %420
  %424 = fcmp fast ogt float %420, 0.000000e+00
  br i1 %424, label %425, label %5859, !dx.controlflow.hints !47

; <label>:425                                     ; preds = %416
  %426 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 284)  ; CBufferLoadLegacy(handle,regIndex)
  %427 = extractvalue %dx.types.CBufRet.f32 %426, 1
  %428 = fmul fast float %427, %57
  %429 = icmp eq i32 %300, 0
  br i1 %429, label %444, label %430, !dx.controlflow.hints !48

; <label>:430                                     ; preds = %425
  %431 = call float @dx.op.dot4.f32(i32 56, float %295, float %296, float %297, float %298, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %432 = call float @dx.op.dot4.f32(i32 56, float %129, float %130, float %131, float %132, float %295, float %296, float %297, float %298)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %433 = fadd fast float %432, -1.000000e+00
  %434 = fmul fast float %433, %431
  %435 = fadd fast float %434, 1.000000e+00
  %436 = fmul fast float %394, %435
  %437 = fmul fast float %435, %395
  %438 = icmp ugt i32 %300, 1
  %439 = fcmp fast ogt float %289, 0.000000e+00
  %440 = and i1 %439, %438
  br i1 %440, label %441, label %444

; <label>:441                                     ; preds = %430
  %442 = select i1 %290, float 1.000000e+00, float %428
  %443 = fmul fast float %442, %289
  br label %444

; <label>:444                                     ; preds = %441, %430, %425
  %445 = phi float [ %395, %441 ], [ %395, %430 ], [ 1.000000e+00, %425 ]
  %446 = phi float [ %437, %441 ], [ %437, %430 ], [ 1.000000e+00, %425 ]
  %447 = phi float [ %436, %441 ], [ %436, %430 ], [ %212, %425 ]
  %448 = phi float [ %443, %441 ], [ 0.000000e+00, %430 ], [ 0.000000e+00, %425 ]
  %449 = icmp ult i32 %300, 2
  %450 = icmp eq i32 %103, 7
  %451 = and i1 %450, %449
  %452 = fmul fast float %428, 0x3FC99999A0000000
  %453 = select i1 %451, float %452, float %448
  %454 = select i1 %138, float 5.000000e-01, float %453
  %455 = fcmp fast ogt float %454, 0.000000e+00
  br i1 %455, label %456, label %797, !dx.controlflow.hints !49

; <label>:456                                     ; preds = %444
  %457 = fadd fast float %388, -5.000000e-01
  %458 = and i1 %450, %429
  %459 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %460 = extractvalue %dx.types.CBufRet.f32 %459, 0
  %461 = extractvalue %dx.types.CBufRet.f32 %459, 1
  %462 = extractvalue %dx.types.CBufRet.f32 %459, 2
  %463 = extractvalue %dx.types.CBufRet.f32 %459, 3
  %464 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %465 = extractvalue %dx.types.CBufRet.f32 %464, 0
  %466 = extractvalue %dx.types.CBufRet.f32 %464, 1
  %467 = extractvalue %dx.types.CBufRet.f32 %464, 2
  %468 = extractvalue %dx.types.CBufRet.f32 %464, 3
  %469 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %470 = extractvalue %dx.types.CBufRet.f32 %469, 0
  %471 = extractvalue %dx.types.CBufRet.f32 %469, 1
  %472 = extractvalue %dx.types.CBufRet.f32 %469, 2
  %473 = extractvalue %dx.types.CBufRet.f32 %469, 3
  %474 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %475 = extractvalue %dx.types.CBufRet.f32 %474, 0
  %476 = extractvalue %dx.types.CBufRet.f32 %474, 1
  %477 = extractvalue %dx.types.CBufRet.f32 %474, 2
  %478 = extractvalue %dx.types.CBufRet.f32 %474, 3
  %479 = fmul fast float %460, %242
  %480 = call float @dx.op.tertiary.f32(i32 46, float %246, float %465, float %479)  ; FMad(a,b,c)
  %481 = call float @dx.op.tertiary.f32(i32 46, float %250, float %470, float %480)  ; FMad(a,b,c)
  %482 = fadd fast float %481, %475
  %483 = fmul fast float %461, %242
  %484 = call float @dx.op.tertiary.f32(i32 46, float %246, float %466, float %483)  ; FMad(a,b,c)
  %485 = call float @dx.op.tertiary.f32(i32 46, float %250, float %471, float %484)  ; FMad(a,b,c)
  %486 = fadd fast float %485, %476
  %487 = fmul fast float %462, %242
  %488 = call float @dx.op.tertiary.f32(i32 46, float %246, float %467, float %487)  ; FMad(a,b,c)
  %489 = call float @dx.op.tertiary.f32(i32 46, float %250, float %472, float %488)  ; FMad(a,b,c)
  %490 = fadd fast float %489, %477
  %491 = fmul fast float %463, %242
  %492 = call float @dx.op.tertiary.f32(i32 46, float %246, float %468, float %491)  ; FMad(a,b,c)
  %493 = call float @dx.op.tertiary.f32(i32 46, float %250, float %473, float %492)  ; FMad(a,b,c)
  %494 = fadd fast float %493, %478
  %495 = fmul fast float %454, %321
  %496 = fmul fast float %454, %322
  %497 = fmul fast float %454, %323
  %498 = fmul fast float %460, %495
  %499 = call float @dx.op.tertiary.f32(i32 46, float %496, float %465, float %498)  ; FMad(a,b,c)
  %500 = call float @dx.op.tertiary.f32(i32 46, float %497, float %470, float %499)  ; FMad(a,b,c)
  %501 = fmul fast float %461, %495
  %502 = call float @dx.op.tertiary.f32(i32 46, float %496, float %466, float %501)  ; FMad(a,b,c)
  %503 = call float @dx.op.tertiary.f32(i32 46, float %497, float %471, float %502)  ; FMad(a,b,c)
  %504 = fmul fast float %462, %495
  %505 = call float @dx.op.tertiary.f32(i32 46, float %496, float %467, float %504)  ; FMad(a,b,c)
  %506 = call float @dx.op.tertiary.f32(i32 46, float %497, float %472, float %505)  ; FMad(a,b,c)
  %507 = fmul fast float %463, %495
  %508 = call float @dx.op.tertiary.f32(i32 46, float %496, float %468, float %507)  ; FMad(a,b,c)
  %509 = call float @dx.op.tertiary.f32(i32 46, float %497, float %473, float %508)  ; FMad(a,b,c)
  %510 = fadd fast float %500, %482
  %511 = fadd fast float %503, %486
  %512 = fadd fast float %506, %490
  %513 = fadd fast float %509, %494
  %514 = fdiv fast float %482, %494
  %515 = fdiv fast float %486, %494
  %516 = fdiv fast float %490, %494
  %517 = fdiv fast float %510, %513
  %518 = fdiv fast float %511, %513
  %519 = fdiv fast float %512, %513
  %520 = fsub fast float %517, %514
  %521 = fsub fast float %518, %515
  %522 = fsub fast float %519, %516
  %523 = fmul fast float %35, %514
  %524 = fmul fast float %36, %515
  %525 = fadd fast float %523, %40
  %526 = fadd fast float %524, %39
  %527 = fmul fast float %35, %520
  %528 = fmul fast float %36, %521
  %529 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %530 = extractvalue %dx.types.CBufRet.f32 %529, 2
  %531 = extractvalue %dx.types.CBufRet.f32 %529, 3
  %532 = call float @dx.op.tertiary.f32(i32 46, float %454, float %530, float 0.000000e+00)  ; FMad(a,b,c)
  %533 = call float @dx.op.tertiary.f32(i32 46, float %454, float %531, float 0.000000e+00)  ; FMad(a,b,c)
  %534 = fadd fast float %532, %490
  %535 = fadd fast float %533, %494
  %536 = fdiv fast float %534, %535
  %537 = fsub fast float %536, %516
  %538 = call float @dx.op.unary.f32(i32 6, float %537)  ; FAbs(value)
  %539 = fmul fast float %538, 2.500000e-01
  %540 = fmul fast float %457, 1.250000e-01
  %541 = fadd fast float %540, 1.250000e-01
  %542 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %525, float %526, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %543 = extractvalue %dx.types.ResRet.f32 %542, 0
  %544 = fmul fast float %527, %541
  %545 = fmul fast float %528, %541
  %546 = fmul fast float %522, %541
  %547 = fadd fast float %544, %525
  %548 = fadd fast float %545, %526
  %549 = fadd fast float %546, %516
  %550 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %547, float %548, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %551 = extractvalue %dx.types.ResRet.f32 %550, 0
  %552 = fadd fast float %549, %539
  %553 = fsub fast float %552, %551
  %554 = call float @dx.op.unary.f32(i32 6, float %553)  ; FAbs(value)
  %555 = fcmp fast olt float %554, %539
  %556 = zext i1 %555 to i32
  br i1 %458, label %561, label %557

; <label>:557                                     ; preds = %456
  %558 = fcmp fast une float %551, %543
  %559 = and i1 %555, %558
  %560 = zext i1 %559 to i32
  br label %561

; <label>:561                                     ; preds = %557, %456
  %562 = phi i32 [ %556, %456 ], [ %560, %557 ]
  %563 = icmp ne i32 %562, 0
  %564 = select i1 %563, float %541, float -1.000000e+00
  %565 = fadd fast float %540, 2.500000e-01
  %566 = fmul fast float %527, %565
  %567 = fmul fast float %528, %565
  %568 = fmul fast float %522, %565
  %569 = fadd fast float %566, %525
  %570 = fadd fast float %567, %526
  %571 = fadd fast float %568, %516
  %572 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %569, float %570, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %573 = extractvalue %dx.types.ResRet.f32 %572, 0
  %574 = fadd fast float %571, %539
  %575 = fsub fast float %574, %573
  %576 = call float @dx.op.unary.f32(i32 6, float %575)  ; FAbs(value)
  %577 = fcmp fast olt float %576, %539
  %578 = zext i1 %577 to i32
  br i1 %458, label %583, label %579

; <label>:579                                     ; preds = %561
  %580 = fcmp fast une float %573, %543
  %581 = and i1 %577, %580
  %582 = zext i1 %581 to i32
  br label %583

; <label>:583                                     ; preds = %579, %561
  %584 = phi i32 [ %578, %561 ], [ %582, %579 ]
  %585 = icmp ne i32 %584, 0
  %586 = fcmp fast olt float %564, 0.000000e+00
  %587 = and i1 %586, %585
  %588 = select i1 %587, float %565, float %564
  %589 = fadd fast float %540, 3.750000e-01
  %590 = fmul fast float %527, %589
  %591 = fmul fast float %528, %589
  %592 = fmul fast float %522, %589
  %593 = fadd fast float %590, %525
  %594 = fadd fast float %591, %526
  %595 = fadd fast float %592, %516
  %596 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %593, float %594, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %597 = extractvalue %dx.types.ResRet.f32 %596, 0
  %598 = fadd fast float %595, %539
  %599 = fsub fast float %598, %597
  %600 = call float @dx.op.unary.f32(i32 6, float %599)  ; FAbs(value)
  %601 = fcmp fast olt float %600, %539
  %602 = zext i1 %601 to i32
  br i1 %458, label %607, label %603

; <label>:603                                     ; preds = %583
  %604 = fcmp fast une float %597, %543
  %605 = and i1 %601, %604
  %606 = zext i1 %605 to i32
  br label %607

; <label>:607                                     ; preds = %603, %583
  %608 = phi i32 [ %602, %583 ], [ %606, %603 ]
  %609 = icmp ne i32 %608, 0
  %610 = fcmp fast olt float %588, 0.000000e+00
  %611 = and i1 %610, %609
  %612 = select i1 %611, float %589, float %588
  %613 = fadd fast float %540, 5.000000e-01
  %614 = fmul fast float %527, %613
  %615 = fmul fast float %528, %613
  %616 = fmul fast float %522, %613
  %617 = fadd fast float %614, %525
  %618 = fadd fast float %615, %526
  %619 = fadd fast float %616, %516
  %620 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %617, float %618, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %621 = extractvalue %dx.types.ResRet.f32 %620, 0
  %622 = fadd fast float %619, %539
  %623 = fsub fast float %622, %621
  %624 = call float @dx.op.unary.f32(i32 6, float %623)  ; FAbs(value)
  %625 = fcmp fast olt float %624, %539
  %626 = zext i1 %625 to i32
  br i1 %458, label %631, label %627

; <label>:627                                     ; preds = %607
  %628 = fcmp fast une float %621, %543
  %629 = and i1 %625, %628
  %630 = zext i1 %629 to i32
  br label %631

; <label>:631                                     ; preds = %627, %607
  %632 = phi i32 [ %626, %607 ], [ %630, %627 ]
  %633 = icmp ne i32 %632, 0
  %634 = fcmp fast olt float %612, 0.000000e+00
  %635 = and i1 %634, %633
  %636 = select i1 %635, float %613, float %612
  %637 = fadd fast float %540, 6.250000e-01
  %638 = fmul fast float %527, %637
  %639 = fmul fast float %528, %637
  %640 = fmul fast float %522, %637
  %641 = fadd fast float %638, %525
  %642 = fadd fast float %639, %526
  %643 = fadd fast float %640, %516
  %644 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %641, float %642, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %645 = extractvalue %dx.types.ResRet.f32 %644, 0
  %646 = fadd fast float %643, %539
  %647 = fsub fast float %646, %645
  %648 = call float @dx.op.unary.f32(i32 6, float %647)  ; FAbs(value)
  %649 = fcmp fast olt float %648, %539
  %650 = zext i1 %649 to i32
  br i1 %458, label %655, label %651

; <label>:651                                     ; preds = %631
  %652 = fcmp fast une float %645, %543
  %653 = and i1 %649, %652
  %654 = zext i1 %653 to i32
  br label %655

; <label>:655                                     ; preds = %651, %631
  %656 = phi i32 [ %650, %631 ], [ %654, %651 ]
  %657 = icmp ne i32 %656, 0
  %658 = fcmp fast olt float %636, 0.000000e+00
  %659 = and i1 %658, %657
  %660 = select i1 %659, float %637, float %636
  %661 = fadd fast float %540, 7.500000e-01
  %662 = fmul fast float %527, %661
  %663 = fmul fast float %528, %661
  %664 = fmul fast float %522, %661
  %665 = fadd fast float %662, %525
  %666 = fadd fast float %663, %526
  %667 = fadd fast float %664, %516
  %668 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %665, float %666, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %669 = extractvalue %dx.types.ResRet.f32 %668, 0
  %670 = fadd fast float %667, %539
  %671 = fsub fast float %670, %669
  %672 = call float @dx.op.unary.f32(i32 6, float %671)  ; FAbs(value)
  %673 = fcmp fast olt float %672, %539
  %674 = zext i1 %673 to i32
  br i1 %458, label %679, label %675

; <label>:675                                     ; preds = %655
  %676 = fcmp fast une float %669, %543
  %677 = and i1 %673, %676
  %678 = zext i1 %677 to i32
  br label %679

; <label>:679                                     ; preds = %675, %655
  %680 = phi i32 [ %674, %655 ], [ %678, %675 ]
  %681 = icmp ne i32 %680, 0
  %682 = fcmp fast olt float %660, 0.000000e+00
  %683 = and i1 %682, %681
  %684 = select i1 %683, float %661, float %660
  %685 = fadd fast float %540, 8.750000e-01
  %686 = fmul fast float %527, %685
  %687 = fmul fast float %528, %685
  %688 = fmul fast float %522, %685
  %689 = fadd fast float %686, %525
  %690 = fadd fast float %687, %526
  %691 = fadd fast float %688, %516
  %692 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %689, float %690, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %693 = extractvalue %dx.types.ResRet.f32 %692, 0
  %694 = fadd fast float %691, %539
  %695 = fsub fast float %694, %693
  %696 = call float @dx.op.unary.f32(i32 6, float %695)  ; FAbs(value)
  %697 = fcmp fast olt float %696, %539
  %698 = zext i1 %697 to i32
  br i1 %458, label %703, label %699

; <label>:699                                     ; preds = %679
  %700 = fcmp fast une float %693, %543
  %701 = and i1 %697, %700
  %702 = zext i1 %701 to i32
  br label %703

; <label>:703                                     ; preds = %699, %679
  %704 = phi i32 [ %698, %679 ], [ %702, %699 ]
  %705 = icmp ne i32 %704, 0
  %706 = fcmp fast olt float %684, 0.000000e+00
  %707 = and i1 %706, %705
  %708 = select i1 %707, float %685, float %684
  %709 = fadd fast float %540, 1.000000e+00
  %710 = fmul fast float %527, %709
  %711 = fmul fast float %528, %709
  %712 = fmul fast float %522, %709
  %713 = fadd fast float %710, %525
  %714 = fadd fast float %711, %526
  %715 = fadd fast float %712, %516
  %716 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %43, %dx.types.Handle %44, float %713, float %714, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %717 = extractvalue %dx.types.ResRet.f32 %716, 0
  %718 = fadd fast float %715, %539
  %719 = fsub fast float %718, %717
  %720 = call float @dx.op.unary.f32(i32 6, float %719)  ; FAbs(value)
  %721 = fcmp fast olt float %720, %539
  %722 = zext i1 %721 to i32
  br i1 %458, label %727, label %723

; <label>:723                                     ; preds = %703
  %724 = fcmp fast une float %717, %543
  %725 = and i1 %721, %724
  %726 = zext i1 %725 to i32
  br label %727

; <label>:727                                     ; preds = %723, %703
  %728 = phi i32 [ %722, %703 ], [ %726, %723 ]
  %729 = icmp ne i32 %728, 0
  %730 = fcmp fast olt float %708, 0.000000e+00
  %731 = and i1 %730, %729
  %732 = select i1 %731, float %709, float %708
  %733 = fcmp fast ogt float %732, 0.000000e+00
  br i1 %733, label %734, label %763

; <label>:734                                     ; preds = %727
  %735 = fmul fast float %732, %527
  %736 = fmul fast float %732, %528
  %737 = fadd fast float %735, %525
  %738 = fadd fast float %736, %526
  %739 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %58, %dx.types.Handle %44, float %737, float %738, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %740 = extractvalue %dx.types.ResRet.f32 %739, 3
  %741 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %63, %dx.types.Handle %44, float %737, float %738, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %742 = extractvalue %dx.types.ResRet.f32 %741, 3
  %743 = fmul fast float %742, 2.550000e+02
  %744 = fadd fast float %743, 5.000000e-01
  %745 = fptoui float %744 to i32
  %746 = and i32 %745, 15
  %747 = fmul fast float %740, 0x400FFDF3C0000000
  %748 = fptoui float %747 to i32
  %749 = and i32 %748, 1
  %750 = icmp ne i32 %749, 0
  %751 = icmp ne i32 %746, 9
  %752 = and i1 %750, %751
  %753 = zext i1 %752 to i32
  %754 = fcmp fast olt float %737, 1.000000e+00
  %755 = fcmp fast olt float %738, 1.000000e+00
  %756 = fcmp fast ogt float %737, 0.000000e+00
  %757 = fcmp fast ogt float %738, 0.000000e+00
  %758 = and i1 %756, %754
  %759 = and i1 %757, %755
  %760 = and i1 %758, %759
  %761 = fmul fast float %732, %454
  %762 = select i1 %760, float %761, float -1.000000e+00
  br label %763

; <label>:763                                     ; preds = %734, %727
  %764 = phi float [ %762, %734 ], [ -1.000000e+00, %727 ]
  %765 = phi i32 [ %753, %734 ], [ 0, %727 ]
  %766 = fcmp fast ogt float %764, 0.000000e+00
  br i1 %766, label %767, label %797

; <label>:767                                     ; preds = %763
  %768 = icmp ne i32 %765, 0
  %769 = select i1 %768, float %291, float %293
  %770 = fcmp fast ogt float %769, 0.000000e+00
  br i1 %770, label %771, label %792

; <label>:771                                     ; preds = %767
  %772 = add nsw i32 %103, -5
  %773 = icmp ult i32 %772, 3
  %774 = or i1 %112, %773
  %775 = or i1 %138, %774
  %776 = icmp ne i32 %103, 7
  %777 = and i1 %776, %775
  %778 = icmp ne i32 %103, 9
  %779 = and i1 %778, %777
  %780 = icmp ne i32 %103, 5
  %781 = and i1 %780, %779
  br i1 %781, label %782, label %792

; <label>:782                                     ; preds = %771
  %783 = call float @dx.op.binary.f32(i32 36, float %121, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %784 = fsub fast float 1.000000e+00, %783
  %785 = call float @dx.op.unary.f32(i32 23, float %784)  ; Log(value)
  %786 = fmul fast float %764, 0x3FA99999A0000000
  %787 = fmul fast float %786, %785
  %788 = call float @dx.op.unary.f32(i32 21, float %787)  ; Exp(value)
  %789 = call float @dx.op.unary.f32(i32 7, float %788)  ; Saturate(value)
  %790 = fsub fast float 1.000000e+00, %789
  %791 = fmul fast float %790, %769
  br label %792

; <label>:792                                     ; preds = %782, %771, %767
  %793 = phi float [ %791, %782 ], [ %769, %771 ], [ %769, %767 ]
  %794 = fsub fast float 1.000000e+00, %793
  %795 = fmul fast float %794, %447
  %796 = fmul fast float %794, %446
  br label %797

; <label>:797                                     ; preds = %792, %763, %444
  %798 = phi float [ %796, %792 ], [ %446, %763 ], [ %446, %444 ]
  %799 = phi float [ %795, %792 ], [ %447, %763 ], [ %447, %444 ]
  %800 = fadd fast float %799, %798
  %801 = fcmp fast ogt float %800, 0.000000e+00
  br i1 %801, label %802, label %5859, !dx.controlflow.hints !50

; <label>:802                                     ; preds = %797
  %803 = fmul fast float %279, %276
  %804 = fmul fast float %280, %275
  %805 = fsub fast float %803, %804
  %806 = fmul fast float %280, %274
  %807 = fmul fast float %278, %276
  %808 = fsub fast float %806, %807
  %809 = fmul fast float %278, %275
  %810 = fmul fast float %279, %274
  %811 = fsub fast float %809, %810
  %812 = fcmp fast ogt float %303, 0x3FA1EB8520000000
  br i1 %812, label %813, label %910

; <label>:813                                     ; preds = %802
  %814 = fmul fast float %805, %316
  %815 = call float @dx.op.tertiary.f32(i32 46, float %808, float %317, float %814)  ; FMad(a,b,c)
  %816 = call float @dx.op.tertiary.f32(i32 46, float %811, float %318, float %815)  ; FMad(a,b,c)
  %817 = fmul fast float %278, %316
  %818 = call float @dx.op.tertiary.f32(i32 46, float %279, float %317, float %817)  ; FMad(a,b,c)
  %819 = call float @dx.op.tertiary.f32(i32 46, float %280, float %318, float %818)  ; FMad(a,b,c)
  %820 = fmul fast float %274, %316
  %821 = call float @dx.op.tertiary.f32(i32 46, float %275, float %317, float %820)  ; FMad(a,b,c)
  %822 = call float @dx.op.tertiary.f32(i32 46, float %276, float %318, float %821)  ; FMad(a,b,c)
  %823 = fmul fast float %303, %303
  %824 = fsub fast float 1.000000e+00, %823
  %825 = call float @dx.op.unary.f32(i32 24, float %824)  ; Sqrt(value)
  %826 = fmul fast float %304, %303
  %827 = call float @dx.op.binary.f32(i32 36, float %822, float %826)  ; FMin(a,b)
  %828 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %826)  ; FMax(a,b)
  %829 = fdiv fast float %827, %828
  %830 = fmul fast float %825, %304
  %831 = fmul fast float %830, %829
  %832 = fcmp fast ogt float %816, 0.000000e+00
  %833 = fcmp fast ogt float %819, 0.000000e+00
  %834 = fcmp fast olt float %816, 0.000000e+00
  %835 = fcmp fast olt float %819, 0.000000e+00
  %836 = zext i1 %832 to i32
  %837 = zext i1 %833 to i32
  %838 = zext i1 %834 to i32
  %839 = zext i1 %835 to i32
  %840 = sub nsw i32 %836, %838
  %841 = sub nsw i32 %837, %839
  %842 = sitofp i32 %840 to float
  %843 = sitofp i32 %841 to float
  %844 = fadd fast float %831, %281
  %845 = fadd fast float %831, %284
  %846 = call float @dx.op.unary.f32(i32 6, float %816)  ; FAbs(value)
  %847 = call float @dx.op.unary.f32(i32 6, float %819)  ; FAbs(value)
  %848 = call float @dx.op.binary.f32(i32 35, float %846, float %844)  ; FMax(a,b)
  %849 = call float @dx.op.binary.f32(i32 35, float %847, float %845)  ; FMax(a,b)
  %850 = fsub fast float %282, %831
  %851 = fadd fast float %850, %848
  %852 = fmul fast float %851, %842
  %853 = fsub fast float %285, %831
  %854 = fadd fast float %853, %849
  %855 = fmul fast float %854, %843
  %856 = fsub fast float %822, %827
  %857 = call float @dx.op.binary.f32(i32 35, float %856, float 0x3F50624DE0000000)  ; FMax(a,b)
  %858 = call float @dx.op.unary.f32(i32 6, float %852)  ; FAbs(value)
  %859 = call float @dx.op.unary.f32(i32 6, float %855)  ; FAbs(value)
  %860 = fdiv fast float %858, %857
  %861 = fdiv fast float %859, %857
  %862 = fmul fast float %860, %827
  %863 = fmul fast float %861, %827
  %864 = fsub fast float %862, %831
  %865 = fsub fast float %863, %831
  %866 = fsub fast float -0.000000e+00, %842
  %867 = fsub fast float -0.000000e+00, %843
  %868 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %866)  ; FMax(a,b)
  %869 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %867)  ; FMax(a,b)
  %870 = fmul fast float %864, %868
  %871 = fmul fast float %865, %869
  %872 = fsub fast float %870, %281
  %873 = fsub fast float %871, %284
  %874 = call float @dx.op.binary.f32(i32 35, float %872, float %282)  ; FMax(a,b)
  %875 = call float @dx.op.binary.f32(i32 35, float %873, float %285)  ; FMax(a,b)
  %876 = call float @dx.op.binary.f32(i32 36, float %874, float %281)  ; FMin(a,b)
  %877 = call float @dx.op.binary.f32(i32 36, float %875, float %284)  ; FMin(a,b)
  %878 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %842)  ; FMax(a,b)
  %879 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %843)  ; FMax(a,b)
  %880 = fmul fast float %878, %864
  %881 = fmul fast float %879, %865
  %882 = fsub fast float %281, %880
  %883 = fsub fast float %284, %881
  %884 = call float @dx.op.binary.f32(i32 35, float %882, float %282)  ; FMax(a,b)
  %885 = call float @dx.op.binary.f32(i32 35, float %883, float %285)  ; FMax(a,b)
  %886 = call float @dx.op.binary.f32(i32 36, float %884, float %281)  ; FMin(a,b)
  %887 = call float @dx.op.binary.f32(i32 36, float %885, float %284)  ; FMin(a,b)
  %888 = fadd fast float %886, %876
  %889 = fadd fast float %887, %877
  %890 = fmul fast float %888, 5.000000e-01
  %891 = fmul fast float %889, 5.000000e-01
  %892 = fsub fast float %886, %876
  %893 = fsub fast float %887, %877
  %894 = fmul fast float %892, 5.000000e-01
  %895 = fmul fast float %893, 5.000000e-01
  %896 = fmul fast float %890, %805
  %897 = fmul fast float %890, %808
  %898 = fmul fast float %890, %811
  %899 = fsub fast float %316, %896
  %900 = fsub fast float %317, %897
  %901 = fsub fast float %318, %898
  %902 = fmul fast float %891, %278
  %903 = fmul fast float %891, %279
  %904 = fmul fast float %891, %280
  %905 = fsub fast float %899, %902
  %906 = fsub fast float %900, %903
  %907 = fsub fast float %901, %904
  %908 = fsub fast float -0.000000e+00, %890
  %909 = fsub fast float -0.000000e+00, %891
  br label %910

; <label>:910                                     ; preds = %813, %802
  %911 = phi float [ %908, %813 ], [ 0.000000e+00, %802 ]
  %912 = phi float [ %909, %813 ], [ 0.000000e+00, %802 ]
  %913 = phi float [ %894, %813 ], [ %281, %802 ]
  %914 = phi float [ %895, %813 ], [ %284, %802 ]
  %915 = phi float [ %905, %813 ], [ %316, %802 ]
  %916 = phi float [ %906, %813 ], [ %317, %802 ]
  %917 = phi float [ %907, %813 ], [ %318, %802 ]
  %918 = fcmp fast une float %913, 0.000000e+00
  %919 = fcmp fast une float %914, 0.000000e+00
  %920 = and i1 %918, %919
  br i1 %920, label %921, label %5805

; <label>:921                                     ; preds = %910
  %922 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %915, float %916, float %917)  ; Dot3(ax,ay,az,bx,by,bz)
  %923 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %915, float %916, float %917)  ; Dot3(ax,ay,az,bx,by,bz)
  %924 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %915, float %916, float %917)  ; Dot3(ax,ay,az,bx,by,bz)
  %925 = fsub fast float %922, %913
  %926 = fadd fast float %922, %913
  %927 = fsub fast float %923, %914
  %928 = fadd fast float %923, %914
  %929 = fmul fast float %924, %924
  %930 = call float @dx.op.dot2.f32(i32 54, float %925, float %927, float %925, float %927)  ; Dot2(ax,ay,bx,by)
  %931 = fadd fast float %930, %929
  %932 = call float @dx.op.unary.f32(i32 25, float %931)  ; Rsqrt(value)
  %933 = fmul fast float %932, %925
  %934 = fmul fast float %932, %927
  %935 = fmul fast float %932, %924
  %936 = call float @dx.op.dot2.f32(i32 54, float %926, float %927, float %926, float %927)  ; Dot2(ax,ay,bx,by)
  %937 = fadd fast float %936, %929
  %938 = call float @dx.op.unary.f32(i32 25, float %937)  ; Rsqrt(value)
  %939 = fmul fast float %938, %926
  %940 = fmul fast float %938, %927
  %941 = fmul fast float %938, %924
  %942 = call float @dx.op.dot2.f32(i32 54, float %926, float %928, float %926, float %928)  ; Dot2(ax,ay,bx,by)
  %943 = fadd fast float %942, %929
  %944 = call float @dx.op.unary.f32(i32 25, float %943)  ; Rsqrt(value)
  %945 = fmul fast float %944, %926
  %946 = fmul fast float %944, %928
  %947 = fmul fast float %944, %924
  %948 = call float @dx.op.dot2.f32(i32 54, float %925, float %928, float %925, float %928)  ; Dot2(ax,ay,bx,by)
  %949 = fadd fast float %948, %929
  %950 = call float @dx.op.unary.f32(i32 25, float %949)  ; Rsqrt(value)
  %951 = fmul fast float %950, %925
  %952 = fmul fast float %950, %928
  %953 = fmul fast float %950, %924
  %954 = call float @dx.op.dot3.f32(i32 55, float %933, float %934, float %935, float %939, float %940, float %941)  ; Dot3(ax,ay,az,bx,by,bz)
  %955 = call float @dx.op.dot3.f32(i32 55, float %939, float %940, float %941, float %945, float %946, float %947)  ; Dot3(ax,ay,az,bx,by,bz)
  %956 = call float @dx.op.dot3.f32(i32 55, float %945, float %946, float %947, float %951, float %952, float %953)  ; Dot3(ax,ay,az,bx,by,bz)
  %957 = call float @dx.op.dot3.f32(i32 55, float %951, float %952, float %953, float %933, float %934, float %935)  ; Dot3(ax,ay,az,bx,by,bz)
  %958 = fmul fast float %954, 0x3FC6666660000000
  %959 = fsub fast float 0x3FF921FF20000000, %958
  %960 = fadd fast float %954, 1.000000e+00
  %961 = call float @dx.op.unary.f32(i32 25, float %960)  ; Rsqrt(value)
  %962 = fmul fast float %955, 0x3FC6666660000000
  %963 = fsub fast float 0x3FF921FF20000000, %962
  %964 = fadd fast float %955, 1.000000e+00
  %965 = call float @dx.op.unary.f32(i32 25, float %964)  ; Rsqrt(value)
  %966 = fmul fast float %965, %963
  %967 = fmul fast float %956, 0x3FC6666660000000
  %968 = fsub fast float 0x3FF921FF20000000, %967
  %969 = fadd fast float %956, 1.000000e+00
  %970 = call float @dx.op.unary.f32(i32 25, float %969)  ; Rsqrt(value)
  %971 = fmul fast float %957, 0x3FC6666660000000
  %972 = fsub fast float 0x3FF921FF20000000, %971
  %973 = fadd fast float %957, 1.000000e+00
  %974 = call float @dx.op.unary.f32(i32 25, float %973)  ; Rsqrt(value)
  %975 = fmul fast float %974, %972
  %976 = fmul fast float %959, %961
  %977 = fsub fast float -0.000000e+00, %976
  %978 = fmul fast float %933, %977
  %979 = fmul fast float %934, %977
  %980 = fmul fast float %935, %977
  %981 = fmul fast float %966, %945
  %982 = fmul fast float %966, %946
  %983 = fmul fast float %966, %947
  %984 = fadd fast float %981, %978
  %985 = fadd fast float %982, %979
  %986 = fadd fast float %983, %980
  %987 = fmul fast float %986, %940
  %988 = fmul fast float %985, %941
  %989 = fsub fast float %987, %988
  %990 = fmul fast float %984, %941
  %991 = fmul fast float %986, %939
  %992 = fsub fast float %990, %991
  %993 = fmul fast float %985, %939
  %994 = fmul fast float %984, %940
  %995 = fsub fast float %993, %994
  %996 = fmul fast float %975, %933
  %997 = fmul fast float %975, %934
  %998 = fmul fast float %975, %935
  %999 = fmul fast float %968, %970
  %1000 = fsub fast float -0.000000e+00, %999
  %1001 = fmul fast float %945, %1000
  %1002 = fmul fast float %946, %1000
  %1003 = fmul fast float %947, %1000
  %1004 = fadd fast float %996, %1001
  %1005 = fadd fast float %997, %1002
  %1006 = fadd fast float %998, %1003
  %1007 = fmul fast float %1006, %952
  %1008 = fmul fast float %1005, %953
  %1009 = fsub fast float %1007, %1008
  %1010 = fmul fast float %1004, %953
  %1011 = fmul fast float %1006, %951
  %1012 = fsub fast float %1010, %1011
  %1013 = fmul fast float %1005, %951
  %1014 = fmul fast float %1004, %952
  %1015 = fsub fast float %1013, %1014
  %1016 = fadd fast float %1009, %989
  %1017 = fadd fast float %1012, %992
  %1018 = fadd fast float %1015, %995
  %1019 = fmul fast float %1016, %805
  %1020 = fmul fast float %1016, %808
  %1021 = fmul fast float %1016, %811
  %1022 = fmul fast float %1017, %278
  %1023 = fmul fast float %1017, %279
  %1024 = fmul fast float %1017, %280
  %1025 = fadd fast float %1019, %1022
  %1026 = fadd fast float %1020, %1023
  %1027 = fadd fast float %1021, %1024
  %1028 = fmul fast float %1018, %274
  %1029 = fmul fast float %1018, %275
  %1030 = fmul fast float %1018, %276
  %1031 = fadd fast float %1025, %1028
  %1032 = fadd fast float %1026, %1029
  %1033 = fadd fast float %1027, %1030
  %1034 = call float @dx.op.dot3.f32(i32 55, float %1031, float %1032, float %1033, float %1031, float %1032, float %1033)  ; Dot3(ax,ay,az,bx,by,bz)
  %1035 = call float @dx.op.unary.f32(i32 25, float %1034)  ; Rsqrt(value)
  %1036 = fmul fast float %1035, %1034
  %1037 = fmul fast float %1031, %1035
  %1038 = fmul fast float %1032, %1035
  %1039 = fmul fast float %1033, %1035
  %1040 = fmul fast float %1036, 5.000000e-01
  %1041 = fmul fast float %1036, 0x3FC45F3060000000
  %1042 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %1043 = call float @dx.op.unary.f32(i32 24, float %1041)  ; Sqrt(value)
  %1044 = fcmp fast olt float %1042, %1043
  br i1 %1044, label %1045, label %1052

; <label>:1045                                    ; preds = %921
  %1046 = fsub fast float -0.000000e+00, %1043
  %1047 = call float @dx.op.binary.f32(i32 35, float %1042, float %1046)  ; FMax(a,b)
  %1048 = fadd fast float %1047, %1043
  %1049 = fmul fast float %1048, %1048
  %1050 = fmul fast float %1043, 4.000000e+00
  %1051 = fdiv fast float %1049, %1050
  br label %1052

; <label>:1052                                    ; preds = %1045, %921
  %1053 = phi float [ %1051, %1045 ], [ %1042, %921 ]
  %1054 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %1055 = fsub fast float 0x3F50624DE0000000, %1054
  %1056 = call float @dx.op.unary.f32(i32 7, float %1055)  ; Saturate(value)
  %1057 = fmul fast float %1056, %274
  %1058 = fmul fast float %1056, %275
  %1059 = fmul fast float %1056, %276
  %1060 = fadd fast float %1057, %1037
  %1061 = fadd fast float %1058, %1038
  %1062 = fadd fast float %1059, %1039
  %1063 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %1060, float %1061, float %1062)  ; Dot3(ax,ay,az,bx,by,bz)
  %1064 = fdiv fast float %924, %1063
  %1065 = fcmp fast olt float %306, 3.200000e+01
  %1066 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 333)  ; CBufferLoadLegacy(handle,regIndex)
  br i1 %1065, label %1067, label %1112

; <label>:1067                                    ; preds = %1052
  %1068 = fmul fast float %1064, %1062
  %1069 = fmul fast float %1064, %1061
  %1070 = fmul fast float %1064, %1060
  %1071 = fsub fast float %1070, %915
  %1072 = fsub fast float %1069, %916
  %1073 = fsub fast float %1068, %917
  %1074 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %1071, float %1072, float %1073)  ; Dot3(ax,ay,az,bx,by,bz)
  %1075 = fadd fast float %1074, %912
  %1076 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %1077 = fdiv fast float %1075, %1076
  %1078 = fmul fast float %1077, 5.000000e-01
  %1079 = fsub fast float 5.000000e-01, %1078
  %1080 = call float @dx.op.unary.f32(i32 7, float %1079)  ; Saturate(value)
  %1081 = fmul fast float %1080, %310
  %1082 = fadd fast float %1081, %308
  %1083 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %1071, float %1072, float %1073)  ; Dot3(ax,ay,az,bx,by,bz)
  %1084 = fadd fast float %1083, %911
  %1085 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %1086 = fdiv fast float %1084, %1085
  %1087 = fmul fast float %1086, 5.000000e-01
  %1088 = fadd fast float %1087, 5.000000e-01
  %1089 = call float @dx.op.unary.f32(i32 7, float %1088)  ; Saturate(value)
  %1090 = fmul fast float %1089, %309
  %1091 = fadd fast float %1090, %307
  %1092 = fmul fast float %284, %281
  %1093 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1092)  ; FMax(a,b)
  %1094 = call float @dx.op.unary.f32(i32 25, float %1093)  ; Rsqrt(value)
  %1095 = fmul fast float %1094, %1064
  %1096 = call float @dx.op.unary.f32(i32 23, float %1095)  ; Log(value)
  %1097 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %1098 = fmul fast float %1097, %309
  %1099 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %1100 = fmul fast float %1099, %310
  %1101 = call float @dx.op.binary.f32(i32 36, float %1098, float %1100)  ; FMin(a,b)
  %1102 = call float @dx.op.unary.f32(i32 23, float %1101)  ; Log(value)
  %1103 = fadd fast float %1096, -2.000000e+00
  %1104 = fadd fast float %1103, %1102
  %1105 = call float @dx.op.binary.f32(i32 36, float %1104, float %306)  ; FMin(a,b)
  %1106 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1107 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1108 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1106, %dx.types.Handle %1107, float %1091, float %1082, float undef, float undef, i32 0, i32 0, i32 undef, float %1105)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1109 = extractvalue %dx.types.ResRet.f32 %1108, 0
  %1110 = extractvalue %dx.types.ResRet.f32 %1108, 1
  %1111 = extractvalue %dx.types.ResRet.f32 %1108, 2
  br label %1112

; <label>:1112                                    ; preds = %1067, %1052
  %1113 = phi float [ %1109, %1067 ], [ 1.000000e+00, %1052 ]
  %1114 = phi float [ %1110, %1067 ], [ 1.000000e+00, %1052 ]
  %1115 = phi float [ %1111, %1067 ], [ 1.000000e+00, %1052 ]
  %1116 = call float @dx.op.binary.f32(i32 35, float %67, float 0x3F947AE140000000)  ; FMax(a,b)
  switch i32 %103, label %5805 [
    i32 1, label %1117
    i32 10, label %1117
    i32 11, label %1117
    i32 2, label %1514
    i32 3, label %2026
    i32 4, label %2445
    i32 5, label %3306
    i32 6, label %4205
    i32 7, label %4626
    i32 8, label %4891
    i32 9, label %5354
  ]

; <label>:1117                                    ; preds = %1112, %1112, %1112
  %1118 = fmul fast float %1053, %1040
  %1119 = fmul fast float %196, 0x3FD45F3060000000
  %1120 = fmul fast float %1119, %1118
  %1121 = fmul fast float %1120, %1113
  %1122 = fmul fast float %197, 0x3FD45F3060000000
  %1123 = fmul fast float %1122, %1118
  %1124 = fmul fast float %1123, %1114
  %1125 = fmul fast float %198, 0x3FD45F3060000000
  %1126 = fmul fast float %1125, %1118
  %1127 = fmul fast float %1126, %1115
  %1128 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %1129 = call float @dx.op.unary.f32(i32 6, float %1128)  ; FAbs(value)
  %1130 = fadd fast float %1129, 0x3EE4F8B580000000
  %1131 = call float @dx.op.unary.f32(i32 7, float %1130)  ; Saturate(value)
  %1132 = fmul fast float %207, 5.000000e+01
  %1133 = fmul fast float %208, 5.000000e+01
  %1134 = fmul fast float %209, 5.000000e+01
  %1135 = call float @dx.op.unary.f32(i32 7, float %1132)  ; Saturate(value)
  %1136 = call float @dx.op.unary.f32(i32 7, float %1133)  ; Saturate(value)
  %1137 = call float @dx.op.unary.f32(i32 7, float %1134)  ; Saturate(value)
  %1138 = fsub fast float 1.000000e+00, %1131
  %1139 = call float @dx.op.unary.f32(i32 24, float %1138)  ; Sqrt(value)
  %1140 = fmul fast float %1116, 9.843750e-01
  %1141 = fmul fast float %1139, 9.843750e-01
  %1142 = fadd fast float %1140, 7.812500e-03
  %1143 = fadd fast float %1141, 7.812500e-03
  %1144 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1145 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1146 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1144, %dx.types.Handle %1145, float %1142, float %1143, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1147 = extractvalue %dx.types.ResRet.f32 %1146, 0
  %1148 = extractvalue %dx.types.ResRet.f32 %1146, 1
  %1149 = extractvalue %dx.types.ResRet.f32 %1146, 2
  %1150 = extractvalue %dx.types.ResRet.f32 %1146, 3
  %1151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1152 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1153 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1151, %dx.types.Handle %1152, float %1142, float %1143, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1154 = extractvalue %dx.types.ResRet.f32 %1153, 0
  %1155 = extractvalue %dx.types.ResRet.f32 %1153, 1
  %1156 = fmul fast float %1147, %1150
  %1157 = fmul fast float %1148, %1149
  %1158 = fsub fast float %1156, %1157
  %1159 = fdiv fast float %1147, %1158
  %1160 = fdiv fast float %1148, %1158
  %1161 = fdiv fast float %1149, %1158
  %1162 = fdiv fast float %1150, %1158
  %1163 = fsub fast float -0.000000e+00, %1161
  %1164 = fsub fast float -0.000000e+00, %1160
  %1165 = fmul fast float %1155, %1135
  %1166 = fmul fast float %1155, %1136
  %1167 = fmul fast float %1155, %1137
  %1168 = fsub fast float %1154, %1155
  %1169 = fmul fast float %1168, %207
  %1170 = fmul fast float %1168, %208
  %1171 = fmul fast float %1168, %209
  %1172 = fadd fast float %1169, %1165
  %1173 = fadd fast float %1170, %1166
  %1174 = fadd fast float %1171, %1167
  %1175 = fmul fast float %1128, %135
  %1176 = fmul fast float %1128, %136
  %1177 = fmul fast float %1128, %137
  %1178 = fsub fast float %396, %1175
  %1179 = fsub fast float %397, %1176
  %1180 = fsub fast float %398, %1177
  %1181 = call float @dx.op.dot3.f32(i32 55, float %1178, float %1179, float %1180, float %1178, float %1179, float %1180)  ; Dot3(ax,ay,az,bx,by,bz)
  %1182 = call float @dx.op.unary.f32(i32 25, float %1181)  ; Rsqrt(value)
  %1183 = fmul fast float %1178, %1182
  %1184 = fmul fast float %1179, %1182
  %1185 = fmul fast float %1180, %1182
  %1186 = fmul fast float %1185, %136
  %1187 = fmul fast float %1184, %137
  %1188 = fsub fast float %1186, %1187
  %1189 = fmul fast float %1183, %137
  %1190 = fmul fast float %1185, %135
  %1191 = fsub fast float %1189, %1190
  %1192 = fmul fast float %1184, %135
  %1193 = fmul fast float %1183, %136
  %1194 = fsub fast float %1192, %1193
  %1195 = fmul fast float %1183, %1147
  %1196 = call float @dx.op.tertiary.f32(i32 46, float %1149, float %135, float %1195)  ; FMad(a,b,c)
  %1197 = fmul fast float %1184, %1147
  %1198 = call float @dx.op.tertiary.f32(i32 46, float %1149, float %136, float %1197)  ; FMad(a,b,c)
  %1199 = fmul fast float %1185, %1147
  %1200 = call float @dx.op.tertiary.f32(i32 46, float %1149, float %137, float %1199)  ; FMad(a,b,c)
  %1201 = fmul fast float %1183, %1148
  %1202 = call float @dx.op.tertiary.f32(i32 46, float %1150, float %135, float %1201)  ; FMad(a,b,c)
  %1203 = fmul fast float %1184, %1148
  %1204 = call float @dx.op.tertiary.f32(i32 46, float %1150, float %136, float %1203)  ; FMad(a,b,c)
  %1205 = fmul fast float %1185, %1148
  %1206 = call float @dx.op.tertiary.f32(i32 46, float %1150, float %137, float %1205)  ; FMad(a,b,c)
  %1207 = fmul fast float %1183, %1162
  %1208 = call float @dx.op.tertiary.f32(i32 46, float %135, float %1164, float %1207)  ; FMad(a,b,c)
  %1209 = fmul fast float %1183, %1163
  %1210 = call float @dx.op.tertiary.f32(i32 46, float %135, float %1159, float %1209)  ; FMad(a,b,c)
  %1211 = fmul fast float %1184, %1162
  %1212 = call float @dx.op.tertiary.f32(i32 46, float %136, float %1164, float %1211)  ; FMad(a,b,c)
  %1213 = fmul fast float %1184, %1163
  %1214 = call float @dx.op.tertiary.f32(i32 46, float %136, float %1159, float %1213)  ; FMad(a,b,c)
  %1215 = fmul fast float %1185, %1162
  %1216 = call float @dx.op.tertiary.f32(i32 46, float %137, float %1164, float %1215)  ; FMad(a,b,c)
  %1217 = fmul fast float %1185, %1163
  %1218 = call float @dx.op.tertiary.f32(i32 46, float %137, float %1159, float %1217)  ; FMad(a,b,c)
  %1219 = fmul fast float %913, %805
  %1220 = fmul fast float %913, %808
  %1221 = fmul fast float %913, %811
  %1222 = fsub fast float %915, %1219
  %1223 = fsub fast float %916, %1220
  %1224 = fsub fast float %917, %1221
  %1225 = fmul fast float %914, %278
  %1226 = fmul fast float %914, %279
  %1227 = fmul fast float %914, %280
  %1228 = fsub fast float %1222, %1225
  %1229 = fsub fast float %1223, %1226
  %1230 = fsub fast float %1224, %1227
  %1231 = fmul fast float %1196, %1228
  %1232 = call float @dx.op.tertiary.f32(i32 46, float %1198, float %1229, float %1231)  ; FMad(a,b,c)
  %1233 = call float @dx.op.tertiary.f32(i32 46, float %1200, float %1230, float %1232)  ; FMad(a,b,c)
  %1234 = fmul fast float %1188, %1228
  %1235 = call float @dx.op.tertiary.f32(i32 46, float %1191, float %1229, float %1234)  ; FMad(a,b,c)
  %1236 = call float @dx.op.tertiary.f32(i32 46, float %1194, float %1230, float %1235)  ; FMad(a,b,c)
  %1237 = fmul fast float %1202, %1228
  %1238 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %1229, float %1237)  ; FMad(a,b,c)
  %1239 = call float @dx.op.tertiary.f32(i32 46, float %1206, float %1230, float %1238)  ; FMad(a,b,c)
  %1240 = fadd fast float %915, %1219
  %1241 = fsub fast float %1240, %1225
  %1242 = fsub fast float %1220, %1226
  %1243 = fadd fast float %1242, %916
  %1244 = fsub fast float %1221, %1227
  %1245 = fadd fast float %1244, %917
  %1246 = fmul fast float %1196, %1241
  %1247 = call float @dx.op.tertiary.f32(i32 46, float %1198, float %1243, float %1246)  ; FMad(a,b,c)
  %1248 = call float @dx.op.tertiary.f32(i32 46, float %1200, float %1245, float %1247)  ; FMad(a,b,c)
  %1249 = fmul fast float %1188, %1241
  %1250 = call float @dx.op.tertiary.f32(i32 46, float %1191, float %1243, float %1249)  ; FMad(a,b,c)
  %1251 = call float @dx.op.tertiary.f32(i32 46, float %1194, float %1245, float %1250)  ; FMad(a,b,c)
  %1252 = fmul fast float %1202, %1241
  %1253 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %1243, float %1252)  ; FMad(a,b,c)
  %1254 = call float @dx.op.tertiary.f32(i32 46, float %1206, float %1245, float %1253)  ; FMad(a,b,c)
  %1255 = fadd fast float %1240, %1225
  %1256 = fadd fast float %1226, %1220
  %1257 = fadd fast float %1256, %916
  %1258 = fadd fast float %1227, %1221
  %1259 = fadd fast float %1258, %917
  %1260 = fmul fast float %1196, %1255
  %1261 = call float @dx.op.tertiary.f32(i32 46, float %1198, float %1257, float %1260)  ; FMad(a,b,c)
  %1262 = call float @dx.op.tertiary.f32(i32 46, float %1200, float %1259, float %1261)  ; FMad(a,b,c)
  %1263 = fmul fast float %1188, %1255
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1191, float %1257, float %1263)  ; FMad(a,b,c)
  %1265 = call float @dx.op.tertiary.f32(i32 46, float %1194, float %1259, float %1264)  ; FMad(a,b,c)
  %1266 = fmul fast float %1202, %1255
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %1257, float %1266)  ; FMad(a,b,c)
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %1206, float %1259, float %1267)  ; FMad(a,b,c)
  %1269 = fadd fast float %1222, %1225
  %1270 = fadd fast float %1223, %1226
  %1271 = fadd fast float %1224, %1227
  %1272 = fmul fast float %1196, %1269
  %1273 = call float @dx.op.tertiary.f32(i32 46, float %1198, float %1270, float %1272)  ; FMad(a,b,c)
  %1274 = call float @dx.op.tertiary.f32(i32 46, float %1200, float %1271, float %1273)  ; FMad(a,b,c)
  %1275 = fmul fast float %1188, %1269
  %1276 = call float @dx.op.tertiary.f32(i32 46, float %1191, float %1270, float %1275)  ; FMad(a,b,c)
  %1277 = call float @dx.op.tertiary.f32(i32 46, float %1194, float %1271, float %1276)  ; FMad(a,b,c)
  %1278 = fmul fast float %1202, %1269
  %1279 = call float @dx.op.tertiary.f32(i32 46, float %1204, float %1270, float %1278)  ; FMad(a,b,c)
  %1280 = call float @dx.op.tertiary.f32(i32 46, float %1206, float %1271, float %1279)  ; FMad(a,b,c)
  %1281 = call float @dx.op.dot3.f32(i32 55, float %1233, float %1236, float %1239, float %1233, float %1236, float %1239)  ; Dot3(ax,ay,az,bx,by,bz)
  %1282 = call float @dx.op.unary.f32(i32 25, float %1281)  ; Rsqrt(value)
  %1283 = fmul fast float %1282, %1233
  %1284 = fmul fast float %1282, %1236
  %1285 = fmul fast float %1282, %1239
  %1286 = call float @dx.op.dot3.f32(i32 55, float %1248, float %1251, float %1254, float %1248, float %1251, float %1254)  ; Dot3(ax,ay,az,bx,by,bz)
  %1287 = call float @dx.op.unary.f32(i32 25, float %1286)  ; Rsqrt(value)
  %1288 = fmul fast float %1287, %1248
  %1289 = fmul fast float %1287, %1251
  %1290 = fmul fast float %1287, %1254
  %1291 = call float @dx.op.dot3.f32(i32 55, float %1262, float %1265, float %1268, float %1262, float %1265, float %1268)  ; Dot3(ax,ay,az,bx,by,bz)
  %1292 = call float @dx.op.unary.f32(i32 25, float %1291)  ; Rsqrt(value)
  %1293 = fmul fast float %1292, %1262
  %1294 = fmul fast float %1292, %1265
  %1295 = fmul fast float %1292, %1268
  %1296 = call float @dx.op.dot3.f32(i32 55, float %1274, float %1277, float %1280, float %1274, float %1277, float %1280)  ; Dot3(ax,ay,az,bx,by,bz)
  %1297 = call float @dx.op.unary.f32(i32 25, float %1296)  ; Rsqrt(value)
  %1298 = fmul fast float %1297, %1274
  %1299 = fmul fast float %1297, %1277
  %1300 = fmul fast float %1297, %1280
  %1301 = call float @dx.op.dot3.f32(i32 55, float %1283, float %1284, float %1285, float %1288, float %1289, float %1290)  ; Dot3(ax,ay,az,bx,by,bz)
  %1302 = call float @dx.op.unary.f32(i32 6, float %1301)  ; FAbs(value)
  %1303 = fmul fast float %1302, 0x3F8DBCFA00000000
  %1304 = fadd fast float %1303, 0x3FDFC6E900000000
  %1305 = fmul fast float %1304, %1302
  %1306 = fadd fast float %1305, 0x3FEB573B80000000
  %1307 = fadd fast float %1302, 0x4010A58D80000000
  %1308 = fmul fast float %1307, %1302
  %1309 = fadd fast float %1308, 0x400B573B80000000
  %1310 = fdiv fast float %1306, %1309
  %1311 = fcmp fast ogt float %1301, 0.000000e+00
  br i1 %1311, label %1318, label %1312

; <label>:1312                                    ; preds = %1117
  %1313 = fmul fast float %1301, %1301
  %1314 = fsub fast float 1.000000e+00, %1313
  %1315 = call float @dx.op.unary.f32(i32 25, float %1314)  ; Rsqrt(value)
  %1316 = fmul fast float %1315, 5.000000e-01
  %1317 = fsub fast float %1316, %1310
  br label %1318

; <label>:1318                                    ; preds = %1312, %1117
  %1319 = phi float [ %1317, %1312 ], [ %1310, %1117 ]
  %1320 = call float @dx.op.dot3.f32(i32 55, float %1288, float %1289, float %1290, float %1293, float %1294, float %1295)  ; Dot3(ax,ay,az,bx,by,bz)
  %1321 = call float @dx.op.unary.f32(i32 6, float %1320)  ; FAbs(value)
  %1322 = fmul fast float %1321, 0x3F8DBCFA00000000
  %1323 = fadd fast float %1322, 0x3FDFC6E900000000
  %1324 = fmul fast float %1323, %1321
  %1325 = fadd fast float %1324, 0x3FEB573B80000000
  %1326 = fadd fast float %1321, 0x4010A58D80000000
  %1327 = fmul fast float %1326, %1321
  %1328 = fadd fast float %1327, 0x400B573B80000000
  %1329 = fdiv fast float %1325, %1328
  %1330 = fcmp fast ogt float %1320, 0.000000e+00
  br i1 %1330, label %1337, label %1331

; <label>:1331                                    ; preds = %1318
  %1332 = fmul fast float %1320, %1320
  %1333 = fsub fast float 1.000000e+00, %1332
  %1334 = call float @dx.op.unary.f32(i32 25, float %1333)  ; Rsqrt(value)
  %1335 = fmul fast float %1334, 5.000000e-01
  %1336 = fsub fast float %1335, %1329
  br label %1337

; <label>:1337                                    ; preds = %1331, %1318
  %1338 = phi float [ %1336, %1331 ], [ %1329, %1318 ]
  %1339 = call float @dx.op.dot3.f32(i32 55, float %1293, float %1294, float %1295, float %1298, float %1299, float %1300)  ; Dot3(ax,ay,az,bx,by,bz)
  %1340 = call float @dx.op.unary.f32(i32 6, float %1339)  ; FAbs(value)
  %1341 = fmul fast float %1340, 0x3F8DBCFA00000000
  %1342 = fadd fast float %1341, 0x3FDFC6E900000000
  %1343 = fmul fast float %1342, %1340
  %1344 = fadd fast float %1343, 0x3FEB573B80000000
  %1345 = fadd fast float %1340, 0x4010A58D80000000
  %1346 = fmul fast float %1345, %1340
  %1347 = fadd fast float %1346, 0x400B573B80000000
  %1348 = fdiv fast float %1344, %1347
  %1349 = fcmp fast ogt float %1339, 0.000000e+00
  br i1 %1349, label %1356, label %1350

; <label>:1350                                    ; preds = %1337
  %1351 = fmul fast float %1339, %1339
  %1352 = fsub fast float 1.000000e+00, %1351
  %1353 = call float @dx.op.unary.f32(i32 25, float %1352)  ; Rsqrt(value)
  %1354 = fmul fast float %1353, 5.000000e-01
  %1355 = fsub fast float %1354, %1348
  br label %1356

; <label>:1356                                    ; preds = %1350, %1337
  %1357 = phi float [ %1355, %1350 ], [ %1348, %1337 ]
  %1358 = call float @dx.op.dot3.f32(i32 55, float %1298, float %1299, float %1300, float %1283, float %1284, float %1285)  ; Dot3(ax,ay,az,bx,by,bz)
  %1359 = call float @dx.op.unary.f32(i32 6, float %1358)  ; FAbs(value)
  %1360 = fmul fast float %1359, 0x3F8DBCFA00000000
  %1361 = fadd fast float %1360, 0x3FDFC6E900000000
  %1362 = fmul fast float %1361, %1359
  %1363 = fadd fast float %1362, 0x3FEB573B80000000
  %1364 = fadd fast float %1359, 0x4010A58D80000000
  %1365 = fmul fast float %1364, %1359
  %1366 = fadd fast float %1365, 0x400B573B80000000
  %1367 = fdiv fast float %1363, %1366
  %1368 = fcmp fast ogt float %1358, 0.000000e+00
  br i1 %1368, label %1375, label %1369

; <label>:1369                                    ; preds = %1356
  %1370 = fmul fast float %1358, %1358
  %1371 = fsub fast float 1.000000e+00, %1370
  %1372 = call float @dx.op.unary.f32(i32 25, float %1371)  ; Rsqrt(value)
  %1373 = fmul fast float %1372, 5.000000e-01
  %1374 = fsub fast float %1373, %1367
  br label %1375

; <label>:1375                                    ; preds = %1369, %1356
  %1376 = phi float [ %1374, %1369 ], [ %1367, %1356 ]
  %1377 = fsub fast float -0.000000e+00, %1319
  %1378 = fmul fast float %1283, %1377
  %1379 = fmul fast float %1284, %1377
  %1380 = fmul fast float %1285, %1377
  %1381 = fmul fast float %1338, %1293
  %1382 = fmul fast float %1338, %1294
  %1383 = fmul fast float %1338, %1295
  %1384 = fadd fast float %1381, %1378
  %1385 = fadd fast float %1382, %1379
  %1386 = fadd fast float %1383, %1380
  %1387 = fmul fast float %1386, %1289
  %1388 = fmul fast float %1385, %1290
  %1389 = fsub fast float %1387, %1388
  %1390 = fmul fast float %1384, %1290
  %1391 = fmul fast float %1386, %1288
  %1392 = fsub fast float %1390, %1391
  %1393 = fmul fast float %1385, %1288
  %1394 = fmul fast float %1384, %1289
  %1395 = fsub fast float %1393, %1394
  %1396 = fmul fast float %1376, %1283
  %1397 = fmul fast float %1376, %1284
  %1398 = fmul fast float %1376, %1285
  %1399 = fsub fast float -0.000000e+00, %1357
  %1400 = fmul fast float %1293, %1399
  %1401 = fmul fast float %1294, %1399
  %1402 = fmul fast float %1295, %1399
  %1403 = fadd fast float %1396, %1400
  %1404 = fadd fast float %1397, %1401
  %1405 = fadd fast float %1398, %1402
  %1406 = fmul fast float %1405, %1299
  %1407 = fmul fast float %1404, %1300
  %1408 = fsub fast float %1406, %1407
  %1409 = fmul fast float %1403, %1300
  %1410 = fmul fast float %1405, %1298
  %1411 = fsub fast float %1409, %1410
  %1412 = fmul fast float %1404, %1298
  %1413 = fmul fast float %1403, %1299
  %1414 = fsub fast float %1412, %1413
  %1415 = fadd fast float %1408, %1389
  %1416 = fadd fast float %1411, %1392
  %1417 = fadd fast float %1414, %1395
  %1418 = call float @dx.op.dot3.f32(i32 55, float %1415, float %1416, float %1417, float %1415, float %1416, float %1417)  ; Dot3(ax,ay,az,bx,by,bz)
  %1419 = call float @dx.op.unary.f32(i32 25, float %1418)  ; Rsqrt(value)
  %1420 = fmul fast float %1419, %1418
  %1421 = fmul fast float %1415, %1419
  %1422 = fmul fast float %1416, %1419
  %1423 = fmul fast float %1417, %1419
  %1424 = call float @dx.op.unary.f32(i32 24, float %1420)  ; Sqrt(value)
  %1425 = fcmp fast olt float %1423, %1424
  br i1 %1425, label %1426, label %1433

; <label>:1426                                    ; preds = %1375
  %1427 = fsub fast float -0.000000e+00, %1424
  %1428 = call float @dx.op.binary.f32(i32 35, float %1423, float %1427)  ; FMax(a,b)
  %1429 = fadd fast float %1428, %1424
  %1430 = fmul fast float %1429, %1429
  %1431 = fmul fast float %1424, 4.000000e+00
  %1432 = fdiv fast float %1430, %1431
  br label %1433

; <label>:1433                                    ; preds = %1426, %1375
  %1434 = phi float [ %1432, %1426 ], [ %1423, %1375 ]
  %1435 = fmul fast float %1420, %1434
  %1436 = fsub fast float -0.000000e+00, %1435
  %1437 = call float @dx.op.binary.f32(i32 36, float %1436, float 0.000000e+00)  ; FMin(a,b)
  %1438 = fsub fast float -0.000000e+00, %1437
  %1439 = fmul fast float %1421, %1208
  %1440 = call float @dx.op.tertiary.f32(i32 46, float %1188, float %1422, float %1439)  ; FMad(a,b,c)
  %1441 = call float @dx.op.tertiary.f32(i32 46, float %1210, float %1423, float %1440)  ; FMad(a,b,c)
  %1442 = fmul fast float %1421, %1212
  %1443 = call float @dx.op.tertiary.f32(i32 46, float %1191, float %1422, float %1442)  ; FMad(a,b,c)
  %1444 = call float @dx.op.tertiary.f32(i32 46, float %1214, float %1423, float %1443)  ; FMad(a,b,c)
  %1445 = fmul fast float %1421, %1216
  %1446 = call float @dx.op.tertiary.f32(i32 46, float %1194, float %1422, float %1445)  ; FMad(a,b,c)
  %1447 = call float @dx.op.tertiary.f32(i32 46, float %1218, float %1423, float %1446)  ; FMad(a,b,c)
  %1448 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %1441, float %1444, float %1447)  ; Dot3(ax,ay,az,bx,by,bz)
  %1449 = fsub fast float 0x3F50624DE0000000, %1448
  %1450 = call float @dx.op.unary.f32(i32 7, float %1449)  ; Saturate(value)
  %1451 = fmul fast float %1450, %274
  %1452 = fmul fast float %1450, %275
  %1453 = fmul fast float %1450, %276
  %1454 = fadd fast float %1451, %1441
  %1455 = fadd fast float %1452, %1444
  %1456 = fadd fast float %1453, %1447
  %1457 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %1454, float %1455, float %1456)  ; Dot3(ax,ay,az,bx,by,bz)
  %1458 = fdiv fast float %924, %1457
  br i1 %1065, label %1459, label %1504

; <label>:1459                                    ; preds = %1433
  %1460 = fmul fast float %1458, %1456
  %1461 = fmul fast float %1458, %1455
  %1462 = fmul fast float %1458, %1454
  %1463 = fsub fast float %1462, %915
  %1464 = fsub fast float %1461, %916
  %1465 = fsub fast float %1460, %917
  %1466 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %1463, float %1464, float %1465)  ; Dot3(ax,ay,az,bx,by,bz)
  %1467 = fadd fast float %1466, %912
  %1468 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %1469 = fdiv fast float %1467, %1468
  %1470 = fmul fast float %1469, 5.000000e-01
  %1471 = fsub fast float 5.000000e-01, %1470
  %1472 = call float @dx.op.unary.f32(i32 7, float %1471)  ; Saturate(value)
  %1473 = fmul fast float %1472, %310
  %1474 = fadd fast float %1473, %308
  %1475 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %1463, float %1464, float %1465)  ; Dot3(ax,ay,az,bx,by,bz)
  %1476 = fadd fast float %1475, %911
  %1477 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %1478 = fdiv fast float %1476, %1477
  %1479 = fmul fast float %1478, 5.000000e-01
  %1480 = fadd fast float %1479, 5.000000e-01
  %1481 = call float @dx.op.unary.f32(i32 7, float %1480)  ; Saturate(value)
  %1482 = fmul fast float %1481, %309
  %1483 = fadd fast float %1482, %307
  %1484 = fmul fast float %284, %281
  %1485 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1484)  ; FMax(a,b)
  %1486 = call float @dx.op.unary.f32(i32 25, float %1485)  ; Rsqrt(value)
  %1487 = fmul fast float %1486, %1458
  %1488 = call float @dx.op.unary.f32(i32 23, float %1487)  ; Log(value)
  %1489 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %1490 = fmul fast float %1489, %309
  %1491 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %1492 = fmul fast float %1491, %310
  %1493 = call float @dx.op.binary.f32(i32 36, float %1490, float %1492)  ; FMin(a,b)
  %1494 = call float @dx.op.unary.f32(i32 23, float %1493)  ; Log(value)
  %1495 = fadd fast float %1488, -2.000000e+00
  %1496 = fadd fast float %1495, %1494
  %1497 = call float @dx.op.binary.f32(i32 36, float %1496, float %306)  ; FMin(a,b)
  %1498 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1499 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1500 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1498, %dx.types.Handle %1499, float %1483, float %1474, float undef, float undef, i32 0, i32 0, i32 undef, float %1497)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1501 = extractvalue %dx.types.ResRet.f32 %1500, 0
  %1502 = extractvalue %dx.types.ResRet.f32 %1500, 1
  %1503 = extractvalue %dx.types.ResRet.f32 %1500, 2
  br label %1504

; <label>:1504                                    ; preds = %1459, %1433
  %1505 = phi float [ %1501, %1459 ], [ 1.000000e+00, %1433 ]
  %1506 = phi float [ %1502, %1459 ], [ 1.000000e+00, %1433 ]
  %1507 = phi float [ %1503, %1459 ], [ 1.000000e+00, %1433 ]
  %1508 = fmul fast float %1172, %1438
  %1509 = fmul fast float %1508, %1505
  %1510 = fmul fast float %1173, %1438
  %1511 = fmul fast float %1510, %1506
  %1512 = fmul fast float %1174, %1438
  %1513 = fmul fast float %1512, %1507
  br label %5805

; <label>:1514                                    ; preds = %1112
  %1515 = fmul fast float %1053, %1040
  %1516 = fmul fast float %196, 0x3FD45F3060000000
  %1517 = fmul fast float %1516, %1515
  %1518 = fmul fast float %1517, %1113
  %1519 = fmul fast float %197, 0x3FD45F3060000000
  %1520 = fmul fast float %1519, %1515
  %1521 = fmul fast float %1520, %1114
  %1522 = fmul fast float %198, 0x3FD45F3060000000
  %1523 = fmul fast float %1522, %1515
  %1524 = fmul fast float %1523, %1115
  %1525 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %1526 = call float @dx.op.unary.f32(i32 6, float %1525)  ; FAbs(value)
  %1527 = fadd fast float %1526, 0x3EE4F8B580000000
  %1528 = call float @dx.op.unary.f32(i32 7, float %1527)  ; Saturate(value)
  %1529 = fmul fast float %207, 5.000000e+01
  %1530 = fmul fast float %208, 5.000000e+01
  %1531 = fmul fast float %209, 5.000000e+01
  %1532 = call float @dx.op.unary.f32(i32 7, float %1529)  ; Saturate(value)
  %1533 = call float @dx.op.unary.f32(i32 7, float %1530)  ; Saturate(value)
  %1534 = call float @dx.op.unary.f32(i32 7, float %1531)  ; Saturate(value)
  %1535 = fsub fast float 1.000000e+00, %1528
  %1536 = call float @dx.op.unary.f32(i32 24, float %1535)  ; Sqrt(value)
  %1537 = fmul fast float %1116, 9.843750e-01
  %1538 = fmul fast float %1536, 9.843750e-01
  %1539 = fadd fast float %1537, 7.812500e-03
  %1540 = fadd fast float %1538, 7.812500e-03
  %1541 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1542 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1543 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1541, %dx.types.Handle %1542, float %1539, float %1540, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1544 = extractvalue %dx.types.ResRet.f32 %1543, 0
  %1545 = extractvalue %dx.types.ResRet.f32 %1543, 1
  %1546 = extractvalue %dx.types.ResRet.f32 %1543, 2
  %1547 = extractvalue %dx.types.ResRet.f32 %1543, 3
  %1548 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1549 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1550 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1548, %dx.types.Handle %1549, float %1539, float %1540, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1551 = extractvalue %dx.types.ResRet.f32 %1550, 0
  %1552 = extractvalue %dx.types.ResRet.f32 %1550, 1
  %1553 = fmul fast float %1544, %1547
  %1554 = fmul fast float %1545, %1546
  %1555 = fsub fast float %1553, %1554
  %1556 = fdiv fast float %1544, %1555
  %1557 = fdiv fast float %1545, %1555
  %1558 = fdiv fast float %1546, %1555
  %1559 = fdiv fast float %1547, %1555
  %1560 = fsub fast float -0.000000e+00, %1558
  %1561 = fsub fast float -0.000000e+00, %1557
  %1562 = fmul fast float %1552, %1532
  %1563 = fmul fast float %1552, %1533
  %1564 = fmul fast float %1552, %1534
  %1565 = fsub fast float %1551, %1552
  %1566 = fmul fast float %1565, %207
  %1567 = fmul fast float %1565, %208
  %1568 = fmul fast float %1565, %209
  %1569 = fadd fast float %1566, %1562
  %1570 = fadd fast float %1567, %1563
  %1571 = fadd fast float %1568, %1564
  %1572 = fmul fast float %1525, %135
  %1573 = fmul fast float %1525, %136
  %1574 = fmul fast float %1525, %137
  %1575 = fsub fast float %396, %1572
  %1576 = fsub fast float %397, %1573
  %1577 = fsub fast float %398, %1574
  %1578 = call float @dx.op.dot3.f32(i32 55, float %1575, float %1576, float %1577, float %1575, float %1576, float %1577)  ; Dot3(ax,ay,az,bx,by,bz)
  %1579 = call float @dx.op.unary.f32(i32 25, float %1578)  ; Rsqrt(value)
  %1580 = fmul fast float %1575, %1579
  %1581 = fmul fast float %1576, %1579
  %1582 = fmul fast float %1577, %1579
  %1583 = fmul fast float %1582, %136
  %1584 = fmul fast float %1581, %137
  %1585 = fsub fast float %1583, %1584
  %1586 = fmul fast float %1580, %137
  %1587 = fmul fast float %1582, %135
  %1588 = fsub fast float %1586, %1587
  %1589 = fmul fast float %1581, %135
  %1590 = fmul fast float %1580, %136
  %1591 = fsub fast float %1589, %1590
  %1592 = fmul fast float %1580, %1544
  %1593 = call float @dx.op.tertiary.f32(i32 46, float %1546, float %135, float %1592)  ; FMad(a,b,c)
  %1594 = fmul fast float %1581, %1544
  %1595 = call float @dx.op.tertiary.f32(i32 46, float %1546, float %136, float %1594)  ; FMad(a,b,c)
  %1596 = fmul fast float %1582, %1544
  %1597 = call float @dx.op.tertiary.f32(i32 46, float %1546, float %137, float %1596)  ; FMad(a,b,c)
  %1598 = fmul fast float %1580, %1545
  %1599 = call float @dx.op.tertiary.f32(i32 46, float %1547, float %135, float %1598)  ; FMad(a,b,c)
  %1600 = fmul fast float %1581, %1545
  %1601 = call float @dx.op.tertiary.f32(i32 46, float %1547, float %136, float %1600)  ; FMad(a,b,c)
  %1602 = fmul fast float %1582, %1545
  %1603 = call float @dx.op.tertiary.f32(i32 46, float %1547, float %137, float %1602)  ; FMad(a,b,c)
  %1604 = fmul fast float %1580, %1559
  %1605 = call float @dx.op.tertiary.f32(i32 46, float %135, float %1561, float %1604)  ; FMad(a,b,c)
  %1606 = fmul fast float %1580, %1560
  %1607 = call float @dx.op.tertiary.f32(i32 46, float %135, float %1556, float %1606)  ; FMad(a,b,c)
  %1608 = fmul fast float %1581, %1559
  %1609 = call float @dx.op.tertiary.f32(i32 46, float %136, float %1561, float %1608)  ; FMad(a,b,c)
  %1610 = fmul fast float %1581, %1560
  %1611 = call float @dx.op.tertiary.f32(i32 46, float %136, float %1556, float %1610)  ; FMad(a,b,c)
  %1612 = fmul fast float %1582, %1559
  %1613 = call float @dx.op.tertiary.f32(i32 46, float %137, float %1561, float %1612)  ; FMad(a,b,c)
  %1614 = fmul fast float %1582, %1560
  %1615 = call float @dx.op.tertiary.f32(i32 46, float %137, float %1556, float %1614)  ; FMad(a,b,c)
  %1616 = fmul fast float %913, %805
  %1617 = fmul fast float %913, %808
  %1618 = fmul fast float %913, %811
  %1619 = fsub fast float %915, %1616
  %1620 = fsub fast float %916, %1617
  %1621 = fsub fast float %917, %1618
  %1622 = fmul fast float %914, %278
  %1623 = fmul fast float %914, %279
  %1624 = fmul fast float %914, %280
  %1625 = fsub fast float %1619, %1622
  %1626 = fsub fast float %1620, %1623
  %1627 = fsub fast float %1621, %1624
  %1628 = fmul fast float %1593, %1625
  %1629 = call float @dx.op.tertiary.f32(i32 46, float %1595, float %1626, float %1628)  ; FMad(a,b,c)
  %1630 = call float @dx.op.tertiary.f32(i32 46, float %1597, float %1627, float %1629)  ; FMad(a,b,c)
  %1631 = fmul fast float %1585, %1625
  %1632 = call float @dx.op.tertiary.f32(i32 46, float %1588, float %1626, float %1631)  ; FMad(a,b,c)
  %1633 = call float @dx.op.tertiary.f32(i32 46, float %1591, float %1627, float %1632)  ; FMad(a,b,c)
  %1634 = fmul fast float %1599, %1625
  %1635 = call float @dx.op.tertiary.f32(i32 46, float %1601, float %1626, float %1634)  ; FMad(a,b,c)
  %1636 = call float @dx.op.tertiary.f32(i32 46, float %1603, float %1627, float %1635)  ; FMad(a,b,c)
  %1637 = fadd fast float %915, %1616
  %1638 = fsub fast float %1637, %1622
  %1639 = fsub fast float %1617, %1623
  %1640 = fadd fast float %1639, %916
  %1641 = fsub fast float %1618, %1624
  %1642 = fadd fast float %1641, %917
  %1643 = fmul fast float %1593, %1638
  %1644 = call float @dx.op.tertiary.f32(i32 46, float %1595, float %1640, float %1643)  ; FMad(a,b,c)
  %1645 = call float @dx.op.tertiary.f32(i32 46, float %1597, float %1642, float %1644)  ; FMad(a,b,c)
  %1646 = fmul fast float %1585, %1638
  %1647 = call float @dx.op.tertiary.f32(i32 46, float %1588, float %1640, float %1646)  ; FMad(a,b,c)
  %1648 = call float @dx.op.tertiary.f32(i32 46, float %1591, float %1642, float %1647)  ; FMad(a,b,c)
  %1649 = fmul fast float %1599, %1638
  %1650 = call float @dx.op.tertiary.f32(i32 46, float %1601, float %1640, float %1649)  ; FMad(a,b,c)
  %1651 = call float @dx.op.tertiary.f32(i32 46, float %1603, float %1642, float %1650)  ; FMad(a,b,c)
  %1652 = fadd fast float %1637, %1622
  %1653 = fadd fast float %1623, %1617
  %1654 = fadd fast float %1653, %916
  %1655 = fadd fast float %1624, %1618
  %1656 = fadd fast float %1655, %917
  %1657 = fmul fast float %1593, %1652
  %1658 = call float @dx.op.tertiary.f32(i32 46, float %1595, float %1654, float %1657)  ; FMad(a,b,c)
  %1659 = call float @dx.op.tertiary.f32(i32 46, float %1597, float %1656, float %1658)  ; FMad(a,b,c)
  %1660 = fmul fast float %1585, %1652
  %1661 = call float @dx.op.tertiary.f32(i32 46, float %1588, float %1654, float %1660)  ; FMad(a,b,c)
  %1662 = call float @dx.op.tertiary.f32(i32 46, float %1591, float %1656, float %1661)  ; FMad(a,b,c)
  %1663 = fmul fast float %1599, %1652
  %1664 = call float @dx.op.tertiary.f32(i32 46, float %1601, float %1654, float %1663)  ; FMad(a,b,c)
  %1665 = call float @dx.op.tertiary.f32(i32 46, float %1603, float %1656, float %1664)  ; FMad(a,b,c)
  %1666 = fadd fast float %1619, %1622
  %1667 = fadd fast float %1620, %1623
  %1668 = fadd fast float %1621, %1624
  %1669 = fmul fast float %1593, %1666
  %1670 = call float @dx.op.tertiary.f32(i32 46, float %1595, float %1667, float %1669)  ; FMad(a,b,c)
  %1671 = call float @dx.op.tertiary.f32(i32 46, float %1597, float %1668, float %1670)  ; FMad(a,b,c)
  %1672 = fmul fast float %1585, %1666
  %1673 = call float @dx.op.tertiary.f32(i32 46, float %1588, float %1667, float %1672)  ; FMad(a,b,c)
  %1674 = call float @dx.op.tertiary.f32(i32 46, float %1591, float %1668, float %1673)  ; FMad(a,b,c)
  %1675 = fmul fast float %1599, %1666
  %1676 = call float @dx.op.tertiary.f32(i32 46, float %1601, float %1667, float %1675)  ; FMad(a,b,c)
  %1677 = call float @dx.op.tertiary.f32(i32 46, float %1603, float %1668, float %1676)  ; FMad(a,b,c)
  %1678 = call float @dx.op.dot3.f32(i32 55, float %1630, float %1633, float %1636, float %1630, float %1633, float %1636)  ; Dot3(ax,ay,az,bx,by,bz)
  %1679 = call float @dx.op.unary.f32(i32 25, float %1678)  ; Rsqrt(value)
  %1680 = fmul fast float %1679, %1630
  %1681 = fmul fast float %1679, %1633
  %1682 = fmul fast float %1679, %1636
  %1683 = call float @dx.op.dot3.f32(i32 55, float %1645, float %1648, float %1651, float %1645, float %1648, float %1651)  ; Dot3(ax,ay,az,bx,by,bz)
  %1684 = call float @dx.op.unary.f32(i32 25, float %1683)  ; Rsqrt(value)
  %1685 = fmul fast float %1684, %1645
  %1686 = fmul fast float %1684, %1648
  %1687 = fmul fast float %1684, %1651
  %1688 = call float @dx.op.dot3.f32(i32 55, float %1659, float %1662, float %1665, float %1659, float %1662, float %1665)  ; Dot3(ax,ay,az,bx,by,bz)
  %1689 = call float @dx.op.unary.f32(i32 25, float %1688)  ; Rsqrt(value)
  %1690 = fmul fast float %1689, %1659
  %1691 = fmul fast float %1689, %1662
  %1692 = fmul fast float %1689, %1665
  %1693 = call float @dx.op.dot3.f32(i32 55, float %1671, float %1674, float %1677, float %1671, float %1674, float %1677)  ; Dot3(ax,ay,az,bx,by,bz)
  %1694 = call float @dx.op.unary.f32(i32 25, float %1693)  ; Rsqrt(value)
  %1695 = fmul fast float %1694, %1671
  %1696 = fmul fast float %1694, %1674
  %1697 = fmul fast float %1694, %1677
  %1698 = call float @dx.op.dot3.f32(i32 55, float %1680, float %1681, float %1682, float %1685, float %1686, float %1687)  ; Dot3(ax,ay,az,bx,by,bz)
  %1699 = call float @dx.op.unary.f32(i32 6, float %1698)  ; FAbs(value)
  %1700 = fmul fast float %1699, 0x3F8DBCFA00000000
  %1701 = fadd fast float %1700, 0x3FDFC6E900000000
  %1702 = fmul fast float %1701, %1699
  %1703 = fadd fast float %1702, 0x3FEB573B80000000
  %1704 = fadd fast float %1699, 0x4010A58D80000000
  %1705 = fmul fast float %1704, %1699
  %1706 = fadd fast float %1705, 0x400B573B80000000
  %1707 = fdiv fast float %1703, %1706
  %1708 = fcmp fast ogt float %1698, 0.000000e+00
  br i1 %1708, label %1715, label %1709

; <label>:1709                                    ; preds = %1514
  %1710 = fmul fast float %1698, %1698
  %1711 = fsub fast float 1.000000e+00, %1710
  %1712 = call float @dx.op.unary.f32(i32 25, float %1711)  ; Rsqrt(value)
  %1713 = fmul fast float %1712, 5.000000e-01
  %1714 = fsub fast float %1713, %1707
  br label %1715

; <label>:1715                                    ; preds = %1709, %1514
  %1716 = phi float [ %1714, %1709 ], [ %1707, %1514 ]
  %1717 = call float @dx.op.dot3.f32(i32 55, float %1685, float %1686, float %1687, float %1690, float %1691, float %1692)  ; Dot3(ax,ay,az,bx,by,bz)
  %1718 = call float @dx.op.unary.f32(i32 6, float %1717)  ; FAbs(value)
  %1719 = fmul fast float %1718, 0x3F8DBCFA00000000
  %1720 = fadd fast float %1719, 0x3FDFC6E900000000
  %1721 = fmul fast float %1720, %1718
  %1722 = fadd fast float %1721, 0x3FEB573B80000000
  %1723 = fadd fast float %1718, 0x4010A58D80000000
  %1724 = fmul fast float %1723, %1718
  %1725 = fadd fast float %1724, 0x400B573B80000000
  %1726 = fdiv fast float %1722, %1725
  %1727 = fcmp fast ogt float %1717, 0.000000e+00
  br i1 %1727, label %1734, label %1728

; <label>:1728                                    ; preds = %1715
  %1729 = fmul fast float %1717, %1717
  %1730 = fsub fast float 1.000000e+00, %1729
  %1731 = call float @dx.op.unary.f32(i32 25, float %1730)  ; Rsqrt(value)
  %1732 = fmul fast float %1731, 5.000000e-01
  %1733 = fsub fast float %1732, %1726
  br label %1734

; <label>:1734                                    ; preds = %1728, %1715
  %1735 = phi float [ %1733, %1728 ], [ %1726, %1715 ]
  %1736 = call float @dx.op.dot3.f32(i32 55, float %1690, float %1691, float %1692, float %1695, float %1696, float %1697)  ; Dot3(ax,ay,az,bx,by,bz)
  %1737 = call float @dx.op.unary.f32(i32 6, float %1736)  ; FAbs(value)
  %1738 = fmul fast float %1737, 0x3F8DBCFA00000000
  %1739 = fadd fast float %1738, 0x3FDFC6E900000000
  %1740 = fmul fast float %1739, %1737
  %1741 = fadd fast float %1740, 0x3FEB573B80000000
  %1742 = fadd fast float %1737, 0x4010A58D80000000
  %1743 = fmul fast float %1742, %1737
  %1744 = fadd fast float %1743, 0x400B573B80000000
  %1745 = fdiv fast float %1741, %1744
  %1746 = fcmp fast ogt float %1736, 0.000000e+00
  br i1 %1746, label %1753, label %1747

; <label>:1747                                    ; preds = %1734
  %1748 = fmul fast float %1736, %1736
  %1749 = fsub fast float 1.000000e+00, %1748
  %1750 = call float @dx.op.unary.f32(i32 25, float %1749)  ; Rsqrt(value)
  %1751 = fmul fast float %1750, 5.000000e-01
  %1752 = fsub fast float %1751, %1745
  br label %1753

; <label>:1753                                    ; preds = %1747, %1734
  %1754 = phi float [ %1752, %1747 ], [ %1745, %1734 ]
  %1755 = call float @dx.op.dot3.f32(i32 55, float %1695, float %1696, float %1697, float %1680, float %1681, float %1682)  ; Dot3(ax,ay,az,bx,by,bz)
  %1756 = call float @dx.op.unary.f32(i32 6, float %1755)  ; FAbs(value)
  %1757 = fmul fast float %1756, 0x3F8DBCFA00000000
  %1758 = fadd fast float %1757, 0x3FDFC6E900000000
  %1759 = fmul fast float %1758, %1756
  %1760 = fadd fast float %1759, 0x3FEB573B80000000
  %1761 = fadd fast float %1756, 0x4010A58D80000000
  %1762 = fmul fast float %1761, %1756
  %1763 = fadd fast float %1762, 0x400B573B80000000
  %1764 = fdiv fast float %1760, %1763
  %1765 = fcmp fast ogt float %1755, 0.000000e+00
  br i1 %1765, label %1772, label %1766

; <label>:1766                                    ; preds = %1753
  %1767 = fmul fast float %1755, %1755
  %1768 = fsub fast float 1.000000e+00, %1767
  %1769 = call float @dx.op.unary.f32(i32 25, float %1768)  ; Rsqrt(value)
  %1770 = fmul fast float %1769, 5.000000e-01
  %1771 = fsub fast float %1770, %1764
  br label %1772

; <label>:1772                                    ; preds = %1766, %1753
  %1773 = phi float [ %1771, %1766 ], [ %1764, %1753 ]
  %1774 = fsub fast float -0.000000e+00, %1716
  %1775 = fmul fast float %1680, %1774
  %1776 = fmul fast float %1681, %1774
  %1777 = fmul fast float %1682, %1774
  %1778 = fmul fast float %1735, %1690
  %1779 = fmul fast float %1735, %1691
  %1780 = fmul fast float %1735, %1692
  %1781 = fadd fast float %1778, %1775
  %1782 = fadd fast float %1779, %1776
  %1783 = fadd fast float %1780, %1777
  %1784 = fmul fast float %1783, %1686
  %1785 = fmul fast float %1782, %1687
  %1786 = fsub fast float %1784, %1785
  %1787 = fmul fast float %1781, %1687
  %1788 = fmul fast float %1783, %1685
  %1789 = fsub fast float %1787, %1788
  %1790 = fmul fast float %1782, %1685
  %1791 = fmul fast float %1781, %1686
  %1792 = fsub fast float %1790, %1791
  %1793 = fmul fast float %1773, %1680
  %1794 = fmul fast float %1773, %1681
  %1795 = fmul fast float %1773, %1682
  %1796 = fsub fast float -0.000000e+00, %1754
  %1797 = fmul fast float %1690, %1796
  %1798 = fmul fast float %1691, %1796
  %1799 = fmul fast float %1692, %1796
  %1800 = fadd fast float %1793, %1797
  %1801 = fadd fast float %1794, %1798
  %1802 = fadd fast float %1795, %1799
  %1803 = fmul fast float %1802, %1696
  %1804 = fmul fast float %1801, %1697
  %1805 = fsub fast float %1803, %1804
  %1806 = fmul fast float %1800, %1697
  %1807 = fmul fast float %1802, %1695
  %1808 = fsub fast float %1806, %1807
  %1809 = fmul fast float %1801, %1695
  %1810 = fmul fast float %1800, %1696
  %1811 = fsub fast float %1809, %1810
  %1812 = fadd fast float %1805, %1786
  %1813 = fadd fast float %1808, %1789
  %1814 = fadd fast float %1811, %1792
  %1815 = call float @dx.op.dot3.f32(i32 55, float %1812, float %1813, float %1814, float %1812, float %1813, float %1814)  ; Dot3(ax,ay,az,bx,by,bz)
  %1816 = call float @dx.op.unary.f32(i32 25, float %1815)  ; Rsqrt(value)
  %1817 = fmul fast float %1816, %1815
  %1818 = fmul fast float %1812, %1816
  %1819 = fmul fast float %1813, %1816
  %1820 = fmul fast float %1814, %1816
  %1821 = call float @dx.op.unary.f32(i32 24, float %1817)  ; Sqrt(value)
  %1822 = fcmp fast olt float %1820, %1821
  br i1 %1822, label %1823, label %1830

; <label>:1823                                    ; preds = %1772
  %1824 = fsub fast float -0.000000e+00, %1821
  %1825 = call float @dx.op.binary.f32(i32 35, float %1820, float %1824)  ; FMax(a,b)
  %1826 = fadd fast float %1825, %1821
  %1827 = fmul fast float %1826, %1826
  %1828 = fmul fast float %1821, 4.000000e+00
  %1829 = fdiv fast float %1827, %1828
  br label %1830

; <label>:1830                                    ; preds = %1823, %1772
  %1831 = phi float [ %1829, %1823 ], [ %1820, %1772 ]
  %1832 = fmul fast float %1817, %1831
  %1833 = fsub fast float -0.000000e+00, %1832
  %1834 = call float @dx.op.binary.f32(i32 36, float %1833, float 0.000000e+00)  ; FMin(a,b)
  %1835 = fsub fast float -0.000000e+00, %1834
  %1836 = fmul fast float %1818, %1605
  %1837 = call float @dx.op.tertiary.f32(i32 46, float %1585, float %1819, float %1836)  ; FMad(a,b,c)
  %1838 = call float @dx.op.tertiary.f32(i32 46, float %1607, float %1820, float %1837)  ; FMad(a,b,c)
  %1839 = fmul fast float %1818, %1609
  %1840 = call float @dx.op.tertiary.f32(i32 46, float %1588, float %1819, float %1839)  ; FMad(a,b,c)
  %1841 = call float @dx.op.tertiary.f32(i32 46, float %1611, float %1820, float %1840)  ; FMad(a,b,c)
  %1842 = fmul fast float %1818, %1613
  %1843 = call float @dx.op.tertiary.f32(i32 46, float %1591, float %1819, float %1842)  ; FMad(a,b,c)
  %1844 = call float @dx.op.tertiary.f32(i32 46, float %1615, float %1820, float %1843)  ; FMad(a,b,c)
  %1845 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %1838, float %1841, float %1844)  ; Dot3(ax,ay,az,bx,by,bz)
  %1846 = fsub fast float 0x3F50624DE0000000, %1845
  %1847 = call float @dx.op.unary.f32(i32 7, float %1846)  ; Saturate(value)
  %1848 = fmul fast float %1847, %274
  %1849 = fmul fast float %1847, %275
  %1850 = fmul fast float %1847, %276
  %1851 = fadd fast float %1848, %1838
  %1852 = fadd fast float %1849, %1841
  %1853 = fadd fast float %1850, %1844
  %1854 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %1851, float %1852, float %1853)  ; Dot3(ax,ay,az,bx,by,bz)
  %1855 = fdiv fast float %924, %1854
  br i1 %1065, label %1856, label %1901

; <label>:1856                                    ; preds = %1830
  %1857 = fmul fast float %1855, %1853
  %1858 = fmul fast float %1855, %1852
  %1859 = fmul fast float %1855, %1851
  %1860 = fsub fast float %1859, %915
  %1861 = fsub fast float %1858, %916
  %1862 = fsub fast float %1857, %917
  %1863 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %1860, float %1861, float %1862)  ; Dot3(ax,ay,az,bx,by,bz)
  %1864 = fadd fast float %1863, %912
  %1865 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %1866 = fdiv fast float %1864, %1865
  %1867 = fmul fast float %1866, 5.000000e-01
  %1868 = fsub fast float 5.000000e-01, %1867
  %1869 = call float @dx.op.unary.f32(i32 7, float %1868)  ; Saturate(value)
  %1870 = fmul fast float %1869, %310
  %1871 = fadd fast float %1870, %308
  %1872 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %1860, float %1861, float %1862)  ; Dot3(ax,ay,az,bx,by,bz)
  %1873 = fadd fast float %1872, %911
  %1874 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %1875 = fdiv fast float %1873, %1874
  %1876 = fmul fast float %1875, 5.000000e-01
  %1877 = fadd fast float %1876, 5.000000e-01
  %1878 = call float @dx.op.unary.f32(i32 7, float %1877)  ; Saturate(value)
  %1879 = fmul fast float %1878, %309
  %1880 = fadd fast float %1879, %307
  %1881 = fmul fast float %284, %281
  %1882 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1881)  ; FMax(a,b)
  %1883 = call float @dx.op.unary.f32(i32 25, float %1882)  ; Rsqrt(value)
  %1884 = fmul fast float %1883, %1855
  %1885 = call float @dx.op.unary.f32(i32 23, float %1884)  ; Log(value)
  %1886 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %1887 = fmul fast float %1886, %309
  %1888 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %1889 = fmul fast float %1888, %310
  %1890 = call float @dx.op.binary.f32(i32 36, float %1887, float %1889)  ; FMin(a,b)
  %1891 = call float @dx.op.unary.f32(i32 23, float %1890)  ; Log(value)
  %1892 = fadd fast float %1885, -2.000000e+00
  %1893 = fadd fast float %1892, %1891
  %1894 = call float @dx.op.binary.f32(i32 36, float %1893, float %306)  ; FMin(a,b)
  %1895 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1896 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1897 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1895, %dx.types.Handle %1896, float %1880, float %1871, float undef, float undef, i32 0, i32 0, i32 undef, float %1894)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1898 = extractvalue %dx.types.ResRet.f32 %1897, 0
  %1899 = extractvalue %dx.types.ResRet.f32 %1897, 1
  %1900 = extractvalue %dx.types.ResRet.f32 %1897, 2
  br label %1901

; <label>:1901                                    ; preds = %1856, %1830
  %1902 = phi float [ %1898, %1856 ], [ 1.000000e+00, %1830 ]
  %1903 = phi float [ %1899, %1856 ], [ 1.000000e+00, %1830 ]
  %1904 = phi float [ %1900, %1856 ], [ 1.000000e+00, %1830 ]
  %1905 = fmul fast float %1569, %1835
  %1906 = fmul fast float %1905, %1902
  %1907 = fmul fast float %1570, %1835
  %1908 = fmul fast float %1907, %1903
  %1909 = fmul fast float %1571, %1835
  %1910 = fmul fast float %1909, %1904
  %1911 = fmul fast float %118, %118
  %1912 = fmul fast float %119, %119
  %1913 = fmul fast float %120, %120
  %1914 = call float @dx.op.dot3.f32(i32 55, float %1037, float %1038, float %1039, float %260, float %261, float %262)  ; Dot3(ax,ay,az,bx,by,bz)
  %1915 = call float @dx.op.unary.f32(i32 7, float %1914)  ; Saturate(value)
  %1916 = call float @dx.op.unary.f32(i32 23, float %1915)  ; Log(value)
  %1917 = fmul fast float %1916, 1.200000e+01
  %1918 = call float @dx.op.unary.f32(i32 21, float %1917)  ; Exp(value)
  %1919 = fmul fast float %121, 0x4007333340000000
  %1920 = fsub fast float 3.000000e+00, %1919
  %1921 = fmul fast float %1918, %1920
  %1922 = fmul fast float %1042, 0x3FE5555560000000
  %1923 = fadd fast float %1922, 0x3FD5555560000000
  %1924 = call float @dx.op.unary.f32(i32 7, float %1923)  ; Saturate(value)
  %1925 = call float @dx.op.unary.f32(i32 23, float %1924)  ; Log(value)
  %1926 = fmul fast float %1925, 1.500000e+00
  %1927 = call float @dx.op.unary.f32(i32 21, float %1926)  ; Exp(value)
  %1928 = fmul fast float %1927, 0x3FFAAAAAA0000000
  %1929 = fadd fast float %1928, -1.000000e+00
  %1930 = fmul fast float %1929, %121
  %1931 = fadd fast float %1930, 1.000000e+00
  %1932 = fmul fast float %1931, 0x3FC45F3060000000
  %1933 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 283)  ; CBufferLoadLegacy(handle,regIndex)
  %1934 = extractvalue %dx.types.CBufRet.f32 %1933, 2
  %1935 = call float @dx.op.binary.f32(i32 35, float %1911, float 0x3D71979980000000)  ; FMax(a,b)
  %1936 = call float @dx.op.binary.f32(i32 35, float %1912, float 0x3D71979980000000)  ; FMax(a,b)
  %1937 = call float @dx.op.binary.f32(i32 35, float %1913, float 0x3D71979980000000)  ; FMax(a,b)
  %1938 = call float @dx.op.binary.f32(i32 36, float %1935, float 1.000000e+00)  ; FMin(a,b)
  %1939 = call float @dx.op.binary.f32(i32 36, float %1936, float 1.000000e+00)  ; FMin(a,b)
  %1940 = call float @dx.op.binary.f32(i32 36, float %1937, float 1.000000e+00)  ; FMin(a,b)
  %1941 = call float @dx.op.unary.f32(i32 23, float %1938)  ; Log(value)
  %1942 = call float @dx.op.unary.f32(i32 23, float %1939)  ; Log(value)
  %1943 = call float @dx.op.unary.f32(i32 23, float %1940)  ; Log(value)
  %1944 = fmul fast float %1941, 0xBFE62E4300000000
  %1945 = fmul fast float %1942, 0xBFE62E4300000000
  %1946 = fmul fast float %1943, 0xBFE62E4300000000
  %1947 = call float @dx.op.binary.f32(i32 35, float 0x3D71979980000000, float %1934)  ; FMax(a,b)
  %1948 = fdiv fast float %1944, %1947
  %1949 = fdiv fast float %1945, %1947
  %1950 = fdiv fast float %1946, %1947
  %1951 = fmul fast float %1948, 0xBFF7154760000000
  %1952 = fmul fast float %1949, 0xBFF7154760000000
  %1953 = fmul fast float %1950, 0xBFF7154760000000
  %1954 = call float @dx.op.unary.f32(i32 21, float %1951)  ; Exp(value)
  %1955 = call float @dx.op.unary.f32(i32 21, float %1952)  ; Exp(value)
  %1956 = call float @dx.op.unary.f32(i32 21, float %1953)  ; Exp(value)
  %1957 = fcmp fast olt float %1955, %1956
  br i1 %1957, label %1959, label %1958

; <label>:1958                                    ; preds = %1901
  br label %1959

; <label>:1959                                    ; preds = %1958, %1901
  %1960 = phi float [ %1955, %1958 ], [ %1956, %1901 ]
  %1961 = phi float [ %1956, %1958 ], [ %1955, %1901 ]
  %1962 = phi float [ 0.000000e+00, %1958 ], [ -1.000000e+00, %1901 ]
  %1963 = phi float [ 0xBFD5555560000000, %1958 ], [ 0x3FE5555560000000, %1901 ]
  %1964 = fcmp fast olt float %1954, %1960
  %1965 = select i1 %1964, float %1960, float %1954
  %1966 = select i1 %1964, float %1963, float %1962
  %1967 = select i1 %1964, float %1954, float %1960
  %1968 = call float @dx.op.binary.f32(i32 36, float %1967, float %1961)  ; FMin(a,b)
  %1969 = fsub fast float %1965, %1968
  %1970 = fsub fast float %1967, %1961
  %1971 = fmul fast float %1969, 6.000000e+00
  %1972 = fadd fast float %1971, 0x3DDB7CDFE0000000
  %1973 = fdiv fast float %1970, %1972
  %1974 = fadd fast float %1973, %1966
  %1975 = call float @dx.op.unary.f32(i32 6, float %1974)  ; FAbs(value)
  %1976 = fadd fast float %1965, 0x3DDB7CDFE0000000
  %1977 = fdiv fast float %1969, %1976
  %1978 = fcmp fast olt float %1912, %1913
  %1979 = select i1 %1978, float %1913, float %1912
  %1980 = fcmp fast olt float %1911, %1979
  %1981 = select i1 %1980, float %1979, float %1911
  %1982 = fmul fast float %1975, 6.000000e+00
  %1983 = fadd fast float %1982, -3.000000e+00
  %1984 = call float @dx.op.unary.f32(i32 6, float %1983)  ; FAbs(value)
  %1985 = fadd fast float %1984, -1.000000e+00
  %1986 = fadd fast float %1982, -2.000000e+00
  %1987 = call float @dx.op.unary.f32(i32 6, float %1986)  ; FAbs(value)
  %1988 = fsub fast float 2.000000e+00, %1987
  %1989 = fadd fast float %1982, -4.000000e+00
  %1990 = call float @dx.op.unary.f32(i32 6, float %1989)  ; FAbs(value)
  %1991 = fsub fast float 2.000000e+00, %1990
  %1992 = call float @dx.op.unary.f32(i32 7, float %1985)  ; Saturate(value)
  %1993 = call float @dx.op.unary.f32(i32 7, float %1988)  ; Saturate(value)
  %1994 = call float @dx.op.unary.f32(i32 7, float %1991)  ; Saturate(value)
  %1995 = fadd fast float %1992, -1.000000e+00
  %1996 = fadd fast float %1993, -1.000000e+00
  %1997 = fadd fast float %1994, -1.000000e+00
  %1998 = fmul fast float %1995, %1977
  %1999 = fmul fast float %1996, %1977
  %2000 = fmul fast float %1997, %1977
  %2001 = fadd fast float %1998, 1.000000e+00
  %2002 = fadd fast float %1999, 1.000000e+00
  %2003 = fadd fast float %2000, 1.000000e+00
  %2004 = fmul fast float %2001, %1981
  %2005 = fmul fast float %2002, %1981
  %2006 = fmul fast float %2003, %1981
  %2007 = fsub fast float 1.000000e+00, %1932
  %2008 = fmul fast float %1921, %2007
  %2009 = fadd fast float %2008, %1932
  %2010 = fmul fast float %2009, %1040
  %2011 = fmul fast float %2010, %1113
  %2012 = fmul fast float %2010, %1114
  %2013 = fmul fast float %2010, %1115
  %2014 = fsub fast float %1911, %2004
  %2015 = fsub fast float %1912, %2005
  %2016 = fsub fast float %1913, %2006
  %2017 = fmul fast float %2014, %445
  %2018 = fmul fast float %2015, %445
  %2019 = fmul fast float %2016, %445
  %2020 = fadd fast float %2017, %2004
  %2021 = fadd fast float %2018, %2005
  %2022 = fadd fast float %2019, %2006
  %2023 = fmul fast float %2011, %2020
  %2024 = fmul fast float %2012, %2021
  %2025 = fmul fast float %2013, %2022
  br label %5805

; <label>:2026                                    ; preds = %1112
  %2027 = fmul fast float %1053, %1040
  %2028 = fmul fast float %196, 0x3FD45F3060000000
  %2029 = fmul fast float %2028, %2027
  %2030 = fmul fast float %2029, %1113
  %2031 = fmul fast float %197, 0x3FD45F3060000000
  %2032 = fmul fast float %2031, %2027
  %2033 = fmul fast float %2032, %1114
  %2034 = fmul fast float %198, 0x3FD45F3060000000
  %2035 = fmul fast float %2034, %2027
  %2036 = fmul fast float %2035, %1115
  %2037 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %2038 = call float @dx.op.unary.f32(i32 6, float %2037)  ; FAbs(value)
  %2039 = fadd fast float %2038, 0x3EE4F8B580000000
  %2040 = call float @dx.op.unary.f32(i32 7, float %2039)  ; Saturate(value)
  %2041 = fmul fast float %207, 5.000000e+01
  %2042 = fmul fast float %208, 5.000000e+01
  %2043 = fmul fast float %209, 5.000000e+01
  %2044 = call float @dx.op.unary.f32(i32 7, float %2041)  ; Saturate(value)
  %2045 = call float @dx.op.unary.f32(i32 7, float %2042)  ; Saturate(value)
  %2046 = call float @dx.op.unary.f32(i32 7, float %2043)  ; Saturate(value)
  %2047 = fsub fast float 1.000000e+00, %2040
  %2048 = call float @dx.op.unary.f32(i32 24, float %2047)  ; Sqrt(value)
  %2049 = fmul fast float %1116, 9.843750e-01
  %2050 = fmul fast float %2048, 9.843750e-01
  %2051 = fadd fast float %2049, 7.812500e-03
  %2052 = fadd fast float %2050, 7.812500e-03
  %2053 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2054 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2055 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2053, %dx.types.Handle %2054, float %2051, float %2052, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2056 = extractvalue %dx.types.ResRet.f32 %2055, 0
  %2057 = extractvalue %dx.types.ResRet.f32 %2055, 1
  %2058 = extractvalue %dx.types.ResRet.f32 %2055, 2
  %2059 = extractvalue %dx.types.ResRet.f32 %2055, 3
  %2060 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2061 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2062 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2060, %dx.types.Handle %2061, float %2051, float %2052, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2063 = extractvalue %dx.types.ResRet.f32 %2062, 0
  %2064 = extractvalue %dx.types.ResRet.f32 %2062, 1
  %2065 = fmul fast float %2056, %2059
  %2066 = fmul fast float %2057, %2058
  %2067 = fsub fast float %2065, %2066
  %2068 = fdiv fast float %2056, %2067
  %2069 = fdiv fast float %2057, %2067
  %2070 = fdiv fast float %2058, %2067
  %2071 = fdiv fast float %2059, %2067
  %2072 = fsub fast float -0.000000e+00, %2070
  %2073 = fsub fast float -0.000000e+00, %2069
  %2074 = fmul fast float %2064, %2044
  %2075 = fmul fast float %2064, %2045
  %2076 = fmul fast float %2064, %2046
  %2077 = fsub fast float %2063, %2064
  %2078 = fmul fast float %2077, %207
  %2079 = fmul fast float %2077, %208
  %2080 = fmul fast float %2077, %209
  %2081 = fadd fast float %2078, %2074
  %2082 = fadd fast float %2079, %2075
  %2083 = fadd fast float %2080, %2076
  %2084 = fmul fast float %2037, %135
  %2085 = fmul fast float %2037, %136
  %2086 = fmul fast float %2037, %137
  %2087 = fsub fast float %396, %2084
  %2088 = fsub fast float %397, %2085
  %2089 = fsub fast float %398, %2086
  %2090 = call float @dx.op.dot3.f32(i32 55, float %2087, float %2088, float %2089, float %2087, float %2088, float %2089)  ; Dot3(ax,ay,az,bx,by,bz)
  %2091 = call float @dx.op.unary.f32(i32 25, float %2090)  ; Rsqrt(value)
  %2092 = fmul fast float %2087, %2091
  %2093 = fmul fast float %2088, %2091
  %2094 = fmul fast float %2089, %2091
  %2095 = fmul fast float %2094, %136
  %2096 = fmul fast float %2093, %137
  %2097 = fsub fast float %2095, %2096
  %2098 = fmul fast float %2092, %137
  %2099 = fmul fast float %2094, %135
  %2100 = fsub fast float %2098, %2099
  %2101 = fmul fast float %2093, %135
  %2102 = fmul fast float %2092, %136
  %2103 = fsub fast float %2101, %2102
  %2104 = fmul fast float %2092, %2056
  %2105 = call float @dx.op.tertiary.f32(i32 46, float %2058, float %135, float %2104)  ; FMad(a,b,c)
  %2106 = fmul fast float %2093, %2056
  %2107 = call float @dx.op.tertiary.f32(i32 46, float %2058, float %136, float %2106)  ; FMad(a,b,c)
  %2108 = fmul fast float %2094, %2056
  %2109 = call float @dx.op.tertiary.f32(i32 46, float %2058, float %137, float %2108)  ; FMad(a,b,c)
  %2110 = fmul fast float %2092, %2057
  %2111 = call float @dx.op.tertiary.f32(i32 46, float %2059, float %135, float %2110)  ; FMad(a,b,c)
  %2112 = fmul fast float %2093, %2057
  %2113 = call float @dx.op.tertiary.f32(i32 46, float %2059, float %136, float %2112)  ; FMad(a,b,c)
  %2114 = fmul fast float %2094, %2057
  %2115 = call float @dx.op.tertiary.f32(i32 46, float %2059, float %137, float %2114)  ; FMad(a,b,c)
  %2116 = fmul fast float %2092, %2071
  %2117 = call float @dx.op.tertiary.f32(i32 46, float %135, float %2073, float %2116)  ; FMad(a,b,c)
  %2118 = fmul fast float %2092, %2072
  %2119 = call float @dx.op.tertiary.f32(i32 46, float %135, float %2068, float %2118)  ; FMad(a,b,c)
  %2120 = fmul fast float %2093, %2071
  %2121 = call float @dx.op.tertiary.f32(i32 46, float %136, float %2073, float %2120)  ; FMad(a,b,c)
  %2122 = fmul fast float %2093, %2072
  %2123 = call float @dx.op.tertiary.f32(i32 46, float %136, float %2068, float %2122)  ; FMad(a,b,c)
  %2124 = fmul fast float %2094, %2071
  %2125 = call float @dx.op.tertiary.f32(i32 46, float %137, float %2073, float %2124)  ; FMad(a,b,c)
  %2126 = fmul fast float %2094, %2072
  %2127 = call float @dx.op.tertiary.f32(i32 46, float %137, float %2068, float %2126)  ; FMad(a,b,c)
  %2128 = fmul fast float %913, %805
  %2129 = fmul fast float %913, %808
  %2130 = fmul fast float %913, %811
  %2131 = fsub fast float %915, %2128
  %2132 = fsub fast float %916, %2129
  %2133 = fsub fast float %917, %2130
  %2134 = fmul fast float %914, %278
  %2135 = fmul fast float %914, %279
  %2136 = fmul fast float %914, %280
  %2137 = fsub fast float %2131, %2134
  %2138 = fsub fast float %2132, %2135
  %2139 = fsub fast float %2133, %2136
  %2140 = fmul fast float %2105, %2137
  %2141 = call float @dx.op.tertiary.f32(i32 46, float %2107, float %2138, float %2140)  ; FMad(a,b,c)
  %2142 = call float @dx.op.tertiary.f32(i32 46, float %2109, float %2139, float %2141)  ; FMad(a,b,c)
  %2143 = fmul fast float %2097, %2137
  %2144 = call float @dx.op.tertiary.f32(i32 46, float %2100, float %2138, float %2143)  ; FMad(a,b,c)
  %2145 = call float @dx.op.tertiary.f32(i32 46, float %2103, float %2139, float %2144)  ; FMad(a,b,c)
  %2146 = fmul fast float %2111, %2137
  %2147 = call float @dx.op.tertiary.f32(i32 46, float %2113, float %2138, float %2146)  ; FMad(a,b,c)
  %2148 = call float @dx.op.tertiary.f32(i32 46, float %2115, float %2139, float %2147)  ; FMad(a,b,c)
  %2149 = fadd fast float %915, %2128
  %2150 = fsub fast float %2149, %2134
  %2151 = fsub fast float %2129, %2135
  %2152 = fadd fast float %2151, %916
  %2153 = fsub fast float %2130, %2136
  %2154 = fadd fast float %2153, %917
  %2155 = fmul fast float %2105, %2150
  %2156 = call float @dx.op.tertiary.f32(i32 46, float %2107, float %2152, float %2155)  ; FMad(a,b,c)
  %2157 = call float @dx.op.tertiary.f32(i32 46, float %2109, float %2154, float %2156)  ; FMad(a,b,c)
  %2158 = fmul fast float %2097, %2150
  %2159 = call float @dx.op.tertiary.f32(i32 46, float %2100, float %2152, float %2158)  ; FMad(a,b,c)
  %2160 = call float @dx.op.tertiary.f32(i32 46, float %2103, float %2154, float %2159)  ; FMad(a,b,c)
  %2161 = fmul fast float %2111, %2150
  %2162 = call float @dx.op.tertiary.f32(i32 46, float %2113, float %2152, float %2161)  ; FMad(a,b,c)
  %2163 = call float @dx.op.tertiary.f32(i32 46, float %2115, float %2154, float %2162)  ; FMad(a,b,c)
  %2164 = fadd fast float %2149, %2134
  %2165 = fadd fast float %2135, %2129
  %2166 = fadd fast float %2165, %916
  %2167 = fadd fast float %2136, %2130
  %2168 = fadd fast float %2167, %917
  %2169 = fmul fast float %2105, %2164
  %2170 = call float @dx.op.tertiary.f32(i32 46, float %2107, float %2166, float %2169)  ; FMad(a,b,c)
  %2171 = call float @dx.op.tertiary.f32(i32 46, float %2109, float %2168, float %2170)  ; FMad(a,b,c)
  %2172 = fmul fast float %2097, %2164
  %2173 = call float @dx.op.tertiary.f32(i32 46, float %2100, float %2166, float %2172)  ; FMad(a,b,c)
  %2174 = call float @dx.op.tertiary.f32(i32 46, float %2103, float %2168, float %2173)  ; FMad(a,b,c)
  %2175 = fmul fast float %2111, %2164
  %2176 = call float @dx.op.tertiary.f32(i32 46, float %2113, float %2166, float %2175)  ; FMad(a,b,c)
  %2177 = call float @dx.op.tertiary.f32(i32 46, float %2115, float %2168, float %2176)  ; FMad(a,b,c)
  %2178 = fadd fast float %2131, %2134
  %2179 = fadd fast float %2132, %2135
  %2180 = fadd fast float %2133, %2136
  %2181 = fmul fast float %2105, %2178
  %2182 = call float @dx.op.tertiary.f32(i32 46, float %2107, float %2179, float %2181)  ; FMad(a,b,c)
  %2183 = call float @dx.op.tertiary.f32(i32 46, float %2109, float %2180, float %2182)  ; FMad(a,b,c)
  %2184 = fmul fast float %2097, %2178
  %2185 = call float @dx.op.tertiary.f32(i32 46, float %2100, float %2179, float %2184)  ; FMad(a,b,c)
  %2186 = call float @dx.op.tertiary.f32(i32 46, float %2103, float %2180, float %2185)  ; FMad(a,b,c)
  %2187 = fmul fast float %2111, %2178
  %2188 = call float @dx.op.tertiary.f32(i32 46, float %2113, float %2179, float %2187)  ; FMad(a,b,c)
  %2189 = call float @dx.op.tertiary.f32(i32 46, float %2115, float %2180, float %2188)  ; FMad(a,b,c)
  %2190 = call float @dx.op.dot3.f32(i32 55, float %2142, float %2145, float %2148, float %2142, float %2145, float %2148)  ; Dot3(ax,ay,az,bx,by,bz)
  %2191 = call float @dx.op.unary.f32(i32 25, float %2190)  ; Rsqrt(value)
  %2192 = fmul fast float %2191, %2142
  %2193 = fmul fast float %2191, %2145
  %2194 = fmul fast float %2191, %2148
  %2195 = call float @dx.op.dot3.f32(i32 55, float %2157, float %2160, float %2163, float %2157, float %2160, float %2163)  ; Dot3(ax,ay,az,bx,by,bz)
  %2196 = call float @dx.op.unary.f32(i32 25, float %2195)  ; Rsqrt(value)
  %2197 = fmul fast float %2196, %2157
  %2198 = fmul fast float %2196, %2160
  %2199 = fmul fast float %2196, %2163
  %2200 = call float @dx.op.dot3.f32(i32 55, float %2171, float %2174, float %2177, float %2171, float %2174, float %2177)  ; Dot3(ax,ay,az,bx,by,bz)
  %2201 = call float @dx.op.unary.f32(i32 25, float %2200)  ; Rsqrt(value)
  %2202 = fmul fast float %2201, %2171
  %2203 = fmul fast float %2201, %2174
  %2204 = fmul fast float %2201, %2177
  %2205 = call float @dx.op.dot3.f32(i32 55, float %2183, float %2186, float %2189, float %2183, float %2186, float %2189)  ; Dot3(ax,ay,az,bx,by,bz)
  %2206 = call float @dx.op.unary.f32(i32 25, float %2205)  ; Rsqrt(value)
  %2207 = fmul fast float %2206, %2183
  %2208 = fmul fast float %2206, %2186
  %2209 = fmul fast float %2206, %2189
  %2210 = call float @dx.op.dot3.f32(i32 55, float %2192, float %2193, float %2194, float %2197, float %2198, float %2199)  ; Dot3(ax,ay,az,bx,by,bz)
  %2211 = call float @dx.op.unary.f32(i32 6, float %2210)  ; FAbs(value)
  %2212 = fmul fast float %2211, 0x3F8DBCFA00000000
  %2213 = fadd fast float %2212, 0x3FDFC6E900000000
  %2214 = fmul fast float %2213, %2211
  %2215 = fadd fast float %2214, 0x3FEB573B80000000
  %2216 = fadd fast float %2211, 0x4010A58D80000000
  %2217 = fmul fast float %2216, %2211
  %2218 = fadd fast float %2217, 0x400B573B80000000
  %2219 = fdiv fast float %2215, %2218
  %2220 = fcmp fast ogt float %2210, 0.000000e+00
  br i1 %2220, label %2227, label %2221

; <label>:2221                                    ; preds = %2026
  %2222 = fmul fast float %2210, %2210
  %2223 = fsub fast float 1.000000e+00, %2222
  %2224 = call float @dx.op.unary.f32(i32 25, float %2223)  ; Rsqrt(value)
  %2225 = fmul fast float %2224, 5.000000e-01
  %2226 = fsub fast float %2225, %2219
  br label %2227

; <label>:2227                                    ; preds = %2221, %2026
  %2228 = phi float [ %2226, %2221 ], [ %2219, %2026 ]
  %2229 = call float @dx.op.dot3.f32(i32 55, float %2197, float %2198, float %2199, float %2202, float %2203, float %2204)  ; Dot3(ax,ay,az,bx,by,bz)
  %2230 = call float @dx.op.unary.f32(i32 6, float %2229)  ; FAbs(value)
  %2231 = fmul fast float %2230, 0x3F8DBCFA00000000
  %2232 = fadd fast float %2231, 0x3FDFC6E900000000
  %2233 = fmul fast float %2232, %2230
  %2234 = fadd fast float %2233, 0x3FEB573B80000000
  %2235 = fadd fast float %2230, 0x4010A58D80000000
  %2236 = fmul fast float %2235, %2230
  %2237 = fadd fast float %2236, 0x400B573B80000000
  %2238 = fdiv fast float %2234, %2237
  %2239 = fcmp fast ogt float %2229, 0.000000e+00
  br i1 %2239, label %2246, label %2240

; <label>:2240                                    ; preds = %2227
  %2241 = fmul fast float %2229, %2229
  %2242 = fsub fast float 1.000000e+00, %2241
  %2243 = call float @dx.op.unary.f32(i32 25, float %2242)  ; Rsqrt(value)
  %2244 = fmul fast float %2243, 5.000000e-01
  %2245 = fsub fast float %2244, %2238
  br label %2246

; <label>:2246                                    ; preds = %2240, %2227
  %2247 = phi float [ %2245, %2240 ], [ %2238, %2227 ]
  %2248 = call float @dx.op.dot3.f32(i32 55, float %2202, float %2203, float %2204, float %2207, float %2208, float %2209)  ; Dot3(ax,ay,az,bx,by,bz)
  %2249 = call float @dx.op.unary.f32(i32 6, float %2248)  ; FAbs(value)
  %2250 = fmul fast float %2249, 0x3F8DBCFA00000000
  %2251 = fadd fast float %2250, 0x3FDFC6E900000000
  %2252 = fmul fast float %2251, %2249
  %2253 = fadd fast float %2252, 0x3FEB573B80000000
  %2254 = fadd fast float %2249, 0x4010A58D80000000
  %2255 = fmul fast float %2254, %2249
  %2256 = fadd fast float %2255, 0x400B573B80000000
  %2257 = fdiv fast float %2253, %2256
  %2258 = fcmp fast ogt float %2248, 0.000000e+00
  br i1 %2258, label %2265, label %2259

; <label>:2259                                    ; preds = %2246
  %2260 = fmul fast float %2248, %2248
  %2261 = fsub fast float 1.000000e+00, %2260
  %2262 = call float @dx.op.unary.f32(i32 25, float %2261)  ; Rsqrt(value)
  %2263 = fmul fast float %2262, 5.000000e-01
  %2264 = fsub fast float %2263, %2257
  br label %2265

; <label>:2265                                    ; preds = %2259, %2246
  %2266 = phi float [ %2264, %2259 ], [ %2257, %2246 ]
  %2267 = call float @dx.op.dot3.f32(i32 55, float %2207, float %2208, float %2209, float %2192, float %2193, float %2194)  ; Dot3(ax,ay,az,bx,by,bz)
  %2268 = call float @dx.op.unary.f32(i32 6, float %2267)  ; FAbs(value)
  %2269 = fmul fast float %2268, 0x3F8DBCFA00000000
  %2270 = fadd fast float %2269, 0x3FDFC6E900000000
  %2271 = fmul fast float %2270, %2268
  %2272 = fadd fast float %2271, 0x3FEB573B80000000
  %2273 = fadd fast float %2268, 0x4010A58D80000000
  %2274 = fmul fast float %2273, %2268
  %2275 = fadd fast float %2274, 0x400B573B80000000
  %2276 = fdiv fast float %2272, %2275
  %2277 = fcmp fast ogt float %2267, 0.000000e+00
  br i1 %2277, label %2284, label %2278

; <label>:2278                                    ; preds = %2265
  %2279 = fmul fast float %2267, %2267
  %2280 = fsub fast float 1.000000e+00, %2279
  %2281 = call float @dx.op.unary.f32(i32 25, float %2280)  ; Rsqrt(value)
  %2282 = fmul fast float %2281, 5.000000e-01
  %2283 = fsub fast float %2282, %2276
  br label %2284

; <label>:2284                                    ; preds = %2278, %2265
  %2285 = phi float [ %2283, %2278 ], [ %2276, %2265 ]
  %2286 = fsub fast float -0.000000e+00, %2228
  %2287 = fmul fast float %2192, %2286
  %2288 = fmul fast float %2193, %2286
  %2289 = fmul fast float %2194, %2286
  %2290 = fmul fast float %2247, %2202
  %2291 = fmul fast float %2247, %2203
  %2292 = fmul fast float %2247, %2204
  %2293 = fadd fast float %2290, %2287
  %2294 = fadd fast float %2291, %2288
  %2295 = fadd fast float %2292, %2289
  %2296 = fmul fast float %2295, %2198
  %2297 = fmul fast float %2294, %2199
  %2298 = fsub fast float %2296, %2297
  %2299 = fmul fast float %2293, %2199
  %2300 = fmul fast float %2295, %2197
  %2301 = fsub fast float %2299, %2300
  %2302 = fmul fast float %2294, %2197
  %2303 = fmul fast float %2293, %2198
  %2304 = fsub fast float %2302, %2303
  %2305 = fmul fast float %2285, %2192
  %2306 = fmul fast float %2285, %2193
  %2307 = fmul fast float %2285, %2194
  %2308 = fsub fast float -0.000000e+00, %2266
  %2309 = fmul fast float %2202, %2308
  %2310 = fmul fast float %2203, %2308
  %2311 = fmul fast float %2204, %2308
  %2312 = fadd fast float %2305, %2309
  %2313 = fadd fast float %2306, %2310
  %2314 = fadd fast float %2307, %2311
  %2315 = fmul fast float %2314, %2208
  %2316 = fmul fast float %2313, %2209
  %2317 = fsub fast float %2315, %2316
  %2318 = fmul fast float %2312, %2209
  %2319 = fmul fast float %2314, %2207
  %2320 = fsub fast float %2318, %2319
  %2321 = fmul fast float %2313, %2207
  %2322 = fmul fast float %2312, %2208
  %2323 = fsub fast float %2321, %2322
  %2324 = fadd fast float %2317, %2298
  %2325 = fadd fast float %2320, %2301
  %2326 = fadd fast float %2323, %2304
  %2327 = call float @dx.op.dot3.f32(i32 55, float %2324, float %2325, float %2326, float %2324, float %2325, float %2326)  ; Dot3(ax,ay,az,bx,by,bz)
  %2328 = call float @dx.op.unary.f32(i32 25, float %2327)  ; Rsqrt(value)
  %2329 = fmul fast float %2328, %2327
  %2330 = fmul fast float %2324, %2328
  %2331 = fmul fast float %2325, %2328
  %2332 = fmul fast float %2326, %2328
  %2333 = call float @dx.op.unary.f32(i32 24, float %2329)  ; Sqrt(value)
  %2334 = fcmp fast olt float %2332, %2333
  br i1 %2334, label %2335, label %2342

; <label>:2335                                    ; preds = %2284
  %2336 = fsub fast float -0.000000e+00, %2333
  %2337 = call float @dx.op.binary.f32(i32 35, float %2332, float %2336)  ; FMax(a,b)
  %2338 = fadd fast float %2337, %2333
  %2339 = fmul fast float %2338, %2338
  %2340 = fmul fast float %2333, 4.000000e+00
  %2341 = fdiv fast float %2339, %2340
  br label %2342

; <label>:2342                                    ; preds = %2335, %2284
  %2343 = phi float [ %2341, %2335 ], [ %2332, %2284 ]
  %2344 = fmul fast float %2329, %2343
  %2345 = fsub fast float -0.000000e+00, %2344
  %2346 = call float @dx.op.binary.f32(i32 36, float %2345, float 0.000000e+00)  ; FMin(a,b)
  %2347 = fsub fast float -0.000000e+00, %2346
  %2348 = fmul fast float %2330, %2117
  %2349 = call float @dx.op.tertiary.f32(i32 46, float %2097, float %2331, float %2348)  ; FMad(a,b,c)
  %2350 = call float @dx.op.tertiary.f32(i32 46, float %2119, float %2332, float %2349)  ; FMad(a,b,c)
  %2351 = fmul fast float %2330, %2121
  %2352 = call float @dx.op.tertiary.f32(i32 46, float %2100, float %2331, float %2351)  ; FMad(a,b,c)
  %2353 = call float @dx.op.tertiary.f32(i32 46, float %2123, float %2332, float %2352)  ; FMad(a,b,c)
  %2354 = fmul fast float %2330, %2125
  %2355 = call float @dx.op.tertiary.f32(i32 46, float %2103, float %2331, float %2354)  ; FMad(a,b,c)
  %2356 = call float @dx.op.tertiary.f32(i32 46, float %2127, float %2332, float %2355)  ; FMad(a,b,c)
  %2357 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %2350, float %2353, float %2356)  ; Dot3(ax,ay,az,bx,by,bz)
  %2358 = fsub fast float 0x3F50624DE0000000, %2357
  %2359 = call float @dx.op.unary.f32(i32 7, float %2358)  ; Saturate(value)
  %2360 = fmul fast float %2359, %274
  %2361 = fmul fast float %2359, %275
  %2362 = fmul fast float %2359, %276
  %2363 = fadd fast float %2360, %2350
  %2364 = fadd fast float %2361, %2353
  %2365 = fadd fast float %2362, %2356
  %2366 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %2363, float %2364, float %2365)  ; Dot3(ax,ay,az,bx,by,bz)
  %2367 = fdiv fast float %924, %2366
  br i1 %1065, label %2368, label %2413

; <label>:2368                                    ; preds = %2342
  %2369 = fmul fast float %2367, %2365
  %2370 = fmul fast float %2367, %2364
  %2371 = fmul fast float %2367, %2363
  %2372 = fsub fast float %2371, %915
  %2373 = fsub fast float %2370, %916
  %2374 = fsub fast float %2369, %917
  %2375 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %2372, float %2373, float %2374)  ; Dot3(ax,ay,az,bx,by,bz)
  %2376 = fadd fast float %2375, %912
  %2377 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %2378 = fdiv fast float %2376, %2377
  %2379 = fmul fast float %2378, 5.000000e-01
  %2380 = fsub fast float 5.000000e-01, %2379
  %2381 = call float @dx.op.unary.f32(i32 7, float %2380)  ; Saturate(value)
  %2382 = fmul fast float %2381, %310
  %2383 = fadd fast float %2382, %308
  %2384 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %2372, float %2373, float %2374)  ; Dot3(ax,ay,az,bx,by,bz)
  %2385 = fadd fast float %2384, %911
  %2386 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %2387 = fdiv fast float %2385, %2386
  %2388 = fmul fast float %2387, 5.000000e-01
  %2389 = fadd fast float %2388, 5.000000e-01
  %2390 = call float @dx.op.unary.f32(i32 7, float %2389)  ; Saturate(value)
  %2391 = fmul fast float %2390, %309
  %2392 = fadd fast float %2391, %307
  %2393 = fmul fast float %284, %281
  %2394 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %2393)  ; FMax(a,b)
  %2395 = call float @dx.op.unary.f32(i32 25, float %2394)  ; Rsqrt(value)
  %2396 = fmul fast float %2395, %2367
  %2397 = call float @dx.op.unary.f32(i32 23, float %2396)  ; Log(value)
  %2398 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %2399 = fmul fast float %2398, %309
  %2400 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %2401 = fmul fast float %2400, %310
  %2402 = call float @dx.op.binary.f32(i32 36, float %2399, float %2401)  ; FMin(a,b)
  %2403 = call float @dx.op.unary.f32(i32 23, float %2402)  ; Log(value)
  %2404 = fadd fast float %2397, -2.000000e+00
  %2405 = fadd fast float %2404, %2403
  %2406 = call float @dx.op.binary.f32(i32 36, float %2405, float %306)  ; FMin(a,b)
  %2407 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2408 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2409 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2407, %dx.types.Handle %2408, float %2392, float %2383, float undef, float undef, i32 0, i32 0, i32 undef, float %2406)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2410 = extractvalue %dx.types.ResRet.f32 %2409, 0
  %2411 = extractvalue %dx.types.ResRet.f32 %2409, 1
  %2412 = extractvalue %dx.types.ResRet.f32 %2409, 2
  br label %2413

; <label>:2413                                    ; preds = %2368, %2342
  %2414 = phi float [ %2410, %2368 ], [ 1.000000e+00, %2342 ]
  %2415 = phi float [ %2411, %2368 ], [ 1.000000e+00, %2342 ]
  %2416 = phi float [ %2412, %2368 ], [ 1.000000e+00, %2342 ]
  %2417 = fmul fast float %2081, %2347
  %2418 = fmul fast float %2417, %2414
  %2419 = fmul fast float %2082, %2347
  %2420 = fmul fast float %2419, %2415
  %2421 = fmul fast float %2083, %2347
  %2422 = fmul fast float %2421, %2416
  %2423 = fmul fast float %1042, 5.000000e-01
  %2424 = fadd fast float %2423, 5.000000e-01
  %2425 = call float @dx.op.unary.f32(i32 7, float %2424)  ; Saturate(value)
  %2426 = fsub fast float 1.000000e+00, %121
  %2427 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2428 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2429 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2427, %dx.types.Handle %2428, float %2425, float %2426, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2430 = extractvalue %dx.types.ResRet.f32 %2429, 0
  %2431 = extractvalue %dx.types.ResRet.f32 %2429, 1
  %2432 = extractvalue %dx.types.ResRet.f32 %2429, 2
  %2433 = fmul fast float %118, %118
  %2434 = fmul fast float %2433, %1040
  %2435 = fmul fast float %2434, %1113
  %2436 = fmul fast float %2435, %2430
  %2437 = fmul fast float %119, %119
  %2438 = fmul fast float %2437, %1040
  %2439 = fmul fast float %2438, %1114
  %2440 = fmul fast float %2439, %2431
  %2441 = fmul fast float %120, %120
  %2442 = fmul fast float %2441, %1040
  %2443 = fmul fast float %2442, %1115
  %2444 = fmul fast float %2443, %2432
  br label %5805

; <label>:2445                                    ; preds = %1112
  %2446 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %2447 = call float @dx.op.dot3.f32(i32 55, float %396, float %397, float %398, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %2448 = fmul fast float %2447, 2.000000e+00
  %2449 = fadd fast float %2448, 2.000000e+00
  %2450 = call float @dx.op.unary.f32(i32 25, float %2449)  ; Rsqrt(value)
  %2451 = fadd fast float %2446, %1042
  %2452 = fmul fast float %2450, %2451
  %2453 = call float @dx.op.unary.f32(i32 7, float %2452)  ; Saturate(value)
  %2454 = call float @dx.op.unary.f32(i32 6, float %2446)  ; FAbs(value)
  %2455 = fadd fast float %2454, 0x3EE4F8B580000000
  %2456 = call float @dx.op.unary.f32(i32 7, float %2455)  ; Saturate(value)
  %2457 = fsub fast float 1.000000e+00, %2456
  %2458 = fmul fast float %2457, %2457
  %2459 = fmul fast float %2458, %2458
  %2460 = fmul fast float %2459, %2457
  %2461 = fsub fast float 1.000000e+00, %2460
  %2462 = call float @dx.op.binary.f32(i32 35, float %119, float 0x3F947AE140000000)  ; FMax(a,b)
  %2463 = call float @dx.op.unary.f32(i32 24, float %2457)  ; Sqrt(value)
  %2464 = fmul fast float %2462, 9.843750e-01
  %2465 = fmul fast float %2463, 9.843750e-01
  %2466 = fadd fast float %2464, 7.812500e-03
  %2467 = fadd fast float %2465, 7.812500e-03
  %2468 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2469 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2470 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2468, %dx.types.Handle %2469, float %2466, float %2467, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2471 = extractvalue %dx.types.ResRet.f32 %2470, 0
  %2472 = extractvalue %dx.types.ResRet.f32 %2470, 1
  %2473 = extractvalue %dx.types.ResRet.f32 %2470, 2
  %2474 = extractvalue %dx.types.ResRet.f32 %2470, 3
  %2475 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2476 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2477 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2475, %dx.types.Handle %2476, float %2466, float %2467, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2478 = extractvalue %dx.types.ResRet.f32 %2477, 0
  %2479 = extractvalue %dx.types.ResRet.f32 %2477, 1
  %2480 = fmul fast float %2471, %2474
  %2481 = fmul fast float %2472, %2473
  %2482 = fsub fast float %2480, %2481
  %2483 = fdiv fast float %2471, %2482
  %2484 = fdiv fast float %2472, %2482
  %2485 = fdiv fast float %2473, %2482
  %2486 = fdiv fast float %2474, %2482
  %2487 = fsub fast float -0.000000e+00, %2485
  %2488 = fsub fast float -0.000000e+00, %2484
  %2489 = fsub fast float %2478, %2479
  %2490 = fmul fast float %2489, 0x3FA47AE140000000
  %2491 = fadd fast float %2490, %2479
  %2492 = fmul fast float %2446, %135
  %2493 = fmul fast float %2446, %136
  %2494 = fmul fast float %2446, %137
  %2495 = fsub fast float %396, %2492
  %2496 = fsub fast float %397, %2493
  %2497 = fsub fast float %398, %2494
  %2498 = call float @dx.op.dot3.f32(i32 55, float %2495, float %2496, float %2497, float %2495, float %2496, float %2497)  ; Dot3(ax,ay,az,bx,by,bz)
  %2499 = call float @dx.op.unary.f32(i32 25, float %2498)  ; Rsqrt(value)
  %2500 = fmul fast float %2495, %2499
  %2501 = fmul fast float %2496, %2499
  %2502 = fmul fast float %2497, %2499
  %2503 = fmul fast float %2502, %136
  %2504 = fmul fast float %2501, %137
  %2505 = fsub fast float %2503, %2504
  %2506 = fmul fast float %2500, %137
  %2507 = fmul fast float %2502, %135
  %2508 = fsub fast float %2506, %2507
  %2509 = fmul fast float %2501, %135
  %2510 = fmul fast float %2500, %136
  %2511 = fsub fast float %2509, %2510
  %2512 = fmul fast float %2500, %2471
  %2513 = call float @dx.op.tertiary.f32(i32 46, float %2473, float %135, float %2512)  ; FMad(a,b,c)
  %2514 = fmul fast float %2501, %2471
  %2515 = call float @dx.op.tertiary.f32(i32 46, float %2473, float %136, float %2514)  ; FMad(a,b,c)
  %2516 = fmul fast float %2502, %2471
  %2517 = call float @dx.op.tertiary.f32(i32 46, float %2473, float %137, float %2516)  ; FMad(a,b,c)
  %2518 = fmul fast float %2500, %2472
  %2519 = call float @dx.op.tertiary.f32(i32 46, float %2474, float %135, float %2518)  ; FMad(a,b,c)
  %2520 = fmul fast float %2501, %2472
  %2521 = call float @dx.op.tertiary.f32(i32 46, float %2474, float %136, float %2520)  ; FMad(a,b,c)
  %2522 = fmul fast float %2502, %2472
  %2523 = call float @dx.op.tertiary.f32(i32 46, float %2474, float %137, float %2522)  ; FMad(a,b,c)
  %2524 = fmul fast float %2500, %2486
  %2525 = call float @dx.op.tertiary.f32(i32 46, float %135, float %2488, float %2524)  ; FMad(a,b,c)
  %2526 = fmul fast float %2500, %2487
  %2527 = call float @dx.op.tertiary.f32(i32 46, float %135, float %2483, float %2526)  ; FMad(a,b,c)
  %2528 = fmul fast float %2501, %2486
  %2529 = call float @dx.op.tertiary.f32(i32 46, float %136, float %2488, float %2528)  ; FMad(a,b,c)
  %2530 = fmul fast float %2501, %2487
  %2531 = call float @dx.op.tertiary.f32(i32 46, float %136, float %2483, float %2530)  ; FMad(a,b,c)
  %2532 = fmul fast float %2502, %2486
  %2533 = call float @dx.op.tertiary.f32(i32 46, float %137, float %2488, float %2532)  ; FMad(a,b,c)
  %2534 = fmul fast float %2502, %2487
  %2535 = call float @dx.op.tertiary.f32(i32 46, float %137, float %2483, float %2534)  ; FMad(a,b,c)
  %2536 = fmul fast float %913, %805
  %2537 = fmul fast float %913, %808
  %2538 = fmul fast float %913, %811
  %2539 = fsub fast float %915, %2536
  %2540 = fsub fast float %916, %2537
  %2541 = fsub fast float %917, %2538
  %2542 = fmul fast float %914, %278
  %2543 = fmul fast float %914, %279
  %2544 = fmul fast float %914, %280
  %2545 = fsub fast float %2539, %2542
  %2546 = fsub fast float %2540, %2543
  %2547 = fsub fast float %2541, %2544
  %2548 = fmul fast float %2513, %2545
  %2549 = call float @dx.op.tertiary.f32(i32 46, float %2515, float %2546, float %2548)  ; FMad(a,b,c)
  %2550 = call float @dx.op.tertiary.f32(i32 46, float %2517, float %2547, float %2549)  ; FMad(a,b,c)
  %2551 = fmul fast float %2505, %2545
  %2552 = call float @dx.op.tertiary.f32(i32 46, float %2508, float %2546, float %2551)  ; FMad(a,b,c)
  %2553 = call float @dx.op.tertiary.f32(i32 46, float %2511, float %2547, float %2552)  ; FMad(a,b,c)
  %2554 = fmul fast float %2519, %2545
  %2555 = call float @dx.op.tertiary.f32(i32 46, float %2521, float %2546, float %2554)  ; FMad(a,b,c)
  %2556 = call float @dx.op.tertiary.f32(i32 46, float %2523, float %2547, float %2555)  ; FMad(a,b,c)
  %2557 = fadd fast float %915, %2536
  %2558 = fsub fast float %2557, %2542
  %2559 = fsub fast float %2537, %2543
  %2560 = fadd fast float %2559, %916
  %2561 = fsub fast float %2538, %2544
  %2562 = fadd fast float %2561, %917
  %2563 = fmul fast float %2513, %2558
  %2564 = call float @dx.op.tertiary.f32(i32 46, float %2515, float %2560, float %2563)  ; FMad(a,b,c)
  %2565 = call float @dx.op.tertiary.f32(i32 46, float %2517, float %2562, float %2564)  ; FMad(a,b,c)
  %2566 = fmul fast float %2505, %2558
  %2567 = call float @dx.op.tertiary.f32(i32 46, float %2508, float %2560, float %2566)  ; FMad(a,b,c)
  %2568 = call float @dx.op.tertiary.f32(i32 46, float %2511, float %2562, float %2567)  ; FMad(a,b,c)
  %2569 = fmul fast float %2519, %2558
  %2570 = call float @dx.op.tertiary.f32(i32 46, float %2521, float %2560, float %2569)  ; FMad(a,b,c)
  %2571 = call float @dx.op.tertiary.f32(i32 46, float %2523, float %2562, float %2570)  ; FMad(a,b,c)
  %2572 = fadd fast float %2557, %2542
  %2573 = fadd fast float %2543, %2537
  %2574 = fadd fast float %2573, %916
  %2575 = fadd fast float %2544, %2538
  %2576 = fadd fast float %2575, %917
  %2577 = fmul fast float %2513, %2572
  %2578 = call float @dx.op.tertiary.f32(i32 46, float %2515, float %2574, float %2577)  ; FMad(a,b,c)
  %2579 = call float @dx.op.tertiary.f32(i32 46, float %2517, float %2576, float %2578)  ; FMad(a,b,c)
  %2580 = fmul fast float %2505, %2572
  %2581 = call float @dx.op.tertiary.f32(i32 46, float %2508, float %2574, float %2580)  ; FMad(a,b,c)
  %2582 = call float @dx.op.tertiary.f32(i32 46, float %2511, float %2576, float %2581)  ; FMad(a,b,c)
  %2583 = fmul fast float %2519, %2572
  %2584 = call float @dx.op.tertiary.f32(i32 46, float %2521, float %2574, float %2583)  ; FMad(a,b,c)
  %2585 = call float @dx.op.tertiary.f32(i32 46, float %2523, float %2576, float %2584)  ; FMad(a,b,c)
  %2586 = fadd fast float %2539, %2542
  %2587 = fadd fast float %2540, %2543
  %2588 = fadd fast float %2541, %2544
  %2589 = fmul fast float %2513, %2586
  %2590 = call float @dx.op.tertiary.f32(i32 46, float %2515, float %2587, float %2589)  ; FMad(a,b,c)
  %2591 = call float @dx.op.tertiary.f32(i32 46, float %2517, float %2588, float %2590)  ; FMad(a,b,c)
  %2592 = fmul fast float %2505, %2586
  %2593 = call float @dx.op.tertiary.f32(i32 46, float %2508, float %2587, float %2592)  ; FMad(a,b,c)
  %2594 = call float @dx.op.tertiary.f32(i32 46, float %2511, float %2588, float %2593)  ; FMad(a,b,c)
  %2595 = fmul fast float %2519, %2586
  %2596 = call float @dx.op.tertiary.f32(i32 46, float %2521, float %2587, float %2595)  ; FMad(a,b,c)
  %2597 = call float @dx.op.tertiary.f32(i32 46, float %2523, float %2588, float %2596)  ; FMad(a,b,c)
  %2598 = call float @dx.op.dot3.f32(i32 55, float %2550, float %2553, float %2556, float %2550, float %2553, float %2556)  ; Dot3(ax,ay,az,bx,by,bz)
  %2599 = call float @dx.op.unary.f32(i32 25, float %2598)  ; Rsqrt(value)
  %2600 = fmul fast float %2599, %2550
  %2601 = fmul fast float %2599, %2553
  %2602 = fmul fast float %2599, %2556
  %2603 = call float @dx.op.dot3.f32(i32 55, float %2565, float %2568, float %2571, float %2565, float %2568, float %2571)  ; Dot3(ax,ay,az,bx,by,bz)
  %2604 = call float @dx.op.unary.f32(i32 25, float %2603)  ; Rsqrt(value)
  %2605 = fmul fast float %2604, %2565
  %2606 = fmul fast float %2604, %2568
  %2607 = fmul fast float %2604, %2571
  %2608 = call float @dx.op.dot3.f32(i32 55, float %2579, float %2582, float %2585, float %2579, float %2582, float %2585)  ; Dot3(ax,ay,az,bx,by,bz)
  %2609 = call float @dx.op.unary.f32(i32 25, float %2608)  ; Rsqrt(value)
  %2610 = fmul fast float %2609, %2579
  %2611 = fmul fast float %2609, %2582
  %2612 = fmul fast float %2609, %2585
  %2613 = call float @dx.op.dot3.f32(i32 55, float %2591, float %2594, float %2597, float %2591, float %2594, float %2597)  ; Dot3(ax,ay,az,bx,by,bz)
  %2614 = call float @dx.op.unary.f32(i32 25, float %2613)  ; Rsqrt(value)
  %2615 = fmul fast float %2614, %2591
  %2616 = fmul fast float %2614, %2594
  %2617 = fmul fast float %2614, %2597
  %2618 = call float @dx.op.dot3.f32(i32 55, float %2600, float %2601, float %2602, float %2605, float %2606, float %2607)  ; Dot3(ax,ay,az,bx,by,bz)
  %2619 = call float @dx.op.unary.f32(i32 6, float %2618)  ; FAbs(value)
  %2620 = fmul fast float %2619, 0x3F8DBCFA00000000
  %2621 = fadd fast float %2620, 0x3FDFC6E900000000
  %2622 = fmul fast float %2621, %2619
  %2623 = fadd fast float %2622, 0x3FEB573B80000000
  %2624 = fadd fast float %2619, 0x4010A58D80000000
  %2625 = fmul fast float %2624, %2619
  %2626 = fadd fast float %2625, 0x400B573B80000000
  %2627 = fdiv fast float %2623, %2626
  %2628 = fcmp fast ogt float %2618, 0.000000e+00
  br i1 %2628, label %2635, label %2629

; <label>:2629                                    ; preds = %2445
  %2630 = fmul fast float %2618, %2618
  %2631 = fsub fast float 1.000000e+00, %2630
  %2632 = call float @dx.op.unary.f32(i32 25, float %2631)  ; Rsqrt(value)
  %2633 = fmul fast float %2632, 5.000000e-01
  %2634 = fsub fast float %2633, %2627
  br label %2635

; <label>:2635                                    ; preds = %2629, %2445
  %2636 = phi float [ %2634, %2629 ], [ %2627, %2445 ]
  %2637 = call float @dx.op.dot3.f32(i32 55, float %2605, float %2606, float %2607, float %2610, float %2611, float %2612)  ; Dot3(ax,ay,az,bx,by,bz)
  %2638 = call float @dx.op.unary.f32(i32 6, float %2637)  ; FAbs(value)
  %2639 = fmul fast float %2638, 0x3F8DBCFA00000000
  %2640 = fadd fast float %2639, 0x3FDFC6E900000000
  %2641 = fmul fast float %2640, %2638
  %2642 = fadd fast float %2641, 0x3FEB573B80000000
  %2643 = fadd fast float %2638, 0x4010A58D80000000
  %2644 = fmul fast float %2643, %2638
  %2645 = fadd fast float %2644, 0x400B573B80000000
  %2646 = fdiv fast float %2642, %2645
  %2647 = fcmp fast ogt float %2637, 0.000000e+00
  br i1 %2647, label %2654, label %2648

; <label>:2648                                    ; preds = %2635
  %2649 = fmul fast float %2637, %2637
  %2650 = fsub fast float 1.000000e+00, %2649
  %2651 = call float @dx.op.unary.f32(i32 25, float %2650)  ; Rsqrt(value)
  %2652 = fmul fast float %2651, 5.000000e-01
  %2653 = fsub fast float %2652, %2646
  br label %2654

; <label>:2654                                    ; preds = %2648, %2635
  %2655 = phi float [ %2653, %2648 ], [ %2646, %2635 ]
  %2656 = call float @dx.op.dot3.f32(i32 55, float %2610, float %2611, float %2612, float %2615, float %2616, float %2617)  ; Dot3(ax,ay,az,bx,by,bz)
  %2657 = call float @dx.op.unary.f32(i32 6, float %2656)  ; FAbs(value)
  %2658 = fmul fast float %2657, 0x3F8DBCFA00000000
  %2659 = fadd fast float %2658, 0x3FDFC6E900000000
  %2660 = fmul fast float %2659, %2657
  %2661 = fadd fast float %2660, 0x3FEB573B80000000
  %2662 = fadd fast float %2657, 0x4010A58D80000000
  %2663 = fmul fast float %2662, %2657
  %2664 = fadd fast float %2663, 0x400B573B80000000
  %2665 = fdiv fast float %2661, %2664
  %2666 = fcmp fast ogt float %2656, 0.000000e+00
  br i1 %2666, label %2673, label %2667

; <label>:2667                                    ; preds = %2654
  %2668 = fmul fast float %2656, %2656
  %2669 = fsub fast float 1.000000e+00, %2668
  %2670 = call float @dx.op.unary.f32(i32 25, float %2669)  ; Rsqrt(value)
  %2671 = fmul fast float %2670, 5.000000e-01
  %2672 = fsub fast float %2671, %2665
  br label %2673

; <label>:2673                                    ; preds = %2667, %2654
  %2674 = phi float [ %2672, %2667 ], [ %2665, %2654 ]
  %2675 = call float @dx.op.dot3.f32(i32 55, float %2615, float %2616, float %2617, float %2600, float %2601, float %2602)  ; Dot3(ax,ay,az,bx,by,bz)
  %2676 = call float @dx.op.unary.f32(i32 6, float %2675)  ; FAbs(value)
  %2677 = fmul fast float %2676, 0x3F8DBCFA00000000
  %2678 = fadd fast float %2677, 0x3FDFC6E900000000
  %2679 = fmul fast float %2678, %2676
  %2680 = fadd fast float %2679, 0x3FEB573B80000000
  %2681 = fadd fast float %2676, 0x4010A58D80000000
  %2682 = fmul fast float %2681, %2676
  %2683 = fadd fast float %2682, 0x400B573B80000000
  %2684 = fdiv fast float %2680, %2683
  %2685 = fcmp fast ogt float %2675, 0.000000e+00
  br i1 %2685, label %2692, label %2686

; <label>:2686                                    ; preds = %2673
  %2687 = fmul fast float %2675, %2675
  %2688 = fsub fast float 1.000000e+00, %2687
  %2689 = call float @dx.op.unary.f32(i32 25, float %2688)  ; Rsqrt(value)
  %2690 = fmul fast float %2689, 5.000000e-01
  %2691 = fsub fast float %2690, %2684
  br label %2692

; <label>:2692                                    ; preds = %2686, %2673
  %2693 = phi float [ %2691, %2686 ], [ %2684, %2673 ]
  %2694 = fsub fast float -0.000000e+00, %2636
  %2695 = fmul fast float %2600, %2694
  %2696 = fmul fast float %2601, %2694
  %2697 = fmul fast float %2602, %2694
  %2698 = fmul fast float %2655, %2610
  %2699 = fmul fast float %2655, %2611
  %2700 = fmul fast float %2655, %2612
  %2701 = fadd fast float %2698, %2695
  %2702 = fadd fast float %2699, %2696
  %2703 = fadd fast float %2700, %2697
  %2704 = fmul fast float %2703, %2606
  %2705 = fmul fast float %2702, %2607
  %2706 = fsub fast float %2704, %2705
  %2707 = fmul fast float %2701, %2607
  %2708 = fmul fast float %2703, %2605
  %2709 = fsub fast float %2707, %2708
  %2710 = fmul fast float %2702, %2605
  %2711 = fmul fast float %2701, %2606
  %2712 = fsub fast float %2710, %2711
  %2713 = fmul fast float %2693, %2600
  %2714 = fmul fast float %2693, %2601
  %2715 = fmul fast float %2693, %2602
  %2716 = fsub fast float -0.000000e+00, %2674
  %2717 = fmul fast float %2610, %2716
  %2718 = fmul fast float %2611, %2716
  %2719 = fmul fast float %2612, %2716
  %2720 = fadd fast float %2713, %2717
  %2721 = fadd fast float %2714, %2718
  %2722 = fadd fast float %2715, %2719
  %2723 = fmul fast float %2722, %2616
  %2724 = fmul fast float %2721, %2617
  %2725 = fsub fast float %2723, %2724
  %2726 = fmul fast float %2720, %2617
  %2727 = fmul fast float %2722, %2615
  %2728 = fsub fast float %2726, %2727
  %2729 = fmul fast float %2721, %2615
  %2730 = fmul fast float %2720, %2616
  %2731 = fsub fast float %2729, %2730
  %2732 = fadd fast float %2725, %2706
  %2733 = fadd fast float %2728, %2709
  %2734 = fadd fast float %2731, %2712
  %2735 = call float @dx.op.dot3.f32(i32 55, float %2732, float %2733, float %2734, float %2732, float %2733, float %2734)  ; Dot3(ax,ay,az,bx,by,bz)
  %2736 = call float @dx.op.unary.f32(i32 25, float %2735)  ; Rsqrt(value)
  %2737 = fmul fast float %2736, %2735
  %2738 = fmul fast float %2732, %2736
  %2739 = fmul fast float %2733, %2736
  %2740 = fmul fast float %2734, %2736
  %2741 = call float @dx.op.unary.f32(i32 24, float %2737)  ; Sqrt(value)
  %2742 = fcmp fast olt float %2740, %2741
  br i1 %2742, label %2743, label %2750

; <label>:2743                                    ; preds = %2692
  %2744 = fsub fast float -0.000000e+00, %2741
  %2745 = call float @dx.op.binary.f32(i32 35, float %2740, float %2744)  ; FMax(a,b)
  %2746 = fadd fast float %2745, %2741
  %2747 = fmul fast float %2746, %2746
  %2748 = fmul fast float %2741, 4.000000e+00
  %2749 = fdiv fast float %2747, %2748
  br label %2750

; <label>:2750                                    ; preds = %2743, %2692
  %2751 = phi float [ %2749, %2743 ], [ %2740, %2692 ]
  %2752 = fmul fast float %2737, %2751
  %2753 = fsub fast float -0.000000e+00, %2752
  %2754 = call float @dx.op.binary.f32(i32 36, float %2753, float 0.000000e+00)  ; FMin(a,b)
  %2755 = fmul fast float %2738, %2525
  %2756 = call float @dx.op.tertiary.f32(i32 46, float %2505, float %2739, float %2755)  ; FMad(a,b,c)
  %2757 = call float @dx.op.tertiary.f32(i32 46, float %2527, float %2740, float %2756)  ; FMad(a,b,c)
  %2758 = fmul fast float %2738, %2529
  %2759 = call float @dx.op.tertiary.f32(i32 46, float %2508, float %2739, float %2758)  ; FMad(a,b,c)
  %2760 = call float @dx.op.tertiary.f32(i32 46, float %2531, float %2740, float %2759)  ; FMad(a,b,c)
  %2761 = fmul fast float %2738, %2533
  %2762 = call float @dx.op.tertiary.f32(i32 46, float %2511, float %2739, float %2761)  ; FMad(a,b,c)
  %2763 = call float @dx.op.tertiary.f32(i32 46, float %2535, float %2740, float %2762)  ; FMad(a,b,c)
  %2764 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %2757, float %2760, float %2763)  ; Dot3(ax,ay,az,bx,by,bz)
  %2765 = fsub fast float 0x3F50624DE0000000, %2764
  %2766 = call float @dx.op.unary.f32(i32 7, float %2765)  ; Saturate(value)
  %2767 = fmul fast float %2766, %274
  %2768 = fmul fast float %2766, %275
  %2769 = fmul fast float %2766, %276
  %2770 = fadd fast float %2767, %2757
  %2771 = fadd fast float %2768, %2760
  %2772 = fadd fast float %2769, %2763
  %2773 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %2770, float %2771, float %2772)  ; Dot3(ax,ay,az,bx,by,bz)
  %2774 = fdiv fast float %924, %2773
  br i1 %1065, label %2775, label %2820

; <label>:2775                                    ; preds = %2750
  %2776 = fmul fast float %2774, %2772
  %2777 = fmul fast float %2774, %2771
  %2778 = fmul fast float %2774, %2770
  %2779 = fsub fast float %2778, %915
  %2780 = fsub fast float %2777, %916
  %2781 = fsub fast float %2776, %917
  %2782 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %2779, float %2780, float %2781)  ; Dot3(ax,ay,az,bx,by,bz)
  %2783 = fadd fast float %2782, %912
  %2784 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %2785 = fdiv fast float %2783, %2784
  %2786 = fmul fast float %2785, 5.000000e-01
  %2787 = fsub fast float 5.000000e-01, %2786
  %2788 = call float @dx.op.unary.f32(i32 7, float %2787)  ; Saturate(value)
  %2789 = fmul fast float %2788, %310
  %2790 = fadd fast float %2789, %308
  %2791 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %2779, float %2780, float %2781)  ; Dot3(ax,ay,az,bx,by,bz)
  %2792 = fadd fast float %2791, %911
  %2793 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %2794 = fdiv fast float %2792, %2793
  %2795 = fmul fast float %2794, 5.000000e-01
  %2796 = fadd fast float %2795, 5.000000e-01
  %2797 = call float @dx.op.unary.f32(i32 7, float %2796)  ; Saturate(value)
  %2798 = fmul fast float %2797, %309
  %2799 = fadd fast float %2798, %307
  %2800 = fmul fast float %284, %281
  %2801 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %2800)  ; FMax(a,b)
  %2802 = call float @dx.op.unary.f32(i32 25, float %2801)  ; Rsqrt(value)
  %2803 = fmul fast float %2802, %2774
  %2804 = call float @dx.op.unary.f32(i32 23, float %2803)  ; Log(value)
  %2805 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %2806 = fmul fast float %2805, %309
  %2807 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %2808 = fmul fast float %2807, %310
  %2809 = call float @dx.op.binary.f32(i32 36, float %2806, float %2808)  ; FMin(a,b)
  %2810 = call float @dx.op.unary.f32(i32 23, float %2809)  ; Log(value)
  %2811 = fadd fast float %2804, -2.000000e+00
  %2812 = fadd fast float %2811, %2810
  %2813 = call float @dx.op.binary.f32(i32 36, float %2812, float %306)  ; FMin(a,b)
  %2814 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2815 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2816 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2814, %dx.types.Handle %2815, float %2799, float %2790, float undef, float undef, i32 0, i32 0, i32 undef, float %2813)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2817 = extractvalue %dx.types.ResRet.f32 %2816, 0
  %2818 = extractvalue %dx.types.ResRet.f32 %2816, 1
  %2819 = extractvalue %dx.types.ResRet.f32 %2816, 2
  br label %2820

; <label>:2820                                    ; preds = %2775, %2750
  %2821 = phi float [ %2817, %2775 ], [ 1.000000e+00, %2750 ]
  %2822 = phi float [ %2818, %2775 ], [ 1.000000e+00, %2750 ]
  %2823 = phi float [ %2819, %2775 ], [ 1.000000e+00, %2750 ]
  %2824 = fmul fast float %2754, %2491
  %2825 = fsub fast float -0.000000e+00, %2824
  %2826 = fmul fast float %2821, %2825
  %2827 = fmul fast float %2822, %2825
  %2828 = fmul fast float %2823, %2825
  %2829 = fmul fast float %2461, 0x3FEEB851E0000000
  %2830 = fmul fast float %2829, %2829
  %2831 = fmul fast float %2456, 0x3FCC28F5C0000000
  %2832 = fsub fast float 0x3FE428F5C0000000, %2831
  %2833 = fmul fast float %2832, %2456
  %2834 = fadd fast float %2833, 0xBFE7D70A40000000
  %2835 = fmul fast float %2834, %2453
  %2836 = fcmp fast ogt float %139, 0.000000e+00
  br i1 %2836, label %2837, label %2878

; <label>:2837                                    ; preds = %2820
  %2838 = fmul fast float %1042, 0x3FE5555560000000
  %2839 = fsub fast float %2838, %2835
  %2840 = call float @dx.op.binary.f32(i32 35, float %2839, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2841 = call float @dx.op.binary.f32(i32 36, float %2840, float 1.000000e+00)  ; FMin(a,b)
  %2842 = fmul fast float %2456, 0x3FE5555560000000
  %2843 = fsub fast float %2842, %2835
  %2844 = call float @dx.op.binary.f32(i32 35, float %2843, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2845 = call float @dx.op.binary.f32(i32 36, float %2844, float 1.000000e+00)  ; FMin(a,b)
  %2846 = fdiv fast float 1.000000e+00, %2845
  %2847 = fdiv fast float 1.000000e+00, %2841
  %2848 = fmul fast float %178, 0x3FD45F3060000000
  %2849 = fmul fast float %179, 0x3FD45F3060000000
  %2850 = fmul fast float %180, 0x3FD45F3060000000
  %2851 = call float @dx.op.binary.f32(i32 35, float %2848, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2852 = call float @dx.op.binary.f32(i32 35, float %2849, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2853 = call float @dx.op.binary.f32(i32 35, float %2850, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2854 = call float @dx.op.unary.f32(i32 23, float %2851)  ; Log(value)
  %2855 = call float @dx.op.unary.f32(i32 23, float %2852)  ; Log(value)
  %2856 = call float @dx.op.unary.f32(i32 23, float %2853)  ; Log(value)
  %2857 = fadd fast float %2846, -2.000000e+00
  %2858 = fadd fast float %2857, %2847
  %2859 = call float @dx.op.binary.f32(i32 35, float %2858, float 0.000000e+00)  ; FMax(a,b)
  %2860 = fmul fast float %2854, 5.000000e-01
  %2861 = fmul fast float %2860, %2859
  %2862 = fmul fast float %2855, 5.000000e-01
  %2863 = fmul fast float %2862, %2859
  %2864 = fmul fast float %2856, 5.000000e-01
  %2865 = fmul fast float %2864, %2859
  %2866 = call float @dx.op.unary.f32(i32 21, float %2861)  ; Exp(value)
  %2867 = call float @dx.op.unary.f32(i32 21, float %2863)  ; Exp(value)
  %2868 = call float @dx.op.unary.f32(i32 21, float %2865)  ; Exp(value)
  %2869 = fadd fast float %2866, -1.000000e+00
  %2870 = fadd fast float %2867, -1.000000e+00
  %2871 = fadd fast float %2868, -1.000000e+00
  %2872 = fmul fast float %2869, %139
  %2873 = fmul fast float %2870, %139
  %2874 = fmul fast float %2871, %139
  %2875 = fadd fast float %2872, 1.000000e+00
  %2876 = fadd fast float %2873, 1.000000e+00
  %2877 = fadd fast float %2874, 1.000000e+00
  br label %2878

; <label>:2878                                    ; preds = %2837, %2820
  %2879 = phi float [ %2875, %2837 ], [ 1.000000e+00, %2820 ]
  %2880 = phi float [ %2876, %2837 ], [ 1.000000e+00, %2820 ]
  %2881 = phi float [ %2877, %2837 ], [ 1.000000e+00, %2820 ]
  %2882 = fmul fast float %1053, %1040
  %2883 = fmul fast float %196, 0x3FD45F3060000000
  %2884 = fmul fast float %2883, %2882
  %2885 = fmul fast float %2884, %1113
  %2886 = fmul fast float %197, 0x3FD45F3060000000
  %2887 = fmul fast float %2886, %2882
  %2888 = fmul fast float %2887, %1114
  %2889 = fmul fast float %198, 0x3FD45F3060000000
  %2890 = fmul fast float %2889, %2882
  %2891 = fmul fast float %2890, %1115
  %2892 = fmul fast float %2830, %2885
  %2893 = fmul fast float %2892, %2879
  %2894 = fmul fast float %2830, %2888
  %2895 = fmul fast float %2894, %2880
  %2896 = fmul fast float %2830, %2891
  %2897 = fmul fast float %2896, %2881
  %2898 = fsub fast float %2893, %2885
  %2899 = fsub fast float %2895, %2888
  %2900 = fsub fast float %2897, %2891
  %2901 = fmul fast float %2898, %118
  %2902 = fmul fast float %2899, %118
  %2903 = fmul fast float %2900, %118
  %2904 = fadd fast float %2901, %2885
  %2905 = fadd fast float %2902, %2888
  %2906 = fadd fast float %2903, %2891
  %2907 = fmul fast float %207, 5.000000e+01
  %2908 = fmul fast float %208, 5.000000e+01
  %2909 = fmul fast float %209, 5.000000e+01
  %2910 = call float @dx.op.unary.f32(i32 7, float %2907)  ; Saturate(value)
  %2911 = call float @dx.op.unary.f32(i32 7, float %2908)  ; Saturate(value)
  %2912 = call float @dx.op.unary.f32(i32 7, float %2909)  ; Saturate(value)
  %2913 = call float @dx.op.unary.f32(i32 24, float %2457)  ; Sqrt(value)
  %2914 = fmul fast float %1116, 9.843750e-01
  %2915 = fmul fast float %2913, 9.843750e-01
  %2916 = fadd fast float %2914, 7.812500e-03
  %2917 = fadd fast float %2915, 7.812500e-03
  %2918 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2919 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2920 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2918, %dx.types.Handle %2919, float %2916, float %2917, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2921 = extractvalue %dx.types.ResRet.f32 %2920, 0
  %2922 = extractvalue %dx.types.ResRet.f32 %2920, 1
  %2923 = extractvalue %dx.types.ResRet.f32 %2920, 2
  %2924 = extractvalue %dx.types.ResRet.f32 %2920, 3
  %2925 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2926 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2927 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2925, %dx.types.Handle %2926, float %2916, float %2917, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2928 = extractvalue %dx.types.ResRet.f32 %2927, 0
  %2929 = extractvalue %dx.types.ResRet.f32 %2927, 1
  %2930 = fmul fast float %2921, %2924
  %2931 = fmul fast float %2922, %2923
  %2932 = fsub fast float %2930, %2931
  %2933 = fdiv fast float %2921, %2932
  %2934 = fdiv fast float %2922, %2932
  %2935 = fdiv fast float %2923, %2932
  %2936 = fdiv fast float %2924, %2932
  %2937 = fsub fast float -0.000000e+00, %2935
  %2938 = fsub fast float -0.000000e+00, %2934
  %2939 = fmul fast float %2929, %2910
  %2940 = fmul fast float %2929, %2911
  %2941 = fmul fast float %2929, %2912
  %2942 = fsub fast float %2928, %2929
  %2943 = fmul fast float %2942, %207
  %2944 = fmul fast float %2942, %208
  %2945 = fmul fast float %2942, %209
  %2946 = fadd fast float %2943, %2939
  %2947 = fadd fast float %2944, %2940
  %2948 = fadd fast float %2945, %2941
  %2949 = fmul fast float %2446, %135
  %2950 = fmul fast float %2446, %136
  %2951 = fmul fast float %2446, %137
  %2952 = fsub fast float %396, %2949
  %2953 = fsub fast float %397, %2950
  %2954 = fsub fast float %398, %2951
  %2955 = call float @dx.op.dot3.f32(i32 55, float %2952, float %2953, float %2954, float %2952, float %2953, float %2954)  ; Dot3(ax,ay,az,bx,by,bz)
  %2956 = call float @dx.op.unary.f32(i32 25, float %2955)  ; Rsqrt(value)
  %2957 = fmul fast float %2952, %2956
  %2958 = fmul fast float %2953, %2956
  %2959 = fmul fast float %2954, %2956
  %2960 = fmul fast float %2959, %136
  %2961 = fmul fast float %2958, %137
  %2962 = fsub fast float %2960, %2961
  %2963 = fmul fast float %2957, %137
  %2964 = fmul fast float %2959, %135
  %2965 = fsub fast float %2963, %2964
  %2966 = fmul fast float %2958, %135
  %2967 = fmul fast float %2957, %136
  %2968 = fsub fast float %2966, %2967
  %2969 = fmul fast float %2957, %2921
  %2970 = call float @dx.op.tertiary.f32(i32 46, float %2923, float %135, float %2969)  ; FMad(a,b,c)
  %2971 = fmul fast float %2958, %2921
  %2972 = call float @dx.op.tertiary.f32(i32 46, float %2923, float %136, float %2971)  ; FMad(a,b,c)
  %2973 = fmul fast float %2959, %2921
  %2974 = call float @dx.op.tertiary.f32(i32 46, float %2923, float %137, float %2973)  ; FMad(a,b,c)
  %2975 = fmul fast float %2957, %2922
  %2976 = call float @dx.op.tertiary.f32(i32 46, float %2924, float %135, float %2975)  ; FMad(a,b,c)
  %2977 = fmul fast float %2958, %2922
  %2978 = call float @dx.op.tertiary.f32(i32 46, float %2924, float %136, float %2977)  ; FMad(a,b,c)
  %2979 = fmul fast float %2959, %2922
  %2980 = call float @dx.op.tertiary.f32(i32 46, float %2924, float %137, float %2979)  ; FMad(a,b,c)
  %2981 = fmul fast float %2957, %2936
  %2982 = call float @dx.op.tertiary.f32(i32 46, float %135, float %2938, float %2981)  ; FMad(a,b,c)
  %2983 = fmul fast float %2957, %2937
  %2984 = call float @dx.op.tertiary.f32(i32 46, float %135, float %2933, float %2983)  ; FMad(a,b,c)
  %2985 = fmul fast float %2958, %2936
  %2986 = call float @dx.op.tertiary.f32(i32 46, float %136, float %2938, float %2985)  ; FMad(a,b,c)
  %2987 = fmul fast float %2958, %2937
  %2988 = call float @dx.op.tertiary.f32(i32 46, float %136, float %2933, float %2987)  ; FMad(a,b,c)
  %2989 = fmul fast float %2959, %2936
  %2990 = call float @dx.op.tertiary.f32(i32 46, float %137, float %2938, float %2989)  ; FMad(a,b,c)
  %2991 = fmul fast float %2959, %2937
  %2992 = call float @dx.op.tertiary.f32(i32 46, float %137, float %2933, float %2991)  ; FMad(a,b,c)
  %2993 = fmul fast float %913, %805
  %2994 = fmul fast float %913, %808
  %2995 = fmul fast float %913, %811
  %2996 = fsub fast float %915, %2993
  %2997 = fsub fast float %916, %2994
  %2998 = fsub fast float %917, %2995
  %2999 = fmul fast float %914, %278
  %3000 = fmul fast float %914, %279
  %3001 = fmul fast float %914, %280
  %3002 = fsub fast float %2996, %2999
  %3003 = fsub fast float %2997, %3000
  %3004 = fsub fast float %2998, %3001
  %3005 = fmul fast float %2970, %3002
  %3006 = call float @dx.op.tertiary.f32(i32 46, float %2972, float %3003, float %3005)  ; FMad(a,b,c)
  %3007 = call float @dx.op.tertiary.f32(i32 46, float %2974, float %3004, float %3006)  ; FMad(a,b,c)
  %3008 = fmul fast float %2962, %3002
  %3009 = call float @dx.op.tertiary.f32(i32 46, float %2965, float %3003, float %3008)  ; FMad(a,b,c)
  %3010 = call float @dx.op.tertiary.f32(i32 46, float %2968, float %3004, float %3009)  ; FMad(a,b,c)
  %3011 = fmul fast float %2976, %3002
  %3012 = call float @dx.op.tertiary.f32(i32 46, float %2978, float %3003, float %3011)  ; FMad(a,b,c)
  %3013 = call float @dx.op.tertiary.f32(i32 46, float %2980, float %3004, float %3012)  ; FMad(a,b,c)
  %3014 = fadd fast float %915, %2993
  %3015 = fsub fast float %3014, %2999
  %3016 = fsub fast float %2994, %3000
  %3017 = fadd fast float %3016, %916
  %3018 = fsub fast float %2995, %3001
  %3019 = fadd fast float %3018, %917
  %3020 = fmul fast float %2970, %3015
  %3021 = call float @dx.op.tertiary.f32(i32 46, float %2972, float %3017, float %3020)  ; FMad(a,b,c)
  %3022 = call float @dx.op.tertiary.f32(i32 46, float %2974, float %3019, float %3021)  ; FMad(a,b,c)
  %3023 = fmul fast float %2962, %3015
  %3024 = call float @dx.op.tertiary.f32(i32 46, float %2965, float %3017, float %3023)  ; FMad(a,b,c)
  %3025 = call float @dx.op.tertiary.f32(i32 46, float %2968, float %3019, float %3024)  ; FMad(a,b,c)
  %3026 = fmul fast float %2976, %3015
  %3027 = call float @dx.op.tertiary.f32(i32 46, float %2978, float %3017, float %3026)  ; FMad(a,b,c)
  %3028 = call float @dx.op.tertiary.f32(i32 46, float %2980, float %3019, float %3027)  ; FMad(a,b,c)
  %3029 = fadd fast float %3014, %2999
  %3030 = fadd fast float %3000, %2994
  %3031 = fadd fast float %3030, %916
  %3032 = fadd fast float %3001, %2995
  %3033 = fadd fast float %3032, %917
  %3034 = fmul fast float %2970, %3029
  %3035 = call float @dx.op.tertiary.f32(i32 46, float %2972, float %3031, float %3034)  ; FMad(a,b,c)
  %3036 = call float @dx.op.tertiary.f32(i32 46, float %2974, float %3033, float %3035)  ; FMad(a,b,c)
  %3037 = fmul fast float %2962, %3029
  %3038 = call float @dx.op.tertiary.f32(i32 46, float %2965, float %3031, float %3037)  ; FMad(a,b,c)
  %3039 = call float @dx.op.tertiary.f32(i32 46, float %2968, float %3033, float %3038)  ; FMad(a,b,c)
  %3040 = fmul fast float %2976, %3029
  %3041 = call float @dx.op.tertiary.f32(i32 46, float %2978, float %3031, float %3040)  ; FMad(a,b,c)
  %3042 = call float @dx.op.tertiary.f32(i32 46, float %2980, float %3033, float %3041)  ; FMad(a,b,c)
  %3043 = fadd fast float %2996, %2999
  %3044 = fadd fast float %2997, %3000
  %3045 = fadd fast float %2998, %3001
  %3046 = fmul fast float %2970, %3043
  %3047 = call float @dx.op.tertiary.f32(i32 46, float %2972, float %3044, float %3046)  ; FMad(a,b,c)
  %3048 = call float @dx.op.tertiary.f32(i32 46, float %2974, float %3045, float %3047)  ; FMad(a,b,c)
  %3049 = fmul fast float %2962, %3043
  %3050 = call float @dx.op.tertiary.f32(i32 46, float %2965, float %3044, float %3049)  ; FMad(a,b,c)
  %3051 = call float @dx.op.tertiary.f32(i32 46, float %2968, float %3045, float %3050)  ; FMad(a,b,c)
  %3052 = fmul fast float %2976, %3043
  %3053 = call float @dx.op.tertiary.f32(i32 46, float %2978, float %3044, float %3052)  ; FMad(a,b,c)
  %3054 = call float @dx.op.tertiary.f32(i32 46, float %2980, float %3045, float %3053)  ; FMad(a,b,c)
  %3055 = call float @dx.op.dot3.f32(i32 55, float %3007, float %3010, float %3013, float %3007, float %3010, float %3013)  ; Dot3(ax,ay,az,bx,by,bz)
  %3056 = call float @dx.op.unary.f32(i32 25, float %3055)  ; Rsqrt(value)
  %3057 = fmul fast float %3056, %3007
  %3058 = fmul fast float %3056, %3010
  %3059 = fmul fast float %3056, %3013
  %3060 = call float @dx.op.dot3.f32(i32 55, float %3022, float %3025, float %3028, float %3022, float %3025, float %3028)  ; Dot3(ax,ay,az,bx,by,bz)
  %3061 = call float @dx.op.unary.f32(i32 25, float %3060)  ; Rsqrt(value)
  %3062 = fmul fast float %3061, %3022
  %3063 = fmul fast float %3061, %3025
  %3064 = fmul fast float %3061, %3028
  %3065 = call float @dx.op.dot3.f32(i32 55, float %3036, float %3039, float %3042, float %3036, float %3039, float %3042)  ; Dot3(ax,ay,az,bx,by,bz)
  %3066 = call float @dx.op.unary.f32(i32 25, float %3065)  ; Rsqrt(value)
  %3067 = fmul fast float %3066, %3036
  %3068 = fmul fast float %3066, %3039
  %3069 = fmul fast float %3066, %3042
  %3070 = call float @dx.op.dot3.f32(i32 55, float %3048, float %3051, float %3054, float %3048, float %3051, float %3054)  ; Dot3(ax,ay,az,bx,by,bz)
  %3071 = call float @dx.op.unary.f32(i32 25, float %3070)  ; Rsqrt(value)
  %3072 = fmul fast float %3071, %3048
  %3073 = fmul fast float %3071, %3051
  %3074 = fmul fast float %3071, %3054
  %3075 = call float @dx.op.dot3.f32(i32 55, float %3057, float %3058, float %3059, float %3062, float %3063, float %3064)  ; Dot3(ax,ay,az,bx,by,bz)
  %3076 = call float @dx.op.unary.f32(i32 6, float %3075)  ; FAbs(value)
  %3077 = fmul fast float %3076, 0x3F8DBCFA00000000
  %3078 = fadd fast float %3077, 0x3FDFC6E900000000
  %3079 = fmul fast float %3078, %3076
  %3080 = fadd fast float %3079, 0x3FEB573B80000000
  %3081 = fadd fast float %3076, 0x4010A58D80000000
  %3082 = fmul fast float %3081, %3076
  %3083 = fadd fast float %3082, 0x400B573B80000000
  %3084 = fdiv fast float %3080, %3083
  %3085 = fcmp fast ogt float %3075, 0.000000e+00
  br i1 %3085, label %3092, label %3086

; <label>:3086                                    ; preds = %2878
  %3087 = fmul fast float %3075, %3075
  %3088 = fsub fast float 1.000000e+00, %3087
  %3089 = call float @dx.op.unary.f32(i32 25, float %3088)  ; Rsqrt(value)
  %3090 = fmul fast float %3089, 5.000000e-01
  %3091 = fsub fast float %3090, %3084
  br label %3092

; <label>:3092                                    ; preds = %3086, %2878
  %3093 = phi float [ %3091, %3086 ], [ %3084, %2878 ]
  %3094 = call float @dx.op.dot3.f32(i32 55, float %3062, float %3063, float %3064, float %3067, float %3068, float %3069)  ; Dot3(ax,ay,az,bx,by,bz)
  %3095 = call float @dx.op.unary.f32(i32 6, float %3094)  ; FAbs(value)
  %3096 = fmul fast float %3095, 0x3F8DBCFA00000000
  %3097 = fadd fast float %3096, 0x3FDFC6E900000000
  %3098 = fmul fast float %3097, %3095
  %3099 = fadd fast float %3098, 0x3FEB573B80000000
  %3100 = fadd fast float %3095, 0x4010A58D80000000
  %3101 = fmul fast float %3100, %3095
  %3102 = fadd fast float %3101, 0x400B573B80000000
  %3103 = fdiv fast float %3099, %3102
  %3104 = fcmp fast ogt float %3094, 0.000000e+00
  br i1 %3104, label %3111, label %3105

; <label>:3105                                    ; preds = %3092
  %3106 = fmul fast float %3094, %3094
  %3107 = fsub fast float 1.000000e+00, %3106
  %3108 = call float @dx.op.unary.f32(i32 25, float %3107)  ; Rsqrt(value)
  %3109 = fmul fast float %3108, 5.000000e-01
  %3110 = fsub fast float %3109, %3103
  br label %3111

; <label>:3111                                    ; preds = %3105, %3092
  %3112 = phi float [ %3110, %3105 ], [ %3103, %3092 ]
  %3113 = call float @dx.op.dot3.f32(i32 55, float %3067, float %3068, float %3069, float %3072, float %3073, float %3074)  ; Dot3(ax,ay,az,bx,by,bz)
  %3114 = call float @dx.op.unary.f32(i32 6, float %3113)  ; FAbs(value)
  %3115 = fmul fast float %3114, 0x3F8DBCFA00000000
  %3116 = fadd fast float %3115, 0x3FDFC6E900000000
  %3117 = fmul fast float %3116, %3114
  %3118 = fadd fast float %3117, 0x3FEB573B80000000
  %3119 = fadd fast float %3114, 0x4010A58D80000000
  %3120 = fmul fast float %3119, %3114
  %3121 = fadd fast float %3120, 0x400B573B80000000
  %3122 = fdiv fast float %3118, %3121
  %3123 = fcmp fast ogt float %3113, 0.000000e+00
  br i1 %3123, label %3130, label %3124

; <label>:3124                                    ; preds = %3111
  %3125 = fmul fast float %3113, %3113
  %3126 = fsub fast float 1.000000e+00, %3125
  %3127 = call float @dx.op.unary.f32(i32 25, float %3126)  ; Rsqrt(value)
  %3128 = fmul fast float %3127, 5.000000e-01
  %3129 = fsub fast float %3128, %3122
  br label %3130

; <label>:3130                                    ; preds = %3124, %3111
  %3131 = phi float [ %3129, %3124 ], [ %3122, %3111 ]
  %3132 = call float @dx.op.dot3.f32(i32 55, float %3072, float %3073, float %3074, float %3057, float %3058, float %3059)  ; Dot3(ax,ay,az,bx,by,bz)
  %3133 = call float @dx.op.unary.f32(i32 6, float %3132)  ; FAbs(value)
  %3134 = fmul fast float %3133, 0x3F8DBCFA00000000
  %3135 = fadd fast float %3134, 0x3FDFC6E900000000
  %3136 = fmul fast float %3135, %3133
  %3137 = fadd fast float %3136, 0x3FEB573B80000000
  %3138 = fadd fast float %3133, 0x4010A58D80000000
  %3139 = fmul fast float %3138, %3133
  %3140 = fadd fast float %3139, 0x400B573B80000000
  %3141 = fdiv fast float %3137, %3140
  %3142 = fcmp fast ogt float %3132, 0.000000e+00
  br i1 %3142, label %3149, label %3143

; <label>:3143                                    ; preds = %3130
  %3144 = fmul fast float %3132, %3132
  %3145 = fsub fast float 1.000000e+00, %3144
  %3146 = call float @dx.op.unary.f32(i32 25, float %3145)  ; Rsqrt(value)
  %3147 = fmul fast float %3146, 5.000000e-01
  %3148 = fsub fast float %3147, %3141
  br label %3149

; <label>:3149                                    ; preds = %3143, %3130
  %3150 = phi float [ %3148, %3143 ], [ %3141, %3130 ]
  %3151 = fsub fast float -0.000000e+00, %3093
  %3152 = fmul fast float %3057, %3151
  %3153 = fmul fast float %3058, %3151
  %3154 = fmul fast float %3059, %3151
  %3155 = fmul fast float %3112, %3067
  %3156 = fmul fast float %3112, %3068
  %3157 = fmul fast float %3112, %3069
  %3158 = fadd fast float %3155, %3152
  %3159 = fadd fast float %3156, %3153
  %3160 = fadd fast float %3157, %3154
  %3161 = fmul fast float %3160, %3063
  %3162 = fmul fast float %3159, %3064
  %3163 = fsub fast float %3161, %3162
  %3164 = fmul fast float %3158, %3064
  %3165 = fmul fast float %3160, %3062
  %3166 = fsub fast float %3164, %3165
  %3167 = fmul fast float %3159, %3062
  %3168 = fmul fast float %3158, %3063
  %3169 = fsub fast float %3167, %3168
  %3170 = fmul fast float %3150, %3057
  %3171 = fmul fast float %3150, %3058
  %3172 = fmul fast float %3150, %3059
  %3173 = fsub fast float -0.000000e+00, %3131
  %3174 = fmul fast float %3067, %3173
  %3175 = fmul fast float %3068, %3173
  %3176 = fmul fast float %3069, %3173
  %3177 = fadd fast float %3170, %3174
  %3178 = fadd fast float %3171, %3175
  %3179 = fadd fast float %3172, %3176
  %3180 = fmul fast float %3179, %3073
  %3181 = fmul fast float %3178, %3074
  %3182 = fsub fast float %3180, %3181
  %3183 = fmul fast float %3177, %3074
  %3184 = fmul fast float %3179, %3072
  %3185 = fsub fast float %3183, %3184
  %3186 = fmul fast float %3178, %3072
  %3187 = fmul fast float %3177, %3073
  %3188 = fsub fast float %3186, %3187
  %3189 = fadd fast float %3182, %3163
  %3190 = fadd fast float %3185, %3166
  %3191 = fadd fast float %3188, %3169
  %3192 = call float @dx.op.dot3.f32(i32 55, float %3189, float %3190, float %3191, float %3189, float %3190, float %3191)  ; Dot3(ax,ay,az,bx,by,bz)
  %3193 = call float @dx.op.unary.f32(i32 25, float %3192)  ; Rsqrt(value)
  %3194 = fmul fast float %3193, %3192
  %3195 = fmul fast float %3189, %3193
  %3196 = fmul fast float %3190, %3193
  %3197 = fmul fast float %3191, %3193
  %3198 = call float @dx.op.unary.f32(i32 24, float %3194)  ; Sqrt(value)
  %3199 = fcmp fast olt float %3197, %3198
  br i1 %3199, label %3200, label %3207

; <label>:3200                                    ; preds = %3149
  %3201 = fsub fast float -0.000000e+00, %3198
  %3202 = call float @dx.op.binary.f32(i32 35, float %3197, float %3201)  ; FMax(a,b)
  %3203 = fadd fast float %3202, %3198
  %3204 = fmul fast float %3203, %3203
  %3205 = fmul fast float %3198, 4.000000e+00
  %3206 = fdiv fast float %3204, %3205
  br label %3207

; <label>:3207                                    ; preds = %3200, %3149
  %3208 = phi float [ %3206, %3200 ], [ %3197, %3149 ]
  %3209 = fmul fast float %3194, %3208
  %3210 = fsub fast float -0.000000e+00, %3209
  %3211 = call float @dx.op.binary.f32(i32 36, float %3210, float 0.000000e+00)  ; FMin(a,b)
  %3212 = fsub fast float -0.000000e+00, %3211
  %3213 = fmul fast float %3195, %2982
  %3214 = call float @dx.op.tertiary.f32(i32 46, float %2962, float %3196, float %3213)  ; FMad(a,b,c)
  %3215 = call float @dx.op.tertiary.f32(i32 46, float %2984, float %3197, float %3214)  ; FMad(a,b,c)
  %3216 = fmul fast float %3195, %2986
  %3217 = call float @dx.op.tertiary.f32(i32 46, float %2965, float %3196, float %3216)  ; FMad(a,b,c)
  %3218 = call float @dx.op.tertiary.f32(i32 46, float %2988, float %3197, float %3217)  ; FMad(a,b,c)
  %3219 = fmul fast float %3195, %2990
  %3220 = call float @dx.op.tertiary.f32(i32 46, float %2968, float %3196, float %3219)  ; FMad(a,b,c)
  %3221 = call float @dx.op.tertiary.f32(i32 46, float %2992, float %3197, float %3220)  ; FMad(a,b,c)
  %3222 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %3215, float %3218, float %3221)  ; Dot3(ax,ay,az,bx,by,bz)
  %3223 = fsub fast float 0x3F50624DE0000000, %3222
  %3224 = call float @dx.op.unary.f32(i32 7, float %3223)  ; Saturate(value)
  %3225 = fmul fast float %3224, %274
  %3226 = fmul fast float %3224, %275
  %3227 = fmul fast float %3224, %276
  %3228 = fadd fast float %3225, %3215
  %3229 = fadd fast float %3226, %3218
  %3230 = fadd fast float %3227, %3221
  %3231 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %3228, float %3229, float %3230)  ; Dot3(ax,ay,az,bx,by,bz)
  %3232 = fdiv fast float %924, %3231
  br i1 %1065, label %3233, label %3278

; <label>:3233                                    ; preds = %3207
  %3234 = fmul fast float %3232, %3230
  %3235 = fmul fast float %3232, %3229
  %3236 = fmul fast float %3232, %3228
  %3237 = fsub fast float %3236, %915
  %3238 = fsub fast float %3235, %916
  %3239 = fsub fast float %3234, %917
  %3240 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %3237, float %3238, float %3239)  ; Dot3(ax,ay,az,bx,by,bz)
  %3241 = fadd fast float %3240, %912
  %3242 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %3243 = fdiv fast float %3241, %3242
  %3244 = fmul fast float %3243, 5.000000e-01
  %3245 = fsub fast float 5.000000e-01, %3244
  %3246 = call float @dx.op.unary.f32(i32 7, float %3245)  ; Saturate(value)
  %3247 = fmul fast float %3246, %310
  %3248 = fadd fast float %3247, %308
  %3249 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %3237, float %3238, float %3239)  ; Dot3(ax,ay,az,bx,by,bz)
  %3250 = fadd fast float %3249, %911
  %3251 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %3252 = fdiv fast float %3250, %3251
  %3253 = fmul fast float %3252, 5.000000e-01
  %3254 = fadd fast float %3253, 5.000000e-01
  %3255 = call float @dx.op.unary.f32(i32 7, float %3254)  ; Saturate(value)
  %3256 = fmul fast float %3255, %309
  %3257 = fadd fast float %3256, %307
  %3258 = fmul fast float %284, %281
  %3259 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %3258)  ; FMax(a,b)
  %3260 = call float @dx.op.unary.f32(i32 25, float %3259)  ; Rsqrt(value)
  %3261 = fmul fast float %3260, %3232
  %3262 = call float @dx.op.unary.f32(i32 23, float %3261)  ; Log(value)
  %3263 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %3264 = fmul fast float %3263, %309
  %3265 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %3266 = fmul fast float %3265, %310
  %3267 = call float @dx.op.binary.f32(i32 36, float %3264, float %3266)  ; FMin(a,b)
  %3268 = call float @dx.op.unary.f32(i32 23, float %3267)  ; Log(value)
  %3269 = fadd fast float %3262, -2.000000e+00
  %3270 = fadd fast float %3269, %3268
  %3271 = call float @dx.op.binary.f32(i32 36, float %3270, float %306)  ; FMin(a,b)
  %3272 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3273 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3274 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3272, %dx.types.Handle %3273, float %3257, float %3248, float undef, float undef, i32 0, i32 0, i32 undef, float %3271)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3275 = extractvalue %dx.types.ResRet.f32 %3274, 0
  %3276 = extractvalue %dx.types.ResRet.f32 %3274, 1
  %3277 = extractvalue %dx.types.ResRet.f32 %3274, 2
  br label %3278

; <label>:3278                                    ; preds = %3233, %3207
  %3279 = phi float [ %3275, %3233 ], [ 1.000000e+00, %3207 ]
  %3280 = phi float [ %3276, %3233 ], [ 1.000000e+00, %3207 ]
  %3281 = phi float [ %3277, %3233 ], [ 1.000000e+00, %3207 ]
  %3282 = fmul fast float %2946, %3212
  %3283 = fmul fast float %3282, %3279
  %3284 = fmul fast float %2947, %3212
  %3285 = fmul fast float %3284, %3280
  %3286 = fmul fast float %2948, %3212
  %3287 = fmul fast float %3286, %3281
  %3288 = fmul fast float %2879, %2830
  %3289 = fmul fast float %2880, %2830
  %3290 = fmul fast float %2881, %2830
  %3291 = fmul fast float %3288, %3283
  %3292 = fmul fast float %3289, %3285
  %3293 = fmul fast float %3290, %3287
  %3294 = fsub fast float %3291, %3283
  %3295 = fsub fast float %3292, %3285
  %3296 = fsub fast float %3293, %3287
  %3297 = fadd fast float %3294, %2826
  %3298 = fmul fast float %3297, %118
  %3299 = fadd fast float %3298, %3283
  %3300 = fadd fast float %3295, %2827
  %3301 = fmul fast float %3300, %118
  %3302 = fadd fast float %3301, %3285
  %3303 = fadd fast float %3296, %2828
  %3304 = fmul fast float %3303, %118
  %3305 = fadd fast float %3304, %3287
  br label %5805

; <label>:3306                                    ; preds = %1112
  %3307 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %3308 = call float @dx.op.dot3.f32(i32 55, float %396, float %397, float %398, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %3309 = fmul fast float %3308, 2.000000e+00
  %3310 = fadd fast float %3309, 2.000000e+00
  %3311 = call float @dx.op.unary.f32(i32 25, float %3310)  ; Rsqrt(value)
  %3312 = fmul fast float %3311, %3308
  %3313 = fadd fast float %3312, %3311
  %3314 = call float @dx.op.unary.f32(i32 7, float %3313)  ; Saturate(value)
  %3315 = call float @dx.op.unary.f32(i32 6, float %3307)  ; FAbs(value)
  %3316 = fadd fast float %3315, 0x3EE4F8B580000000
  %3317 = call float @dx.op.unary.f32(i32 7, float %3316)  ; Saturate(value)
  %3318 = fmul fast float %118, 2.550000e+02
  %3319 = fadd fast float %3318, 5.000000e-01
  %3320 = fptoui float %3319 to i32
  %3321 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3322 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3321, i32 0, i32 5, i32 %3320, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3323 = extractvalue %dx.types.ResRet.f32 %3322, 1
  %3324 = extractvalue %dx.types.ResRet.f32 %3322, 2
  %3325 = fadd fast float %121, 0xBFB99999A0000000
  %3326 = fmul fast float %3325, 1.000000e+01
  %3327 = call float @dx.op.unary.f32(i32 7, float %3326)  ; Saturate(value)
  %3328 = fmul fast float %3323, 2.000000e+00
  %3329 = fadd fast float %3328, -1.000000e+00
  %3330 = fmul fast float %3329, %3327
  %3331 = fadd fast float %3330, 1.000000e+00
  %3332 = fmul fast float %3331, %1116
  %3333 = call float @dx.op.unary.f32(i32 7, float %3332)  ; Saturate(value)
  %3334 = fmul fast float %1116, 2.000000e+00
  %3335 = fmul fast float %3314, %3314
  %3336 = fmul fast float %3335, %3334
  %3337 = fadd fast float %3336, -5.000000e-01
  %3338 = fsub fast float 1.000000e+00, %3317
  %3339 = fmul fast float %3338, %3338
  %3340 = fmul fast float %3339, %3339
  %3341 = fmul fast float %3340, %3338
  %3342 = fmul fast float %3341, %3337
  %3343 = fadd fast float %3342, 1.000000e+00
  %3344 = fsub fast float 1.000000e+00, %1053
  %3345 = fmul fast float %3344, %3344
  %3346 = fmul fast float %3345, %3345
  %3347 = fmul fast float %3346, %3344
  %3348 = fmul fast float %3347, %3337
  %3349 = fadd fast float %3348, 1.000000e+00
  %3350 = fmul fast float %3349, 0x3FD45F3060000000
  %3351 = fmul fast float %3350, %3343
  %3352 = fmul fast float %1053, %1040
  %3353 = fmul fast float %3352, %196
  %3354 = fmul fast float %3353, %1113
  %3355 = fmul fast float %3354, %3351
  %3356 = fmul fast float %3352, %197
  %3357 = fmul fast float %3356, %1114
  %3358 = fmul fast float %3357, %3351
  %3359 = fmul fast float %3352, %198
  %3360 = fmul fast float %3359, %1115
  %3361 = fmul fast float %3360, %3351
  %3362 = extractvalue %dx.types.ResRet.f32 %3322, 0
  %3363 = fmul fast float %3362, 2.000000e+00
  %3364 = fadd fast float %3363, -1.000000e+00
  %3365 = fmul fast float %3327, %3364
  %3366 = fadd fast float %3365, 1.000000e+00
  %3367 = fmul fast float %3366, %1116
  %3368 = call float @dx.op.unary.f32(i32 7, float %3367)  ; Saturate(value)
  %3369 = call float @dx.op.binary.f32(i32 35, float %3368, float 0x3F947AE140000000)  ; FMax(a,b)
  %3370 = fmul fast float %207, 5.000000e+01
  %3371 = fmul fast float %208, 5.000000e+01
  %3372 = fmul fast float %209, 5.000000e+01
  %3373 = call float @dx.op.unary.f32(i32 7, float %3370)  ; Saturate(value)
  %3374 = call float @dx.op.unary.f32(i32 7, float %3371)  ; Saturate(value)
  %3375 = call float @dx.op.unary.f32(i32 7, float %3372)  ; Saturate(value)
  %3376 = call float @dx.op.unary.f32(i32 24, float %3338)  ; Sqrt(value)
  %3377 = fmul fast float %3369, 9.843750e-01
  %3378 = fmul fast float %3376, 9.843750e-01
  %3379 = fadd fast float %3377, 7.812500e-03
  %3380 = fadd fast float %3378, 7.812500e-03
  %3381 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3382 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3383 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3381, %dx.types.Handle %3382, float %3379, float %3380, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3384 = extractvalue %dx.types.ResRet.f32 %3383, 0
  %3385 = extractvalue %dx.types.ResRet.f32 %3383, 1
  %3386 = extractvalue %dx.types.ResRet.f32 %3383, 2
  %3387 = extractvalue %dx.types.ResRet.f32 %3383, 3
  %3388 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3389 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3390 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3388, %dx.types.Handle %3389, float %3379, float %3380, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3391 = extractvalue %dx.types.ResRet.f32 %3390, 0
  %3392 = extractvalue %dx.types.ResRet.f32 %3390, 1
  %3393 = fmul fast float %3384, %3387
  %3394 = fmul fast float %3385, %3386
  %3395 = fsub fast float %3393, %3394
  %3396 = fdiv fast float %3384, %3395
  %3397 = fdiv fast float %3385, %3395
  %3398 = fdiv fast float %3386, %3395
  %3399 = fdiv fast float %3387, %3395
  %3400 = fsub fast float -0.000000e+00, %3398
  %3401 = fsub fast float -0.000000e+00, %3397
  %3402 = fmul fast float %3392, %3373
  %3403 = fmul fast float %3392, %3374
  %3404 = fmul fast float %3392, %3375
  %3405 = fsub fast float %3391, %3392
  %3406 = fmul fast float %3405, %207
  %3407 = fmul fast float %3405, %208
  %3408 = fmul fast float %3405, %209
  %3409 = fadd fast float %3406, %3402
  %3410 = fadd fast float %3407, %3403
  %3411 = fadd fast float %3408, %3404
  %3412 = fmul fast float %3307, %135
  %3413 = fmul fast float %3307, %136
  %3414 = fmul fast float %3307, %137
  %3415 = fsub fast float %396, %3412
  %3416 = fsub fast float %397, %3413
  %3417 = fsub fast float %398, %3414
  %3418 = call float @dx.op.dot3.f32(i32 55, float %3415, float %3416, float %3417, float %3415, float %3416, float %3417)  ; Dot3(ax,ay,az,bx,by,bz)
  %3419 = call float @dx.op.unary.f32(i32 25, float %3418)  ; Rsqrt(value)
  %3420 = fmul fast float %3415, %3419
  %3421 = fmul fast float %3416, %3419
  %3422 = fmul fast float %3417, %3419
  %3423 = fmul fast float %3422, %136
  %3424 = fmul fast float %3421, %137
  %3425 = fsub fast float %3423, %3424
  %3426 = fmul fast float %3420, %137
  %3427 = fmul fast float %3422, %135
  %3428 = fsub fast float %3426, %3427
  %3429 = fmul fast float %3421, %135
  %3430 = fmul fast float %3420, %136
  %3431 = fsub fast float %3429, %3430
  %3432 = fmul fast float %3420, %3384
  %3433 = call float @dx.op.tertiary.f32(i32 46, float %3386, float %135, float %3432)  ; FMad(a,b,c)
  %3434 = fmul fast float %3421, %3384
  %3435 = call float @dx.op.tertiary.f32(i32 46, float %3386, float %136, float %3434)  ; FMad(a,b,c)
  %3436 = fmul fast float %3422, %3384
  %3437 = call float @dx.op.tertiary.f32(i32 46, float %3386, float %137, float %3436)  ; FMad(a,b,c)
  %3438 = fmul fast float %3420, %3385
  %3439 = call float @dx.op.tertiary.f32(i32 46, float %3387, float %135, float %3438)  ; FMad(a,b,c)
  %3440 = fmul fast float %3421, %3385
  %3441 = call float @dx.op.tertiary.f32(i32 46, float %3387, float %136, float %3440)  ; FMad(a,b,c)
  %3442 = fmul fast float %3422, %3385
  %3443 = call float @dx.op.tertiary.f32(i32 46, float %3387, float %137, float %3442)  ; FMad(a,b,c)
  %3444 = fmul fast float %3420, %3399
  %3445 = call float @dx.op.tertiary.f32(i32 46, float %135, float %3401, float %3444)  ; FMad(a,b,c)
  %3446 = fmul fast float %3420, %3400
  %3447 = call float @dx.op.tertiary.f32(i32 46, float %135, float %3396, float %3446)  ; FMad(a,b,c)
  %3448 = fmul fast float %3421, %3399
  %3449 = call float @dx.op.tertiary.f32(i32 46, float %136, float %3401, float %3448)  ; FMad(a,b,c)
  %3450 = fmul fast float %3421, %3400
  %3451 = call float @dx.op.tertiary.f32(i32 46, float %136, float %3396, float %3450)  ; FMad(a,b,c)
  %3452 = fmul fast float %3422, %3399
  %3453 = call float @dx.op.tertiary.f32(i32 46, float %137, float %3401, float %3452)  ; FMad(a,b,c)
  %3454 = fmul fast float %3422, %3400
  %3455 = call float @dx.op.tertiary.f32(i32 46, float %137, float %3396, float %3454)  ; FMad(a,b,c)
  %3456 = fmul fast float %913, %805
  %3457 = fmul fast float %913, %808
  %3458 = fmul fast float %913, %811
  %3459 = fsub fast float %915, %3456
  %3460 = fsub fast float %916, %3457
  %3461 = fsub fast float %917, %3458
  %3462 = fmul fast float %914, %278
  %3463 = fmul fast float %914, %279
  %3464 = fmul fast float %914, %280
  %3465 = fsub fast float %3459, %3462
  %3466 = fsub fast float %3460, %3463
  %3467 = fsub fast float %3461, %3464
  %3468 = fmul fast float %3433, %3465
  %3469 = call float @dx.op.tertiary.f32(i32 46, float %3435, float %3466, float %3468)  ; FMad(a,b,c)
  %3470 = call float @dx.op.tertiary.f32(i32 46, float %3437, float %3467, float %3469)  ; FMad(a,b,c)
  %3471 = fmul fast float %3425, %3465
  %3472 = call float @dx.op.tertiary.f32(i32 46, float %3428, float %3466, float %3471)  ; FMad(a,b,c)
  %3473 = call float @dx.op.tertiary.f32(i32 46, float %3431, float %3467, float %3472)  ; FMad(a,b,c)
  %3474 = fmul fast float %3439, %3465
  %3475 = call float @dx.op.tertiary.f32(i32 46, float %3441, float %3466, float %3474)  ; FMad(a,b,c)
  %3476 = call float @dx.op.tertiary.f32(i32 46, float %3443, float %3467, float %3475)  ; FMad(a,b,c)
  %3477 = fadd fast float %915, %3456
  %3478 = fsub fast float %3477, %3462
  %3479 = fsub fast float %3457, %3463
  %3480 = fadd fast float %3479, %916
  %3481 = fsub fast float %3458, %3464
  %3482 = fadd fast float %3481, %917
  %3483 = fmul fast float %3433, %3478
  %3484 = call float @dx.op.tertiary.f32(i32 46, float %3435, float %3480, float %3483)  ; FMad(a,b,c)
  %3485 = call float @dx.op.tertiary.f32(i32 46, float %3437, float %3482, float %3484)  ; FMad(a,b,c)
  %3486 = fmul fast float %3425, %3478
  %3487 = call float @dx.op.tertiary.f32(i32 46, float %3428, float %3480, float %3486)  ; FMad(a,b,c)
  %3488 = call float @dx.op.tertiary.f32(i32 46, float %3431, float %3482, float %3487)  ; FMad(a,b,c)
  %3489 = fmul fast float %3439, %3478
  %3490 = call float @dx.op.tertiary.f32(i32 46, float %3441, float %3480, float %3489)  ; FMad(a,b,c)
  %3491 = call float @dx.op.tertiary.f32(i32 46, float %3443, float %3482, float %3490)  ; FMad(a,b,c)
  %3492 = fadd fast float %3477, %3462
  %3493 = fadd fast float %3463, %3457
  %3494 = fadd fast float %3493, %916
  %3495 = fadd fast float %3464, %3458
  %3496 = fadd fast float %3495, %917
  %3497 = fmul fast float %3433, %3492
  %3498 = call float @dx.op.tertiary.f32(i32 46, float %3435, float %3494, float %3497)  ; FMad(a,b,c)
  %3499 = call float @dx.op.tertiary.f32(i32 46, float %3437, float %3496, float %3498)  ; FMad(a,b,c)
  %3500 = fmul fast float %3425, %3492
  %3501 = call float @dx.op.tertiary.f32(i32 46, float %3428, float %3494, float %3500)  ; FMad(a,b,c)
  %3502 = call float @dx.op.tertiary.f32(i32 46, float %3431, float %3496, float %3501)  ; FMad(a,b,c)
  %3503 = fmul fast float %3439, %3492
  %3504 = call float @dx.op.tertiary.f32(i32 46, float %3441, float %3494, float %3503)  ; FMad(a,b,c)
  %3505 = call float @dx.op.tertiary.f32(i32 46, float %3443, float %3496, float %3504)  ; FMad(a,b,c)
  %3506 = fadd fast float %3459, %3462
  %3507 = fadd fast float %3460, %3463
  %3508 = fadd fast float %3461, %3464
  %3509 = fmul fast float %3433, %3506
  %3510 = call float @dx.op.tertiary.f32(i32 46, float %3435, float %3507, float %3509)  ; FMad(a,b,c)
  %3511 = call float @dx.op.tertiary.f32(i32 46, float %3437, float %3508, float %3510)  ; FMad(a,b,c)
  %3512 = fmul fast float %3425, %3506
  %3513 = call float @dx.op.tertiary.f32(i32 46, float %3428, float %3507, float %3512)  ; FMad(a,b,c)
  %3514 = call float @dx.op.tertiary.f32(i32 46, float %3431, float %3508, float %3513)  ; FMad(a,b,c)
  %3515 = fmul fast float %3439, %3506
  %3516 = call float @dx.op.tertiary.f32(i32 46, float %3441, float %3507, float %3515)  ; FMad(a,b,c)
  %3517 = call float @dx.op.tertiary.f32(i32 46, float %3443, float %3508, float %3516)  ; FMad(a,b,c)
  %3518 = call float @dx.op.dot3.f32(i32 55, float %3470, float %3473, float %3476, float %3470, float %3473, float %3476)  ; Dot3(ax,ay,az,bx,by,bz)
  %3519 = call float @dx.op.unary.f32(i32 25, float %3518)  ; Rsqrt(value)
  %3520 = fmul fast float %3519, %3470
  %3521 = fmul fast float %3519, %3473
  %3522 = fmul fast float %3519, %3476
  %3523 = call float @dx.op.dot3.f32(i32 55, float %3485, float %3488, float %3491, float %3485, float %3488, float %3491)  ; Dot3(ax,ay,az,bx,by,bz)
  %3524 = call float @dx.op.unary.f32(i32 25, float %3523)  ; Rsqrt(value)
  %3525 = fmul fast float %3524, %3485
  %3526 = fmul fast float %3524, %3488
  %3527 = fmul fast float %3524, %3491
  %3528 = call float @dx.op.dot3.f32(i32 55, float %3499, float %3502, float %3505, float %3499, float %3502, float %3505)  ; Dot3(ax,ay,az,bx,by,bz)
  %3529 = call float @dx.op.unary.f32(i32 25, float %3528)  ; Rsqrt(value)
  %3530 = fmul fast float %3529, %3499
  %3531 = fmul fast float %3529, %3502
  %3532 = fmul fast float %3529, %3505
  %3533 = call float @dx.op.dot3.f32(i32 55, float %3511, float %3514, float %3517, float %3511, float %3514, float %3517)  ; Dot3(ax,ay,az,bx,by,bz)
  %3534 = call float @dx.op.unary.f32(i32 25, float %3533)  ; Rsqrt(value)
  %3535 = fmul fast float %3534, %3511
  %3536 = fmul fast float %3534, %3514
  %3537 = fmul fast float %3534, %3517
  %3538 = call float @dx.op.dot3.f32(i32 55, float %3520, float %3521, float %3522, float %3525, float %3526, float %3527)  ; Dot3(ax,ay,az,bx,by,bz)
  %3539 = call float @dx.op.unary.f32(i32 6, float %3538)  ; FAbs(value)
  %3540 = fmul fast float %3539, 0x3F8DBCFA00000000
  %3541 = fadd fast float %3540, 0x3FDFC6E900000000
  %3542 = fmul fast float %3541, %3539
  %3543 = fadd fast float %3542, 0x3FEB573B80000000
  %3544 = fadd fast float %3539, 0x4010A58D80000000
  %3545 = fmul fast float %3544, %3539
  %3546 = fadd fast float %3545, 0x400B573B80000000
  %3547 = fdiv fast float %3543, %3546
  %3548 = fcmp fast ogt float %3538, 0.000000e+00
  br i1 %3548, label %3555, label %3549

; <label>:3549                                    ; preds = %3306
  %3550 = fmul fast float %3538, %3538
  %3551 = fsub fast float 1.000000e+00, %3550
  %3552 = call float @dx.op.unary.f32(i32 25, float %3551)  ; Rsqrt(value)
  %3553 = fmul fast float %3552, 5.000000e-01
  %3554 = fsub fast float %3553, %3547
  br label %3555

; <label>:3555                                    ; preds = %3549, %3306
  %3556 = phi float [ %3554, %3549 ], [ %3547, %3306 ]
  %3557 = call float @dx.op.dot3.f32(i32 55, float %3525, float %3526, float %3527, float %3530, float %3531, float %3532)  ; Dot3(ax,ay,az,bx,by,bz)
  %3558 = call float @dx.op.unary.f32(i32 6, float %3557)  ; FAbs(value)
  %3559 = fmul fast float %3558, 0x3F8DBCFA00000000
  %3560 = fadd fast float %3559, 0x3FDFC6E900000000
  %3561 = fmul fast float %3560, %3558
  %3562 = fadd fast float %3561, 0x3FEB573B80000000
  %3563 = fadd fast float %3558, 0x4010A58D80000000
  %3564 = fmul fast float %3563, %3558
  %3565 = fadd fast float %3564, 0x400B573B80000000
  %3566 = fdiv fast float %3562, %3565
  %3567 = fcmp fast ogt float %3557, 0.000000e+00
  br i1 %3567, label %3574, label %3568

; <label>:3568                                    ; preds = %3555
  %3569 = fmul fast float %3557, %3557
  %3570 = fsub fast float 1.000000e+00, %3569
  %3571 = call float @dx.op.unary.f32(i32 25, float %3570)  ; Rsqrt(value)
  %3572 = fmul fast float %3571, 5.000000e-01
  %3573 = fsub fast float %3572, %3566
  br label %3574

; <label>:3574                                    ; preds = %3568, %3555
  %3575 = phi float [ %3573, %3568 ], [ %3566, %3555 ]
  %3576 = call float @dx.op.dot3.f32(i32 55, float %3530, float %3531, float %3532, float %3535, float %3536, float %3537)  ; Dot3(ax,ay,az,bx,by,bz)
  %3577 = call float @dx.op.unary.f32(i32 6, float %3576)  ; FAbs(value)
  %3578 = fmul fast float %3577, 0x3F8DBCFA00000000
  %3579 = fadd fast float %3578, 0x3FDFC6E900000000
  %3580 = fmul fast float %3579, %3577
  %3581 = fadd fast float %3580, 0x3FEB573B80000000
  %3582 = fadd fast float %3577, 0x4010A58D80000000
  %3583 = fmul fast float %3582, %3577
  %3584 = fadd fast float %3583, 0x400B573B80000000
  %3585 = fdiv fast float %3581, %3584
  %3586 = fcmp fast ogt float %3576, 0.000000e+00
  br i1 %3586, label %3593, label %3587

; <label>:3587                                    ; preds = %3574
  %3588 = fmul fast float %3576, %3576
  %3589 = fsub fast float 1.000000e+00, %3588
  %3590 = call float @dx.op.unary.f32(i32 25, float %3589)  ; Rsqrt(value)
  %3591 = fmul fast float %3590, 5.000000e-01
  %3592 = fsub fast float %3591, %3585
  br label %3593

; <label>:3593                                    ; preds = %3587, %3574
  %3594 = phi float [ %3592, %3587 ], [ %3585, %3574 ]
  %3595 = call float @dx.op.dot3.f32(i32 55, float %3535, float %3536, float %3537, float %3520, float %3521, float %3522)  ; Dot3(ax,ay,az,bx,by,bz)
  %3596 = call float @dx.op.unary.f32(i32 6, float %3595)  ; FAbs(value)
  %3597 = fmul fast float %3596, 0x3F8DBCFA00000000
  %3598 = fadd fast float %3597, 0x3FDFC6E900000000
  %3599 = fmul fast float %3598, %3596
  %3600 = fadd fast float %3599, 0x3FEB573B80000000
  %3601 = fadd fast float %3596, 0x4010A58D80000000
  %3602 = fmul fast float %3601, %3596
  %3603 = fadd fast float %3602, 0x400B573B80000000
  %3604 = fdiv fast float %3600, %3603
  %3605 = fcmp fast ogt float %3595, 0.000000e+00
  br i1 %3605, label %3612, label %3606

; <label>:3606                                    ; preds = %3593
  %3607 = fmul fast float %3595, %3595
  %3608 = fsub fast float 1.000000e+00, %3607
  %3609 = call float @dx.op.unary.f32(i32 25, float %3608)  ; Rsqrt(value)
  %3610 = fmul fast float %3609, 5.000000e-01
  %3611 = fsub fast float %3610, %3604
  br label %3612

; <label>:3612                                    ; preds = %3606, %3593
  %3613 = phi float [ %3611, %3606 ], [ %3604, %3593 ]
  %3614 = fsub fast float -0.000000e+00, %3556
  %3615 = fmul fast float %3520, %3614
  %3616 = fmul fast float %3521, %3614
  %3617 = fmul fast float %3522, %3614
  %3618 = fmul fast float %3575, %3530
  %3619 = fmul fast float %3575, %3531
  %3620 = fmul fast float %3575, %3532
  %3621 = fadd fast float %3618, %3615
  %3622 = fadd fast float %3619, %3616
  %3623 = fadd fast float %3620, %3617
  %3624 = fmul fast float %3623, %3526
  %3625 = fmul fast float %3622, %3527
  %3626 = fsub fast float %3624, %3625
  %3627 = fmul fast float %3621, %3527
  %3628 = fmul fast float %3623, %3525
  %3629 = fsub fast float %3627, %3628
  %3630 = fmul fast float %3622, %3525
  %3631 = fmul fast float %3621, %3526
  %3632 = fsub fast float %3630, %3631
  %3633 = fmul fast float %3613, %3520
  %3634 = fmul fast float %3613, %3521
  %3635 = fmul fast float %3613, %3522
  %3636 = fsub fast float -0.000000e+00, %3594
  %3637 = fmul fast float %3530, %3636
  %3638 = fmul fast float %3531, %3636
  %3639 = fmul fast float %3532, %3636
  %3640 = fadd fast float %3633, %3637
  %3641 = fadd fast float %3634, %3638
  %3642 = fadd fast float %3635, %3639
  %3643 = fmul fast float %3642, %3536
  %3644 = fmul fast float %3641, %3537
  %3645 = fsub fast float %3643, %3644
  %3646 = fmul fast float %3640, %3537
  %3647 = fmul fast float %3642, %3535
  %3648 = fsub fast float %3646, %3647
  %3649 = fmul fast float %3641, %3535
  %3650 = fmul fast float %3640, %3536
  %3651 = fsub fast float %3649, %3650
  %3652 = fadd fast float %3645, %3626
  %3653 = fadd fast float %3648, %3629
  %3654 = fadd fast float %3651, %3632
  %3655 = call float @dx.op.dot3.f32(i32 55, float %3652, float %3653, float %3654, float %3652, float %3653, float %3654)  ; Dot3(ax,ay,az,bx,by,bz)
  %3656 = call float @dx.op.unary.f32(i32 25, float %3655)  ; Rsqrt(value)
  %3657 = fmul fast float %3656, %3655
  %3658 = fmul fast float %3652, %3656
  %3659 = fmul fast float %3653, %3656
  %3660 = fmul fast float %3654, %3656
  %3661 = call float @dx.op.unary.f32(i32 24, float %3657)  ; Sqrt(value)
  %3662 = fcmp fast olt float %3660, %3661
  br i1 %3662, label %3663, label %3670

; <label>:3663                                    ; preds = %3612
  %3664 = fsub fast float -0.000000e+00, %3661
  %3665 = call float @dx.op.binary.f32(i32 35, float %3660, float %3664)  ; FMax(a,b)
  %3666 = fadd fast float %3665, %3661
  %3667 = fmul fast float %3666, %3666
  %3668 = fmul fast float %3661, 4.000000e+00
  %3669 = fdiv fast float %3667, %3668
  br label %3670

; <label>:3670                                    ; preds = %3663, %3612
  %3671 = phi float [ %3669, %3663 ], [ %3660, %3612 ]
  %3672 = fmul fast float %3657, %3671
  %3673 = fsub fast float -0.000000e+00, %3672
  %3674 = call float @dx.op.binary.f32(i32 36, float %3673, float 0.000000e+00)  ; FMin(a,b)
  %3675 = fsub fast float -0.000000e+00, %3674
  %3676 = fmul fast float %3658, %3445
  %3677 = call float @dx.op.tertiary.f32(i32 46, float %3425, float %3659, float %3676)  ; FMad(a,b,c)
  %3678 = call float @dx.op.tertiary.f32(i32 46, float %3447, float %3660, float %3677)  ; FMad(a,b,c)
  %3679 = fmul fast float %3658, %3449
  %3680 = call float @dx.op.tertiary.f32(i32 46, float %3428, float %3659, float %3679)  ; FMad(a,b,c)
  %3681 = call float @dx.op.tertiary.f32(i32 46, float %3451, float %3660, float %3680)  ; FMad(a,b,c)
  %3682 = fmul fast float %3658, %3453
  %3683 = call float @dx.op.tertiary.f32(i32 46, float %3431, float %3659, float %3682)  ; FMad(a,b,c)
  %3684 = call float @dx.op.tertiary.f32(i32 46, float %3455, float %3660, float %3683)  ; FMad(a,b,c)
  %3685 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %3678, float %3681, float %3684)  ; Dot3(ax,ay,az,bx,by,bz)
  %3686 = fsub fast float 0x3F50624DE0000000, %3685
  %3687 = call float @dx.op.unary.f32(i32 7, float %3686)  ; Saturate(value)
  %3688 = fmul fast float %3687, %274
  %3689 = fmul fast float %3687, %275
  %3690 = fmul fast float %3687, %276
  %3691 = fadd fast float %3688, %3678
  %3692 = fadd fast float %3689, %3681
  %3693 = fadd fast float %3690, %3684
  %3694 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %3691, float %3692, float %3693)  ; Dot3(ax,ay,az,bx,by,bz)
  %3695 = fdiv fast float %924, %3694
  br i1 %1065, label %3696, label %3741

; <label>:3696                                    ; preds = %3670
  %3697 = fmul fast float %3695, %3693
  %3698 = fmul fast float %3695, %3692
  %3699 = fmul fast float %3695, %3691
  %3700 = fsub fast float %3699, %915
  %3701 = fsub fast float %3698, %916
  %3702 = fsub fast float %3697, %917
  %3703 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %3700, float %3701, float %3702)  ; Dot3(ax,ay,az,bx,by,bz)
  %3704 = fadd fast float %3703, %912
  %3705 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %3706 = fdiv fast float %3704, %3705
  %3707 = fmul fast float %3706, 5.000000e-01
  %3708 = fsub fast float 5.000000e-01, %3707
  %3709 = call float @dx.op.unary.f32(i32 7, float %3708)  ; Saturate(value)
  %3710 = fmul fast float %3709, %310
  %3711 = fadd fast float %3710, %308
  %3712 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %3700, float %3701, float %3702)  ; Dot3(ax,ay,az,bx,by,bz)
  %3713 = fadd fast float %3712, %911
  %3714 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %3715 = fdiv fast float %3713, %3714
  %3716 = fmul fast float %3715, 5.000000e-01
  %3717 = fadd fast float %3716, 5.000000e-01
  %3718 = call float @dx.op.unary.f32(i32 7, float %3717)  ; Saturate(value)
  %3719 = fmul fast float %3718, %309
  %3720 = fadd fast float %3719, %307
  %3721 = fmul fast float %284, %281
  %3722 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %3721)  ; FMax(a,b)
  %3723 = call float @dx.op.unary.f32(i32 25, float %3722)  ; Rsqrt(value)
  %3724 = fmul fast float %3723, %3695
  %3725 = call float @dx.op.unary.f32(i32 23, float %3724)  ; Log(value)
  %3726 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %3727 = fmul fast float %3726, %309
  %3728 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %3729 = fmul fast float %3728, %310
  %3730 = call float @dx.op.binary.f32(i32 36, float %3727, float %3729)  ; FMin(a,b)
  %3731 = call float @dx.op.unary.f32(i32 23, float %3730)  ; Log(value)
  %3732 = fadd fast float %3725, -2.000000e+00
  %3733 = fadd fast float %3732, %3731
  %3734 = call float @dx.op.binary.f32(i32 36, float %3733, float %306)  ; FMin(a,b)
  %3735 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3736 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3737 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3735, %dx.types.Handle %3736, float %3720, float %3711, float undef, float undef, i32 0, i32 0, i32 undef, float %3734)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3738 = extractvalue %dx.types.ResRet.f32 %3737, 0
  %3739 = extractvalue %dx.types.ResRet.f32 %3737, 1
  %3740 = extractvalue %dx.types.ResRet.f32 %3737, 2
  br label %3741

; <label>:3741                                    ; preds = %3696, %3670
  %3742 = phi float [ %3738, %3696 ], [ 1.000000e+00, %3670 ]
  %3743 = phi float [ %3739, %3696 ], [ 1.000000e+00, %3670 ]
  %3744 = phi float [ %3740, %3696 ], [ 1.000000e+00, %3670 ]
  %3745 = fmul fast float %3409, %3675
  %3746 = fmul fast float %3745, %3742
  %3747 = fmul fast float %3410, %3675
  %3748 = fmul fast float %3747, %3743
  %3749 = fmul fast float %3411, %3675
  %3750 = fmul fast float %3749, %3744
  %3751 = fmul fast float %207, 5.000000e+01
  %3752 = fmul fast float %208, 5.000000e+01
  %3753 = fmul fast float %209, 5.000000e+01
  %3754 = call float @dx.op.unary.f32(i32 7, float %3751)  ; Saturate(value)
  %3755 = call float @dx.op.unary.f32(i32 7, float %3752)  ; Saturate(value)
  %3756 = call float @dx.op.unary.f32(i32 7, float %3753)  ; Saturate(value)
  %3757 = call float @dx.op.unary.f32(i32 24, float %3338)  ; Sqrt(value)
  %3758 = fmul fast float %3333, 9.843750e-01
  %3759 = fmul fast float %3757, 9.843750e-01
  %3760 = fadd fast float %3758, 7.812500e-03
  %3761 = fadd fast float %3759, 7.812500e-03
  %3762 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3763 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3764 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3762, %dx.types.Handle %3763, float %3760, float %3761, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3765 = extractvalue %dx.types.ResRet.f32 %3764, 0
  %3766 = extractvalue %dx.types.ResRet.f32 %3764, 1
  %3767 = extractvalue %dx.types.ResRet.f32 %3764, 2
  %3768 = extractvalue %dx.types.ResRet.f32 %3764, 3
  %3769 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3770 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3771 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3769, %dx.types.Handle %3770, float %3760, float %3761, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3772 = extractvalue %dx.types.ResRet.f32 %3771, 0
  %3773 = extractvalue %dx.types.ResRet.f32 %3771, 1
  %3774 = fmul fast float %3765, %3768
  %3775 = fmul fast float %3766, %3767
  %3776 = fsub fast float %3774, %3775
  %3777 = fdiv fast float %3765, %3776
  %3778 = fdiv fast float %3766, %3776
  %3779 = fdiv fast float %3767, %3776
  %3780 = fdiv fast float %3768, %3776
  %3781 = fsub fast float -0.000000e+00, %3779
  %3782 = fsub fast float -0.000000e+00, %3778
  %3783 = fmul fast float %3773, %3754
  %3784 = fmul fast float %3773, %3755
  %3785 = fmul fast float %3773, %3756
  %3786 = fsub fast float %3772, %3773
  %3787 = fmul fast float %3786, %207
  %3788 = fmul fast float %3786, %208
  %3789 = fmul fast float %3786, %209
  %3790 = fadd fast float %3787, %3783
  %3791 = fadd fast float %3788, %3784
  %3792 = fadd fast float %3789, %3785
  %3793 = fmul fast float %3307, %135
  %3794 = fmul fast float %3307, %136
  %3795 = fmul fast float %3307, %137
  %3796 = fsub fast float %396, %3793
  %3797 = fsub fast float %397, %3794
  %3798 = fsub fast float %398, %3795
  %3799 = call float @dx.op.dot3.f32(i32 55, float %3796, float %3797, float %3798, float %3796, float %3797, float %3798)  ; Dot3(ax,ay,az,bx,by,bz)
  %3800 = call float @dx.op.unary.f32(i32 25, float %3799)  ; Rsqrt(value)
  %3801 = fmul fast float %3796, %3800
  %3802 = fmul fast float %3797, %3800
  %3803 = fmul fast float %3798, %3800
  %3804 = fmul fast float %3803, %136
  %3805 = fmul fast float %3802, %137
  %3806 = fsub fast float %3804, %3805
  %3807 = fmul fast float %3801, %137
  %3808 = fmul fast float %3803, %135
  %3809 = fsub fast float %3807, %3808
  %3810 = fmul fast float %3802, %135
  %3811 = fmul fast float %3801, %136
  %3812 = fsub fast float %3810, %3811
  %3813 = fmul fast float %3801, %3765
  %3814 = call float @dx.op.tertiary.f32(i32 46, float %3767, float %135, float %3813)  ; FMad(a,b,c)
  %3815 = fmul fast float %3802, %3765
  %3816 = call float @dx.op.tertiary.f32(i32 46, float %3767, float %136, float %3815)  ; FMad(a,b,c)
  %3817 = fmul fast float %3803, %3765
  %3818 = call float @dx.op.tertiary.f32(i32 46, float %3767, float %137, float %3817)  ; FMad(a,b,c)
  %3819 = fmul fast float %3801, %3766
  %3820 = call float @dx.op.tertiary.f32(i32 46, float %3768, float %135, float %3819)  ; FMad(a,b,c)
  %3821 = fmul fast float %3802, %3766
  %3822 = call float @dx.op.tertiary.f32(i32 46, float %3768, float %136, float %3821)  ; FMad(a,b,c)
  %3823 = fmul fast float %3803, %3766
  %3824 = call float @dx.op.tertiary.f32(i32 46, float %3768, float %137, float %3823)  ; FMad(a,b,c)
  %3825 = fmul fast float %3801, %3780
  %3826 = call float @dx.op.tertiary.f32(i32 46, float %135, float %3782, float %3825)  ; FMad(a,b,c)
  %3827 = fmul fast float %3801, %3781
  %3828 = call float @dx.op.tertiary.f32(i32 46, float %135, float %3777, float %3827)  ; FMad(a,b,c)
  %3829 = fmul fast float %3802, %3780
  %3830 = call float @dx.op.tertiary.f32(i32 46, float %136, float %3782, float %3829)  ; FMad(a,b,c)
  %3831 = fmul fast float %3802, %3781
  %3832 = call float @dx.op.tertiary.f32(i32 46, float %136, float %3777, float %3831)  ; FMad(a,b,c)
  %3833 = fmul fast float %3803, %3780
  %3834 = call float @dx.op.tertiary.f32(i32 46, float %137, float %3782, float %3833)  ; FMad(a,b,c)
  %3835 = fmul fast float %3803, %3781
  %3836 = call float @dx.op.tertiary.f32(i32 46, float %137, float %3777, float %3835)  ; FMad(a,b,c)
  %3837 = fmul fast float %913, %805
  %3838 = fmul fast float %913, %808
  %3839 = fmul fast float %913, %811
  %3840 = fsub fast float %915, %3837
  %3841 = fsub fast float %916, %3838
  %3842 = fsub fast float %917, %3839
  %3843 = fmul fast float %914, %278
  %3844 = fmul fast float %914, %279
  %3845 = fmul fast float %914, %280
  %3846 = fsub fast float %3840, %3843
  %3847 = fsub fast float %3841, %3844
  %3848 = fsub fast float %3842, %3845
  %3849 = fmul fast float %3814, %3846
  %3850 = call float @dx.op.tertiary.f32(i32 46, float %3816, float %3847, float %3849)  ; FMad(a,b,c)
  %3851 = call float @dx.op.tertiary.f32(i32 46, float %3818, float %3848, float %3850)  ; FMad(a,b,c)
  %3852 = fmul fast float %3806, %3846
  %3853 = call float @dx.op.tertiary.f32(i32 46, float %3809, float %3847, float %3852)  ; FMad(a,b,c)
  %3854 = call float @dx.op.tertiary.f32(i32 46, float %3812, float %3848, float %3853)  ; FMad(a,b,c)
  %3855 = fmul fast float %3820, %3846
  %3856 = call float @dx.op.tertiary.f32(i32 46, float %3822, float %3847, float %3855)  ; FMad(a,b,c)
  %3857 = call float @dx.op.tertiary.f32(i32 46, float %3824, float %3848, float %3856)  ; FMad(a,b,c)
  %3858 = fadd fast float %915, %3837
  %3859 = fsub fast float %3858, %3843
  %3860 = fsub fast float %3838, %3844
  %3861 = fadd fast float %3860, %916
  %3862 = fsub fast float %3839, %3845
  %3863 = fadd fast float %3862, %917
  %3864 = fmul fast float %3814, %3859
  %3865 = call float @dx.op.tertiary.f32(i32 46, float %3816, float %3861, float %3864)  ; FMad(a,b,c)
  %3866 = call float @dx.op.tertiary.f32(i32 46, float %3818, float %3863, float %3865)  ; FMad(a,b,c)
  %3867 = fmul fast float %3806, %3859
  %3868 = call float @dx.op.tertiary.f32(i32 46, float %3809, float %3861, float %3867)  ; FMad(a,b,c)
  %3869 = call float @dx.op.tertiary.f32(i32 46, float %3812, float %3863, float %3868)  ; FMad(a,b,c)
  %3870 = fmul fast float %3820, %3859
  %3871 = call float @dx.op.tertiary.f32(i32 46, float %3822, float %3861, float %3870)  ; FMad(a,b,c)
  %3872 = call float @dx.op.tertiary.f32(i32 46, float %3824, float %3863, float %3871)  ; FMad(a,b,c)
  %3873 = fadd fast float %3858, %3843
  %3874 = fadd fast float %3844, %3838
  %3875 = fadd fast float %3874, %916
  %3876 = fadd fast float %3845, %3839
  %3877 = fadd fast float %3876, %917
  %3878 = fmul fast float %3814, %3873
  %3879 = call float @dx.op.tertiary.f32(i32 46, float %3816, float %3875, float %3878)  ; FMad(a,b,c)
  %3880 = call float @dx.op.tertiary.f32(i32 46, float %3818, float %3877, float %3879)  ; FMad(a,b,c)
  %3881 = fmul fast float %3806, %3873
  %3882 = call float @dx.op.tertiary.f32(i32 46, float %3809, float %3875, float %3881)  ; FMad(a,b,c)
  %3883 = call float @dx.op.tertiary.f32(i32 46, float %3812, float %3877, float %3882)  ; FMad(a,b,c)
  %3884 = fmul fast float %3820, %3873
  %3885 = call float @dx.op.tertiary.f32(i32 46, float %3822, float %3875, float %3884)  ; FMad(a,b,c)
  %3886 = call float @dx.op.tertiary.f32(i32 46, float %3824, float %3877, float %3885)  ; FMad(a,b,c)
  %3887 = fadd fast float %3840, %3843
  %3888 = fadd fast float %3841, %3844
  %3889 = fadd fast float %3842, %3845
  %3890 = fmul fast float %3814, %3887
  %3891 = call float @dx.op.tertiary.f32(i32 46, float %3816, float %3888, float %3890)  ; FMad(a,b,c)
  %3892 = call float @dx.op.tertiary.f32(i32 46, float %3818, float %3889, float %3891)  ; FMad(a,b,c)
  %3893 = fmul fast float %3806, %3887
  %3894 = call float @dx.op.tertiary.f32(i32 46, float %3809, float %3888, float %3893)  ; FMad(a,b,c)
  %3895 = call float @dx.op.tertiary.f32(i32 46, float %3812, float %3889, float %3894)  ; FMad(a,b,c)
  %3896 = fmul fast float %3820, %3887
  %3897 = call float @dx.op.tertiary.f32(i32 46, float %3822, float %3888, float %3896)  ; FMad(a,b,c)
  %3898 = call float @dx.op.tertiary.f32(i32 46, float %3824, float %3889, float %3897)  ; FMad(a,b,c)
  %3899 = call float @dx.op.dot3.f32(i32 55, float %3851, float %3854, float %3857, float %3851, float %3854, float %3857)  ; Dot3(ax,ay,az,bx,by,bz)
  %3900 = call float @dx.op.unary.f32(i32 25, float %3899)  ; Rsqrt(value)
  %3901 = fmul fast float %3900, %3851
  %3902 = fmul fast float %3900, %3854
  %3903 = fmul fast float %3900, %3857
  %3904 = call float @dx.op.dot3.f32(i32 55, float %3866, float %3869, float %3872, float %3866, float %3869, float %3872)  ; Dot3(ax,ay,az,bx,by,bz)
  %3905 = call float @dx.op.unary.f32(i32 25, float %3904)  ; Rsqrt(value)
  %3906 = fmul fast float %3905, %3866
  %3907 = fmul fast float %3905, %3869
  %3908 = fmul fast float %3905, %3872
  %3909 = call float @dx.op.dot3.f32(i32 55, float %3880, float %3883, float %3886, float %3880, float %3883, float %3886)  ; Dot3(ax,ay,az,bx,by,bz)
  %3910 = call float @dx.op.unary.f32(i32 25, float %3909)  ; Rsqrt(value)
  %3911 = fmul fast float %3910, %3880
  %3912 = fmul fast float %3910, %3883
  %3913 = fmul fast float %3910, %3886
  %3914 = call float @dx.op.dot3.f32(i32 55, float %3892, float %3895, float %3898, float %3892, float %3895, float %3898)  ; Dot3(ax,ay,az,bx,by,bz)
  %3915 = call float @dx.op.unary.f32(i32 25, float %3914)  ; Rsqrt(value)
  %3916 = fmul fast float %3915, %3892
  %3917 = fmul fast float %3915, %3895
  %3918 = fmul fast float %3915, %3898
  %3919 = call float @dx.op.dot3.f32(i32 55, float %3901, float %3902, float %3903, float %3906, float %3907, float %3908)  ; Dot3(ax,ay,az,bx,by,bz)
  %3920 = call float @dx.op.unary.f32(i32 6, float %3919)  ; FAbs(value)
  %3921 = fmul fast float %3920, 0x3F8DBCFA00000000
  %3922 = fadd fast float %3921, 0x3FDFC6E900000000
  %3923 = fmul fast float %3922, %3920
  %3924 = fadd fast float %3923, 0x3FEB573B80000000
  %3925 = fadd fast float %3920, 0x4010A58D80000000
  %3926 = fmul fast float %3925, %3920
  %3927 = fadd fast float %3926, 0x400B573B80000000
  %3928 = fdiv fast float %3924, %3927
  %3929 = fcmp fast ogt float %3919, 0.000000e+00
  br i1 %3929, label %3936, label %3930

; <label>:3930                                    ; preds = %3741
  %3931 = fmul fast float %3919, %3919
  %3932 = fsub fast float 1.000000e+00, %3931
  %3933 = call float @dx.op.unary.f32(i32 25, float %3932)  ; Rsqrt(value)
  %3934 = fmul fast float %3933, 5.000000e-01
  %3935 = fsub fast float %3934, %3928
  br label %3936

; <label>:3936                                    ; preds = %3930, %3741
  %3937 = phi float [ %3935, %3930 ], [ %3928, %3741 ]
  %3938 = call float @dx.op.dot3.f32(i32 55, float %3906, float %3907, float %3908, float %3911, float %3912, float %3913)  ; Dot3(ax,ay,az,bx,by,bz)
  %3939 = call float @dx.op.unary.f32(i32 6, float %3938)  ; FAbs(value)
  %3940 = fmul fast float %3939, 0x3F8DBCFA00000000
  %3941 = fadd fast float %3940, 0x3FDFC6E900000000
  %3942 = fmul fast float %3941, %3939
  %3943 = fadd fast float %3942, 0x3FEB573B80000000
  %3944 = fadd fast float %3939, 0x4010A58D80000000
  %3945 = fmul fast float %3944, %3939
  %3946 = fadd fast float %3945, 0x400B573B80000000
  %3947 = fdiv fast float %3943, %3946
  %3948 = fcmp fast ogt float %3938, 0.000000e+00
  br i1 %3948, label %3955, label %3949

; <label>:3949                                    ; preds = %3936
  %3950 = fmul fast float %3938, %3938
  %3951 = fsub fast float 1.000000e+00, %3950
  %3952 = call float @dx.op.unary.f32(i32 25, float %3951)  ; Rsqrt(value)
  %3953 = fmul fast float %3952, 5.000000e-01
  %3954 = fsub fast float %3953, %3947
  br label %3955

; <label>:3955                                    ; preds = %3949, %3936
  %3956 = phi float [ %3954, %3949 ], [ %3947, %3936 ]
  %3957 = call float @dx.op.dot3.f32(i32 55, float %3911, float %3912, float %3913, float %3916, float %3917, float %3918)  ; Dot3(ax,ay,az,bx,by,bz)
  %3958 = call float @dx.op.unary.f32(i32 6, float %3957)  ; FAbs(value)
  %3959 = fmul fast float %3958, 0x3F8DBCFA00000000
  %3960 = fadd fast float %3959, 0x3FDFC6E900000000
  %3961 = fmul fast float %3960, %3958
  %3962 = fadd fast float %3961, 0x3FEB573B80000000
  %3963 = fadd fast float %3958, 0x4010A58D80000000
  %3964 = fmul fast float %3963, %3958
  %3965 = fadd fast float %3964, 0x400B573B80000000
  %3966 = fdiv fast float %3962, %3965
  %3967 = fcmp fast ogt float %3957, 0.000000e+00
  br i1 %3967, label %3974, label %3968

; <label>:3968                                    ; preds = %3955
  %3969 = fmul fast float %3957, %3957
  %3970 = fsub fast float 1.000000e+00, %3969
  %3971 = call float @dx.op.unary.f32(i32 25, float %3970)  ; Rsqrt(value)
  %3972 = fmul fast float %3971, 5.000000e-01
  %3973 = fsub fast float %3972, %3966
  br label %3974

; <label>:3974                                    ; preds = %3968, %3955
  %3975 = phi float [ %3973, %3968 ], [ %3966, %3955 ]
  %3976 = call float @dx.op.dot3.f32(i32 55, float %3916, float %3917, float %3918, float %3901, float %3902, float %3903)  ; Dot3(ax,ay,az,bx,by,bz)
  %3977 = call float @dx.op.unary.f32(i32 6, float %3976)  ; FAbs(value)
  %3978 = fmul fast float %3977, 0x3F8DBCFA00000000
  %3979 = fadd fast float %3978, 0x3FDFC6E900000000
  %3980 = fmul fast float %3979, %3977
  %3981 = fadd fast float %3980, 0x3FEB573B80000000
  %3982 = fadd fast float %3977, 0x4010A58D80000000
  %3983 = fmul fast float %3982, %3977
  %3984 = fadd fast float %3983, 0x400B573B80000000
  %3985 = fdiv fast float %3981, %3984
  %3986 = fcmp fast ogt float %3976, 0.000000e+00
  br i1 %3986, label %3993, label %3987

; <label>:3987                                    ; preds = %3974
  %3988 = fmul fast float %3976, %3976
  %3989 = fsub fast float 1.000000e+00, %3988
  %3990 = call float @dx.op.unary.f32(i32 25, float %3989)  ; Rsqrt(value)
  %3991 = fmul fast float %3990, 5.000000e-01
  %3992 = fsub fast float %3991, %3985
  br label %3993

; <label>:3993                                    ; preds = %3987, %3974
  %3994 = phi float [ %3992, %3987 ], [ %3985, %3974 ]
  %3995 = fsub fast float -0.000000e+00, %3937
  %3996 = fmul fast float %3901, %3995
  %3997 = fmul fast float %3902, %3995
  %3998 = fmul fast float %3903, %3995
  %3999 = fmul fast float %3956, %3911
  %4000 = fmul fast float %3956, %3912
  %4001 = fmul fast float %3956, %3913
  %4002 = fadd fast float %3999, %3996
  %4003 = fadd fast float %4000, %3997
  %4004 = fadd fast float %4001, %3998
  %4005 = fmul fast float %4004, %3907
  %4006 = fmul fast float %4003, %3908
  %4007 = fsub fast float %4005, %4006
  %4008 = fmul fast float %4002, %3908
  %4009 = fmul fast float %4004, %3906
  %4010 = fsub fast float %4008, %4009
  %4011 = fmul fast float %4003, %3906
  %4012 = fmul fast float %4002, %3907
  %4013 = fsub fast float %4011, %4012
  %4014 = fmul fast float %3994, %3901
  %4015 = fmul fast float %3994, %3902
  %4016 = fmul fast float %3994, %3903
  %4017 = fsub fast float -0.000000e+00, %3975
  %4018 = fmul fast float %3911, %4017
  %4019 = fmul fast float %3912, %4017
  %4020 = fmul fast float %3913, %4017
  %4021 = fadd fast float %4014, %4018
  %4022 = fadd fast float %4015, %4019
  %4023 = fadd fast float %4016, %4020
  %4024 = fmul fast float %4023, %3917
  %4025 = fmul fast float %4022, %3918
  %4026 = fsub fast float %4024, %4025
  %4027 = fmul fast float %4021, %3918
  %4028 = fmul fast float %4023, %3916
  %4029 = fsub fast float %4027, %4028
  %4030 = fmul fast float %4022, %3916
  %4031 = fmul fast float %4021, %3917
  %4032 = fsub fast float %4030, %4031
  %4033 = fadd fast float %4026, %4007
  %4034 = fadd fast float %4029, %4010
  %4035 = fadd fast float %4032, %4013
  %4036 = call float @dx.op.dot3.f32(i32 55, float %4033, float %4034, float %4035, float %4033, float %4034, float %4035)  ; Dot3(ax,ay,az,bx,by,bz)
  %4037 = call float @dx.op.unary.f32(i32 25, float %4036)  ; Rsqrt(value)
  %4038 = fmul fast float %4037, %4036
  %4039 = fmul fast float %4033, %4037
  %4040 = fmul fast float %4034, %4037
  %4041 = fmul fast float %4035, %4037
  %4042 = call float @dx.op.unary.f32(i32 24, float %4038)  ; Sqrt(value)
  %4043 = fcmp fast olt float %4041, %4042
  br i1 %4043, label %4044, label %4051

; <label>:4044                                    ; preds = %3993
  %4045 = fsub fast float -0.000000e+00, %4042
  %4046 = call float @dx.op.binary.f32(i32 35, float %4041, float %4045)  ; FMax(a,b)
  %4047 = fadd fast float %4046, %4042
  %4048 = fmul fast float %4047, %4047
  %4049 = fmul fast float %4042, 4.000000e+00
  %4050 = fdiv fast float %4048, %4049
  br label %4051

; <label>:4051                                    ; preds = %4044, %3993
  %4052 = phi float [ %4050, %4044 ], [ %4041, %3993 ]
  %4053 = fmul fast float %4038, %4052
  %4054 = fsub fast float -0.000000e+00, %4053
  %4055 = call float @dx.op.binary.f32(i32 36, float %4054, float 0.000000e+00)  ; FMin(a,b)
  %4056 = fsub fast float -0.000000e+00, %4055
  %4057 = fmul fast float %4039, %3826
  %4058 = call float @dx.op.tertiary.f32(i32 46, float %3806, float %4040, float %4057)  ; FMad(a,b,c)
  %4059 = call float @dx.op.tertiary.f32(i32 46, float %3828, float %4041, float %4058)  ; FMad(a,b,c)
  %4060 = fmul fast float %4039, %3830
  %4061 = call float @dx.op.tertiary.f32(i32 46, float %3809, float %4040, float %4060)  ; FMad(a,b,c)
  %4062 = call float @dx.op.tertiary.f32(i32 46, float %3832, float %4041, float %4061)  ; FMad(a,b,c)
  %4063 = fmul fast float %4039, %3834
  %4064 = call float @dx.op.tertiary.f32(i32 46, float %3812, float %4040, float %4063)  ; FMad(a,b,c)
  %4065 = call float @dx.op.tertiary.f32(i32 46, float %3836, float %4041, float %4064)  ; FMad(a,b,c)
  %4066 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %4059, float %4062, float %4065)  ; Dot3(ax,ay,az,bx,by,bz)
  %4067 = fsub fast float 0x3F50624DE0000000, %4066
  %4068 = call float @dx.op.unary.f32(i32 7, float %4067)  ; Saturate(value)
  %4069 = fmul fast float %4068, %274
  %4070 = fmul fast float %4068, %275
  %4071 = fmul fast float %4068, %276
  %4072 = fadd fast float %4069, %4059
  %4073 = fadd fast float %4070, %4062
  %4074 = fadd fast float %4071, %4065
  %4075 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %4072, float %4073, float %4074)  ; Dot3(ax,ay,az,bx,by,bz)
  %4076 = fdiv fast float %924, %4075
  br i1 %1065, label %4077, label %4122

; <label>:4077                                    ; preds = %4051
  %4078 = fmul fast float %4076, %4074
  %4079 = fmul fast float %4076, %4073
  %4080 = fmul fast float %4076, %4072
  %4081 = fsub fast float %4080, %915
  %4082 = fsub fast float %4079, %916
  %4083 = fsub fast float %4078, %917
  %4084 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %4081, float %4082, float %4083)  ; Dot3(ax,ay,az,bx,by,bz)
  %4085 = fadd fast float %4084, %912
  %4086 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %4087 = fdiv fast float %4085, %4086
  %4088 = fmul fast float %4087, 5.000000e-01
  %4089 = fsub fast float 5.000000e-01, %4088
  %4090 = call float @dx.op.unary.f32(i32 7, float %4089)  ; Saturate(value)
  %4091 = fmul fast float %4090, %310
  %4092 = fadd fast float %4091, %308
  %4093 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %4081, float %4082, float %4083)  ; Dot3(ax,ay,az,bx,by,bz)
  %4094 = fadd fast float %4093, %911
  %4095 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %4096 = fdiv fast float %4094, %4095
  %4097 = fmul fast float %4096, 5.000000e-01
  %4098 = fadd fast float %4097, 5.000000e-01
  %4099 = call float @dx.op.unary.f32(i32 7, float %4098)  ; Saturate(value)
  %4100 = fmul fast float %4099, %309
  %4101 = fadd fast float %4100, %307
  %4102 = fmul fast float %284, %281
  %4103 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %4102)  ; FMax(a,b)
  %4104 = call float @dx.op.unary.f32(i32 25, float %4103)  ; Rsqrt(value)
  %4105 = fmul fast float %4104, %4076
  %4106 = call float @dx.op.unary.f32(i32 23, float %4105)  ; Log(value)
  %4107 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %4108 = fmul fast float %4107, %309
  %4109 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %4110 = fmul fast float %4109, %310
  %4111 = call float @dx.op.binary.f32(i32 36, float %4108, float %4110)  ; FMin(a,b)
  %4112 = call float @dx.op.unary.f32(i32 23, float %4111)  ; Log(value)
  %4113 = fadd fast float %4106, -2.000000e+00
  %4114 = fadd fast float %4113, %4112
  %4115 = call float @dx.op.binary.f32(i32 36, float %4114, float %306)  ; FMin(a,b)
  %4116 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4117 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4118 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4116, %dx.types.Handle %4117, float %4101, float %4092, float undef, float undef, i32 0, i32 0, i32 undef, float %4115)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4119 = extractvalue %dx.types.ResRet.f32 %4118, 0
  %4120 = extractvalue %dx.types.ResRet.f32 %4118, 1
  %4121 = extractvalue %dx.types.ResRet.f32 %4118, 2
  br label %4122

; <label>:4122                                    ; preds = %4077, %4051
  %4123 = phi float [ %4119, %4077 ], [ 1.000000e+00, %4051 ]
  %4124 = phi float [ %4120, %4077 ], [ 1.000000e+00, %4051 ]
  %4125 = phi float [ %4121, %4077 ], [ 1.000000e+00, %4051 ]
  %4126 = fmul fast float %3790, %4056
  %4127 = fmul fast float %4126, %4123
  %4128 = fmul fast float %3791, %4056
  %4129 = fmul fast float %4128, %4124
  %4130 = fmul fast float %3792, %4056
  %4131 = fmul fast float %4130, %4125
  %4132 = fsub fast float %4127, %3746
  %4133 = fsub fast float %4129, %3748
  %4134 = fsub fast float %4131, %3750
  %4135 = fmul fast float %4132, %3324
  %4136 = fmul fast float %4133, %3324
  %4137 = fmul fast float %4134, %3324
  %4138 = fadd fast float %4135, %3746
  %4139 = fadd fast float %4136, %3748
  %4140 = fadd fast float %4137, %3750
  %4141 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3321, i32 0, i32 3, i32 %3320, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %4142 = extractvalue %dx.types.ResRet.f32 %4141, 2
  %4143 = extractvalue %dx.types.ResRet.f32 %4141, 3
  %4144 = fmul fast float %4142, 2.000000e+00
  %4145 = fadd fast float %4144, -1.000000e+00
  %4146 = fsub fast float 1.000000e+00, %445
  %4147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 246)  ; CBufferLoadLegacy(handle,regIndex)
  %4148 = extractvalue %dx.types.CBufRet.f32 %4147, 0
  %4149 = extractvalue %dx.types.CBufRet.f32 %4147, 1
  %4150 = fmul fast float %4146, 3.100000e+01
  %4151 = fadd fast float %4150, 3.450000e+01
  %4152 = uitofp i32 %3320 to float
  %4153 = fadd fast float %4152, 5.000000e-01
  %4154 = fdiv fast float %4151, %4148
  %4155 = fdiv fast float %4153, %4149
  %4156 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4157 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3321, %dx.types.Handle %4156, float %4154, float %4155, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4158 = extractvalue %dx.types.ResRet.f32 %4157, 0
  %4159 = extractvalue %dx.types.ResRet.f32 %4157, 1
  %4160 = extractvalue %dx.types.ResRet.f32 %4157, 2
  %4161 = fsub fast float -0.000000e+00, %135
  %4162 = fsub fast float -0.000000e+00, %136
  %4163 = fsub fast float -0.000000e+00, %137
  %4164 = call float @dx.op.dot3.f32(i32 55, float %396, float %397, float %398, float %4161, float %4162, float %4163)  ; Dot3(ax,ay,az,bx,by,bz)
  %4165 = fmul fast float %4143, %4143
  %4166 = fmul fast float %4164, %4164
  %4167 = fsub fast float 1.000000e+00, %4166
  %4168 = fmul fast float %4165, %4167
  %4169 = fsub fast float 1.000000e+00, %4168
  %4170 = fcmp fast oge float %4169, 0.000000e+00
  %4171 = fmul fast float %4143, %396
  %4172 = fmul fast float %4143, %397
  %4173 = fmul fast float %4143, %398
  %4174 = call float @dx.op.unary.f32(i32 24, float %4169)  ; Sqrt(value)
  %4175 = fmul fast float %4164, %4143
  %4176 = fadd fast float %4175, %4174
  %4177 = fmul fast float %4176, %4161
  %4178 = fmul fast float %4176, %4162
  %4179 = fmul fast float %4176, %4163
  %4180 = fsub fast float %4171, %4177
  %4181 = fsub fast float %4172, %4178
  %4182 = fsub fast float %4173, %4179
  %4183 = select i1 %4170, float %4180, float 0.000000e+00
  %4184 = select i1 %4170, float %4181, float 0.000000e+00
  %4185 = select i1 %4170, float %4182, float 0.000000e+00
  %4186 = fsub fast float -0.000000e+00, %1037
  %4187 = fsub fast float -0.000000e+00, %1038
  %4188 = fsub fast float -0.000000e+00, %1039
  %4189 = call float @dx.op.dot3.f32(i32 55, float %4186, float %4187, float %4188, float %4183, float %4184, float %4185)  ; Dot3(ax,ay,az,bx,by,bz)
  %4190 = fmul fast float %4145, %4145
  %4191 = fmul fast float %4189, %4145
  %4192 = fsub fast float 1.000000e+00, %4191
  %4193 = fmul fast float %4192, %4192
  %4194 = fsub fast float 1.000000e+00, %4190
  %4195 = fmul fast float %4194, 5.000000e-01
  %4196 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %4193)  ; FMax(a,b)
  %4197 = fdiv fast float %4195, %4196
  %4198 = fmul fast float %4158, %1113
  %4199 = fmul fast float %4159, %1114
  %4200 = fmul fast float %4160, %1115
  %4201 = fmul fast float %4197, %1040
  %4202 = fmul fast float %4198, %4201
  %4203 = fmul fast float %4199, %4201
  %4204 = fmul fast float %4200, %4201
  br label %5805

; <label>:4205                                    ; preds = %1112
  %4206 = fmul fast float %1053, %1040
  %4207 = fmul fast float %196, 0x3FD45F3060000000
  %4208 = fmul fast float %4207, %4206
  %4209 = fmul fast float %4208, %1113
  %4210 = fmul fast float %197, 0x3FD45F3060000000
  %4211 = fmul fast float %4210, %4206
  %4212 = fmul fast float %4211, %1114
  %4213 = fmul fast float %198, 0x3FD45F3060000000
  %4214 = fmul fast float %4213, %4206
  %4215 = fmul fast float %4214, %1115
  %4216 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %4217 = call float @dx.op.unary.f32(i32 6, float %4216)  ; FAbs(value)
  %4218 = fadd fast float %4217, 0x3EE4F8B580000000
  %4219 = call float @dx.op.unary.f32(i32 7, float %4218)  ; Saturate(value)
  %4220 = fmul fast float %207, 5.000000e+01
  %4221 = fmul fast float %208, 5.000000e+01
  %4222 = fmul fast float %209, 5.000000e+01
  %4223 = call float @dx.op.unary.f32(i32 7, float %4220)  ; Saturate(value)
  %4224 = call float @dx.op.unary.f32(i32 7, float %4221)  ; Saturate(value)
  %4225 = call float @dx.op.unary.f32(i32 7, float %4222)  ; Saturate(value)
  %4226 = fsub fast float 1.000000e+00, %4219
  %4227 = call float @dx.op.unary.f32(i32 24, float %4226)  ; Sqrt(value)
  %4228 = fmul fast float %1116, 9.843750e-01
  %4229 = fmul fast float %4227, 9.843750e-01
  %4230 = fadd fast float %4228, 7.812500e-03
  %4231 = fadd fast float %4229, 7.812500e-03
  %4232 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4233 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4234 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4232, %dx.types.Handle %4233, float %4230, float %4231, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4235 = extractvalue %dx.types.ResRet.f32 %4234, 0
  %4236 = extractvalue %dx.types.ResRet.f32 %4234, 1
  %4237 = extractvalue %dx.types.ResRet.f32 %4234, 2
  %4238 = extractvalue %dx.types.ResRet.f32 %4234, 3
  %4239 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4240 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4241 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4239, %dx.types.Handle %4240, float %4230, float %4231, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4242 = extractvalue %dx.types.ResRet.f32 %4241, 0
  %4243 = extractvalue %dx.types.ResRet.f32 %4241, 1
  %4244 = fmul fast float %4235, %4238
  %4245 = fmul fast float %4236, %4237
  %4246 = fsub fast float %4244, %4245
  %4247 = fdiv fast float %4235, %4246
  %4248 = fdiv fast float %4236, %4246
  %4249 = fdiv fast float %4237, %4246
  %4250 = fdiv fast float %4238, %4246
  %4251 = fsub fast float -0.000000e+00, %4249
  %4252 = fsub fast float -0.000000e+00, %4248
  %4253 = fmul fast float %4243, %4223
  %4254 = fmul fast float %4243, %4224
  %4255 = fmul fast float %4243, %4225
  %4256 = fsub fast float %4242, %4243
  %4257 = fmul fast float %4256, %207
  %4258 = fmul fast float %4256, %208
  %4259 = fmul fast float %4256, %209
  %4260 = fadd fast float %4257, %4253
  %4261 = fadd fast float %4258, %4254
  %4262 = fadd fast float %4259, %4255
  %4263 = fmul fast float %4216, %135
  %4264 = fmul fast float %4216, %136
  %4265 = fmul fast float %4216, %137
  %4266 = fsub fast float %396, %4263
  %4267 = fsub fast float %397, %4264
  %4268 = fsub fast float %398, %4265
  %4269 = call float @dx.op.dot3.f32(i32 55, float %4266, float %4267, float %4268, float %4266, float %4267, float %4268)  ; Dot3(ax,ay,az,bx,by,bz)
  %4270 = call float @dx.op.unary.f32(i32 25, float %4269)  ; Rsqrt(value)
  %4271 = fmul fast float %4266, %4270
  %4272 = fmul fast float %4267, %4270
  %4273 = fmul fast float %4268, %4270
  %4274 = fmul fast float %4273, %136
  %4275 = fmul fast float %4272, %137
  %4276 = fsub fast float %4274, %4275
  %4277 = fmul fast float %4271, %137
  %4278 = fmul fast float %4273, %135
  %4279 = fsub fast float %4277, %4278
  %4280 = fmul fast float %4272, %135
  %4281 = fmul fast float %4271, %136
  %4282 = fsub fast float %4280, %4281
  %4283 = fmul fast float %4271, %4235
  %4284 = call float @dx.op.tertiary.f32(i32 46, float %4237, float %135, float %4283)  ; FMad(a,b,c)
  %4285 = fmul fast float %4272, %4235
  %4286 = call float @dx.op.tertiary.f32(i32 46, float %4237, float %136, float %4285)  ; FMad(a,b,c)
  %4287 = fmul fast float %4273, %4235
  %4288 = call float @dx.op.tertiary.f32(i32 46, float %4237, float %137, float %4287)  ; FMad(a,b,c)
  %4289 = fmul fast float %4271, %4236
  %4290 = call float @dx.op.tertiary.f32(i32 46, float %4238, float %135, float %4289)  ; FMad(a,b,c)
  %4291 = fmul fast float %4272, %4236
  %4292 = call float @dx.op.tertiary.f32(i32 46, float %4238, float %136, float %4291)  ; FMad(a,b,c)
  %4293 = fmul fast float %4273, %4236
  %4294 = call float @dx.op.tertiary.f32(i32 46, float %4238, float %137, float %4293)  ; FMad(a,b,c)
  %4295 = fmul fast float %4271, %4250
  %4296 = call float @dx.op.tertiary.f32(i32 46, float %135, float %4252, float %4295)  ; FMad(a,b,c)
  %4297 = fmul fast float %4271, %4251
  %4298 = call float @dx.op.tertiary.f32(i32 46, float %135, float %4247, float %4297)  ; FMad(a,b,c)
  %4299 = fmul fast float %4272, %4250
  %4300 = call float @dx.op.tertiary.f32(i32 46, float %136, float %4252, float %4299)  ; FMad(a,b,c)
  %4301 = fmul fast float %4272, %4251
  %4302 = call float @dx.op.tertiary.f32(i32 46, float %136, float %4247, float %4301)  ; FMad(a,b,c)
  %4303 = fmul fast float %4273, %4250
  %4304 = call float @dx.op.tertiary.f32(i32 46, float %137, float %4252, float %4303)  ; FMad(a,b,c)
  %4305 = fmul fast float %4273, %4251
  %4306 = call float @dx.op.tertiary.f32(i32 46, float %137, float %4247, float %4305)  ; FMad(a,b,c)
  %4307 = fmul fast float %913, %805
  %4308 = fmul fast float %913, %808
  %4309 = fmul fast float %913, %811
  %4310 = fsub fast float %915, %4307
  %4311 = fsub fast float %916, %4308
  %4312 = fsub fast float %917, %4309
  %4313 = fmul fast float %914, %278
  %4314 = fmul fast float %914, %279
  %4315 = fmul fast float %914, %280
  %4316 = fsub fast float %4310, %4313
  %4317 = fsub fast float %4311, %4314
  %4318 = fsub fast float %4312, %4315
  %4319 = fmul fast float %4284, %4316
  %4320 = call float @dx.op.tertiary.f32(i32 46, float %4286, float %4317, float %4319)  ; FMad(a,b,c)
  %4321 = call float @dx.op.tertiary.f32(i32 46, float %4288, float %4318, float %4320)  ; FMad(a,b,c)
  %4322 = fmul fast float %4276, %4316
  %4323 = call float @dx.op.tertiary.f32(i32 46, float %4279, float %4317, float %4322)  ; FMad(a,b,c)
  %4324 = call float @dx.op.tertiary.f32(i32 46, float %4282, float %4318, float %4323)  ; FMad(a,b,c)
  %4325 = fmul fast float %4290, %4316
  %4326 = call float @dx.op.tertiary.f32(i32 46, float %4292, float %4317, float %4325)  ; FMad(a,b,c)
  %4327 = call float @dx.op.tertiary.f32(i32 46, float %4294, float %4318, float %4326)  ; FMad(a,b,c)
  %4328 = fadd fast float %915, %4307
  %4329 = fsub fast float %4328, %4313
  %4330 = fsub fast float %4308, %4314
  %4331 = fadd fast float %4330, %916
  %4332 = fsub fast float %4309, %4315
  %4333 = fadd fast float %4332, %917
  %4334 = fmul fast float %4284, %4329
  %4335 = call float @dx.op.tertiary.f32(i32 46, float %4286, float %4331, float %4334)  ; FMad(a,b,c)
  %4336 = call float @dx.op.tertiary.f32(i32 46, float %4288, float %4333, float %4335)  ; FMad(a,b,c)
  %4337 = fmul fast float %4276, %4329
  %4338 = call float @dx.op.tertiary.f32(i32 46, float %4279, float %4331, float %4337)  ; FMad(a,b,c)
  %4339 = call float @dx.op.tertiary.f32(i32 46, float %4282, float %4333, float %4338)  ; FMad(a,b,c)
  %4340 = fmul fast float %4290, %4329
  %4341 = call float @dx.op.tertiary.f32(i32 46, float %4292, float %4331, float %4340)  ; FMad(a,b,c)
  %4342 = call float @dx.op.tertiary.f32(i32 46, float %4294, float %4333, float %4341)  ; FMad(a,b,c)
  %4343 = fadd fast float %4328, %4313
  %4344 = fadd fast float %4314, %4308
  %4345 = fadd fast float %4344, %916
  %4346 = fadd fast float %4315, %4309
  %4347 = fadd fast float %4346, %917
  %4348 = fmul fast float %4284, %4343
  %4349 = call float @dx.op.tertiary.f32(i32 46, float %4286, float %4345, float %4348)  ; FMad(a,b,c)
  %4350 = call float @dx.op.tertiary.f32(i32 46, float %4288, float %4347, float %4349)  ; FMad(a,b,c)
  %4351 = fmul fast float %4276, %4343
  %4352 = call float @dx.op.tertiary.f32(i32 46, float %4279, float %4345, float %4351)  ; FMad(a,b,c)
  %4353 = call float @dx.op.tertiary.f32(i32 46, float %4282, float %4347, float %4352)  ; FMad(a,b,c)
  %4354 = fmul fast float %4290, %4343
  %4355 = call float @dx.op.tertiary.f32(i32 46, float %4292, float %4345, float %4354)  ; FMad(a,b,c)
  %4356 = call float @dx.op.tertiary.f32(i32 46, float %4294, float %4347, float %4355)  ; FMad(a,b,c)
  %4357 = fadd fast float %4310, %4313
  %4358 = fadd fast float %4311, %4314
  %4359 = fadd fast float %4312, %4315
  %4360 = fmul fast float %4284, %4357
  %4361 = call float @dx.op.tertiary.f32(i32 46, float %4286, float %4358, float %4360)  ; FMad(a,b,c)
  %4362 = call float @dx.op.tertiary.f32(i32 46, float %4288, float %4359, float %4361)  ; FMad(a,b,c)
  %4363 = fmul fast float %4276, %4357
  %4364 = call float @dx.op.tertiary.f32(i32 46, float %4279, float %4358, float %4363)  ; FMad(a,b,c)
  %4365 = call float @dx.op.tertiary.f32(i32 46, float %4282, float %4359, float %4364)  ; FMad(a,b,c)
  %4366 = fmul fast float %4290, %4357
  %4367 = call float @dx.op.tertiary.f32(i32 46, float %4292, float %4358, float %4366)  ; FMad(a,b,c)
  %4368 = call float @dx.op.tertiary.f32(i32 46, float %4294, float %4359, float %4367)  ; FMad(a,b,c)
  %4369 = call float @dx.op.dot3.f32(i32 55, float %4321, float %4324, float %4327, float %4321, float %4324, float %4327)  ; Dot3(ax,ay,az,bx,by,bz)
  %4370 = call float @dx.op.unary.f32(i32 25, float %4369)  ; Rsqrt(value)
  %4371 = fmul fast float %4370, %4321
  %4372 = fmul fast float %4370, %4324
  %4373 = fmul fast float %4370, %4327
  %4374 = call float @dx.op.dot3.f32(i32 55, float %4336, float %4339, float %4342, float %4336, float %4339, float %4342)  ; Dot3(ax,ay,az,bx,by,bz)
  %4375 = call float @dx.op.unary.f32(i32 25, float %4374)  ; Rsqrt(value)
  %4376 = fmul fast float %4375, %4336
  %4377 = fmul fast float %4375, %4339
  %4378 = fmul fast float %4375, %4342
  %4379 = call float @dx.op.dot3.f32(i32 55, float %4350, float %4353, float %4356, float %4350, float %4353, float %4356)  ; Dot3(ax,ay,az,bx,by,bz)
  %4380 = call float @dx.op.unary.f32(i32 25, float %4379)  ; Rsqrt(value)
  %4381 = fmul fast float %4380, %4350
  %4382 = fmul fast float %4380, %4353
  %4383 = fmul fast float %4380, %4356
  %4384 = call float @dx.op.dot3.f32(i32 55, float %4362, float %4365, float %4368, float %4362, float %4365, float %4368)  ; Dot3(ax,ay,az,bx,by,bz)
  %4385 = call float @dx.op.unary.f32(i32 25, float %4384)  ; Rsqrt(value)
  %4386 = fmul fast float %4385, %4362
  %4387 = fmul fast float %4385, %4365
  %4388 = fmul fast float %4385, %4368
  %4389 = call float @dx.op.dot3.f32(i32 55, float %4371, float %4372, float %4373, float %4376, float %4377, float %4378)  ; Dot3(ax,ay,az,bx,by,bz)
  %4390 = call float @dx.op.unary.f32(i32 6, float %4389)  ; FAbs(value)
  %4391 = fmul fast float %4390, 0x3F8DBCFA00000000
  %4392 = fadd fast float %4391, 0x3FDFC6E900000000
  %4393 = fmul fast float %4392, %4390
  %4394 = fadd fast float %4393, 0x3FEB573B80000000
  %4395 = fadd fast float %4390, 0x4010A58D80000000
  %4396 = fmul fast float %4395, %4390
  %4397 = fadd fast float %4396, 0x400B573B80000000
  %4398 = fdiv fast float %4394, %4397
  %4399 = fcmp fast ogt float %4389, 0.000000e+00
  br i1 %4399, label %4406, label %4400

; <label>:4400                                    ; preds = %4205
  %4401 = fmul fast float %4389, %4389
  %4402 = fsub fast float 1.000000e+00, %4401
  %4403 = call float @dx.op.unary.f32(i32 25, float %4402)  ; Rsqrt(value)
  %4404 = fmul fast float %4403, 5.000000e-01
  %4405 = fsub fast float %4404, %4398
  br label %4406

; <label>:4406                                    ; preds = %4400, %4205
  %4407 = phi float [ %4405, %4400 ], [ %4398, %4205 ]
  %4408 = call float @dx.op.dot3.f32(i32 55, float %4376, float %4377, float %4378, float %4381, float %4382, float %4383)  ; Dot3(ax,ay,az,bx,by,bz)
  %4409 = call float @dx.op.unary.f32(i32 6, float %4408)  ; FAbs(value)
  %4410 = fmul fast float %4409, 0x3F8DBCFA00000000
  %4411 = fadd fast float %4410, 0x3FDFC6E900000000
  %4412 = fmul fast float %4411, %4409
  %4413 = fadd fast float %4412, 0x3FEB573B80000000
  %4414 = fadd fast float %4409, 0x4010A58D80000000
  %4415 = fmul fast float %4414, %4409
  %4416 = fadd fast float %4415, 0x400B573B80000000
  %4417 = fdiv fast float %4413, %4416
  %4418 = fcmp fast ogt float %4408, 0.000000e+00
  br i1 %4418, label %4425, label %4419

; <label>:4419                                    ; preds = %4406
  %4420 = fmul fast float %4408, %4408
  %4421 = fsub fast float 1.000000e+00, %4420
  %4422 = call float @dx.op.unary.f32(i32 25, float %4421)  ; Rsqrt(value)
  %4423 = fmul fast float %4422, 5.000000e-01
  %4424 = fsub fast float %4423, %4417
  br label %4425

; <label>:4425                                    ; preds = %4419, %4406
  %4426 = phi float [ %4424, %4419 ], [ %4417, %4406 ]
  %4427 = call float @dx.op.dot3.f32(i32 55, float %4381, float %4382, float %4383, float %4386, float %4387, float %4388)  ; Dot3(ax,ay,az,bx,by,bz)
  %4428 = call float @dx.op.unary.f32(i32 6, float %4427)  ; FAbs(value)
  %4429 = fmul fast float %4428, 0x3F8DBCFA00000000
  %4430 = fadd fast float %4429, 0x3FDFC6E900000000
  %4431 = fmul fast float %4430, %4428
  %4432 = fadd fast float %4431, 0x3FEB573B80000000
  %4433 = fadd fast float %4428, 0x4010A58D80000000
  %4434 = fmul fast float %4433, %4428
  %4435 = fadd fast float %4434, 0x400B573B80000000
  %4436 = fdiv fast float %4432, %4435
  %4437 = fcmp fast ogt float %4427, 0.000000e+00
  br i1 %4437, label %4444, label %4438

; <label>:4438                                    ; preds = %4425
  %4439 = fmul fast float %4427, %4427
  %4440 = fsub fast float 1.000000e+00, %4439
  %4441 = call float @dx.op.unary.f32(i32 25, float %4440)  ; Rsqrt(value)
  %4442 = fmul fast float %4441, 5.000000e-01
  %4443 = fsub fast float %4442, %4436
  br label %4444

; <label>:4444                                    ; preds = %4438, %4425
  %4445 = phi float [ %4443, %4438 ], [ %4436, %4425 ]
  %4446 = call float @dx.op.dot3.f32(i32 55, float %4386, float %4387, float %4388, float %4371, float %4372, float %4373)  ; Dot3(ax,ay,az,bx,by,bz)
  %4447 = call float @dx.op.unary.f32(i32 6, float %4446)  ; FAbs(value)
  %4448 = fmul fast float %4447, 0x3F8DBCFA00000000
  %4449 = fadd fast float %4448, 0x3FDFC6E900000000
  %4450 = fmul fast float %4449, %4447
  %4451 = fadd fast float %4450, 0x3FEB573B80000000
  %4452 = fadd fast float %4447, 0x4010A58D80000000
  %4453 = fmul fast float %4452, %4447
  %4454 = fadd fast float %4453, 0x400B573B80000000
  %4455 = fdiv fast float %4451, %4454
  %4456 = fcmp fast ogt float %4446, 0.000000e+00
  br i1 %4456, label %4463, label %4457

; <label>:4457                                    ; preds = %4444
  %4458 = fmul fast float %4446, %4446
  %4459 = fsub fast float 1.000000e+00, %4458
  %4460 = call float @dx.op.unary.f32(i32 25, float %4459)  ; Rsqrt(value)
  %4461 = fmul fast float %4460, 5.000000e-01
  %4462 = fsub fast float %4461, %4455
  br label %4463

; <label>:4463                                    ; preds = %4457, %4444
  %4464 = phi float [ %4462, %4457 ], [ %4455, %4444 ]
  %4465 = fsub fast float -0.000000e+00, %4407
  %4466 = fmul fast float %4371, %4465
  %4467 = fmul fast float %4372, %4465
  %4468 = fmul fast float %4373, %4465
  %4469 = fmul fast float %4426, %4381
  %4470 = fmul fast float %4426, %4382
  %4471 = fmul fast float %4426, %4383
  %4472 = fadd fast float %4469, %4466
  %4473 = fadd fast float %4470, %4467
  %4474 = fadd fast float %4471, %4468
  %4475 = fmul fast float %4474, %4377
  %4476 = fmul fast float %4473, %4378
  %4477 = fsub fast float %4475, %4476
  %4478 = fmul fast float %4472, %4378
  %4479 = fmul fast float %4474, %4376
  %4480 = fsub fast float %4478, %4479
  %4481 = fmul fast float %4473, %4376
  %4482 = fmul fast float %4472, %4377
  %4483 = fsub fast float %4481, %4482
  %4484 = fmul fast float %4464, %4371
  %4485 = fmul fast float %4464, %4372
  %4486 = fmul fast float %4464, %4373
  %4487 = fsub fast float -0.000000e+00, %4445
  %4488 = fmul fast float %4381, %4487
  %4489 = fmul fast float %4382, %4487
  %4490 = fmul fast float %4383, %4487
  %4491 = fadd fast float %4484, %4488
  %4492 = fadd fast float %4485, %4489
  %4493 = fadd fast float %4486, %4490
  %4494 = fmul fast float %4493, %4387
  %4495 = fmul fast float %4492, %4388
  %4496 = fsub fast float %4494, %4495
  %4497 = fmul fast float %4491, %4388
  %4498 = fmul fast float %4493, %4386
  %4499 = fsub fast float %4497, %4498
  %4500 = fmul fast float %4492, %4386
  %4501 = fmul fast float %4491, %4387
  %4502 = fsub fast float %4500, %4501
  %4503 = fadd fast float %4496, %4477
  %4504 = fadd fast float %4499, %4480
  %4505 = fadd fast float %4502, %4483
  %4506 = call float @dx.op.dot3.f32(i32 55, float %4503, float %4504, float %4505, float %4503, float %4504, float %4505)  ; Dot3(ax,ay,az,bx,by,bz)
  %4507 = call float @dx.op.unary.f32(i32 25, float %4506)  ; Rsqrt(value)
  %4508 = fmul fast float %4507, %4506
  %4509 = fmul fast float %4503, %4507
  %4510 = fmul fast float %4504, %4507
  %4511 = fmul fast float %4505, %4507
  %4512 = call float @dx.op.unary.f32(i32 24, float %4508)  ; Sqrt(value)
  %4513 = fcmp fast olt float %4511, %4512
  br i1 %4513, label %4514, label %4521

; <label>:4514                                    ; preds = %4463
  %4515 = fsub fast float -0.000000e+00, %4512
  %4516 = call float @dx.op.binary.f32(i32 35, float %4511, float %4515)  ; FMax(a,b)
  %4517 = fadd fast float %4516, %4512
  %4518 = fmul fast float %4517, %4517
  %4519 = fmul fast float %4512, 4.000000e+00
  %4520 = fdiv fast float %4518, %4519
  br label %4521

; <label>:4521                                    ; preds = %4514, %4463
  %4522 = phi float [ %4520, %4514 ], [ %4511, %4463 ]
  %4523 = fmul fast float %4508, %4522
  %4524 = fsub fast float -0.000000e+00, %4523
  %4525 = call float @dx.op.binary.f32(i32 36, float %4524, float 0.000000e+00)  ; FMin(a,b)
  %4526 = fsub fast float -0.000000e+00, %4525
  %4527 = fmul fast float %4509, %4296
  %4528 = call float @dx.op.tertiary.f32(i32 46, float %4276, float %4510, float %4527)  ; FMad(a,b,c)
  %4529 = call float @dx.op.tertiary.f32(i32 46, float %4298, float %4511, float %4528)  ; FMad(a,b,c)
  %4530 = fmul fast float %4509, %4300
  %4531 = call float @dx.op.tertiary.f32(i32 46, float %4279, float %4510, float %4530)  ; FMad(a,b,c)
  %4532 = call float @dx.op.tertiary.f32(i32 46, float %4302, float %4511, float %4531)  ; FMad(a,b,c)
  %4533 = fmul fast float %4509, %4304
  %4534 = call float @dx.op.tertiary.f32(i32 46, float %4282, float %4510, float %4533)  ; FMad(a,b,c)
  %4535 = call float @dx.op.tertiary.f32(i32 46, float %4306, float %4511, float %4534)  ; FMad(a,b,c)
  %4536 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %4529, float %4532, float %4535)  ; Dot3(ax,ay,az,bx,by,bz)
  %4537 = fsub fast float 0x3F50624DE0000000, %4536
  %4538 = call float @dx.op.unary.f32(i32 7, float %4537)  ; Saturate(value)
  %4539 = fmul fast float %4538, %274
  %4540 = fmul fast float %4538, %275
  %4541 = fmul fast float %4538, %276
  %4542 = fadd fast float %4539, %4529
  %4543 = fadd fast float %4540, %4532
  %4544 = fadd fast float %4541, %4535
  %4545 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %4542, float %4543, float %4544)  ; Dot3(ax,ay,az,bx,by,bz)
  %4546 = fdiv fast float %924, %4545
  br i1 %1065, label %4547, label %4592

; <label>:4547                                    ; preds = %4521
  %4548 = fmul fast float %4546, %4544
  %4549 = fmul fast float %4546, %4543
  %4550 = fmul fast float %4546, %4542
  %4551 = fsub fast float %4550, %915
  %4552 = fsub fast float %4549, %916
  %4553 = fsub fast float %4548, %917
  %4554 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %4551, float %4552, float %4553)  ; Dot3(ax,ay,az,bx,by,bz)
  %4555 = fadd fast float %4554, %912
  %4556 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %4557 = fdiv fast float %4555, %4556
  %4558 = fmul fast float %4557, 5.000000e-01
  %4559 = fsub fast float 5.000000e-01, %4558
  %4560 = call float @dx.op.unary.f32(i32 7, float %4559)  ; Saturate(value)
  %4561 = fmul fast float %4560, %310
  %4562 = fadd fast float %4561, %308
  %4563 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %4551, float %4552, float %4553)  ; Dot3(ax,ay,az,bx,by,bz)
  %4564 = fadd fast float %4563, %911
  %4565 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %4566 = fdiv fast float %4564, %4565
  %4567 = fmul fast float %4566, 5.000000e-01
  %4568 = fadd fast float %4567, 5.000000e-01
  %4569 = call float @dx.op.unary.f32(i32 7, float %4568)  ; Saturate(value)
  %4570 = fmul fast float %4569, %309
  %4571 = fadd fast float %4570, %307
  %4572 = fmul fast float %284, %281
  %4573 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %4572)  ; FMax(a,b)
  %4574 = call float @dx.op.unary.f32(i32 25, float %4573)  ; Rsqrt(value)
  %4575 = fmul fast float %4574, %4546
  %4576 = call float @dx.op.unary.f32(i32 23, float %4575)  ; Log(value)
  %4577 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %4578 = fmul fast float %4577, %309
  %4579 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %4580 = fmul fast float %4579, %310
  %4581 = call float @dx.op.binary.f32(i32 36, float %4578, float %4580)  ; FMin(a,b)
  %4582 = call float @dx.op.unary.f32(i32 23, float %4581)  ; Log(value)
  %4583 = fadd fast float %4576, -2.000000e+00
  %4584 = fadd fast float %4583, %4582
  %4585 = call float @dx.op.binary.f32(i32 36, float %4584, float %306)  ; FMin(a,b)
  %4586 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4587 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4588 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4586, %dx.types.Handle %4587, float %4571, float %4562, float undef, float undef, i32 0, i32 0, i32 undef, float %4585)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4589 = extractvalue %dx.types.ResRet.f32 %4588, 0
  %4590 = extractvalue %dx.types.ResRet.f32 %4588, 1
  %4591 = extractvalue %dx.types.ResRet.f32 %4588, 2
  br label %4592

; <label>:4592                                    ; preds = %4547, %4521
  %4593 = phi float [ %4589, %4547 ], [ 1.000000e+00, %4521 ]
  %4594 = phi float [ %4590, %4547 ], [ 1.000000e+00, %4521 ]
  %4595 = phi float [ %4591, %4547 ], [ 1.000000e+00, %4521 ]
  %4596 = fmul fast float %4260, %4526
  %4597 = fmul fast float %4596, %4593
  %4598 = fmul fast float %4261, %4526
  %4599 = fmul fast float %4598, %4594
  %4600 = fmul fast float %4262, %4526
  %4601 = fmul fast float %4600, %4595
  %4602 = fsub fast float 5.000000e-01, %1042
  %4603 = fmul fast float %4602, 0x3FDC71C720000000
  %4604 = call float @dx.op.unary.f32(i32 7, float %4603)  ; Saturate(value)
  %4605 = call float @dx.op.dot3.f32(i32 55, float %396, float %397, float %398, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %4606 = fsub fast float -0.000000e+00, %4605
  %4607 = call float @dx.op.unary.f32(i32 7, float %4606)  ; Saturate(value)
  %4608 = fmul fast float %4607, %4607
  %4609 = fmul fast float %4608, 0x3FE47AE140000000
  %4610 = fsub fast float 1.000000e+00, %4609
  %4611 = fmul fast float %4608, 0x400015BFA0000000
  %4612 = fsub fast float 0x400921FB60000000, %4611
  %4613 = fmul fast float %4612, %4610
  %4614 = fdiv fast float 0x3FD70A3D80000000, %4613
  %4615 = fmul fast float %4604, %1040
  %4616 = fmul fast float %4615, %4614
  %4617 = fmul fast float %118, %118
  %4618 = fmul fast float %4617, %1113
  %4619 = fmul fast float %4618, %4616
  %4620 = fmul fast float %119, %119
  %4621 = fmul fast float %4620, %1114
  %4622 = fmul fast float %4621, %4616
  %4623 = fmul fast float %120, %120
  %4624 = fmul fast float %4623, %1115
  %4625 = fmul fast float %4624, %4616
  br label %5805

; <label>:4626                                    ; preds = %1112
  %4627 = call float @dx.op.binary.f32(i32 35, float %1116, float 0x3F70101020000000)  ; FMax(a,b)
  %4628 = call float @dx.op.binary.f32(i32 36, float %4627, float 1.000000e+00)  ; FMin(a,b)
  %4629 = call float @dx.op.dot3.f32(i32 55, float %396, float %397, float %398, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %4630 = call float @dx.op.binary.f32(i32 35, float %1042, float -1.000000e+00)  ; FMax(a,b)
  %4631 = call float @dx.op.binary.f32(i32 36, float %4630, float 1.000000e+00)  ; FMin(a,b)
  %4632 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %4633 = call float @dx.op.binary.f32(i32 35, float %4632, float -1.000000e+00)  ; FMax(a,b)
  %4634 = call float @dx.op.binary.f32(i32 36, float %4633, float 1.000000e+00)  ; FMin(a,b)
  %4635 = call float @dx.op.unary.f32(i32 6, float %4634)  ; FAbs(value)
  %4636 = fmul fast float %4635, 0x3FC40AE960000000
  %4637 = fsub fast float 0x3FF921FB60000000, %4636
  %4638 = fsub fast float 1.000000e+00, %4635
  %4639 = call float @dx.op.unary.f32(i32 24, float %4638)  ; Sqrt(value)
  %4640 = fmul fast float %4637, %4639
  %4641 = fcmp fast oge float %4634, 0.000000e+00
  %4642 = fsub fast float 0x400921FB60000000, %4640
  %4643 = select i1 %4641, float %4640, float %4642
  %4644 = call float @dx.op.unary.f32(i32 6, float %4631)  ; FAbs(value)
  %4645 = fmul fast float %4644, 0x3FC40AE960000000
  %4646 = fsub fast float 0x3FF921FB60000000, %4645
  %4647 = fsub fast float 1.000000e+00, %4644
  %4648 = call float @dx.op.unary.f32(i32 24, float %4647)  ; Sqrt(value)
  %4649 = fmul fast float %4646, %4648
  %4650 = fcmp fast oge float %4631, 0.000000e+00
  %4651 = fsub fast float 0x400921FB60000000, %4649
  %4652 = select i1 %4650, float %4649, float %4651
  %4653 = fsub fast float %4652, %4643
  %4654 = call float @dx.op.unary.f32(i32 6, float %4653)  ; FAbs(value)
  %4655 = fmul fast float %4654, 5.000000e-01
  %4656 = call float @dx.op.unary.f32(i32 12, float %4655)  ; Cos(value)
  %4657 = fmul fast float %4631, %135
  %4658 = fmul fast float %4631, %136
  %4659 = fmul fast float %4631, %137
  %4660 = fsub fast float %1037, %4657
  %4661 = fsub fast float %1038, %4658
  %4662 = fsub fast float %1039, %4659
  %4663 = fmul fast float %4634, %135
  %4664 = fmul fast float %4634, %136
  %4665 = fmul fast float %4634, %137
  %4666 = fsub fast float %396, %4663
  %4667 = fsub fast float %397, %4664
  %4668 = fsub fast float %398, %4665
  %4669 = call float @dx.op.dot3.f32(i32 55, float %4660, float %4661, float %4662, float %4666, float %4667, float %4668)  ; Dot3(ax,ay,az,bx,by,bz)
  %4670 = call float @dx.op.dot3.f32(i32 55, float %4660, float %4661, float %4662, float %4660, float %4661, float %4662)  ; Dot3(ax,ay,az,bx,by,bz)
  %4671 = call float @dx.op.dot3.f32(i32 55, float %4666, float %4667, float %4668, float %4666, float %4667, float %4668)  ; Dot3(ax,ay,az,bx,by,bz)
  %4672 = fmul fast float %4671, %4670
  %4673 = fadd fast float %4672, 0x3F1A36E2E0000000
  %4674 = call float @dx.op.unary.f32(i32 25, float %4673)  ; Rsqrt(value)
  %4675 = fmul fast float %4674, %4669
  %4676 = fmul fast float %4675, 5.000000e-01
  %4677 = fadd fast float %4676, 5.000000e-01
  %4678 = call float @dx.op.unary.f32(i32 7, float %4677)  ; Saturate(value)
  %4679 = call float @dx.op.unary.f32(i32 24, float %4678)  ; Sqrt(value)
  %4680 = fdiv fast float 0x3FF30A3D80000000, %4656
  %4681 = fmul fast float %4656, 0x3FD70A3D80000000
  %4682 = fadd fast float %4680, %4681
  %4683 = fmul fast float %4628, %4628
  %4684 = fmul fast float %4683, 5.000000e-01
  %4685 = fmul fast float %4683, 2.000000e+00
  %4686 = fmul fast float %4679, 0x3FEFEBF020000000
  %4687 = fmul fast float %4634, %4634
  %4688 = fsub fast float 1.000000e+00, %4687
  %4689 = call float @dx.op.unary.f32(i32 24, float %4688)  ; Sqrt(value)
  %4690 = fmul fast float %4686, %4689
  %4691 = fmul fast float %4634, 0x3FB1E7C640000000
  %4692 = fsub fast float %4690, %4691
  %4693 = fmul fast float %4692, 0x3FC1E7C640000000
  %4694 = fadd fast float %4634, %4631
  %4695 = fadd fast float %4694, %4693
  %4696 = fmul fast float %4683, 0x3FF6A09E60000000
  %4697 = fmul fast float %4696, %4679
  %4698 = fmul fast float %4695, %4695
  %4699 = fmul fast float %4698, -5.000000e-01
  %4700 = fmul fast float %4697, %4697
  %4701 = fdiv fast float %4699, %4700
  %4702 = fmul fast float %4701, 0x3FF7154760000000
  %4703 = call float @dx.op.unary.f32(i32 21, float %4702)  ; Exp(value)
  %4704 = fmul fast float %4697, 0x40040D9320000000
  %4705 = fdiv fast float %4703, %4704
  %4706 = fmul fast float %4629, 5.000000e-01
  %4707 = fadd fast float %4706, 5.000000e-01
  %4708 = call float @dx.op.unary.f32(i32 7, float %4707)  ; Saturate(value)
  %4709 = call float @dx.op.unary.f32(i32 24, float %4708)  ; Sqrt(value)
  %4710 = fsub fast float 1.000000e+00, %4709
  %4711 = fmul fast float %4710, %4710
  %4712 = fmul fast float %4710, 0x3FEE82E740000000
  %4713 = fmul fast float %4711, %4711
  %4714 = fmul fast float %4713, %4712
  %4715 = fadd fast float %4714, 0x3FA7D18B20000000
  %4716 = fmul fast float %181, 5.000000e-01
  %4717 = fmul fast float %4716, %4679
  %4718 = fmul fast float %4717, %4705
  %4719 = fmul fast float %4718, %4715
  %4720 = fadd fast float %4631, 0xBFA1EB8520000000
  %4721 = fadd fast float %4720, %4634
  %4722 = fmul fast float %4721, %4721
  %4723 = fmul fast float %4722, -5.000000e-01
  %4724 = fmul fast float %4684, %4684
  %4725 = fdiv fast float %4723, %4724
  %4726 = fmul fast float %4725, 0x3FF7154760000000
  %4727 = call float @dx.op.unary.f32(i32 21, float %4726)  ; Exp(value)
  %4728 = fmul fast float %4683, 0x3FF40D9320000000
  %4729 = fdiv fast float %4727, %4728
  %4730 = fdiv fast float 1.000000e+00, %4682
  %4731 = fmul fast float %4675, 0x3FE99999A0000000
  %4732 = fsub fast float 0x3FE3333340000000, %4731
  %4733 = fmul fast float %4730, %4732
  %4734 = fadd fast float %4733, 1.000000e+00
  %4735 = fmul fast float %4734, %4679
  %4736 = fmul fast float %4735, %4735
  %4737 = fsub fast float 1.000000e+00, %4736
  %4738 = call float @dx.op.unary.f32(i32 7, float %4737)  ; Saturate(value)
  %4739 = call float @dx.op.unary.f32(i32 24, float %4738)  ; Sqrt(value)
  %4740 = fmul fast float %4739, %4656
  %4741 = fsub fast float 1.000000e+00, %4740
  %4742 = fmul fast float %4741, %4741
  %4743 = fmul fast float %4741, 0x3FEE82E740000000
  %4744 = fmul fast float %4742, %4742
  %4745 = fmul fast float %4744, %4743
  %4746 = fsub fast float 0x3FEE82E740000000, %4745
  %4747 = fmul fast float %4735, %4730
  %4748 = fmul fast float %4747, %4747
  %4749 = fsub fast float 1.000000e+00, %4748
  %4750 = call float @dx.op.unary.f32(i32 24, float %4749)  ; Sqrt(value)
  %4751 = fmul fast float %4750, 5.000000e-01
  %4752 = fdiv fast float %4751, %4656
  %4753 = call float @dx.op.unary.f32(i32 6, float %178)  ; FAbs(value)
  %4754 = call float @dx.op.unary.f32(i32 6, float %179)  ; FAbs(value)
  %4755 = call float @dx.op.unary.f32(i32 6, float %180)  ; FAbs(value)
  %4756 = call float @dx.op.unary.f32(i32 23, float %4753)  ; Log(value)
  %4757 = call float @dx.op.unary.f32(i32 23, float %4754)  ; Log(value)
  %4758 = call float @dx.op.unary.f32(i32 23, float %4755)  ; Log(value)
  %4759 = fmul fast float %4756, %4752
  %4760 = fmul fast float %4757, %4752
  %4761 = fmul fast float %4758, %4752
  %4762 = call float @dx.op.unary.f32(i32 21, float %4759)  ; Exp(value)
  %4763 = call float @dx.op.unary.f32(i32 21, float %4760)  ; Exp(value)
  %4764 = call float @dx.op.unary.f32(i32 21, float %4761)  ; Exp(value)
  %4765 = fmul fast float %4675, 0x40151037A0000000
  %4766 = fsub fast float 0xC016F7BB80000000, %4765
  %4767 = call float @dx.op.unary.f32(i32 21, float %4766)  ; Exp(value)
  %4768 = fmul fast float %4746, %4746
  %4769 = fmul fast float %4768, %4729
  %4770 = fmul fast float %4769, %4767
  %4771 = fmul fast float %4770, %4762
  %4772 = fmul fast float %4770, %4763
  %4773 = fmul fast float %4770, %4764
  %4774 = fadd fast float %4771, %4719
  %4775 = fadd fast float %4772, %4719
  %4776 = fadd fast float %4773, %4719
  %4777 = fadd fast float %4631, 0xBFC1EB8520000000
  %4778 = fadd fast float %4777, %4634
  %4779 = fmul fast float %4778, %4778
  %4780 = fmul fast float %4779, -5.000000e-01
  %4781 = fmul fast float %4685, %4685
  %4782 = fdiv fast float %4780, %4781
  %4783 = fmul fast float %4782, 0x3FF7154760000000
  %4784 = call float @dx.op.unary.f32(i32 21, float %4783)  ; Exp(value)
  %4785 = fmul fast float %4683, 0x40140D9320000000
  %4786 = fdiv fast float %4784, %4785
  %4787 = fmul fast float %4656, 5.000000e-01
  %4788 = fsub fast float 1.000000e+00, %4787
  %4789 = fmul fast float %4788, %4788
  %4790 = fmul fast float %4656, 0x3FDE82E740000000
  %4791 = fsub fast float 0x3FEE82E740000000, %4790
  %4792 = fmul fast float %4789, %4789
  %4793 = fmul fast float %4792, %4791
  %4794 = fadd fast float %4793, 0x3FA7D18B20000000
  %4795 = fsub fast float 0x3FEE82E740000000, %4793
  %4796 = fdiv fast float 0x3FE99999A0000000, %4656
  %4797 = fmul fast float %4756, %4796
  %4798 = fmul fast float %4757, %4796
  %4799 = fmul fast float %4758, %4796
  %4800 = call float @dx.op.unary.f32(i32 21, float %4797)  ; Exp(value)
  %4801 = call float @dx.op.unary.f32(i32 21, float %4798)  ; Exp(value)
  %4802 = call float @dx.op.unary.f32(i32 21, float %4799)  ; Exp(value)
  %4803 = fmul fast float %4675, 0x4038869BE0000000
  %4804 = fadd fast float %4803, 0xC038355B40000000
  %4805 = call float @dx.op.unary.f32(i32 21, float %4804)  ; Exp(value)
  %4806 = fmul fast float %4795, %4795
  %4807 = fmul fast float %4806, %4794
  %4808 = fmul fast float %4807, %4786
  %4809 = fmul fast float %4808, %4805
  %4810 = fmul fast float %4809, %4800
  %4811 = fmul fast float %4809, %4801
  %4812 = fmul fast float %4809, %4802
  %4813 = fadd fast float %4774, %4810
  %4814 = fadd fast float %4775, %4811
  %4815 = fadd fast float %4776, %4812
  %4816 = fmul fast float %4813, %799
  %4817 = fmul fast float %4814, %799
  %4818 = fmul fast float %4815, %799
  %4819 = call float @dx.op.unary.f32(i32 6, float %1042)  ; FAbs(value)
  %4820 = fsub fast float 1.000000e+00, %4819
  %4821 = call float @dx.op.dot3.f32(i32 55, float %396, float %397, float %398, float %135, float %136, float %137)  ; Dot3(ax,ay,az,bx,by,bz)
  %4822 = fmul fast float %4821, %135
  %4823 = fmul fast float %4821, %136
  %4824 = fmul fast float %4821, %137
  %4825 = fsub fast float %396, %4822
  %4826 = fsub fast float %397, %4823
  %4827 = fsub fast float %398, %4824
  %4828 = call float @dx.op.dot3.f32(i32 55, float %4825, float %4826, float %4827, float %4825, float %4826, float %4827)  ; Dot3(ax,ay,az,bx,by,bz)
  %4829 = call float @dx.op.unary.f32(i32 25, float %4828)  ; Rsqrt(value)
  %4830 = fmul fast float %4825, %4829
  %4831 = fmul fast float %4826, %4829
  %4832 = fmul fast float %4827, %4829
  %4833 = call float @dx.op.dot3.f32(i32 55, float %4830, float %4831, float %4832, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %4834 = fadd fast float %4833, 1.000000e+00
  %4835 = fmul fast float %4834, 2.500000e-01
  %4836 = call float @dx.op.unary.f32(i32 7, float %4835)  ; Saturate(value)
  %4837 = fsub fast float %4820, %4836
  %4838 = fmul fast float %4837, 0x3FD51EB860000000
  %4839 = fadd fast float %4838, %4836
  %4840 = fmul fast float %139, 0x3FD45F3060000000
  %4841 = fmul fast float %4840, %4839
  %4842 = call float @dx.op.dot3.f32(i32 55, float %178, float %179, float %180, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %4843 = call float @dx.op.binary.f32(i32 35, float %4842, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %4844 = fcmp fast olt float %798, 1.000000e+00
  br i1 %4844, label %4845, label %4862

; <label>:4845                                    ; preds = %4626
  %4846 = fdiv fast float %180, %4843
  %4847 = call float @dx.op.unary.f32(i32 6, float %4846)  ; FAbs(value)
  %4848 = fdiv fast float %179, %4843
  %4849 = call float @dx.op.unary.f32(i32 6, float %4848)  ; FAbs(value)
  %4850 = fdiv fast float %178, %4843
  %4851 = call float @dx.op.unary.f32(i32 6, float %4850)  ; FAbs(value)
  %4852 = fsub fast float 1.000000e+00, %798
  %4853 = call float @dx.op.unary.f32(i32 23, float %4851)  ; Log(value)
  %4854 = call float @dx.op.unary.f32(i32 23, float %4849)  ; Log(value)
  %4855 = call float @dx.op.unary.f32(i32 23, float %4847)  ; Log(value)
  %4856 = fmul fast float %4853, %4852
  %4857 = fmul fast float %4854, %4852
  %4858 = fmul fast float %4855, %4852
  %4859 = call float @dx.op.unary.f32(i32 21, float %4856)  ; Exp(value)
  %4860 = call float @dx.op.unary.f32(i32 21, float %4857)  ; Exp(value)
  %4861 = call float @dx.op.unary.f32(i32 21, float %4858)  ; Exp(value)
  br label %4862

; <label>:4862                                    ; preds = %4845, %4626
  %4863 = phi float [ %4859, %4845 ], [ 1.000000e+00, %4626 ]
  %4864 = phi float [ %4860, %4845 ], [ 1.000000e+00, %4626 ]
  %4865 = phi float [ %4861, %4845 ], [ 1.000000e+00, %4626 ]
  %4866 = call float @dx.op.unary.f32(i32 24, float %4753)  ; Sqrt(value)
  %4867 = call float @dx.op.unary.f32(i32 24, float %4754)  ; Sqrt(value)
  %4868 = call float @dx.op.unary.f32(i32 24, float %4755)  ; Sqrt(value)
  %4869 = fmul fast float %4863, %4841
  %4870 = fmul fast float %4869, %4866
  %4871 = fmul fast float %4864, %4841
  %4872 = fmul fast float %4871, %4867
  %4873 = fmul fast float %4865, %4841
  %4874 = fmul fast float %4873, %4868
  %4875 = fadd fast float %4816, %4870
  %4876 = fadd fast float %4817, %4872
  %4877 = fadd fast float %4818, %4874
  %4878 = fsub fast float -0.000000e+00, %4875
  %4879 = fsub fast float -0.000000e+00, %4876
  %4880 = fsub fast float -0.000000e+00, %4877
  %4881 = call float @dx.op.binary.f32(i32 36, float %4878, float 0.000000e+00)  ; FMin(a,b)
  %4882 = call float @dx.op.binary.f32(i32 36, float %4879, float 0.000000e+00)  ; FMin(a,b)
  %4883 = call float @dx.op.binary.f32(i32 36, float %4880, float 0.000000e+00)  ; FMin(a,b)
  %4884 = fmul fast float %1036, -5.000000e-01
  %4885 = fmul fast float %4884, %1113
  %4886 = fmul fast float %4885, %4881
  %4887 = fmul fast float %4884, %1114
  %4888 = fmul fast float %4887, %4882
  %4889 = fmul fast float %4884, %1115
  %4890 = fmul fast float %4889, %4883
  br label %5805

; <label>:4891                                    ; preds = %1112
  %4892 = fmul fast float %118, %118
  %4893 = fmul fast float %119, %119
  %4894 = fmul fast float %120, %120
  %4895 = call float @dx.op.unary.f32(i32 7, float %121)  ; Saturate(value)
  %4896 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %4897 = call float @dx.op.dot3.f32(i32 55, float %396, float %397, float %398, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %4898 = fmul fast float %4897, 2.000000e+00
  %4899 = fadd fast float %4898, 2.000000e+00
  %4900 = call float @dx.op.unary.f32(i32 25, float %4899)  ; Rsqrt(value)
  %4901 = fadd fast float %4896, %1042
  %4902 = fmul fast float %4900, %4901
  %4903 = call float @dx.op.unary.f32(i32 7, float %4902)  ; Saturate(value)
  %4904 = fmul fast float %4900, %4897
  %4905 = fadd fast float %4904, %4900
  %4906 = call float @dx.op.unary.f32(i32 7, float %4905)  ; Saturate(value)
  %4907 = call float @dx.op.unary.f32(i32 6, float %4896)  ; FAbs(value)
  %4908 = fadd fast float %4907, 0x3EE4F8B580000000
  %4909 = call float @dx.op.unary.f32(i32 7, float %4908)  ; Saturate(value)
  %4910 = fmul fast float %207, 5.000000e+01
  %4911 = fmul fast float %208, 5.000000e+01
  %4912 = fmul fast float %209, 5.000000e+01
  %4913 = call float @dx.op.unary.f32(i32 7, float %4910)  ; Saturate(value)
  %4914 = call float @dx.op.unary.f32(i32 7, float %4911)  ; Saturate(value)
  %4915 = call float @dx.op.unary.f32(i32 7, float %4912)  ; Saturate(value)
  %4916 = fsub fast float 1.000000e+00, %4909
  %4917 = call float @dx.op.unary.f32(i32 24, float %4916)  ; Sqrt(value)
  %4918 = fmul fast float %1116, 9.843750e-01
  %4919 = fmul fast float %4917, 9.843750e-01
  %4920 = fadd fast float %4918, 7.812500e-03
  %4921 = fadd fast float %4919, 7.812500e-03
  %4922 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4923 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4924 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4922, %dx.types.Handle %4923, float %4920, float %4921, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4925 = extractvalue %dx.types.ResRet.f32 %4924, 0
  %4926 = extractvalue %dx.types.ResRet.f32 %4924, 1
  %4927 = extractvalue %dx.types.ResRet.f32 %4924, 2
  %4928 = extractvalue %dx.types.ResRet.f32 %4924, 3
  %4929 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %4930 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %4931 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %4929, %dx.types.Handle %4930, float %4920, float %4921, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %4932 = extractvalue %dx.types.ResRet.f32 %4931, 0
  %4933 = extractvalue %dx.types.ResRet.f32 %4931, 1
  %4934 = fmul fast float %4925, %4928
  %4935 = fmul fast float %4926, %4927
  %4936 = fsub fast float %4934, %4935
  %4937 = fdiv fast float %4925, %4936
  %4938 = fdiv fast float %4926, %4936
  %4939 = fdiv fast float %4927, %4936
  %4940 = fdiv fast float %4928, %4936
  %4941 = fsub fast float -0.000000e+00, %4939
  %4942 = fsub fast float -0.000000e+00, %4938
  %4943 = fmul fast float %4933, %4913
  %4944 = fmul fast float %4933, %4914
  %4945 = fmul fast float %4933, %4915
  %4946 = fsub fast float %4932, %4933
  %4947 = fmul fast float %4946, %207
  %4948 = fmul fast float %4946, %208
  %4949 = fmul fast float %4946, %209
  %4950 = fadd fast float %4947, %4943
  %4951 = fadd fast float %4948, %4944
  %4952 = fadd fast float %4949, %4945
  %4953 = fmul fast float %4896, %135
  %4954 = fmul fast float %4896, %136
  %4955 = fmul fast float %4896, %137
  %4956 = fsub fast float %396, %4953
  %4957 = fsub fast float %397, %4954
  %4958 = fsub fast float %398, %4955
  %4959 = call float @dx.op.dot3.f32(i32 55, float %4956, float %4957, float %4958, float %4956, float %4957, float %4958)  ; Dot3(ax,ay,az,bx,by,bz)
  %4960 = call float @dx.op.unary.f32(i32 25, float %4959)  ; Rsqrt(value)
  %4961 = fmul fast float %4956, %4960
  %4962 = fmul fast float %4957, %4960
  %4963 = fmul fast float %4958, %4960
  %4964 = fmul fast float %4963, %136
  %4965 = fmul fast float %4962, %137
  %4966 = fsub fast float %4964, %4965
  %4967 = fmul fast float %4961, %137
  %4968 = fmul fast float %4963, %135
  %4969 = fsub fast float %4967, %4968
  %4970 = fmul fast float %4962, %135
  %4971 = fmul fast float %4961, %136
  %4972 = fsub fast float %4970, %4971
  %4973 = fmul fast float %4961, %4925
  %4974 = call float @dx.op.tertiary.f32(i32 46, float %4927, float %135, float %4973)  ; FMad(a,b,c)
  %4975 = fmul fast float %4962, %4925
  %4976 = call float @dx.op.tertiary.f32(i32 46, float %4927, float %136, float %4975)  ; FMad(a,b,c)
  %4977 = fmul fast float %4963, %4925
  %4978 = call float @dx.op.tertiary.f32(i32 46, float %4927, float %137, float %4977)  ; FMad(a,b,c)
  %4979 = fmul fast float %4961, %4926
  %4980 = call float @dx.op.tertiary.f32(i32 46, float %4928, float %135, float %4979)  ; FMad(a,b,c)
  %4981 = fmul fast float %4962, %4926
  %4982 = call float @dx.op.tertiary.f32(i32 46, float %4928, float %136, float %4981)  ; FMad(a,b,c)
  %4983 = fmul fast float %4963, %4926
  %4984 = call float @dx.op.tertiary.f32(i32 46, float %4928, float %137, float %4983)  ; FMad(a,b,c)
  %4985 = fmul fast float %4961, %4940
  %4986 = call float @dx.op.tertiary.f32(i32 46, float %135, float %4942, float %4985)  ; FMad(a,b,c)
  %4987 = fmul fast float %4961, %4941
  %4988 = call float @dx.op.tertiary.f32(i32 46, float %135, float %4937, float %4987)  ; FMad(a,b,c)
  %4989 = fmul fast float %4962, %4940
  %4990 = call float @dx.op.tertiary.f32(i32 46, float %136, float %4942, float %4989)  ; FMad(a,b,c)
  %4991 = fmul fast float %4962, %4941
  %4992 = call float @dx.op.tertiary.f32(i32 46, float %136, float %4937, float %4991)  ; FMad(a,b,c)
  %4993 = fmul fast float %4963, %4940
  %4994 = call float @dx.op.tertiary.f32(i32 46, float %137, float %4942, float %4993)  ; FMad(a,b,c)
  %4995 = fmul fast float %4963, %4941
  %4996 = call float @dx.op.tertiary.f32(i32 46, float %137, float %4937, float %4995)  ; FMad(a,b,c)
  %4997 = fmul fast float %913, %805
  %4998 = fmul fast float %913, %808
  %4999 = fmul fast float %913, %811
  %5000 = fsub fast float %915, %4997
  %5001 = fsub fast float %916, %4998
  %5002 = fsub fast float %917, %4999
  %5003 = fmul fast float %914, %278
  %5004 = fmul fast float %914, %279
  %5005 = fmul fast float %914, %280
  %5006 = fsub fast float %5000, %5003
  %5007 = fsub fast float %5001, %5004
  %5008 = fsub fast float %5002, %5005
  %5009 = fmul fast float %4974, %5006
  %5010 = call float @dx.op.tertiary.f32(i32 46, float %4976, float %5007, float %5009)  ; FMad(a,b,c)
  %5011 = call float @dx.op.tertiary.f32(i32 46, float %4978, float %5008, float %5010)  ; FMad(a,b,c)
  %5012 = fmul fast float %4966, %5006
  %5013 = call float @dx.op.tertiary.f32(i32 46, float %4969, float %5007, float %5012)  ; FMad(a,b,c)
  %5014 = call float @dx.op.tertiary.f32(i32 46, float %4972, float %5008, float %5013)  ; FMad(a,b,c)
  %5015 = fmul fast float %4980, %5006
  %5016 = call float @dx.op.tertiary.f32(i32 46, float %4982, float %5007, float %5015)  ; FMad(a,b,c)
  %5017 = call float @dx.op.tertiary.f32(i32 46, float %4984, float %5008, float %5016)  ; FMad(a,b,c)
  %5018 = fadd fast float %915, %4997
  %5019 = fsub fast float %5018, %5003
  %5020 = fsub fast float %4998, %5004
  %5021 = fadd fast float %5020, %916
  %5022 = fsub fast float %4999, %5005
  %5023 = fadd fast float %5022, %917
  %5024 = fmul fast float %4974, %5019
  %5025 = call float @dx.op.tertiary.f32(i32 46, float %4976, float %5021, float %5024)  ; FMad(a,b,c)
  %5026 = call float @dx.op.tertiary.f32(i32 46, float %4978, float %5023, float %5025)  ; FMad(a,b,c)
  %5027 = fmul fast float %4966, %5019
  %5028 = call float @dx.op.tertiary.f32(i32 46, float %4969, float %5021, float %5027)  ; FMad(a,b,c)
  %5029 = call float @dx.op.tertiary.f32(i32 46, float %4972, float %5023, float %5028)  ; FMad(a,b,c)
  %5030 = fmul fast float %4980, %5019
  %5031 = call float @dx.op.tertiary.f32(i32 46, float %4982, float %5021, float %5030)  ; FMad(a,b,c)
  %5032 = call float @dx.op.tertiary.f32(i32 46, float %4984, float %5023, float %5031)  ; FMad(a,b,c)
  %5033 = fadd fast float %5018, %5003
  %5034 = fadd fast float %5004, %4998
  %5035 = fadd fast float %5034, %916
  %5036 = fadd fast float %5005, %4999
  %5037 = fadd fast float %5036, %917
  %5038 = fmul fast float %4974, %5033
  %5039 = call float @dx.op.tertiary.f32(i32 46, float %4976, float %5035, float %5038)  ; FMad(a,b,c)
  %5040 = call float @dx.op.tertiary.f32(i32 46, float %4978, float %5037, float %5039)  ; FMad(a,b,c)
  %5041 = fmul fast float %4966, %5033
  %5042 = call float @dx.op.tertiary.f32(i32 46, float %4969, float %5035, float %5041)  ; FMad(a,b,c)
  %5043 = call float @dx.op.tertiary.f32(i32 46, float %4972, float %5037, float %5042)  ; FMad(a,b,c)
  %5044 = fmul fast float %4980, %5033
  %5045 = call float @dx.op.tertiary.f32(i32 46, float %4982, float %5035, float %5044)  ; FMad(a,b,c)
  %5046 = call float @dx.op.tertiary.f32(i32 46, float %4984, float %5037, float %5045)  ; FMad(a,b,c)
  %5047 = fadd fast float %5000, %5003
  %5048 = fadd fast float %5001, %5004
  %5049 = fadd fast float %5002, %5005
  %5050 = fmul fast float %4974, %5047
  %5051 = call float @dx.op.tertiary.f32(i32 46, float %4976, float %5048, float %5050)  ; FMad(a,b,c)
  %5052 = call float @dx.op.tertiary.f32(i32 46, float %4978, float %5049, float %5051)  ; FMad(a,b,c)
  %5053 = fmul fast float %4966, %5047
  %5054 = call float @dx.op.tertiary.f32(i32 46, float %4969, float %5048, float %5053)  ; FMad(a,b,c)
  %5055 = call float @dx.op.tertiary.f32(i32 46, float %4972, float %5049, float %5054)  ; FMad(a,b,c)
  %5056 = fmul fast float %4980, %5047
  %5057 = call float @dx.op.tertiary.f32(i32 46, float %4982, float %5048, float %5056)  ; FMad(a,b,c)
  %5058 = call float @dx.op.tertiary.f32(i32 46, float %4984, float %5049, float %5057)  ; FMad(a,b,c)
  %5059 = call float @dx.op.dot3.f32(i32 55, float %5011, float %5014, float %5017, float %5011, float %5014, float %5017)  ; Dot3(ax,ay,az,bx,by,bz)
  %5060 = call float @dx.op.unary.f32(i32 25, float %5059)  ; Rsqrt(value)
  %5061 = fmul fast float %5060, %5011
  %5062 = fmul fast float %5060, %5014
  %5063 = fmul fast float %5060, %5017
  %5064 = call float @dx.op.dot3.f32(i32 55, float %5026, float %5029, float %5032, float %5026, float %5029, float %5032)  ; Dot3(ax,ay,az,bx,by,bz)
  %5065 = call float @dx.op.unary.f32(i32 25, float %5064)  ; Rsqrt(value)
  %5066 = fmul fast float %5065, %5026
  %5067 = fmul fast float %5065, %5029
  %5068 = fmul fast float %5065, %5032
  %5069 = call float @dx.op.dot3.f32(i32 55, float %5040, float %5043, float %5046, float %5040, float %5043, float %5046)  ; Dot3(ax,ay,az,bx,by,bz)
  %5070 = call float @dx.op.unary.f32(i32 25, float %5069)  ; Rsqrt(value)
  %5071 = fmul fast float %5070, %5040
  %5072 = fmul fast float %5070, %5043
  %5073 = fmul fast float %5070, %5046
  %5074 = call float @dx.op.dot3.f32(i32 55, float %5052, float %5055, float %5058, float %5052, float %5055, float %5058)  ; Dot3(ax,ay,az,bx,by,bz)
  %5075 = call float @dx.op.unary.f32(i32 25, float %5074)  ; Rsqrt(value)
  %5076 = fmul fast float %5075, %5052
  %5077 = fmul fast float %5075, %5055
  %5078 = fmul fast float %5075, %5058
  %5079 = call float @dx.op.dot3.f32(i32 55, float %5061, float %5062, float %5063, float %5066, float %5067, float %5068)  ; Dot3(ax,ay,az,bx,by,bz)
  %5080 = call float @dx.op.unary.f32(i32 6, float %5079)  ; FAbs(value)
  %5081 = fmul fast float %5080, 0x3F8DBCFA00000000
  %5082 = fadd fast float %5081, 0x3FDFC6E900000000
  %5083 = fmul fast float %5082, %5080
  %5084 = fadd fast float %5083, 0x3FEB573B80000000
  %5085 = fadd fast float %5080, 0x4010A58D80000000
  %5086 = fmul fast float %5085, %5080
  %5087 = fadd fast float %5086, 0x400B573B80000000
  %5088 = fdiv fast float %5084, %5087
  %5089 = fcmp fast ogt float %5079, 0.000000e+00
  br i1 %5089, label %5096, label %5090

; <label>:5090                                    ; preds = %4891
  %5091 = fmul fast float %5079, %5079
  %5092 = fsub fast float 1.000000e+00, %5091
  %5093 = call float @dx.op.unary.f32(i32 25, float %5092)  ; Rsqrt(value)
  %5094 = fmul fast float %5093, 5.000000e-01
  %5095 = fsub fast float %5094, %5088
  br label %5096

; <label>:5096                                    ; preds = %5090, %4891
  %5097 = phi float [ %5095, %5090 ], [ %5088, %4891 ]
  %5098 = call float @dx.op.dot3.f32(i32 55, float %5066, float %5067, float %5068, float %5071, float %5072, float %5073)  ; Dot3(ax,ay,az,bx,by,bz)
  %5099 = call float @dx.op.unary.f32(i32 6, float %5098)  ; FAbs(value)
  %5100 = fmul fast float %5099, 0x3F8DBCFA00000000
  %5101 = fadd fast float %5100, 0x3FDFC6E900000000
  %5102 = fmul fast float %5101, %5099
  %5103 = fadd fast float %5102, 0x3FEB573B80000000
  %5104 = fadd fast float %5099, 0x4010A58D80000000
  %5105 = fmul fast float %5104, %5099
  %5106 = fadd fast float %5105, 0x400B573B80000000
  %5107 = fdiv fast float %5103, %5106
  %5108 = fcmp fast ogt float %5098, 0.000000e+00
  br i1 %5108, label %5115, label %5109

; <label>:5109                                    ; preds = %5096
  %5110 = fmul fast float %5098, %5098
  %5111 = fsub fast float 1.000000e+00, %5110
  %5112 = call float @dx.op.unary.f32(i32 25, float %5111)  ; Rsqrt(value)
  %5113 = fmul fast float %5112, 5.000000e-01
  %5114 = fsub fast float %5113, %5107
  br label %5115

; <label>:5115                                    ; preds = %5109, %5096
  %5116 = phi float [ %5114, %5109 ], [ %5107, %5096 ]
  %5117 = call float @dx.op.dot3.f32(i32 55, float %5071, float %5072, float %5073, float %5076, float %5077, float %5078)  ; Dot3(ax,ay,az,bx,by,bz)
  %5118 = call float @dx.op.unary.f32(i32 6, float %5117)  ; FAbs(value)
  %5119 = fmul fast float %5118, 0x3F8DBCFA00000000
  %5120 = fadd fast float %5119, 0x3FDFC6E900000000
  %5121 = fmul fast float %5120, %5118
  %5122 = fadd fast float %5121, 0x3FEB573B80000000
  %5123 = fadd fast float %5118, 0x4010A58D80000000
  %5124 = fmul fast float %5123, %5118
  %5125 = fadd fast float %5124, 0x400B573B80000000
  %5126 = fdiv fast float %5122, %5125
  %5127 = fcmp fast ogt float %5117, 0.000000e+00
  br i1 %5127, label %5134, label %5128

; <label>:5128                                    ; preds = %5115
  %5129 = fmul fast float %5117, %5117
  %5130 = fsub fast float 1.000000e+00, %5129
  %5131 = call float @dx.op.unary.f32(i32 25, float %5130)  ; Rsqrt(value)
  %5132 = fmul fast float %5131, 5.000000e-01
  %5133 = fsub fast float %5132, %5126
  br label %5134

; <label>:5134                                    ; preds = %5128, %5115
  %5135 = phi float [ %5133, %5128 ], [ %5126, %5115 ]
  %5136 = call float @dx.op.dot3.f32(i32 55, float %5076, float %5077, float %5078, float %5061, float %5062, float %5063)  ; Dot3(ax,ay,az,bx,by,bz)
  %5137 = call float @dx.op.unary.f32(i32 6, float %5136)  ; FAbs(value)
  %5138 = fmul fast float %5137, 0x3F8DBCFA00000000
  %5139 = fadd fast float %5138, 0x3FDFC6E900000000
  %5140 = fmul fast float %5139, %5137
  %5141 = fadd fast float %5140, 0x3FEB573B80000000
  %5142 = fadd fast float %5137, 0x4010A58D80000000
  %5143 = fmul fast float %5142, %5137
  %5144 = fadd fast float %5143, 0x400B573B80000000
  %5145 = fdiv fast float %5141, %5144
  %5146 = fcmp fast ogt float %5136, 0.000000e+00
  br i1 %5146, label %5153, label %5147

; <label>:5147                                    ; preds = %5134
  %5148 = fmul fast float %5136, %5136
  %5149 = fsub fast float 1.000000e+00, %5148
  %5150 = call float @dx.op.unary.f32(i32 25, float %5149)  ; Rsqrt(value)
  %5151 = fmul fast float %5150, 5.000000e-01
  %5152 = fsub fast float %5151, %5145
  br label %5153

; <label>:5153                                    ; preds = %5147, %5134
  %5154 = phi float [ %5152, %5147 ], [ %5145, %5134 ]
  %5155 = fsub fast float -0.000000e+00, %5097
  %5156 = fmul fast float %5061, %5155
  %5157 = fmul fast float %5062, %5155
  %5158 = fmul fast float %5063, %5155
  %5159 = fmul fast float %5116, %5071
  %5160 = fmul fast float %5116, %5072
  %5161 = fmul fast float %5116, %5073
  %5162 = fadd fast float %5159, %5156
  %5163 = fadd fast float %5160, %5157
  %5164 = fadd fast float %5161, %5158
  %5165 = fmul fast float %5164, %5067
  %5166 = fmul fast float %5163, %5068
  %5167 = fsub fast float %5165, %5166
  %5168 = fmul fast float %5162, %5068
  %5169 = fmul fast float %5164, %5066
  %5170 = fsub fast float %5168, %5169
  %5171 = fmul fast float %5163, %5066
  %5172 = fmul fast float %5162, %5067
  %5173 = fsub fast float %5171, %5172
  %5174 = fmul fast float %5154, %5061
  %5175 = fmul fast float %5154, %5062
  %5176 = fmul fast float %5154, %5063
  %5177 = fsub fast float -0.000000e+00, %5135
  %5178 = fmul fast float %5071, %5177
  %5179 = fmul fast float %5072, %5177
  %5180 = fmul fast float %5073, %5177
  %5181 = fadd fast float %5174, %5178
  %5182 = fadd fast float %5175, %5179
  %5183 = fadd fast float %5176, %5180
  %5184 = fmul fast float %5183, %5077
  %5185 = fmul fast float %5182, %5078
  %5186 = fsub fast float %5184, %5185
  %5187 = fmul fast float %5181, %5078
  %5188 = fmul fast float %5183, %5076
  %5189 = fsub fast float %5187, %5188
  %5190 = fmul fast float %5182, %5076
  %5191 = fmul fast float %5181, %5077
  %5192 = fsub fast float %5190, %5191
  %5193 = fadd fast float %5186, %5167
  %5194 = fadd fast float %5189, %5170
  %5195 = fadd fast float %5192, %5173
  %5196 = call float @dx.op.dot3.f32(i32 55, float %5193, float %5194, float %5195, float %5193, float %5194, float %5195)  ; Dot3(ax,ay,az,bx,by,bz)
  %5197 = call float @dx.op.unary.f32(i32 25, float %5196)  ; Rsqrt(value)
  %5198 = fmul fast float %5197, %5196
  %5199 = fmul fast float %5193, %5197
  %5200 = fmul fast float %5194, %5197
  %5201 = fmul fast float %5195, %5197
  %5202 = call float @dx.op.unary.f32(i32 24, float %5198)  ; Sqrt(value)
  %5203 = fcmp fast olt float %5201, %5202
  br i1 %5203, label %5204, label %5211

; <label>:5204                                    ; preds = %5153
  %5205 = fsub fast float -0.000000e+00, %5202
  %5206 = call float @dx.op.binary.f32(i32 35, float %5201, float %5205)  ; FMax(a,b)
  %5207 = fadd fast float %5206, %5202
  %5208 = fmul fast float %5207, %5207
  %5209 = fmul fast float %5202, 4.000000e+00
  %5210 = fdiv fast float %5208, %5209
  br label %5211

; <label>:5211                                    ; preds = %5204, %5153
  %5212 = phi float [ %5210, %5204 ], [ %5201, %5153 ]
  %5213 = fmul fast float %5198, %5212
  %5214 = fsub fast float -0.000000e+00, %5213
  %5215 = call float @dx.op.binary.f32(i32 36, float %5214, float 0.000000e+00)  ; FMin(a,b)
  %5216 = fsub fast float -0.000000e+00, %5215
  %5217 = fmul fast float %5199, %4986
  %5218 = call float @dx.op.tertiary.f32(i32 46, float %4966, float %5200, float %5217)  ; FMad(a,b,c)
  %5219 = call float @dx.op.tertiary.f32(i32 46, float %4988, float %5201, float %5218)  ; FMad(a,b,c)
  %5220 = fmul fast float %5199, %4990
  %5221 = call float @dx.op.tertiary.f32(i32 46, float %4969, float %5200, float %5220)  ; FMad(a,b,c)
  %5222 = call float @dx.op.tertiary.f32(i32 46, float %4992, float %5201, float %5221)  ; FMad(a,b,c)
  %5223 = fmul fast float %5199, %4994
  %5224 = call float @dx.op.tertiary.f32(i32 46, float %4972, float %5200, float %5223)  ; FMad(a,b,c)
  %5225 = call float @dx.op.tertiary.f32(i32 46, float %4996, float %5201, float %5224)  ; FMad(a,b,c)
  %5226 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %5219, float %5222, float %5225)  ; Dot3(ax,ay,az,bx,by,bz)
  %5227 = fsub fast float 0x3F50624DE0000000, %5226
  %5228 = call float @dx.op.unary.f32(i32 7, float %5227)  ; Saturate(value)
  %5229 = fmul fast float %5228, %274
  %5230 = fmul fast float %5228, %275
  %5231 = fmul fast float %5228, %276
  %5232 = fadd fast float %5229, %5219
  %5233 = fadd fast float %5230, %5222
  %5234 = fadd fast float %5231, %5225
  %5235 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %5232, float %5233, float %5234)  ; Dot3(ax,ay,az,bx,by,bz)
  %5236 = fdiv fast float %924, %5235
  br i1 %1065, label %5237, label %5282

; <label>:5237                                    ; preds = %5211
  %5238 = fmul fast float %5236, %5234
  %5239 = fmul fast float %5236, %5233
  %5240 = fmul fast float %5236, %5232
  %5241 = fsub fast float %5240, %915
  %5242 = fsub fast float %5239, %916
  %5243 = fsub fast float %5238, %917
  %5244 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %5241, float %5242, float %5243)  ; Dot3(ax,ay,az,bx,by,bz)
  %5245 = fadd fast float %5244, %912
  %5246 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %5247 = fdiv fast float %5245, %5246
  %5248 = fmul fast float %5247, 5.000000e-01
  %5249 = fsub fast float 5.000000e-01, %5248
  %5250 = call float @dx.op.unary.f32(i32 7, float %5249)  ; Saturate(value)
  %5251 = fmul fast float %5250, %310
  %5252 = fadd fast float %5251, %308
  %5253 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %5241, float %5242, float %5243)  ; Dot3(ax,ay,az,bx,by,bz)
  %5254 = fadd fast float %5253, %911
  %5255 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %5256 = fdiv fast float %5254, %5255
  %5257 = fmul fast float %5256, 5.000000e-01
  %5258 = fadd fast float %5257, 5.000000e-01
  %5259 = call float @dx.op.unary.f32(i32 7, float %5258)  ; Saturate(value)
  %5260 = fmul fast float %5259, %309
  %5261 = fadd fast float %5260, %307
  %5262 = fmul fast float %284, %281
  %5263 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %5262)  ; FMax(a,b)
  %5264 = call float @dx.op.unary.f32(i32 25, float %5263)  ; Rsqrt(value)
  %5265 = fmul fast float %5264, %5236
  %5266 = call float @dx.op.unary.f32(i32 23, float %5265)  ; Log(value)
  %5267 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %5268 = fmul fast float %5267, %309
  %5269 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %5270 = fmul fast float %5269, %310
  %5271 = call float @dx.op.binary.f32(i32 36, float %5268, float %5270)  ; FMin(a,b)
  %5272 = call float @dx.op.unary.f32(i32 23, float %5271)  ; Log(value)
  %5273 = fadd fast float %5266, -2.000000e+00
  %5274 = fadd fast float %5273, %5272
  %5275 = call float @dx.op.binary.f32(i32 36, float %5274, float %306)  ; FMin(a,b)
  %5276 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %5277 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %5278 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5276, %dx.types.Handle %5277, float %5261, float %5252, float undef, float undef, i32 0, i32 0, i32 undef, float %5275)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %5279 = extractvalue %dx.types.ResRet.f32 %5278, 0
  %5280 = extractvalue %dx.types.ResRet.f32 %5278, 1
  %5281 = extractvalue %dx.types.ResRet.f32 %5278, 2
  br label %5282

; <label>:5282                                    ; preds = %5237, %5211
  %5283 = phi float [ %5279, %5237 ], [ 1.000000e+00, %5211 ]
  %5284 = phi float [ %5280, %5237 ], [ 1.000000e+00, %5211 ]
  %5285 = phi float [ %5281, %5237 ], [ 1.000000e+00, %5211 ]
  %5286 = fmul fast float %4950, %5216
  %5287 = fmul fast float %5286, %5283
  %5288 = fmul fast float %4951, %5216
  %5289 = fmul fast float %5288, %5284
  %5290 = fmul fast float %4952, %5216
  %5291 = fmul fast float %5290, %5285
  %5292 = fmul fast float %1116, %1116
  %5293 = fmul fast float %5292, %5292
  %5294 = fmul fast float %4903, %5293
  %5295 = fsub fast float %4903, %5294
  %5296 = fmul fast float %5295, %4903
  %5297 = fadd fast float %5296, %5293
  %5298 = fmul fast float %5293, 0x402921FB60000000
  %5299 = fadd fast float %5298, 0x400921FB60000000
  %5300 = fdiv fast float 1.000000e+00, %5299
  %5301 = fmul fast float %5293, %5293
  %5302 = fmul fast float %5301, 4.000000e+00
  %5303 = fmul fast float %5297, %5297
  %5304 = fdiv fast float %5302, %5303
  %5305 = fadd fast float %5304, 1.000000e+00
  %5306 = fmul fast float %5305, %5300
  %5307 = fadd fast float %4909, %1053
  %5308 = fmul fast float %4909, %1053
  %5309 = fsub fast float %5307, %5308
  %5310 = fdiv fast float 2.500000e-01, %5309
  %5311 = fsub fast float 1.000000e+00, %4906
  %5312 = fmul fast float %5311, %5311
  %5313 = fmul fast float %5312, %5312
  %5314 = fmul fast float %5313, %5311
  %5315 = fmul fast float %4893, 5.000000e+01
  %5316 = call float @dx.op.unary.f32(i32 7, float %5315)  ; Saturate(value)
  %5317 = fmul fast float %5316, %5314
  %5318 = fsub fast float 1.000000e+00, %5314
  %5319 = fmul fast float %4892, %5318
  %5320 = fmul fast float %5318, %4893
  %5321 = fmul fast float %4894, %5318
  %5322 = fadd fast float %5317, %5319
  %5323 = fadd fast float %5317, %5320
  %5324 = fadd fast float %5317, %5321
  %5325 = fmul fast float %1053, %1040
  %5326 = fmul fast float %1113, %5325
  %5327 = fmul fast float %1114, %5325
  %5328 = fmul fast float %1115, %5325
  %5329 = fmul fast float %5306, %5310
  %5330 = fmul fast float %5326, %5329
  %5331 = fmul fast float %5327, %5329
  %5332 = fmul fast float %5328, %5329
  %5333 = fmul fast float %5330, %5322
  %5334 = fmul fast float %5331, %5323
  %5335 = fmul fast float %5332, %5324
  %5336 = fmul fast float %196, 0x3FD45F3060000000
  %5337 = fmul fast float %5336, %5325
  %5338 = fmul fast float %5337, %1113
  %5339 = fmul fast float %197, 0x3FD45F3060000000
  %5340 = fmul fast float %5339, %5325
  %5341 = fmul fast float %5340, %1114
  %5342 = fmul fast float %198, 0x3FD45F3060000000
  %5343 = fmul fast float %5342, %5325
  %5344 = fmul fast float %5343, %1115
  %5345 = fsub fast float %5333, %5287
  %5346 = fsub fast float %5334, %5289
  %5347 = fsub fast float %5335, %5291
  %5348 = fmul fast float %5345, %4895
  %5349 = fmul fast float %5346, %4895
  %5350 = fmul fast float %5347, %4895
  %5351 = fadd fast float %5348, %5287
  %5352 = fadd fast float %5349, %5289
  %5353 = fadd fast float %5350, %5291
  br label %5805

; <label>:5354                                    ; preds = %1112
  %5355 = fmul fast float %119, 2.000000e+00
  %5356 = fmul fast float %120, 2.000000e+00
  %5357 = fadd fast float %5355, -1.000000e+00
  %5358 = fadd fast float %5356, -1.000000e+00
  %5359 = call float @dx.op.unary.f32(i32 6, float %5357)  ; FAbs(value)
  %5360 = call float @dx.op.unary.f32(i32 6, float %5358)  ; FAbs(value)
  %5361 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %5359, float %5360)  ; Dot2(ax,ay,bx,by)
  %5362 = fsub fast float 1.000000e+00, %5361
  %5363 = fsub fast float -0.000000e+00, %5362
  %5364 = call float @dx.op.binary.f32(i32 35, float %5363, float 0.000000e+00)  ; FMax(a,b)
  %5365 = fsub fast float -0.000000e+00, %5364
  %5366 = fcmp fast oge float %5357, 0.000000e+00
  %5367 = fcmp fast oge float %5358, 0.000000e+00
  %5368 = select i1 %5366, float %5365, float %5364
  %5369 = select i1 %5367, float %5365, float %5364
  %5370 = fadd fast float %5368, %5357
  %5371 = fadd fast float %5369, %5358
  %5372 = call float @dx.op.dot3.f32(i32 55, float %5370, float %5371, float %5362, float %5370, float %5371, float %5362)  ; Dot3(ax,ay,az,bx,by,bz)
  %5373 = call float @dx.op.unary.f32(i32 25, float %5372)  ; Rsqrt(value)
  %5374 = fmul fast float %5370, %5373
  %5375 = fmul fast float %5371, %5373
  %5376 = fmul fast float %5373, %5362
  %5377 = fsub fast float 1.000000e+00, %121
  %5378 = fmul fast float %5377, %65
  %5379 = fsub fast float -0.000000e+00, %135
  %5380 = fsub fast float -0.000000e+00, %136
  %5381 = fsub fast float -0.000000e+00, %137
  %5382 = fsub fast float %5379, %5374
  %5383 = fsub fast float %5380, %5375
  %5384 = fsub fast float %5381, %5376
  %5385 = fmul fast float %5382, %5378
  %5386 = fmul fast float %5383, %5378
  %5387 = fmul fast float %5384, %5378
  %5388 = fadd fast float %5385, %5374
  %5389 = fadd fast float %5386, %5375
  %5390 = fadd fast float %5387, %5376
  %5391 = call float @dx.op.dot3.f32(i32 55, float %5388, float %5389, float %5390, float %5388, float %5389, float %5390)  ; Dot3(ax,ay,az,bx,by,bz)
  %5392 = call float @dx.op.unary.f32(i32 25, float %5391)  ; Rsqrt(value)
  %5393 = fmul fast float %5388, %5392
  %5394 = fmul fast float %5389, %5392
  %5395 = fmul fast float %5390, %5392
  %5396 = call float @dx.op.dot3.f32(i32 55, float %135, float %136, float %137, float %396, float %397, float %398)  ; Dot3(ax,ay,az,bx,by,bz)
  %5397 = call float @dx.op.unary.f32(i32 6, float %5396)  ; FAbs(value)
  %5398 = fadd fast float %5397, 0x3EE4F8B580000000
  %5399 = call float @dx.op.unary.f32(i32 7, float %5398)  ; Saturate(value)
  %5400 = fmul fast float %181, 0x3FB47AE140000000
  %5401 = fsub fast float 1.000000e+00, %5399
  %5402 = fmul fast float %5401, %5401
  %5403 = fmul fast float %5402, %5402
  %5404 = fmul fast float %5403, %5401
  %5405 = fsub fast float 1.000000e+00, %5404
  %5406 = fmul fast float %5405, %5400
  %5407 = fmul fast float %181, 4.000000e+00
  %5408 = call float @dx.op.unary.f32(i32 7, float %5407)  ; Saturate(value)
  %5409 = call float @dx.op.unary.f32(i32 24, float %5401)  ; Sqrt(value)
  %5410 = fmul fast float %1116, 9.843750e-01
  %5411 = fmul fast float %5409, 9.843750e-01
  %5412 = fadd fast float %5410, 7.812500e-03
  %5413 = fadd fast float %5411, 7.812500e-03
  %5414 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %5415 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %5416 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5414, %dx.types.Handle %5415, float %5412, float %5413, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %5417 = extractvalue %dx.types.ResRet.f32 %5416, 0
  %5418 = extractvalue %dx.types.ResRet.f32 %5416, 1
  %5419 = extractvalue %dx.types.ResRet.f32 %5416, 2
  %5420 = extractvalue %dx.types.ResRet.f32 %5416, 3
  %5421 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %5422 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %5423 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5421, %dx.types.Handle %5422, float %5412, float %5413, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %5424 = extractvalue %dx.types.ResRet.f32 %5423, 0
  %5425 = extractvalue %dx.types.ResRet.f32 %5423, 1
  %5426 = fmul fast float %5417, %5420
  %5427 = fmul fast float %5418, %5419
  %5428 = fsub fast float %5426, %5427
  %5429 = fdiv fast float %5417, %5428
  %5430 = fdiv fast float %5418, %5428
  %5431 = fdiv fast float %5419, %5428
  %5432 = fdiv fast float %5420, %5428
  %5433 = fsub fast float -0.000000e+00, %5431
  %5434 = fsub fast float -0.000000e+00, %5430
  %5435 = fmul fast float %5425, %5408
  %5436 = fsub fast float %5424, %5425
  %5437 = fmul fast float %5436, %5400
  %5438 = fadd fast float %5437, %5435
  %5439 = fmul fast float %5396, %135
  %5440 = fmul fast float %5396, %136
  %5441 = fmul fast float %5396, %137
  %5442 = fsub fast float %396, %5439
  %5443 = fsub fast float %397, %5440
  %5444 = fsub fast float %398, %5441
  %5445 = call float @dx.op.dot3.f32(i32 55, float %5442, float %5443, float %5444, float %5442, float %5443, float %5444)  ; Dot3(ax,ay,az,bx,by,bz)
  %5446 = call float @dx.op.unary.f32(i32 25, float %5445)  ; Rsqrt(value)
  %5447 = fmul fast float %5442, %5446
  %5448 = fmul fast float %5443, %5446
  %5449 = fmul fast float %5444, %5446
  %5450 = fmul fast float %5449, %136
  %5451 = fmul fast float %5448, %137
  %5452 = fsub fast float %5450, %5451
  %5453 = fmul fast float %5447, %137
  %5454 = fmul fast float %5449, %135
  %5455 = fsub fast float %5453, %5454
  %5456 = fmul fast float %5448, %135
  %5457 = fmul fast float %5447, %136
  %5458 = fsub fast float %5456, %5457
  %5459 = fmul fast float %5447, %5417
  %5460 = call float @dx.op.tertiary.f32(i32 46, float %5419, float %135, float %5459)  ; FMad(a,b,c)
  %5461 = fmul fast float %5448, %5417
  %5462 = call float @dx.op.tertiary.f32(i32 46, float %5419, float %136, float %5461)  ; FMad(a,b,c)
  %5463 = fmul fast float %5449, %5417
  %5464 = call float @dx.op.tertiary.f32(i32 46, float %5419, float %137, float %5463)  ; FMad(a,b,c)
  %5465 = fmul fast float %5447, %5418
  %5466 = call float @dx.op.tertiary.f32(i32 46, float %5420, float %135, float %5465)  ; FMad(a,b,c)
  %5467 = fmul fast float %5448, %5418
  %5468 = call float @dx.op.tertiary.f32(i32 46, float %5420, float %136, float %5467)  ; FMad(a,b,c)
  %5469 = fmul fast float %5449, %5418
  %5470 = call float @dx.op.tertiary.f32(i32 46, float %5420, float %137, float %5469)  ; FMad(a,b,c)
  %5471 = fmul fast float %5447, %5432
  %5472 = call float @dx.op.tertiary.f32(i32 46, float %135, float %5434, float %5471)  ; FMad(a,b,c)
  %5473 = fmul fast float %5447, %5433
  %5474 = call float @dx.op.tertiary.f32(i32 46, float %135, float %5429, float %5473)  ; FMad(a,b,c)
  %5475 = fmul fast float %5448, %5432
  %5476 = call float @dx.op.tertiary.f32(i32 46, float %136, float %5434, float %5475)  ; FMad(a,b,c)
  %5477 = fmul fast float %5448, %5433
  %5478 = call float @dx.op.tertiary.f32(i32 46, float %136, float %5429, float %5477)  ; FMad(a,b,c)
  %5479 = fmul fast float %5449, %5432
  %5480 = call float @dx.op.tertiary.f32(i32 46, float %137, float %5434, float %5479)  ; FMad(a,b,c)
  %5481 = fmul fast float %5449, %5433
  %5482 = call float @dx.op.tertiary.f32(i32 46, float %137, float %5429, float %5481)  ; FMad(a,b,c)
  %5483 = fmul fast float %913, %805
  %5484 = fmul fast float %913, %808
  %5485 = fmul fast float %913, %811
  %5486 = fsub fast float %915, %5483
  %5487 = fsub fast float %916, %5484
  %5488 = fsub fast float %917, %5485
  %5489 = fmul fast float %914, %278
  %5490 = fmul fast float %914, %279
  %5491 = fmul fast float %914, %280
  %5492 = fsub fast float %5486, %5489
  %5493 = fsub fast float %5487, %5490
  %5494 = fsub fast float %5488, %5491
  %5495 = fmul fast float %5460, %5492
  %5496 = call float @dx.op.tertiary.f32(i32 46, float %5462, float %5493, float %5495)  ; FMad(a,b,c)
  %5497 = call float @dx.op.tertiary.f32(i32 46, float %5464, float %5494, float %5496)  ; FMad(a,b,c)
  %5498 = fmul fast float %5452, %5492
  %5499 = call float @dx.op.tertiary.f32(i32 46, float %5455, float %5493, float %5498)  ; FMad(a,b,c)
  %5500 = call float @dx.op.tertiary.f32(i32 46, float %5458, float %5494, float %5499)  ; FMad(a,b,c)
  %5501 = fmul fast float %5466, %5492
  %5502 = call float @dx.op.tertiary.f32(i32 46, float %5468, float %5493, float %5501)  ; FMad(a,b,c)
  %5503 = call float @dx.op.tertiary.f32(i32 46, float %5470, float %5494, float %5502)  ; FMad(a,b,c)
  %5504 = fadd fast float %915, %5483
  %5505 = fsub fast float %5504, %5489
  %5506 = fsub fast float %5484, %5490
  %5507 = fadd fast float %5506, %916
  %5508 = fsub fast float %5485, %5491
  %5509 = fadd fast float %5508, %917
  %5510 = fmul fast float %5460, %5505
  %5511 = call float @dx.op.tertiary.f32(i32 46, float %5462, float %5507, float %5510)  ; FMad(a,b,c)
  %5512 = call float @dx.op.tertiary.f32(i32 46, float %5464, float %5509, float %5511)  ; FMad(a,b,c)
  %5513 = fmul fast float %5452, %5505
  %5514 = call float @dx.op.tertiary.f32(i32 46, float %5455, float %5507, float %5513)  ; FMad(a,b,c)
  %5515 = call float @dx.op.tertiary.f32(i32 46, float %5458, float %5509, float %5514)  ; FMad(a,b,c)
  %5516 = fmul fast float %5466, %5505
  %5517 = call float @dx.op.tertiary.f32(i32 46, float %5468, float %5507, float %5516)  ; FMad(a,b,c)
  %5518 = call float @dx.op.tertiary.f32(i32 46, float %5470, float %5509, float %5517)  ; FMad(a,b,c)
  %5519 = fadd fast float %5504, %5489
  %5520 = fadd fast float %5490, %5484
  %5521 = fadd fast float %5520, %916
  %5522 = fadd fast float %5491, %5485
  %5523 = fadd fast float %5522, %917
  %5524 = fmul fast float %5460, %5519
  %5525 = call float @dx.op.tertiary.f32(i32 46, float %5462, float %5521, float %5524)  ; FMad(a,b,c)
  %5526 = call float @dx.op.tertiary.f32(i32 46, float %5464, float %5523, float %5525)  ; FMad(a,b,c)
  %5527 = fmul fast float %5452, %5519
  %5528 = call float @dx.op.tertiary.f32(i32 46, float %5455, float %5521, float %5527)  ; FMad(a,b,c)
  %5529 = call float @dx.op.tertiary.f32(i32 46, float %5458, float %5523, float %5528)  ; FMad(a,b,c)
  %5530 = fmul fast float %5466, %5519
  %5531 = call float @dx.op.tertiary.f32(i32 46, float %5468, float %5521, float %5530)  ; FMad(a,b,c)
  %5532 = call float @dx.op.tertiary.f32(i32 46, float %5470, float %5523, float %5531)  ; FMad(a,b,c)
  %5533 = fadd fast float %5486, %5489
  %5534 = fadd fast float %5487, %5490
  %5535 = fadd fast float %5488, %5491
  %5536 = fmul fast float %5460, %5533
  %5537 = call float @dx.op.tertiary.f32(i32 46, float %5462, float %5534, float %5536)  ; FMad(a,b,c)
  %5538 = call float @dx.op.tertiary.f32(i32 46, float %5464, float %5535, float %5537)  ; FMad(a,b,c)
  %5539 = fmul fast float %5452, %5533
  %5540 = call float @dx.op.tertiary.f32(i32 46, float %5455, float %5534, float %5539)  ; FMad(a,b,c)
  %5541 = call float @dx.op.tertiary.f32(i32 46, float %5458, float %5535, float %5540)  ; FMad(a,b,c)
  %5542 = fmul fast float %5466, %5533
  %5543 = call float @dx.op.tertiary.f32(i32 46, float %5468, float %5534, float %5542)  ; FMad(a,b,c)
  %5544 = call float @dx.op.tertiary.f32(i32 46, float %5470, float %5535, float %5543)  ; FMad(a,b,c)
  %5545 = call float @dx.op.dot3.f32(i32 55, float %5497, float %5500, float %5503, float %5497, float %5500, float %5503)  ; Dot3(ax,ay,az,bx,by,bz)
  %5546 = call float @dx.op.unary.f32(i32 25, float %5545)  ; Rsqrt(value)
  %5547 = fmul fast float %5546, %5497
  %5548 = fmul fast float %5546, %5500
  %5549 = fmul fast float %5546, %5503
  %5550 = call float @dx.op.dot3.f32(i32 55, float %5512, float %5515, float %5518, float %5512, float %5515, float %5518)  ; Dot3(ax,ay,az,bx,by,bz)
  %5551 = call float @dx.op.unary.f32(i32 25, float %5550)  ; Rsqrt(value)
  %5552 = fmul fast float %5551, %5512
  %5553 = fmul fast float %5551, %5515
  %5554 = fmul fast float %5551, %5518
  %5555 = call float @dx.op.dot3.f32(i32 55, float %5526, float %5529, float %5532, float %5526, float %5529, float %5532)  ; Dot3(ax,ay,az,bx,by,bz)
  %5556 = call float @dx.op.unary.f32(i32 25, float %5555)  ; Rsqrt(value)
  %5557 = fmul fast float %5556, %5526
  %5558 = fmul fast float %5556, %5529
  %5559 = fmul fast float %5556, %5532
  %5560 = call float @dx.op.dot3.f32(i32 55, float %5538, float %5541, float %5544, float %5538, float %5541, float %5544)  ; Dot3(ax,ay,az,bx,by,bz)
  %5561 = call float @dx.op.unary.f32(i32 25, float %5560)  ; Rsqrt(value)
  %5562 = fmul fast float %5561, %5538
  %5563 = fmul fast float %5561, %5541
  %5564 = fmul fast float %5561, %5544
  %5565 = call float @dx.op.dot3.f32(i32 55, float %5547, float %5548, float %5549, float %5552, float %5553, float %5554)  ; Dot3(ax,ay,az,bx,by,bz)
  %5566 = call float @dx.op.unary.f32(i32 6, float %5565)  ; FAbs(value)
  %5567 = fmul fast float %5566, 0x3F8DBCFA00000000
  %5568 = fadd fast float %5567, 0x3FDFC6E900000000
  %5569 = fmul fast float %5568, %5566
  %5570 = fadd fast float %5569, 0x3FEB573B80000000
  %5571 = fadd fast float %5566, 0x4010A58D80000000
  %5572 = fmul fast float %5571, %5566
  %5573 = fadd fast float %5572, 0x400B573B80000000
  %5574 = fdiv fast float %5570, %5573
  %5575 = fcmp fast ogt float %5565, 0.000000e+00
  br i1 %5575, label %5582, label %5576

; <label>:5576                                    ; preds = %5354
  %5577 = fmul fast float %5565, %5565
  %5578 = fsub fast float 1.000000e+00, %5577
  %5579 = call float @dx.op.unary.f32(i32 25, float %5578)  ; Rsqrt(value)
  %5580 = fmul fast float %5579, 5.000000e-01
  %5581 = fsub fast float %5580, %5574
  br label %5582

; <label>:5582                                    ; preds = %5576, %5354
  %5583 = phi float [ %5581, %5576 ], [ %5574, %5354 ]
  %5584 = call float @dx.op.dot3.f32(i32 55, float %5552, float %5553, float %5554, float %5557, float %5558, float %5559)  ; Dot3(ax,ay,az,bx,by,bz)
  %5585 = call float @dx.op.unary.f32(i32 6, float %5584)  ; FAbs(value)
  %5586 = fmul fast float %5585, 0x3F8DBCFA00000000
  %5587 = fadd fast float %5586, 0x3FDFC6E900000000
  %5588 = fmul fast float %5587, %5585
  %5589 = fadd fast float %5588, 0x3FEB573B80000000
  %5590 = fadd fast float %5585, 0x4010A58D80000000
  %5591 = fmul fast float %5590, %5585
  %5592 = fadd fast float %5591, 0x400B573B80000000
  %5593 = fdiv fast float %5589, %5592
  %5594 = fcmp fast ogt float %5584, 0.000000e+00
  br i1 %5594, label %5601, label %5595

; <label>:5595                                    ; preds = %5582
  %5596 = fmul fast float %5584, %5584
  %5597 = fsub fast float 1.000000e+00, %5596
  %5598 = call float @dx.op.unary.f32(i32 25, float %5597)  ; Rsqrt(value)
  %5599 = fmul fast float %5598, 5.000000e-01
  %5600 = fsub fast float %5599, %5593
  br label %5601

; <label>:5601                                    ; preds = %5595, %5582
  %5602 = phi float [ %5600, %5595 ], [ %5593, %5582 ]
  %5603 = call float @dx.op.dot3.f32(i32 55, float %5557, float %5558, float %5559, float %5562, float %5563, float %5564)  ; Dot3(ax,ay,az,bx,by,bz)
  %5604 = call float @dx.op.unary.f32(i32 6, float %5603)  ; FAbs(value)
  %5605 = fmul fast float %5604, 0x3F8DBCFA00000000
  %5606 = fadd fast float %5605, 0x3FDFC6E900000000
  %5607 = fmul fast float %5606, %5604
  %5608 = fadd fast float %5607, 0x3FEB573B80000000
  %5609 = fadd fast float %5604, 0x4010A58D80000000
  %5610 = fmul fast float %5609, %5604
  %5611 = fadd fast float %5610, 0x400B573B80000000
  %5612 = fdiv fast float %5608, %5611
  %5613 = fcmp fast ogt float %5603, 0.000000e+00
  br i1 %5613, label %5620, label %5614

; <label>:5614                                    ; preds = %5601
  %5615 = fmul fast float %5603, %5603
  %5616 = fsub fast float 1.000000e+00, %5615
  %5617 = call float @dx.op.unary.f32(i32 25, float %5616)  ; Rsqrt(value)
  %5618 = fmul fast float %5617, 5.000000e-01
  %5619 = fsub fast float %5618, %5612
  br label %5620

; <label>:5620                                    ; preds = %5614, %5601
  %5621 = phi float [ %5619, %5614 ], [ %5612, %5601 ]
  %5622 = call float @dx.op.dot3.f32(i32 55, float %5562, float %5563, float %5564, float %5547, float %5548, float %5549)  ; Dot3(ax,ay,az,bx,by,bz)
  %5623 = call float @dx.op.unary.f32(i32 6, float %5622)  ; FAbs(value)
  %5624 = fmul fast float %5623, 0x3F8DBCFA00000000
  %5625 = fadd fast float %5624, 0x3FDFC6E900000000
  %5626 = fmul fast float %5625, %5623
  %5627 = fadd fast float %5626, 0x3FEB573B80000000
  %5628 = fadd fast float %5623, 0x4010A58D80000000
  %5629 = fmul fast float %5628, %5623
  %5630 = fadd fast float %5629, 0x400B573B80000000
  %5631 = fdiv fast float %5627, %5630
  %5632 = fcmp fast ogt float %5622, 0.000000e+00
  br i1 %5632, label %5639, label %5633

; <label>:5633                                    ; preds = %5620
  %5634 = fmul fast float %5622, %5622
  %5635 = fsub fast float 1.000000e+00, %5634
  %5636 = call float @dx.op.unary.f32(i32 25, float %5635)  ; Rsqrt(value)
  %5637 = fmul fast float %5636, 5.000000e-01
  %5638 = fsub fast float %5637, %5631
  br label %5639

; <label>:5639                                    ; preds = %5633, %5620
  %5640 = phi float [ %5638, %5633 ], [ %5631, %5620 ]
  %5641 = fsub fast float -0.000000e+00, %5583
  %5642 = fmul fast float %5547, %5641
  %5643 = fmul fast float %5548, %5641
  %5644 = fmul fast float %5549, %5641
  %5645 = fmul fast float %5602, %5557
  %5646 = fmul fast float %5602, %5558
  %5647 = fmul fast float %5602, %5559
  %5648 = fadd fast float %5645, %5642
  %5649 = fadd fast float %5646, %5643
  %5650 = fadd fast float %5647, %5644
  %5651 = fmul fast float %5650, %5553
  %5652 = fmul fast float %5649, %5554
  %5653 = fsub fast float %5651, %5652
  %5654 = fmul fast float %5648, %5554
  %5655 = fmul fast float %5650, %5552
  %5656 = fsub fast float %5654, %5655
  %5657 = fmul fast float %5649, %5552
  %5658 = fmul fast float %5648, %5553
  %5659 = fsub fast float %5657, %5658
  %5660 = fmul fast float %5640, %5547
  %5661 = fmul fast float %5640, %5548
  %5662 = fmul fast float %5640, %5549
  %5663 = fsub fast float -0.000000e+00, %5621
  %5664 = fmul fast float %5557, %5663
  %5665 = fmul fast float %5558, %5663
  %5666 = fmul fast float %5559, %5663
  %5667 = fadd fast float %5660, %5664
  %5668 = fadd fast float %5661, %5665
  %5669 = fadd fast float %5662, %5666
  %5670 = fmul fast float %5669, %5563
  %5671 = fmul fast float %5668, %5564
  %5672 = fsub fast float %5670, %5671
  %5673 = fmul fast float %5667, %5564
  %5674 = fmul fast float %5669, %5562
  %5675 = fsub fast float %5673, %5674
  %5676 = fmul fast float %5668, %5562
  %5677 = fmul fast float %5667, %5563
  %5678 = fsub fast float %5676, %5677
  %5679 = fadd fast float %5672, %5653
  %5680 = fadd fast float %5675, %5656
  %5681 = fadd fast float %5678, %5659
  %5682 = call float @dx.op.dot3.f32(i32 55, float %5679, float %5680, float %5681, float %5679, float %5680, float %5681)  ; Dot3(ax,ay,az,bx,by,bz)
  %5683 = call float @dx.op.unary.f32(i32 25, float %5682)  ; Rsqrt(value)
  %5684 = fmul fast float %5683, %5682
  %5685 = fmul fast float %5679, %5683
  %5686 = fmul fast float %5680, %5683
  %5687 = fmul fast float %5681, %5683
  %5688 = call float @dx.op.unary.f32(i32 24, float %5684)  ; Sqrt(value)
  %5689 = fcmp fast olt float %5687, %5688
  br i1 %5689, label %5690, label %5697

; <label>:5690                                    ; preds = %5639
  %5691 = fsub fast float -0.000000e+00, %5688
  %5692 = call float @dx.op.binary.f32(i32 35, float %5687, float %5691)  ; FMax(a,b)
  %5693 = fadd fast float %5692, %5688
  %5694 = fmul fast float %5693, %5693
  %5695 = fmul fast float %5688, 4.000000e+00
  %5696 = fdiv fast float %5694, %5695
  br label %5697

; <label>:5697                                    ; preds = %5690, %5639
  %5698 = phi float [ %5696, %5690 ], [ %5687, %5639 ]
  %5699 = fmul fast float %5684, %5698
  %5700 = fsub fast float -0.000000e+00, %5699
  %5701 = call float @dx.op.binary.f32(i32 36, float %5700, float 0.000000e+00)  ; FMin(a,b)
  %5702 = fmul fast float %5685, %5472
  %5703 = call float @dx.op.tertiary.f32(i32 46, float %5452, float %5686, float %5702)  ; FMad(a,b,c)
  %5704 = call float @dx.op.tertiary.f32(i32 46, float %5474, float %5687, float %5703)  ; FMad(a,b,c)
  %5705 = fmul fast float %5685, %5476
  %5706 = call float @dx.op.tertiary.f32(i32 46, float %5455, float %5686, float %5705)  ; FMad(a,b,c)
  %5707 = call float @dx.op.tertiary.f32(i32 46, float %5478, float %5687, float %5706)  ; FMad(a,b,c)
  %5708 = fmul fast float %5685, %5480
  %5709 = call float @dx.op.tertiary.f32(i32 46, float %5458, float %5686, float %5708)  ; FMad(a,b,c)
  %5710 = call float @dx.op.tertiary.f32(i32 46, float %5482, float %5687, float %5709)  ; FMad(a,b,c)
  %5711 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %5704, float %5707, float %5710)  ; Dot3(ax,ay,az,bx,by,bz)
  %5712 = fsub fast float 0x3F50624DE0000000, %5711
  %5713 = call float @dx.op.unary.f32(i32 7, float %5712)  ; Saturate(value)
  %5714 = fmul fast float %5713, %274
  %5715 = fmul fast float %5713, %275
  %5716 = fmul fast float %5713, %276
  %5717 = fadd fast float %5714, %5704
  %5718 = fadd fast float %5715, %5707
  %5719 = fadd fast float %5716, %5710
  %5720 = call float @dx.op.dot3.f32(i32 55, float %274, float %275, float %276, float %5717, float %5718, float %5719)  ; Dot3(ax,ay,az,bx,by,bz)
  %5721 = fdiv fast float %924, %5720
  br i1 %1065, label %5722, label %5767

; <label>:5722                                    ; preds = %5697
  %5723 = fmul fast float %5721, %5719
  %5724 = fmul fast float %5721, %5718
  %5725 = fmul fast float %5721, %5717
  %5726 = fsub fast float %5725, %915
  %5727 = fsub fast float %5724, %916
  %5728 = fsub fast float %5723, %917
  %5729 = call float @dx.op.dot3.f32(i32 55, float %278, float %279, float %280, float %5726, float %5727, float %5728)  ; Dot3(ax,ay,az,bx,by,bz)
  %5730 = fadd fast float %5729, %912
  %5731 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %284)  ; FMax(a,b)
  %5732 = fdiv fast float %5730, %5731
  %5733 = fmul fast float %5732, 5.000000e-01
  %5734 = fsub fast float 5.000000e-01, %5733
  %5735 = call float @dx.op.unary.f32(i32 7, float %5734)  ; Saturate(value)
  %5736 = fmul fast float %5735, %310
  %5737 = fadd fast float %5736, %308
  %5738 = call float @dx.op.dot3.f32(i32 55, float %805, float %808, float %811, float %5726, float %5727, float %5728)  ; Dot3(ax,ay,az,bx,by,bz)
  %5739 = fadd fast float %5738, %911
  %5740 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %281)  ; FMax(a,b)
  %5741 = fdiv fast float %5739, %5740
  %5742 = fmul fast float %5741, 5.000000e-01
  %5743 = fadd fast float %5742, 5.000000e-01
  %5744 = call float @dx.op.unary.f32(i32 7, float %5743)  ; Saturate(value)
  %5745 = fmul fast float %5744, %309
  %5746 = fadd fast float %5745, %307
  %5747 = fmul fast float %284, %281
  %5748 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %5747)  ; FMax(a,b)
  %5749 = call float @dx.op.unary.f32(i32 25, float %5748)  ; Rsqrt(value)
  %5750 = fmul fast float %5749, %5721
  %5751 = call float @dx.op.unary.f32(i32 23, float %5750)  ; Log(value)
  %5752 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %5753 = fmul fast float %5752, %309
  %5754 = extractvalue %dx.types.CBufRet.f32 %1066, 1
  %5755 = fmul fast float %5754, %310
  %5756 = call float @dx.op.binary.f32(i32 36, float %5753, float %5755)  ; FMin(a,b)
  %5757 = call float @dx.op.unary.f32(i32 23, float %5756)  ; Log(value)
  %5758 = fadd fast float %5751, -2.000000e+00
  %5759 = fadd fast float %5758, %5757
  %5760 = call float @dx.op.binary.f32(i32 36, float %5759, float %306)  ; FMin(a,b)
  %5761 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %5762 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %5763 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %5761, %dx.types.Handle %5762, float %5746, float %5737, float undef, float undef, i32 0, i32 0, i32 undef, float %5760)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %5764 = extractvalue %dx.types.ResRet.f32 %5763, 0
  %5765 = extractvalue %dx.types.ResRet.f32 %5763, 1
  %5766 = extractvalue %dx.types.ResRet.f32 %5763, 2
  br label %5767

; <label>:5767                                    ; preds = %5722, %5697
  %5768 = phi float [ %5764, %5722 ], [ 1.000000e+00, %5697 ]
  %5769 = phi float [ %5765, %5722 ], [ 1.000000e+00, %5697 ]
  %5770 = phi float [ %5766, %5722 ], [ 1.000000e+00, %5697 ]
  %5771 = fmul fast float %5701, %5438
  %5772 = fsub fast float -0.000000e+00, %5771
  %5773 = fmul fast float %5768, %5772
  %5774 = fmul fast float %5769, %5772
  %5775 = fmul fast float %5770, %5772
  %5776 = call float @dx.op.dot3.f32(i32 55, float %5374, float %5375, float %5376, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %5777 = call float @dx.op.unary.f32(i32 7, float %5776)  ; Saturate(value)
  %5778 = fmul fast float %5777, 1.100000e+01
  %5779 = fsub fast float 1.200000e+01, %5778
  %5780 = fmul fast float %5777, 0x40019999A0000000
  %5781 = fsub fast float 0x4004CCCCE0000000, %5780
  %5782 = call float @dx.op.dot3.f32(i32 55, float %5393, float %5394, float %5395, float %1037, float %1038, float %1039)  ; Dot3(ax,ay,az,bx,by,bz)
  %5783 = call float @dx.op.unary.f32(i32 7, float %5782)  ; Saturate(value)
  %5784 = call float @dx.op.unary.f32(i32 23, float %5783)  ; Log(value)
  %5785 = fmul fast float %5784, %5779
  %5786 = call float @dx.op.unary.f32(i32 21, float %5785)  ; Exp(value)
  %5787 = fmul fast float %5786, %5781
  %5788 = fadd fast float %5787, 0x3FE99999A0000000
  %5789 = fmul fast float %5788, %5777
  %5790 = fsub fast float %5405, %5406
  %5791 = fsub fast float %5789, %1053
  %5792 = fmul fast float %5791, %5377
  %5793 = fadd fast float %5792, %1053
  %5794 = fmul fast float %5790, %1040
  %5795 = fmul fast float %5794, %5793
  %5796 = fmul fast float %196, 0x3FD45F3060000000
  %5797 = fmul fast float %5796, %1113
  %5798 = fmul fast float %5797, %5795
  %5799 = fmul fast float %197, 0x3FD45F3060000000
  %5800 = fmul fast float %5799, %1114
  %5801 = fmul fast float %5800, %5795
  %5802 = fmul fast float %198, 0x3FD45F3060000000
  %5803 = fmul fast float %5802, %1115
  %5804 = fmul fast float %5803, %5795
  br label %5805

; <label>:5805                                    ; preds = %5767, %5282, %4862, %4592, %4122, %3278, %2413, %1959, %1504, %1112, %910
  %5806 = phi float [ 0.000000e+00, %910 ], [ %5798, %5767 ], [ 0.000000e+00, %5282 ], [ %4886, %4862 ], [ %4619, %4592 ], [ %4202, %4122 ], [ 0.000000e+00, %3278 ], [ %2436, %2413 ], [ %2023, %1959 ], [ 0.000000e+00, %1504 ], [ 0.000000e+00, %1112 ]
  %5807 = phi float [ 0.000000e+00, %910 ], [ %5801, %5767 ], [ 0.000000e+00, %5282 ], [ %4888, %4862 ], [ %4622, %4592 ], [ %4203, %4122 ], [ 0.000000e+00, %3278 ], [ %2440, %2413 ], [ %2024, %1959 ], [ 0.000000e+00, %1504 ], [ 0.000000e+00, %1112 ]
  %5808 = phi float [ 0.000000e+00, %910 ], [ %5804, %5767 ], [ 0.000000e+00, %5282 ], [ %4890, %4862 ], [ %4625, %4592 ], [ %4204, %4122 ], [ 0.000000e+00, %3278 ], [ %2444, %2413 ], [ %2025, %1959 ], [ 0.000000e+00, %1504 ], [ 0.000000e+00, %1112 ]
  %5809 = phi float [ 0.000000e+00, %910 ], [ %5773, %5767 ], [ %5351, %5282 ], [ 0.000000e+00, %4862 ], [ %4597, %4592 ], [ %4138, %4122 ], [ %3299, %3278 ], [ %2418, %2413 ], [ %1906, %1959 ], [ %1509, %1504 ], [ 0.000000e+00, %1112 ]
  %5810 = phi float [ 0.000000e+00, %910 ], [ %5774, %5767 ], [ %5352, %5282 ], [ 0.000000e+00, %4862 ], [ %4599, %4592 ], [ %4139, %4122 ], [ %3302, %3278 ], [ %2420, %2413 ], [ %1908, %1959 ], [ %1511, %1504 ], [ 0.000000e+00, %1112 ]
  %5811 = phi float [ 0.000000e+00, %910 ], [ %5775, %5767 ], [ %5353, %5282 ], [ 0.000000e+00, %4862 ], [ %4601, %4592 ], [ %4140, %4122 ], [ %3305, %3278 ], [ %2422, %2413 ], [ %1910, %1959 ], [ %1513, %1504 ], [ 0.000000e+00, %1112 ]
  %5812 = phi float [ 0.000000e+00, %910 ], [ 0.000000e+00, %5767 ], [ %5338, %5282 ], [ 0.000000e+00, %4862 ], [ %4209, %4592 ], [ %3355, %4122 ], [ %2904, %3278 ], [ %2030, %2413 ], [ %1518, %1959 ], [ %1121, %1504 ], [ 0.000000e+00, %1112 ]
  %5813 = phi float [ 0.000000e+00, %910 ], [ 0.000000e+00, %5767 ], [ %5341, %5282 ], [ 0.000000e+00, %4862 ], [ %4212, %4592 ], [ %3358, %4122 ], [ %2905, %3278 ], [ %2033, %2413 ], [ %1521, %1959 ], [ %1124, %1504 ], [ 0.000000e+00, %1112 ]
  %5814 = phi float [ 0.000000e+00, %910 ], [ 0.000000e+00, %5767 ], [ %5344, %5282 ], [ 0.000000e+00, %4862 ], [ %4215, %4592 ], [ %3361, %4122 ], [ %2906, %3278 ], [ %2036, %2413 ], [ %1524, %1959 ], [ %1127, %1504 ], [ 0.000000e+00, %1112 ]
  %5815 = fmul fast float %799, %421
  %5816 = fmul fast float %799, %422
  %5817 = fmul fast float %799, %423
  br i1 %151, label %5818, label %5827

; <label>:5818                                    ; preds = %5805
  %5819 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %5820 = extractvalue %dx.types.CBufRet.f32 %5819, 2
  %5821 = fcmp fast oeq float %5820, 0.000000e+00
  br i1 %5821, label %5822, label %5827

; <label>:5822                                    ; preds = %5818
  %5823 = fmul fast float %5812, %5815
  %5824 = fmul fast float %5813, %5816
  %5825 = fmul fast float %5814, %5817
  %5826 = call float @dx.op.dot3.f32(i32 55, float %5823, float %5824, float %5825, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %5827

; <label>:5827                                    ; preds = %5822, %5818, %5805
  %5828 = phi float [ %5826, %5822 ], [ 0.000000e+00, %5818 ], [ 0.000000e+00, %5805 ]
  %5829 = fmul fast float %5812, %5815
  %5830 = fmul fast float %5813, %5816
  %5831 = fmul fast float %5814, %5817
  %5832 = fmul fast float %5815, %286
  %5833 = fmul fast float %5832, %5809
  %5834 = fmul fast float %5816, %286
  %5835 = fmul fast float %5834, %5810
  %5836 = fmul fast float %5817, %286
  %5837 = fmul fast float %5836, %5811
  %5838 = fmul fast float %798, %421
  %5839 = fmul fast float %798, %422
  %5840 = fmul fast float %798, %423
  br i1 %151, label %5841, label %5851

; <label>:5841                                    ; preds = %5827
  %5842 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %5843 = extractvalue %dx.types.CBufRet.f32 %5842, 2
  %5844 = fcmp fast oeq float %5843, 0.000000e+00
  br i1 %5844, label %5845, label %5851

; <label>:5845                                    ; preds = %5841
  %5846 = fmul fast float %5806, %5838
  %5847 = fmul fast float %5807, %5839
  %5848 = fmul fast float %5808, %5840
  %5849 = call float @dx.op.dot3.f32(i32 55, float %5846, float %5847, float %5848, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %5850 = fadd fast float %5849, %5828
  br label %5851

; <label>:5851                                    ; preds = %5845, %5841, %5827
  %5852 = phi float [ %5850, %5845 ], [ %5828, %5841 ], [ %5828, %5827 ]
  %5853 = fmul fast float %5806, %5838
  %5854 = fmul fast float %5807, %5839
  %5855 = fmul fast float %5808, %5840
  %5856 = fadd fast float %5829, %5853
  %5857 = fadd fast float %5830, %5854
  %5858 = fadd fast float %5831, %5855
  br label %5859

; <label>:5859                                    ; preds = %5851, %797, %416
  %5860 = phi float [ %5833, %5851 ], [ 0.000000e+00, %797 ], [ 0.000000e+00, %416 ]
  %5861 = phi float [ %5835, %5851 ], [ 0.000000e+00, %797 ], [ 0.000000e+00, %416 ]
  %5862 = phi float [ %5837, %5851 ], [ 0.000000e+00, %797 ], [ 0.000000e+00, %416 ]
  %5863 = phi float [ %5856, %5851 ], [ 0.000000e+00, %797 ], [ 0.000000e+00, %416 ]
  %5864 = phi float [ %5857, %5851 ], [ 0.000000e+00, %797 ], [ 0.000000e+00, %416 ]
  %5865 = phi float [ %5858, %5851 ], [ 0.000000e+00, %797 ], [ 0.000000e+00, %416 ]
  %5866 = phi float [ %5852, %5851 ], [ 0.000000e+00, %797 ], [ 0.000000e+00, %416 ]
  %5867 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %5868 = extractvalue %dx.types.CBufRet.f32 %5867, 2
  %5869 = fcmp fast oeq float %5868, 0.000000e+00
  %5870 = select i1 %5869, float %5866, float 0.000000e+00
  %5871 = fadd fast float %5863, %5860
  %5872 = fadd fast float %5864, %5861
  %5873 = fadd fast float %5865, %5862
  br label %5874

; <label>:5874                                    ; preds = %5859, %174
  %5875 = phi float [ %5871, %5859 ], [ 0.000000e+00, %174 ]
  %5876 = phi float [ %5872, %5859 ], [ 0.000000e+00, %174 ]
  %5877 = phi float [ %5873, %5859 ], [ 0.000000e+00, %174 ]
  %5878 = phi float [ %5870, %5859 ], [ 0.000000e+00, %174 ]
  %5879 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %5880 = extractvalue %dx.types.CBufRet.f32 %5879, 2
  %5881 = fmul fast float %5880, %5875
  %5882 = fmul fast float %5880, %5876
  %5883 = fmul fast float %5880, %5877
  %5884 = fmul fast float %5880, %5878
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %5881)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %5882)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %5883)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %5884)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!33}
!dx.entryPoints = !{!34}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !21, !24}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2DArray<float>"* undef, !"", i32 0, i32 5, i32 1, i32 7, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!14 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!15 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!16 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!17 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!18 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!19 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!20 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!21 = !{!22, !23}
!22 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5484, null}
!23 = !{i32 1, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 1, i32 1, i32 160, null}
!24 = !{!25, !26, !27, !28, !29, !30, !31, !32}
!25 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!26 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!27 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!28 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!29 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!30 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!31 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!32 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 7, i32 1, i32 0, null}
!33 = !{[10 x i32] [i32 8, i32 4, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 0, i32 0]}
!34 = !{void ()* @DeferredLightPixelMain, !"DeferredLightPixelMain", !35, !4, !45}
!35 = !{!36, !42, null}
!36 = !{!37, !40}
!37 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !38, i8 2, i32 1, i8 4, i32 0, i8 0, !39}
!38 = !{i32 0}
!39 = !{i32 3, i32 11}
!40 = !{i32 1, !"SV_Position", i8 9, i8 3, !38, i8 4, i32 1, i8 4, i32 1, i8 0, !41}
!41 = !{i32 3, i32 3}
!42 = !{!43}
!43 = !{i32 0, !"SV_Target", i8 9, i8 16, !38, i8 0, i32 1, i8 4, i32 0, i8 0, !44}
!44 = !{i32 3, i32 15}
!45 = !{i32 5, !38}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 1}
