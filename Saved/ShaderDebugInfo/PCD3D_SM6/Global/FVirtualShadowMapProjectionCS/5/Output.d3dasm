;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 5c948b2fe59b98d5b5a71bfdb1df8617
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float ScreenRayLength;                        ; Offset:  112
;       int SMRTRayCount;                             ; Offset:  116
;       int SMRTSamplesPerRay;                        ; Offset:  120
;       float SMRTRayLengthScale;                     ; Offset:  124
;       float SMRTCotMaxRayAngleFromLight;            ; Offset:  128
;       float SMRTTexelDitherScale;                   ; Offset:  132
;       float SMRTExtrapolateSlope;                   ; Offset:  136
;       float SMRTMaxSlopeBias;                       ; Offset:  140
;       uint SMRTAdaptiveRayCount;                    ; Offset:  144
;       int4 ProjectionRect;                          ; Offset:  160
;       float NormalBias;                             ; Offset:  176
;       float SubsurfaceMinSourceRadius;              ; Offset:  180
;       uint InputType;                               ; Offset:  184
;       uint bCullBackfacingPixels;                   ; Offset:  188
;       float3 Light_TranslatedWorldPosition;         ; Offset:  224
;       float Light_InvRadius;                        ; Offset:  236
;       float3 Light_Color;                           ; Offset:  240
;       float Light_FalloffExponent;                  ; Offset:  252
;       float3 Light_Direction;                       ; Offset:  256
;       float Light_SpecularScale;                    ; Offset:  268
;       float3 Light_Tangent;                         ; Offset:  272
;       float Light_SourceRadius;                     ; Offset:  284
;       float2 Light_SpotAngles;                      ; Offset:  288
;       float Light_SoftSourceRadius;                 ; Offset:  296
;       float Light_SourceLength;                     ; Offset:  300
;       float Light_RectLightBarnCosAngle;            ; Offset:  304
;       float Light_RectLightBarnLength;              ; Offset:  308
;       float2 Light_RectLightAtlasUVOffset;          ; Offset:  312
;       float2 Light_RectLightAtlasUVScale;           ; Offset:  320
;       float Light_RectLightAtlasMaxLevel;           ; Offset:  328
;       int LightUniformVirtualShadowMapId;           ; Offset:  336
;       int VisualizeModeId;                          ; Offset:  360
;       int VisualizeVirtualShadowMapId;              ; Offset:  364
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   368
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_AllocatedPageCountBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  200
;       uint PrePadding_VirtualVoxel_204;             ; Offset:  204
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  208
;       float PrePadding_VirtualVoxel_212;            ; Offset:  212
;       float PrePadding_VirtualVoxel_216;            ; Offset:  216
;       float PrePadding_VirtualVoxel_220;            ; Offset:  220
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  224
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   228
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB3            cb3     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T3             t3     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T4             t4     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T5             t5     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T6             t6     1
; BlueNoise_ScalarTexture           texture     f32          2d      T7             t7     1
; BlueNoise_Vec2Texture             texture     f32          2d      T8             t8     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf      T9             t9     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T10            t10     1
; VirtualVoxel_PageTexture          texture     u32          3d     T11            t11     1
; HairStrands_HairOnlyDepthTexture   texture     f32          2d     T12            t12     1
; OutShadowFactor                       UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 2> >" = type { <2 x float> }
%_RootShaderParameters = type { float, i32, i32, float, float, float, float, float, i32, <4 x i32>, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32 }
%struct.SamplerState = type { i32 }

define void @VirtualShadowMapProjection() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 13, i32 228 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %21 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 368 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %25 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %26 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %27 = shl i32 %24, 3
  %28 = shl i32 %25, 3
  %29 = and i32 %26, 1431655765
  %30 = lshr i32 %29, 1
  %31 = or i32 %30, %29
  %32 = and i32 %31, 858993459
  %33 = lshr i32 %32, 2
  %34 = or i32 %33, %32
  %35 = and i32 %34, 252645135
  %36 = lshr i32 %35, 4
  %37 = or i32 %36, %35
  %38 = lshr i32 %37, 8
  %39 = and i32 %38, 65280
  %40 = and i32 %37, 255
  %41 = or i32 %39, %40
  %42 = lshr i32 %26, 1
  %43 = and i32 %42, 1431655765
  %44 = lshr i32 %43, 1
  %45 = or i32 %44, %43
  %46 = and i32 %45, 858993459
  %47 = lshr i32 %46, 2
  %48 = or i32 %47, %46
  %49 = and i32 %48, 252645135
  %50 = lshr i32 %49, 4
  %51 = or i32 %50, %49
  %52 = lshr i32 %51, 8
  %53 = and i32 %52, 65280
  %54 = and i32 %51, 255
  %55 = or i32 %53, %54
  %56 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.i32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.i32 %56, 1
  %59 = add i32 %57, %27
  %60 = add i32 %59, %41
  %61 = add i32 %58, %28
  %62 = add i32 %61, %55
  %63 = extractvalue %dx.types.CBufRet.i32 %56, 2
  %64 = extractvalue %dx.types.CBufRet.i32 %56, 3
  %65 = icmp uge i32 %60, %63
  %66 = icmp uge i32 %62, %64
  %67 = or i1 %65, %66
  br i1 %67, label %2351, label %68

; <label>:68                                      ; preds = %0
  %69 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %70 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 %60, i32 %62, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %71 = extractvalue %dx.types.ResRet.f32 %70, 0
  %72 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.i32 %72, 2
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %80

; <label>:75                                      ; preds = %68
  %76 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %77 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %76, i32 0, i32 %60, i32 %62, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %78 = extractvalue %dx.types.ResRet.f32 %77, 0
  %79 = fcmp fast oeq float %78, 0.000000e+00
  br i1 %79, label %2351, label %80

; <label>:80                                      ; preds = %75, %68
  %81 = phi float [ %78, %75 ], [ %71, %68 ]
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = fmul fast float %83, %81
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %86 = fadd fast float %84, %85
  %87 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %88 = fmul fast float %87, %81
  %89 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %90 = fsub fast float %88, %89
  %91 = fdiv fast float 1.000000e+00, %90
  %92 = fadd fast float %86, %91
  %93 = uitofp i32 %60 to float
  %94 = uitofp i32 %62 to float
  %95 = fadd fast float %93, 5.000000e-01
  %96 = fadd fast float %94, 5.000000e-01
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = extractvalue %dx.types.CBufRet.f32 %97, 3
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = extractvalue %dx.types.CBufRet.f32 %102, 3
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = extractvalue %dx.types.CBufRet.f32 %107, 3
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = extractvalue %dx.types.CBufRet.f32 %112, 3
  %117 = fmul fast float %98, %95
  %118 = call float @dx.op.tertiary.f32(i32 46, float %96, float %103, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %81, float %108, float %118)  ; FMad(a,b,c)
  %120 = fadd fast float %119, %113
  %121 = fmul fast float %99, %95
  %122 = call float @dx.op.tertiary.f32(i32 46, float %96, float %104, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.tertiary.f32(i32 46, float %81, float %109, float %122)  ; FMad(a,b,c)
  %124 = fadd fast float %123, %114
  %125 = fmul fast float %100, %95
  %126 = call float @dx.op.tertiary.f32(i32 46, float %96, float %105, float %125)  ; FMad(a,b,c)
  %127 = call float @dx.op.tertiary.f32(i32 46, float %81, float %110, float %126)  ; FMad(a,b,c)
  %128 = fadd fast float %127, %115
  %129 = fmul fast float %101, %95
  %130 = call float @dx.op.tertiary.f32(i32 46, float %96, float %106, float %129)  ; FMad(a,b,c)
  %131 = call float @dx.op.tertiary.f32(i32 46, float %81, float %111, float %130)  ; FMad(a,b,c)
  %132 = fadd fast float %131, %116
  %133 = fdiv fast float %120, %132
  %134 = fdiv fast float %124, %132
  %135 = fdiv fast float %128, %132
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 284)  ; CBufferLoadLegacy(handle,regIndex)
  %139 = extractvalue %dx.types.CBufRet.f32 %138, 1
  %140 = fmul fast float %137, %92
  %141 = fmul fast float %140, %139
  %142 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.i32 %142, 1
  %144 = uitofp i32 %143 to float
  %145 = fmul fast float %144, 0x4040551EC0000000
  %146 = fmul fast float %144, 0x4027A147A0000000
  %147 = fadd fast float %145, %95
  %148 = fadd fast float %146, %96
  %149 = call float @dx.op.dot2.f32(i32 54, float %147, float %148, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %150 = call float @dx.op.unary.f32(i32 22, float %149)  ; Frc(value)
  %151 = fmul fast float %150, 0x404A7DD040000000
  %152 = call float @dx.op.unary.f32(i32 22, float %151)  ; Frc(value)
  %153 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %154 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %153, i32 0, i32 %60, i32 %62, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %155 = extractvalue %dx.types.ResRet.f32 %154, 0
  %156 = extractvalue %dx.types.ResRet.f32 %154, 1
  %157 = extractvalue %dx.types.ResRet.f32 %154, 2
  %158 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %159 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %158, i32 0, i32 %60, i32 %62, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %160 = extractvalue %dx.types.ResRet.f32 %159, 3
  %161 = fmul fast float %160, 2.550000e+02
  %162 = fadd fast float %161, 5.000000e-01
  %163 = fptoui float %162 to i32
  %164 = and i32 %163, 15
  %165 = fmul fast float %155, 2.000000e+00
  %166 = fmul fast float %156, 2.000000e+00
  %167 = fmul fast float %157, 2.000000e+00
  %168 = fadd fast float %165, -1.000000e+00
  %169 = fadd fast float %166, -1.000000e+00
  %170 = fadd fast float %167, -1.000000e+00
  %171 = call float @dx.op.dot3.f32(i32 55, float %168, float %169, float %170, float %168, float %169, float %170)  ; Dot3(ax,ay,az,bx,by,bz)
  %172 = call float @dx.op.unary.f32(i32 25, float %171)  ; Rsqrt(value)
  %173 = fmul fast float %172, %168
  %174 = fmul fast float %172, %169
  %175 = fmul fast float %172, %170
  %176 = icmp ne i32 %164, 0
  %177 = icmp eq i32 %164, 7
  %178 = and i32 %163, 14
  %179 = icmp eq i32 %178, 2
  %180 = add nsw i32 %164, -5
  %181 = icmp ult i32 %180, 3
  %182 = or i1 %179, %181
  %183 = icmp eq i32 %164, 9
  %184 = or i1 %183, %182
  %185 = xor i1 %74, true
  %186 = icmp eq i32 %164, 6
  %187 = or i1 %179, %186
  %188 = and i1 %187, %185
  br i1 %188, label %189, label %205

; <label>:189                                     ; preds = %80
  %190 = icmp eq i32 %178, 8
  %191 = and i32 %163, 12
  %192 = icmp eq i32 %191, 4
  %193 = or i1 %192, %179
  %194 = or i1 %190, %193
  %195 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %196 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %195, i32 0, i32 %60, i32 %62, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %197 = extractvalue %dx.types.ResRet.f32 %196, 3
  %198 = select i1 %194, float %197, float 0.000000e+00
  %199 = call float @dx.op.binary.f32(i32 36, float %198, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %200 = call float @dx.op.binary.f32(i32 36, float %199, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %201 = fsub fast float 1.000000e+00, %200
  %202 = call float @dx.op.unary.f32(i32 23, float %201)  ; Log(value)
  %203 = fmul fast float %202, 0xBFA1BE9C00000000
  %204 = fmul float %203, 0xBFF7154760000000
  br label %205

; <label>:205                                     ; preds = %189, %80
  %206 = phi float [ -0.000000e+00, %80 ], [ %204, %189 ]
  %207 = phi float [ 1.000000e+00, %80 ], [ %199, %189 ]
  %208 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %209 = extractvalue %dx.types.CBufRet.i32 %208, 0
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 2
  %214 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %215 = extractvalue %dx.types.CBufRet.f32 %214, 3
  %216 = fcmp fast olt float %207, 1.000000e+00
  br i1 %216, label %217, label %223

; <label>:217                                     ; preds = %205
  %218 = fsub fast float 1.000000e+00, %207
  %219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %220 = extractvalue %dx.types.CBufRet.f32 %219, 1
  %221 = fmul fast float %220, %218
  %222 = call float @dx.op.binary.f32(i32 35, float %215, float %221)  ; FMax(a,b)
  br label %223

; <label>:223                                     ; preds = %217, %205
  %224 = phi float [ %222, %217 ], [ %215, %205 ]
  %225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %226 = extractvalue %dx.types.CBufRet.f32 %225, 0
  %227 = extractvalue %dx.types.CBufRet.f32 %225, 1
  %228 = extractvalue %dx.types.CBufRet.f32 %225, 2
  %229 = fsub fast float %133, %226
  %230 = fsub fast float %134, %227
  %231 = fsub fast float %135, %228
  %232 = fmul fast float %229, %229
  %233 = fmul fast float %230, %230
  %234 = fadd fast float %232, %233
  %235 = fmul fast float %231, %231
  %236 = fadd fast float %234, %235
  %237 = call float @dx.op.unary.f32(i32 24, float %236)  ; Sqrt(value)
  %238 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %239 = extractvalue %dx.types.CBufRet.f32 %238, 0
  %240 = fmul fast float %239, %237
  %241 = extractvalue %dx.types.CBufRet.f32 %138, 2
  %242 = fdiv fast float %240, %241
  %243 = call float @dx.op.binary.f32(i32 35, float 0x3F947AE140000000, float %242)  ; FMax(a,b)
  %244 = or i1 %176, %74
  br i1 %244, label %245, label %2322

; <label>:245                                     ; preds = %223
  %246 = extractvalue %dx.types.CBufRet.i32 %72, 3
  %247 = icmp eq i32 %246, 0
  %248 = or i1 %74, %247
  %249 = or i1 %184, %248
  %250 = or i1 %177, %74
  %251 = select i1 %250, float %211, float %173
  %252 = select i1 %250, float %212, float %174
  %253 = select i1 %250, float %213, float %175
  %254 = fmul fast float %243, %251
  %255 = fmul fast float %243, %252
  %256 = fmul fast float %243, %253
  %257 = fadd fast float %254, %133
  %258 = fadd fast float %255, %134
  %259 = fadd fast float %256, %135
  %260 = xor i1 %74, true
  %261 = fcmp fast ogt float %141, 0.000000e+00
  %262 = and i1 %261, %260
  br i1 %262, label %263, label %400

; <label>:263                                     ; preds = %245
  %264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.f32 %264, 0
  %266 = extractvalue %dx.types.CBufRet.f32 %264, 1
  %267 = extractvalue %dx.types.CBufRet.f32 %264, 2
  %268 = extractvalue %dx.types.CBufRet.f32 %264, 3
  %269 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %270 = extractvalue %dx.types.CBufRet.f32 %269, 0
  %271 = extractvalue %dx.types.CBufRet.f32 %269, 1
  %272 = extractvalue %dx.types.CBufRet.f32 %269, 2
  %273 = extractvalue %dx.types.CBufRet.f32 %269, 3
  %274 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %275 = extractvalue %dx.types.CBufRet.f32 %274, 0
  %276 = extractvalue %dx.types.CBufRet.f32 %274, 1
  %277 = extractvalue %dx.types.CBufRet.f32 %274, 2
  %278 = extractvalue %dx.types.CBufRet.f32 %274, 3
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 0
  %281 = extractvalue %dx.types.CBufRet.f32 %279, 1
  %282 = extractvalue %dx.types.CBufRet.f32 %279, 2
  %283 = extractvalue %dx.types.CBufRet.f32 %279, 3
  %284 = fmul fast float %265, %257
  %285 = call float @dx.op.tertiary.f32(i32 46, float %258, float %270, float %284)  ; FMad(a,b,c)
  %286 = call float @dx.op.tertiary.f32(i32 46, float %259, float %275, float %285)  ; FMad(a,b,c)
  %287 = fadd fast float %286, %280
  %288 = fmul fast float %266, %257
  %289 = call float @dx.op.tertiary.f32(i32 46, float %258, float %271, float %288)  ; FMad(a,b,c)
  %290 = call float @dx.op.tertiary.f32(i32 46, float %259, float %276, float %289)  ; FMad(a,b,c)
  %291 = fadd fast float %290, %281
  %292 = fmul fast float %267, %257
  %293 = call float @dx.op.tertiary.f32(i32 46, float %258, float %272, float %292)  ; FMad(a,b,c)
  %294 = call float @dx.op.tertiary.f32(i32 46, float %259, float %277, float %293)  ; FMad(a,b,c)
  %295 = fadd fast float %294, %282
  %296 = fmul fast float %268, %257
  %297 = call float @dx.op.tertiary.f32(i32 46, float %258, float %273, float %296)  ; FMad(a,b,c)
  %298 = call float @dx.op.tertiary.f32(i32 46, float %259, float %278, float %297)  ; FMad(a,b,c)
  %299 = fadd fast float %298, %283
  %300 = fmul fast float %211, %141
  %301 = fmul fast float %212, %141
  %302 = fmul fast float %213, %141
  %303 = fmul fast float %265, %300
  %304 = call float @dx.op.tertiary.f32(i32 46, float %301, float %270, float %303)  ; FMad(a,b,c)
  %305 = call float @dx.op.tertiary.f32(i32 46, float %302, float %275, float %304)  ; FMad(a,b,c)
  %306 = fmul fast float %266, %300
  %307 = call float @dx.op.tertiary.f32(i32 46, float %301, float %271, float %306)  ; FMad(a,b,c)
  %308 = call float @dx.op.tertiary.f32(i32 46, float %302, float %276, float %307)  ; FMad(a,b,c)
  %309 = fmul fast float %267, %300
  %310 = call float @dx.op.tertiary.f32(i32 46, float %301, float %272, float %309)  ; FMad(a,b,c)
  %311 = call float @dx.op.tertiary.f32(i32 46, float %302, float %277, float %310)  ; FMad(a,b,c)
  %312 = fmul fast float %268, %300
  %313 = call float @dx.op.tertiary.f32(i32 46, float %301, float %273, float %312)  ; FMad(a,b,c)
  %314 = call float @dx.op.tertiary.f32(i32 46, float %302, float %278, float %313)  ; FMad(a,b,c)
  %315 = fadd fast float %305, %287
  %316 = fadd fast float %308, %291
  %317 = fadd fast float %311, %295
  %318 = fadd fast float %314, %299
  %319 = fdiv fast float %287, %299
  %320 = fdiv fast float %291, %299
  %321 = fdiv fast float %295, %299
  %322 = fdiv fast float %315, %318
  %323 = fdiv fast float %316, %318
  %324 = fdiv fast float %317, %318
  %325 = fsub fast float %322, %319
  %326 = fsub fast float %323, %320
  %327 = fsub fast float %324, %321
  %328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %329 = extractvalue %dx.types.CBufRet.f32 %328, 0
  %330 = extractvalue %dx.types.CBufRet.f32 %328, 1
  %331 = fmul fast float %329, %319
  %332 = fmul fast float %330, %320
  %333 = extractvalue %dx.types.CBufRet.f32 %328, 2
  %334 = extractvalue %dx.types.CBufRet.f32 %328, 3
  %335 = fadd fast float %331, %334
  %336 = fadd fast float %332, %333
  %337 = fmul fast float %329, %325
  %338 = fmul fast float %330, %326
  %339 = fadd fast float %152, -5.000000e-01
  %340 = fmul fast float %339, 2.500000e-01
  %341 = fadd fast float %340, 2.500000e-01
  %342 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %343 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %69, %dx.types.Handle %342, float %335, float %336, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %344 = extractvalue %dx.types.ResRet.f32 %343, 0
  %345 = fmul fast float %337, %341
  %346 = fmul fast float %338, %341
  %347 = fmul fast float %327, %341
  %348 = fadd fast float %345, %335
  %349 = fadd fast float %346, %336
  %350 = fadd fast float %347, %321
  %351 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %69, %dx.types.Handle %342, float %348, float %349, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %352 = extractvalue %dx.types.ResRet.f32 %351, 0
  %353 = fcmp fast une float %352, %344
  %354 = fcmp fast olt float %350, %352
  %355 = and i1 %353, %354
  br i1 %355, label %395, label %356

; <label>:356                                     ; preds = %263
  %357 = fadd fast float %340, 5.000000e-01
  %358 = fmul fast float %337, %357
  %359 = fmul fast float %338, %357
  %360 = fmul fast float %327, %357
  %361 = fadd fast float %358, %335
  %362 = fadd fast float %359, %336
  %363 = fadd fast float %360, %321
  %364 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %69, %dx.types.Handle %342, float %361, float %362, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %365 = extractvalue %dx.types.ResRet.f32 %364, 0
  %366 = fcmp fast une float %365, %344
  %367 = fcmp fast olt float %363, %365
  %368 = and i1 %366, %367
  br i1 %368, label %395, label %369

; <label>:369                                     ; preds = %356
  %370 = fadd fast float %340, 7.500000e-01
  %371 = fmul fast float %337, %370
  %372 = fmul fast float %338, %370
  %373 = fmul fast float %327, %370
  %374 = fadd fast float %371, %335
  %375 = fadd fast float %372, %336
  %376 = fadd fast float %373, %321
  %377 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %69, %dx.types.Handle %342, float %374, float %375, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %378 = extractvalue %dx.types.ResRet.f32 %377, 0
  %379 = fcmp fast une float %378, %344
  %380 = fcmp fast olt float %376, %378
  %381 = and i1 %379, %380
  br i1 %381, label %395, label %382

; <label>:382                                     ; preds = %369
  %383 = fadd fast float %340, 1.000000e+00
  %384 = fmul fast float %337, %383
  %385 = fmul fast float %338, %383
  %386 = fmul fast float %327, %383
  %387 = fadd fast float %384, %335
  %388 = fadd fast float %385, %336
  %389 = fadd fast float %386, %321
  %390 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %69, %dx.types.Handle %342, float %387, float %388, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %391 = extractvalue %dx.types.ResRet.f32 %390, 0
  %392 = fcmp fast une float %391, %344
  %393 = fcmp fast olt float %389, %391
  %394 = and i1 %392, %393
  br i1 %394, label %395, label %400

; <label>:395                                     ; preds = %382, %369, %356, %263
  %396 = phi float [ %341, %263 ], [ %357, %356 ], [ %370, %369 ], [ %383, %382 ]
  %397 = fadd fast float %396, -3.750000e-01
  %398 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %397)  ; FMax(a,b)
  %399 = fmul fast float %398, %141
  br label %400

; <label>:400                                     ; preds = %395, %382, %245
  %401 = phi float [ %141, %245 ], [ %399, %395 ], [ %141, %382 ]
  %402 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %403 = extractvalue %dx.types.CBufRet.i32 %402, 1
  %404 = icmp sgt i32 %403, 0
  %405 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %406 = extractvalue %dx.types.CBufRet.f32 %405, 0
  %407 = extractvalue %dx.types.CBufRet.f32 %405, 1
  %408 = extractvalue %dx.types.CBufRet.f32 %405, 2
  %409 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %410 = extractvalue %dx.types.CBufRet.f32 %409, 0
  %411 = extractvalue %dx.types.CBufRet.f32 %409, 1
  %412 = extractvalue %dx.types.CBufRet.f32 %409, 2
  %413 = fsub fast float %257, %410
  %414 = fsub fast float %258, %411
  %415 = fsub fast float %259, %412
  br i1 %404, label %416, label %1163

; <label>:416                                     ; preds = %400
  %417 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %418 = extractvalue %dx.types.CBufRet.i32 %417, 0
  %419 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %420 = extractvalue %dx.types.CBufRet.f32 %419, 1
  %421 = extractvalue %dx.types.CBufRet.f32 %136, 3
  %422 = extractvalue %dx.types.CBufRet.i32 %402, 2
  %423 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %424 = extractvalue %dx.types.CBufRet.f32 %423, 0
  %425 = extractvalue %dx.types.CBufRet.f32 %423, 1
  %426 = extractvalue %dx.types.CBufRet.f32 %423, 2
  %427 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %428 = extractvalue %dx.types.CBufRet.f32 %427, 0
  %429 = extractvalue %dx.types.CBufRet.f32 %427, 1
  %430 = extractvalue %dx.types.CBufRet.f32 %427, 2
  %431 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %432 = extractvalue %dx.types.CBufRet.f32 %431, 0
  %433 = extractvalue %dx.types.CBufRet.f32 %431, 1
  %434 = extractvalue %dx.types.CBufRet.f32 %431, 2
  %435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %436 = extractvalue %dx.types.CBufRet.f32 %435, 0
  %437 = extractvalue %dx.types.CBufRet.f32 %435, 1
  %438 = extractvalue %dx.types.CBufRet.f32 %435, 2
  %439 = fmul fast float %424, %257
  %440 = call float @dx.op.tertiary.f32(i32 46, float %258, float %428, float %439)  ; FMad(a,b,c)
  %441 = call float @dx.op.tertiary.f32(i32 46, float %259, float %432, float %440)  ; FMad(a,b,c)
  %442 = fadd fast float %441, %436
  %443 = fmul fast float %425, %257
  %444 = call float @dx.op.tertiary.f32(i32 46, float %258, float %429, float %443)  ; FMad(a,b,c)
  %445 = call float @dx.op.tertiary.f32(i32 46, float %259, float %433, float %444)  ; FMad(a,b,c)
  %446 = fadd fast float %445, %437
  %447 = fmul fast float %426, %257
  %448 = call float @dx.op.tertiary.f32(i32 46, float %258, float %430, float %447)  ; FMad(a,b,c)
  %449 = call float @dx.op.tertiary.f32(i32 46, float %259, float %434, float %448)  ; FMad(a,b,c)
  %450 = fadd fast float %449, %438
  %451 = fmul fast float %442, %442
  %452 = fmul fast float %446, %446
  %453 = fadd fast float %452, %451
  %454 = fmul fast float %450, %450
  %455 = fadd fast float %453, %454
  %456 = call float @dx.op.unary.f32(i32 24, float %455)  ; Sqrt(value)
  br i1 %249, label %463, label %457

; <label>:457                                     ; preds = %416
  %458 = call float @dx.op.unary.f32(i32 6, float %224)  ; FAbs(value)
  %459 = call float @dx.op.binary.f32(i32 35, float %458, float 0x3FB99999A0000000)  ; FMax(a,b)
  %460 = call float @dx.op.dot3.f32(i32 55, float %251, float %252, float %253, float %211, float %212, float %213)  ; Dot3(ax,ay,az,bx,by,bz)
  %461 = fsub fast float -0.000000e+00, %459
  %462 = fcmp fast olt float %460, %461
  br i1 %462, label %1821, label %463

; <label>:463                                     ; preds = %457, %416
  %464 = mul i32 %209, 336
  %465 = add i32 %464, 256
  %466 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %467 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %465, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %468 = extractvalue %dx.types.ResRet.i32 %467, 0
  %469 = extractvalue %dx.types.ResRet.i32 %467, 1
  %470 = extractvalue %dx.types.ResRet.i32 %467, 2
  %471 = bitcast i32 %468 to float
  %472 = bitcast i32 %469 to float
  %473 = bitcast i32 %470 to float
  %474 = add i32 %464, 288
  %475 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %474, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %476 = extractvalue %dx.types.ResRet.i32 %475, 0
  %477 = extractvalue %dx.types.ResRet.i32 %475, 1
  %478 = extractvalue %dx.types.ResRet.i32 %475, 2
  %479 = bitcast i32 %476 to float
  %480 = bitcast i32 %477 to float
  %481 = bitcast i32 %478 to float
  %482 = add i32 %464, 312
  %483 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %482, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %484 = extractvalue %dx.types.ResRet.i32 %483, 0
  %485 = fadd fast float %471, %406
  %486 = fadd fast float %472, %407
  %487 = fadd fast float %473, %408
  %488 = fmul fast float %485, 2.097152e+06
  %489 = fmul fast float %486, 2.097152e+06
  %490 = fmul fast float %487, 2.097152e+06
  %491 = fadd fast float %488, %413
  %492 = fadd fast float %491, %479
  %493 = fadd fast float %489, %414
  %494 = fadd fast float %493, %480
  %495 = fadd fast float %490, %415
  %496 = fadd fast float %495, %481
  %497 = fmul fast float %492, %492
  %498 = fmul fast float %494, %494
  %499 = fadd fast float %497, %498
  %500 = fmul fast float %496, %496
  %501 = fadd fast float %499, %500
  %502 = call float @dx.op.unary.f32(i32 24, float %501)  ; Sqrt(value)
  %503 = call float @dx.op.unary.f32(i32 23, float %502)  ; Log(value)
  %504 = call float @dx.op.unary.f32(i32 27, float %503)  ; Round_ni(value)
  %505 = fptosi float %504 to i32
  %506 = sub nsw i32 %505, %484
  %507 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %506)  ; IMax(a,b)
  %508 = add i32 %507, %209
  %509 = mul i32 %508, 336
  %510 = add i32 %509, 128
  %511 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %510, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %512 = extractvalue %dx.types.ResRet.i32 %511, 0
  %513 = extractvalue %dx.types.ResRet.i32 %511, 1
  %514 = bitcast i32 %512 to float
  %515 = bitcast i32 %513 to float
  %516 = add i32 %509, 144
  %517 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %516, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %518 = extractvalue %dx.types.ResRet.i32 %517, 0
  %519 = extractvalue %dx.types.ResRet.i32 %517, 1
  %520 = bitcast i32 %518 to float
  %521 = bitcast i32 %519 to float
  %522 = add i32 %509, 160
  %523 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %522, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %524 = extractvalue %dx.types.ResRet.i32 %523, 0
  %525 = extractvalue %dx.types.ResRet.i32 %523, 1
  %526 = bitcast i32 %524 to float
  %527 = bitcast i32 %525 to float
  %528 = add i32 %509, 176
  %529 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %528, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %530 = extractvalue %dx.types.ResRet.i32 %529, 0
  %531 = extractvalue %dx.types.ResRet.i32 %529, 1
  %532 = bitcast i32 %530 to float
  %533 = bitcast i32 %531 to float
  %534 = add i32 %509, 256
  %535 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %534, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %536 = extractvalue %dx.types.ResRet.i32 %535, 0
  %537 = extractvalue %dx.types.ResRet.i32 %535, 1
  %538 = extractvalue %dx.types.ResRet.i32 %535, 2
  %539 = bitcast i32 %536 to float
  %540 = bitcast i32 %537 to float
  %541 = bitcast i32 %538 to float
  %542 = add i32 %509, 272
  %543 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %542, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %544 = extractvalue %dx.types.ResRet.i32 %543, 0
  %545 = extractvalue %dx.types.ResRet.i32 %543, 1
  %546 = extractvalue %dx.types.ResRet.i32 %543, 2
  %547 = bitcast i32 %544 to float
  %548 = bitcast i32 %545 to float
  %549 = bitcast i32 %546 to float
  %550 = fadd fast float %539, %406
  %551 = fadd fast float %540, %407
  %552 = fadd fast float %541, %408
  %553 = fmul fast float %550, 2.097152e+06
  %554 = fmul fast float %551, 2.097152e+06
  %555 = fmul fast float %552, 2.097152e+06
  %556 = fadd fast float %553, %413
  %557 = fadd fast float %556, %547
  %558 = fadd fast float %554, %414
  %559 = fadd fast float %558, %548
  %560 = fadd fast float %555, %415
  %561 = fadd fast float %560, %549
  %562 = fmul fast float %557, %514
  %563 = call float @dx.op.tertiary.f32(i32 46, float %559, float %520, float %562)  ; FMad(a,b,c)
  %564 = call float @dx.op.tertiary.f32(i32 46, float %561, float %526, float %563)  ; FMad(a,b,c)
  %565 = fadd fast float %564, %532
  %566 = fmul fast float %557, %515
  %567 = call float @dx.op.tertiary.f32(i32 46, float %559, float %521, float %566)  ; FMad(a,b,c)
  %568 = call float @dx.op.tertiary.f32(i32 46, float %561, float %527, float %567)  ; FMad(a,b,c)
  %569 = fadd fast float %568, %533
  %570 = fmul fast float %565, 1.280000e+02
  %571 = fmul fast float %569, 1.280000e+02
  %572 = fptoui float %570 to i32
  %573 = fptoui float %571 to i32
  %574 = icmp ult i32 %508, 8192
  br i1 %574, label %581, label %575

; <label>:575                                     ; preds = %463
  %576 = mul i32 %508, 21845
  %577 = shl i32 %573, 7
  %578 = add i32 %576, -178946048
  %579 = add i32 %578, %572
  %580 = add i32 %579, %577
  br label %581

; <label>:581                                     ; preds = %575, %463
  %582 = phi i32 [ %580, %575 ], [ %508, %463 ]
  %583 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %584 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %583, i32 %582, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %585 = extractvalue %dx.types.ResRet.i32 %584, 0
  %586 = lshr i32 %585, 20
  %587 = and i32 %586, 63
  %588 = and i32 %585, 134217728
  %589 = icmp eq i32 %588, 0
  br i1 %589, label %635, label %590

; <label>:590                                     ; preds = %581
  %591 = icmp eq i32 %587, 0
  %592 = zext i1 %591 to i32
  %593 = add i32 %587, %508
  br i1 %591, label %631, label %594

; <label>:594                                     ; preds = %590
  %595 = add i32 %509, 304
  %596 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %595, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %597 = mul i32 %593, 336
  %598 = add i32 %597, 304
  %599 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %598, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %600 = icmp ult i32 %593, 8192
  br i1 %600, label %624, label %601

; <label>:601                                     ; preds = %594
  %602 = extractvalue %dx.types.ResRet.i32 %596, 1
  %603 = shl i32 %602, 5
  %604 = sub i32 %573, %603
  %605 = extractvalue %dx.types.ResRet.i32 %599, 1
  %606 = shl i32 %605, 5
  %607 = and i32 %586, 31
  %608 = shl i32 %606, %607
  %609 = add i32 %604, %608
  %610 = lshr i32 %609, %607
  %611 = extractvalue %dx.types.ResRet.i32 %596, 0
  %612 = shl i32 %611, 5
  %613 = sub i32 %572, %612
  %614 = extractvalue %dx.types.ResRet.i32 %599, 0
  %615 = shl i32 %614, 5
  %616 = shl i32 %615, %607
  %617 = add i32 %613, %616
  %618 = lshr i32 %617, %607
  %619 = mul i32 %593, 21845
  %620 = shl i32 %610, 7
  %621 = add i32 %619, -178946048
  %622 = add i32 %621, %618
  %623 = add i32 %622, %620
  br label %624

; <label>:624                                     ; preds = %601, %594
  %625 = phi i32 [ %623, %601 ], [ %593, %594 ]
  %626 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %583, i32 %625, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %627 = extractvalue %dx.types.ResRet.i32 %626, 0
  %628 = and i32 %627, 200278016
  %629 = icmp eq i32 %628, 134217728
  %630 = zext i1 %629 to i32
  br label %631

; <label>:631                                     ; preds = %624, %590
  %632 = phi i32 [ %630, %624 ], [ %592, %590 ]
  %633 = icmp ne i32 %632, 0
  %634 = select i1 %633, i32 %593, i32 -1
  br label %635

; <label>:635                                     ; preds = %631, %581
  %636 = phi i32 [ 0, %581 ], [ %632, %631 ]
  %637 = phi i32 [ -1, %581 ], [ %634, %631 ]
  %638 = icmp ne i32 %636, 0
  %639 = icmp sgt i32 %637, %508
  %640 = and i1 %638, %639
  %641 = select i1 %640, i32 %637, i32 %508
  %642 = mul i32 %641, 336
  %643 = add i32 %642, 96
  %644 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %643, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %645 = extractvalue %dx.types.ResRet.i32 %644, 2
  %646 = bitcast i32 %645 to float
  %647 = add i32 %642, 128
  %648 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %647, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %649 = extractvalue %dx.types.ResRet.i32 %648, 0
  %650 = extractvalue %dx.types.ResRet.i32 %648, 1
  %651 = extractvalue %dx.types.ResRet.i32 %648, 2
  %652 = bitcast i32 %649 to float
  %653 = bitcast i32 %650 to float
  %654 = bitcast i32 %651 to float
  %655 = add i32 %642, 144
  %656 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %655, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %657 = extractvalue %dx.types.ResRet.i32 %656, 0
  %658 = extractvalue %dx.types.ResRet.i32 %656, 1
  %659 = extractvalue %dx.types.ResRet.i32 %656, 2
  %660 = bitcast i32 %657 to float
  %661 = bitcast i32 %658 to float
  %662 = bitcast i32 %659 to float
  %663 = add i32 %642, 160
  %664 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %663, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %665 = extractvalue %dx.types.ResRet.i32 %664, 0
  %666 = extractvalue %dx.types.ResRet.i32 %664, 1
  %667 = extractvalue %dx.types.ResRet.i32 %664, 2
  %668 = bitcast i32 %665 to float
  %669 = bitcast i32 %666 to float
  %670 = bitcast i32 %667 to float
  %671 = add i32 %642, 176
  %672 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %671, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %673 = extractvalue %dx.types.ResRet.i32 %672, 0
  %674 = extractvalue %dx.types.ResRet.i32 %672, 1
  %675 = extractvalue %dx.types.ResRet.i32 %672, 2
  %676 = bitcast i32 %673 to float
  %677 = bitcast i32 %674 to float
  %678 = bitcast i32 %675 to float
  %679 = add i32 %642, 192
  %680 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %679, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %681 = extractvalue %dx.types.ResRet.i32 %680, 0
  %682 = extractvalue %dx.types.ResRet.i32 %680, 1
  %683 = extractvalue %dx.types.ResRet.i32 %680, 2
  %684 = bitcast i32 %681 to float
  %685 = bitcast i32 %682 to float
  %686 = bitcast i32 %683 to float
  %687 = add i32 %642, 208
  %688 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %687, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %689 = extractvalue %dx.types.ResRet.i32 %688, 0
  %690 = extractvalue %dx.types.ResRet.i32 %688, 1
  %691 = extractvalue %dx.types.ResRet.i32 %688, 2
  %692 = bitcast i32 %689 to float
  %693 = bitcast i32 %690 to float
  %694 = bitcast i32 %691 to float
  %695 = add i32 %642, 224
  %696 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %695, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %697 = extractvalue %dx.types.ResRet.i32 %696, 0
  %698 = extractvalue %dx.types.ResRet.i32 %696, 1
  %699 = extractvalue %dx.types.ResRet.i32 %696, 2
  %700 = bitcast i32 %697 to float
  %701 = bitcast i32 %698 to float
  %702 = bitcast i32 %699 to float
  %703 = add i32 %642, 256
  %704 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %703, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %705 = extractvalue %dx.types.ResRet.i32 %704, 0
  %706 = extractvalue %dx.types.ResRet.i32 %704, 1
  %707 = extractvalue %dx.types.ResRet.i32 %704, 2
  %708 = bitcast i32 %705 to float
  %709 = bitcast i32 %706 to float
  %710 = bitcast i32 %707 to float
  %711 = add i32 %642, 272
  %712 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %711, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %713 = extractvalue %dx.types.ResRet.i32 %712, 0
  %714 = extractvalue %dx.types.ResRet.i32 %712, 1
  %715 = extractvalue %dx.types.ResRet.i32 %712, 2
  %716 = bitcast i32 %713 to float
  %717 = bitcast i32 %714 to float
  %718 = bitcast i32 %715 to float
  %719 = fcmp fast ogt float %420, 0.000000e+00
  br i1 %719, label %720, label %734

; <label>:720                                     ; preds = %635
  %721 = add i32 %642, 312
  %722 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %721, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %723 = extractvalue %dx.types.ResRet.i32 %722, 0
  %724 = add i32 %642, 300
  %725 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %466, i32 %724, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %726 = extractvalue %dx.types.ResRet.i32 %725, 0
  %727 = bitcast i32 %726 to float
  %728 = fmul fast float %420, 0x3F00000000000000
  %729 = fmul fast float %728, %456
  %730 = sitofp i32 %723 to float
  %731 = fsub fast float %730, %727
  %732 = call float @dx.op.unary.f32(i32 21, float %731)  ; Exp(value)
  %733 = fdiv fast float %729, %732
  br label %734

; <label>:734                                     ; preds = %720, %635
  %735 = phi float [ %733, %720 ], [ 0.000000e+00, %635 ]
  %736 = fmul fast float %684, %251
  %737 = call float @dx.op.tertiary.f32(i32 46, float %252, float %692, float %736)  ; FMad(a,b,c)
  %738 = call float @dx.op.tertiary.f32(i32 46, float %253, float %700, float %737)  ; FMad(a,b,c)
  %739 = fmul fast float %685, %251
  %740 = call float @dx.op.tertiary.f32(i32 46, float %252, float %693, float %739)  ; FMad(a,b,c)
  %741 = call float @dx.op.tertiary.f32(i32 46, float %253, float %701, float %740)  ; FMad(a,b,c)
  %742 = fmul fast float %686, %251
  %743 = call float @dx.op.tertiary.f32(i32 46, float %252, float %694, float %742)  ; FMad(a,b,c)
  %744 = call float @dx.op.tertiary.f32(i32 46, float %253, float %702, float %743)  ; FMad(a,b,c)
  %745 = fsub fast float -0.000000e+00, %738
  %746 = fsub fast float -0.000000e+00, %741
  %747 = fdiv fast float %745, %744
  %748 = fdiv fast float %746, %744
  %749 = call float @dx.op.binary.f32(i32 35, float %747, float 0xBFA99999A0000000)  ; FMax(a,b)
  %750 = call float @dx.op.binary.f32(i32 35, float %748, float 0xBFA99999A0000000)  ; FMax(a,b)
  %751 = call float @dx.op.binary.f32(i32 36, float %749, float 0x3FA99999A0000000)  ; FMin(a,b)
  %752 = call float @dx.op.binary.f32(i32 36, float %750, float 0x3FA99999A0000000)  ; FMin(a,b)
  %753 = fmul fast float %456, %421
  %754 = fadd fast float %708, %406
  %755 = fadd fast float %709, %407
  %756 = fadd fast float %710, %408
  %757 = fmul fast float %754, 2.097152e+06
  %758 = fmul fast float %755, 2.097152e+06
  %759 = fmul fast float %756, 2.097152e+06
  %760 = icmp eq i32 %403, 0
  br i1 %760, label %1150, label %761

; <label>:761                                     ; preds = %734
  br label %762

; <label>:762                                     ; preds = %1145, %761
  %763 = phi i32 [ %1132, %1145 ], [ 0, %761 ]
  %764 = phi i32 [ %1146, %1145 ], [ 0, %761 ]
  %765 = phi float [ %1133, %1145 ], [ 0.000000e+00, %761 ]
  %766 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %767 = extractvalue %dx.types.CBufRet.i32 %766, 2
  %768 = uitofp i32 %764 to float
  %769 = fmul fast float %768, 0x3FE827F520000000
  %770 = fmul fast float %768, 0x3FE23C21A0000000
  %771 = call float @dx.op.unary.f32(i32 22, float %769)  ; Frc(value)
  %772 = call float @dx.op.unary.f32(i32 22, float %770)  ; Frc(value)
  %773 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %774 = extractvalue %dx.types.CBufRet.i32 %773, 0
  %775 = extractvalue %dx.types.CBufRet.i32 %773, 1
  %776 = sitofp i32 %774 to float
  %777 = sitofp i32 %775 to float
  %778 = fmul fast float %776, %771
  %779 = fmul fast float %777, %772
  %780 = fptosi float %778 to i32
  %781 = fptosi float %779 to i32
  %782 = add i32 %764, %403
  %783 = uitofp i32 %782 to float
  %784 = fmul fast float %783, 0x3FE827F520000000
  %785 = fmul fast float %783, 0x3FE23C21A0000000
  %786 = call float @dx.op.unary.f32(i32 22, float %784)  ; Frc(value)
  %787 = call float @dx.op.unary.f32(i32 22, float %785)  ; Frc(value)
  %788 = fmul fast float %776, %786
  %789 = fmul fast float %777, %787
  %790 = fptosi float %788 to i32
  %791 = fptosi float %789 to i32
  %792 = add i32 %780, %60
  %793 = add i32 %781, %62
  %794 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %795 = extractvalue %dx.types.CBufRet.i32 %794, 0
  %796 = extractvalue %dx.types.CBufRet.i32 %794, 1
  %797 = extractvalue %dx.types.CBufRet.i32 %794, 2
  %798 = and i32 %792, %795
  %799 = and i32 %793, %796
  %800 = and i32 %797, %767
  %801 = mul i32 %800, %775
  %802 = add i32 %801, %799
  %803 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %804 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %803, i32 0, i32 %798, i32 %802, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %805 = extractvalue %dx.types.ResRet.f32 %804, 0
  %806 = extractvalue %dx.types.ResRet.f32 %804, 1
  %807 = add i32 %790, %60
  %808 = add i32 %791, %62
  %809 = and i32 %795, %807
  %810 = and i32 %796, %808
  %811 = add i32 %801, %810
  %812 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %803, i32 0, i32 %809, i32 %811, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %813 = extractvalue %dx.types.ResRet.f32 %812, 0
  %814 = extractvalue %dx.types.ResRet.f32 %812, 1
  %815 = fmul fast float %805, 2.000000e+00
  %816 = fmul fast float %806, 2.000000e+00
  %817 = fadd fast float %815, 0xBFEFFFFFE0000000
  %818 = fadd fast float %816, 0xBFEFFFFFE0000000
  %819 = call float @dx.op.unary.f32(i32 6, float %817)  ; FAbs(value)
  %820 = call float @dx.op.unary.f32(i32 6, float %818)  ; FAbs(value)
  %821 = call float @dx.op.binary.f32(i32 36, float %819, float %820)  ; FMin(a,b)
  %822 = call float @dx.op.binary.f32(i32 35, float %819, float %820)  ; FMax(a,b)
  %823 = fadd fast float %822, 0x3BF0000000000000
  %824 = fdiv fast float %821, %823
  %825 = fcmp fast oge float %820, %819
  %826 = uitofp i1 %825 to float
  %827 = fmul fast float %826, 2.000000e+00
  %828 = fadd fast float %824, %827
  %829 = fmul fast float %828, 0x3FE921FB60000000
  %830 = call float @dx.op.unary.f32(i32 12, float %829)  ; Cos(value)
  %831 = call float @dx.op.unary.f32(i32 13, float %829)  ; Sin(value)
  %832 = bitcast float %830 to i32
  %833 = bitcast float %831 to i32
  %834 = and i32 %832, 2147483647
  %835 = and i32 %833, 2147483647
  %836 = bitcast float %817 to i32
  %837 = bitcast float %818 to i32
  %838 = and i32 %836, -2147483648
  %839 = and i32 %837, -2147483648
  %840 = or i32 %834, %838
  %841 = or i32 %835, %839
  %842 = bitcast i32 %840 to float
  %843 = bitcast i32 %841 to float
  %844 = fmul fast float %822, %224
  %845 = fmul fast float %844, %842
  %846 = fmul fast float %844, %843
  %847 = call float @dx.op.unary.f32(i32 6, float %211)  ; FAbs(value)
  %848 = fcmp fast ogt float %847, 0x3EB0C6F7A0000000
  %849 = select i1 %848, float 1.000000e+00, float 0.000000e+00
  %850 = select i1 %848, float 0.000000e+00, float 1.000000e+00
  %851 = fmul fast float %213, %850
  %852 = fsub fast float -0.000000e+00, %851
  %853 = fmul fast float %849, %213
  %854 = fmul fast float %850, %211
  %855 = fmul fast float %849, %212
  %856 = fsub fast float %854, %855
  %857 = fmul fast float %853, %213
  %858 = fmul fast float %856, %212
  %859 = fsub fast float %857, %858
  %860 = fmul fast float %856, %211
  %861 = fmul fast float %213, %852
  %862 = fsub fast float %860, %861
  %863 = fmul fast float %212, %852
  %864 = fmul fast float %853, %211
  %865 = fsub fast float %863, %864
  %866 = fmul fast float %845, %852
  %867 = fmul fast float %845, %853
  %868 = fmul fast float %856, %845
  %869 = fmul fast float %859, %846
  %870 = fmul fast float %862, %846
  %871 = fmul fast float %865, %846
  %872 = fadd fast float %866, %211
  %873 = fadd fast float %872, %869
  %874 = fadd fast float %867, %212
  %875 = fadd fast float %874, %870
  %876 = fadd fast float %868, %213
  %877 = fadd fast float %876, %871
  %878 = call float @dx.op.dot3.f32(i32 55, float %873, float %875, float %877, float %873, float %875, float %877)  ; Dot3(ax,ay,az,bx,by,bz)
  %879 = call float @dx.op.unary.f32(i32 25, float %878)  ; Rsqrt(value)
  %880 = fmul fast float %873, %879
  %881 = fmul fast float %875, %879
  %882 = fmul fast float %877, %879
  %883 = fadd fast float %813, -5.000000e-01
  %884 = fadd fast float %814, -5.000000e-01
  %885 = fmul fast float %883, %735
  %886 = fmul fast float %884, %735
  %887 = fmul fast float %880, %401
  %888 = fmul fast float %881, %401
  %889 = fmul fast float %882, %401
  %890 = fadd fast float %757, %413
  %891 = fadd fast float %890, %716
  %892 = fadd fast float %891, %887
  %893 = fadd fast float %758, %414
  %894 = fadd fast float %893, %717
  %895 = fadd fast float %894, %888
  %896 = fadd fast float %759, %415
  %897 = fadd fast float %896, %718
  %898 = fadd fast float %897, %889
  %899 = fmul fast float %880, %753
  %900 = fmul fast float %881, %753
  %901 = fmul fast float %882, %753
  %902 = fmul fast float %892, %652
  %903 = call float @dx.op.tertiary.f32(i32 46, float %895, float %660, float %902)  ; FMad(a,b,c)
  %904 = call float @dx.op.tertiary.f32(i32 46, float %898, float %668, float %903)  ; FMad(a,b,c)
  %905 = fmul fast float %892, %653
  %906 = call float @dx.op.tertiary.f32(i32 46, float %895, float %661, float %905)  ; FMad(a,b,c)
  %907 = call float @dx.op.tertiary.f32(i32 46, float %898, float %669, float %906)  ; FMad(a,b,c)
  %908 = fmul fast float %892, %654
  %909 = call float @dx.op.tertiary.f32(i32 46, float %895, float %662, float %908)  ; FMad(a,b,c)
  %910 = call float @dx.op.tertiary.f32(i32 46, float %898, float %670, float %909)  ; FMad(a,b,c)
  %911 = fadd fast float %910, %678
  %912 = fmul fast float %899, %652
  %913 = call float @dx.op.tertiary.f32(i32 46, float %900, float %660, float %912)  ; FMad(a,b,c)
  %914 = call float @dx.op.tertiary.f32(i32 46, float %901, float %668, float %913)  ; FMad(a,b,c)
  %915 = fmul fast float %899, %653
  %916 = call float @dx.op.tertiary.f32(i32 46, float %900, float %661, float %915)  ; FMad(a,b,c)
  %917 = call float @dx.op.tertiary.f32(i32 46, float %901, float %669, float %916)  ; FMad(a,b,c)
  %918 = fmul fast float %899, %654
  %919 = call float @dx.op.tertiary.f32(i32 46, float %900, float %662, float %918)  ; FMad(a,b,c)
  %920 = call float @dx.op.tertiary.f32(i32 46, float %901, float %670, float %919)  ; FMad(a,b,c)
  %921 = call float @dx.op.dot2.f32(i32 54, float %751, float %752, float %885, float %886)  ; Dot2(ax,ay,bx,by)
  %922 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %921)  ; FMax(a,b)
  %923 = fmul fast float %922, 2.000000e+00
  %924 = fmul fast float %646, %401
  %925 = call float @dx.op.unary.f32(i32 6, float %924)  ; FAbs(value)
  %926 = fsub fast float %923, %925
  %927 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %926)  ; FMax(a,b)
  %928 = fadd fast float %911, %927
  %929 = sitofp i32 %422 to float
  %930 = fdiv fast float -1.000000e+00, %929
  %931 = fsub fast float 1.000000e+00, %152
  %932 = icmp sgt i32 %422, -1
  br i1 %932, label %933, label %1117

; <label>:933                                     ; preds = %762
  br label %934

; <label>:934                                     ; preds = %1109, %933
  %935 = phi float [ %1110, %1109 ], [ -1.000000e+04, %933 ]
  %936 = phi float [ %1111, %1109 ], [ -1.000000e+00, %933 ]
  %937 = phi i32 [ %1112, %1109 ], [ 0, %933 ]
  %938 = icmp eq i32 %937, %422
  br i1 %938, label %945, label %939

; <label>:939                                     ; preds = %934
  %940 = sitofp i32 %937 to float
  %941 = fadd fast float %940, %931
  %942 = fmul fast float %941, %930
  %943 = fadd fast float %942, 1.000000e+00
  %944 = fmul fast float %943, %943
  br label %945

; <label>:945                                     ; preds = %939, %934
  %946 = phi float [ %944, %939 ], [ 0.000000e+00, %934 ]
  %947 = fmul fast float %946, %914
  %948 = fmul fast float %946, %917
  %949 = fmul fast float %946, %920
  %950 = fadd fast float %885, %676
  %951 = fadd fast float %950, %904
  %952 = fadd fast float %951, %947
  %953 = fadd fast float %886, %677
  %954 = fadd fast float %953, %907
  %955 = fadd fast float %954, %948
  %956 = fadd fast float %949, %928
  %957 = fmul fast float %952, 1.280000e+02
  %958 = fmul fast float %955, 1.280000e+02
  %959 = fptoui float %957 to i32
  %960 = fptoui float %958 to i32
  %961 = icmp ult i32 %641, 8192
  br i1 %961, label %968, label %962

; <label>:962                                     ; preds = %945
  %963 = mul i32 %641, 21845
  %964 = shl i32 %960, 7
  %965 = add i32 %963, -178946048
  %966 = add i32 %965, %959
  %967 = add i32 %966, %964
  br label %968

; <label>:968                                     ; preds = %962, %945
  %969 = phi i32 [ %967, %962 ], [ %641, %945 ]
  %970 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %971 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %970, i32 %969, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %972 = extractvalue %dx.types.ResRet.i32 %971, 0
  %973 = lshr i32 %972, 20
  %974 = and i32 %973, 63
  %975 = and i32 %972, 134217728
  %976 = icmp eq i32 %975, 0
  br i1 %976, label %1084, label %977

; <label>:977                                     ; preds = %968
  %978 = icmp eq i32 %974, 0
  %979 = zext i1 %978 to i32
  %980 = add i32 %974, %641
  %981 = fmul fast float %952, 1.638400e+04
  %982 = fmul fast float %955, 1.638400e+04
  %983 = fptoui float %981 to i32
  %984 = fptoui float %982 to i32
  br i1 %978, label %1061, label %985

; <label>:985                                     ; preds = %977
  %986 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %987 = add i32 %642, 112
  %988 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %986, i32 %987, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %989 = extractvalue %dx.types.ResRet.i32 %988, 2
  %990 = bitcast i32 %989 to float
  %991 = add i32 %642, 304
  %992 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %986, i32 %991, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %993 = extractvalue %dx.types.ResRet.i32 %992, 0
  %994 = extractvalue %dx.types.ResRet.i32 %992, 1
  %995 = mul i32 %980, 336
  %996 = add i32 %995, 112
  %997 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %986, i32 %996, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %998 = extractvalue %dx.types.ResRet.i32 %997, 2
  %999 = bitcast i32 %998 to float
  %1000 = add i32 %995, 304
  %1001 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %986, i32 %1000, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1002 = extractvalue %dx.types.ResRet.i32 %1001, 0
  %1003 = extractvalue %dx.types.ResRet.i32 %1001, 1
  %1004 = shl i32 %993, 5
  %1005 = shl i32 %994, 5
  %1006 = shl i32 %1002, 5
  %1007 = shl i32 %1003, 5
  %1008 = sub i32 %959, %1004
  %1009 = sub i32 %960, %1005
  %1010 = and i32 %973, 31
  %1011 = shl i32 %1006, %1010
  %1012 = shl i32 %1007, %1010
  %1013 = add i32 %1008, %1011
  %1014 = add i32 %1009, %1012
  %1015 = lshr i32 %1013, %1010
  %1016 = lshr i32 %1014, %1010
  %1017 = shl i32 %1015, 7
  %1018 = shl i32 %1016, 7
  %1019 = or i32 %1017, 127
  %1020 = or i32 %1018, 127
  %1021 = sitofp i32 %993 to float
  %1022 = sitofp i32 %994 to float
  %1023 = sitofp i32 %1002 to float
  %1024 = sitofp i32 %1003 to float
  %1025 = shl i32 1, %1010
  %1026 = uitofp i32 %1025 to float
  %1027 = fdiv fast float 1.000000e+00, %1026
  %1028 = fmul fast float %1027, %1021
  %1029 = fmul fast float %1027, %1022
  %1030 = fsub fast float %1023, %1028
  %1031 = fsub fast float %1024, %1029
  %1032 = fmul fast float %1030, 2.500000e-01
  %1033 = fmul fast float %1031, 2.500000e-01
  %1034 = fmul fast float %1027, %990
  %1035 = fsub fast float %999, %1034
  %1036 = fmul fast float %1027, %952
  %1037 = fmul fast float %1027, %955
  %1038 = fadd fast float %1032, %1036
  %1039 = fadd fast float %1033, %1037
  %1040 = fmul fast float %1038, 1.638400e+04
  %1041 = fmul fast float %1039, 1.638400e+04
  %1042 = fptoui float %1040 to i32
  %1043 = fptoui float %1041 to i32
  %1044 = call i32 @dx.op.binary.i32(i32 39, i32 %1042, i32 %1017)  ; UMax(a,b)
  %1045 = call i32 @dx.op.binary.i32(i32 39, i32 %1043, i32 %1018)  ; UMax(a,b)
  %1046 = call i32 @dx.op.binary.i32(i32 40, i32 %1044, i32 %1019)  ; UMin(a,b)
  %1047 = call i32 @dx.op.binary.i32(i32 40, i32 %1045, i32 %1020)  ; UMin(a,b)
  %1048 = icmp ult i32 %980, 8192
  br i1 %1048, label %1054, label %1049

; <label>:1049                                    ; preds = %985
  %1050 = mul i32 %980, 21845
  %1051 = add i32 %1050, -178946048
  %1052 = add i32 %1051, %1015
  %1053 = add i32 %1052, %1018
  br label %1054

; <label>:1054                                    ; preds = %1049, %985
  %1055 = phi i32 [ %1053, %1049 ], [ %980, %985 ]
  %1056 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %970, i32 %1055, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1057 = extractvalue %dx.types.ResRet.i32 %1056, 0
  %1058 = and i32 %1057, 200278016
  %1059 = icmp eq i32 %1058, 134217728
  %1060 = zext i1 %1059 to i32
  br label %1061

; <label>:1061                                    ; preds = %1054, %977
  %1062 = phi i32 [ %1046, %1054 ], [ %983, %977 ]
  %1063 = phi i32 [ %1047, %1054 ], [ %984, %977 ]
  %1064 = phi i32 [ %1060, %1054 ], [ %979, %977 ]
  %1065 = phi i32 [ %1057, %1054 ], [ %972, %977 ]
  %1066 = phi float [ %1027, %1054 ], [ 1.000000e+00, %977 ]
  %1067 = phi float [ %1035, %1054 ], [ 0.000000e+00, %977 ]
  %1068 = icmp eq i32 %1064, 0
  br i1 %1068, label %1084, label %1069

; <label>:1069                                    ; preds = %1061
  %1070 = shl i32 %1065, 7
  %1071 = and i32 %1070, 130944
  %1072 = lshr i32 %1065, 3
  %1073 = and i32 %1072, 130944
  %1074 = and i32 %1062, 127
  %1075 = and i32 %1063, 127
  %1076 = or i32 %1071, %1074
  %1077 = or i32 %1073, %1075
  %1078 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1079 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1078, i32 0, i32 %1076, i32 %1077, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1080 = extractvalue %dx.types.ResRet.i32 %1079, 0
  %1081 = bitcast i32 %1080 to float
  %1082 = fsub fast float %1081, %1067
  %1083 = fdiv fast float %1082, %1066
  br label %1084

; <label>:1084                                    ; preds = %1069, %1061, %968
  %1085 = phi float [ %1083, %1069 ], [ 0.000000e+00, %1061 ], [ 0.000000e+00, %968 ]
  %1086 = phi i1 [ true, %1069 ], [ false, %1061 ], [ false, %968 ]
  %1087 = select i1 %1086, float %1085, float 0.000000e+00
  br i1 %1086, label %1088, label %1109

; <label>:1088                                    ; preds = %1084
  %1089 = fcmp fast oeq float %935, -1.000000e+04
  br i1 %1089, label %1090, label %1092

; <label>:1090                                    ; preds = %1088
  %1091 = fcmp fast ogt float %1087, %956
  br i1 %1091, label %1114, label %1109

; <label>:1092                                    ; preds = %1088
  %1093 = fsub fast float %956, %936
  %1094 = call float @dx.op.unary.f32(i32 6, float %1093)  ; FAbs(value)
  %1095 = fmul fast float %1094, 0x3FF0CCCCC0000000
  %1096 = fsub fast float %1087, %956
  %1097 = fcmp fast ogt float %1096, %1095
  br i1 %1097, label %1101, label %1098

; <label>:1098                                    ; preds = %1092
  %1099 = fcmp fast une float %1087, %935
  br i1 %1099, label %1100, label %1101

; <label>:1100                                    ; preds = %1098
  br label %1101

; <label>:1101                                    ; preds = %1100, %1098, %1092
  %1102 = phi float [ %1085, %1100 ], [ %935, %1098 ], [ %935, %1092 ]
  %1103 = phi float [ %1085, %1100 ], [ %1085, %1098 ], [ %935, %1092 ]
  %1104 = fmul fast float %1094, 0x3FE0CCCCC0000000
  %1105 = fadd fast float %1104, %956
  %1106 = fsub fast float %1105, %1103
  %1107 = call float @dx.op.unary.f32(i32 6, float %1106)  ; FAbs(value)
  %1108 = fcmp fast olt float %1107, %1104
  br i1 %1108, label %1114, label %1109

; <label>:1109                                    ; preds = %1101, %1090, %1084
  %1110 = phi float [ %935, %1084 ], [ %1085, %1090 ], [ %1102, %1101 ]
  %1111 = phi float [ %936, %1084 ], [ %956, %1090 ], [ %956, %1101 ]
  %1112 = add nuw nsw i32 %937, 1
  %1113 = icmp slt i32 %937, %422
  br i1 %1113, label %934, label %1114

; <label>:1114                                    ; preds = %1109, %1101, %1090
  %1115 = phi float [ %1085, %1090 ], [ %1103, %1101 ], [ -1.000000e+00, %1109 ]
  %1116 = phi i1 [ true, %1090 ], [ true, %1101 ], [ false, %1109 ]
  br label %1117

; <label>:1117                                    ; preds = %1114, %762
  %1118 = phi float [ -1.000000e+00, %762 ], [ %1115, %1114 ]
  %1119 = phi i1 [ false, %762 ], [ %1116, %1114 ]
  br i1 %1119, label %1120, label %1129

; <label>:1120                                    ; preds = %1117
  %1121 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1122 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1121, i32 %643, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1123 = extractvalue %dx.types.ResRet.i32 %1122, 2
  %1124 = bitcast i32 %1123 to float
  %1125 = fsub fast float %928, %1118
  %1126 = fdiv fast float %1125, %1124
  %1127 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1126)  ; FMax(a,b)
  %1128 = fadd fast float %1127, %765
  br label %1131

; <label>:1129                                    ; preds = %1117
  %1130 = add i32 %763, 1
  br label %1131

; <label>:1131                                    ; preds = %1129, %1120
  %1132 = phi i32 [ %763, %1120 ], [ %1130, %1129 ]
  %1133 = phi float [ %1128, %1120 ], [ %765, %1129 ]
  %1134 = icmp eq i32 %418, 0
  br i1 %1134, label %1145, label %1135

; <label>:1135                                    ; preds = %1131
  %1136 = icmp eq i32 %764, 0
  br i1 %1136, label %1137, label %1140

; <label>:1137                                    ; preds = %1135
  %1138 = xor i1 %1119, true
  %1139 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1138)  ; WaveAllTrue(cond)
  br i1 %1139, label %1148, label %1145

; <label>:1140                                    ; preds = %1135
  %1141 = icmp ult i32 %764, %418
  br i1 %1141, label %1145, label %1142

; <label>:1142                                    ; preds = %1140
  %1143 = icmp eq i32 %1132, 0
  %1144 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1143)  ; WaveAllTrue(cond)
  br i1 %1144, label %1148, label %1145

; <label>:1145                                    ; preds = %1142, %1140, %1137, %1131
  %1146 = add nuw i32 %764, 1
  %1147 = icmp ult i32 %1146, %403
  br i1 %1147, label %762, label %1148

; <label>:1148                                    ; preds = %1145, %1142, %1137
  %1149 = phi i32 [ %1146, %1145 ], [ 0, %1137 ], [ %764, %1142 ]
  br label %1150

; <label>:1150                                    ; preds = %1148, %734
  %1151 = phi i32 [ 0, %734 ], [ %1132, %1148 ]
  %1152 = phi i32 [ 0, %734 ], [ %1149, %1148 ]
  %1153 = phi float [ 0.000000e+00, %734 ], [ %1133, %1148 ]
  %1154 = add i32 %1152, 1
  %1155 = call i32 @dx.op.binary.i32(i32 40, i32 %1154, i32 %403)  ; UMin(a,b)
  %1156 = sub i32 %1155, %1151
  %1157 = call i32 @dx.op.binary.i32(i32 39, i32 1, i32 %1156)  ; UMax(a,b)
  %1158 = uitofp i32 %1157 to float
  %1159 = fdiv fast float %1153, %1158
  %1160 = uitofp i32 %1151 to float
  %1161 = uitofp i32 %1155 to float
  %1162 = fdiv fast float %1160, %1161
  br label %1821

; <label>:1163                                    ; preds = %400
  %1164 = call float @dx.op.binary.f32(i32 35, float %401, float 0.000000e+00)  ; FMax(a,b)
  %1165 = mul i32 %209, 336
  %1166 = add i32 %1165, 128
  %1167 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1168 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1166, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1169 = add i32 %1165, 144
  %1170 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1169, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1171 = add i32 %1165, 160
  %1172 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1171, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1173 = add i32 %1165, 176
  %1174 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1173, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1175 = add i32 %1165, 256
  %1176 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1175, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1177 = extractvalue %dx.types.ResRet.i32 %1176, 0
  %1178 = extractvalue %dx.types.ResRet.i32 %1176, 1
  %1179 = extractvalue %dx.types.ResRet.i32 %1176, 2
  %1180 = bitcast i32 %1177 to float
  %1181 = bitcast i32 %1178 to float
  %1182 = bitcast i32 %1179 to float
  %1183 = add i32 %1165, 268
  %1184 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1183, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1185 = extractvalue %dx.types.ResRet.i32 %1184, 0
  %1186 = add i32 %1165, 272
  %1187 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1186, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1188 = add i32 %1165, 288
  %1189 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1188, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1190 = icmp eq i32 %1185, 0
  %1191 = fadd fast float %1180, %406
  %1192 = fadd fast float %1181, %407
  %1193 = fadd fast float %1182, %408
  %1194 = fmul fast float %1191, 2.097152e+06
  %1195 = fmul fast float %1192, 2.097152e+06
  %1196 = fmul fast float %1193, 2.097152e+06
  %1197 = fadd fast float %1194, %413
  %1198 = fadd fast float %1195, %414
  %1199 = fadd fast float %1196, %415
  br i1 %1190, label %1200, label %1531

; <label>:1200                                    ; preds = %1163
  %1201 = extractvalue %dx.types.ResRet.i32 %1189, 2
  %1202 = bitcast i32 %1201 to float
  %1203 = extractvalue %dx.types.ResRet.i32 %1189, 1
  %1204 = bitcast i32 %1203 to float
  %1205 = extractvalue %dx.types.ResRet.i32 %1189, 0
  %1206 = bitcast i32 %1205 to float
  %1207 = add i32 %1165, 316
  %1208 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1207, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1209 = extractvalue %dx.types.ResRet.i32 %1208, 0
  %1210 = add i32 %1165, 312
  %1211 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1210, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1212 = extractvalue %dx.types.ResRet.i32 %1211, 0
  %1213 = add i32 %1165, 300
  %1214 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1213, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1215 = extractvalue %dx.types.ResRet.i32 %1214, 0
  %1216 = bitcast i32 %1215 to float
  %1217 = fadd fast float %1197, %1206
  %1218 = fadd fast float %1198, %1204
  %1219 = fadd fast float %1199, %1202
  %1220 = fmul fast float %1217, %1217
  %1221 = fmul fast float %1218, %1218
  %1222 = fadd fast float %1220, %1221
  %1223 = fmul fast float %1219, %1219
  %1224 = fadd fast float %1222, %1223
  %1225 = call float @dx.op.unary.f32(i32 24, float %1224)  ; Sqrt(value)
  %1226 = call float @dx.op.unary.f32(i32 23, float %1225)  ; Log(value)
  %1227 = fadd fast float %1226, %1216
  %1228 = call float @dx.op.unary.f32(i32 27, float %1227)  ; Round_ni(value)
  %1229 = fptosi float %1228 to i32
  %1230 = sub nsw i32 %1229, %1212
  %1231 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1230)  ; IMax(a,b)
  %1232 = icmp slt i32 %1231, %1209
  br i1 %1232, label %1233, label %1821

; <label>:1233                                    ; preds = %1200
  %1234 = add nsw i32 %1231, %209
  %1235 = mul i32 %1234, 336
  %1236 = add i32 %1235, 96
  %1237 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1236, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1238 = extractvalue %dx.types.ResRet.i32 %1237, 2
  %1239 = bitcast i32 %1238 to float
  %1240 = add i32 %1235, 128
  %1241 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1240, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1242 = extractvalue %dx.types.ResRet.i32 %1241, 0
  %1243 = extractvalue %dx.types.ResRet.i32 %1241, 1
  %1244 = extractvalue %dx.types.ResRet.i32 %1241, 2
  %1245 = bitcast i32 %1242 to float
  %1246 = bitcast i32 %1243 to float
  %1247 = bitcast i32 %1244 to float
  %1248 = add i32 %1235, 144
  %1249 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1248, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1250 = extractvalue %dx.types.ResRet.i32 %1249, 0
  %1251 = extractvalue %dx.types.ResRet.i32 %1249, 1
  %1252 = extractvalue %dx.types.ResRet.i32 %1249, 2
  %1253 = bitcast i32 %1250 to float
  %1254 = bitcast i32 %1251 to float
  %1255 = bitcast i32 %1252 to float
  %1256 = add i32 %1235, 160
  %1257 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1256, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1258 = extractvalue %dx.types.ResRet.i32 %1257, 0
  %1259 = extractvalue %dx.types.ResRet.i32 %1257, 1
  %1260 = extractvalue %dx.types.ResRet.i32 %1257, 2
  %1261 = bitcast i32 %1258 to float
  %1262 = bitcast i32 %1259 to float
  %1263 = bitcast i32 %1260 to float
  %1264 = add i32 %1235, 176
  %1265 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1264, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1266 = extractvalue %dx.types.ResRet.i32 %1265, 0
  %1267 = extractvalue %dx.types.ResRet.i32 %1265, 1
  %1268 = extractvalue %dx.types.ResRet.i32 %1265, 2
  %1269 = bitcast i32 %1266 to float
  %1270 = bitcast i32 %1267 to float
  %1271 = bitcast i32 %1268 to float
  %1272 = add i32 %1235, 256
  %1273 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1272, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1274 = extractvalue %dx.types.ResRet.i32 %1273, 0
  %1275 = extractvalue %dx.types.ResRet.i32 %1273, 1
  %1276 = extractvalue %dx.types.ResRet.i32 %1273, 2
  %1277 = bitcast i32 %1274 to float
  %1278 = bitcast i32 %1275 to float
  %1279 = bitcast i32 %1276 to float
  %1280 = add i32 %1235, 272
  %1281 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1280, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1282 = extractvalue %dx.types.ResRet.i32 %1281, 0
  %1283 = extractvalue %dx.types.ResRet.i32 %1281, 1
  %1284 = extractvalue %dx.types.ResRet.i32 %1281, 2
  %1285 = bitcast i32 %1282 to float
  %1286 = bitcast i32 %1283 to float
  %1287 = bitcast i32 %1284 to float
  %1288 = fadd fast float %1277, %406
  %1289 = fadd fast float %1278, %407
  %1290 = fadd fast float %1279, %408
  %1291 = fmul fast float %1288, 2.097152e+06
  %1292 = fmul fast float %1289, 2.097152e+06
  %1293 = fmul fast float %1290, 2.097152e+06
  %1294 = fadd fast float %1291, %413
  %1295 = fadd fast float %1294, %1285
  %1296 = fadd fast float %1292, %414
  %1297 = fadd fast float %1296, %1286
  %1298 = fadd fast float %1293, %415
  %1299 = fadd fast float %1298, %1287
  %1300 = fmul fast float %1295, %1245
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %1297, float %1253, float %1300)  ; FMad(a,b,c)
  %1302 = call float @dx.op.tertiary.f32(i32 46, float %1299, float %1261, float %1301)  ; FMad(a,b,c)
  %1303 = fadd fast float %1302, %1269
  %1304 = fmul fast float %1295, %1246
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %1297, float %1254, float %1304)  ; FMad(a,b,c)
  %1306 = call float @dx.op.tertiary.f32(i32 46, float %1299, float %1262, float %1305)  ; FMad(a,b,c)
  %1307 = fadd fast float %1306, %1270
  %1308 = fmul fast float %1295, %1247
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %1297, float %1255, float %1308)  ; FMad(a,b,c)
  %1310 = call float @dx.op.tertiary.f32(i32 46, float %1299, float %1263, float %1309)  ; FMad(a,b,c)
  %1311 = fadd fast float %1310, %1271
  %1312 = fmul fast float %1303, 1.280000e+02
  %1313 = fmul fast float %1307, 1.280000e+02
  %1314 = fptoui float %1312 to i32
  %1315 = fptoui float %1313 to i32
  %1316 = icmp ult i32 %1234, 8192
  br i1 %1316, label %1323, label %1317

; <label>:1317                                    ; preds = %1233
  %1318 = mul i32 %1234, 21845
  %1319 = shl i32 %1315, 7
  %1320 = add i32 %1318, -178946048
  %1321 = add i32 %1320, %1314
  %1322 = add i32 %1321, %1319
  br label %1323

; <label>:1323                                    ; preds = %1317, %1233
  %1324 = phi i32 [ %1322, %1317 ], [ %1234, %1233 ]
  %1325 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1326 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1325, i32 %1324, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1327 = extractvalue %dx.types.ResRet.i32 %1326, 0
  %1328 = lshr i32 %1327, 20
  %1329 = and i32 %1328, 63
  %1330 = and i32 %1327, 134217728
  %1331 = icmp eq i32 %1330, 0
  br i1 %1331, label %1440, label %1332

; <label>:1332                                    ; preds = %1323
  %1333 = icmp eq i32 %1329, 0
  %1334 = zext i1 %1333 to i32
  %1335 = add i32 %1329, %1234
  %1336 = fmul fast float %1303, 1.638400e+04
  %1337 = fmul fast float %1307, 1.638400e+04
  %1338 = fptoui float %1336 to i32
  %1339 = fptoui float %1337 to i32
  br i1 %1333, label %1415, label %1340

; <label>:1340                                    ; preds = %1332
  %1341 = add i32 %1235, 304
  %1342 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1341, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1343 = extractvalue %dx.types.ResRet.i32 %1342, 0
  %1344 = extractvalue %dx.types.ResRet.i32 %1342, 1
  %1345 = mul i32 %1335, 336
  %1346 = add i32 %1345, 304
  %1347 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1346, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1348 = extractvalue %dx.types.ResRet.i32 %1347, 0
  %1349 = extractvalue %dx.types.ResRet.i32 %1347, 1
  %1350 = shl i32 %1343, 5
  %1351 = shl i32 %1344, 5
  %1352 = shl i32 %1348, 5
  %1353 = shl i32 %1349, 5
  %1354 = sub i32 %1314, %1350
  %1355 = sub i32 %1315, %1351
  %1356 = and i32 %1328, 31
  %1357 = shl i32 %1352, %1356
  %1358 = shl i32 %1353, %1356
  %1359 = add i32 %1354, %1357
  %1360 = add i32 %1355, %1358
  %1361 = lshr i32 %1359, %1356
  %1362 = lshr i32 %1360, %1356
  %1363 = shl i32 %1361, 7
  %1364 = shl i32 %1362, 7
  %1365 = or i32 %1363, 127
  %1366 = or i32 %1364, 127
  %1367 = add i32 %1235, 112
  %1368 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1367, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1369 = extractvalue %dx.types.ResRet.i32 %1368, 2
  %1370 = bitcast i32 %1369 to float
  %1371 = add i32 %1345, 112
  %1372 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1371, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1373 = extractvalue %dx.types.ResRet.i32 %1372, 2
  %1374 = bitcast i32 %1373 to float
  %1375 = sitofp i32 %1343 to float
  %1376 = sitofp i32 %1344 to float
  %1377 = sitofp i32 %1348 to float
  %1378 = sitofp i32 %1349 to float
  %1379 = shl i32 1, %1356
  %1380 = uitofp i32 %1379 to float
  %1381 = fdiv fast float 1.000000e+00, %1380
  %1382 = fmul fast float %1381, %1375
  %1383 = fmul fast float %1381, %1376
  %1384 = fsub fast float %1377, %1382
  %1385 = fsub fast float %1378, %1383
  %1386 = fmul fast float %1384, 2.500000e-01
  %1387 = fmul fast float %1385, 2.500000e-01
  %1388 = fmul fast float %1381, %1370
  %1389 = fsub fast float %1374, %1388
  %1390 = fmul fast float %1381, %1303
  %1391 = fmul fast float %1381, %1307
  %1392 = fadd fast float %1386, %1390
  %1393 = fadd fast float %1387, %1391
  %1394 = fmul fast float %1392, 1.638400e+04
  %1395 = fmul fast float %1393, 1.638400e+04
  %1396 = fptoui float %1394 to i32
  %1397 = fptoui float %1395 to i32
  %1398 = call i32 @dx.op.binary.i32(i32 39, i32 %1396, i32 %1363)  ; UMax(a,b)
  %1399 = call i32 @dx.op.binary.i32(i32 39, i32 %1397, i32 %1364)  ; UMax(a,b)
  %1400 = call i32 @dx.op.binary.i32(i32 40, i32 %1398, i32 %1365)  ; UMin(a,b)
  %1401 = call i32 @dx.op.binary.i32(i32 40, i32 %1399, i32 %1366)  ; UMin(a,b)
  %1402 = icmp ult i32 %1335, 8192
  br i1 %1402, label %1408, label %1403

; <label>:1403                                    ; preds = %1340
  %1404 = mul i32 %1335, 21845
  %1405 = add i32 %1404, -178946048
  %1406 = add i32 %1405, %1361
  %1407 = add i32 %1406, %1364
  br label %1408

; <label>:1408                                    ; preds = %1403, %1340
  %1409 = phi i32 [ %1407, %1403 ], [ %1335, %1340 ]
  %1410 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1325, i32 %1409, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1411 = extractvalue %dx.types.ResRet.i32 %1410, 0
  %1412 = and i32 %1411, 200278016
  %1413 = icmp eq i32 %1412, 134217728
  %1414 = zext i1 %1413 to i32
  br label %1415

; <label>:1415                                    ; preds = %1408, %1332
  %1416 = phi float [ %1394, %1408 ], [ %1336, %1332 ]
  %1417 = phi float [ %1395, %1408 ], [ %1337, %1332 ]
  %1418 = phi i32 [ %1400, %1408 ], [ %1338, %1332 ]
  %1419 = phi i32 [ %1401, %1408 ], [ %1339, %1332 ]
  %1420 = phi float [ %1381, %1408 ], [ 1.000000e+00, %1332 ]
  %1421 = phi float [ %1389, %1408 ], [ 0.000000e+00, %1332 ]
  %1422 = phi i32 [ %1414, %1408 ], [ %1334, %1332 ]
  %1423 = phi i32 [ %1411, %1408 ], [ %1327, %1332 ]
  %1424 = icmp eq i32 %1422, 0
  br i1 %1424, label %1440, label %1425

; <label>:1425                                    ; preds = %1415
  %1426 = shl i32 %1423, 7
  %1427 = and i32 %1426, 130944
  %1428 = lshr i32 %1423, 3
  %1429 = and i32 %1428, 130944
  %1430 = and i32 %1418, 127
  %1431 = and i32 %1419, 127
  %1432 = or i32 %1427, %1430
  %1433 = or i32 %1429, %1431
  %1434 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1435 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1434, i32 0, i32 %1432, i32 %1433, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1436 = extractvalue %dx.types.ResRet.i32 %1435, 0
  %1437 = bitcast i32 %1436 to float
  %1438 = fsub fast float %1437, %1421
  %1439 = fdiv fast float %1438, %1420
  br label %1440

; <label>:1440                                    ; preds = %1425, %1415, %1323
  %1441 = phi float [ %1416, %1425 ], [ %1416, %1415 ], [ 0.000000e+00, %1323 ]
  %1442 = phi float [ %1417, %1425 ], [ %1417, %1415 ], [ 0.000000e+00, %1323 ]
  %1443 = phi i32 [ %1418, %1425 ], [ %1418, %1415 ], [ 0, %1323 ]
  %1444 = phi i32 [ %1419, %1425 ], [ %1419, %1415 ], [ 0, %1323 ]
  %1445 = phi i1 [ true, %1425 ], [ false, %1415 ], [ false, %1323 ]
  %1446 = phi i32 [ %1335, %1425 ], [ -1, %1415 ], [ -1, %1323 ]
  %1447 = phi float [ %1439, %1425 ], [ 0.000000e+00, %1415 ], [ 0.000000e+00, %1323 ]
  br i1 %1445, label %1448, label %1821

; <label>:1448                                    ; preds = %1440
  %1449 = mul i32 %1446, 336
  %1450 = add i32 %1449, 96
  %1451 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1450, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1452 = extractvalue %dx.types.ResRet.i32 %1451, 2
  %1453 = bitcast i32 %1452 to float
  %1454 = add i32 %1449, 192
  %1455 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1454, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1456 = extractvalue %dx.types.ResRet.i32 %1455, 0
  %1457 = extractvalue %dx.types.ResRet.i32 %1455, 1
  %1458 = extractvalue %dx.types.ResRet.i32 %1455, 2
  %1459 = bitcast i32 %1456 to float
  %1460 = bitcast i32 %1457 to float
  %1461 = bitcast i32 %1458 to float
  %1462 = add i32 %1449, 208
  %1463 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1462, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1464 = extractvalue %dx.types.ResRet.i32 %1463, 0
  %1465 = extractvalue %dx.types.ResRet.i32 %1463, 1
  %1466 = extractvalue %dx.types.ResRet.i32 %1463, 2
  %1467 = bitcast i32 %1464 to float
  %1468 = bitcast i32 %1465 to float
  %1469 = bitcast i32 %1466 to float
  %1470 = add i32 %1449, 224
  %1471 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1470, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1472 = extractvalue %dx.types.ResRet.i32 %1471, 0
  %1473 = extractvalue %dx.types.ResRet.i32 %1471, 1
  %1474 = extractvalue %dx.types.ResRet.i32 %1471, 2
  %1475 = bitcast i32 %1472 to float
  %1476 = bitcast i32 %1473 to float
  %1477 = bitcast i32 %1474 to float
  %1478 = add i32 %1449, 240
  %1479 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1478, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1480 = extractvalue %dx.types.ResRet.i32 %1479, 0
  %1481 = extractvalue %dx.types.ResRet.i32 %1479, 1
  %1482 = extractvalue %dx.types.ResRet.i32 %1479, 2
  %1483 = bitcast i32 %1480 to float
  %1484 = bitcast i32 %1481 to float
  %1485 = bitcast i32 %1482 to float
  %1486 = call float @dx.op.dot3.f32(i32 55, float %251, float %252, float %253, float %1295, float %1297, float %1299)  ; Dot3(ax,ay,az,bx,by,bz)
  %1487 = fsub fast float -0.000000e+00, %1486
  %1488 = fmul fast float %1459, %251
  %1489 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1467, float %1488)  ; FMad(a,b,c)
  %1490 = call float @dx.op.tertiary.f32(i32 46, float %253, float %1475, float %1489)  ; FMad(a,b,c)
  %1491 = call float @dx.op.tertiary.f32(i32 46, float %1487, float %1483, float %1490)  ; FMad(a,b,c)
  %1492 = fmul fast float %1460, %251
  %1493 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1468, float %1492)  ; FMad(a,b,c)
  %1494 = call float @dx.op.tertiary.f32(i32 46, float %253, float %1476, float %1493)  ; FMad(a,b,c)
  %1495 = call float @dx.op.tertiary.f32(i32 46, float %1487, float %1484, float %1494)  ; FMad(a,b,c)
  %1496 = fmul fast float %1461, %251
  %1497 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1469, float %1496)  ; FMad(a,b,c)
  %1498 = call float @dx.op.tertiary.f32(i32 46, float %253, float %1477, float %1497)  ; FMad(a,b,c)
  %1499 = call float @dx.op.tertiary.f32(i32 46, float %1487, float %1485, float %1498)  ; FMad(a,b,c)
  %1500 = fsub fast float -0.000000e+00, %1491
  %1501 = fsub fast float -0.000000e+00, %1495
  %1502 = fdiv fast float %1500, %1499
  %1503 = fdiv fast float %1501, %1499
  %1504 = uitofp i32 %1443 to float
  %1505 = uitofp i32 %1444 to float
  %1506 = fsub fast float 5.000000e-01, %1441
  %1507 = fadd fast float %1506, %1504
  %1508 = fsub fast float 5.000000e-01, %1442
  %1509 = fadd fast float %1508, %1505
  %1510 = fmul fast float %1507, 0x3F10000000000000
  %1511 = fmul fast float %1509, 0x3F10000000000000
  %1512 = call float @dx.op.dot2.f32(i32 54, float %1502, float %1503, float %1510, float %1511)  ; Dot2(ax,ay,bx,by)
  %1513 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1512)  ; FMax(a,b)
  %1514 = fmul fast float %1513, 2.000000e+00
  %1515 = fmul fast float %1453, 1.000000e+02
  %1516 = call float @dx.op.unary.f32(i32 6, float %1515)  ; FAbs(value)
  %1517 = call float @dx.op.binary.f32(i32 36, float %1514, float %1516)  ; FMin(a,b)
  %1518 = sub nsw i32 %1446, %1234
  %1519 = and i32 %1518, 31
  %1520 = shl i32 1, %1519
  %1521 = uitofp i32 %1520 to float
  %1522 = fmul fast float %1517, %1521
  %1523 = fmul fast float %1239, %1164
  %1524 = fadd fast float %1447, %1523
  %1525 = fsub fast float %1524, %1522
  %1526 = fcmp fast ogt float %1525, %1311
  br i1 %1526, label %1527, label %1821

; <label>:1527                                    ; preds = %1448
  %1528 = fsub fast float %1311, %1447
  %1529 = fdiv fast float %1528, %1239
  %1530 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1529)  ; FMax(a,b)
  br label %1821

; <label>:1531                                    ; preds = %1163
  %1532 = extractvalue %dx.types.ResRet.i32 %1187, 2
  %1533 = bitcast i32 %1532 to float
  %1534 = extractvalue %dx.types.ResRet.i32 %1187, 1
  %1535 = bitcast i32 %1534 to float
  %1536 = extractvalue %dx.types.ResRet.i32 %1187, 0
  %1537 = bitcast i32 %1536 to float
  %1538 = extractvalue %dx.types.ResRet.i32 %1174, 3
  %1539 = extractvalue %dx.types.ResRet.i32 %1174, 2
  %1540 = extractvalue %dx.types.ResRet.i32 %1174, 1
  %1541 = extractvalue %dx.types.ResRet.i32 %1174, 0
  %1542 = extractvalue %dx.types.ResRet.i32 %1172, 3
  %1543 = extractvalue %dx.types.ResRet.i32 %1172, 2
  %1544 = extractvalue %dx.types.ResRet.i32 %1172, 1
  %1545 = extractvalue %dx.types.ResRet.i32 %1172, 0
  %1546 = extractvalue %dx.types.ResRet.i32 %1170, 3
  %1547 = extractvalue %dx.types.ResRet.i32 %1170, 2
  %1548 = extractvalue %dx.types.ResRet.i32 %1170, 1
  %1549 = extractvalue %dx.types.ResRet.i32 %1170, 0
  %1550 = extractvalue %dx.types.ResRet.i32 %1168, 3
  %1551 = extractvalue %dx.types.ResRet.i32 %1168, 2
  %1552 = extractvalue %dx.types.ResRet.i32 %1168, 1
  %1553 = extractvalue %dx.types.ResRet.i32 %1168, 0
  %1554 = add i32 %1165, 112
  %1555 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1554, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1556 = extractvalue %dx.types.ResRet.i32 %1555, 2
  %1557 = add i32 %1165, 96
  %1558 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1557, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1559 = extractvalue %dx.types.ResRet.i32 %1558, 2
  %1560 = fadd fast float %1197, %1537
  %1561 = fadd fast float %1198, %1535
  %1562 = fadd fast float %1199, %1533
  %1563 = icmp eq i32 %1185, 2
  br i1 %1563, label %1616, label %1564

; <label>:1564                                    ; preds = %1531
  %1565 = call float @dx.op.unary.f32(i32 6, float %1560)  ; FAbs(value)
  %1566 = call float @dx.op.unary.f32(i32 6, float %1561)  ; FAbs(value)
  %1567 = fcmp fast ult float %1565, %1566
  %1568 = call float @dx.op.unary.f32(i32 6, float %1562)  ; FAbs(value)
  %1569 = fcmp fast ult float %1565, %1568
  %1570 = or i1 %1567, %1569
  br i1 %1570, label %1574, label %1571

; <label>:1571                                    ; preds = %1564
  %1572 = fcmp ule float %1560, 0.000000e+00
  %1573 = zext i1 %1572 to i32
  br label %1582

; <label>:1574                                    ; preds = %1564
  %1575 = fcmp fast ogt float %1566, %1568
  br i1 %1575, label %1576, label %1579

; <label>:1576                                    ; preds = %1574
  %1577 = fcmp fast ogt float %1561, 0.000000e+00
  %1578 = select i1 %1577, i32 2, i32 3
  br label %1582

; <label>:1579                                    ; preds = %1574
  %1580 = fcmp fast ogt float %1562, 0.000000e+00
  %1581 = select i1 %1580, i32 4, i32 5
  br label %1582

; <label>:1582                                    ; preds = %1579, %1576, %1571
  %1583 = phi i32 [ %1573, %1571 ], [ %1578, %1576 ], [ %1581, %1579 ]
  %1584 = add i32 %1583, %209
  %1585 = mul i32 %1584, 336
  %1586 = add i32 %1585, 96
  %1587 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1586, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1588 = extractvalue %dx.types.ResRet.i32 %1587, 2
  %1589 = add i32 %1585, 112
  %1590 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1589, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1591 = extractvalue %dx.types.ResRet.i32 %1590, 2
  %1592 = add i32 %1585, 128
  %1593 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1592, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1594 = extractvalue %dx.types.ResRet.i32 %1593, 0
  %1595 = extractvalue %dx.types.ResRet.i32 %1593, 1
  %1596 = extractvalue %dx.types.ResRet.i32 %1593, 2
  %1597 = extractvalue %dx.types.ResRet.i32 %1593, 3
  %1598 = add i32 %1585, 144
  %1599 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1598, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1600 = extractvalue %dx.types.ResRet.i32 %1599, 0
  %1601 = extractvalue %dx.types.ResRet.i32 %1599, 1
  %1602 = extractvalue %dx.types.ResRet.i32 %1599, 2
  %1603 = extractvalue %dx.types.ResRet.i32 %1599, 3
  %1604 = add i32 %1585, 160
  %1605 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1604, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1606 = extractvalue %dx.types.ResRet.i32 %1605, 0
  %1607 = extractvalue %dx.types.ResRet.i32 %1605, 1
  %1608 = extractvalue %dx.types.ResRet.i32 %1605, 2
  %1609 = extractvalue %dx.types.ResRet.i32 %1605, 3
  %1610 = add i32 %1585, 176
  %1611 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1610, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1612 = extractvalue %dx.types.ResRet.i32 %1611, 0
  %1613 = extractvalue %dx.types.ResRet.i32 %1611, 1
  %1614 = extractvalue %dx.types.ResRet.i32 %1611, 2
  %1615 = extractvalue %dx.types.ResRet.i32 %1611, 3
  br label %1616

; <label>:1616                                    ; preds = %1582, %1531
  %1617 = phi i32 [ %1588, %1582 ], [ %1559, %1531 ]
  %1618 = phi i32 [ %1591, %1582 ], [ %1556, %1531 ]
  %1619 = phi i32 [ %1594, %1582 ], [ %1553, %1531 ]
  %1620 = phi i32 [ %1595, %1582 ], [ %1552, %1531 ]
  %1621 = phi i32 [ %1596, %1582 ], [ %1551, %1531 ]
  %1622 = phi i32 [ %1597, %1582 ], [ %1550, %1531 ]
  %1623 = phi i32 [ %1600, %1582 ], [ %1549, %1531 ]
  %1624 = phi i32 [ %1601, %1582 ], [ %1548, %1531 ]
  %1625 = phi i32 [ %1602, %1582 ], [ %1547, %1531 ]
  %1626 = phi i32 [ %1603, %1582 ], [ %1546, %1531 ]
  %1627 = phi i32 [ %1606, %1582 ], [ %1545, %1531 ]
  %1628 = phi i32 [ %1607, %1582 ], [ %1544, %1531 ]
  %1629 = phi i32 [ %1608, %1582 ], [ %1543, %1531 ]
  %1630 = phi i32 [ %1609, %1582 ], [ %1542, %1531 ]
  %1631 = phi i32 [ %1612, %1582 ], [ %1541, %1531 ]
  %1632 = phi i32 [ %1613, %1582 ], [ %1540, %1531 ]
  %1633 = phi i32 [ %1614, %1582 ], [ %1539, %1531 ]
  %1634 = phi i32 [ %1615, %1582 ], [ %1538, %1531 ]
  %1635 = phi i32 [ %1584, %1582 ], [ %209, %1531 ]
  %1636 = bitcast i32 %1634 to float
  %1637 = bitcast i32 %1633 to float
  %1638 = bitcast i32 %1632 to float
  %1639 = bitcast i32 %1631 to float
  %1640 = bitcast i32 %1630 to float
  %1641 = bitcast i32 %1629 to float
  %1642 = bitcast i32 %1628 to float
  %1643 = bitcast i32 %1627 to float
  %1644 = bitcast i32 %1626 to float
  %1645 = bitcast i32 %1625 to float
  %1646 = bitcast i32 %1624 to float
  %1647 = bitcast i32 %1623 to float
  %1648 = bitcast i32 %1622 to float
  %1649 = bitcast i32 %1621 to float
  %1650 = bitcast i32 %1620 to float
  %1651 = bitcast i32 %1619 to float
  %1652 = bitcast i32 %1618 to float
  %1653 = bitcast i32 %1617 to float
  %1654 = fmul fast float %1651, %1560
  %1655 = call float @dx.op.tertiary.f32(i32 46, float %1561, float %1647, float %1654)  ; FMad(a,b,c)
  %1656 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1643, float %1655)  ; FMad(a,b,c)
  %1657 = fadd fast float %1656, %1639
  %1658 = fmul fast float %1650, %1560
  %1659 = call float @dx.op.tertiary.f32(i32 46, float %1561, float %1646, float %1658)  ; FMad(a,b,c)
  %1660 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1642, float %1659)  ; FMad(a,b,c)
  %1661 = fadd fast float %1660, %1638
  %1662 = fmul fast float %1649, %1560
  %1663 = call float @dx.op.tertiary.f32(i32 46, float %1561, float %1645, float %1662)  ; FMad(a,b,c)
  %1664 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1641, float %1663)  ; FMad(a,b,c)
  %1665 = fadd fast float %1664, %1637
  %1666 = fmul fast float %1648, %1560
  %1667 = call float @dx.op.tertiary.f32(i32 46, float %1561, float %1644, float %1666)  ; FMad(a,b,c)
  %1668 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1640, float %1667)  ; FMad(a,b,c)
  %1669 = fadd fast float %1668, %1636
  %1670 = fdiv fast float %1657, %1669
  %1671 = fdiv fast float %1661, %1669
  %1672 = fdiv fast float %1665, %1669
  %1673 = icmp ult i32 %1635, 8192
  br i1 %1673, label %1684, label %1674

; <label>:1674                                    ; preds = %1616
  %1675 = fmul fast float %1671, 1.280000e+02
  %1676 = fptoui float %1675 to i32
  %1677 = fmul fast float %1670, 1.280000e+02
  %1678 = fptoui float %1677 to i32
  %1679 = mul i32 %1635, 21845
  %1680 = shl i32 %1676, 7
  %1681 = add i32 %1679, -178946048
  %1682 = add i32 %1681, %1678
  %1683 = add i32 %1682, %1680
  br label %1684

; <label>:1684                                    ; preds = %1674, %1616
  %1685 = phi i32 [ %1683, %1674 ], [ %1635, %1616 ]
  %1686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1687 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1686, i32 %1685, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1688 = extractvalue %dx.types.ResRet.i32 %1687, 0
  %1689 = lshr i32 %1688, 20
  %1690 = and i32 %1688, 134217728
  %1691 = icmp eq i32 %1690, 0
  %1692 = and i32 %1689, 31
  %1693 = select i1 %1673, i32 7, i32 %1692
  %1694 = lshr i32 16384, %1693
  %1695 = uitofp i32 %1694 to float
  %1696 = fmul fast float %1695, %1670
  %1697 = fmul fast float %1695, %1671
  %1698 = fptoui float %1696 to i32
  %1699 = fptoui float %1697 to i32
  br i1 %1691, label %1717, label %1700

; <label>:1700                                    ; preds = %1684
  %1701 = lshr i32 %1688, 3
  %1702 = and i32 %1701, 130944
  %1703 = and i32 %1699, 127
  %1704 = or i32 %1703, %1702
  %1705 = shl i32 %1688, 7
  %1706 = and i32 %1705, 130944
  %1707 = and i32 %1698, 127
  %1708 = or i32 %1707, %1706
  %1709 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1710 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1709, i32 0, i32 %1708, i32 %1704, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1711 = extractvalue %dx.types.ResRet.i32 %1710, 0
  %1712 = bitcast i32 %1711 to float
  %1713 = uitofp i32 %1698 to float
  %1714 = uitofp i32 %1699 to float
  %1715 = fadd float %1713, 5.000000e-01
  %1716 = fadd float %1714, 5.000000e-01
  br label %1717

; <label>:1717                                    ; preds = %1700, %1684
  %1718 = phi float [ %1712, %1700 ], [ 0.000000e+00, %1684 ]
  %1719 = phi i32 [ %1693, %1700 ], [ 0, %1684 ]
  %1720 = phi i32 [ %1635, %1700 ], [ -1, %1684 ]
  %1721 = phi i1 [ true, %1700 ], [ false, %1684 ]
  %1722 = phi float [ %1715, %1700 ], [ 5.000000e-01, %1684 ]
  %1723 = phi float [ %1716, %1700 ], [ 5.000000e-01, %1684 ]
  %1724 = phi float [ %1696, %1700 ], [ 0.000000e+00, %1684 ]
  %1725 = phi float [ %1697, %1700 ], [ 0.000000e+00, %1684 ]
  br i1 %1721, label %1726, label %1821

; <label>:1726                                    ; preds = %1717
  %1727 = mul i32 %1720, 336
  %1728 = add i32 %1727, 96
  %1729 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1728, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1730 = extractvalue %dx.types.ResRet.i32 %1729, 2
  %1731 = bitcast i32 %1730 to float
  %1732 = add i32 %1727, 192
  %1733 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1732, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1734 = extractvalue %dx.types.ResRet.i32 %1733, 0
  %1735 = extractvalue %dx.types.ResRet.i32 %1733, 1
  %1736 = extractvalue %dx.types.ResRet.i32 %1733, 2
  %1737 = bitcast i32 %1734 to float
  %1738 = bitcast i32 %1735 to float
  %1739 = bitcast i32 %1736 to float
  %1740 = add i32 %1727, 208
  %1741 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1740, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1742 = extractvalue %dx.types.ResRet.i32 %1741, 0
  %1743 = extractvalue %dx.types.ResRet.i32 %1741, 1
  %1744 = extractvalue %dx.types.ResRet.i32 %1741, 2
  %1745 = bitcast i32 %1742 to float
  %1746 = bitcast i32 %1743 to float
  %1747 = bitcast i32 %1744 to float
  %1748 = add i32 %1727, 224
  %1749 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1748, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1750 = extractvalue %dx.types.ResRet.i32 %1749, 0
  %1751 = extractvalue %dx.types.ResRet.i32 %1749, 1
  %1752 = extractvalue %dx.types.ResRet.i32 %1749, 2
  %1753 = bitcast i32 %1750 to float
  %1754 = bitcast i32 %1751 to float
  %1755 = bitcast i32 %1752 to float
  %1756 = add i32 %1727, 240
  %1757 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1167, i32 %1756, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1758 = extractvalue %dx.types.ResRet.i32 %1757, 0
  %1759 = extractvalue %dx.types.ResRet.i32 %1757, 1
  %1760 = extractvalue %dx.types.ResRet.i32 %1757, 2
  %1761 = bitcast i32 %1758 to float
  %1762 = bitcast i32 %1759 to float
  %1763 = bitcast i32 %1760 to float
  %1764 = call float @dx.op.dot3.f32(i32 55, float %251, float %252, float %253, float %1560, float %1561, float %1562)  ; Dot3(ax,ay,az,bx,by,bz)
  %1765 = fsub fast float -0.000000e+00, %1764
  %1766 = fmul fast float %1737, %251
  %1767 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1745, float %1766)  ; FMad(a,b,c)
  %1768 = call float @dx.op.tertiary.f32(i32 46, float %253, float %1753, float %1767)  ; FMad(a,b,c)
  %1769 = call float @dx.op.tertiary.f32(i32 46, float %1765, float %1761, float %1768)  ; FMad(a,b,c)
  %1770 = fmul fast float %1738, %251
  %1771 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1746, float %1770)  ; FMad(a,b,c)
  %1772 = call float @dx.op.tertiary.f32(i32 46, float %253, float %1754, float %1771)  ; FMad(a,b,c)
  %1773 = call float @dx.op.tertiary.f32(i32 46, float %1765, float %1762, float %1772)  ; FMad(a,b,c)
  %1774 = fmul fast float %1739, %251
  %1775 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1747, float %1774)  ; FMad(a,b,c)
  %1776 = call float @dx.op.tertiary.f32(i32 46, float %253, float %1755, float %1775)  ; FMad(a,b,c)
  %1777 = call float @dx.op.tertiary.f32(i32 46, float %1765, float %1763, float %1776)  ; FMad(a,b,c)
  %1778 = fsub fast float -0.000000e+00, %1769
  %1779 = fsub fast float -0.000000e+00, %1773
  %1780 = fdiv fast float %1778, %1777
  %1781 = fdiv fast float %1779, %1777
  %1782 = lshr i32 16384, %1719
  %1783 = uitofp i32 %1782 to float
  %1784 = fsub fast float %1722, %1724
  %1785 = fsub fast float %1723, %1725
  %1786 = fdiv fast float %1784, %1783
  %1787 = fdiv fast float %1785, %1783
  %1788 = call float @dx.op.dot2.f32(i32 54, float %1780, float %1781, float %1786, float %1787)  ; Dot2(ax,ay,bx,by)
  %1789 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1788)  ; FMax(a,b)
  %1790 = fmul fast float %1789, 2.000000e+00
  %1791 = fmul fast float %1731, 1.000000e+02
  %1792 = call float @dx.op.unary.f32(i32 6, float %1791)  ; FAbs(value)
  %1793 = call float @dx.op.binary.f32(i32 36, float %1790, float %1792)  ; FMin(a,b)
  %1794 = sub nsw i32 %1720, %1635
  %1795 = and i32 %1794, 31
  %1796 = shl i32 1, %1795
  %1797 = uitofp i32 %1796 to float
  %1798 = fmul fast float %1793, %1797
  %1799 = fmul fast float %1164, %1653
  %1800 = fsub fast float -0.000000e+00, %1799
  %1801 = fdiv fast float %1800, %1669
  %1802 = fsub fast float %1718, %1798
  %1803 = fsub fast float %1802, %1801
  %1804 = fcmp fast ogt float %1803, %1672
  br i1 %1804, label %1805, label %1821

; <label>:1805                                    ; preds = %1726
  %1806 = fmul fast float %1560, %1560
  %1807 = fmul fast float %1561, %1561
  %1808 = fadd fast float %1806, %1807
  %1809 = fmul fast float %1562, %1562
  %1810 = fadd fast float %1808, %1809
  %1811 = call float @dx.op.unary.f32(i32 24, float %1810)  ; Sqrt(value)
  %1812 = fsub fast float %1718, %1653
  %1813 = fdiv fast float %1652, %1812
  %1814 = fsub fast float %1672, %1653
  %1815 = fmul fast float %1811, %1814
  %1816 = fdiv fast float %1815, %1652
  %1817 = fmul fast float %1816, %1813
  %1818 = fsub fast float %1811, %1817
  %1819 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1818)  ; FMax(a,b)
  %1820 = fadd fast float %1819, %1164
  br label %1821

; <label>:1821                                    ; preds = %1805, %1726, %1717, %1527, %1448, %1440, %1200, %1150, %457
  %1822 = phi float [ 0.000000e+00, %457 ], [ %1162, %1150 ], [ 0.000000e+00, %1527 ], [ 1.000000e+00, %1448 ], [ 0.000000e+00, %1805 ], [ 1.000000e+00, %1726 ], [ 1.000000e+00, %1717 ], [ 1.000000e+00, %1440 ], [ 1.000000e+00, %1200 ]
  %1823 = phi float [ -1.000000e+00, %457 ], [ %1159, %1150 ], [ %1530, %1527 ], [ -1.000000e+00, %1448 ], [ %1820, %1805 ], [ -1.000000e+00, %1726 ], [ -1.000000e+00, %1717 ], [ -1.000000e+00, %1440 ], [ -1.000000e+00, %1200 ]
  %1824 = fcmp fast olt float %1822, 1.000000e+00
  %1825 = and i1 %216, %1824
  br i1 %1825, label %1826, label %1834

; <label>:1826                                    ; preds = %1821
  %1827 = fmul fast float %206, %1823
  %1828 = call float @dx.op.unary.f32(i32 21, float %1827)  ; Exp(value)
  %1829 = call float @dx.op.unary.f32(i32 7, float %1828)  ; Saturate(value)
  %1830 = fsub fast float 1.000000e+00, %1829
  %1831 = fmul fast float %1830, %1822
  %1832 = fadd fast float %1831, %1829
  %1833 = fmul fast float %1832, %1832
  br label %1834

; <label>:1834                                    ; preds = %1826, %1821
  %1835 = phi float [ %1822, %1821 ], [ %1833, %1826 ]
  br i1 %74, label %2322, label %1836

; <label>:1836                                    ; preds = %1834
  %1837 = fcmp fast ogt float %1835, 0.000000e+00
  br i1 %1837, label %1838, label %2044

; <label>:1838                                    ; preds = %1836
  %1839 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1840 = extractvalue %dx.types.CBufRet.i32 %1839, 1
  %1841 = mul i32 %60, 1664525
  %1842 = mul i32 %62, 1664525
  %1843 = mul i32 %1840, 1664525
  %1844 = add i32 %1841, 1013904223
  %1845 = add i32 %1842, 1013904223
  %1846 = add i32 %1843, 1013904223
  %1847 = mul i32 %1846, %1845
  %1848 = add i32 %1844, %1847
  %1849 = mul i32 %1848, %1846
  %1850 = add i32 %1849, %1845
  %1851 = mul i32 %1850, %1848
  %1852 = add i32 %1851, %1846
  %1853 = mul i32 %1852, %1850
  %1854 = add i32 %1853, %1848
  %1855 = mul i32 %1854, %1852
  %1856 = add i32 %1855, %1850
  %1857 = lshr i32 %1854, 16
  %1858 = add i32 %1841, 1042201148
  %1859 = add i32 %1842, 1042201148
  %1860 = mul i32 %1846, %1859
  %1861 = add i32 %1858, %1860
  %1862 = mul i32 %1861, %1846
  %1863 = add i32 %1862, %1859
  %1864 = mul i32 %1863, %1861
  %1865 = add i32 %1864, %1846
  %1866 = mul i32 %1865, %1863
  %1867 = add i32 %1866, %1861
  %1868 = mul i32 %1867, %1865
  %1869 = add i32 %1868, %1863
  %1870 = lshr i32 %1867, 16
  %1871 = uitofp i32 %1840 to float
  %1872 = fmul fast float %1871, 1.250000e-01
  %1873 = uitofp i32 %1857 to float
  %1874 = fmul fast float %1873, 0x3EF0000000000000
  %1875 = fadd fast float %1874, %1872
  %1876 = call float @dx.op.unary.f32(i32 22, float %1875)  ; Frc(value)
  %1877 = call i32 @dx.op.unary.i32(i32 30, i32 %1840)  ; Bfrev(value)
  %1878 = xor i32 %1856, %1877
  %1879 = lshr i32 %1878, 16
  %1880 = uitofp i32 %1879 to float
  %1881 = fmul fast float %1880, 0x3EF0000000000000
  %1882 = uitofp i32 %1870 to float
  %1883 = fmul fast float %1882, 0x3EF0000000000000
  %1884 = fadd fast float %1883, %1872
  %1885 = call float @dx.op.unary.f32(i32 22, float %1884)  ; Frc(value)
  %1886 = xor i32 %1869, %1877
  %1887 = lshr i32 %1886, 16
  %1888 = uitofp i32 %1887 to float
  %1889 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1890 = extractvalue %dx.types.CBufRet.i32 %1889, 1
  %1891 = add nsw i32 %1890, -1
  %1892 = sitofp i32 %1891 to float
  %1893 = sitofp i32 %1890 to float
  %1894 = fmul fast float %1893, 0x3EF0000000000000
  %1895 = fmul fast float %1894, %1888
  %1896 = call float @dx.op.binary.f32(i32 36, float %1895, float %1892)  ; FMin(a,b)
  %1897 = fptoui float %1896 to i32
  %1898 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %1899 = extractvalue %dx.types.CBufRet.f32 %1898, 0
  %1900 = extractvalue %dx.types.CBufRet.f32 %1898, 1
  %1901 = extractvalue %dx.types.CBufRet.f32 %1898, 2
  %1902 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %1903 = extractvalue %dx.types.CBufRet.f32 %1902, 0
  %1904 = extractvalue %dx.types.CBufRet.f32 %1902, 1
  %1905 = extractvalue %dx.types.CBufRet.f32 %1902, 2
  %1906 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %1907 = extractvalue %dx.types.CBufRet.f32 %1906, 0
  %1908 = extractvalue %dx.types.CBufRet.f32 %1906, 1
  %1909 = extractvalue %dx.types.CBufRet.f32 %1906, 2
  %1910 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %1911 = extractvalue %dx.types.CBufRet.f32 %1910, 0
  %1912 = extractvalue %dx.types.CBufRet.f32 %1910, 1
  %1913 = extractvalue %dx.types.CBufRet.f32 %1910, 2
  %1914 = fmul fast float %1899, %257
  %1915 = call float @dx.op.tertiary.f32(i32 46, float %258, float %1903, float %1914)  ; FMad(a,b,c)
  %1916 = call float @dx.op.tertiary.f32(i32 46, float %259, float %1907, float %1915)  ; FMad(a,b,c)
  %1917 = fadd fast float %1916, %1911
  %1918 = fmul fast float %1900, %257
  %1919 = call float @dx.op.tertiary.f32(i32 46, float %258, float %1904, float %1918)  ; FMad(a,b,c)
  %1920 = call float @dx.op.tertiary.f32(i32 46, float %259, float %1908, float %1919)  ; FMad(a,b,c)
  %1921 = fadd fast float %1920, %1912
  %1922 = fmul fast float %1901, %257
  %1923 = call float @dx.op.tertiary.f32(i32 46, float %258, float %1905, float %1922)  ; FMad(a,b,c)
  %1924 = call float @dx.op.tertiary.f32(i32 46, float %259, float %1909, float %1923)  ; FMad(a,b,c)
  %1925 = fadd fast float %1924, %1913
  %1926 = fmul fast float %1917, %1917
  %1927 = fmul fast float %1921, %1921
  %1928 = fadd fast float %1927, %1926
  %1929 = fmul fast float %1925, %1925
  %1930 = fadd fast float %1928, %1929
  %1931 = call float @dx.op.unary.f32(i32 24, float %1930)  ; Sqrt(value)
  %1932 = fmul fast float %1931, %401
  %1933 = extractvalue %dx.types.CBufRet.i32 %1839, 2
  %1934 = uitofp i32 %1897 to float
  %1935 = fmul fast float %1934, 0x3FE827F520000000
  %1936 = fmul fast float %1934, 0x3FE23C21A0000000
  %1937 = call float @dx.op.unary.f32(i32 22, float %1935)  ; Frc(value)
  %1938 = call float @dx.op.unary.f32(i32 22, float %1936)  ; Frc(value)
  %1939 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1940 = extractvalue %dx.types.CBufRet.i32 %1939, 0
  %1941 = extractvalue %dx.types.CBufRet.i32 %1939, 1
  %1942 = sitofp i32 %1940 to float
  %1943 = sitofp i32 %1941 to float
  %1944 = fmul fast float %1942, %1937
  %1945 = fmul fast float %1943, %1938
  %1946 = fptosi float %1944 to i32
  %1947 = fptosi float %1945 to i32
  %1948 = add i32 %1946, %60
  %1949 = add i32 %1947, %62
  %1950 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1951 = extractvalue %dx.types.CBufRet.i32 %1950, 0
  %1952 = extractvalue %dx.types.CBufRet.i32 %1950, 1
  %1953 = extractvalue %dx.types.CBufRet.i32 %1950, 2
  %1954 = and i32 %1948, %1951
  %1955 = and i32 %1949, %1952
  %1956 = and i32 %1953, %1933
  %1957 = mul i32 %1956, %1941
  %1958 = add i32 %1955, %1957
  %1959 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1960 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1959, i32 0, i32 %1954, i32 %1958, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1961 = extractvalue %dx.types.ResRet.f32 %1960, 0
  %1962 = extractvalue %dx.types.ResRet.f32 %1960, 1
  %1963 = fmul fast float %1961, 2.000000e+00
  %1964 = fmul fast float %1962, 2.000000e+00
  %1965 = fadd fast float %1963, 0xBFEFFFFFE0000000
  %1966 = fadd fast float %1964, 0xBFEFFFFFE0000000
  %1967 = call float @dx.op.unary.f32(i32 6, float %1965)  ; FAbs(value)
  %1968 = call float @dx.op.unary.f32(i32 6, float %1966)  ; FAbs(value)
  %1969 = call float @dx.op.binary.f32(i32 36, float %1967, float %1968)  ; FMin(a,b)
  %1970 = call float @dx.op.binary.f32(i32 35, float %1967, float %1968)  ; FMax(a,b)
  %1971 = fadd fast float %1970, 0x3BF0000000000000
  %1972 = fdiv fast float %1969, %1971
  %1973 = fcmp fast oge float %1968, %1967
  %1974 = uitofp i1 %1973 to float
  %1975 = fmul fast float %1974, 2.000000e+00
  %1976 = fadd fast float %1972, %1975
  %1977 = fmul fast float %1976, 0x3FE921FB60000000
  %1978 = call float @dx.op.unary.f32(i32 12, float %1977)  ; Cos(value)
  %1979 = call float @dx.op.unary.f32(i32 13, float %1977)  ; Sin(value)
  %1980 = bitcast float %1978 to i32
  %1981 = bitcast float %1979 to i32
  %1982 = and i32 %1980, 2147483647
  %1983 = and i32 %1981, 2147483647
  %1984 = bitcast float %1965 to i32
  %1985 = bitcast float %1966 to i32
  %1986 = and i32 %1984, -2147483648
  %1987 = and i32 %1985, -2147483648
  %1988 = or i32 %1982, %1986
  %1989 = or i32 %1983, %1987
  %1990 = bitcast i32 %1988 to float
  %1991 = bitcast i32 %1989 to float
  %1992 = fmul fast float %1970, %224
  %1993 = fmul fast float %1992, %1990
  %1994 = fmul fast float %1992, %1991
  %1995 = call float @dx.op.unary.f32(i32 6, float %211)  ; FAbs(value)
  %1996 = fcmp fast ogt float %1995, 0x3EB0C6F7A0000000
  %1997 = select i1 %1996, float 1.000000e+00, float 0.000000e+00
  %1998 = select i1 %1996, float 0.000000e+00, float 1.000000e+00
  %1999 = fmul fast float %213, %1998
  %2000 = fsub fast float -0.000000e+00, %1999
  %2001 = fmul fast float %1997, %213
  %2002 = fmul fast float %1998, %211
  %2003 = fmul fast float %1997, %212
  %2004 = fsub fast float %2002, %2003
  %2005 = fmul fast float %2001, %213
  %2006 = fmul fast float %2004, %212
  %2007 = fsub fast float %2005, %2006
  %2008 = fmul fast float %2004, %211
  %2009 = fmul fast float %213, %2000
  %2010 = fsub fast float %2008, %2009
  %2011 = fmul fast float %212, %2000
  %2012 = fmul fast float %2001, %211
  %2013 = fsub fast float %2011, %2012
  %2014 = fmul fast float %1993, %2000
  %2015 = fmul fast float %1993, %2001
  %2016 = fmul fast float %2004, %1993
  %2017 = fmul fast float %2007, %1994
  %2018 = fmul fast float %2010, %1994
  %2019 = fmul fast float %2013, %1994
  %2020 = fadd fast float %2014, %211
  %2021 = fadd fast float %2020, %2017
  %2022 = fadd fast float %2015, %212
  %2023 = fadd fast float %2022, %2018
  %2024 = fadd fast float %2016, %213
  %2025 = fadd fast float %2024, %2019
  %2026 = call float @dx.op.dot3.f32(i32 55, float %2021, float %2023, float %2025, float %2021, float %2023, float %2025)  ; Dot3(ax,ay,az,bx,by,bz)
  %2027 = call float @dx.op.unary.f32(i32 25, float %2026)  ; Rsqrt(value)
  %2028 = fmul fast float %2027, %1932
  %2029 = fmul fast float %2028, %2021
  %2030 = fmul fast float %2028, %2023
  %2031 = fmul fast float %2028, %2025
  %2032 = fadd fast float %2029, %257
  %2033 = fadd fast float %2030, %258
  %2034 = fadd fast float %2031, %259
  %2035 = fmul float %1876, 2.000000e+00
  %2036 = fmul float %1881, 2.000000e+00
  %2037 = fmul float %1885, 2.000000e+00
  %2038 = fadd float %2035, -1.000000e+00
  %2039 = fadd float %2036, -1.000000e+00
  %2040 = fadd float %2037, -1.000000e+00
  %2041 = fmul float %2038, 5.000000e-01
  %2042 = fmul float %2039, 5.000000e-01
  %2043 = fmul float %2040, 5.000000e-01
  br label %2044

; <label>:2044                                    ; preds = %1838, %1836
  %2045 = phi float [ %257, %1838 ], [ 0.000000e+00, %1836 ]
  %2046 = phi float [ %258, %1838 ], [ 0.000000e+00, %1836 ]
  %2047 = phi float [ %259, %1838 ], [ 0.000000e+00, %1836 ]
  %2048 = phi float [ %2032, %1838 ], [ 0.000000e+00, %1836 ]
  %2049 = phi float [ %2033, %1838 ], [ 0.000000e+00, %1836 ]
  %2050 = phi float [ %2034, %1838 ], [ 0.000000e+00, %1836 ]
  %2051 = phi i1 [ true, %1838 ], [ false, %1836 ]
  %2052 = phi float [ %2041, %1838 ], [ -5.000000e-01, %1836 ]
  %2053 = phi float [ %2042, %1838 ], [ -5.000000e-01, %1836 ]
  %2054 = phi float [ %2043, %1838 ], [ -5.000000e-01, %1836 ]
  br i1 %2051, label %2055, label %2322

; <label>:2055                                    ; preds = %2044
  %2056 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2057 = extractvalue %dx.types.CBufRet.f32 %2056, 0
  %2058 = fmul fast float %2057, %211
  %2059 = fmul fast float %2057, %212
  %2060 = fmul fast float %2057, %213
  %2061 = fadd fast float %2058, %2052
  %2062 = fadd fast float %2059, %2053
  %2063 = fadd fast float %2060, %2054
  %2064 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2065 = extractvalue %dx.types.CBufRet.i32 %2064, 0
  %2066 = extractvalue %dx.types.CBufRet.i32 %2064, 1
  %2067 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2068 = extractvalue %dx.types.CBufRet.i32 %2067, 0
  %2069 = extractvalue %dx.types.CBufRet.i32 %2067, 1
  %2070 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2071 = extractvalue %dx.types.CBufRet.f32 %2070, 0
  %2072 = extractvalue %dx.types.CBufRet.f32 %2056, 3
  %2073 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2074 = extractvalue %dx.types.CBufRet.i32 %2073, 0
  %2075 = icmp eq i32 %2074, 0
  br i1 %2075, label %2322, label %2076

; <label>:2076                                    ; preds = %2055
  br label %2077

; <label>:2077                                    ; preds = %2314, %2076
  %2078 = phi float [ %2318, %2314 ], [ %1835, %2076 ]
  %2079 = phi i32 [ %2319, %2314 ], [ 0, %2076 ]
  %2080 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %2081 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2080, i32 %2079, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2082 = extractvalue %dx.types.ResRet.f32 %2081, 0
  %2083 = extractvalue %dx.types.ResRet.f32 %2081, 1
  %2084 = extractvalue %dx.types.ResRet.f32 %2081, 2
  %2085 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2080, i32 %2079, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2086 = extractvalue %dx.types.ResRet.i32 %2085, 0
  %2087 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2080, i32 %2079, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2088 = extractvalue %dx.types.ResRet.f32 %2087, 0
  %2089 = extractvalue %dx.types.ResRet.f32 %2087, 1
  %2090 = extractvalue %dx.types.ResRet.f32 %2087, 2
  %2091 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2080, i32 %2079, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2092 = extractvalue %dx.types.ResRet.i32 %2091, 0
  %2093 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2094 = extractvalue %dx.types.CBufRet.i32 %2093, 0
  %2095 = and i32 %2086, 255
  %2096 = lshr i32 %2086, 8
  %2097 = and i32 %2096, 255
  %2098 = lshr i32 %2086, 16
  %2099 = and i32 %2098, 255
  %2100 = mul i32 %2094, %2095
  %2101 = mul i32 %2094, %2097
  %2102 = mul i32 %2094, %2099
  %2103 = and i32 %2092, 4194303
  %2104 = lshr i32 %2092, 22
  %2105 = uitofp i32 %2104 to float
  %2106 = fmul fast float %2105, 0x3F84050140000000
  %2107 = icmp ne i32 %2095, 0
  %2108 = icmp ne i32 %2097, 0
  %2109 = icmp ne i32 %2099, 0
  %2110 = and i1 %2107, %2108
  %2111 = and i1 %2109, %2110
  %2112 = fmul fast float %2106, %2061
  %2113 = fmul fast float %2106, %2062
  %2114 = fmul fast float %2106, %2063
  %2115 = fadd fast float %2112, %2045
  %2116 = fadd fast float %2113, %2046
  %2117 = fadd fast float %2114, %2047
  %2118 = fdiv fast float 0x4059933340000000, %2105
  br i1 %2111, label %2119, label %2314

; <label>:2119                                    ; preds = %2077
  %2120 = fsub fast float %2048, %2115
  %2121 = fsub fast float %2049, %2116
  %2122 = fsub fast float %2050, %2117
  %2123 = fdiv fast float 1.000000e+00, %2120
  %2124 = fdiv fast float 1.000000e+00, %2121
  %2125 = fdiv fast float 1.000000e+00, %2122
  %2126 = fsub fast float %2082, %2115
  %2127 = fsub fast float %2083, %2116
  %2128 = fsub fast float %2084, %2117
  %2129 = fmul fast float %2123, %2126
  %2130 = fmul fast float %2124, %2127
  %2131 = fmul fast float %2125, %2128
  %2132 = fsub fast float %2088, %2115
  %2133 = fsub fast float %2089, %2116
  %2134 = fsub fast float %2090, %2117
  %2135 = fmul fast float %2123, %2132
  %2136 = fmul fast float %2124, %2133
  %2137 = fmul fast float %2125, %2134
  %2138 = call float @dx.op.binary.f32(i32 36, float %2129, float %2135)  ; FMin(a,b)
  %2139 = call float @dx.op.binary.f32(i32 36, float %2130, float %2136)  ; FMin(a,b)
  %2140 = call float @dx.op.binary.f32(i32 36, float %2131, float %2137)  ; FMin(a,b)
  %2141 = call float @dx.op.binary.f32(i32 35, float %2129, float %2135)  ; FMax(a,b)
  %2142 = call float @dx.op.binary.f32(i32 35, float %2130, float %2136)  ; FMax(a,b)
  %2143 = call float @dx.op.binary.f32(i32 35, float %2131, float %2137)  ; FMax(a,b)
  %2144 = call float @dx.op.binary.f32(i32 35, float %2139, float %2140)  ; FMax(a,b)
  %2145 = call float @dx.op.binary.f32(i32 35, float %2138, float %2144)  ; FMax(a,b)
  %2146 = call float @dx.op.binary.f32(i32 36, float %2142, float %2143)  ; FMin(a,b)
  %2147 = call float @dx.op.binary.f32(i32 36, float %2141, float %2146)  ; FMin(a,b)
  %2148 = call float @dx.op.unary.f32(i32 7, float %2145)  ; Saturate(value)
  %2149 = call float @dx.op.unary.f32(i32 7, float %2147)  ; Saturate(value)
  %2150 = fcmp fast olt float %2148, %2149
  br i1 %2150, label %2151, label %2314

; <label>:2151                                    ; preds = %2119
  %2152 = fmul fast float %2148, %2120
  %2153 = fmul fast float %2148, %2121
  %2154 = fmul fast float %2148, %2122
  %2155 = fsub fast float %2149, %2148
  %2156 = fmul fast float %2120, %2155
  %2157 = fsub fast float %2149, %2148
  %2158 = fmul fast float %2121, %2157
  %2159 = fsub fast float %2149, %2148
  %2160 = fmul fast float %2122, %2159
  %2161 = fmul fast float %2156, %2156
  %2162 = fmul fast float %2158, %2158
  %2163 = fadd fast float %2161, %2162
  %2164 = fmul fast float %2160, %2160
  %2165 = fadd fast float %2163, %2164
  %2166 = call float @dx.op.unary.f32(i32 24, float %2165)  ; Sqrt(value)
  %2167 = call float @dx.op.binary.f32(i32 36, float %2166, float 1.000000e+05)  ; FMin(a,b)
  %2168 = call float @dx.op.dot3.f32(i32 55, float %2156, float %2158, float %2160, float %2156, float %2158, float %2160)  ; Dot3(ax,ay,az,bx,by,bz)
  %2169 = call float @dx.op.unary.f32(i32 25, float %2168)  ; Rsqrt(value)
  %2170 = fdiv fast float %2167, %2106
  %2171 = call float @dx.op.unary.f32(i32 28, float %2170)  ; Round_pi(value)
  %2172 = call float @dx.op.binary.f32(i32 36, float %2171, float 1.024000e+03)  ; FMin(a,b)
  %2173 = fdiv fast float %2167, %2172
  %2174 = fcmp fast ogt float %2172, 0.000000e+00
  br i1 %2174, label %2175, label %2314

; <label>:2175                                    ; preds = %2151
  br label %2176

; <label>:2176                                    ; preds = %2305, %2175
  %2177 = phi i32 [ %2263, %2305 ], [ 9999, %2175 ]
  %2178 = phi i32 [ %2264, %2305 ], [ 9999, %2175 ]
  %2179 = phi i32 [ %2265, %2305 ], [ 9999, %2175 ]
  %2180 = phi i32 [ %2266, %2305 ], [ 0, %2175 ]
  %2181 = phi i32 [ %2267, %2305 ], [ 0, %2175 ]
  %2182 = phi i32 [ %2268, %2305 ], [ 0, %2175 ]
  %2183 = phi i32 [ %2269, %2305 ], [ 0, %2175 ]
  %2184 = phi float [ %2309, %2305 ], [ 1.000000e+00, %2175 ]
  %2185 = phi float [ %2310, %2305 ], [ 0.000000e+00, %2175 ]
  %2186 = phi float [ %2306, %2305 ], [ 0.000000e+00, %2175 ]
  %2187 = fmul fast float %2184, %2173
  %2188 = call float @dx.op.binary.f32(i32 35, float %2187, float 0.000000e+00)  ; FMax(a,b)
  %2189 = fmul fast float %2156, %2106
  %2190 = fmul fast float %2189, %2169
  %2191 = fmul fast float %2190, %2185
  %2192 = fmul fast float %2158, %2106
  %2193 = fmul fast float %2192, %2169
  %2194 = fmul fast float %2193, %2185
  %2195 = fmul fast float %2160, %2106
  %2196 = fmul fast float %2195, %2169
  %2197 = fmul fast float %2196, %2185
  %2198 = fmul fast float %2052, %2188
  %2199 = fmul fast float %2053, %2188
  %2200 = fmul fast float %2054, %2188
  %2201 = add i32 %2100, -1
  %2202 = add i32 %2101, -1
  %2203 = add i32 %2102, -1
  %2204 = fsub fast float %2115, %2082
  %2205 = fadd fast float %2204, %2152
  %2206 = fadd fast float %2205, %2191
  %2207 = fadd fast float %2206, %2198
  %2208 = fsub fast float %2116, %2083
  %2209 = fadd fast float %2208, %2153
  %2210 = fadd fast float %2209, %2194
  %2211 = fadd fast float %2210, %2199
  %2212 = fsub fast float %2117, %2084
  %2213 = fadd fast float %2212, %2154
  %2214 = fadd fast float %2213, %2197
  %2215 = fadd fast float %2214, %2200
  %2216 = fsub fast float %2088, %2082
  %2217 = fsub fast float %2089, %2083
  %2218 = fsub fast float %2090, %2084
  %2219 = fdiv fast float %2207, %2216
  %2220 = fdiv fast float %2211, %2217
  %2221 = fdiv fast float %2215, %2218
  %2222 = call float @dx.op.unary.f32(i32 7, float %2219)  ; Saturate(value)
  %2223 = call float @dx.op.unary.f32(i32 7, float %2220)  ; Saturate(value)
  %2224 = call float @dx.op.unary.f32(i32 7, float %2221)  ; Saturate(value)
  %2225 = uitofp i32 %2100 to float
  %2226 = uitofp i32 %2101 to float
  %2227 = uitofp i32 %2102 to float
  %2228 = fmul fast float %2222, %2225
  %2229 = fmul fast float %2223, %2226
  %2230 = fmul fast float %2224, %2227
  %2231 = fptoui float %2228 to i32
  %2232 = fptoui float %2229 to i32
  %2233 = fptoui float %2230 to i32
  %2234 = call i32 @dx.op.binary.i32(i32 40, i32 %2231, i32 %2201)  ; UMin(a,b)
  %2235 = call i32 @dx.op.binary.i32(i32 40, i32 %2232, i32 %2202)  ; UMin(a,b)
  %2236 = call i32 @dx.op.binary.i32(i32 40, i32 %2233, i32 %2203)  ; UMin(a,b)
  %2237 = and i32 %2069, 31
  %2238 = lshr i32 %2234, %2237
  %2239 = lshr i32 %2235, %2237
  %2240 = lshr i32 %2236, %2237
  %2241 = icmp ne i32 %2238, %2177
  %2242 = icmp ne i32 %2239, %2178
  %2243 = icmp ne i32 %2240, %2179
  %2244 = or i1 %2241, %2242
  %2245 = or i1 %2244, %2243
  br i1 %2245, label %2246, label %2262

; <label>:2246                                    ; preds = %2176
  %2247 = mul i32 %2240, %2097
  %2248 = add i32 %2247, %2239
  %2249 = mul i32 %2248, %2095
  %2250 = add i32 %2238, %2103
  %2251 = add i32 %2250, %2249
  %2252 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2253 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2252, i32 %2251, i32 undef)  ; BufferLoad(srv,index,wot)
  %2254 = extractvalue %dx.types.ResRet.i32 %2253, 0
  %2255 = icmp ne i32 %2254, -1
  %2256 = zext i1 %2255 to i32
  %2257 = mul i32 %2065, %2066
  %2258 = urem i32 %2254, %2257
  %2259 = urem i32 %2258, %2065
  %2260 = udiv i32 %2258, %2065
  %2261 = udiv i32 %2254, %2257
  br label %2262

; <label>:2262                                    ; preds = %2246, %2176
  %2263 = phi i32 [ %2238, %2246 ], [ %2177, %2176 ]
  %2264 = phi i32 [ %2239, %2246 ], [ %2178, %2176 ]
  %2265 = phi i32 [ %2240, %2246 ], [ %2179, %2176 ]
  %2266 = phi i32 [ %2256, %2246 ], [ %2180, %2176 ]
  %2267 = phi i32 [ %2259, %2246 ], [ %2181, %2176 ]
  %2268 = phi i32 [ %2260, %2246 ], [ %2182, %2176 ]
  %2269 = phi i32 [ %2261, %2246 ], [ %2183, %2176 ]
  %2270 = icmp eq i32 %2266, 0
  br i1 %2270, label %2305, label %2271

; <label>:2271                                    ; preds = %2262
  %2272 = shl i32 %2267, %2237
  %2273 = shl i32 %2268, %2237
  %2274 = shl i32 %2269, %2237
  %2275 = shl i32 %2238, %2237
  %2276 = shl i32 %2239, %2237
  %2277 = shl i32 %2240, %2237
  %2278 = sub i32 %2234, %2275
  %2279 = sub i32 %2235, %2276
  %2280 = sub i32 %2236, %2277
  %2281 = add i32 %2278, %2272
  %2282 = add i32 %2279, %2273
  %2283 = add i32 %2280, %2274
  %2284 = fmul fast float %2188, %2118
  %2285 = call float @dx.op.unary.f32(i32 23, float %2284)  ; Log(value)
  %2286 = fptoui float %2285 to i32
  %2287 = and i32 %2286, 31
  %2288 = lshr i32 %2281, %2287
  %2289 = lshr i32 %2282, %2287
  %2290 = lshr i32 %2283, %2287
  %2291 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %2292 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2291, i32 %2286, i32 %2288, i32 %2289, i32 %2290, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2293 = extractvalue %dx.types.ResRet.i32 %2292, 0
  %2294 = icmp sgt i32 %2293, -1
  br i1 %2294, label %2295, label %2301

; <label>:2295                                    ; preds = %2271
  %2296 = and i32 %2293, 16777215
  %2297 = uitofp i32 %2296 to float
  %2298 = fmul fast float %2071, 0x3F50624DE0000000
  %2299 = fmul fast float %2298, %2284
  %2300 = fmul fast float %2299, %2297
  br label %2301

; <label>:2301                                    ; preds = %2295, %2271
  %2302 = phi float [ %2300, %2295 ], [ 0.000000e+00, %2271 ]
  %2303 = fadd fast float %2302, %2186
  %2304 = fcmp fast ogt float %2303, 1.000000e+00
  br i1 %2304, label %2312, label %2305

; <label>:2305                                    ; preds = %2301, %2262
  %2306 = phi float [ %2303, %2301 ], [ %2186, %2262 ]
  %2307 = fmul fast float %2184, %2072
  %2308 = uitofp i32 %2068 to float
  %2309 = call float @dx.op.binary.f32(i32 36, float %2308, float %2307)  ; FMin(a,b)
  %2310 = fadd fast float %2309, %2185
  %2311 = fcmp fast olt float %2310, %2172
  br i1 %2311, label %2176, label %2312

; <label>:2312                                    ; preds = %2305, %2301
  %2313 = phi float [ %2306, %2305 ], [ %2303, %2301 ]
  br label %2314

; <label>:2314                                    ; preds = %2312, %2151, %2119, %2077
  %2315 = phi float [ 0.000000e+00, %2119 ], [ 0.000000e+00, %2077 ], [ 0.000000e+00, %2151 ], [ %2313, %2312 ]
  %2316 = fsub fast float 1.000000e+00, %2315
  %2317 = call float @dx.op.unary.f32(i32 7, float %2316)  ; Saturate(value)
  %2318 = call float @dx.op.binary.f32(i32 36, float %2078, float %2317)  ; FMin(a,b)
  %2319 = add nuw i32 %2079, 1
  %2320 = icmp eq i32 %2319, %2074
  br i1 %2320, label %2321, label %2077

; <label>:2321                                    ; preds = %2314
  br label %2322

; <label>:2322                                    ; preds = %2321, %2055, %2044, %1834, %223
  %2323 = phi float [ %1835, %1834 ], [ %1835, %2044 ], [ 1.000000e+00, %223 ], [ %1835, %2055 ], [ %2318, %2321 ]
  %2324 = fcmp fast ogt float %2323, 0x3F91111120000000
  %2325 = fcmp fast olt float %2323, 1.000000e+00
  %2326 = and i1 %2324, %2325
  br i1 %2326, label %2327, label %2348

; <label>:2327                                    ; preds = %2322
  %2328 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2329 = extractvalue %dx.types.CBufRet.i32 %2328, 2
  %2330 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2331 = extractvalue %dx.types.CBufRet.i32 %2330, 0
  %2332 = extractvalue %dx.types.CBufRet.i32 %2330, 1
  %2333 = extractvalue %dx.types.CBufRet.i32 %2330, 2
  %2334 = and i32 %2331, %60
  %2335 = and i32 %2332, %62
  %2336 = and i32 %2333, %2329
  %2337 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2338 = extractvalue %dx.types.CBufRet.i32 %2337, 1
  %2339 = mul i32 %2336, %2338
  %2340 = add i32 %2339, %2335
  %2341 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2342 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2341, i32 0, i32 %2334, i32 %2340, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2343 = extractvalue %dx.types.ResRet.f32 %2342, 0
  %2344 = fadd fast float %2343, -5.000000e-01
  %2345 = fmul fast float %2344, 0x3FB1111120000000
  %2346 = fadd fast float %2345, %2323
  %2347 = call float @dx.op.unary.f32(i32 7, float %2346)  ; Saturate(value)
  br label %2348

; <label>:2348                                    ; preds = %2327, %2322
  %2349 = phi float [ %2347, %2327 ], [ %2323, %2322 ]
  %2350 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 521 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<2xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2350, i32 %60, i32 %62, i32 undef, float %2349, float %2349, float %2349, float %2349, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  ret void

; <label>:2351                                    ; preds = %75, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind
declare i1 @dx.op.waveAllTrue(i32, i1) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!32}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !23, !25, !30}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !16, !17, !18, !19, !21, !22}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!12 = !{i32 5, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 4}
!14 = !{i32 6, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 7, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!18 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !15}
!19 = !{i32 10, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 10, i32 1, i32 12, i32 0, !20}
!20 = !{i32 1, i32 32}
!21 = !{i32 11, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 4, i32 0, !15}
!22 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!23 = !{!24}
!24 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!25 = !{!26, !27, !28, !29}
!26 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 368, null}
!27 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!28 = !{i32 2, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 2, i32 1, i32 44, null}
!29 = !{i32 3, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 3, i32 1, i32 228, null}
!30 = !{!31}
!31 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!32 = !{void ()* @VirtualShadowMapProjection, !"VirtualShadowMapProjection", null, !4, !33}
!33 = !{i32 0, i64 524304, i32 4, !34, i32 5, !35}
!34 = !{i32 8, i32 8, i32 1}
!35 = !{i32 0}
