;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 82fdf74c8bee74f66d96e10e06559fb6
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(32,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  144
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  148
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  152
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  160
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint NumSceneObjects;                         ; Offset:  272
;       uint NumSceneHeightfieldObjects;              ; Offset:  296
;       float3 DistanceFieldBrickSize;                ; Offset:  352
;       float3 DistanceFieldUniqueDataBrickSize;      ; Offset:  368
;       uint3 DistanceFieldBrickAtlasSizeInBricks;    ; Offset:  384
;       uint3 DistanceFieldBrickAtlasMask;            ; Offset:  400
;       uint3 DistanceFieldBrickAtlasSizeLog2;        ; Offset:  416
;       float3 DistanceFieldBrickAtlasTexelSize;      ; Offset:  432
;       float3 DistanceFieldBrickAtlasHalfTexelSize;  ; Offset:  448
;       float3 DistanceFieldBrickOffsetToAtlasUVScale;; Offset:  464
;       float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;; Offset:  480
;       float MeshSDFNotCoveredExpandSurfaceScale;    ; Offset:  496
;       float MeshSDFNotCoveredMinStepScale;          ; Offset:  500
;       float MeshSDFDitheredTransparencyStepThreshold;; Offset:  504
;       uint CardGridPixelSizeShift;                  ; Offset:  536
;       float3 CardGridZParams;                       ; Offset:  544
;       uint3 CullGridSize;                           ; Offset:  560
;       uint ReflectionDownsampleFactor;              ; Offset:  640
;       uint2 ReflectionTracingViewSize;              ; Offset:  648
;       uint2 ReflectionTracingBufferSize;            ; Offset:  656
;       float MaxRayIntensity;                        ; Offset:  664
;       float ReflectionSmoothBias;                   ; Offset:  668
;       uint ReflectionPass;                          ; Offset:  672
;       uint UseJitter;                               ; Offset:  676
;       uint UseHighResSurface;                       ; Offset:  680
;       float NearFieldMaxTraceDistance;              ; Offset:  688
;       float CardTraceEndDistanceFromCamera;         ; Offset:  852
;       float MaxTraceDistance;                       ; Offset:  872
;       float MaxMeshSDFTraceDistance;                ; Offset:  876
;       float SurfaceBias;                            ; Offset:  880
;       int HeightfieldMaxTracingSteps;               ; Offset:  896
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   900
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_NumPrimitiveGroups;       ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       float PrePadding_LumenCardScene_44;           ; Offset:   44
;       uint BindlessResource_LumenCardScene_CardData;; Offset:   48
;       uint PrePadding_LumenCardScene_52;            ; Offset:   52
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:   56
;       uint PrePadding_LumenCardScene_60;            ; Offset:   60
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:   64
;       uint PrePadding_LumenCardScene_68;            ; Offset:   68
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:   72
;       uint PrePadding_LumenCardScene_76;            ; Offset:   76
;       uint BindlessResource_LumenCardScene_PrimitiveGroupData;; Offset:   80
;       uint PrePadding_LumenCardScene_84;            ; Offset:   84
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:   88
;       uint PrePadding_LumenCardScene_92;            ; Offset:   92
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:   96
;       uint PrePadding_LumenCardScene_100;           ; Offset:  100
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  104
;       uint PrePadding_LumenCardScene_108;           ; Offset:  108
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  136
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   140
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_HeightfieldData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneDistanceFieldAssetData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneObjectData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearWrappedSampler   sampler      NA          NA      S1   s2,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S2   s3,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S3             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S4             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; LumenCardScene_CardData           texture  struct         r/o      T1             t1     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T2             t2     1
; LumenCardScene_HeightfieldData    texture  struct         r/o      T3             t3     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T4             t4     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T5             t5     1
; LumenCardScene_OpacityAtlas       texture     f32          2d      T6             t6     1
; LumenCardScene_DepthAtlas         texture     f32          2d      T7             t7     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T8             t8     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T9             t9     1
; FinalLightingAtlas                texture     f32          2d     T10            t10     1
; DepthAtlas                        texture     f32          2d     T11            t11     1
; DistanceFieldIndirectionAtlas     texture     f32          3d     T12            t12     1
; DistanceFieldBrickTexture         texture     f32          3d     T13            t13     1
; SceneDistanceFieldAssetData       texture  struct         r/o     T14            t14     1
; SceneObjectData                   texture  struct         r/o     T15            t15     1
; NumGridCulledMeshSDFObjects       texture     u32         buf     T16            t16     1
; GridCulledMeshSDFObjectStartOffsetArray   texture     u32         buf     T17            t17     1
; GridCulledMeshSDFObjectIndicesArray   texture     u32         buf     T18            t18     1
; NumGridCulledHeightfieldObjects   texture     u32         buf     T19            t19     1
; GridCulledHeightfieldObjectStartOffsetArray   texture     u32         buf     T20            t20     1
; GridCulledHeightfieldObjectIndicesArray   texture     u32         buf     T21            t21     1
; DownsampledDepth                  texture     f32          2d     T22            t22     1
; RayBuffer                         texture     f32          2d     T23            t23     1
; RayTraceDistance                  texture     u32          2d     T24            t24     1
; CompactedTraceTexelAllocator      texture     u32         buf     T25            t25     1
; CompactedTraceTexelData           texture     u32         buf     T26            t26     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U0             u0     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U2             u2     1
; RWTraceHit                            UAV     f32          2d      U3             u3     1
; RWTraceRadiance                       UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, i32, <3 x float>, <3 x float>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, float, float, float, i32, <3 x float>, <3 x i32>, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, float, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceMeshSDFsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 1000, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 13, i32 140 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 13, i32 900 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %49 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %50 = alloca [6 x i32], align 4
  %51 = alloca [6 x i32], align 4
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %53 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %52, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %54 = extractvalue %dx.types.ResRet.i32 %53, 0
  %55 = icmp ult i32 %49, %54
  br i1 %55, label %56, label %3123

; <label>:56                                      ; preds = %0
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %58 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %57, i32 %49, i32 undef)  ; BufferLoad(srv,index,wot)
  %59 = extractvalue %dx.types.ResRet.i32 %58, 0
  %60 = and i32 %59, 65535
  %61 = lshr i32 %59, 16
  %62 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  %63 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %62, i32 undef, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %64 = extractvalue %dx.types.ResRet.f32 %63, 0
  %65 = call float @dx.op.unary.f32(i32 6, float %64)  ; FAbs(value)
  %66 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.i32 %66, 0
  %68 = mul i32 %67, %60
  %69 = mul i32 %67, %61
  %70 = uitofp i32 %68 to float
  %71 = uitofp i32 %69 to float
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = fadd fast float %73, 5.000000e-01
  %76 = fadd fast float %75, %70
  %77 = fadd fast float %74, 5.000000e-01
  %78 = fadd fast float %77, %71
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = fadd fast float %73, -1.000000e+00
  %83 = fadd fast float %82, %80
  %84 = fadd fast float %74, -1.000000e+00
  %85 = fadd fast float %84, %81
  %86 = call float @dx.op.binary.f32(i32 36, float %76, float %83)  ; FMin(a,b)
  %87 = call float @dx.op.binary.f32(i32 36, float %78, float %85)  ; FMin(a,b)
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %91 = fmul fast float %89, %86
  %92 = fmul fast float %90, %87
  %93 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %94 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %93, i32 0, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %95 = extractvalue %dx.types.ResRet.f32 %94, 0
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 3
  %99 = fsub fast float %91, %98
  %100 = fsub fast float %92, %97
  %101 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %102 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %103 = fdiv fast float %99, %101
  %104 = fdiv fast float %100, %102
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = fmul fast float %122, 2.097152e+06
  %126 = fmul fast float %123, 2.097152e+06
  %127 = fmul fast float %124, 2.097152e+06
  %128 = fadd fast float %125, %118
  %129 = fadd fast float %126, %119
  %130 = fadd fast float %127, %120
  %131 = fmul fast float %103, %95
  %132 = fmul fast float %104, %95
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 3
  %135 = bitcast float %134 to i32
  %136 = icmp ne i32 %135, 0
  %137 = select i1 %136, float %103, float %131
  %138 = select i1 %136, float %104, float %132
  %139 = fmul fast float %137, %106
  %140 = call float @dx.op.tertiary.f32(i32 46, float %138, float %110, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %95, float %114, float %140)  ; FMad(a,b,c)
  %142 = fadd fast float %128, %141
  %143 = fmul fast float %137, %107
  %144 = call float @dx.op.tertiary.f32(i32 46, float %138, float %111, float %143)  ; FMad(a,b,c)
  %145 = call float @dx.op.tertiary.f32(i32 46, float %95, float %115, float %144)  ; FMad(a,b,c)
  %146 = fadd fast float %129, %145
  %147 = fmul fast float %137, %108
  %148 = call float @dx.op.tertiary.f32(i32 46, float %138, float %112, float %147)  ; FMad(a,b,c)
  %149 = call float @dx.op.tertiary.f32(i32 46, float %95, float %116, float %148)  ; FMad(a,b,c)
  %150 = fadd fast float %130, %149
  %151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %152 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %151, i32 0, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %153 = extractvalue %dx.types.ResRet.f32 %152, 0
  %154 = extractvalue %dx.types.ResRet.f32 %152, 1
  %155 = extractvalue %dx.types.ResRet.f32 %152, 2
  %156 = extractvalue %dx.types.ResRet.f32 %152, 3
  %157 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %158 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %157, i32 0, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %159 = extractvalue %dx.types.ResRet.i32 %158, 0
  %160 = and i32 %159, 32767
  %161 = call float @dx.op.legacyF16ToF32(i32 131, i32 %160)  ; LegacyF16ToF32(value)
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = fmul fast float %163, %153
  %165 = fmul fast float %163, %154
  %166 = fmul fast float %163, %155
  %167 = fadd fast float %164, %142
  %168 = fadd fast float %165, %146
  %169 = fadd fast float %166, %150
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %172 = fadd fast float %171, %156
  %173 = fsub fast float %65, %163
  %174 = call float @dx.op.binary.f32(i32 35, float %173, float 0.000000e+00)  ; FMax(a,b)
  %175 = call float @dx.op.unary.f32(i32 14, float %172)  ; Tan(value)
  %176 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.i32 %176, 2
  %178 = icmp ne i32 %177, 0
  %179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.f32 %179, 3
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 0
  %183 = fmul fast float %182, %95
  %184 = extractvalue %dx.types.CBufRet.f32 %181, 1
  %185 = fadd fast float %183, %184
  %186 = call float @dx.op.unary.f32(i32 23, float %185)  ; Log(value)
  %187 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %188 = fmul fast float %187, %186
  %189 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %188)  ; FMax(a,b)
  %190 = fptoui float %189 to i32
  %191 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.i32 %191, 2
  %193 = add i32 %192, -1
  %194 = call i32 @dx.op.binary.i32(i32 40, i32 %190, i32 %193)  ; UMin(a,b)
  %195 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.i32 %195, 2
  %197 = and i32 %196, 31
  %198 = lshr i32 %68, %197
  %199 = lshr i32 %69, %197
  %200 = extractvalue %dx.types.CBufRet.i32 %191, 1
  %201 = mul i32 %200, %194
  %202 = add i32 %201, %199
  %203 = extractvalue %dx.types.CBufRet.i32 %191, 0
  %204 = mul i32 %202, %203
  %205 = add i32 %204, %198
  %206 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %207 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %206, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %208 = extractvalue %dx.types.ResRet.i32 %207, 0
  %209 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %210 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %209, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %211 = extractvalue %dx.types.ResRet.i32 %210, 0
  %212 = fcmp fast ogt float %180, %174
  br i1 %212, label %213, label %1469

; <label>:213                                     ; preds = %56
  %214 = icmp eq i32 %208, 0
  br i1 %214, label %489, label %215

; <label>:215                                     ; preds = %213
  br label %216

; <label>:216                                     ; preds = %483, %215
  %217 = phi i32 [ %486, %483 ], [ 0, %215 ]
  %218 = phi i32 [ %484, %483 ], [ 0, %215 ]
  %219 = phi float [ %485, %483 ], [ %180, %215 ]
  %220 = add i32 %217, %211
  %221 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %222 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %221, i32 %220, i32 undef)  ; BufferLoad(srv,index,wot)
  %223 = extractvalue %dx.types.ResRet.i32 %222, 0
  %224 = mul i32 %223, 10
  %225 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %226 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %224, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %227 = extractvalue %dx.types.ResRet.f32 %226, 0
  %228 = extractvalue %dx.types.ResRet.f32 %226, 1
  %229 = extractvalue %dx.types.ResRet.f32 %226, 2
  %230 = or i32 %224, 1
  %231 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %230, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %232 = extractvalue %dx.types.ResRet.f32 %231, 0
  %233 = extractvalue %dx.types.ResRet.f32 %231, 1
  %234 = extractvalue %dx.types.ResRet.f32 %231, 2
  %235 = extractvalue %dx.types.ResRet.f32 %231, 3
  %236 = add i32 %224, 2
  %237 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %236, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %238 = extractvalue %dx.types.ResRet.f32 %237, 0
  %239 = extractvalue %dx.types.ResRet.f32 %237, 1
  %240 = extractvalue %dx.types.ResRet.f32 %237, 2
  %241 = extractvalue %dx.types.ResRet.f32 %237, 3
  %242 = add i32 %224, 3
  %243 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %242, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %244 = extractvalue %dx.types.ResRet.f32 %243, 0
  %245 = extractvalue %dx.types.ResRet.f32 %243, 1
  %246 = extractvalue %dx.types.ResRet.f32 %243, 2
  %247 = extractvalue %dx.types.ResRet.f32 %243, 3
  %248 = add i32 %224, 4
  %249 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %248, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %250 = extractvalue %dx.types.ResRet.f32 %249, 0
  %251 = extractvalue %dx.types.ResRet.f32 %249, 1
  %252 = extractvalue %dx.types.ResRet.f32 %249, 2
  %253 = extractvalue %dx.types.ResRet.f32 %249, 3
  %254 = call float @dx.op.unary.f32(i32 6, float %253)  ; FAbs(value)
  %255 = add i32 %224, 9
  %256 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %255, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %257 = extractvalue %dx.types.ResRet.f32 %256, 0
  %258 = extractvalue %dx.types.ResRet.f32 %256, 1
  %259 = extractvalue %dx.types.ResRet.f32 %256, 2
  %260 = fmul fast float %227, -2.097152e+06
  %261 = fmul fast float %228, -2.097152e+06
  %262 = fmul fast float %229, -2.097152e+06
  %263 = fmul fast float %232, %260
  %264 = call float @dx.op.tertiary.f32(i32 46, float %261, float %233, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %262, float %234, float %264)  ; FMad(a,b,c)
  %266 = fadd fast float %265, %235
  %267 = fmul fast float %238, %260
  %268 = call float @dx.op.tertiary.f32(i32 46, float %261, float %239, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %262, float %240, float %268)  ; FMad(a,b,c)
  %270 = fadd fast float %269, %241
  %271 = fmul fast float %244, %260
  %272 = call float @dx.op.tertiary.f32(i32 46, float %261, float %245, float %271)  ; FMad(a,b,c)
  %273 = call float @dx.op.tertiary.f32(i32 46, float %262, float %246, float %272)  ; FMad(a,b,c)
  %274 = fadd fast float %273, %247
  %275 = fadd fast float %254, %219
  %276 = call float @dx.op.binary.f32(i32 36, float %180, float %275)  ; FMin(a,b)
  %277 = fmul fast float %276, %153
  %278 = fmul fast float %276, %154
  %279 = fmul fast float %276, %155
  %280 = fadd fast float %277, %167
  %281 = fadd fast float %278, %168
  %282 = fadd fast float %279, %169
  %283 = fmul fast float %232, %167
  %284 = call float @dx.op.tertiary.f32(i32 46, float %168, float %233, float %283)  ; FMad(a,b,c)
  %285 = call float @dx.op.tertiary.f32(i32 46, float %169, float %234, float %284)  ; FMad(a,b,c)
  %286 = fadd fast float %266, %285
  %287 = fmul fast float %238, %167
  %288 = call float @dx.op.tertiary.f32(i32 46, float %168, float %239, float %287)  ; FMad(a,b,c)
  %289 = call float @dx.op.tertiary.f32(i32 46, float %169, float %240, float %288)  ; FMad(a,b,c)
  %290 = fadd fast float %270, %289
  %291 = fmul fast float %244, %167
  %292 = call float @dx.op.tertiary.f32(i32 46, float %168, float %245, float %291)  ; FMad(a,b,c)
  %293 = call float @dx.op.tertiary.f32(i32 46, float %169, float %246, float %292)  ; FMad(a,b,c)
  %294 = fadd fast float %274, %293
  %295 = fmul fast float %280, %232
  %296 = call float @dx.op.tertiary.f32(i32 46, float %281, float %233, float %295)  ; FMad(a,b,c)
  %297 = call float @dx.op.tertiary.f32(i32 46, float %282, float %234, float %296)  ; FMad(a,b,c)
  %298 = fmul fast float %280, %238
  %299 = call float @dx.op.tertiary.f32(i32 46, float %281, float %239, float %298)  ; FMad(a,b,c)
  %300 = call float @dx.op.tertiary.f32(i32 46, float %282, float %240, float %299)  ; FMad(a,b,c)
  %301 = fmul fast float %280, %244
  %302 = call float @dx.op.tertiary.f32(i32 46, float %281, float %245, float %301)  ; FMad(a,b,c)
  %303 = call float @dx.op.tertiary.f32(i32 46, float %282, float %246, float %302)  ; FMad(a,b,c)
  %304 = fsub fast float %297, %285
  %305 = fsub fast float %300, %289
  %306 = fsub fast float %303, %293
  %307 = fmul fast float %304, %304
  %308 = fmul fast float %305, %305
  %309 = fadd fast float %308, %307
  %310 = fmul fast float %306, %306
  %311 = fadd fast float %309, %310
  %312 = call float @dx.op.unary.f32(i32 24, float %311)  ; Sqrt(value)
  %313 = fdiv fast float %174, %276
  %314 = fmul fast float %313, %312
  %315 = fdiv fast float %304, %312
  %316 = fdiv fast float %305, %312
  %317 = fdiv fast float %306, %312
  %318 = fsub fast float -0.000000e+00, %250
  %319 = fsub fast float -0.000000e+00, %251
  %320 = fsub fast float -0.000000e+00, %252
  %321 = fdiv fast float 1.000000e+00, %304
  %322 = fdiv fast float 1.000000e+00, %305
  %323 = fdiv fast float 1.000000e+00, %306
  %324 = fsub fast float %318, %286
  %325 = fsub fast float %319, %290
  %326 = fsub fast float %320, %294
  %327 = fmul fast float %321, %324
  %328 = fmul fast float %322, %325
  %329 = fmul fast float %323, %326
  %330 = fsub fast float %250, %286
  %331 = fsub fast float %251, %290
  %332 = fsub fast float %252, %294
  %333 = fmul fast float %321, %330
  %334 = fmul fast float %322, %331
  %335 = fmul fast float %323, %332
  %336 = call float @dx.op.binary.f32(i32 36, float %327, float %333)  ; FMin(a,b)
  %337 = call float @dx.op.binary.f32(i32 36, float %328, float %334)  ; FMin(a,b)
  %338 = call float @dx.op.binary.f32(i32 36, float %329, float %335)  ; FMin(a,b)
  %339 = call float @dx.op.binary.f32(i32 35, float %327, float %333)  ; FMax(a,b)
  %340 = call float @dx.op.binary.f32(i32 35, float %328, float %334)  ; FMax(a,b)
  %341 = call float @dx.op.binary.f32(i32 35, float %329, float %335)  ; FMax(a,b)
  %342 = call float @dx.op.binary.f32(i32 35, float %337, float %338)  ; FMax(a,b)
  %343 = call float @dx.op.binary.f32(i32 35, float %336, float %342)  ; FMax(a,b)
  %344 = call float @dx.op.binary.f32(i32 36, float %340, float %341)  ; FMin(a,b)
  %345 = call float @dx.op.binary.f32(i32 36, float %339, float %344)  ; FMin(a,b)
  %346 = call float @dx.op.unary.f32(i32 7, float %343)  ; Saturate(value)
  %347 = call float @dx.op.unary.f32(i32 7, float %345)  ; Saturate(value)
  %348 = fmul fast float %346, %312
  %349 = fmul fast float %347, %312
  %350 = call float @dx.op.binary.f32(i32 35, float %348, float %314)  ; FMax(a,b)
  %351 = fcmp fast olt float %350, %349
  br i1 %351, label %352, label %483, !dx.controlflow.hints !61

; <label>:352                                     ; preds = %216
  %353 = extractvalue %dx.types.ResRet.f32 %256, 3
  %354 = bitcast float %353 to i32
  %355 = mul i32 %354, 9
  %356 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %357 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %356, i32 %355, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %358 = extractvalue %dx.types.ResRet.f32 %357, 0
  %359 = bitcast float %358 to i32
  %360 = lshr i32 %359, 30
  %361 = mul nuw nsw i32 %360, 3
  %362 = add i32 %355, -3
  %363 = add i32 %362, %361
  %364 = add i32 %363, 1
  %365 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %356, i32 %364, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %366 = extractvalue %dx.types.ResRet.f32 %365, 0
  %367 = extractvalue %dx.types.ResRet.f32 %365, 1
  %368 = extractvalue %dx.types.ResRet.f32 %365, 2
  %369 = extractvalue %dx.types.ResRet.f32 %365, 3
  %370 = add i32 %363, 2
  %371 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %356, i32 %370, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %372 = extractvalue %dx.types.ResRet.f32 %371, 0
  %373 = extractvalue %dx.types.ResRet.f32 %371, 1
  %374 = extractvalue %dx.types.ResRet.f32 %371, 2
  %375 = extractvalue %dx.types.ResRet.f32 %371, 3
  br label %376

; <label>:376                                     ; preds = %457, %352
  %377 = phi float [ %350, %352 ], [ %454, %457 ]
  %378 = phi i32 [ 0, %352 ], [ %458, %457 ]
  %379 = phi float [ 0.000000e+00, %352 ], [ %441, %457 ]
  %380 = fmul fast float %377, %315
  %381 = fmul fast float %377, %316
  %382 = fmul fast float %377, %317
  %383 = fadd fast float %380, %286
  %384 = fadd fast float %381, %290
  %385 = fadd fast float %382, %294
  %386 = fmul fast float %383, %366
  %387 = fmul fast float %384, %367
  %388 = fmul fast float %385, %368
  %389 = fadd fast float %386, %372
  %390 = fadd fast float %387, %373
  %391 = fadd fast float %388, %374
  %392 = fptosi float %389 to i32
  %393 = fptosi float %390 to i32
  %394 = fptosi float %391 to i32
  %395 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %396 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %395, i32 0, i32 %392, i32 %393, i32 %394, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %397 = extractvalue %dx.types.ResRet.f32 %396, 3
  %398 = fcmp fast ogt float %397, 0.000000e+00
  br i1 %398, label %399, label %438

; <label>:399                                     ; preds = %376
  %400 = extractvalue %dx.types.ResRet.f32 %396, 2
  %401 = extractvalue %dx.types.ResRet.f32 %396, 1
  %402 = extractvalue %dx.types.ResRet.f32 %396, 0
  %403 = sitofp i32 %392 to float
  %404 = sitofp i32 %393 to float
  %405 = sitofp i32 %394 to float
  %406 = fsub fast float %389, %403
  %407 = fsub fast float %390, %404
  %408 = fsub fast float %391, %405
  %409 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %410 = extractvalue %dx.types.CBufRet.f32 %409, 0
  %411 = extractvalue %dx.types.CBufRet.f32 %409, 1
  %412 = extractvalue %dx.types.CBufRet.f32 %409, 2
  %413 = fmul fast float %410, %402
  %414 = fmul fast float %411, %401
  %415 = fmul fast float %412, %400
  %416 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %417 = extractvalue %dx.types.CBufRet.f32 %416, 0
  %418 = extractvalue %dx.types.CBufRet.f32 %416, 1
  %419 = extractvalue %dx.types.CBufRet.f32 %416, 2
  %420 = fmul fast float %417, %406
  %421 = fmul fast float %418, %407
  %422 = fmul fast float %419, %408
  %423 = fadd fast float %420, %413
  %424 = fadd fast float %421, %414
  %425 = fadd fast float %422, %415
  %426 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %427 = extractvalue %dx.types.CBufRet.f32 %426, 0
  %428 = extractvalue %dx.types.CBufRet.f32 %426, 1
  %429 = extractvalue %dx.types.CBufRet.f32 %426, 2
  %430 = fadd fast float %423, %427
  %431 = fadd fast float %424, %428
  %432 = fadd fast float %425, %429
  %433 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %434 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %435 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %433, %dx.types.Handle %434, float %430, float %431, float %432, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %436 = extractvalue %dx.types.ResRet.f32 %435, 0
  %437 = fmul fast float %436, %369
  br label %438

; <label>:438                                     ; preds = %399, %376
  %439 = phi float [ %437, %399 ], [ %369, %376 ]
  %440 = fadd float %375, %439
  %441 = call float @dx.op.binary.f32(i32 35, float %440, float %379)  ; FMax(a,b)
  %442 = fmul fast float %254, 2.000000e+00
  %443 = fdiv fast float %441, %442
  %444 = call float @dx.op.unary.f32(i32 7, float %443)  ; Saturate(value)
  %445 = fmul fast float %444, %254
  %446 = fcmp fast olt float %440, %445
  br i1 %446, label %447, label %452

; <label>:447                                     ; preds = %438
  %448 = fadd fast float %440, %377
  %449 = fsub fast float %448, %445
  %450 = call float @dx.op.binary.f32(i32 35, float %449, float %350)  ; FMax(a,b)
  %451 = call float @dx.op.binary.f32(i32 36, float %450, float %349)  ; FMin(a,b)
  br label %462

; <label>:452                                     ; preds = %438
  %453 = call float @dx.op.binary.f32(i32 35, float %440, float 9.765625e-04)  ; FMax(a,b)
  %454 = fadd fast float %453, %377
  %455 = fadd fast float %445, %349
  %456 = fcmp fast ogt float %454, %455
  br i1 %456, label %460, label %457

; <label>:457                                     ; preds = %452
  %458 = add nuw nsw i32 %378, 1
  %459 = icmp ult i32 %458, 64
  br i1 %459, label %376, label %460, !llvm.loop !62

; <label>:460                                     ; preds = %457, %452
  %461 = phi i32 [ %458, %457 ], [ %378, %452 ]
  br label %462

; <label>:462                                     ; preds = %460, %447
  %463 = phi float [ %451, %447 ], [ %454, %460 ]
  %464 = phi i32 [ %378, %447 ], [ %461, %460 ]
  %465 = phi i1 [ true, %447 ], [ false, %460 ]
  %466 = icmp eq i32 %464, 64
  %467 = or i1 %466, %465
  br i1 %467, label %468, label %483

; <label>:468                                     ; preds = %462
  %469 = fmul fast float %315, %257
  %470 = fmul fast float %469, %463
  %471 = fmul fast float %316, %258
  %472 = fmul fast float %471, %463
  %473 = fmul fast float %317, %259
  %474 = fmul fast float %473, %463
  %475 = fmul fast float %470, %470
  %476 = fmul fast float %472, %472
  %477 = fadd fast float %475, %476
  %478 = fmul fast float %474, %474
  %479 = fadd fast float %477, %478
  %480 = call float @dx.op.unary.f32(i32 24, float %479)  ; Sqrt(value)
  %481 = fcmp fast olt float %480, %219
  br i1 %481, label %482, label %483

; <label>:482                                     ; preds = %468
  br label %483

; <label>:483                                     ; preds = %482, %468, %462, %216
  %484 = phi i32 [ %223, %482 ], [ %218, %468 ], [ %218, %462 ], [ %218, %216 ]
  %485 = phi float [ %480, %482 ], [ %219, %468 ], [ %219, %462 ], [ %219, %216 ]
  %486 = add nuw i32 %217, 1
  %487 = icmp eq i32 %486, %208
  br i1 %487, label %488, label %216

; <label>:488                                     ; preds = %483
  br label %489

; <label>:489                                     ; preds = %488, %213
  %490 = phi i32 [ 0, %213 ], [ %484, %488 ]
  %491 = phi float [ %180, %213 ], [ %485, %488 ]
  %492 = fcmp fast olt float %491, %180
  br i1 %492, label %493, label %1469

; <label>:493                                     ; preds = %489
  %494 = mul i32 %490, 10
  %495 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %496 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %495, i32 %494, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %497 = extractvalue %dx.types.ResRet.f32 %496, 0
  %498 = extractvalue %dx.types.ResRet.f32 %496, 1
  %499 = extractvalue %dx.types.ResRet.f32 %496, 2
  %500 = or i32 %494, 1
  %501 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %495, i32 %500, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %502 = extractvalue %dx.types.ResRet.f32 %501, 0
  %503 = extractvalue %dx.types.ResRet.f32 %501, 1
  %504 = extractvalue %dx.types.ResRet.f32 %501, 2
  %505 = extractvalue %dx.types.ResRet.f32 %501, 3
  %506 = add i32 %494, 2
  %507 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %495, i32 %506, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %508 = extractvalue %dx.types.ResRet.f32 %507, 0
  %509 = extractvalue %dx.types.ResRet.f32 %507, 1
  %510 = extractvalue %dx.types.ResRet.f32 %507, 2
  %511 = extractvalue %dx.types.ResRet.f32 %507, 3
  %512 = add i32 %494, 3
  %513 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %495, i32 %512, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %514 = extractvalue %dx.types.ResRet.f32 %513, 0
  %515 = extractvalue %dx.types.ResRet.f32 %513, 1
  %516 = extractvalue %dx.types.ResRet.f32 %513, 2
  %517 = extractvalue %dx.types.ResRet.f32 %513, 3
  %518 = add i32 %494, 4
  %519 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %495, i32 %518, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %520 = extractvalue %dx.types.ResRet.f32 %519, 0
  %521 = extractvalue %dx.types.ResRet.f32 %519, 1
  %522 = extractvalue %dx.types.ResRet.f32 %519, 2
  %523 = add i32 %494, 5
  %524 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %495, i32 %523, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %525 = extractvalue %dx.types.ResRet.f32 %524, 3
  %526 = bitcast float %525 to i32
  %527 = add i32 %494, 9
  %528 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %495, i32 %527, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %529 = extractvalue %dx.types.ResRet.f32 %528, 3
  %530 = bitcast float %529 to i32
  %531 = fmul fast float %497, -2.097152e+06
  %532 = fmul fast float %498, -2.097152e+06
  %533 = fmul fast float %499, -2.097152e+06
  %534 = fmul fast float %502, %531
  %535 = call float @dx.op.tertiary.f32(i32 46, float %532, float %503, float %534)  ; FMad(a,b,c)
  %536 = call float @dx.op.tertiary.f32(i32 46, float %533, float %504, float %535)  ; FMad(a,b,c)
  %537 = fadd fast float %536, %505
  %538 = fmul fast float %508, %531
  %539 = call float @dx.op.tertiary.f32(i32 46, float %532, float %509, float %538)  ; FMad(a,b,c)
  %540 = call float @dx.op.tertiary.f32(i32 46, float %533, float %510, float %539)  ; FMad(a,b,c)
  %541 = fadd fast float %540, %511
  %542 = fmul fast float %514, %531
  %543 = call float @dx.op.tertiary.f32(i32 46, float %532, float %515, float %542)  ; FMad(a,b,c)
  %544 = call float @dx.op.tertiary.f32(i32 46, float %533, float %516, float %543)  ; FMad(a,b,c)
  %545 = fadd fast float %544, %517
  %546 = fmul fast float %491, %153
  %547 = fmul fast float %491, %154
  %548 = fmul fast float %491, %155
  %549 = fadd fast float %546, %167
  %550 = fadd fast float %547, %168
  %551 = fadd fast float %548, %169
  %552 = fmul fast float %502, %549
  %553 = call float @dx.op.tertiary.f32(i32 46, float %550, float %503, float %552)  ; FMad(a,b,c)
  %554 = call float @dx.op.tertiary.f32(i32 46, float %551, float %504, float %553)  ; FMad(a,b,c)
  %555 = fadd fast float %537, %554
  %556 = fmul fast float %508, %549
  %557 = call float @dx.op.tertiary.f32(i32 46, float %550, float %509, float %556)  ; FMad(a,b,c)
  %558 = call float @dx.op.tertiary.f32(i32 46, float %551, float %510, float %557)  ; FMad(a,b,c)
  %559 = fadd fast float %541, %558
  %560 = fmul fast float %514, %549
  %561 = call float @dx.op.tertiary.f32(i32 46, float %550, float %515, float %560)  ; FMad(a,b,c)
  %562 = call float @dx.op.tertiary.f32(i32 46, float %551, float %516, float %561)  ; FMad(a,b,c)
  %563 = fadd fast float %545, %562
  %564 = fsub fast float -0.000000e+00, %520
  %565 = fsub fast float -0.000000e+00, %521
  %566 = fsub fast float -0.000000e+00, %522
  %567 = call float @dx.op.binary.f32(i32 35, float %555, float %564)  ; FMax(a,b)
  %568 = call float @dx.op.binary.f32(i32 35, float %559, float %565)  ; FMax(a,b)
  %569 = call float @dx.op.binary.f32(i32 35, float %563, float %566)  ; FMax(a,b)
  %570 = call float @dx.op.binary.f32(i32 36, float %567, float %520)  ; FMin(a,b)
  %571 = call float @dx.op.binary.f32(i32 36, float %568, float %521)  ; FMin(a,b)
  %572 = call float @dx.op.binary.f32(i32 36, float %569, float %522)  ; FMin(a,b)
  %573 = mul i32 %530, 9
  %574 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %575 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %574, i32 %573, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %576 = extractvalue %dx.types.ResRet.f32 %575, 0
  %577 = bitcast float %576 to i32
  %578 = lshr i32 %577, 30
  %579 = mul nuw nsw i32 %578, 3
  %580 = add i32 %573, -3
  %581 = add i32 %580, %579
  %582 = add i32 %581, 1
  %583 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %574, i32 %582, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %584 = extractvalue %dx.types.ResRet.f32 %583, 0
  %585 = extractvalue %dx.types.ResRet.f32 %583, 1
  %586 = extractvalue %dx.types.ResRet.f32 %583, 2
  %587 = extractvalue %dx.types.ResRet.f32 %583, 3
  %588 = add i32 %581, 2
  %589 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %574, i32 %588, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %590 = extractvalue %dx.types.ResRet.f32 %589, 0
  %591 = extractvalue %dx.types.ResRet.f32 %589, 1
  %592 = extractvalue %dx.types.ResRet.f32 %589, 2
  %593 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %594 = extractvalue %dx.types.CBufRet.f32 %593, 0
  %595 = extractvalue %dx.types.CBufRet.f32 %593, 1
  %596 = extractvalue %dx.types.CBufRet.f32 %593, 2
  %597 = fmul fast float %594, %584
  %598 = fmul fast float %595, %585
  %599 = fmul fast float %596, %586
  %600 = fdiv fast float 5.000000e-01, %597
  %601 = fdiv fast float 5.000000e-01, %598
  %602 = fdiv fast float 5.000000e-01, %599
  %603 = fadd fast float %600, %570
  %604 = fmul fast float %603, %584
  %605 = fmul fast float %585, %571
  %606 = fmul fast float %586, %572
  %607 = fadd fast float %604, %590
  %608 = fadd fast float %591, %605
  %609 = fadd fast float %592, %606
  %610 = fptosi float %607 to i32
  %611 = fptosi float %608 to i32
  %612 = fptosi float %609 to i32
  %613 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %614 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %613, i32 0, i32 %610, i32 %611, i32 %612, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %615 = extractvalue %dx.types.ResRet.f32 %614, 3
  %616 = fcmp fast ogt float %615, 0.000000e+00
  br i1 %616, label %617, label %656

; <label>:617                                     ; preds = %493
  %618 = extractvalue %dx.types.ResRet.f32 %614, 2
  %619 = extractvalue %dx.types.ResRet.f32 %614, 1
  %620 = extractvalue %dx.types.ResRet.f32 %614, 0
  %621 = sitofp i32 %610 to float
  %622 = sitofp i32 %611 to float
  %623 = sitofp i32 %612 to float
  %624 = fsub fast float %607, %621
  %625 = fsub fast float %608, %622
  %626 = fsub fast float %609, %623
  %627 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %628 = extractvalue %dx.types.CBufRet.f32 %627, 0
  %629 = extractvalue %dx.types.CBufRet.f32 %627, 1
  %630 = extractvalue %dx.types.CBufRet.f32 %627, 2
  %631 = fmul fast float %628, %620
  %632 = fmul fast float %629, %619
  %633 = fmul fast float %630, %618
  %634 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %635 = extractvalue %dx.types.CBufRet.f32 %634, 0
  %636 = extractvalue %dx.types.CBufRet.f32 %634, 1
  %637 = extractvalue %dx.types.CBufRet.f32 %634, 2
  %638 = fmul fast float %635, %624
  %639 = fmul fast float %636, %625
  %640 = fmul fast float %637, %626
  %641 = fadd fast float %638, %631
  %642 = fadd fast float %639, %632
  %643 = fadd fast float %640, %633
  %644 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %645 = extractvalue %dx.types.CBufRet.f32 %644, 0
  %646 = extractvalue %dx.types.CBufRet.f32 %644, 1
  %647 = extractvalue %dx.types.CBufRet.f32 %644, 2
  %648 = fadd fast float %641, %645
  %649 = fadd fast float %642, %646
  %650 = fadd fast float %643, %647
  %651 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %652 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %653 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %651, %dx.types.Handle %652, float %648, float %649, float %650, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %654 = extractvalue %dx.types.ResRet.f32 %653, 0
  %655 = fmul fast float %654, %587
  br label %656

; <label>:656                                     ; preds = %617, %493
  %657 = phi float [ %655, %617 ], [ %587, %493 ]
  %658 = fsub fast float %570, %600
  %659 = fmul fast float %658, %584
  %660 = fadd fast float %659, %590
  %661 = fptosi float %660 to i32
  %662 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %613, i32 0, i32 %661, i32 %611, i32 %612, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %663 = extractvalue %dx.types.ResRet.f32 %662, 3
  %664 = fcmp fast ogt float %663, 0.000000e+00
  br i1 %664, label %665, label %704

; <label>:665                                     ; preds = %656
  %666 = extractvalue %dx.types.ResRet.f32 %662, 2
  %667 = extractvalue %dx.types.ResRet.f32 %662, 1
  %668 = extractvalue %dx.types.ResRet.f32 %662, 0
  %669 = sitofp i32 %661 to float
  %670 = sitofp i32 %611 to float
  %671 = sitofp i32 %612 to float
  %672 = fsub fast float %660, %669
  %673 = fsub fast float %608, %670
  %674 = fsub fast float %609, %671
  %675 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %676 = extractvalue %dx.types.CBufRet.f32 %675, 0
  %677 = extractvalue %dx.types.CBufRet.f32 %675, 1
  %678 = extractvalue %dx.types.CBufRet.f32 %675, 2
  %679 = fmul fast float %676, %668
  %680 = fmul fast float %677, %667
  %681 = fmul fast float %678, %666
  %682 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %683 = extractvalue %dx.types.CBufRet.f32 %682, 0
  %684 = extractvalue %dx.types.CBufRet.f32 %682, 1
  %685 = extractvalue %dx.types.CBufRet.f32 %682, 2
  %686 = fmul fast float %683, %672
  %687 = fmul fast float %684, %673
  %688 = fmul fast float %685, %674
  %689 = fadd fast float %686, %679
  %690 = fadd fast float %687, %680
  %691 = fadd fast float %688, %681
  %692 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %693 = extractvalue %dx.types.CBufRet.f32 %692, 0
  %694 = extractvalue %dx.types.CBufRet.f32 %692, 1
  %695 = extractvalue %dx.types.CBufRet.f32 %692, 2
  %696 = fadd fast float %689, %693
  %697 = fadd fast float %690, %694
  %698 = fadd fast float %691, %695
  %699 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %700 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %701 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %699, %dx.types.Handle %700, float %696, float %697, float %698, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %702 = extractvalue %dx.types.ResRet.f32 %701, 0
  %703 = fmul fast float %702, %587
  br label %704

; <label>:704                                     ; preds = %665, %656
  %705 = phi float [ %703, %665 ], [ %587, %656 ]
  %706 = fadd fast float %601, %571
  %707 = fmul fast float %584, %570
  %708 = fmul fast float %706, %585
  %709 = fadd fast float %590, %707
  %710 = fadd fast float %708, %591
  %711 = fptosi float %709 to i32
  %712 = fptosi float %710 to i32
  %713 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %613, i32 0, i32 %711, i32 %712, i32 %612, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %714 = extractvalue %dx.types.ResRet.f32 %713, 3
  %715 = fcmp fast ogt float %714, 0.000000e+00
  br i1 %715, label %716, label %755

; <label>:716                                     ; preds = %704
  %717 = extractvalue %dx.types.ResRet.f32 %713, 2
  %718 = extractvalue %dx.types.ResRet.f32 %713, 1
  %719 = extractvalue %dx.types.ResRet.f32 %713, 0
  %720 = sitofp i32 %711 to float
  %721 = sitofp i32 %712 to float
  %722 = sitofp i32 %612 to float
  %723 = fsub fast float %709, %720
  %724 = fsub fast float %710, %721
  %725 = fsub fast float %609, %722
  %726 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %727 = extractvalue %dx.types.CBufRet.f32 %726, 0
  %728 = extractvalue %dx.types.CBufRet.f32 %726, 1
  %729 = extractvalue %dx.types.CBufRet.f32 %726, 2
  %730 = fmul fast float %727, %719
  %731 = fmul fast float %728, %718
  %732 = fmul fast float %729, %717
  %733 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %734 = extractvalue %dx.types.CBufRet.f32 %733, 0
  %735 = extractvalue %dx.types.CBufRet.f32 %733, 1
  %736 = extractvalue %dx.types.CBufRet.f32 %733, 2
  %737 = fmul fast float %734, %723
  %738 = fmul fast float %735, %724
  %739 = fmul fast float %736, %725
  %740 = fadd fast float %737, %730
  %741 = fadd fast float %738, %731
  %742 = fadd fast float %739, %732
  %743 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %744 = extractvalue %dx.types.CBufRet.f32 %743, 0
  %745 = extractvalue %dx.types.CBufRet.f32 %743, 1
  %746 = extractvalue %dx.types.CBufRet.f32 %743, 2
  %747 = fadd fast float %740, %744
  %748 = fadd fast float %741, %745
  %749 = fadd fast float %742, %746
  %750 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %751 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %752 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %750, %dx.types.Handle %751, float %747, float %748, float %749, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %753 = extractvalue %dx.types.ResRet.f32 %752, 0
  %754 = fmul fast float %753, %587
  br label %755

; <label>:755                                     ; preds = %716, %704
  %756 = phi float [ %754, %716 ], [ %587, %704 ]
  %757 = fsub fast float %571, %601
  %758 = fmul fast float %757, %585
  %759 = fadd fast float %758, %591
  %760 = fptosi float %759 to i32
  %761 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %613, i32 0, i32 %711, i32 %760, i32 %612, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %762 = extractvalue %dx.types.ResRet.f32 %761, 3
  %763 = fcmp fast ogt float %762, 0.000000e+00
  br i1 %763, label %764, label %803

; <label>:764                                     ; preds = %755
  %765 = extractvalue %dx.types.ResRet.f32 %761, 2
  %766 = extractvalue %dx.types.ResRet.f32 %761, 1
  %767 = extractvalue %dx.types.ResRet.f32 %761, 0
  %768 = sitofp i32 %711 to float
  %769 = sitofp i32 %760 to float
  %770 = sitofp i32 %612 to float
  %771 = fsub fast float %709, %768
  %772 = fsub fast float %759, %769
  %773 = fsub fast float %609, %770
  %774 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %775 = extractvalue %dx.types.CBufRet.f32 %774, 0
  %776 = extractvalue %dx.types.CBufRet.f32 %774, 1
  %777 = extractvalue %dx.types.CBufRet.f32 %774, 2
  %778 = fmul fast float %775, %767
  %779 = fmul fast float %776, %766
  %780 = fmul fast float %777, %765
  %781 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %782 = extractvalue %dx.types.CBufRet.f32 %781, 0
  %783 = extractvalue %dx.types.CBufRet.f32 %781, 1
  %784 = extractvalue %dx.types.CBufRet.f32 %781, 2
  %785 = fmul fast float %782, %771
  %786 = fmul fast float %783, %772
  %787 = fmul fast float %784, %773
  %788 = fadd fast float %785, %778
  %789 = fadd fast float %786, %779
  %790 = fadd fast float %787, %780
  %791 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %792 = extractvalue %dx.types.CBufRet.f32 %791, 0
  %793 = extractvalue %dx.types.CBufRet.f32 %791, 1
  %794 = extractvalue %dx.types.CBufRet.f32 %791, 2
  %795 = fadd fast float %788, %792
  %796 = fadd fast float %789, %793
  %797 = fadd fast float %790, %794
  %798 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %799 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %800 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %798, %dx.types.Handle %799, float %795, float %796, float %797, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %801 = extractvalue %dx.types.ResRet.f32 %800, 0
  %802 = fmul fast float %801, %587
  br label %803

; <label>:803                                     ; preds = %764, %755
  %804 = phi float [ %802, %764 ], [ %587, %755 ]
  %805 = fadd fast float %602, %572
  %806 = fmul fast float %805, %586
  %807 = fadd fast float %806, %592
  %808 = fptosi float %807 to i32
  %809 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %613, i32 0, i32 %711, i32 %611, i32 %808, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %810 = extractvalue %dx.types.ResRet.f32 %809, 3
  %811 = fcmp fast ogt float %810, 0.000000e+00
  br i1 %811, label %812, label %851

; <label>:812                                     ; preds = %803
  %813 = extractvalue %dx.types.ResRet.f32 %809, 2
  %814 = extractvalue %dx.types.ResRet.f32 %809, 1
  %815 = extractvalue %dx.types.ResRet.f32 %809, 0
  %816 = sitofp i32 %711 to float
  %817 = sitofp i32 %611 to float
  %818 = sitofp i32 %808 to float
  %819 = fsub fast float %709, %816
  %820 = fsub fast float %608, %817
  %821 = fsub fast float %807, %818
  %822 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %823 = extractvalue %dx.types.CBufRet.f32 %822, 0
  %824 = extractvalue %dx.types.CBufRet.f32 %822, 1
  %825 = extractvalue %dx.types.CBufRet.f32 %822, 2
  %826 = fmul fast float %823, %815
  %827 = fmul fast float %824, %814
  %828 = fmul fast float %825, %813
  %829 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %830 = extractvalue %dx.types.CBufRet.f32 %829, 0
  %831 = extractvalue %dx.types.CBufRet.f32 %829, 1
  %832 = extractvalue %dx.types.CBufRet.f32 %829, 2
  %833 = fmul fast float %830, %819
  %834 = fmul fast float %831, %820
  %835 = fmul fast float %832, %821
  %836 = fadd fast float %833, %826
  %837 = fadd fast float %834, %827
  %838 = fadd fast float %835, %828
  %839 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %840 = extractvalue %dx.types.CBufRet.f32 %839, 0
  %841 = extractvalue %dx.types.CBufRet.f32 %839, 1
  %842 = extractvalue %dx.types.CBufRet.f32 %839, 2
  %843 = fadd fast float %836, %840
  %844 = fadd fast float %837, %841
  %845 = fadd fast float %838, %842
  %846 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %847 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %848 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %846, %dx.types.Handle %847, float %843, float %844, float %845, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %849 = extractvalue %dx.types.ResRet.f32 %848, 0
  %850 = fmul fast float %849, %587
  br label %851

; <label>:851                                     ; preds = %812, %803
  %852 = phi float [ %850, %812 ], [ %587, %803 ]
  %853 = fsub fast float %572, %602
  %854 = fmul fast float %853, %586
  %855 = fadd fast float %854, %592
  %856 = fptosi float %855 to i32
  %857 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %613, i32 0, i32 %711, i32 %611, i32 %856, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %858 = extractvalue %dx.types.ResRet.f32 %857, 3
  %859 = fcmp fast ogt float %858, 0.000000e+00
  br i1 %859, label %860, label %899

; <label>:860                                     ; preds = %851
  %861 = extractvalue %dx.types.ResRet.f32 %857, 2
  %862 = extractvalue %dx.types.ResRet.f32 %857, 1
  %863 = extractvalue %dx.types.ResRet.f32 %857, 0
  %864 = sitofp i32 %711 to float
  %865 = sitofp i32 %611 to float
  %866 = sitofp i32 %856 to float
  %867 = fsub fast float %709, %864
  %868 = fsub fast float %608, %865
  %869 = fsub fast float %855, %866
  %870 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %871 = extractvalue %dx.types.CBufRet.f32 %870, 0
  %872 = extractvalue %dx.types.CBufRet.f32 %870, 1
  %873 = extractvalue %dx.types.CBufRet.f32 %870, 2
  %874 = fmul fast float %871, %863
  %875 = fmul fast float %872, %862
  %876 = fmul fast float %873, %861
  %877 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %878 = extractvalue %dx.types.CBufRet.f32 %877, 0
  %879 = extractvalue %dx.types.CBufRet.f32 %877, 1
  %880 = extractvalue %dx.types.CBufRet.f32 %877, 2
  %881 = fmul fast float %878, %867
  %882 = fmul fast float %879, %868
  %883 = fmul fast float %880, %869
  %884 = fadd fast float %881, %874
  %885 = fadd fast float %882, %875
  %886 = fadd fast float %883, %876
  %887 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %888 = extractvalue %dx.types.CBufRet.f32 %887, 0
  %889 = extractvalue %dx.types.CBufRet.f32 %887, 1
  %890 = extractvalue %dx.types.CBufRet.f32 %887, 2
  %891 = fadd fast float %884, %888
  %892 = fadd fast float %885, %889
  %893 = fadd fast float %886, %890
  %894 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %895 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %896 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %894, %dx.types.Handle %895, float %891, float %892, float %893, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %897 = extractvalue %dx.types.ResRet.f32 %896, 0
  %898 = fmul fast float %897, %587
  br label %899

; <label>:899                                     ; preds = %860, %851
  %900 = phi float [ %898, %860 ], [ %587, %851 ]
  %901 = fsub fast float %657, %705
  %902 = fsub fast float %756, %804
  %903 = fsub fast float %852, %900
  %904 = fmul fast float %901, %901
  %905 = fmul fast float %902, %902
  %906 = fadd fast float %905, %904
  %907 = fmul fast float %903, %903
  %908 = fadd fast float %906, %907
  %909 = call float @dx.op.unary.f32(i32 24, float %908)  ; Sqrt(value)
  %910 = fcmp fast ogt float %909, 0.000000e+00
  br i1 %910, label %911, label %915

; <label>:911                                     ; preds = %899
  %912 = fdiv fast float %901, %909
  %913 = fdiv fast float %902, %909
  %914 = fdiv fast float %903, %909
  br label %915

; <label>:915                                     ; preds = %911, %899
  %916 = phi float [ %912, %911 ], [ 0.000000e+00, %899 ]
  %917 = phi float [ %913, %911 ], [ 0.000000e+00, %899 ]
  %918 = phi float [ %914, %911 ], [ 0.000000e+00, %899 ]
  %919 = fmul fast float %916, %502
  %920 = call float @dx.op.tertiary.f32(i32 46, float %917, float %508, float %919)  ; FMad(a,b,c)
  %921 = call float @dx.op.tertiary.f32(i32 46, float %918, float %514, float %920)  ; FMad(a,b,c)
  %922 = fmul fast float %916, %503
  %923 = call float @dx.op.tertiary.f32(i32 46, float %917, float %509, float %922)  ; FMad(a,b,c)
  %924 = call float @dx.op.tertiary.f32(i32 46, float %918, float %515, float %923)  ; FMad(a,b,c)
  %925 = fmul fast float %916, %504
  %926 = call float @dx.op.tertiary.f32(i32 46, float %917, float %510, float %925)  ; FMad(a,b,c)
  %927 = call float @dx.op.tertiary.f32(i32 46, float %918, float %516, float %926)  ; FMad(a,b,c)
  %928 = fmul fast float %921, %921
  %929 = fmul fast float %924, %924
  %930 = fadd fast float %929, %928
  %931 = fmul fast float %927, %927
  %932 = fadd fast float %930, %931
  %933 = call float @dx.op.unary.f32(i32 24, float %932)  ; Sqrt(value)
  %934 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %934, label %935, label %939

; <label>:935                                     ; preds = %915
  %936 = fdiv fast float %921, %933
  %937 = fdiv fast float %924, %933
  %938 = fdiv fast float %927, %933
  br label %939

; <label>:939                                     ; preds = %935, %915
  %940 = phi float [ %936, %935 ], [ 0.000000e+00, %915 ]
  %941 = phi float [ %937, %935 ], [ 0.000000e+00, %915 ]
  %942 = phi float [ %938, %935 ], [ 0.000000e+00, %915 ]
  %943 = shl i32 %526, 2
  %944 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %945 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %944, i32 %943, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %946 = extractvalue %dx.types.ResRet.i32 %945, 0
  %947 = fmul fast float %491, %175
  %948 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %949 = extractvalue %dx.types.CBufRet.i32 %948, 1
  %950 = icmp ult i32 %946, %949
  br i1 %950, label %951, label %1430

; <label>:951                                     ; preds = %939
  %952 = mul i32 %946, 6
  %953 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %954 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %953, i32 %952, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %955 = extractvalue %dx.types.ResRet.f32 %954, 0
  %956 = extractvalue %dx.types.ResRet.f32 %954, 1
  %957 = extractvalue %dx.types.ResRet.f32 %954, 2
  %958 = or i32 %952, 1
  %959 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %953, i32 %958, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %960 = extractvalue %dx.types.ResRet.f32 %959, 0
  %961 = extractvalue %dx.types.ResRet.f32 %959, 1
  %962 = extractvalue %dx.types.ResRet.f32 %959, 2
  %963 = extractvalue %dx.types.ResRet.f32 %959, 3
  %964 = add i32 %952, 2
  %965 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %953, i32 %964, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %966 = extractvalue %dx.types.ResRet.f32 %965, 0
  %967 = extractvalue %dx.types.ResRet.f32 %965, 1
  %968 = extractvalue %dx.types.ResRet.f32 %965, 2
  %969 = extractvalue %dx.types.ResRet.f32 %965, 3
  %970 = add i32 %952, 3
  %971 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %953, i32 %970, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %972 = extractvalue %dx.types.ResRet.f32 %971, 0
  %973 = extractvalue %dx.types.ResRet.f32 %971, 1
  %974 = extractvalue %dx.types.ResRet.f32 %971, 2
  %975 = extractvalue %dx.types.ResRet.f32 %971, 3
  %976 = fmul fast float %955, 2.097152e+06
  %977 = fmul fast float %956, 2.097152e+06
  %978 = fmul fast float %957, 2.097152e+06
  %979 = add i32 %952, 4
  %980 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %953, i32 %979, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %981 = extractvalue %dx.types.ResRet.f32 %980, 0
  %982 = extractvalue %dx.types.ResRet.f32 %980, 1
  %983 = extractvalue %dx.types.ResRet.f32 %980, 2
  %984 = extractvalue %dx.types.ResRet.f32 %980, 3
  %985 = bitcast float %981 to i32
  %986 = bitcast float %982 to i32
  %987 = add i32 %952, 5
  %988 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %953, i32 %987, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %989 = extractvalue %dx.types.ResRet.f32 %988, 0
  %990 = extractvalue %dx.types.ResRet.f32 %988, 1
  %991 = extractvalue %dx.types.ResRet.f32 %988, 2
  %992 = extractvalue %dx.types.ResRet.f32 %988, 3
  %993 = and i32 %986, 65536
  %994 = icmp ne i32 %993, 0
  %995 = and i32 %986, 131072
  %996 = icmp ne i32 %995, 0
  %997 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 0
  %998 = bitcast i32* %997 to float*
  store float %983, float* %998, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %999 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 1
  %1000 = bitcast i32* %999 to float*
  store float %984, float* %1000, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1001 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 2
  %1002 = bitcast i32* %1001 to float*
  store float %989, float* %1002, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1003 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 3
  %1004 = bitcast i32* %1003 to float*
  store float %990, float* %1004, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1005 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 4
  %1006 = bitcast i32* %1005 to float*
  store float %991, float* %1006, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1007 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 5
  %1008 = bitcast i32* %1007 to float*
  store float %992, float* %1008, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1009 = select i1 %996, float 7.000000e+01, float 2.000000e+01
  %1010 = fsub fast float %549, %976
  %1011 = fsub fast float %1010, %963
  %1012 = fsub fast float %550, %977
  %1013 = fsub fast float %1012, %969
  %1014 = fsub fast float %551, %978
  %1015 = fsub fast float %1014, %975
  %1016 = fmul fast float %1011, %960
  %1017 = call float @dx.op.tertiary.f32(i32 46, float %1013, float %966, float %1016)  ; FMad(a,b,c)
  %1018 = call float @dx.op.tertiary.f32(i32 46, float %1015, float %972, float %1017)  ; FMad(a,b,c)
  %1019 = fmul fast float %1011, %961
  %1020 = call float @dx.op.tertiary.f32(i32 46, float %1013, float %967, float %1019)  ; FMad(a,b,c)
  %1021 = call float @dx.op.tertiary.f32(i32 46, float %1015, float %973, float %1020)  ; FMad(a,b,c)
  %1022 = fmul fast float %1011, %962
  %1023 = call float @dx.op.tertiary.f32(i32 46, float %1013, float %968, float %1022)  ; FMad(a,b,c)
  %1024 = call float @dx.op.tertiary.f32(i32 46, float %1015, float %974, float %1023)  ; FMad(a,b,c)
  %1025 = fmul fast float %960, %940
  %1026 = call float @dx.op.tertiary.f32(i32 46, float %941, float %966, float %1025)  ; FMad(a,b,c)
  %1027 = call float @dx.op.tertiary.f32(i32 46, float %942, float %972, float %1026)  ; FMad(a,b,c)
  %1028 = fmul fast float %961, %940
  %1029 = call float @dx.op.tertiary.f32(i32 46, float %941, float %967, float %1028)  ; FMad(a,b,c)
  %1030 = call float @dx.op.tertiary.f32(i32 46, float %942, float %973, float %1029)  ; FMad(a,b,c)
  %1031 = fmul fast float %962, %940
  %1032 = call float @dx.op.tertiary.f32(i32 46, float %941, float %968, float %1031)  ; FMad(a,b,c)
  %1033 = call float @dx.op.tertiary.f32(i32 46, float %942, float %974, float %1032)  ; FMad(a,b,c)
  %1034 = fmul fast float %1027, %1027
  %1035 = fmul fast float %1030, %1030
  %1036 = fmul fast float %1033, %1033
  %1037 = fcmp fast ogt float %1034, 0.000000e+00
  br i1 %1037, label %1038, label %1043

; <label>:1038                                    ; preds = %951
  %1039 = fcmp uge float %1027, 0.000000e+00
  %1040 = zext i1 %1039 to i32
  %1041 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 %1040
  %1042 = load i32, i32* %1041, align 4, !tbaa !64, !noalias !71
  br label %1043

; <label>:1043                                    ; preds = %1038, %951
  %1044 = phi i32 [ %1042, %1038 ], [ 0, %951 ]
  %1045 = fcmp fast ogt float %1035, 0.000000e+00
  br i1 %1045, label %1046, label %1052

; <label>:1046                                    ; preds = %1043
  %1047 = fcmp fast olt float %1030, 0.000000e+00
  %1048 = select i1 %1047, i32 2, i32 3
  %1049 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 %1048
  %1050 = load i32, i32* %1049, align 4, !tbaa !64, !noalias !71
  %1051 = or i32 %1050, %1044
  br label %1052

; <label>:1052                                    ; preds = %1046, %1043
  %1053 = phi i32 [ %1051, %1046 ], [ %1044, %1043 ]
  %1054 = fcmp fast ogt float %1036, 0.000000e+00
  br i1 %1054, label %1055, label %1061

; <label>:1055                                    ; preds = %1052
  %1056 = fcmp fast olt float %1033, 0.000000e+00
  %1057 = select i1 %1056, i32 4, i32 5
  %1058 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 %1057
  %1059 = load i32, i32* %1058, align 4, !tbaa !64, !noalias !71
  %1060 = or i32 %1059, %1053
  br label %1061

; <label>:1061                                    ; preds = %1055, %1052
  %1062 = phi i32 [ %1060, %1055 ], [ %1053, %1052 ]
  %1063 = icmp eq i32 %1062, 0
  br i1 %1063, label %1108, label %1064

; <label>:1064                                    ; preds = %1061
  br label %1065

; <label>:1065                                    ; preds = %1065, %1064
  %1066 = phi i32 [ %1071, %1065 ], [ %1062, %1064 ]
  %1067 = phi i32 [ %1105, %1065 ], [ 0, %1064 ]
  %1068 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1066)  ; FirstbitLo(value)
  %1069 = and i32 %1068, 31
  %1070 = shl i32 1, %1069
  %1071 = xor i32 %1070, %1066
  %1072 = add i32 %1068, %985
  %1073 = mul i32 %1072, 10
  %1074 = add i32 %1073, 6
  %1075 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1076 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1075, i32 %1074, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1077 = extractvalue %dx.types.ResRet.f32 %1076, 3
  %1078 = add i32 %1073, 7
  %1079 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1075, i32 %1078, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1080 = extractvalue %dx.types.ResRet.f32 %1079, 3
  %1081 = add i32 %1073, 8
  %1082 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1075, i32 %1081, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1083 = extractvalue %dx.types.ResRet.f32 %1082, 3
  %1084 = add i32 %1073, 9
  %1085 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1075, i32 %1084, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1086 = extractvalue %dx.types.ResRet.f32 %1085, 0
  %1087 = extractvalue %dx.types.ResRet.f32 %1085, 1
  %1088 = extractvalue %dx.types.ResRet.f32 %1085, 2
  %1089 = fsub fast float %1018, %1077
  %1090 = fsub fast float %1021, %1080
  %1091 = fsub fast float %1024, %1083
  %1092 = call float @dx.op.unary.f32(i32 6, float %1089)  ; FAbs(value)
  %1093 = call float @dx.op.unary.f32(i32 6, float %1090)  ; FAbs(value)
  %1094 = call float @dx.op.unary.f32(i32 6, float %1091)  ; FAbs(value)
  %1095 = fmul fast float %1009, 5.000000e-01
  %1096 = fadd fast float %1086, %1095
  %1097 = fadd fast float %1087, %1095
  %1098 = fadd fast float %1088, %1095
  %1099 = fcmp fast ole float %1092, %1096
  %1100 = fcmp fast ole float %1093, %1097
  %1101 = fcmp fast ole float %1094, %1098
  %1102 = and i1 %1099, %1100
  %1103 = and i1 %1102, %1101
  %1104 = select i1 %1103, i32 %1070, i32 0
  %1105 = or i32 %1104, %1067
  %1106 = icmp eq i32 %1066, %1070
  br i1 %1106, label %1107, label %1065

; <label>:1107                                    ; preds = %1065
  br label %1108

; <label>:1108                                    ; preds = %1107, %1061
  %1109 = phi i32 [ 0, %1061 ], [ %1105, %1107 ]
  %1110 = select i1 %994, i32 1, i32 %1109
  %1111 = icmp eq i32 %1110, 0
  br i1 %1111, label %1430, label %1112

; <label>:1112                                    ; preds = %1108
  br label %1113

; <label>:1113                                    ; preds = %1136, %1112
  %1114 = phi float [ %1137, %1136 ], [ 0.000000e+00, %1112 ]
  %1115 = phi float [ %1138, %1136 ], [ 0.000000e+00, %1112 ]
  %1116 = phi float [ %1139, %1136 ], [ 0.000000e+00, %1112 ]
  %1117 = phi float [ %1140, %1136 ], [ 0.000000e+00, %1112 ]
  %1118 = phi float [ %1141, %1136 ], [ 0.000000e+00, %1112 ]
  %1119 = phi i32 [ %1142, %1136 ], [ 0, %1112 ]
  %1120 = phi i32 [ %1143, %1136 ], [ 0, %1112 ]
  %1121 = phi i32 [ %1144, %1136 ], [ 0, %1112 ]
  %1122 = phi i32 [ %1126, %1136 ], [ %1110, %1112 ]
  %1123 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1122)  ; FirstbitLo(value)
  %1124 = and i32 %1123, 31
  %1125 = shl i32 1, %1124
  %1126 = xor i32 %1125, %1122
  %1127 = add i32 %1123, %985
  %1128 = mul i32 %1127, 10
  %1129 = add i32 %1128, 4
  %1130 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1131 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1130, i32 %1129, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1132 = extractvalue %dx.types.ResRet.f32 %1131, 3
  %1133 = bitcast float %1132 to i32
  %1134 = and i32 %1133, 16777216
  %1135 = icmp eq i32 %1134, 0
  br i1 %1135, label %1136, label %1146

; <label>:1136                                    ; preds = %3195, %1428, %1396, %1365, %1203, %1150, %1146, %1113
  %1137 = phi float [ %1114, %1113 ], [ %3202, %1428 ], [ %1114, %1396 ], [ %1114, %3195 ], [ %1114, %1365 ], [ %1114, %1203 ], [ %1114, %1150 ], [ %1114, %1146 ]
  %1138 = phi float [ %1115, %1113 ], [ %1423, %1428 ], [ %1423, %1396 ], [ %1115, %3195 ], [ %1115, %1365 ], [ %1115, %1203 ], [ %1115, %1150 ], [ %1115, %1146 ]
  %1139 = phi float [ %1116, %1113 ], [ %1424, %1428 ], [ %1424, %1396 ], [ %1116, %3195 ], [ %1116, %1365 ], [ %1116, %1203 ], [ %1116, %1150 ], [ %1116, %1146 ]
  %1140 = phi float [ %1117, %1113 ], [ %1425, %1428 ], [ %1425, %1396 ], [ %1117, %3195 ], [ %1117, %1365 ], [ %1117, %1203 ], [ %1117, %1150 ], [ %1117, %1146 ]
  %1141 = phi float [ %1118, %1113 ], [ %1426, %1428 ], [ %1426, %1396 ], [ %1118, %3195 ], [ %1118, %1365 ], [ %1118, %1203 ], [ %1118, %1150 ], [ %1118, %1146 ]
  %1142 = phi i32 [ %1119, %1113 ], [ %1340, %1428 ], [ %1119, %1396 ], [ %1119, %3195 ], [ %1119, %1365 ], [ %1119, %1203 ], [ %1119, %1150 ], [ %1119, %1146 ]
  %1143 = phi i32 [ %1120, %1113 ], [ %1342, %1428 ], [ %1120, %1396 ], [ %1120, %3195 ], [ %1120, %1365 ], [ %1120, %1203 ], [ %1120, %1150 ], [ %1120, %1146 ]
  %1144 = phi i32 [ %1121, %1113 ], [ %1246, %1428 ], [ %1121, %1396 ], [ %1121, %3195 ], [ %1121, %1365 ], [ %1121, %1203 ], [ %1121, %1150 ], [ %1121, %1146 ]
  %1145 = icmp eq i32 %1122, %1125
  br i1 %1145, label %1429, label %1113

; <label>:1146                                    ; preds = %1113
  %1147 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1148 = extractvalue %dx.types.CBufRet.i32 %1147, 0
  %1149 = icmp ult i32 %1127, %1148
  br i1 %1149, label %1150, label %1136

; <label>:1150                                    ; preds = %1146
  %1151 = extractvalue %dx.types.ResRet.f32 %1131, 0
  %1152 = extractvalue %dx.types.ResRet.f32 %1131, 1
  %1153 = extractvalue %dx.types.ResRet.f32 %1131, 2
  %1154 = add i32 %1128, 5
  %1155 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1130, i32 %1154, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1156 = add i32 %1128, 6
  %1157 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1130, i32 %1156, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1158 = add i32 %1128, 7
  %1159 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1130, i32 %1158, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1160 = add i32 %1128, 8
  %1161 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1130, i32 %1160, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1162 = call float @dx.op.unary.f32(i32 6, float %1151)  ; FAbs(value)
  %1163 = call float @dx.op.unary.f32(i32 6, float %1152)  ; FAbs(value)
  %1164 = call float @dx.op.unary.f32(i32 6, float %1153)  ; FAbs(value)
  %1165 = lshr i32 %1133, 16
  %1166 = and i32 %1165, 15
  %1167 = extractvalue %dx.types.ResRet.f32 %1161, 3
  %1168 = extractvalue %dx.types.ResRet.f32 %1161, 2
  %1169 = extractvalue %dx.types.ResRet.f32 %1161, 1
  %1170 = extractvalue %dx.types.ResRet.f32 %1161, 0
  %1171 = extractvalue %dx.types.ResRet.f32 %1159, 3
  %1172 = extractvalue %dx.types.ResRet.f32 %1159, 2
  %1173 = extractvalue %dx.types.ResRet.f32 %1159, 1
  %1174 = extractvalue %dx.types.ResRet.f32 %1159, 0
  %1175 = extractvalue %dx.types.ResRet.f32 %1157, 3
  %1176 = extractvalue %dx.types.ResRet.f32 %1157, 2
  %1177 = extractvalue %dx.types.ResRet.f32 %1157, 1
  %1178 = extractvalue %dx.types.ResRet.f32 %1157, 0
  %1179 = fsub fast float %1018, %1175
  %1180 = fsub fast float %1021, %1171
  %1181 = fsub fast float %1024, %1167
  %1182 = fmul fast float %1179, %1178
  %1183 = call float @dx.op.tertiary.f32(i32 46, float %1180, float %1174, float %1182)  ; FMad(a,b,c)
  %1184 = call float @dx.op.tertiary.f32(i32 46, float %1181, float %1170, float %1183)  ; FMad(a,b,c)
  %1185 = fmul fast float %1179, %1177
  %1186 = call float @dx.op.tertiary.f32(i32 46, float %1180, float %1173, float %1185)  ; FMad(a,b,c)
  %1187 = call float @dx.op.tertiary.f32(i32 46, float %1181, float %1169, float %1186)  ; FMad(a,b,c)
  %1188 = fmul fast float %1179, %1176
  %1189 = call float @dx.op.tertiary.f32(i32 46, float %1180, float %1172, float %1188)  ; FMad(a,b,c)
  %1190 = call float @dx.op.tertiary.f32(i32 46, float %1181, float %1168, float %1189)  ; FMad(a,b,c)
  %1191 = call float @dx.op.unary.f32(i32 6, float %1184)  ; FAbs(value)
  %1192 = call float @dx.op.unary.f32(i32 6, float %1187)  ; FAbs(value)
  %1193 = call float @dx.op.unary.f32(i32 6, float %1190)  ; FAbs(value)
  %1194 = fmul fast float %1009, 5.000000e-01
  %1195 = fadd fast float %1162, %1194
  %1196 = fadd fast float %1163, %1194
  %1197 = fadd fast float %1164, %1194
  %1198 = fcmp fast ole float %1191, %1195
  %1199 = fcmp fast ole float %1192, %1196
  %1200 = fcmp fast ole float %1193, %1197
  %1201 = and i1 %1198, %1199
  %1202 = and i1 %1201, %1200
  br i1 %1202, label %1203, label %1136

; <label>:1203                                    ; preds = %1150
  %1204 = lshr i32 %1133, 8
  %1205 = and i32 %1204, 255
  %1206 = and i32 %1133, 255
  %1207 = extractvalue %dx.types.ResRet.f32 %1155, 3
  %1208 = extractvalue %dx.types.ResRet.f32 %1155, 2
  %1209 = extractvalue %dx.types.ResRet.f32 %1155, 1
  %1210 = extractvalue %dx.types.ResRet.f32 %1155, 0
  %1211 = fsub fast float -0.000000e+00, %1162
  %1212 = fsub fast float -0.000000e+00, %1163
  %1213 = call float @dx.op.binary.f32(i32 35, float %1184, float %1211)  ; FMax(a,b)
  %1214 = call float @dx.op.binary.f32(i32 35, float %1187, float %1212)  ; FMax(a,b)
  %1215 = call float @dx.op.binary.f32(i32 36, float %1213, float %1162)  ; FMin(a,b)
  %1216 = call float @dx.op.binary.f32(i32 36, float %1214, float %1163)  ; FMin(a,b)
  %1217 = fdiv fast float %1215, %1162
  %1218 = fdiv fast float %1216, %1163
  %1219 = fmul fast float %1217, 5.000000e-01
  %1220 = fmul fast float %1218, 5.000000e-01
  %1221 = fadd fast float %1219, 5.000000e-01
  %1222 = fsub fast float 5.000000e-01, %1220
  %1223 = call float @dx.op.unary.f32(i32 7, float %1221)  ; Saturate(value)
  %1224 = call float @dx.op.unary.f32(i32 7, float %1222)  ; Saturate(value)
  %1225 = call float @dx.op.binary.f32(i32 36, float %1223, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1226 = call float @dx.op.binary.f32(i32 36, float %1224, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1227 = select i1 %178, float %1208, float %1210
  %1228 = bitcast float %1227 to i32
  %1229 = and i32 %1228, 65535
  %1230 = lshr i32 %1228, 16
  %1231 = select i1 %178, float %1207, float %1209
  %1232 = bitcast float %1231 to i32
  %1233 = uitofp i32 %1229 to float
  %1234 = uitofp i32 %1230 to float
  %1235 = fmul fast float %1225, %1233
  %1236 = fmul fast float %1226, %1234
  %1237 = fptoui float %1235 to i32
  %1238 = fptoui float %1236 to i32
  %1239 = mul i32 %1238, %1229
  %1240 = add i32 %1237, %1232
  %1241 = add i32 %1240, %1239
  %1242 = shl i32 %1241, 3
  %1243 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1244 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1243, i32 %1242, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1245 = extractvalue %dx.types.ResRet.i32 %1244, 0
  %1246 = extractvalue %dx.types.ResRet.i32 %1244, 1
  %1247 = shl i32 %1245, 3
  %1248 = and i32 %1247, 32760
  %1249 = lshr i32 %1245, 9
  %1250 = and i32 %1249, 32760
  %1251 = lshr i32 %1245, 24
  %1252 = and i32 %1251, 15
  %1253 = lshr i32 %1245, 28
  %1254 = add nuw nsw i32 %1252, 25
  %1255 = add nuw nsw i32 %1253, 25
  %1256 = and i32 %1254, 31
  %1257 = and i32 %1255, 31
  %1258 = shl i32 1, %1256
  %1259 = shl i32 1, %1257
  %1260 = icmp ugt i32 %1252, 7
  %1261 = icmp slt i32 %1245, 0
  %1262 = select i1 %1260, i32 %1258, i32 1
  %1263 = select i1 %1261, i32 %1259, i32 1
  %1264 = uitofp i32 %1262 to float
  %1265 = uitofp i32 %1263 to float
  %1266 = fmul fast float %1264, %1225
  %1267 = fmul fast float %1265, %1226
  %1268 = fptoui float %1266 to i32
  %1269 = fptoui float %1267 to i32
  %1270 = shl i32 1, %1252
  %1271 = shl i32 1, %1253
  %1272 = call float @dx.op.unary.f32(i32 22, float %1266)  ; Frc(value)
  %1273 = call float @dx.op.unary.f32(i32 22, float %1267)  ; Frc(value)
  %1274 = icmp eq i32 %1268, 0
  %1275 = icmp eq i32 %1269, 0
  %1276 = select i1 %1274, float 0.000000e+00, float 5.000000e-01
  %1277 = select i1 %1275, float 0.000000e+00, float 5.000000e-01
  %1278 = add i32 %1268, 1
  %1279 = add i32 %1269, 1
  %1280 = icmp eq i32 %1278, %1262
  %1281 = icmp eq i32 %1279, %1263
  %1282 = uitofp i32 %1270 to float
  %1283 = select i1 %1260, float 1.280000e+02, float %1282
  %1284 = uitofp i32 %1271 to float
  %1285 = select i1 %1261, float 1.280000e+02, float %1284
  %1286 = fsub fast float %1283, %1276
  %1287 = fsub fast float %1285, %1277
  %1288 = select i1 %1280, float -0.000000e+00, float -5.000000e-01
  %1289 = fadd fast float %1286, %1288
  %1290 = select i1 %1281, float -0.000000e+00, float -5.000000e-01
  %1291 = fadd fast float %1287, %1290
  %1292 = fmul fast float %1289, %1272
  %1293 = fmul fast float %1291, %1273
  %1294 = fadd fast float %1292, %1276
  %1295 = fadd fast float %1293, %1277
  %1296 = fadd fast float %1283, -1.500000e+00
  %1297 = fadd fast float %1285, -1.500000e+00
  %1298 = call float @dx.op.binary.f32(i32 35, float %1294, float 5.000000e-01)  ; FMax(a,b)
  %1299 = call float @dx.op.binary.f32(i32 35, float %1295, float 5.000000e-01)  ; FMax(a,b)
  %1300 = call float @dx.op.binary.f32(i32 36, float %1298, float %1296)  ; FMin(a,b)
  %1301 = call float @dx.op.binary.f32(i32 36, float %1299, float %1297)  ; FMin(a,b)
  %1302 = uitofp i32 %1248 to float
  %1303 = uitofp i32 %1250 to float
  %1304 = fadd fast float %1300, %1302
  %1305 = fadd fast float %1301, %1303
  %1306 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1307 = extractvalue %dx.types.CBufRet.f32 %1306, 0
  %1308 = extractvalue %dx.types.CBufRet.f32 %1306, 1
  %1309 = fmul fast float %1307, %1304
  %1310 = fmul fast float %1308, %1305
  %1311 = call float @dx.op.binary.f32(i32 35, float %1162, float %1163)  ; FMax(a,b)
  %1312 = call float @dx.op.binary.f32(i32 35, float %947, float 1.000000e+00)  ; FMax(a,b)
  %1313 = fdiv fast float %1311, %1312
  %1314 = call float @dx.op.unary.f32(i32 23, float %1313)  ; Log(value)
  %1315 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1316 = extractvalue %dx.types.CBufRet.f32 %1315, 0
  %1317 = fadd fast float %1316, %1314
  %1318 = call float @dx.op.binary.f32(i32 35, float %1317, float 3.000000e+00)  ; FMax(a,b)
  %1319 = call float @dx.op.binary.f32(i32 36, float %1318, float 1.100000e+01)  ; FMin(a,b)
  %1320 = fptoui float %1319 to i32
  %1321 = sub i32 %1320, %1206
  %1322 = sub i32 %1320, %1205
  %1323 = add i32 %1321, 25
  %1324 = add i32 %1322, 25
  %1325 = and i32 %1323, 31
  %1326 = and i32 %1324, 31
  %1327 = shl i32 1, %1325
  %1328 = shl i32 1, %1326
  %1329 = icmp ugt i32 %1321, 7
  %1330 = icmp ugt i32 %1322, 7
  %1331 = uitofp i32 %1327 to float
  %1332 = select i1 %1329, float %1331, float 1.000000e+00
  %1333 = uitofp i32 %1328 to float
  %1334 = select i1 %1330, float %1333, float 1.000000e+00
  %1335 = fmul fast float %1332, %1225
  %1336 = fmul fast float %1334, %1226
  %1337 = fptoui float %1335 to i32
  %1338 = fptoui float %1336 to i32
  %1339 = shl i32 %1320, 24
  %1340 = or i32 %1339, %1127
  %1341 = shl i32 %1338, 8
  %1342 = add i32 %1341, %1337
  %1343 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1344 = extractvalue %dx.types.CBufRet.f32 %1343, 2
  %1345 = extractvalue %dx.types.CBufRet.f32 %1343, 3
  %1346 = fmul fast float %1344, %1309
  %1347 = fmul fast float %1345, %1310
  %1348 = fadd fast float %1346, 0x3FE0100000000000
  %1349 = fadd fast float %1347, 0x3FE0100000000000
  %1350 = call float @dx.op.unary.f32(i32 22, float %1348)  ; Frc(value)
  %1351 = call float @dx.op.unary.f32(i32 22, float %1349)  ; Frc(value)
  %1352 = fsub fast float 1.000000e+00, %1350
  %1353 = fmul fast float %1352, %1351
  %1354 = fmul fast float %1351, %1350
  %1355 = fsub fast float 1.000000e+00, %1351
  %1356 = fmul fast float %1355, %1350
  %1357 = fmul fast float %1355, %1352
  %1358 = icmp eq i32 %1252, 0
  br i1 %1358, label %1136, label %1359

; <label>:1359                                    ; preds = %1203
  br i1 %994, label %1365, label %1360

; <label>:1360                                    ; preds = %1359
  %1361 = icmp ult i32 %1166, 2
  br i1 %1361, label %1365, label %1362

; <label>:1362                                    ; preds = %1360
  %1363 = icmp ult i32 %1166, 4
  %1364 = select i1 %1363, float %1035, float %1036
  br label %1365

; <label>:1365                                    ; preds = %1362, %1360, %1359
  %1366 = phi float [ 1.000000e+00, %1359 ], [ %1034, %1360 ], [ %1364, %1362 ]
  %1367 = fcmp fast ogt float %1366, 0.000000e+00
  br i1 %1367, label %1368, label %1136

; <label>:1368                                    ; preds = %1365
  %1369 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1370 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1371 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1369, %dx.types.Handle %1370, float %1309, float %1310, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1372 = extractvalue %dx.types.ResRet.f32 %1371, 0
  %1373 = extractvalue %dx.types.ResRet.f32 %1371, 1
  %1374 = extractvalue %dx.types.ResRet.f32 %1371, 2
  %1375 = extractvalue %dx.types.ResRet.f32 %1371, 3
  %1376 = fdiv fast float %1190, %1164
  %1377 = fmul fast float %1376, 5.000000e-01
  %1378 = fsub fast float 5.000000e-01, %1377
  %1379 = fdiv fast float %1009, %1164
  %1380 = fmul fast float %1379, 2.500000e-01
  %1381 = fcmp uge float %1372, 1.000000e+00
  %1382 = or i1 %994, %1381
  %1383 = select i1 %1381, float 0.000000e+00, float 1.000000e+00
  br i1 %1382, label %1391, label %1384

; <label>:1384                                    ; preds = %1368
  %1385 = fsub fast float %1378, %1372
  %1386 = call float @dx.op.unary.f32(i32 6, float %1385)  ; FAbs(value)
  %1387 = fsub fast float %1386, %1379
  %1388 = fdiv fast float %1387, %1380
  %1389 = call float @dx.op.unary.f32(i32 7, float %1388)  ; Saturate(value)
  %1390 = fsub fast float 1.000000e+00, %1389
  br label %1391

; <label>:1391                                    ; preds = %1384, %1368
  %1392 = phi float [ %1390, %1384 ], [ %1383, %1368 ]
  %1393 = fcmp uge float %1373, 1.000000e+00
  %1394 = or i1 %994, %1393
  %1395 = select i1 %1393, float 0.000000e+00, float 1.000000e+00
  br i1 %1394, label %3171, label %3164

; <label>:1396                                    ; preds = %3195
  %1397 = fdiv fast float %3197, %3201
  %1398 = fdiv fast float %3198, %3201
  %1399 = fdiv fast float %3199, %3201
  %1400 = fdiv fast float %3200, %3201
  %1401 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1402 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1401, %dx.types.Handle %1370, float %1309, float %1310, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1403 = extractvalue %dx.types.ResRet.f32 %1402, 0
  %1404 = extractvalue %dx.types.ResRet.f32 %1402, 1
  %1405 = extractvalue %dx.types.ResRet.f32 %1402, 2
  %1406 = extractvalue %dx.types.ResRet.f32 %1402, 3
  %1407 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1401, %dx.types.Handle %1370, float %1309, float %1310, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1408 = extractvalue %dx.types.ResRet.f32 %1407, 0
  %1409 = extractvalue %dx.types.ResRet.f32 %1407, 1
  %1410 = extractvalue %dx.types.ResRet.f32 %1407, 2
  %1411 = extractvalue %dx.types.ResRet.f32 %1407, 3
  %1412 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1401, %dx.types.Handle %1370, float %1309, float %1310, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1413 = extractvalue %dx.types.ResRet.f32 %1412, 0
  %1414 = extractvalue %dx.types.ResRet.f32 %1412, 1
  %1415 = extractvalue %dx.types.ResRet.f32 %1412, 2
  %1416 = extractvalue %dx.types.ResRet.f32 %1412, 3
  %1417 = call float @dx.op.dot4.f32(i32 56, float %1403, float %1404, float %1405, float %1406, float %1397, float %1398, float %1399, float %1400)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1418 = call float @dx.op.dot4.f32(i32 56, float %1408, float %1409, float %1410, float %1411, float %1397, float %1398, float %1399, float %1400)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1419 = call float @dx.op.dot4.f32(i32 56, float %1413, float %1414, float %1415, float %1416, float %1397, float %1398, float %1399, float %1400)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1420 = fmul fast float %1417, %3202
  %1421 = fmul fast float %1418, %3202
  %1422 = fmul fast float %1419, %3202
  %1423 = fadd fast float %1420, %1115
  %1424 = fadd fast float %1421, %1116
  %1425 = fadd fast float %1422, %1117
  %1426 = fadd fast float %3202, %1118
  %1427 = fcmp fast ogt float %3202, %1114
  br i1 %1427, label %1428, label %1136

; <label>:1428                                    ; preds = %1396
  br label %1136

; <label>:1429                                    ; preds = %1136
  br label %1430

; <label>:1430                                    ; preds = %1429, %1108, %939
  %1431 = phi float [ 0.000000e+00, %939 ], [ 0.000000e+00, %1108 ], [ %1138, %1429 ]
  %1432 = phi float [ 0.000000e+00, %939 ], [ 0.000000e+00, %1108 ], [ %1139, %1429 ]
  %1433 = phi float [ 0.000000e+00, %939 ], [ 0.000000e+00, %1108 ], [ %1140, %1429 ]
  %1434 = phi float [ 0.000000e+00, %939 ], [ 0.000000e+00, %1108 ], [ %1141, %1429 ]
  %1435 = phi i32 [ 0, %939 ], [ 0, %1108 ], [ %1142, %1429 ]
  %1436 = phi i32 [ 0, %939 ], [ 0, %1108 ], [ %1143, %1429 ]
  %1437 = phi i32 [ 0, %939 ], [ 0, %1108 ], [ %1144, %1429 ]
  %1438 = fcmp fast ogt float %1434, 0.000000e+00
  br i1 %1438, label %1439, label %1469

; <label>:1439                                    ; preds = %1430
  %1440 = fdiv fast float %1431, %1434
  %1441 = fdiv fast float %1432, %1434
  %1442 = fdiv fast float %1433, %1434
  %1443 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1444 = extractvalue %dx.types.CBufRet.i32 %1443, 1
  %1445 = and i32 %1444, %60
  %1446 = and i32 %1444, %61
  %1447 = extractvalue %dx.types.CBufRet.i32 %1443, 2
  %1448 = extractvalue %dx.types.CBufRet.i32 %1443, 3
  %1449 = icmp eq i32 %1445, %1447
  %1450 = icmp eq i32 %1446, %1448
  %1451 = and i1 %1449, %1450
  br i1 %1451, label %1452, label %1469

; <label>:1452                                    ; preds = %1439
  %1453 = extractvalue %dx.types.CBufRet.i32 %1443, 0
  %1454 = icmp ne i32 %1453, 0
  %1455 = fcmp fast ogt float %1434, 0x3FB99999A0000000
  %1456 = and i1 %1455, %1454
  br i1 %1456, label %1457, label %1469

; <label>:1457                                    ; preds = %1452
  %1458 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1459 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1458, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1460 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1461 = extractvalue %dx.types.CBufRet.i32 %1460, 0
  %1462 = icmp ult i32 %1459, %1461
  br i1 %1462, label %1463, label %1465

; <label>:1463                                    ; preds = %1457
  %1464 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1464, i32 %1459, i32 0, i32 %1435, i32 %1436, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1465

; <label>:1465                                    ; preds = %1463, %1457
  %1466 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1467 = extractvalue %dx.types.CBufRet.i32 %1466, 1
  %1468 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1468, i32 %1437, i32 0, i32 %1467, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1469

; <label>:1469                                    ; preds = %1465, %1452, %1439, %1430, %489, %56
  %1470 = phi float [ %161, %56 ], [ %491, %1430 ], [ %491, %1439 ], [ %491, %1452 ], [ %491, %1465 ], [ %491, %489 ]
  %1471 = phi float [ 1.000000e+00, %56 ], [ 0.000000e+00, %1430 ], [ 0.000000e+00, %1439 ], [ 0.000000e+00, %1452 ], [ 0.000000e+00, %1465 ], [ 1.000000e+00, %489 ]
  %1472 = phi float [ 0.000000e+00, %56 ], [ 0.000000e+00, %1430 ], [ %1440, %1439 ], [ %1440, %1452 ], [ %1440, %1465 ], [ 0.000000e+00, %489 ]
  %1473 = phi float [ 0.000000e+00, %56 ], [ 0.000000e+00, %1430 ], [ %1441, %1439 ], [ %1441, %1452 ], [ %1441, %1465 ], [ 0.000000e+00, %489 ]
  %1474 = phi float [ 0.000000e+00, %56 ], [ 0.000000e+00, %1430 ], [ %1442, %1439 ], [ %1442, %1452 ], [ %1442, %1465 ], [ 0.000000e+00, %489 ]
  %1475 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1476 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1475, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %1477 = extractvalue %dx.types.ResRet.i32 %1476, 0
  %1478 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1479 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1478, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %1480 = extractvalue %dx.types.ResRet.i32 %1479, 0
  br i1 %212, label %1481, label %2731

; <label>:1481                                    ; preds = %1469
  %1482 = call float @dx.op.binary.f32(i32 36, float %180, float %1470)  ; FMin(a,b)
  %1483 = icmp eq i32 %1477, 0
  br i1 %1483, label %2189, label %1484

; <label>:1484                                    ; preds = %1481
  br label %1485

; <label>:1485                                    ; preds = %2174, %1484
  %1486 = phi float [ %2183, %2174 ], [ %1482, %1484 ]
  %1487 = phi i32 [ %2184, %2174 ], [ 0, %1484 ]
  %1488 = phi i32 [ %2185, %2174 ], [ 0, %1484 ]
  %1489 = phi i32 [ %2186, %2174 ], [ 0, %1484 ]
  %1490 = add i32 %1489, %1480
  %1491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1492 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1491, i32 %1490, i32 undef)  ; BufferLoad(srv,index,wot)
  %1493 = extractvalue %dx.types.ResRet.i32 %1492, 0
  %1494 = mul i32 %1493, 3
  %1495 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1496 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1495, i32 %1494, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1497 = extractvalue %dx.types.ResRet.f32 %1496, 3
  %1498 = bitcast float %1497 to i32
  %1499 = mul i32 %1498, 6
  %1500 = add i32 %1499, 4
  %1501 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1502 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1501, i32 %1500, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1503 = extractvalue %dx.types.ResRet.f32 %1502, 0
  %1504 = bitcast float %1503 to i32
  %1505 = mul i32 %1504, 10
  %1506 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1507 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1506, i32 %1505, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1508 = extractvalue %dx.types.ResRet.f32 %1507, 0
  %1509 = extractvalue %dx.types.ResRet.f32 %1507, 1
  %1510 = extractvalue %dx.types.ResRet.f32 %1507, 2
  %1511 = or i32 %1505, 1
  %1512 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1506, i32 %1511, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1513 = extractvalue %dx.types.ResRet.f32 %1512, 0
  %1514 = extractvalue %dx.types.ResRet.f32 %1512, 1
  %1515 = extractvalue %dx.types.ResRet.f32 %1512, 2
  %1516 = extractvalue %dx.types.ResRet.f32 %1512, 3
  %1517 = add i32 %1505, 2
  %1518 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1506, i32 %1517, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1519 = extractvalue %dx.types.ResRet.f32 %1518, 0
  %1520 = extractvalue %dx.types.ResRet.f32 %1518, 1
  %1521 = extractvalue %dx.types.ResRet.f32 %1518, 2
  %1522 = extractvalue %dx.types.ResRet.f32 %1518, 3
  %1523 = add i32 %1505, 3
  %1524 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1506, i32 %1523, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1525 = extractvalue %dx.types.ResRet.f32 %1524, 0
  %1526 = extractvalue %dx.types.ResRet.f32 %1524, 1
  %1527 = extractvalue %dx.types.ResRet.f32 %1524, 2
  %1528 = extractvalue %dx.types.ResRet.f32 %1524, 3
  %1529 = add i32 %1505, 4
  %1530 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1506, i32 %1529, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1531 = extractvalue %dx.types.ResRet.f32 %1530, 0
  %1532 = extractvalue %dx.types.ResRet.f32 %1530, 1
  %1533 = extractvalue %dx.types.ResRet.f32 %1530, 2
  %1534 = add i32 %1505, 5
  %1535 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1506, i32 %1534, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1536 = extractvalue %dx.types.ResRet.f32 %1535, 0
  %1537 = extractvalue %dx.types.ResRet.f32 %1535, 1
  %1538 = add i32 %1505, 9
  %1539 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1506, i32 %1538, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1540 = extractvalue %dx.types.ResRet.f32 %1539, 3
  %1541 = fmul fast float %1508, 2.097152e+06
  %1542 = fmul fast float %1509, 2.097152e+06
  %1543 = fmul fast float %1510, 2.097152e+06
  %1544 = call float @dx.op.unary.f32(i32 6, float %1531)  ; FAbs(value)
  %1545 = call float @dx.op.unary.f32(i32 6, float %1532)  ; FAbs(value)
  %1546 = call float @dx.op.unary.f32(i32 6, float %1533)  ; FAbs(value)
  %1547 = bitcast float %1536 to i32
  %1548 = and i32 %1547, 65535
  %1549 = lshr i32 %1547, 16
  %1550 = bitcast float %1537 to i32
  %1551 = fsub fast float %167, %1541
  %1552 = fsub fast float %1551, %1516
  %1553 = fsub fast float %168, %1542
  %1554 = fsub fast float %1553, %1522
  %1555 = fsub fast float %169, %1543
  %1556 = fsub fast float %1555, %1528
  %1557 = fmul fast float %1552, %1513
  %1558 = call float @dx.op.tertiary.f32(i32 46, float %1554, float %1519, float %1557)  ; FMad(a,b,c)
  %1559 = call float @dx.op.tertiary.f32(i32 46, float %1556, float %1525, float %1558)  ; FMad(a,b,c)
  %1560 = fmul fast float %1552, %1514
  %1561 = call float @dx.op.tertiary.f32(i32 46, float %1554, float %1520, float %1560)  ; FMad(a,b,c)
  %1562 = call float @dx.op.tertiary.f32(i32 46, float %1556, float %1526, float %1561)  ; FMad(a,b,c)
  %1563 = fmul fast float %1552, %1515
  %1564 = call float @dx.op.tertiary.f32(i32 46, float %1554, float %1521, float %1563)  ; FMad(a,b,c)
  %1565 = call float @dx.op.tertiary.f32(i32 46, float %1556, float %1527, float %1564)  ; FMad(a,b,c)
  %1566 = fmul fast float %1513, %153
  %1567 = call float @dx.op.tertiary.f32(i32 46, float %154, float %1519, float %1566)  ; FMad(a,b,c)
  %1568 = call float @dx.op.tertiary.f32(i32 46, float %155, float %1525, float %1567)  ; FMad(a,b,c)
  %1569 = fmul fast float %1514, %153
  %1570 = call float @dx.op.tertiary.f32(i32 46, float %154, float %1520, float %1569)  ; FMad(a,b,c)
  %1571 = call float @dx.op.tertiary.f32(i32 46, float %155, float %1526, float %1570)  ; FMad(a,b,c)
  %1572 = fmul fast float %1515, %153
  %1573 = call float @dx.op.tertiary.f32(i32 46, float %154, float %1521, float %1572)  ; FMad(a,b,c)
  %1574 = call float @dx.op.tertiary.f32(i32 46, float %155, float %1527, float %1573)  ; FMad(a,b,c)
  %1575 = fmul fast float %1568, %1482
  %1576 = fmul fast float %1571, %1482
  %1577 = fmul fast float %1574, %1482
  %1578 = fsub fast float -0.000000e+00, %1544
  %1579 = fsub fast float -0.000000e+00, %1545
  %1580 = fsub fast float -0.000000e+00, %1546
  %1581 = fdiv fast float 1.000000e+00, %1575
  %1582 = fdiv fast float 1.000000e+00, %1576
  %1583 = fdiv fast float 1.000000e+00, %1577
  %1584 = fsub fast float %1578, %1559
  %1585 = fsub fast float %1579, %1562
  %1586 = fsub fast float %1580, %1565
  %1587 = fmul fast float %1581, %1584
  %1588 = fmul fast float %1582, %1585
  %1589 = fmul fast float %1583, %1586
  %1590 = fsub fast float %1544, %1559
  %1591 = fsub fast float %1545, %1562
  %1592 = fsub fast float %1546, %1565
  %1593 = fmul fast float %1581, %1590
  %1594 = fmul fast float %1582, %1591
  %1595 = fmul fast float %1583, %1592
  %1596 = call float @dx.op.binary.f32(i32 36, float %1587, float %1593)  ; FMin(a,b)
  %1597 = call float @dx.op.binary.f32(i32 36, float %1588, float %1594)  ; FMin(a,b)
  %1598 = call float @dx.op.binary.f32(i32 36, float %1589, float %1595)  ; FMin(a,b)
  %1599 = call float @dx.op.binary.f32(i32 35, float %1587, float %1593)  ; FMax(a,b)
  %1600 = call float @dx.op.binary.f32(i32 35, float %1588, float %1594)  ; FMax(a,b)
  %1601 = call float @dx.op.binary.f32(i32 35, float %1589, float %1595)  ; FMax(a,b)
  %1602 = call float @dx.op.binary.f32(i32 35, float %1597, float %1598)  ; FMax(a,b)
  %1603 = call float @dx.op.binary.f32(i32 35, float %1596, float %1602)  ; FMax(a,b)
  %1604 = call float @dx.op.binary.f32(i32 36, float %1600, float %1601)  ; FMin(a,b)
  %1605 = call float @dx.op.binary.f32(i32 36, float %1599, float %1604)  ; FMin(a,b)
  %1606 = call float @dx.op.unary.f32(i32 7, float %1603)  ; Saturate(value)
  %1607 = call float @dx.op.unary.f32(i32 7, float %1605)  ; Saturate(value)
  %1608 = fmul fast float %1575, %1575
  %1609 = fmul fast float %1576, %1576
  %1610 = fadd fast float %1609, %1608
  %1611 = fmul fast float %1577, %1577
  %1612 = fadd fast float %1610, %1611
  %1613 = call float @dx.op.unary.f32(i32 24, float %1612)  ; Sqrt(value)
  %1614 = fmul fast float %1613, %1606
  %1615 = fmul fast float %1613, %1607
  %1616 = call float @dx.op.binary.f32(i32 35, float %1614, float %174)  ; FMax(a,b)
  %1617 = call float @dx.op.binary.f32(i32 36, float %1615, float %1482)  ; FMin(a,b)
  %1618 = fcmp fast olt float %1616, %1617
  br i1 %1618, label %1619, label %2174

; <label>:1619                                    ; preds = %1485
  %1620 = extractvalue %dx.types.ResRet.f32 %1530, 3
  %1621 = bitcast float %1620 to i32
  %1622 = and i32 %1621, 16777216
  %1623 = icmp eq i32 %1622, 0
  br i1 %1623, label %2174, label %1624

; <label>:1624                                    ; preds = %1619
  %1625 = fmul fast float %1616, %1568
  %1626 = fmul fast float %1616, %1571
  %1627 = fmul fast float %1616, %1574
  %1628 = fadd fast float %1625, %1559
  %1629 = fadd fast float %1626, %1562
  %1630 = fadd fast float %1627, %1565
  %1631 = fdiv fast float %1628, %1544
  %1632 = fdiv fast float %1629, %1545
  %1633 = fmul fast float %1631, 5.000000e-01
  %1634 = fmul fast float %1632, 5.000000e-01
  %1635 = fadd fast float %1633, 5.000000e-01
  %1636 = fsub fast float 5.000000e-01, %1634
  %1637 = call float @dx.op.unary.f32(i32 7, float %1635)  ; Saturate(value)
  %1638 = call float @dx.op.unary.f32(i32 7, float %1636)  ; Saturate(value)
  %1639 = call float @dx.op.binary.f32(i32 36, float %1637, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1640 = call float @dx.op.binary.f32(i32 36, float %1638, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1641 = uitofp i32 %1548 to float
  %1642 = uitofp i32 %1549 to float
  %1643 = fmul fast float %1639, %1641
  %1644 = fmul fast float %1640, %1642
  %1645 = fptoui float %1643 to i32
  %1646 = fptoui float %1644 to i32
  %1647 = mul i32 %1646, %1548
  %1648 = add i32 %1645, %1550
  %1649 = add i32 %1648, %1647
  %1650 = shl i32 %1649, 3
  %1651 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1652 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1651, i32 %1650, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1653 = extractvalue %dx.types.ResRet.i32 %1652, 0
  %1654 = shl i32 %1653, 3
  %1655 = and i32 %1654, 32760
  %1656 = lshr i32 %1653, 9
  %1657 = and i32 %1656, 32760
  %1658 = lshr i32 %1653, 24
  %1659 = and i32 %1658, 15
  %1660 = lshr i32 %1653, 28
  %1661 = add nuw nsw i32 %1659, 25
  %1662 = add nuw nsw i32 %1660, 25
  %1663 = and i32 %1661, 31
  %1664 = and i32 %1662, 31
  %1665 = shl i32 1, %1663
  %1666 = shl i32 1, %1664
  %1667 = icmp ugt i32 %1659, 7
  %1668 = icmp slt i32 %1653, 0
  %1669 = select i1 %1667, i32 %1665, i32 1
  %1670 = select i1 %1668, i32 %1666, i32 1
  %1671 = uitofp i32 %1669 to float
  %1672 = uitofp i32 %1670 to float
  %1673 = fmul fast float %1671, %1639
  %1674 = fmul fast float %1672, %1640
  %1675 = fptoui float %1673 to i32
  %1676 = fptoui float %1674 to i32
  %1677 = shl i32 1, %1659
  %1678 = shl i32 1, %1660
  %1679 = call float @dx.op.unary.f32(i32 22, float %1673)  ; Frc(value)
  %1680 = call float @dx.op.unary.f32(i32 22, float %1674)  ; Frc(value)
  %1681 = icmp eq i32 %1675, 0
  %1682 = icmp eq i32 %1676, 0
  %1683 = select i1 %1681, float 0.000000e+00, float 5.000000e-01
  %1684 = select i1 %1682, float 0.000000e+00, float 5.000000e-01
  %1685 = add i32 %1675, 1
  %1686 = add i32 %1676, 1
  %1687 = icmp eq i32 %1685, %1669
  %1688 = icmp eq i32 %1686, %1670
  %1689 = uitofp i32 %1677 to float
  %1690 = select i1 %1667, float 1.280000e+02, float %1689
  %1691 = uitofp i32 %1678 to float
  %1692 = select i1 %1668, float 1.280000e+02, float %1691
  %1693 = fsub fast float %1690, %1683
  %1694 = fsub fast float %1692, %1684
  %1695 = select i1 %1687, float -0.000000e+00, float -5.000000e-01
  %1696 = fadd fast float %1693, %1695
  %1697 = select i1 %1688, float -0.000000e+00, float -5.000000e-01
  %1698 = fadd fast float %1694, %1697
  %1699 = fmul fast float %1696, %1679
  %1700 = fmul fast float %1698, %1680
  %1701 = fadd fast float %1699, %1683
  %1702 = fadd fast float %1700, %1684
  %1703 = fadd fast float %1690, -1.500000e+00
  %1704 = fadd fast float %1692, -1.500000e+00
  %1705 = call float @dx.op.binary.f32(i32 35, float %1701, float 5.000000e-01)  ; FMax(a,b)
  %1706 = call float @dx.op.binary.f32(i32 35, float %1702, float 5.000000e-01)  ; FMax(a,b)
  %1707 = call float @dx.op.binary.f32(i32 36, float %1705, float %1703)  ; FMin(a,b)
  %1708 = call float @dx.op.binary.f32(i32 36, float %1706, float %1704)  ; FMin(a,b)
  %1709 = uitofp i32 %1655 to float
  %1710 = uitofp i32 %1657 to float
  %1711 = fadd fast float %1707, %1709
  %1712 = fadd fast float %1708, %1710
  %1713 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1714 = extractvalue %dx.types.CBufRet.f32 %1713, 0
  %1715 = extractvalue %dx.types.CBufRet.f32 %1713, 1
  %1716 = fmul fast float %1714, %1711
  %1717 = fmul fast float %1715, %1712
  %1718 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1719 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1720 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1718, %dx.types.Handle %1719, float %1716, float %1717, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1721 = extractvalue %dx.types.ResRet.f32 %1720, 0
  %1722 = fmul fast float %1721, 2.000000e+00
  %1723 = fadd fast float %1722, -1.000000e+00
  %1724 = fmul fast float %1723, %1546
  %1725 = fsub fast float -0.000000e+00, %1724
  %1726 = fcmp fast ogt float %1630, %1725
  %1727 = zext i1 %1726 to i32
  %1728 = fcmp fast olt float %1616, %1540
  br i1 %1728, label %1729, label %1929

; <label>:1729                                    ; preds = %1624
  %1730 = fmul fast float %1568, %1540
  %1731 = fmul fast float %1571, %1540
  %1732 = fmul fast float %1574, %1540
  %1733 = fadd fast float %1730, %1559
  %1734 = fadd fast float %1731, %1562
  %1735 = fadd fast float %1732, %1565
  %1736 = fdiv fast float %1733, %1544
  %1737 = fdiv fast float %1734, %1545
  %1738 = fmul fast float %1736, 5.000000e-01
  %1739 = fmul fast float %1737, 5.000000e-01
  %1740 = fadd fast float %1738, 5.000000e-01
  %1741 = fsub fast float 5.000000e-01, %1739
  %1742 = call float @dx.op.unary.f32(i32 7, float %1740)  ; Saturate(value)
  %1743 = call float @dx.op.unary.f32(i32 7, float %1741)  ; Saturate(value)
  %1744 = call float @dx.op.binary.f32(i32 36, float %1742, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1745 = call float @dx.op.binary.f32(i32 36, float %1743, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1746 = fmul fast float %1744, %1641
  %1747 = fmul fast float %1745, %1642
  %1748 = fptoui float %1746 to i32
  %1749 = fptoui float %1747 to i32
  %1750 = mul i32 %1749, %1548
  %1751 = add i32 %1748, %1550
  %1752 = add i32 %1751, %1750
  %1753 = shl i32 %1752, 3
  %1754 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1651, i32 %1753, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1755 = extractvalue %dx.types.ResRet.i32 %1754, 0
  %1756 = shl i32 %1755, 3
  %1757 = and i32 %1756, 32760
  %1758 = lshr i32 %1755, 9
  %1759 = and i32 %1758, 32760
  %1760 = lshr i32 %1755, 24
  %1761 = and i32 %1760, 15
  %1762 = lshr i32 %1755, 28
  %1763 = add nuw nsw i32 %1761, 25
  %1764 = add nuw nsw i32 %1762, 25
  %1765 = and i32 %1763, 31
  %1766 = and i32 %1764, 31
  %1767 = shl i32 1, %1765
  %1768 = shl i32 1, %1766
  %1769 = icmp ugt i32 %1761, 7
  %1770 = icmp slt i32 %1755, 0
  %1771 = select i1 %1769, i32 %1767, i32 1
  %1772 = select i1 %1770, i32 %1768, i32 1
  %1773 = uitofp i32 %1771 to float
  %1774 = uitofp i32 %1772 to float
  %1775 = fmul fast float %1773, %1744
  %1776 = fmul fast float %1774, %1745
  %1777 = fptoui float %1775 to i32
  %1778 = fptoui float %1776 to i32
  %1779 = shl i32 1, %1761
  %1780 = shl i32 1, %1762
  %1781 = call float @dx.op.unary.f32(i32 22, float %1775)  ; Frc(value)
  %1782 = call float @dx.op.unary.f32(i32 22, float %1776)  ; Frc(value)
  %1783 = icmp eq i32 %1777, 0
  %1784 = icmp eq i32 %1778, 0
  %1785 = select i1 %1783, float 0.000000e+00, float 5.000000e-01
  %1786 = select i1 %1784, float 0.000000e+00, float 5.000000e-01
  %1787 = add i32 %1777, 1
  %1788 = add i32 %1778, 1
  %1789 = icmp eq i32 %1787, %1771
  %1790 = icmp eq i32 %1788, %1772
  %1791 = uitofp i32 %1779 to float
  %1792 = select i1 %1769, float 1.280000e+02, float %1791
  %1793 = uitofp i32 %1780 to float
  %1794 = select i1 %1770, float 1.280000e+02, float %1793
  %1795 = fsub fast float %1792, %1785
  %1796 = fsub fast float %1794, %1786
  %1797 = select i1 %1789, float -0.000000e+00, float -5.000000e-01
  %1798 = fadd fast float %1795, %1797
  %1799 = select i1 %1790, float -0.000000e+00, float -5.000000e-01
  %1800 = fadd fast float %1796, %1799
  %1801 = fmul fast float %1798, %1781
  %1802 = fmul fast float %1800, %1782
  %1803 = fadd fast float %1801, %1785
  %1804 = fadd fast float %1802, %1786
  %1805 = fadd fast float %1792, -1.500000e+00
  %1806 = fadd fast float %1794, -1.500000e+00
  %1807 = call float @dx.op.binary.f32(i32 35, float %1803, float 5.000000e-01)  ; FMax(a,b)
  %1808 = call float @dx.op.binary.f32(i32 35, float %1804, float 5.000000e-01)  ; FMax(a,b)
  %1809 = call float @dx.op.binary.f32(i32 36, float %1807, float %1805)  ; FMin(a,b)
  %1810 = call float @dx.op.binary.f32(i32 36, float %1808, float %1806)  ; FMin(a,b)
  %1811 = uitofp i32 %1757 to float
  %1812 = uitofp i32 %1759 to float
  %1813 = fadd fast float %1809, %1811
  %1814 = fadd fast float %1810, %1812
  %1815 = fmul fast float %1714, %1813
  %1816 = fmul fast float %1715, %1814
  %1817 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1718, %dx.types.Handle %1719, float %1815, float %1816, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1818 = extractvalue %dx.types.ResRet.f32 %1817, 0
  %1819 = fmul fast float %1818, 2.000000e+00
  %1820 = fadd fast float %1819, -1.000000e+00
  %1821 = fmul fast float %1820, %1546
  %1822 = fsub fast float -0.000000e+00, %1821
  %1823 = fcmp fast ogt float %1735, %1822
  %1824 = zext i1 %1823 to i32
  br i1 %1726, label %1825, label %1929

; <label>:1825                                    ; preds = %1729
  br i1 %1823, label %1929, label %1826

; <label>:1826                                    ; preds = %1825
  %1827 = fadd fast float %1724, %1630
  %1828 = fsub fast float %1616, %1540
  %1829 = fmul fast float %1828, %1574
  %1830 = fadd fast float %1724, %1829
  %1831 = fsub fast float %1830, %1821
  %1832 = fdiv fast float %1827, %1831
  %1833 = fmul fast float %1832, %1540
  %1834 = fadd fast float %1833, %1616
  %1835 = call float @dx.op.binary.f32(i32 35, float %1834, float %1616)  ; FMax(a,b)
  %1836 = call float @dx.op.binary.f32(i32 36, float %1835, float %1617)  ; FMin(a,b)
  %1837 = fmul fast float %1836, %1568
  %1838 = fmul fast float %1836, %1571
  %1839 = fadd fast float %1837, %1559
  %1840 = fadd fast float %1838, %1562
  %1841 = fdiv fast float %1839, %1544
  %1842 = fdiv fast float %1840, %1545
  %1843 = fmul fast float %1841, 5.000000e-01
  %1844 = fmul fast float %1842, 5.000000e-01
  %1845 = fadd fast float %1843, 5.000000e-01
  %1846 = fsub fast float 5.000000e-01, %1844
  %1847 = call float @dx.op.unary.f32(i32 7, float %1845)  ; Saturate(value)
  %1848 = call float @dx.op.unary.f32(i32 7, float %1846)  ; Saturate(value)
  %1849 = call float @dx.op.binary.f32(i32 36, float %1847, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1850 = call float @dx.op.binary.f32(i32 36, float %1848, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1851 = fmul fast float %1849, %1641
  %1852 = fmul fast float %1850, %1642
  %1853 = fptoui float %1851 to i32
  %1854 = fptoui float %1852 to i32
  %1855 = mul i32 %1854, %1548
  %1856 = add i32 %1853, %1550
  %1857 = add i32 %1856, %1855
  %1858 = shl i32 %1857, 3
  %1859 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1651, i32 %1858, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1860 = extractvalue %dx.types.ResRet.i32 %1859, 0
  %1861 = shl i32 %1860, 3
  %1862 = and i32 %1861, 32760
  %1863 = lshr i32 %1860, 9
  %1864 = and i32 %1863, 32760
  %1865 = lshr i32 %1860, 24
  %1866 = and i32 %1865, 15
  %1867 = lshr i32 %1860, 28
  %1868 = add nuw nsw i32 %1866, 25
  %1869 = add nuw nsw i32 %1867, 25
  %1870 = and i32 %1868, 31
  %1871 = and i32 %1869, 31
  %1872 = shl i32 1, %1870
  %1873 = shl i32 1, %1871
  %1874 = icmp ugt i32 %1866, 7
  %1875 = icmp slt i32 %1860, 0
  %1876 = select i1 %1874, i32 %1872, i32 1
  %1877 = select i1 %1875, i32 %1873, i32 1
  %1878 = uitofp i32 %1876 to float
  %1879 = uitofp i32 %1877 to float
  %1880 = fmul fast float %1878, %1849
  %1881 = fmul fast float %1879, %1850
  %1882 = fptoui float %1880 to i32
  %1883 = fptoui float %1881 to i32
  %1884 = shl i32 1, %1866
  %1885 = shl i32 1, %1867
  %1886 = call float @dx.op.unary.f32(i32 22, float %1880)  ; Frc(value)
  %1887 = call float @dx.op.unary.f32(i32 22, float %1881)  ; Frc(value)
  %1888 = icmp eq i32 %1882, 0
  %1889 = icmp eq i32 %1883, 0
  %1890 = select i1 %1888, float 0.000000e+00, float 5.000000e-01
  %1891 = select i1 %1889, float 0.000000e+00, float 5.000000e-01
  %1892 = add i32 %1882, 1
  %1893 = add i32 %1883, 1
  %1894 = icmp eq i32 %1892, %1876
  %1895 = icmp eq i32 %1893, %1877
  %1896 = uitofp i32 %1884 to float
  %1897 = select i1 %1874, float 1.280000e+02, float %1896
  %1898 = uitofp i32 %1885 to float
  %1899 = select i1 %1875, float 1.280000e+02, float %1898
  %1900 = fsub fast float %1897, %1890
  %1901 = fsub fast float %1899, %1891
  %1902 = select i1 %1894, float -0.000000e+00, float -5.000000e-01
  %1903 = fadd fast float %1900, %1902
  %1904 = select i1 %1895, float -0.000000e+00, float -5.000000e-01
  %1905 = fadd fast float %1901, %1904
  %1906 = fmul fast float %1903, %1886
  %1907 = fmul fast float %1905, %1887
  %1908 = fadd fast float %1906, %1890
  %1909 = fadd fast float %1907, %1891
  %1910 = fadd fast float %1897, -1.500000e+00
  %1911 = fadd fast float %1899, -1.500000e+00
  %1912 = call float @dx.op.binary.f32(i32 35, float %1908, float 5.000000e-01)  ; FMax(a,b)
  %1913 = call float @dx.op.binary.f32(i32 35, float %1909, float 5.000000e-01)  ; FMax(a,b)
  %1914 = call float @dx.op.binary.f32(i32 36, float %1912, float %1910)  ; FMin(a,b)
  %1915 = call float @dx.op.binary.f32(i32 36, float %1913, float %1911)  ; FMin(a,b)
  %1916 = uitofp i32 %1862 to float
  %1917 = uitofp i32 %1864 to float
  %1918 = fadd fast float %1914, %1916
  %1919 = fadd fast float %1915, %1917
  %1920 = fmul fast float %1714, %1918
  %1921 = fmul fast float %1715, %1919
  %1922 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1923 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1922, %dx.types.Handle %1719, float %1920, float %1921, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1924 = extractvalue %dx.types.ResRet.f32 %1923, 0
  %1925 = fcmp fast ogt float %1924, 5.000000e-01
  %1926 = select i1 %1925, float %1836, float %1482
  %1927 = zext i1 %1925 to i32
  %1928 = zext i1 %1925 to i32
  br label %1929

; <label>:1929                                    ; preds = %1826, %1825, %1729, %1624
  %1930 = phi i32 [ %1727, %1624 ], [ %1824, %1826 ], [ %1824, %1825 ], [ %1824, %1729 ]
  %1931 = phi float [ %1725, %1624 ], [ %1822, %1826 ], [ %1822, %1825 ], [ %1822, %1729 ]
  %1932 = phi float [ %1630, %1624 ], [ %1735, %1826 ], [ %1735, %1825 ], [ %1735, %1729 ]
  %1933 = phi float [ %1616, %1624 ], [ %1540, %1826 ], [ %1540, %1825 ], [ %1540, %1729 ]
  %1934 = phi float [ %1482, %1624 ], [ %1926, %1826 ], [ %1482, %1825 ], [ %1482, %1729 ]
  %1935 = phi i32 [ 0, %1624 ], [ %1927, %1826 ], [ 0, %1825 ], [ 0, %1729 ]
  %1936 = phi i32 [ 0, %1624 ], [ %1928, %1826 ], [ 0, %1825 ], [ 0, %1729 ]
  %1937 = icmp eq i32 %1936, 0
  br i1 %1937, label %1938, label %2174

; <label>:1938                                    ; preds = %1929
  %1939 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %1940 = extractvalue %dx.types.CBufRet.i32 %1939, 0
  %1941 = fsub fast float %1617, %1933
  %1942 = sitofp i32 %1940 to float
  %1943 = fdiv fast float %1941, %1942
  %1944 = call float @dx.op.binary.f32(i32 35, float %1540, float %1943)  ; FMax(a,b)
  %1945 = icmp sgt i32 %1940, 0
  br i1 %1945, label %1946, label %2174

; <label>:1946                                    ; preds = %1938
  br label %1947

; <label>:1947                                    ; preds = %2169, %1946
  %1948 = phi i32 [ %2057, %2169 ], [ %1930, %1946 ]
  %1949 = phi float [ %2055, %2169 ], [ %1931, %1946 ]
  %1950 = phi float [ %1962, %2169 ], [ %1932, %1946 ]
  %1951 = phi float [ %1956, %2169 ], [ %1933, %1946 ]
  %1952 = phi i32 [ %2170, %2169 ], [ 0, %1946 ]
  %1953 = phi float [ %2163, %2169 ], [ %1934, %1946 ]
  %1954 = phi i32 [ %2164, %2169 ], [ %1935, %1946 ]
  %1955 = fadd fast float %1951, %1944
  %1956 = call float @dx.op.binary.f32(i32 36, float %1955, float %1617)  ; FMin(a,b)
  %1957 = fmul fast float %1956, %1568
  %1958 = fmul fast float %1956, %1571
  %1959 = fmul fast float %1956, %1574
  %1960 = fadd fast float %1957, %1559
  %1961 = fadd fast float %1958, %1562
  %1962 = fadd fast float %1959, %1565
  %1963 = fdiv fast float %1960, %1544
  %1964 = fdiv fast float %1961, %1545
  %1965 = fmul fast float %1963, 5.000000e-01
  %1966 = fmul fast float %1964, 5.000000e-01
  %1967 = fadd fast float %1965, 5.000000e-01
  %1968 = fsub fast float 5.000000e-01, %1966
  %1969 = call float @dx.op.unary.f32(i32 7, float %1967)  ; Saturate(value)
  %1970 = call float @dx.op.unary.f32(i32 7, float %1968)  ; Saturate(value)
  %1971 = call float @dx.op.binary.f32(i32 36, float %1969, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1972 = call float @dx.op.binary.f32(i32 36, float %1970, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1973 = fmul fast float %1971, %1641
  %1974 = fmul fast float %1972, %1642
  %1975 = fptoui float %1973 to i32
  %1976 = fptoui float %1974 to i32
  %1977 = mul i32 %1976, %1548
  %1978 = add i32 %1975, %1550
  %1979 = add i32 %1978, %1977
  %1980 = shl i32 %1979, 3
  %1981 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1982 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1981, i32 %1980, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1983 = extractvalue %dx.types.ResRet.i32 %1982, 0
  %1984 = shl i32 %1983, 3
  %1985 = and i32 %1984, 32760
  %1986 = lshr i32 %1983, 9
  %1987 = and i32 %1986, 32760
  %1988 = lshr i32 %1983, 24
  %1989 = and i32 %1988, 15
  %1990 = lshr i32 %1983, 28
  %1991 = add nuw nsw i32 %1989, 25
  %1992 = add nuw nsw i32 %1990, 25
  %1993 = and i32 %1991, 31
  %1994 = and i32 %1992, 31
  %1995 = shl i32 1, %1993
  %1996 = shl i32 1, %1994
  %1997 = icmp ugt i32 %1989, 7
  %1998 = icmp slt i32 %1983, 0
  %1999 = select i1 %1997, i32 %1995, i32 1
  %2000 = select i1 %1998, i32 %1996, i32 1
  %2001 = uitofp i32 %1999 to float
  %2002 = uitofp i32 %2000 to float
  %2003 = fmul fast float %2001, %1971
  %2004 = fmul fast float %2002, %1972
  %2005 = fptoui float %2003 to i32
  %2006 = fptoui float %2004 to i32
  %2007 = shl i32 1, %1989
  %2008 = shl i32 1, %1990
  %2009 = call float @dx.op.unary.f32(i32 22, float %2003)  ; Frc(value)
  %2010 = call float @dx.op.unary.f32(i32 22, float %2004)  ; Frc(value)
  %2011 = icmp eq i32 %2005, 0
  %2012 = icmp eq i32 %2006, 0
  %2013 = select i1 %2011, float 0.000000e+00, float 5.000000e-01
  %2014 = select i1 %2012, float 0.000000e+00, float 5.000000e-01
  %2015 = add i32 %2005, 1
  %2016 = add i32 %2006, 1
  %2017 = icmp eq i32 %2015, %1999
  %2018 = icmp eq i32 %2016, %2000
  %2019 = uitofp i32 %2007 to float
  %2020 = select i1 %1997, float 1.280000e+02, float %2019
  %2021 = uitofp i32 %2008 to float
  %2022 = select i1 %1998, float 1.280000e+02, float %2021
  %2023 = fsub fast float %2020, %2013
  %2024 = fsub fast float %2022, %2014
  %2025 = select i1 %2017, float -0.000000e+00, float -5.000000e-01
  %2026 = fadd fast float %2023, %2025
  %2027 = select i1 %2018, float -0.000000e+00, float -5.000000e-01
  %2028 = fadd fast float %2024, %2027
  %2029 = fmul fast float %2026, %2009
  %2030 = fmul fast float %2028, %2010
  %2031 = fadd fast float %2029, %2013
  %2032 = fadd fast float %2030, %2014
  %2033 = fadd fast float %2020, -1.500000e+00
  %2034 = fadd fast float %2022, -1.500000e+00
  %2035 = call float @dx.op.binary.f32(i32 35, float %2031, float 5.000000e-01)  ; FMax(a,b)
  %2036 = call float @dx.op.binary.f32(i32 35, float %2032, float 5.000000e-01)  ; FMax(a,b)
  %2037 = call float @dx.op.binary.f32(i32 36, float %2035, float %2033)  ; FMin(a,b)
  %2038 = call float @dx.op.binary.f32(i32 36, float %2036, float %2034)  ; FMin(a,b)
  %2039 = uitofp i32 %1985 to float
  %2040 = uitofp i32 %1987 to float
  %2041 = fadd fast float %2037, %2039
  %2042 = fadd fast float %2038, %2040
  %2043 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2044 = extractvalue %dx.types.CBufRet.f32 %2043, 0
  %2045 = extractvalue %dx.types.CBufRet.f32 %2043, 1
  %2046 = fmul fast float %2044, %2041
  %2047 = fmul fast float %2045, %2042
  %2048 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2049 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2050 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2048, %dx.types.Handle %2049, float %2046, float %2047, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2051 = extractvalue %dx.types.ResRet.f32 %2050, 0
  %2052 = fmul fast float %2051, 2.000000e+00
  %2053 = fadd fast float %2052, -1.000000e+00
  %2054 = fmul fast float %2053, %1546
  %2055 = fsub fast float -0.000000e+00, %2054
  %2056 = fcmp fast ogt float %1962, %2055
  %2057 = zext i1 %2056 to i32
  %2058 = icmp ne i32 %1948, 0
  %2059 = xor i1 %2058, %2056
  br i1 %2059, label %2060, label %2162

; <label>:2060                                    ; preds = %1947
  %2061 = fsub fast float %1950, %1949
  %2062 = fsub fast float %2061, %1962
  %2063 = fsub fast float %2062, %2054
  %2064 = fdiv fast float %2061, %2063
  %2065 = fmul fast float %2064, %1944
  %2066 = fadd fast float %2065, %1951
  %2067 = call float @dx.op.binary.f32(i32 35, float %2066, float %1933)  ; FMax(a,b)
  %2068 = call float @dx.op.binary.f32(i32 36, float %2067, float %1617)  ; FMin(a,b)
  %2069 = fmul fast float %2068, %1568
  %2070 = fmul fast float %2068, %1571
  %2071 = fadd fast float %2069, %1559
  %2072 = fadd fast float %2070, %1562
  %2073 = fdiv fast float %2071, %1544
  %2074 = fdiv fast float %2072, %1545
  %2075 = fmul fast float %2073, 5.000000e-01
  %2076 = fmul fast float %2074, 5.000000e-01
  %2077 = fadd fast float %2075, 5.000000e-01
  %2078 = fsub fast float 5.000000e-01, %2076
  %2079 = call float @dx.op.unary.f32(i32 7, float %2077)  ; Saturate(value)
  %2080 = call float @dx.op.unary.f32(i32 7, float %2078)  ; Saturate(value)
  %2081 = call float @dx.op.binary.f32(i32 36, float %2079, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2082 = call float @dx.op.binary.f32(i32 36, float %2080, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2083 = fmul fast float %2081, %1641
  %2084 = fmul fast float %2082, %1642
  %2085 = fptoui float %2083 to i32
  %2086 = fptoui float %2084 to i32
  %2087 = mul i32 %2086, %1548
  %2088 = add i32 %2085, %1550
  %2089 = add i32 %2088, %2087
  %2090 = shl i32 %2089, 3
  %2091 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1981, i32 %2090, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2092 = extractvalue %dx.types.ResRet.i32 %2091, 0
  %2093 = shl i32 %2092, 3
  %2094 = and i32 %2093, 32760
  %2095 = lshr i32 %2092, 9
  %2096 = and i32 %2095, 32760
  %2097 = lshr i32 %2092, 24
  %2098 = and i32 %2097, 15
  %2099 = lshr i32 %2092, 28
  %2100 = add nuw nsw i32 %2098, 25
  %2101 = add nuw nsw i32 %2099, 25
  %2102 = and i32 %2100, 31
  %2103 = and i32 %2101, 31
  %2104 = shl i32 1, %2102
  %2105 = shl i32 1, %2103
  %2106 = icmp ugt i32 %2098, 7
  %2107 = icmp slt i32 %2092, 0
  %2108 = select i1 %2106, i32 %2104, i32 1
  %2109 = select i1 %2107, i32 %2105, i32 1
  %2110 = uitofp i32 %2108 to float
  %2111 = uitofp i32 %2109 to float
  %2112 = fmul fast float %2110, %2081
  %2113 = fmul fast float %2111, %2082
  %2114 = fptoui float %2112 to i32
  %2115 = fptoui float %2113 to i32
  %2116 = shl i32 1, %2098
  %2117 = shl i32 1, %2099
  %2118 = call float @dx.op.unary.f32(i32 22, float %2112)  ; Frc(value)
  %2119 = call float @dx.op.unary.f32(i32 22, float %2113)  ; Frc(value)
  %2120 = icmp eq i32 %2114, 0
  %2121 = icmp eq i32 %2115, 0
  %2122 = select i1 %2120, float 0.000000e+00, float 5.000000e-01
  %2123 = select i1 %2121, float 0.000000e+00, float 5.000000e-01
  %2124 = add i32 %2114, 1
  %2125 = add i32 %2115, 1
  %2126 = icmp eq i32 %2124, %2108
  %2127 = icmp eq i32 %2125, %2109
  %2128 = uitofp i32 %2116 to float
  %2129 = select i1 %2106, float 1.280000e+02, float %2128
  %2130 = uitofp i32 %2117 to float
  %2131 = select i1 %2107, float 1.280000e+02, float %2130
  %2132 = fsub fast float %2129, %2122
  %2133 = fsub fast float %2131, %2123
  %2134 = select i1 %2126, float -0.000000e+00, float -5.000000e-01
  %2135 = fadd fast float %2132, %2134
  %2136 = select i1 %2127, float -0.000000e+00, float -5.000000e-01
  %2137 = fadd fast float %2133, %2136
  %2138 = fmul fast float %2135, %2118
  %2139 = fmul fast float %2137, %2119
  %2140 = fadd fast float %2138, %2122
  %2141 = fadd fast float %2139, %2123
  %2142 = fadd fast float %2129, -1.500000e+00
  %2143 = fadd fast float %2131, -1.500000e+00
  %2144 = call float @dx.op.binary.f32(i32 35, float %2140, float 5.000000e-01)  ; FMax(a,b)
  %2145 = call float @dx.op.binary.f32(i32 35, float %2141, float 5.000000e-01)  ; FMax(a,b)
  %2146 = call float @dx.op.binary.f32(i32 36, float %2144, float %2142)  ; FMin(a,b)
  %2147 = call float @dx.op.binary.f32(i32 36, float %2145, float %2143)  ; FMin(a,b)
  %2148 = uitofp i32 %2094 to float
  %2149 = uitofp i32 %2096 to float
  %2150 = fadd fast float %2146, %2148
  %2151 = fadd fast float %2147, %2149
  %2152 = fmul fast float %2044, %2150
  %2153 = fmul fast float %2045, %2151
  %2154 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2155 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2154, %dx.types.Handle %2049, float %2152, float %2153, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2156 = extractvalue %dx.types.ResRet.f32 %2155, 0
  %2157 = fcmp fast ogt float %2156, 5.000000e-01
  %2158 = xor i32 %2057, 1
  %2159 = select i1 %2157, float %2068, float %1953
  %2160 = select i1 %2157, i32 %2158, i32 %1954
  %2161 = zext i1 %2157 to i32
  br label %2162

; <label>:2162                                    ; preds = %2060, %1947
  %2163 = phi float [ %1953, %1947 ], [ %2159, %2060 ]
  %2164 = phi i32 [ %1954, %1947 ], [ %2160, %2060 ]
  %2165 = phi i32 [ 0, %1947 ], [ %2161, %2060 ]
  %2166 = icmp ne i32 %2165, 0
  %2167 = fcmp fast oge float %1956, %1617
  %2168 = or i1 %2167, %2166
  br i1 %2168, label %2172, label %2169

; <label>:2169                                    ; preds = %2162
  %2170 = add nuw nsw i32 %1952, 1
  %2171 = icmp slt i32 %2170, %1940
  br i1 %2171, label %1947, label %2172

; <label>:2172                                    ; preds = %2169, %2162
  %2173 = phi i32 [ 0, %2169 ], [ %2165, %2162 ]
  br label %2174

; <label>:2174                                    ; preds = %2172, %1938, %1929, %1619, %1485
  %2175 = phi float [ %1934, %1929 ], [ %1482, %1619 ], [ %1482, %1485 ], [ %1934, %1938 ], [ %2163, %2172 ]
  %2176 = phi i32 [ %1935, %1929 ], [ 0, %1619 ], [ 0, %1485 ], [ %1935, %1938 ], [ %2164, %2172 ]
  %2177 = phi i32 [ %1936, %1929 ], [ 0, %1619 ], [ 0, %1485 ], [ 0, %1938 ], [ %2173, %2172 ]
  %2178 = icmp ne i32 %2177, 0
  %2179 = fcmp fast olt float %2175, %1486
  %2180 = and i1 %2179, %2178
  %2181 = icmp ne i32 %2176, 0
  %2182 = zext i1 %2181 to i32
  %2183 = select i1 %2180, float %2175, float %1486
  %2184 = select i1 %2180, i32 %1493, i32 %1487
  %2185 = select i1 %2180, i32 %2182, i32 %1488
  %2186 = add nuw i32 %1489, 1
  %2187 = icmp eq i32 %2186, %1477
  br i1 %2187, label %2188, label %1485

; <label>:2188                                    ; preds = %2174
  br label %2189

; <label>:2189                                    ; preds = %2188, %1481
  %2190 = phi float [ %1482, %1481 ], [ %2183, %2188 ]
  %2191 = phi i32 [ 0, %1481 ], [ %2184, %2188 ]
  %2192 = phi i32 [ 0, %1481 ], [ %2185, %2188 ]
  %2193 = fcmp fast olt float %2190, %1482
  br i1 %2193, label %2194, label %2722

; <label>:2194                                    ; preds = %2189
  %2195 = mul i32 %2191, 3
  %2196 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2197 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2196, i32 %2195, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2198 = extractvalue %dx.types.ResRet.f32 %2197, 3
  %2199 = bitcast float %2198 to i32
  %2200 = fmul fast float %2190, %153
  %2201 = fmul fast float %2190, %154
  %2202 = fmul fast float %2190, %155
  %2203 = fmul fast float %2190, %175
  %2204 = call float @dx.op.binary.f32(i32 35, float %2203, float 0.000000e+00)  ; FMax(a,b)
  %2205 = icmp eq i32 %2192, 0
  br i1 %2205, label %2722, label %2206

; <label>:2206                                    ; preds = %2194
  %2207 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2208 = extractvalue %dx.types.CBufRet.i32 %2207, 1
  %2209 = icmp ult i32 %2199, %2208
  br i1 %2209, label %2210, label %2683

; <label>:2210                                    ; preds = %2206
  %2211 = mul i32 %2199, 6
  %2212 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2213 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2212, i32 %2211, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2214 = extractvalue %dx.types.ResRet.f32 %2213, 0
  %2215 = extractvalue %dx.types.ResRet.f32 %2213, 1
  %2216 = extractvalue %dx.types.ResRet.f32 %2213, 2
  %2217 = or i32 %2211, 1
  %2218 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2212, i32 %2217, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2219 = extractvalue %dx.types.ResRet.f32 %2218, 0
  %2220 = extractvalue %dx.types.ResRet.f32 %2218, 1
  %2221 = extractvalue %dx.types.ResRet.f32 %2218, 2
  %2222 = extractvalue %dx.types.ResRet.f32 %2218, 3
  %2223 = add i32 %2211, 2
  %2224 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2212, i32 %2223, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2225 = extractvalue %dx.types.ResRet.f32 %2224, 0
  %2226 = extractvalue %dx.types.ResRet.f32 %2224, 1
  %2227 = extractvalue %dx.types.ResRet.f32 %2224, 2
  %2228 = extractvalue %dx.types.ResRet.f32 %2224, 3
  %2229 = add i32 %2211, 3
  %2230 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2212, i32 %2229, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2231 = extractvalue %dx.types.ResRet.f32 %2230, 0
  %2232 = extractvalue %dx.types.ResRet.f32 %2230, 1
  %2233 = extractvalue %dx.types.ResRet.f32 %2230, 2
  %2234 = extractvalue %dx.types.ResRet.f32 %2230, 3
  %2235 = fmul fast float %2214, 2.097152e+06
  %2236 = fmul fast float %2215, 2.097152e+06
  %2237 = fmul fast float %2216, 2.097152e+06
  %2238 = add i32 %2211, 4
  %2239 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2212, i32 %2238, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2240 = extractvalue %dx.types.ResRet.f32 %2239, 0
  %2241 = extractvalue %dx.types.ResRet.f32 %2239, 1
  %2242 = extractvalue %dx.types.ResRet.f32 %2239, 2
  %2243 = extractvalue %dx.types.ResRet.f32 %2239, 3
  %2244 = bitcast float %2240 to i32
  %2245 = bitcast float %2241 to i32
  %2246 = add i32 %2211, 5
  %2247 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2212, i32 %2246, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2248 = extractvalue %dx.types.ResRet.f32 %2247, 0
  %2249 = extractvalue %dx.types.ResRet.f32 %2247, 1
  %2250 = extractvalue %dx.types.ResRet.f32 %2247, 2
  %2251 = extractvalue %dx.types.ResRet.f32 %2247, 3
  %2252 = and i32 %2245, 65536
  %2253 = icmp ne i32 %2252, 0
  %2254 = and i32 %2245, 131072
  %2255 = icmp ne i32 %2254, 0
  %2256 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 0
  %2257 = bitcast i32* %2256 to float*
  store float %2242, float* %2257, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2258 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 1
  %2259 = bitcast i32* %2258 to float*
  store float %2243, float* %2259, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2260 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 2
  %2261 = bitcast i32* %2260 to float*
  store float %2248, float* %2261, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2262 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 3
  %2263 = bitcast i32* %2262 to float*
  store float %2249, float* %2263, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2264 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 4
  %2265 = bitcast i32* %2264 to float*
  store float %2250, float* %2265, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2266 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 5
  %2267 = bitcast i32* %2266 to float*
  store float %2251, float* %2267, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2268 = select i1 %2255, float 7.000000e+01, float 2.000000e+01
  %2269 = fadd fast float %2200, %167
  %2270 = fsub fast float %2269, %2235
  %2271 = fsub fast float %2270, %2222
  %2272 = fadd fast float %2201, %168
  %2273 = fsub fast float %2272, %2236
  %2274 = fsub fast float %2273, %2228
  %2275 = fadd fast float %2202, %169
  %2276 = fsub fast float %2275, %2237
  %2277 = fsub fast float %2276, %2234
  %2278 = fmul fast float %2271, %2219
  %2279 = call float @dx.op.tertiary.f32(i32 46, float %2274, float %2225, float %2278)  ; FMad(a,b,c)
  %2280 = call float @dx.op.tertiary.f32(i32 46, float %2277, float %2231, float %2279)  ; FMad(a,b,c)
  %2281 = fmul fast float %2271, %2220
  %2282 = call float @dx.op.tertiary.f32(i32 46, float %2274, float %2226, float %2281)  ; FMad(a,b,c)
  %2283 = call float @dx.op.tertiary.f32(i32 46, float %2277, float %2232, float %2282)  ; FMad(a,b,c)
  %2284 = fmul fast float %2271, %2221
  %2285 = call float @dx.op.tertiary.f32(i32 46, float %2274, float %2227, float %2284)  ; FMad(a,b,c)
  %2286 = call float @dx.op.tertiary.f32(i32 46, float %2277, float %2233, float %2285)  ; FMad(a,b,c)
  %2287 = fmul fast float %2231, %2231
  %2288 = fmul fast float %2232, %2232
  %2289 = fmul fast float %2233, %2233
  %2290 = fcmp fast ogt float %2287, 0.000000e+00
  br i1 %2290, label %2291, label %2296

; <label>:2291                                    ; preds = %2210
  %2292 = fcmp uge float %2231, 0.000000e+00
  %2293 = zext i1 %2292 to i32
  %2294 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 %2293
  %2295 = load i32, i32* %2294, align 4, !tbaa !64, !noalias !83
  br label %2296

; <label>:2296                                    ; preds = %2291, %2210
  %2297 = phi i32 [ %2295, %2291 ], [ 0, %2210 ]
  %2298 = fcmp fast ogt float %2288, 0.000000e+00
  br i1 %2298, label %2299, label %2305

; <label>:2299                                    ; preds = %2296
  %2300 = fcmp fast olt float %2232, 0.000000e+00
  %2301 = select i1 %2300, i32 2, i32 3
  %2302 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 %2301
  %2303 = load i32, i32* %2302, align 4, !tbaa !64, !noalias !83
  %2304 = or i32 %2303, %2297
  br label %2305

; <label>:2305                                    ; preds = %2299, %2296
  %2306 = phi i32 [ %2304, %2299 ], [ %2297, %2296 ]
  %2307 = fcmp fast ogt float %2289, 0.000000e+00
  br i1 %2307, label %2308, label %2314

; <label>:2308                                    ; preds = %2305
  %2309 = fcmp fast olt float %2233, 0.000000e+00
  %2310 = select i1 %2309, i32 4, i32 5
  %2311 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 %2310
  %2312 = load i32, i32* %2311, align 4, !tbaa !64, !noalias !83
  %2313 = or i32 %2312, %2306
  br label %2314

; <label>:2314                                    ; preds = %2308, %2305
  %2315 = phi i32 [ %2313, %2308 ], [ %2306, %2305 ]
  %2316 = icmp eq i32 %2315, 0
  br i1 %2316, label %2361, label %2317

; <label>:2317                                    ; preds = %2314
  br label %2318

; <label>:2318                                    ; preds = %2318, %2317
  %2319 = phi i32 [ %2324, %2318 ], [ %2315, %2317 ]
  %2320 = phi i32 [ %2358, %2318 ], [ 0, %2317 ]
  %2321 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %2319)  ; FirstbitLo(value)
  %2322 = and i32 %2321, 31
  %2323 = shl i32 1, %2322
  %2324 = xor i32 %2323, %2319
  %2325 = add i32 %2321, %2244
  %2326 = mul i32 %2325, 10
  %2327 = add i32 %2326, 6
  %2328 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2329 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2328, i32 %2327, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2330 = extractvalue %dx.types.ResRet.f32 %2329, 3
  %2331 = add i32 %2326, 7
  %2332 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2328, i32 %2331, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2333 = extractvalue %dx.types.ResRet.f32 %2332, 3
  %2334 = add i32 %2326, 8
  %2335 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2328, i32 %2334, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2336 = extractvalue %dx.types.ResRet.f32 %2335, 3
  %2337 = add i32 %2326, 9
  %2338 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2328, i32 %2337, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2339 = extractvalue %dx.types.ResRet.f32 %2338, 0
  %2340 = extractvalue %dx.types.ResRet.f32 %2338, 1
  %2341 = extractvalue %dx.types.ResRet.f32 %2338, 2
  %2342 = fsub fast float %2280, %2330
  %2343 = fsub fast float %2283, %2333
  %2344 = fsub fast float %2286, %2336
  %2345 = call float @dx.op.unary.f32(i32 6, float %2342)  ; FAbs(value)
  %2346 = call float @dx.op.unary.f32(i32 6, float %2343)  ; FAbs(value)
  %2347 = call float @dx.op.unary.f32(i32 6, float %2344)  ; FAbs(value)
  %2348 = fmul fast float %2268, 5.000000e-01
  %2349 = fadd fast float %2339, %2348
  %2350 = fadd fast float %2340, %2348
  %2351 = fadd fast float %2341, %2348
  %2352 = fcmp fast ole float %2345, %2349
  %2353 = fcmp fast ole float %2346, %2350
  %2354 = fcmp fast ole float %2347, %2351
  %2355 = and i1 %2352, %2353
  %2356 = and i1 %2355, %2354
  %2357 = select i1 %2356, i32 %2323, i32 0
  %2358 = or i32 %2357, %2320
  %2359 = icmp eq i32 %2319, %2323
  br i1 %2359, label %2360, label %2318

; <label>:2360                                    ; preds = %2318
  br label %2361

; <label>:2361                                    ; preds = %2360, %2314
  %2362 = phi i32 [ 0, %2314 ], [ %2358, %2360 ]
  %2363 = select i1 %2253, i32 1, i32 %2362
  %2364 = icmp eq i32 %2363, 0
  br i1 %2364, label %2683, label %2365

; <label>:2365                                    ; preds = %2361
  br label %2366

; <label>:2366                                    ; preds = %2389, %2365
  %2367 = phi float [ %2390, %2389 ], [ 0.000000e+00, %2365 ]
  %2368 = phi float [ %2391, %2389 ], [ 0.000000e+00, %2365 ]
  %2369 = phi float [ %2392, %2389 ], [ 0.000000e+00, %2365 ]
  %2370 = phi float [ %2393, %2389 ], [ 0.000000e+00, %2365 ]
  %2371 = phi float [ %2394, %2389 ], [ 0.000000e+00, %2365 ]
  %2372 = phi i32 [ %2395, %2389 ], [ 0, %2365 ]
  %2373 = phi i32 [ %2396, %2389 ], [ 0, %2365 ]
  %2374 = phi i32 [ %2397, %2389 ], [ 0, %2365 ]
  %2375 = phi i32 [ %2379, %2389 ], [ %2363, %2365 ]
  %2376 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %2375)  ; FirstbitLo(value)
  %2377 = and i32 %2376, 31
  %2378 = shl i32 1, %2377
  %2379 = xor i32 %2378, %2375
  %2380 = add i32 %2376, %2244
  %2381 = mul i32 %2380, 10
  %2382 = add i32 %2381, 4
  %2383 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2384 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2383, i32 %2382, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2385 = extractvalue %dx.types.ResRet.f32 %2384, 3
  %2386 = bitcast float %2385 to i32
  %2387 = and i32 %2386, 16777216
  %2388 = icmp eq i32 %2387, 0
  br i1 %2388, label %2389, label %2399

; <label>:2389                                    ; preds = %3155, %2681, %2649, %2618, %2456, %2403, %2399, %2366
  %2390 = phi float [ %2367, %2366 ], [ %3162, %2681 ], [ %2367, %2649 ], [ %2367, %3155 ], [ %2367, %2618 ], [ %2367, %2456 ], [ %2367, %2403 ], [ %2367, %2399 ]
  %2391 = phi float [ %2368, %2366 ], [ %2676, %2681 ], [ %2676, %2649 ], [ %2368, %3155 ], [ %2368, %2618 ], [ %2368, %2456 ], [ %2368, %2403 ], [ %2368, %2399 ]
  %2392 = phi float [ %2369, %2366 ], [ %2677, %2681 ], [ %2677, %2649 ], [ %2369, %3155 ], [ %2369, %2618 ], [ %2369, %2456 ], [ %2369, %2403 ], [ %2369, %2399 ]
  %2393 = phi float [ %2370, %2366 ], [ %2678, %2681 ], [ %2678, %2649 ], [ %2370, %3155 ], [ %2370, %2618 ], [ %2370, %2456 ], [ %2370, %2403 ], [ %2370, %2399 ]
  %2394 = phi float [ %2371, %2366 ], [ %2679, %2681 ], [ %2679, %2649 ], [ %2371, %3155 ], [ %2371, %2618 ], [ %2371, %2456 ], [ %2371, %2403 ], [ %2371, %2399 ]
  %2395 = phi i32 [ %2372, %2366 ], [ %2593, %2681 ], [ %2372, %2649 ], [ %2372, %3155 ], [ %2372, %2618 ], [ %2372, %2456 ], [ %2372, %2403 ], [ %2372, %2399 ]
  %2396 = phi i32 [ %2373, %2366 ], [ %2595, %2681 ], [ %2373, %2649 ], [ %2373, %3155 ], [ %2373, %2618 ], [ %2373, %2456 ], [ %2373, %2403 ], [ %2373, %2399 ]
  %2397 = phi i32 [ %2374, %2366 ], [ %2499, %2681 ], [ %2374, %2649 ], [ %2374, %3155 ], [ %2374, %2618 ], [ %2374, %2456 ], [ %2374, %2403 ], [ %2374, %2399 ]
  %2398 = icmp eq i32 %2375, %2378
  br i1 %2398, label %2682, label %2366

; <label>:2399                                    ; preds = %2366
  %2400 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2401 = extractvalue %dx.types.CBufRet.i32 %2400, 0
  %2402 = icmp ult i32 %2380, %2401
  br i1 %2402, label %2403, label %2389

; <label>:2403                                    ; preds = %2399
  %2404 = extractvalue %dx.types.ResRet.f32 %2384, 0
  %2405 = extractvalue %dx.types.ResRet.f32 %2384, 1
  %2406 = extractvalue %dx.types.ResRet.f32 %2384, 2
  %2407 = add i32 %2381, 5
  %2408 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2383, i32 %2407, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2409 = add i32 %2381, 6
  %2410 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2383, i32 %2409, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2411 = add i32 %2381, 7
  %2412 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2383, i32 %2411, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2413 = add i32 %2381, 8
  %2414 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2383, i32 %2413, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2415 = call float @dx.op.unary.f32(i32 6, float %2404)  ; FAbs(value)
  %2416 = call float @dx.op.unary.f32(i32 6, float %2405)  ; FAbs(value)
  %2417 = call float @dx.op.unary.f32(i32 6, float %2406)  ; FAbs(value)
  %2418 = lshr i32 %2386, 16
  %2419 = and i32 %2418, 15
  %2420 = extractvalue %dx.types.ResRet.f32 %2414, 3
  %2421 = extractvalue %dx.types.ResRet.f32 %2414, 2
  %2422 = extractvalue %dx.types.ResRet.f32 %2414, 1
  %2423 = extractvalue %dx.types.ResRet.f32 %2414, 0
  %2424 = extractvalue %dx.types.ResRet.f32 %2412, 3
  %2425 = extractvalue %dx.types.ResRet.f32 %2412, 2
  %2426 = extractvalue %dx.types.ResRet.f32 %2412, 1
  %2427 = extractvalue %dx.types.ResRet.f32 %2412, 0
  %2428 = extractvalue %dx.types.ResRet.f32 %2410, 3
  %2429 = extractvalue %dx.types.ResRet.f32 %2410, 2
  %2430 = extractvalue %dx.types.ResRet.f32 %2410, 1
  %2431 = extractvalue %dx.types.ResRet.f32 %2410, 0
  %2432 = fsub fast float %2280, %2428
  %2433 = fsub fast float %2283, %2424
  %2434 = fsub fast float %2286, %2420
  %2435 = fmul fast float %2432, %2431
  %2436 = call float @dx.op.tertiary.f32(i32 46, float %2433, float %2427, float %2435)  ; FMad(a,b,c)
  %2437 = call float @dx.op.tertiary.f32(i32 46, float %2434, float %2423, float %2436)  ; FMad(a,b,c)
  %2438 = fmul fast float %2432, %2430
  %2439 = call float @dx.op.tertiary.f32(i32 46, float %2433, float %2426, float %2438)  ; FMad(a,b,c)
  %2440 = call float @dx.op.tertiary.f32(i32 46, float %2434, float %2422, float %2439)  ; FMad(a,b,c)
  %2441 = fmul fast float %2432, %2429
  %2442 = call float @dx.op.tertiary.f32(i32 46, float %2433, float %2425, float %2441)  ; FMad(a,b,c)
  %2443 = call float @dx.op.tertiary.f32(i32 46, float %2434, float %2421, float %2442)  ; FMad(a,b,c)
  %2444 = call float @dx.op.unary.f32(i32 6, float %2437)  ; FAbs(value)
  %2445 = call float @dx.op.unary.f32(i32 6, float %2440)  ; FAbs(value)
  %2446 = call float @dx.op.unary.f32(i32 6, float %2443)  ; FAbs(value)
  %2447 = fmul fast float %2268, 5.000000e-01
  %2448 = fadd fast float %2415, %2447
  %2449 = fadd fast float %2416, %2447
  %2450 = fadd fast float %2417, %2447
  %2451 = fcmp fast ole float %2444, %2448
  %2452 = fcmp fast ole float %2445, %2449
  %2453 = fcmp fast ole float %2446, %2450
  %2454 = and i1 %2451, %2452
  %2455 = and i1 %2454, %2453
  br i1 %2455, label %2456, label %2389

; <label>:2456                                    ; preds = %2403
  %2457 = lshr i32 %2386, 8
  %2458 = and i32 %2457, 255
  %2459 = and i32 %2386, 255
  %2460 = extractvalue %dx.types.ResRet.f32 %2408, 3
  %2461 = extractvalue %dx.types.ResRet.f32 %2408, 2
  %2462 = extractvalue %dx.types.ResRet.f32 %2408, 1
  %2463 = extractvalue %dx.types.ResRet.f32 %2408, 0
  %2464 = fsub fast float -0.000000e+00, %2415
  %2465 = fsub fast float -0.000000e+00, %2416
  %2466 = call float @dx.op.binary.f32(i32 35, float %2437, float %2464)  ; FMax(a,b)
  %2467 = call float @dx.op.binary.f32(i32 35, float %2440, float %2465)  ; FMax(a,b)
  %2468 = call float @dx.op.binary.f32(i32 36, float %2466, float %2415)  ; FMin(a,b)
  %2469 = call float @dx.op.binary.f32(i32 36, float %2467, float %2416)  ; FMin(a,b)
  %2470 = fdiv fast float %2468, %2415
  %2471 = fdiv fast float %2469, %2416
  %2472 = fmul fast float %2470, 5.000000e-01
  %2473 = fmul fast float %2471, 5.000000e-01
  %2474 = fadd fast float %2472, 5.000000e-01
  %2475 = fsub fast float 5.000000e-01, %2473
  %2476 = call float @dx.op.unary.f32(i32 7, float %2474)  ; Saturate(value)
  %2477 = call float @dx.op.unary.f32(i32 7, float %2475)  ; Saturate(value)
  %2478 = call float @dx.op.binary.f32(i32 36, float %2476, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2479 = call float @dx.op.binary.f32(i32 36, float %2477, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2480 = select i1 %178, float %2461, float %2463
  %2481 = bitcast float %2480 to i32
  %2482 = and i32 %2481, 65535
  %2483 = lshr i32 %2481, 16
  %2484 = select i1 %178, float %2460, float %2462
  %2485 = bitcast float %2484 to i32
  %2486 = uitofp i32 %2482 to float
  %2487 = uitofp i32 %2483 to float
  %2488 = fmul fast float %2478, %2486
  %2489 = fmul fast float %2479, %2487
  %2490 = fptoui float %2488 to i32
  %2491 = fptoui float %2489 to i32
  %2492 = mul i32 %2491, %2482
  %2493 = add i32 %2490, %2485
  %2494 = add i32 %2493, %2492
  %2495 = shl i32 %2494, 3
  %2496 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2497 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2496, i32 %2495, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2498 = extractvalue %dx.types.ResRet.i32 %2497, 0
  %2499 = extractvalue %dx.types.ResRet.i32 %2497, 1
  %2500 = shl i32 %2498, 3
  %2501 = and i32 %2500, 32760
  %2502 = lshr i32 %2498, 9
  %2503 = and i32 %2502, 32760
  %2504 = lshr i32 %2498, 24
  %2505 = and i32 %2504, 15
  %2506 = lshr i32 %2498, 28
  %2507 = add nuw nsw i32 %2505, 25
  %2508 = add nuw nsw i32 %2506, 25
  %2509 = and i32 %2507, 31
  %2510 = and i32 %2508, 31
  %2511 = shl i32 1, %2509
  %2512 = shl i32 1, %2510
  %2513 = icmp ugt i32 %2505, 7
  %2514 = icmp slt i32 %2498, 0
  %2515 = select i1 %2513, i32 %2511, i32 1
  %2516 = select i1 %2514, i32 %2512, i32 1
  %2517 = uitofp i32 %2515 to float
  %2518 = uitofp i32 %2516 to float
  %2519 = fmul fast float %2517, %2478
  %2520 = fmul fast float %2518, %2479
  %2521 = fptoui float %2519 to i32
  %2522 = fptoui float %2520 to i32
  %2523 = shl i32 1, %2505
  %2524 = shl i32 1, %2506
  %2525 = call float @dx.op.unary.f32(i32 22, float %2519)  ; Frc(value)
  %2526 = call float @dx.op.unary.f32(i32 22, float %2520)  ; Frc(value)
  %2527 = icmp eq i32 %2521, 0
  %2528 = icmp eq i32 %2522, 0
  %2529 = select i1 %2527, float 0.000000e+00, float 5.000000e-01
  %2530 = select i1 %2528, float 0.000000e+00, float 5.000000e-01
  %2531 = add i32 %2521, 1
  %2532 = add i32 %2522, 1
  %2533 = icmp eq i32 %2531, %2515
  %2534 = icmp eq i32 %2532, %2516
  %2535 = uitofp i32 %2523 to float
  %2536 = select i1 %2513, float 1.280000e+02, float %2535
  %2537 = uitofp i32 %2524 to float
  %2538 = select i1 %2514, float 1.280000e+02, float %2537
  %2539 = fsub fast float %2536, %2529
  %2540 = fsub fast float %2538, %2530
  %2541 = select i1 %2533, float -0.000000e+00, float -5.000000e-01
  %2542 = fadd fast float %2539, %2541
  %2543 = select i1 %2534, float -0.000000e+00, float -5.000000e-01
  %2544 = fadd fast float %2540, %2543
  %2545 = fmul fast float %2542, %2525
  %2546 = fmul fast float %2544, %2526
  %2547 = fadd fast float %2545, %2529
  %2548 = fadd fast float %2546, %2530
  %2549 = fadd fast float %2536, -1.500000e+00
  %2550 = fadd fast float %2538, -1.500000e+00
  %2551 = call float @dx.op.binary.f32(i32 35, float %2547, float 5.000000e-01)  ; FMax(a,b)
  %2552 = call float @dx.op.binary.f32(i32 35, float %2548, float 5.000000e-01)  ; FMax(a,b)
  %2553 = call float @dx.op.binary.f32(i32 36, float %2551, float %2549)  ; FMin(a,b)
  %2554 = call float @dx.op.binary.f32(i32 36, float %2552, float %2550)  ; FMin(a,b)
  %2555 = uitofp i32 %2501 to float
  %2556 = uitofp i32 %2503 to float
  %2557 = fadd fast float %2553, %2555
  %2558 = fadd fast float %2554, %2556
  %2559 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2560 = extractvalue %dx.types.CBufRet.f32 %2559, 0
  %2561 = extractvalue %dx.types.CBufRet.f32 %2559, 1
  %2562 = fmul fast float %2560, %2557
  %2563 = fmul fast float %2561, %2558
  %2564 = call float @dx.op.binary.f32(i32 35, float %2415, float %2416)  ; FMax(a,b)
  %2565 = call float @dx.op.binary.f32(i32 35, float %2204, float 1.000000e+00)  ; FMax(a,b)
  %2566 = fdiv fast float %2564, %2565
  %2567 = call float @dx.op.unary.f32(i32 23, float %2566)  ; Log(value)
  %2568 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2569 = extractvalue %dx.types.CBufRet.f32 %2568, 0
  %2570 = fadd fast float %2569, %2567
  %2571 = call float @dx.op.binary.f32(i32 35, float %2570, float 3.000000e+00)  ; FMax(a,b)
  %2572 = call float @dx.op.binary.f32(i32 36, float %2571, float 1.100000e+01)  ; FMin(a,b)
  %2573 = fptoui float %2572 to i32
  %2574 = sub i32 %2573, %2459
  %2575 = sub i32 %2573, %2458
  %2576 = add i32 %2574, 25
  %2577 = add i32 %2575, 25
  %2578 = and i32 %2576, 31
  %2579 = and i32 %2577, 31
  %2580 = shl i32 1, %2578
  %2581 = shl i32 1, %2579
  %2582 = icmp ugt i32 %2574, 7
  %2583 = icmp ugt i32 %2575, 7
  %2584 = uitofp i32 %2580 to float
  %2585 = select i1 %2582, float %2584, float 1.000000e+00
  %2586 = uitofp i32 %2581 to float
  %2587 = select i1 %2583, float %2586, float 1.000000e+00
  %2588 = fmul fast float %2585, %2478
  %2589 = fmul fast float %2587, %2479
  %2590 = fptoui float %2588 to i32
  %2591 = fptoui float %2589 to i32
  %2592 = shl i32 %2573, 24
  %2593 = or i32 %2592, %2380
  %2594 = shl i32 %2591, 8
  %2595 = add i32 %2594, %2590
  %2596 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2597 = extractvalue %dx.types.CBufRet.f32 %2596, 2
  %2598 = extractvalue %dx.types.CBufRet.f32 %2596, 3
  %2599 = fmul fast float %2597, %2562
  %2600 = fmul fast float %2598, %2563
  %2601 = fadd fast float %2599, 0x3FE0100000000000
  %2602 = fadd fast float %2600, 0x3FE0100000000000
  %2603 = call float @dx.op.unary.f32(i32 22, float %2601)  ; Frc(value)
  %2604 = call float @dx.op.unary.f32(i32 22, float %2602)  ; Frc(value)
  %2605 = fsub fast float 1.000000e+00, %2603
  %2606 = fmul fast float %2605, %2604
  %2607 = fmul fast float %2604, %2603
  %2608 = fsub fast float 1.000000e+00, %2604
  %2609 = fmul fast float %2608, %2603
  %2610 = fmul fast float %2608, %2605
  %2611 = icmp eq i32 %2505, 0
  br i1 %2611, label %2389, label %2612

; <label>:2612                                    ; preds = %2456
  br i1 %2253, label %2618, label %2613

; <label>:2613                                    ; preds = %2612
  %2614 = icmp ult i32 %2419, 2
  br i1 %2614, label %2618, label %2615

; <label>:2615                                    ; preds = %2613
  %2616 = icmp ult i32 %2419, 4
  %2617 = select i1 %2616, float %2288, float %2289
  br label %2618

; <label>:2618                                    ; preds = %2615, %2613, %2612
  %2619 = phi float [ 1.000000e+00, %2612 ], [ %2287, %2613 ], [ %2617, %2615 ]
  %2620 = fcmp fast ogt float %2619, 0.000000e+00
  br i1 %2620, label %2621, label %2389

; <label>:2621                                    ; preds = %2618
  %2622 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2623 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2624 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2622, %dx.types.Handle %2623, float %2562, float %2563, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2625 = extractvalue %dx.types.ResRet.f32 %2624, 0
  %2626 = extractvalue %dx.types.ResRet.f32 %2624, 1
  %2627 = extractvalue %dx.types.ResRet.f32 %2624, 2
  %2628 = extractvalue %dx.types.ResRet.f32 %2624, 3
  %2629 = fdiv fast float %2443, %2417
  %2630 = fmul fast float %2629, 5.000000e-01
  %2631 = fsub fast float 5.000000e-01, %2630
  %2632 = fdiv fast float %2268, %2417
  %2633 = fmul fast float %2632, 2.500000e-01
  %2634 = fcmp uge float %2625, 1.000000e+00
  %2635 = or i1 %2253, %2634
  %2636 = select i1 %2634, float 0.000000e+00, float 1.000000e+00
  br i1 %2635, label %2644, label %2637

; <label>:2637                                    ; preds = %2621
  %2638 = fsub fast float %2631, %2625
  %2639 = call float @dx.op.unary.f32(i32 6, float %2638)  ; FAbs(value)
  %2640 = fsub fast float %2639, %2632
  %2641 = fdiv fast float %2640, %2633
  %2642 = call float @dx.op.unary.f32(i32 7, float %2641)  ; Saturate(value)
  %2643 = fsub fast float 1.000000e+00, %2642
  br label %2644

; <label>:2644                                    ; preds = %2637, %2621
  %2645 = phi float [ %2643, %2637 ], [ %2636, %2621 ]
  %2646 = fcmp uge float %2626, 1.000000e+00
  %2647 = or i1 %2253, %2646
  %2648 = select i1 %2646, float 0.000000e+00, float 1.000000e+00
  br i1 %2647, label %3131, label %3124

; <label>:2649                                    ; preds = %3155
  %2650 = fdiv fast float %3157, %3161
  %2651 = fdiv fast float %3158, %3161
  %2652 = fdiv fast float %3159, %3161
  %2653 = fdiv fast float %3160, %3161
  %2654 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2655 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2654, %dx.types.Handle %2623, float %2562, float %2563, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2656 = extractvalue %dx.types.ResRet.f32 %2655, 0
  %2657 = extractvalue %dx.types.ResRet.f32 %2655, 1
  %2658 = extractvalue %dx.types.ResRet.f32 %2655, 2
  %2659 = extractvalue %dx.types.ResRet.f32 %2655, 3
  %2660 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2654, %dx.types.Handle %2623, float %2562, float %2563, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2661 = extractvalue %dx.types.ResRet.f32 %2660, 0
  %2662 = extractvalue %dx.types.ResRet.f32 %2660, 1
  %2663 = extractvalue %dx.types.ResRet.f32 %2660, 2
  %2664 = extractvalue %dx.types.ResRet.f32 %2660, 3
  %2665 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2654, %dx.types.Handle %2623, float %2562, float %2563, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2666 = extractvalue %dx.types.ResRet.f32 %2665, 0
  %2667 = extractvalue %dx.types.ResRet.f32 %2665, 1
  %2668 = extractvalue %dx.types.ResRet.f32 %2665, 2
  %2669 = extractvalue %dx.types.ResRet.f32 %2665, 3
  %2670 = call float @dx.op.dot4.f32(i32 56, float %2656, float %2657, float %2658, float %2659, float %2650, float %2651, float %2652, float %2653)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2671 = call float @dx.op.dot4.f32(i32 56, float %2661, float %2662, float %2663, float %2664, float %2650, float %2651, float %2652, float %2653)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2672 = call float @dx.op.dot4.f32(i32 56, float %2666, float %2667, float %2668, float %2669, float %2650, float %2651, float %2652, float %2653)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2673 = fmul fast float %2670, %3162
  %2674 = fmul fast float %2671, %3162
  %2675 = fmul fast float %2672, %3162
  %2676 = fadd fast float %2673, %2368
  %2677 = fadd fast float %2674, %2369
  %2678 = fadd fast float %2675, %2370
  %2679 = fadd fast float %3162, %2371
  %2680 = fcmp fast ogt float %3162, %2367
  br i1 %2680, label %2681, label %2389

; <label>:2681                                    ; preds = %2649
  br label %2389

; <label>:2682                                    ; preds = %2389
  br label %2683

; <label>:2683                                    ; preds = %2682, %2361, %2206
  %2684 = phi float [ 0.000000e+00, %2206 ], [ 0.000000e+00, %2361 ], [ %2391, %2682 ]
  %2685 = phi float [ 0.000000e+00, %2206 ], [ 0.000000e+00, %2361 ], [ %2392, %2682 ]
  %2686 = phi float [ 0.000000e+00, %2206 ], [ 0.000000e+00, %2361 ], [ %2393, %2682 ]
  %2687 = phi float [ 0.000000e+00, %2206 ], [ 0.000000e+00, %2361 ], [ %2394, %2682 ]
  %2688 = phi i32 [ 0, %2206 ], [ 0, %2361 ], [ %2395, %2682 ]
  %2689 = phi i32 [ 0, %2206 ], [ 0, %2361 ], [ %2396, %2682 ]
  %2690 = phi i32 [ 0, %2206 ], [ 0, %2361 ], [ %2397, %2682 ]
  %2691 = fcmp fast ogt float %2687, 0.000000e+00
  br i1 %2691, label %2692, label %2722

; <label>:2692                                    ; preds = %2683
  %2693 = fdiv fast float %2684, %2687
  %2694 = fdiv fast float %2685, %2687
  %2695 = fdiv fast float %2686, %2687
  %2696 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2697 = extractvalue %dx.types.CBufRet.i32 %2696, 1
  %2698 = and i32 %2697, %60
  %2699 = and i32 %2697, %61
  %2700 = extractvalue %dx.types.CBufRet.i32 %2696, 2
  %2701 = extractvalue %dx.types.CBufRet.i32 %2696, 3
  %2702 = icmp eq i32 %2698, %2700
  %2703 = icmp eq i32 %2699, %2701
  %2704 = and i1 %2702, %2703
  br i1 %2704, label %2705, label %2722

; <label>:2705                                    ; preds = %2692
  %2706 = extractvalue %dx.types.CBufRet.i32 %2696, 0
  %2707 = icmp ne i32 %2706, 0
  %2708 = fcmp fast ogt float %2687, 0x3FB99999A0000000
  %2709 = and i1 %2708, %2707
  br i1 %2709, label %2710, label %2722

; <label>:2710                                    ; preds = %2705
  %2711 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %2712 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2711, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %2713 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2714 = extractvalue %dx.types.CBufRet.i32 %2713, 0
  %2715 = icmp ult i32 %2712, %2714
  br i1 %2715, label %2716, label %2718

; <label>:2716                                    ; preds = %2710
  %2717 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2717, i32 %2712, i32 0, i32 %2688, i32 %2689, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %2718

; <label>:2718                                    ; preds = %2716, %2710
  %2719 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2720 = extractvalue %dx.types.CBufRet.i32 %2719, 1
  %2721 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2721, i32 %2690, i32 0, i32 %2720, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %2722

; <label>:2722                                    ; preds = %2718, %2705, %2692, %2683, %2194, %2189
  %2723 = phi float [ 0.000000e+00, %2189 ], [ %2693, %2718 ], [ %2693, %2705 ], [ %2693, %2692 ], [ 0.000000e+00, %2683 ], [ 0.000000e+00, %2194 ]
  %2724 = phi float [ 0.000000e+00, %2189 ], [ %2694, %2718 ], [ %2694, %2705 ], [ %2694, %2692 ], [ 0.000000e+00, %2683 ], [ 0.000000e+00, %2194 ]
  %2725 = phi float [ 0.000000e+00, %2189 ], [ %2695, %2718 ], [ %2695, %2705 ], [ %2695, %2692 ], [ 0.000000e+00, %2683 ], [ 0.000000e+00, %2194 ]
  %2726 = select i1 %2193, float %2190, float %1470
  %2727 = select i1 %2193, float 0.000000e+00, float %1471
  %2728 = select i1 %2193, float %2723, float %1472
  %2729 = select i1 %2193, float %2724, float %1473
  %2730 = select i1 %2193, float %2725, float %1474
  br label %2731

; <label>:2731                                    ; preds = %2722, %1469
  %2732 = phi float [ %1470, %1469 ], [ %2726, %2722 ]
  %2733 = phi float [ %1471, %1469 ], [ %2727, %2722 ]
  %2734 = phi float [ %1472, %1469 ], [ %2728, %2722 ]
  %2735 = phi float [ %1473, %1469 ], [ %2729, %2722 ]
  %2736 = phi float [ %1474, %1469 ], [ %2730, %2722 ]
  %2737 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %2738 = extractvalue %dx.types.CBufRet.f32 %2737, 2
  %2739 = fmul fast float %2738, %2734
  %2740 = fmul fast float %2738, %2735
  %2741 = fmul fast float %2738, %2736
  %2742 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %2743 = extractvalue %dx.types.CBufRet.f32 %2742, 0
  %2744 = extractvalue %dx.types.CBufRet.f32 %2742, 1
  %2745 = extractvalue %dx.types.CBufRet.f32 %2742, 2
  %2746 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %2747 = extractvalue %dx.types.CBufRet.f32 %2746, 0
  %2748 = extractvalue %dx.types.CBufRet.f32 %2746, 1
  %2749 = extractvalue %dx.types.CBufRet.f32 %2746, 2
  %2750 = fmul fast float %2743, 2.097152e+06
  %2751 = fmul fast float %2744, 2.097152e+06
  %2752 = fmul fast float %2745, 2.097152e+06
  %2753 = fsub fast float %2747, %142
  %2754 = fadd fast float %2753, %2750
  %2755 = fsub fast float %2748, %146
  %2756 = fadd fast float %2755, %2751
  %2757 = fsub fast float %2749, %150
  %2758 = fadd fast float %2757, %2752
  %2759 = fmul fast float %2754, %2754
  %2760 = fmul fast float %2756, %2756
  %2761 = fadd fast float %2759, %2760
  %2762 = fmul fast float %2758, %2758
  %2763 = fadd fast float %2761, %2762
  %2764 = call float @dx.op.unary.f32(i32 24, float %2763)  ; Sqrt(value)
  %2765 = fmul fast float %2764, 4.000000e+00
  %2766 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %2767 = extractvalue %dx.types.CBufRet.f32 %2766, 1
  %2768 = fdiv fast float %2765, %2767
  %2769 = fadd fast float %2768, -3.000000e+00
  %2770 = call float @dx.op.unary.f32(i32 7, float %2769)  ; Saturate(value)
  %2771 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %2772 = extractvalue %dx.types.CBufRet.f32 %2771, 3
  %2773 = fmul fast float %2772, 0x3FE6666660000000
  %2774 = fsub fast float %2732, %2773
  %2775 = fmul fast float %2772, 0x3FD3333340000000
  %2776 = fdiv fast float %2774, %2775
  %2777 = call float @dx.op.unary.f32(i32 7, float %2776)  ; Saturate(value)
  %2778 = call float @dx.op.binary.f32(i32 35, float %2770, float %2777)  ; FMax(a,b)
  %2779 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2780 = extractvalue %dx.types.CBufRet.i32 %2779, 0
  %2781 = icmp eq i32 %2780, 0
  %2782 = fsub fast float 1.000000e+00, %2733
  br i1 %2781, label %3044, label %2783

; <label>:2783                                    ; preds = %2731
  %2784 = call float @dx.op.unary.f32(i32 7, float %2782)  ; Saturate(value)
  %2785 = fmul fast float %2732, %153
  %2786 = fmul fast float %2732, %154
  %2787 = fmul fast float %2732, %155
  %2788 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2789 = extractvalue %dx.types.CBufRet.f32 %2788, 3
  %2790 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2791 = extractvalue %dx.types.CBufRet.f32 %2790, 2
  %2792 = fadd fast float %2752, %2749
  %2793 = call float @dx.op.binary.f32(i32 36, float %2792, float %2791)  ; FMin(a,b)
  %2794 = fsub fast float %2787, %2793
  %2795 = fadd fast float %2794, %2749
  %2796 = fadd fast float %2795, %2752
  %2797 = call float @dx.op.dot3.f32(i32 55, float %2785, float %2786, float %2796, float %2785, float %2786, float %2796)  ; Dot3(ax,ay,az,bx,by,bz)
  %2798 = call float @dx.op.binary.f32(i32 35, float %2797, float 0x3E45798EE0000000)  ; FMax(a,b)
  %2799 = call float @dx.op.unary.f32(i32 25, float %2798)  ; Rsqrt(value)
  %2800 = fmul fast float %2799, %2797
  %2801 = fmul fast float %2799, %2785
  %2802 = fmul fast float %2799, %2786
  %2803 = fmul fast float %2796, %2799
  %2804 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2805 = extractvalue %dx.types.CBufRet.f32 %2790, 3
  %2806 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2805)  ; FMax(a,b)
  %2807 = fcmp fast ogt float %2806, 0.000000e+00
  %2808 = extractvalue %dx.types.CBufRet.f32 %2790, 1
  %2809 = extractvalue %dx.types.CBufRet.f32 %2804, 1
  br i1 %2807, label %2813, label %2810

; <label>:2810                                    ; preds = %2783
  %2811 = extractvalue %dx.types.CBufRet.f32 %2804, 0
  %2812 = extractvalue %dx.types.CBufRet.f32 %2790, 0
  br label %2837

; <label>:2813                                    ; preds = %2783
  %2814 = fmul fast float %2806, %2799
  %2815 = fmul fast float %2814, %2796
  %2816 = fadd fast float %2815, %2793
  %2817 = fsub fast float %2796, %2815
  %2818 = fsub fast float 1.000000e+00, %2814
  %2819 = fmul fast float %2818, %2800
  %2820 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2821 = extractvalue %dx.types.CBufRet.f32 %2820, 1
  %2822 = fsub fast float %2816, %2821
  %2823 = fmul fast float %2822, %2808
  %2824 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2823)  ; FMax(a,b)
  %2825 = extractvalue %dx.types.CBufRet.f32 %2820, 0
  %2826 = fsub fast float -0.000000e+00, %2824
  %2827 = call float @dx.op.unary.f32(i32 21, float %2826)  ; Exp(value)
  %2828 = fmul fast float %2825, %2827
  %2829 = extractvalue %dx.types.CBufRet.f32 %2804, 3
  %2830 = fsub fast float %2816, %2829
  %2831 = fmul fast float %2830, %2809
  %2832 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2831)  ; FMax(a,b)
  %2833 = extractvalue %dx.types.CBufRet.f32 %2804, 2
  %2834 = fsub fast float -0.000000e+00, %2832
  %2835 = call float @dx.op.unary.f32(i32 21, float %2834)  ; Exp(value)
  %2836 = fmul fast float %2833, %2835
  br label %2837

; <label>:2837                                    ; preds = %2813, %2810
  %2838 = phi float [ %2828, %2813 ], [ %2812, %2810 ]
  %2839 = phi float [ %2836, %2813 ], [ %2811, %2810 ]
  %2840 = phi float [ %2819, %2813 ], [ %2800, %2810 ]
  %2841 = phi float [ %2817, %2813 ], [ %2796, %2810 ]
  %2842 = fmul fast float %2808, %2841
  %2843 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2842)  ; FMax(a,b)
  %2844 = fsub fast float -0.000000e+00, %2843
  %2845 = call float @dx.op.unary.f32(i32 21, float %2844)  ; Exp(value)
  %2846 = fsub fast float 1.000000e+00, %2845
  %2847 = fdiv fast float %2846, %2843
  %2848 = fmul fast float %2843, 0x3FCEBFBE00000000
  %2849 = fsub fast float 0x3FE62E4300000000, %2848
  %2850 = call float @dx.op.unary.f32(i32 6, float %2843)  ; FAbs(value)
  %2851 = fcmp fast ogt float %2850, 0x3F847AE140000000
  %2852 = select i1 %2851, float %2847, float %2849
  %2853 = fmul fast float %2852, %2838
  %2854 = fmul fast float %2809, %2841
  %2855 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2854)  ; FMax(a,b)
  %2856 = fsub fast float -0.000000e+00, %2855
  %2857 = call float @dx.op.unary.f32(i32 21, float %2856)  ; Exp(value)
  %2858 = fsub fast float 1.000000e+00, %2857
  %2859 = fdiv fast float %2858, %2855
  %2860 = fmul fast float %2855, 0x3FCEBFBE00000000
  %2861 = fsub fast float 0x3FE62E4300000000, %2860
  %2862 = call float @dx.op.unary.f32(i32 6, float %2855)  ; FAbs(value)
  %2863 = fcmp fast ogt float %2862, 0x3F847AE140000000
  %2864 = select i1 %2863, float %2859, float %2861
  %2865 = fmul fast float %2864, %2839
  %2866 = fadd fast float %2865, %2853
  %2867 = extractvalue %dx.types.CBufRet.f32 %2788, 0
  %2868 = extractvalue %dx.types.CBufRet.f32 %2788, 1
  %2869 = extractvalue %dx.types.CBufRet.f32 %2788, 2
  %2870 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2871 = extractvalue %dx.types.CBufRet.f32 %2870, 2
  %2872 = fcmp fast ogt float %2871, 0.000000e+00
  br i1 %2872, label %2873, label %2909, !dx.controlflow.hints !93

; <label>:2873                                    ; preds = %2837
  %2874 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2875 = extractvalue %dx.types.CBufRet.f32 %2874, 0
  %2876 = fmul fast float %2875, %2800
  %2877 = extractvalue %dx.types.CBufRet.f32 %2874, 1
  %2878 = fadd fast float %2876, %2877
  %2879 = call float @dx.op.unary.f32(i32 7, float %2878)  ; Saturate(value)
  %2880 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2881 = extractvalue %dx.types.CBufRet.f32 %2880, 1
  %2882 = extractvalue %dx.types.CBufRet.f32 %2880, 0
  %2883 = fsub fast float -0.000000e+00, %2882
  %2884 = call float @dx.op.dot2.f32(i32 54, float %2785, float %2786, float %2881, float %2883)  ; Dot2(ax,ay,bx,by)
  %2885 = call float @dx.op.dot2.f32(i32 54, float %2785, float %2786, float %2882, float %2881)  ; Dot2(ax,ay,bx,by)
  %2886 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2887 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2888 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2886, %dx.types.Handle %2887, float %2884, float %2885, float %2796, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2889 = extractvalue %dx.types.ResRet.f32 %2888, 0
  %2890 = extractvalue %dx.types.ResRet.f32 %2888, 1
  %2891 = extractvalue %dx.types.ResRet.f32 %2888, 2
  %2892 = extractvalue %dx.types.CBufRet.f32 %2874, 2
  %2893 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2886, %dx.types.Handle %2887, float %2884, float %2885, float %2796, float undef, i32 undef, i32 undef, i32 undef, float %2892)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2894 = extractvalue %dx.types.ResRet.f32 %2893, 0
  %2895 = extractvalue %dx.types.ResRet.f32 %2893, 1
  %2896 = extractvalue %dx.types.ResRet.f32 %2893, 2
  %2897 = fsub fast float %2889, %2894
  %2898 = fsub fast float %2890, %2895
  %2899 = fsub fast float %2891, %2896
  %2900 = fmul fast float %2897, %2879
  %2901 = fmul fast float %2898, %2879
  %2902 = fmul fast float %2899, %2879
  %2903 = fadd fast float %2900, %2894
  %2904 = fadd fast float %2901, %2895
  %2905 = fadd fast float %2902, %2896
  %2906 = fmul fast float %2903, %2867
  %2907 = fmul fast float %2904, %2868
  %2908 = fmul fast float %2905, %2869
  br label %2909

; <label>:2909                                    ; preds = %2873, %2837
  %2910 = phi float [ %2906, %2873 ], [ %2867, %2837 ]
  %2911 = phi float [ %2907, %2873 ], [ %2868, %2837 ]
  %2912 = phi float [ %2908, %2873 ], [ %2869, %2837 ]
  %2913 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2914 = extractvalue %dx.types.CBufRet.f32 %2913, 0
  %2915 = extractvalue %dx.types.CBufRet.f32 %2913, 1
  %2916 = extractvalue %dx.types.CBufRet.f32 %2913, 2
  %2917 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %2918 = extractvalue %dx.types.CBufRet.f32 %2917, 1
  %2919 = fmul fast float %2918, %2914
  %2920 = fmul fast float %2918, %2915
  %2921 = fmul fast float %2918, %2916
  %2922 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2923 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2924 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2922, %dx.types.Handle %2923, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2925 = extractvalue %dx.types.ResRet.f32 %2924, 0
  %2926 = extractvalue %dx.types.ResRet.f32 %2924, 1
  %2927 = extractvalue %dx.types.ResRet.f32 %2924, 2
  %2928 = fmul fast float %2919, %2925
  %2929 = fmul fast float %2920, %2926
  %2930 = fmul fast float %2921, %2927
  %2931 = fadd fast float %2928, %2910
  %2932 = fadd fast float %2929, %2911
  %2933 = fadd fast float %2930, %2912
  %2934 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2935 = extractvalue %dx.types.CBufRet.f32 %2934, 3
  %2936 = fcmp fast oge float %2935, 0.000000e+00
  %2937 = fcmp fast oeq float %2871, 0.000000e+00
  %2938 = and i1 %2936, %2937
  br i1 %2938, label %2939, label %3010

; <label>:2939                                    ; preds = %2909
  %2940 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2941 = extractvalue %dx.types.CBufRet.f32 %2940, 0
  %2942 = extractvalue %dx.types.CBufRet.f32 %2940, 1
  %2943 = extractvalue %dx.types.CBufRet.f32 %2940, 2
  %2944 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2945 = extractvalue %dx.types.CBufRet.f32 %2944, 0
  %2946 = extractvalue %dx.types.CBufRet.f32 %2944, 1
  %2947 = extractvalue %dx.types.CBufRet.f32 %2944, 2
  %2948 = fmul fast float %2918, 0x3FB45F3060000000
  %2949 = fmul fast float %2948, %2945
  %2950 = fmul fast float %2948, %2946
  %2951 = fmul fast float %2948, %2947
  %2952 = fadd fast float %2949, %2941
  %2953 = fadd fast float %2950, %2942
  %2954 = fadd fast float %2951, %2943
  %2955 = extractvalue %dx.types.CBufRet.f32 %2940, 3
  %2956 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %2957 = extractvalue %dx.types.CBufRet.f32 %2956, 0
  %2958 = extractvalue %dx.types.CBufRet.f32 %2956, 1
  %2959 = extractvalue %dx.types.CBufRet.f32 %2956, 2
  %2960 = call float @dx.op.dot3.f32(i32 55, float %2801, float %2802, float %2803, float %2957, float %2958, float %2959)  ; Dot3(ax,ay,az,bx,by,bz)
  %2961 = call float @dx.op.unary.f32(i32 7, float %2960)  ; Saturate(value)
  %2962 = call float @dx.op.unary.f32(i32 23, float %2961)  ; Log(value)
  %2963 = fmul fast float %2962, %2955
  %2964 = call float @dx.op.unary.f32(i32 21, float %2963)  ; Exp(value)
  %2965 = fmul fast float %2964, %2952
  %2966 = fmul fast float %2964, %2953
  %2967 = fmul fast float %2964, %2954
  %2968 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %2969 = extractvalue %dx.types.CBufRet.f32 %2968, 3
  %2970 = fcmp fast ogt float %2969, 0.000000e+00
  br i1 %2970, label %2971, label %2996

; <label>:2971                                    ; preds = %2939
  %2972 = extractvalue %dx.types.CBufRet.f32 %2968, 0
  %2973 = extractvalue %dx.types.CBufRet.f32 %2968, 1
  %2974 = extractvalue %dx.types.CBufRet.f32 %2968, 2
  %2975 = fmul fast float %2948, %2972
  %2976 = fmul fast float %2948, %2973
  %2977 = fmul fast float %2948, %2974
  %2978 = fadd fast float %2975, %2941
  %2979 = fadd fast float %2976, %2942
  %2980 = fadd fast float %2977, %2943
  %2981 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %2982 = extractvalue %dx.types.CBufRet.f32 %2981, 0
  %2983 = extractvalue %dx.types.CBufRet.f32 %2981, 1
  %2984 = extractvalue %dx.types.CBufRet.f32 %2981, 2
  %2985 = call float @dx.op.dot3.f32(i32 55, float %2801, float %2802, float %2803, float %2982, float %2983, float %2984)  ; Dot3(ax,ay,az,bx,by,bz)
  %2986 = call float @dx.op.unary.f32(i32 7, float %2985)  ; Saturate(value)
  %2987 = call float @dx.op.unary.f32(i32 23, float %2986)  ; Log(value)
  %2988 = fmul fast float %2987, %2955
  %2989 = call float @dx.op.unary.f32(i32 21, float %2988)  ; Exp(value)
  %2990 = fmul fast float %2989, %2978
  %2991 = fmul fast float %2989, %2979
  %2992 = fmul fast float %2989, %2980
  %2993 = fadd fast float %2990, %2965
  %2994 = fadd fast float %2991, %2966
  %2995 = fadd fast float %2992, %2967
  br label %2996

; <label>:2996                                    ; preds = %2971, %2939
  %2997 = phi float [ %2993, %2971 ], [ %2965, %2939 ]
  %2998 = phi float [ %2994, %2971 ], [ %2966, %2939 ]
  %2999 = phi float [ %2995, %2971 ], [ %2967, %2939 ]
  %3000 = fsub fast float %2840, %2935
  %3001 = call float @dx.op.binary.f32(i32 35, float %3000, float 0.000000e+00)  ; FMax(a,b)
  %3002 = fmul fast float %2866, %3001
  %3003 = fsub fast float -0.000000e+00, %3002
  %3004 = call float @dx.op.unary.f32(i32 21, float %3003)  ; Exp(value)
  %3005 = call float @dx.op.unary.f32(i32 7, float %3004)  ; Saturate(value)
  %3006 = fsub fast float 1.000000e+00, %3005
  %3007 = fmul fast float %3006, %2997
  %3008 = fmul fast float %3006, %2998
  %3009 = fmul fast float %3006, %2999
  br label %3010

; <label>:3010                                    ; preds = %2996, %2909
  %3011 = phi float [ %3007, %2996 ], [ 0.000000e+00, %2909 ]
  %3012 = phi float [ %3008, %2996 ], [ 0.000000e+00, %2909 ]
  %3013 = phi float [ %3009, %2996 ], [ 0.000000e+00, %2909 ]
  %3014 = fmul fast float %2840, %2866
  %3015 = fsub fast float -0.000000e+00, %3014
  %3016 = call float @dx.op.unary.f32(i32 21, float %3015)  ; Exp(value)
  %3017 = call float @dx.op.unary.f32(i32 7, float %3016)  ; Saturate(value)
  %3018 = call float @dx.op.binary.f32(i32 35, float %3017, float %2789)  ; FMax(a,b)
  %3019 = extractvalue %dx.types.CBufRet.f32 %2870, 3
  %3020 = fcmp fast ogt float %3019, 0.000000e+00
  %3021 = fcmp fast ogt float %2800, %3019
  %3022 = and i1 %3020, %3021
  %3023 = select i1 %3022, float 0.000000e+00, float %3011
  %3024 = select i1 %3022, float 0.000000e+00, float %3012
  %3025 = select i1 %3022, float 0.000000e+00, float %3013
  %3026 = select i1 %3022, float 1.000000e+00, float %3018
  %3027 = fsub fast float 1.000000e+00, %3026
  %3028 = fmul fast float %3027, %2931
  %3029 = fmul fast float %3027, %2932
  %3030 = fmul fast float %3027, %2933
  %3031 = fadd fast float %3028, %3023
  %3032 = fadd fast float %3029, %3024
  %3033 = fadd fast float %3030, %3025
  %3034 = fmul fast float %3026, %2739
  %3035 = fmul fast float %3026, %2740
  %3036 = fmul fast float %3026, %2741
  %3037 = fmul fast float %2738, %2784
  %3038 = fmul fast float %3037, %3031
  %3039 = fmul fast float %3037, %3032
  %3040 = fmul fast float %3037, %3033
  %3041 = fadd fast float %3038, %3034
  %3042 = fadd fast float %3039, %3035
  %3043 = fadd fast float %3040, %3036
  br label %3044

; <label>:3044                                    ; preds = %3010, %2731
  %3045 = phi float [ %3041, %3010 ], [ %2739, %2731 ]
  %3046 = phi float [ %3042, %3010 ], [ %2740, %2731 ]
  %3047 = phi float [ %3043, %3010 ], [ %2741, %2731 ]
  %3048 = fmul fast float %2778, %2782
  %3049 = fadd fast float %3048, %2733
  %3050 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3051 = extractvalue %dx.types.CBufRet.f32 %3050, 1
  %3052 = fcmp fast ogt float %3051, 0.000000e+00
  br i1 %3052, label %3053, label %3085

; <label>:3053                                    ; preds = %3044
  %3054 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3055 = extractvalue %dx.types.CBufRet.f32 %3054, 1
  %3056 = fcmp fast ogt float %3055, 0.000000e+00
  br i1 %3056, label %3057, label %3085

; <label>:3057                                    ; preds = %3053
  %3058 = extractvalue %dx.types.CBufRet.f32 %3054, 2
  %3059 = extractvalue %dx.types.CBufRet.f32 %3050, 0
  %3060 = call float @dx.op.binary.f32(i32 35, float %3058, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3061 = call float @dx.op.unary.f32(i32 23, float %3060)  ; Log(value)
  %3062 = fmul fast float %3061, 0x3FF3333340000000
  %3063 = fadd fast float %3059, -2.000000e+00
  %3064 = fadd fast float %3063, %3062
  %3065 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3066 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3067 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3065, %dx.types.Handle %3066, float %153, float %154, float %155, float undef, i32 undef, i32 undef, i32 undef, float %3064)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3068 = extractvalue %dx.types.ResRet.f32 %3067, 0
  %3069 = extractvalue %dx.types.ResRet.f32 %3067, 1
  %3070 = extractvalue %dx.types.ResRet.f32 %3067, 2
  %3071 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %3072 = extractvalue %dx.types.CBufRet.f32 %3071, 0
  %3073 = extractvalue %dx.types.CBufRet.f32 %3071, 1
  %3074 = extractvalue %dx.types.CBufRet.f32 %3071, 2
  %3075 = fmul fast float %3072, %3068
  %3076 = fmul fast float %3073, %3069
  %3077 = fmul fast float %3074, %3070
  %3078 = extractvalue %dx.types.CBufRet.f32 %3054, 3
  %3079 = fmul fast float %3078, %2732
  %3080 = call float @dx.op.unary.f32(i32 7, float %3079)  ; Saturate(value)
  %3081 = fmul fast float %3080, %3055
  %3082 = fmul fast float %3075, %3081
  %3083 = fmul fast float %3076, %3081
  %3084 = fmul fast float %3077, %3081
  br label %3085

; <label>:3085                                    ; preds = %3057, %3053, %3044
  %3086 = phi float [ %3082, %3057 ], [ 0.000000e+00, %3053 ], [ 0.000000e+00, %3044 ]
  %3087 = phi float [ %3083, %3057 ], [ 0.000000e+00, %3053 ], [ 0.000000e+00, %3044 ]
  %3088 = phi float [ %3084, %3057 ], [ 0.000000e+00, %3053 ], [ 0.000000e+00, %3044 ]
  %3089 = fmul fast float %2738, %3086
  %3090 = fmul fast float %2738, %3087
  %3091 = fmul fast float %2738, %3088
  %3092 = fadd fast float %3089, %3045
  %3093 = fadd fast float %3090, %3046
  %3094 = fadd fast float %3091, %3047
  %3095 = call float @dx.op.binary.f32(i32 35, float %3093, float %3094)  ; FMax(a,b)
  %3096 = call float @dx.op.binary.f32(i32 35, float %3092, float %3095)  ; FMax(a,b)
  %3097 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %3098 = extractvalue %dx.types.CBufRet.f32 %3097, 2
  %3099 = fcmp fast ogt float %3096, %3098
  br i1 %3099, label %3100, label %3105

; <label>:3100                                    ; preds = %3085
  %3101 = fdiv fast float %3098, %3096
  %3102 = fmul fast float %3101, %3092
  %3103 = fmul fast float %3101, %3093
  %3104 = fmul fast float %3101, %3094
  br label %3105

; <label>:3105                                    ; preds = %3100, %3085
  %3106 = phi float [ %3102, %3100 ], [ %3092, %3085 ]
  %3107 = phi float [ %3103, %3100 ], [ %3093, %3085 ]
  %3108 = phi float [ %3104, %3100 ], [ %3094, %3085 ]
  %3109 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3109, i32 %60, i32 %61, i32 undef, float %3106, float %3107, float %3108, float %3106, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3110 = uitofp i32 %60 to float
  %3111 = uitofp i32 %61 to float
  %3112 = fadd fast float %3110, 5.000000e-01
  %3113 = fadd fast float %3111, 5.000000e-01
  %3114 = call float @dx.op.dot2.f32(i32 54, float %3112, float %3113, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %3115 = call float @dx.op.unary.f32(i32 22, float %3114)  ; Frc(value)
  %3116 = fmul fast float %3115, 0x404A7DD040000000
  %3117 = call float @dx.op.unary.f32(i32 22, float %3116)  ; Frc(value)
  %3118 = fcmp fast olt float %3049, %3117
  %3119 = call float @dx.op.binary.f32(i32 35, float %2732, float 0.000000e+00)  ; FMax(a,b)
  %3120 = select i1 %3118, float -1.000000e+00, float 1.000000e+00
  %3121 = fmul fast float %3120, %3119
  %3122 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3122, i32 %60, i32 %61, i32 undef, float %3121, float %3121, float %3121, float %3121, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3123

; <label>:3123                                    ; preds = %3105, %0
  ret void

; <label>:3124                                    ; preds = %2644
  %3125 = fsub fast float %2631, %2626
  %3126 = call float @dx.op.unary.f32(i32 6, float %3125)  ; FAbs(value)
  %3127 = fsub fast float %3126, %2632
  %3128 = fdiv fast float %3127, %2633
  %3129 = call float @dx.op.unary.f32(i32 7, float %3128)  ; Saturate(value)
  %3130 = fsub fast float 1.000000e+00, %3129
  br label %3131

; <label>:3131                                    ; preds = %3124, %2644
  %3132 = phi float [ %3130, %3124 ], [ %2648, %2644 ]
  %3133 = fcmp uge float %2627, 1.000000e+00
  %3134 = or i1 %2253, %3133
  %3135 = select i1 %3133, float 0.000000e+00, float 1.000000e+00
  br i1 %3134, label %3143, label %3136

; <label>:3136                                    ; preds = %3131
  %3137 = fsub fast float %2631, %2627
  %3138 = call float @dx.op.unary.f32(i32 6, float %3137)  ; FAbs(value)
  %3139 = fsub fast float %3138, %2632
  %3140 = fdiv fast float %3139, %2633
  %3141 = call float @dx.op.unary.f32(i32 7, float %3140)  ; Saturate(value)
  %3142 = fsub fast float 1.000000e+00, %3141
  br label %3143

; <label>:3143                                    ; preds = %3136, %3131
  %3144 = phi float [ %3142, %3136 ], [ %3135, %3131 ]
  %3145 = fcmp uge float %2628, 1.000000e+00
  %3146 = or i1 %2253, %3145
  %3147 = select i1 %3145, float 0.000000e+00, float 1.000000e+00
  br i1 %3146, label %3155, label %3148

; <label>:3148                                    ; preds = %3143
  %3149 = fsub fast float %2631, %2628
  %3150 = call float @dx.op.unary.f32(i32 6, float %3149)  ; FAbs(value)
  %3151 = fsub fast float %3150, %2632
  %3152 = fdiv fast float %3151, %2633
  %3153 = call float @dx.op.unary.f32(i32 7, float %3152)  ; Saturate(value)
  %3154 = fsub fast float 1.000000e+00, %3153
  br label %3155

; <label>:3155                                    ; preds = %3148, %3143
  %3156 = phi float [ %3154, %3148 ], [ %3147, %3143 ]
  %3157 = fmul fast float %2645, %2606
  %3158 = fmul fast float %3132, %2607
  %3159 = fmul fast float %3144, %2609
  %3160 = fmul fast float %3156, %2610
  %3161 = call float @dx.op.dot4.f32(i32 56, float %3157, float %3158, float %3159, float %3160, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3162 = fmul fast float %3161, %2619
  %3163 = fcmp fast ogt float %3162, 0.000000e+00
  br i1 %3163, label %2649, label %2389

; <label>:3164                                    ; preds = %1391
  %3165 = fsub fast float %1378, %1373
  %3166 = call float @dx.op.unary.f32(i32 6, float %3165)  ; FAbs(value)
  %3167 = fsub fast float %3166, %1379
  %3168 = fdiv fast float %3167, %1380
  %3169 = call float @dx.op.unary.f32(i32 7, float %3168)  ; Saturate(value)
  %3170 = fsub fast float 1.000000e+00, %3169
  br label %3171

; <label>:3171                                    ; preds = %3164, %1391
  %3172 = phi float [ %3170, %3164 ], [ %1395, %1391 ]
  %3173 = fcmp uge float %1374, 1.000000e+00
  %3174 = or i1 %994, %3173
  %3175 = select i1 %3173, float 0.000000e+00, float 1.000000e+00
  br i1 %3174, label %3183, label %3176

; <label>:3176                                    ; preds = %3171
  %3177 = fsub fast float %1378, %1374
  %3178 = call float @dx.op.unary.f32(i32 6, float %3177)  ; FAbs(value)
  %3179 = fsub fast float %3178, %1379
  %3180 = fdiv fast float %3179, %1380
  %3181 = call float @dx.op.unary.f32(i32 7, float %3180)  ; Saturate(value)
  %3182 = fsub fast float 1.000000e+00, %3181
  br label %3183

; <label>:3183                                    ; preds = %3176, %3171
  %3184 = phi float [ %3182, %3176 ], [ %3175, %3171 ]
  %3185 = fcmp uge float %1375, 1.000000e+00
  %3186 = or i1 %994, %3185
  %3187 = select i1 %3185, float 0.000000e+00, float 1.000000e+00
  br i1 %3186, label %3195, label %3188

; <label>:3188                                    ; preds = %3183
  %3189 = fsub fast float %1378, %1375
  %3190 = call float @dx.op.unary.f32(i32 6, float %3189)  ; FAbs(value)
  %3191 = fsub fast float %3190, %1379
  %3192 = fdiv fast float %3191, %1380
  %3193 = call float @dx.op.unary.f32(i32 7, float %3192)  ; Saturate(value)
  %3194 = fsub fast float 1.000000e+00, %3193
  br label %3195

; <label>:3195                                    ; preds = %3188, %3183
  %3196 = phi float [ %3194, %3188 ], [ %3187, %3183 ]
  %3197 = fmul fast float %1392, %1353
  %3198 = fmul fast float %3172, %1354
  %3199 = fmul fast float %3184, %1356
  %3200 = fmul fast float %3196, %1357
  %3201 = call float @dx.op.dot4.f32(i32 56, float %3197, float %3198, float %3199, float %3200, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3202 = fmul fast float %3201, %1366
  %3203 = fcmp fast ogt float %3202, 0.000000e+00
  br i1 %3203, label %1396, label %1136
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!57}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !36, !44, !50}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 16}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !9}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !9}
!12 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!15 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!16 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!17 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !7}
!18 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!19 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!20 = !{i32 12, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 4, i32 0, !7}
!21 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !7}
!22 = !{i32 14, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 12, i32 0, !9}
!23 = !{i32 15, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 12, i32 0, !9}
!24 = !{i32 16, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 16, i32 1, i32 10, i32 0, !25}
!25 = !{i32 0, i32 5}
!26 = !{i32 17, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 10, i32 0, !25}
!27 = !{i32 18, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 18, i32 1, i32 10, i32 0, !25}
!28 = !{i32 19, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 19, i32 1, i32 10, i32 0, !25}
!29 = !{i32 20, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 10, i32 0, !25}
!30 = !{i32 21, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 21, i32 1, i32 10, i32 0, !25}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !7}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !7}
!33 = !{i32 24, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !25}
!34 = !{i32 25, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 25, i32 1, i32 10, i32 0, !25}
!35 = !{i32 26, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 26, i32 1, i32 10, i32 0, !25}
!36 = !{!37, !39, !40, !42, !43}
!37 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !38}
!38 = !{i32 1, i32 4}
!39 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !38}
!40 = !{i32 2, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !41}
!41 = !{i32 1, i32 8}
!42 = !{i32 3, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!43 = !{i32 4, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!44 = !{!45, !46, !47, !48, !49}
!45 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 900, null}
!46 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!47 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 140, null}
!48 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!49 = !{i32 4, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 4, i32 1, i32 180, null}
!50 = !{!51, !52, !53, !54, !55, !56}
!51 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!52 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 2, i32 1, i32 0, null}
!53 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!54 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!55 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!56 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!57 = !{void ()* @ReflectionTraceMeshSDFsCS, !"ReflectionTraceMeshSDFsCS", null, !4, !58}
!58 = !{i32 0, i64 16, i32 4, !59, i32 5, !60}
!59 = !{i32 32, i32 1, i32 1}
!60 = !{i32 0}
!61 = distinct !{!61, !"dx.controlflow.hints", i32 1}
!62 = distinct !{!62, !63}
!63 = !{!"llvm.loop.unroll.disable"}
!64 = !{!65, !65, i64 0}
!65 = !{!"int", !66, i64 0}
!66 = !{!"omnipotent char", !67, i64 0}
!67 = !{!"Simple C/C++ TBAA"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!70 = distinct !{!70, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!71 = !{!72, !74, !76, !78}
!72 = distinct !{!72, !73, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!73 = distinct !{!73, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!74 = distinct !{!74, !75, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z: %agg.result"}
!75 = distinct !{!75, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z"}
!76 = distinct !{!76, !77, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!77 = distinct !{!77, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!78 = distinct !{!78, !79, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!79 = distinct !{!79, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!82 = distinct !{!82, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!83 = !{!84, !86, !88, !90, !91}
!84 = distinct !{!84, !85, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!85 = distinct !{!85, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!86 = distinct !{!86, !87, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z: %agg.result"}
!87 = distinct !{!87, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z"}
!88 = distinct !{!88, !89, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %agg.result"}
!89 = distinct !{!89, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z"}
!90 = distinct !{!90, !89, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!91 = distinct !{!91, !92, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!92 = distinct !{!92, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!93 = distinct !{!93, !"dx.controlflow.hints", i32 1}
