;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: aa3bf938c13313300dfda2f6e3f8ab8b
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  144
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  148
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  152
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  160
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint NumSceneObjects;                         ; Offset:  272
;       uint NumSceneHeightfieldObjects;              ; Offset:  296
;       float3 DistanceFieldBrickSize;                ; Offset:  352
;       float3 DistanceFieldUniqueDataBrickSize;      ; Offset:  368
;       uint3 DistanceFieldBrickAtlasSizeInBricks;    ; Offset:  384
;       uint3 DistanceFieldBrickAtlasMask;            ; Offset:  400
;       uint3 DistanceFieldBrickAtlasSizeLog2;        ; Offset:  416
;       float3 DistanceFieldBrickAtlasTexelSize;      ; Offset:  432
;       float3 DistanceFieldBrickAtlasHalfTexelSize;  ; Offset:  448
;       float3 DistanceFieldBrickOffsetToAtlasUVScale;; Offset:  464
;       float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;; Offset:  480
;       float MeshSDFNotCoveredExpandSurfaceScale;    ; Offset:  496
;       float MeshSDFNotCoveredMinStepScale;          ; Offset:  500
;       float MeshSDFDitheredTransparencyStepThreshold;; Offset:  504
;       uint CardGridPixelSizeShift;                  ; Offset:  536
;       float3 CardGridZParams;                       ; Offset:  544
;       uint3 CullGridSize;                           ; Offset:  560
;       uint ReflectionDownsampleFactor;              ; Offset:  640
;       uint2 ReflectionTracingViewSize;              ; Offset:  648
;       uint2 ReflectionTracingBufferSize;            ; Offset:  656
;       float MaxRayIntensity;                        ; Offset:  664
;       float ReflectionSmoothBias;                   ; Offset:  668
;       uint ReflectionPass;                          ; Offset:  672
;       uint UseJitter;                               ; Offset:  676
;       uint UseHighResSurface;                       ; Offset:  680
;       float NearFieldMaxTraceDistance;              ; Offset:  688
;       float CardTraceEndDistanceFromCamera;         ; Offset:  852
;       float MaxTraceDistance;                       ; Offset:  872
;       float MaxMeshSDFTraceDistance;                ; Offset:  876
;       float SurfaceBias;                            ; Offset:  880
;       int HeightfieldMaxTracingSteps;               ; Offset:  896
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   900
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_NumPrimitiveGroups;       ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       float PrePadding_LumenCardScene_44;           ; Offset:   44
;       uint BindlessResource_LumenCardScene_CardData;; Offset:   48
;       uint PrePadding_LumenCardScene_52;            ; Offset:   52
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:   56
;       uint PrePadding_LumenCardScene_60;            ; Offset:   60
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:   64
;       uint PrePadding_LumenCardScene_68;            ; Offset:   68
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:   72
;       uint PrePadding_LumenCardScene_76;            ; Offset:   76
;       uint BindlessResource_LumenCardScene_PrimitiveGroupData;; Offset:   80
;       uint PrePadding_LumenCardScene_84;            ; Offset:   84
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:   88
;       uint PrePadding_LumenCardScene_92;            ; Offset:   92
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:   96
;       uint PrePadding_LumenCardScene_100;           ; Offset:  100
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  104
;       uint PrePadding_LumenCardScene_108;           ; Offset:  108
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  136
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   140
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_HeightfieldData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneDistanceFieldAssetData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneObjectData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearWrappedSampler   sampler      NA          NA      S1   s2,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S2   s3,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S3             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S4             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; LumenCardScene_CardData           texture  struct         r/o      T1             t1     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T2             t2     1
; LumenCardScene_HeightfieldData    texture  struct         r/o      T3             t3     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T4             t4     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T5             t5     1
; LumenCardScene_OpacityAtlas       texture     f32          2d      T6             t6     1
; LumenCardScene_DepthAtlas         texture     f32          2d      T7             t7     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T8             t8     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T9             t9     1
; FinalLightingAtlas                texture     f32          2d     T10            t10     1
; DepthAtlas                        texture     f32          2d     T11            t11     1
; DistanceFieldIndirectionTable     texture    byte         r/o     T12            t12     1
; DistanceFieldBrickTexture         texture     f32          3d     T13            t13     1
; SceneDistanceFieldAssetData       texture  struct         r/o     T14            t14     1
; SceneObjectData                   texture  struct         r/o     T15            t15     1
; NumGridCulledMeshSDFObjects       texture     u32         buf     T16            t16     1
; GridCulledMeshSDFObjectStartOffsetArray   texture     u32         buf     T17            t17     1
; GridCulledMeshSDFObjectIndicesArray   texture     u32         buf     T18            t18     1
; NumGridCulledHeightfieldObjects   texture     u32         buf     T19            t19     1
; GridCulledHeightfieldObjectStartOffsetArray   texture     u32         buf     T20            t20     1
; GridCulledHeightfieldObjectIndicesArray   texture     u32         buf     T21            t21     1
; DownsampledDepth                  texture     f32          2d     T22            t22     1
; RayBuffer                         texture     f32          2d     T23            t23     1
; RayTraceDistance                  texture     u32          2d     T24            t24     1
; CompactedTraceTexelAllocator      texture     u32         buf     T25            t25     1
; CompactedTraceTexelData           texture     u32         buf     T26            t26     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U0             u0     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U2             u2     1
; RWTraceHit                            UAV     f32          2d      U3             u3     1
; RWTraceRadiance                       UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, i32, <3 x float>, <3 x float>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, float, float, float, i32, <3 x float>, <3 x i32>, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, float, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceMeshSDFsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 1000, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 13, i32 140 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 13, i32 900 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %49 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %50 = alloca [6 x i32], align 4
  %51 = alloca [6 x i32], align 4
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %53 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %52, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %54 = extractvalue %dx.types.ResRet.i32 %53, 0
  %55 = icmp ult i32 %49, %54
  br i1 %55, label %56, label %3264

; <label>:56                                      ; preds = %0
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %58 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %57, i32 %49, i32 undef)  ; BufferLoad(srv,index,wot)
  %59 = extractvalue %dx.types.ResRet.i32 %58, 0
  %60 = and i32 %59, 65535
  %61 = lshr i32 %59, 16
  %62 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  %63 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %62, i32 undef, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %64 = extractvalue %dx.types.ResRet.f32 %63, 0
  %65 = call float @dx.op.unary.f32(i32 6, float %64)  ; FAbs(value)
  %66 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.i32 %66, 0
  %68 = mul i32 %67, %60
  %69 = mul i32 %67, %61
  %70 = uitofp i32 %68 to float
  %71 = uitofp i32 %69 to float
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = fadd fast float %73, 5.000000e-01
  %76 = fadd fast float %75, %70
  %77 = fadd fast float %74, 5.000000e-01
  %78 = fadd fast float %77, %71
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = fadd fast float %73, -1.000000e+00
  %83 = fadd fast float %82, %80
  %84 = fadd fast float %74, -1.000000e+00
  %85 = fadd fast float %84, %81
  %86 = call float @dx.op.binary.f32(i32 36, float %76, float %83)  ; FMin(a,b)
  %87 = call float @dx.op.binary.f32(i32 36, float %78, float %85)  ; FMin(a,b)
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %91 = fmul fast float %89, %86
  %92 = fmul fast float %90, %87
  %93 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %94 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %93, i32 0, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %95 = extractvalue %dx.types.ResRet.f32 %94, 0
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 3
  %99 = fsub fast float %91, %98
  %100 = fsub fast float %92, %97
  %101 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %102 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %103 = fdiv fast float %99, %101
  %104 = fdiv fast float %100, %102
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = fmul fast float %122, 2.097152e+06
  %126 = fmul fast float %123, 2.097152e+06
  %127 = fmul fast float %124, 2.097152e+06
  %128 = fadd fast float %125, %118
  %129 = fadd fast float %126, %119
  %130 = fadd fast float %127, %120
  %131 = fmul fast float %103, %95
  %132 = fmul fast float %104, %95
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 3
  %135 = bitcast float %134 to i32
  %136 = icmp ne i32 %135, 0
  %137 = select i1 %136, float %103, float %131
  %138 = select i1 %136, float %104, float %132
  %139 = fmul fast float %137, %106
  %140 = call float @dx.op.tertiary.f32(i32 46, float %138, float %110, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %95, float %114, float %140)  ; FMad(a,b,c)
  %142 = fadd fast float %128, %141
  %143 = fmul fast float %137, %107
  %144 = call float @dx.op.tertiary.f32(i32 46, float %138, float %111, float %143)  ; FMad(a,b,c)
  %145 = call float @dx.op.tertiary.f32(i32 46, float %95, float %115, float %144)  ; FMad(a,b,c)
  %146 = fadd fast float %129, %145
  %147 = fmul fast float %137, %108
  %148 = call float @dx.op.tertiary.f32(i32 46, float %138, float %112, float %147)  ; FMad(a,b,c)
  %149 = call float @dx.op.tertiary.f32(i32 46, float %95, float %116, float %148)  ; FMad(a,b,c)
  %150 = fadd fast float %130, %149
  %151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %152 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %151, i32 0, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %153 = extractvalue %dx.types.ResRet.f32 %152, 0
  %154 = extractvalue %dx.types.ResRet.f32 %152, 1
  %155 = extractvalue %dx.types.ResRet.f32 %152, 2
  %156 = extractvalue %dx.types.ResRet.f32 %152, 3
  %157 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %158 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %157, i32 0, i32 %60, i32 %61, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %159 = extractvalue %dx.types.ResRet.i32 %158, 0
  %160 = and i32 %159, 32767
  %161 = call float @dx.op.legacyF16ToF32(i32 131, i32 %160)  ; LegacyF16ToF32(value)
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = fmul fast float %163, %153
  %165 = fmul fast float %163, %154
  %166 = fmul fast float %163, %155
  %167 = fadd fast float %164, %142
  %168 = fadd fast float %165, %146
  %169 = fadd fast float %166, %150
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %172 = fadd fast float %171, %156
  %173 = fsub fast float %65, %163
  %174 = call float @dx.op.binary.f32(i32 35, float %173, float 0.000000e+00)  ; FMax(a,b)
  %175 = call float @dx.op.unary.f32(i32 14, float %172)  ; Tan(value)
  %176 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.i32 %176, 2
  %178 = icmp ne i32 %177, 0
  %179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.f32 %179, 3
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 0
  %183 = fmul fast float %182, %95
  %184 = extractvalue %dx.types.CBufRet.f32 %181, 1
  %185 = fadd fast float %183, %184
  %186 = call float @dx.op.unary.f32(i32 23, float %185)  ; Log(value)
  %187 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %188 = fmul fast float %187, %186
  %189 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %188)  ; FMax(a,b)
  %190 = fptoui float %189 to i32
  %191 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.i32 %191, 2
  %193 = add i32 %192, -1
  %194 = call i32 @dx.op.binary.i32(i32 40, i32 %190, i32 %193)  ; UMin(a,b)
  %195 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.i32 %195, 2
  %197 = and i32 %196, 31
  %198 = lshr i32 %68, %197
  %199 = lshr i32 %69, %197
  %200 = extractvalue %dx.types.CBufRet.i32 %191, 1
  %201 = mul i32 %200, %194
  %202 = add i32 %201, %199
  %203 = extractvalue %dx.types.CBufRet.i32 %191, 0
  %204 = mul i32 %202, %203
  %205 = add i32 %204, %198
  %206 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %207 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %206, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %208 = extractvalue %dx.types.ResRet.i32 %207, 0
  %209 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %210 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %209, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %211 = extractvalue %dx.types.ResRet.i32 %210, 0
  %212 = fcmp fast ogt float %180, %174
  br i1 %212, label %213, label %1610

; <label>:213                                     ; preds = %56
  %214 = icmp eq i32 %208, 0
  br i1 %214, label %516, label %215

; <label>:215                                     ; preds = %213
  br label %216

; <label>:216                                     ; preds = %510, %215
  %217 = phi i32 [ %513, %510 ], [ 0, %215 ]
  %218 = phi i32 [ %511, %510 ], [ 0, %215 ]
  %219 = phi float [ %512, %510 ], [ %180, %215 ]
  %220 = add i32 %217, %211
  %221 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %222 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %221, i32 %220, i32 undef)  ; BufferLoad(srv,index,wot)
  %223 = extractvalue %dx.types.ResRet.i32 %222, 0
  %224 = mul i32 %223, 10
  %225 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %226 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %224, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %227 = extractvalue %dx.types.ResRet.f32 %226, 0
  %228 = extractvalue %dx.types.ResRet.f32 %226, 1
  %229 = extractvalue %dx.types.ResRet.f32 %226, 2
  %230 = or i32 %224, 1
  %231 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %230, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %232 = extractvalue %dx.types.ResRet.f32 %231, 0
  %233 = extractvalue %dx.types.ResRet.f32 %231, 1
  %234 = extractvalue %dx.types.ResRet.f32 %231, 2
  %235 = extractvalue %dx.types.ResRet.f32 %231, 3
  %236 = add i32 %224, 2
  %237 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %236, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %238 = extractvalue %dx.types.ResRet.f32 %237, 0
  %239 = extractvalue %dx.types.ResRet.f32 %237, 1
  %240 = extractvalue %dx.types.ResRet.f32 %237, 2
  %241 = extractvalue %dx.types.ResRet.f32 %237, 3
  %242 = add i32 %224, 3
  %243 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %242, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %244 = extractvalue %dx.types.ResRet.f32 %243, 0
  %245 = extractvalue %dx.types.ResRet.f32 %243, 1
  %246 = extractvalue %dx.types.ResRet.f32 %243, 2
  %247 = extractvalue %dx.types.ResRet.f32 %243, 3
  %248 = add i32 %224, 4
  %249 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %248, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %250 = extractvalue %dx.types.ResRet.f32 %249, 0
  %251 = extractvalue %dx.types.ResRet.f32 %249, 1
  %252 = extractvalue %dx.types.ResRet.f32 %249, 2
  %253 = extractvalue %dx.types.ResRet.f32 %249, 3
  %254 = call float @dx.op.unary.f32(i32 6, float %253)  ; FAbs(value)
  %255 = add i32 %224, 9
  %256 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %225, i32 %255, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %257 = extractvalue %dx.types.ResRet.f32 %256, 0
  %258 = extractvalue %dx.types.ResRet.f32 %256, 1
  %259 = extractvalue %dx.types.ResRet.f32 %256, 2
  %260 = fmul fast float %227, -2.097152e+06
  %261 = fmul fast float %228, -2.097152e+06
  %262 = fmul fast float %229, -2.097152e+06
  %263 = fmul fast float %232, %260
  %264 = call float @dx.op.tertiary.f32(i32 46, float %261, float %233, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %262, float %234, float %264)  ; FMad(a,b,c)
  %266 = fadd fast float %265, %235
  %267 = fmul fast float %238, %260
  %268 = call float @dx.op.tertiary.f32(i32 46, float %261, float %239, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %262, float %240, float %268)  ; FMad(a,b,c)
  %270 = fadd fast float %269, %241
  %271 = fmul fast float %244, %260
  %272 = call float @dx.op.tertiary.f32(i32 46, float %261, float %245, float %271)  ; FMad(a,b,c)
  %273 = call float @dx.op.tertiary.f32(i32 46, float %262, float %246, float %272)  ; FMad(a,b,c)
  %274 = fadd fast float %273, %247
  %275 = fadd fast float %254, %219
  %276 = call float @dx.op.binary.f32(i32 36, float %180, float %275)  ; FMin(a,b)
  %277 = fmul fast float %276, %153
  %278 = fmul fast float %276, %154
  %279 = fmul fast float %276, %155
  %280 = fadd fast float %277, %167
  %281 = fadd fast float %278, %168
  %282 = fadd fast float %279, %169
  %283 = fmul fast float %232, %167
  %284 = call float @dx.op.tertiary.f32(i32 46, float %168, float %233, float %283)  ; FMad(a,b,c)
  %285 = call float @dx.op.tertiary.f32(i32 46, float %169, float %234, float %284)  ; FMad(a,b,c)
  %286 = fadd fast float %266, %285
  %287 = fmul fast float %238, %167
  %288 = call float @dx.op.tertiary.f32(i32 46, float %168, float %239, float %287)  ; FMad(a,b,c)
  %289 = call float @dx.op.tertiary.f32(i32 46, float %169, float %240, float %288)  ; FMad(a,b,c)
  %290 = fadd fast float %270, %289
  %291 = fmul fast float %244, %167
  %292 = call float @dx.op.tertiary.f32(i32 46, float %168, float %245, float %291)  ; FMad(a,b,c)
  %293 = call float @dx.op.tertiary.f32(i32 46, float %169, float %246, float %292)  ; FMad(a,b,c)
  %294 = fadd fast float %274, %293
  %295 = fmul fast float %280, %232
  %296 = call float @dx.op.tertiary.f32(i32 46, float %281, float %233, float %295)  ; FMad(a,b,c)
  %297 = call float @dx.op.tertiary.f32(i32 46, float %282, float %234, float %296)  ; FMad(a,b,c)
  %298 = fmul fast float %280, %238
  %299 = call float @dx.op.tertiary.f32(i32 46, float %281, float %239, float %298)  ; FMad(a,b,c)
  %300 = call float @dx.op.tertiary.f32(i32 46, float %282, float %240, float %299)  ; FMad(a,b,c)
  %301 = fmul fast float %280, %244
  %302 = call float @dx.op.tertiary.f32(i32 46, float %281, float %245, float %301)  ; FMad(a,b,c)
  %303 = call float @dx.op.tertiary.f32(i32 46, float %282, float %246, float %302)  ; FMad(a,b,c)
  %304 = fsub fast float %297, %285
  %305 = fsub fast float %300, %289
  %306 = fsub fast float %303, %293
  %307 = fmul fast float %304, %304
  %308 = fmul fast float %305, %305
  %309 = fadd fast float %308, %307
  %310 = fmul fast float %306, %306
  %311 = fadd fast float %309, %310
  %312 = call float @dx.op.unary.f32(i32 24, float %311)  ; Sqrt(value)
  %313 = fdiv fast float %174, %276
  %314 = fmul fast float %313, %312
  %315 = fdiv fast float %304, %312
  %316 = fdiv fast float %305, %312
  %317 = fdiv fast float %306, %312
  %318 = fsub fast float -0.000000e+00, %250
  %319 = fsub fast float -0.000000e+00, %251
  %320 = fsub fast float -0.000000e+00, %252
  %321 = fdiv fast float 1.000000e+00, %304
  %322 = fdiv fast float 1.000000e+00, %305
  %323 = fdiv fast float 1.000000e+00, %306
  %324 = fsub fast float %318, %286
  %325 = fsub fast float %319, %290
  %326 = fsub fast float %320, %294
  %327 = fmul fast float %321, %324
  %328 = fmul fast float %322, %325
  %329 = fmul fast float %323, %326
  %330 = fsub fast float %250, %286
  %331 = fsub fast float %251, %290
  %332 = fsub fast float %252, %294
  %333 = fmul fast float %321, %330
  %334 = fmul fast float %322, %331
  %335 = fmul fast float %323, %332
  %336 = call float @dx.op.binary.f32(i32 36, float %327, float %333)  ; FMin(a,b)
  %337 = call float @dx.op.binary.f32(i32 36, float %328, float %334)  ; FMin(a,b)
  %338 = call float @dx.op.binary.f32(i32 36, float %329, float %335)  ; FMin(a,b)
  %339 = call float @dx.op.binary.f32(i32 35, float %327, float %333)  ; FMax(a,b)
  %340 = call float @dx.op.binary.f32(i32 35, float %328, float %334)  ; FMax(a,b)
  %341 = call float @dx.op.binary.f32(i32 35, float %329, float %335)  ; FMax(a,b)
  %342 = call float @dx.op.binary.f32(i32 35, float %337, float %338)  ; FMax(a,b)
  %343 = call float @dx.op.binary.f32(i32 35, float %336, float %342)  ; FMax(a,b)
  %344 = call float @dx.op.binary.f32(i32 36, float %340, float %341)  ; FMin(a,b)
  %345 = call float @dx.op.binary.f32(i32 36, float %339, float %344)  ; FMin(a,b)
  %346 = call float @dx.op.unary.f32(i32 7, float %343)  ; Saturate(value)
  %347 = call float @dx.op.unary.f32(i32 7, float %345)  ; Saturate(value)
  %348 = fmul fast float %346, %312
  %349 = fmul fast float %347, %312
  %350 = call float @dx.op.binary.f32(i32 35, float %348, float %314)  ; FMax(a,b)
  %351 = fcmp fast olt float %350, %349
  br i1 %351, label %352, label %510, !dx.controlflow.hints !61

; <label>:352                                     ; preds = %216
  %353 = extractvalue %dx.types.ResRet.f32 %256, 3
  %354 = bitcast float %353 to i32
  %355 = mul i32 %354, 9
  %356 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %357 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %356, i32 %355, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %358 = extractvalue %dx.types.ResRet.f32 %357, 0
  %359 = bitcast float %358 to i32
  %360 = lshr i32 %359, 30
  %361 = mul nuw nsw i32 %360, 3
  %362 = add i32 %355, -3
  %363 = add i32 %362, %361
  %364 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %356, i32 %363, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %365 = extractvalue %dx.types.ResRet.f32 %364, 0
  %366 = extractvalue %dx.types.ResRet.f32 %364, 1
  %367 = bitcast float %365 to i32
  %368 = bitcast float %366 to i32
  %369 = add i32 %363, 1
  %370 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %356, i32 %369, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %371 = extractvalue %dx.types.ResRet.f32 %370, 0
  %372 = extractvalue %dx.types.ResRet.f32 %370, 1
  %373 = extractvalue %dx.types.ResRet.f32 %370, 2
  %374 = extractvalue %dx.types.ResRet.f32 %370, 3
  %375 = add i32 %363, 2
  %376 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %356, i32 %375, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %377 = extractvalue %dx.types.ResRet.f32 %376, 0
  %378 = extractvalue %dx.types.ResRet.f32 %376, 1
  %379 = extractvalue %dx.types.ResRet.f32 %376, 2
  %380 = extractvalue %dx.types.ResRet.f32 %376, 3
  %381 = and i32 %367, 1023
  %382 = lshr i32 %367, 10
  %383 = and i32 %382, 1023
  br label %384

; <label>:384                                     ; preds = %484, %352
  %385 = phi float [ %350, %352 ], [ %481, %484 ]
  %386 = phi i32 [ 0, %352 ], [ %485, %484 ]
  %387 = phi float [ 0.000000e+00, %352 ], [ %468, %484 ]
  %388 = fmul fast float %385, %315
  %389 = fmul fast float %385, %316
  %390 = fmul fast float %385, %317
  %391 = fadd fast float %388, %286
  %392 = fadd fast float %389, %290
  %393 = fadd fast float %390, %294
  %394 = fmul fast float %391, %371
  %395 = fmul fast float %392, %372
  %396 = fmul fast float %393, %373
  %397 = fadd fast float %394, %377
  %398 = fadd fast float %395, %378
  %399 = fadd fast float %396, %379
  %400 = fptosi float %397 to i32
  %401 = fptosi float %398 to i32
  %402 = fptosi float %399 to i32
  %403 = mul i32 %402, %383
  %404 = add i32 %403, %401
  %405 = mul i32 %404, %381
  %406 = add i32 %400, %368
  %407 = add i32 %406, %405
  %408 = shl i32 %407, 2
  %409 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %410 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %409, i32 %408, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %411 = extractvalue %dx.types.ResRet.i32 %410, 0
  %412 = icmp eq i32 %411, -1
  br i1 %412, label %465, label %413

; <label>:413                                     ; preds = %384
  %414 = sitofp i32 %400 to float
  %415 = sitofp i32 %401 to float
  %416 = sitofp i32 %402 to float
  %417 = fsub fast float %397, %414
  %418 = fsub fast float %398, %415
  %419 = fsub fast float %399, %416
  %420 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %421 = extractvalue %dx.types.CBufRet.i32 %420, 0
  %422 = and i32 %421, %411
  %423 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %424 = extractvalue %dx.types.CBufRet.i32 %423, 0
  %425 = and i32 %424, 31
  %426 = lshr i32 %411, %425
  %427 = extractvalue %dx.types.CBufRet.i32 %420, 1
  %428 = and i32 %426, %427
  %429 = extractvalue %dx.types.CBufRet.i32 %423, 1
  %430 = add i32 %429, %424
  %431 = and i32 %430, 31
  %432 = lshr i32 %411, %431
  %433 = uitofp i32 %422 to float
  %434 = uitofp i32 %428 to float
  %435 = uitofp i32 %432 to float
  %436 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %437 = extractvalue %dx.types.CBufRet.f32 %436, 0
  %438 = extractvalue %dx.types.CBufRet.f32 %436, 1
  %439 = extractvalue %dx.types.CBufRet.f32 %436, 2
  %440 = fmul fast float %437, %433
  %441 = fmul fast float %434, %438
  %442 = fmul fast float %435, %439
  %443 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %444 = extractvalue %dx.types.CBufRet.f32 %443, 0
  %445 = extractvalue %dx.types.CBufRet.f32 %443, 1
  %446 = extractvalue %dx.types.CBufRet.f32 %443, 2
  %447 = fmul fast float %444, %417
  %448 = fmul fast float %445, %418
  %449 = fmul fast float %446, %419
  %450 = fadd fast float %447, %440
  %451 = fadd fast float %448, %441
  %452 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %453 = extractvalue %dx.types.CBufRet.f32 %452, 0
  %454 = extractvalue %dx.types.CBufRet.f32 %452, 1
  %455 = extractvalue %dx.types.CBufRet.f32 %452, 2
  %456 = fadd fast float %450, %453
  %457 = fadd fast float %451, %454
  %458 = fadd fast float %455, %449
  %459 = fadd fast float %458, %442
  %460 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %461 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %462 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %460, %dx.types.Handle %461, float %456, float %457, float %459, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %463 = extractvalue %dx.types.ResRet.f32 %462, 0
  %464 = fmul fast float %463, %374
  br label %465

; <label>:465                                     ; preds = %413, %384
  %466 = phi float [ %464, %413 ], [ %374, %384 ]
  %467 = fadd float %380, %466
  %468 = call float @dx.op.binary.f32(i32 35, float %467, float %387)  ; FMax(a,b)
  %469 = fmul fast float %254, 2.000000e+00
  %470 = fdiv fast float %468, %469
  %471 = call float @dx.op.unary.f32(i32 7, float %470)  ; Saturate(value)
  %472 = fmul fast float %471, %254
  %473 = fcmp fast olt float %467, %472
  br i1 %473, label %474, label %479

; <label>:474                                     ; preds = %465
  %475 = fadd fast float %467, %385
  %476 = fsub fast float %475, %472
  %477 = call float @dx.op.binary.f32(i32 35, float %476, float %350)  ; FMax(a,b)
  %478 = call float @dx.op.binary.f32(i32 36, float %477, float %349)  ; FMin(a,b)
  br label %489

; <label>:479                                     ; preds = %465
  %480 = call float @dx.op.binary.f32(i32 35, float %467, float 9.765625e-04)  ; FMax(a,b)
  %481 = fadd fast float %480, %385
  %482 = fadd fast float %472, %349
  %483 = fcmp fast ogt float %481, %482
  br i1 %483, label %487, label %484

; <label>:484                                     ; preds = %479
  %485 = add nuw nsw i32 %386, 1
  %486 = icmp ult i32 %485, 64
  br i1 %486, label %384, label %487, !llvm.loop !62

; <label>:487                                     ; preds = %484, %479
  %488 = phi i32 [ %485, %484 ], [ %386, %479 ]
  br label %489

; <label>:489                                     ; preds = %487, %474
  %490 = phi float [ %478, %474 ], [ %481, %487 ]
  %491 = phi i32 [ %386, %474 ], [ %488, %487 ]
  %492 = phi i1 [ true, %474 ], [ false, %487 ]
  %493 = icmp eq i32 %491, 64
  %494 = or i1 %493, %492
  br i1 %494, label %495, label %510

; <label>:495                                     ; preds = %489
  %496 = fmul fast float %315, %257
  %497 = fmul fast float %496, %490
  %498 = fmul fast float %316, %258
  %499 = fmul fast float %498, %490
  %500 = fmul fast float %317, %259
  %501 = fmul fast float %500, %490
  %502 = fmul fast float %497, %497
  %503 = fmul fast float %499, %499
  %504 = fadd fast float %502, %503
  %505 = fmul fast float %501, %501
  %506 = fadd fast float %504, %505
  %507 = call float @dx.op.unary.f32(i32 24, float %506)  ; Sqrt(value)
  %508 = fcmp fast olt float %507, %219
  br i1 %508, label %509, label %510

; <label>:509                                     ; preds = %495
  br label %510

; <label>:510                                     ; preds = %509, %495, %489, %216
  %511 = phi i32 [ %223, %509 ], [ %218, %495 ], [ %218, %489 ], [ %218, %216 ]
  %512 = phi float [ %507, %509 ], [ %219, %495 ], [ %219, %489 ], [ %219, %216 ]
  %513 = add nuw i32 %217, 1
  %514 = icmp eq i32 %513, %208
  br i1 %514, label %515, label %216

; <label>:515                                     ; preds = %510
  br label %516

; <label>:516                                     ; preds = %515, %213
  %517 = phi i32 [ 0, %213 ], [ %511, %515 ]
  %518 = phi float [ %180, %213 ], [ %512, %515 ]
  %519 = fcmp fast olt float %518, %180
  br i1 %519, label %520, label %1610

; <label>:520                                     ; preds = %516
  %521 = mul i32 %517, 10
  %522 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %523 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %522, i32 %521, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %524 = extractvalue %dx.types.ResRet.f32 %523, 0
  %525 = extractvalue %dx.types.ResRet.f32 %523, 1
  %526 = extractvalue %dx.types.ResRet.f32 %523, 2
  %527 = or i32 %521, 1
  %528 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %522, i32 %527, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %529 = extractvalue %dx.types.ResRet.f32 %528, 0
  %530 = extractvalue %dx.types.ResRet.f32 %528, 1
  %531 = extractvalue %dx.types.ResRet.f32 %528, 2
  %532 = extractvalue %dx.types.ResRet.f32 %528, 3
  %533 = add i32 %521, 2
  %534 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %522, i32 %533, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %535 = extractvalue %dx.types.ResRet.f32 %534, 0
  %536 = extractvalue %dx.types.ResRet.f32 %534, 1
  %537 = extractvalue %dx.types.ResRet.f32 %534, 2
  %538 = extractvalue %dx.types.ResRet.f32 %534, 3
  %539 = add i32 %521, 3
  %540 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %522, i32 %539, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %541 = extractvalue %dx.types.ResRet.f32 %540, 0
  %542 = extractvalue %dx.types.ResRet.f32 %540, 1
  %543 = extractvalue %dx.types.ResRet.f32 %540, 2
  %544 = extractvalue %dx.types.ResRet.f32 %540, 3
  %545 = add i32 %521, 4
  %546 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %522, i32 %545, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %547 = extractvalue %dx.types.ResRet.f32 %546, 0
  %548 = extractvalue %dx.types.ResRet.f32 %546, 1
  %549 = extractvalue %dx.types.ResRet.f32 %546, 2
  %550 = add i32 %521, 5
  %551 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %522, i32 %550, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %552 = extractvalue %dx.types.ResRet.f32 %551, 3
  %553 = bitcast float %552 to i32
  %554 = add i32 %521, 9
  %555 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %522, i32 %554, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %556 = extractvalue %dx.types.ResRet.f32 %555, 3
  %557 = bitcast float %556 to i32
  %558 = fmul fast float %524, -2.097152e+06
  %559 = fmul fast float %525, -2.097152e+06
  %560 = fmul fast float %526, -2.097152e+06
  %561 = fmul fast float %529, %558
  %562 = call float @dx.op.tertiary.f32(i32 46, float %559, float %530, float %561)  ; FMad(a,b,c)
  %563 = call float @dx.op.tertiary.f32(i32 46, float %560, float %531, float %562)  ; FMad(a,b,c)
  %564 = fadd fast float %563, %532
  %565 = fmul fast float %535, %558
  %566 = call float @dx.op.tertiary.f32(i32 46, float %559, float %536, float %565)  ; FMad(a,b,c)
  %567 = call float @dx.op.tertiary.f32(i32 46, float %560, float %537, float %566)  ; FMad(a,b,c)
  %568 = fadd fast float %567, %538
  %569 = fmul fast float %541, %558
  %570 = call float @dx.op.tertiary.f32(i32 46, float %559, float %542, float %569)  ; FMad(a,b,c)
  %571 = call float @dx.op.tertiary.f32(i32 46, float %560, float %543, float %570)  ; FMad(a,b,c)
  %572 = fadd fast float %571, %544
  %573 = fmul fast float %518, %153
  %574 = fmul fast float %518, %154
  %575 = fmul fast float %518, %155
  %576 = fadd fast float %573, %167
  %577 = fadd fast float %574, %168
  %578 = fadd fast float %575, %169
  %579 = fmul fast float %529, %576
  %580 = call float @dx.op.tertiary.f32(i32 46, float %577, float %530, float %579)  ; FMad(a,b,c)
  %581 = call float @dx.op.tertiary.f32(i32 46, float %578, float %531, float %580)  ; FMad(a,b,c)
  %582 = fadd fast float %564, %581
  %583 = fmul fast float %535, %576
  %584 = call float @dx.op.tertiary.f32(i32 46, float %577, float %536, float %583)  ; FMad(a,b,c)
  %585 = call float @dx.op.tertiary.f32(i32 46, float %578, float %537, float %584)  ; FMad(a,b,c)
  %586 = fadd fast float %568, %585
  %587 = fmul fast float %541, %576
  %588 = call float @dx.op.tertiary.f32(i32 46, float %577, float %542, float %587)  ; FMad(a,b,c)
  %589 = call float @dx.op.tertiary.f32(i32 46, float %578, float %543, float %588)  ; FMad(a,b,c)
  %590 = fadd fast float %572, %589
  %591 = fsub fast float -0.000000e+00, %547
  %592 = fsub fast float -0.000000e+00, %548
  %593 = fsub fast float -0.000000e+00, %549
  %594 = call float @dx.op.binary.f32(i32 35, float %582, float %591)  ; FMax(a,b)
  %595 = call float @dx.op.binary.f32(i32 35, float %586, float %592)  ; FMax(a,b)
  %596 = call float @dx.op.binary.f32(i32 35, float %590, float %593)  ; FMax(a,b)
  %597 = call float @dx.op.binary.f32(i32 36, float %594, float %547)  ; FMin(a,b)
  %598 = call float @dx.op.binary.f32(i32 36, float %595, float %548)  ; FMin(a,b)
  %599 = call float @dx.op.binary.f32(i32 36, float %596, float %549)  ; FMin(a,b)
  %600 = mul i32 %557, 9
  %601 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %602 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %601, i32 %600, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %603 = extractvalue %dx.types.ResRet.f32 %602, 0
  %604 = bitcast float %603 to i32
  %605 = lshr i32 %604, 30
  %606 = mul nuw nsw i32 %605, 3
  %607 = add i32 %600, -3
  %608 = add i32 %607, %606
  %609 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %601, i32 %608, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %610 = extractvalue %dx.types.ResRet.f32 %609, 0
  %611 = extractvalue %dx.types.ResRet.f32 %609, 1
  %612 = bitcast float %610 to i32
  %613 = bitcast float %611 to i32
  %614 = add i32 %608, 1
  %615 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %601, i32 %614, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %616 = extractvalue %dx.types.ResRet.f32 %615, 0
  %617 = extractvalue %dx.types.ResRet.f32 %615, 1
  %618 = extractvalue %dx.types.ResRet.f32 %615, 2
  %619 = extractvalue %dx.types.ResRet.f32 %615, 3
  %620 = add i32 %608, 2
  %621 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %601, i32 %620, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %622 = extractvalue %dx.types.ResRet.f32 %621, 0
  %623 = extractvalue %dx.types.ResRet.f32 %621, 1
  %624 = extractvalue %dx.types.ResRet.f32 %621, 2
  %625 = and i32 %612, 1023
  %626 = lshr i32 %612, 10
  %627 = and i32 %626, 1023
  %628 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %629 = extractvalue %dx.types.CBufRet.f32 %628, 0
  %630 = extractvalue %dx.types.CBufRet.f32 %628, 1
  %631 = extractvalue %dx.types.CBufRet.f32 %628, 2
  %632 = fmul fast float %629, %616
  %633 = fmul fast float %630, %617
  %634 = fmul fast float %631, %618
  %635 = fdiv fast float 5.000000e-01, %632
  %636 = fdiv fast float 5.000000e-01, %633
  %637 = fdiv fast float 5.000000e-01, %634
  %638 = fadd fast float %635, %597
  %639 = fmul fast float %638, %616
  %640 = fmul fast float %617, %598
  %641 = fmul fast float %618, %599
  %642 = fadd fast float %639, %622
  %643 = fadd fast float %623, %640
  %644 = fadd fast float %624, %641
  %645 = fptosi float %642 to i32
  %646 = fptosi float %643 to i32
  %647 = fptosi float %644 to i32
  %648 = mul i32 %647, %627
  %649 = add i32 %648, %646
  %650 = mul i32 %649, %625
  %651 = add i32 %645, %613
  %652 = add i32 %651, %650
  %653 = shl i32 %652, 2
  %654 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %655 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %654, i32 %653, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %656 = extractvalue %dx.types.ResRet.i32 %655, 0
  %657 = icmp eq i32 %656, -1
  br i1 %657, label %710, label %658

; <label>:658                                     ; preds = %520
  %659 = sitofp i32 %645 to float
  %660 = sitofp i32 %646 to float
  %661 = sitofp i32 %647 to float
  %662 = fsub fast float %642, %659
  %663 = fsub fast float %643, %660
  %664 = fsub fast float %644, %661
  %665 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %666 = extractvalue %dx.types.CBufRet.i32 %665, 0
  %667 = and i32 %666, %656
  %668 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %669 = extractvalue %dx.types.CBufRet.i32 %668, 0
  %670 = and i32 %669, 31
  %671 = lshr i32 %656, %670
  %672 = extractvalue %dx.types.CBufRet.i32 %665, 1
  %673 = and i32 %671, %672
  %674 = extractvalue %dx.types.CBufRet.i32 %668, 1
  %675 = add i32 %674, %669
  %676 = and i32 %675, 31
  %677 = lshr i32 %656, %676
  %678 = uitofp i32 %667 to float
  %679 = uitofp i32 %673 to float
  %680 = uitofp i32 %677 to float
  %681 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %682 = extractvalue %dx.types.CBufRet.f32 %681, 0
  %683 = extractvalue %dx.types.CBufRet.f32 %681, 1
  %684 = extractvalue %dx.types.CBufRet.f32 %681, 2
  %685 = fmul fast float %682, %678
  %686 = fmul fast float %679, %683
  %687 = fmul fast float %680, %684
  %688 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %689 = extractvalue %dx.types.CBufRet.f32 %688, 0
  %690 = extractvalue %dx.types.CBufRet.f32 %688, 1
  %691 = extractvalue %dx.types.CBufRet.f32 %688, 2
  %692 = fmul fast float %689, %662
  %693 = fmul fast float %690, %663
  %694 = fmul fast float %691, %664
  %695 = fadd fast float %692, %685
  %696 = fadd fast float %693, %686
  %697 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %698 = extractvalue %dx.types.CBufRet.f32 %697, 0
  %699 = extractvalue %dx.types.CBufRet.f32 %697, 1
  %700 = extractvalue %dx.types.CBufRet.f32 %697, 2
  %701 = fadd fast float %695, %698
  %702 = fadd fast float %696, %699
  %703 = fadd fast float %700, %694
  %704 = fadd fast float %703, %687
  %705 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %707 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %705, %dx.types.Handle %706, float %701, float %702, float %704, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %708 = extractvalue %dx.types.ResRet.f32 %707, 0
  %709 = fmul fast float %708, %619
  br label %710

; <label>:710                                     ; preds = %658, %520
  %711 = phi float [ %709, %658 ], [ %619, %520 ]
  %712 = fsub fast float %597, %635
  %713 = fmul fast float %712, %616
  %714 = fadd fast float %713, %622
  %715 = fptosi float %714 to i32
  %716 = add i32 %715, %613
  %717 = add i32 %716, %650
  %718 = shl i32 %717, 2
  %719 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %654, i32 %718, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %720 = extractvalue %dx.types.ResRet.i32 %719, 0
  %721 = icmp eq i32 %720, -1
  br i1 %721, label %774, label %722

; <label>:722                                     ; preds = %710
  %723 = sitofp i32 %715 to float
  %724 = sitofp i32 %646 to float
  %725 = sitofp i32 %647 to float
  %726 = fsub fast float %714, %723
  %727 = fsub fast float %643, %724
  %728 = fsub fast float %644, %725
  %729 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %730 = extractvalue %dx.types.CBufRet.i32 %729, 0
  %731 = and i32 %730, %720
  %732 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %733 = extractvalue %dx.types.CBufRet.i32 %732, 0
  %734 = and i32 %733, 31
  %735 = lshr i32 %720, %734
  %736 = extractvalue %dx.types.CBufRet.i32 %729, 1
  %737 = and i32 %735, %736
  %738 = extractvalue %dx.types.CBufRet.i32 %732, 1
  %739 = add i32 %738, %733
  %740 = and i32 %739, 31
  %741 = lshr i32 %720, %740
  %742 = uitofp i32 %731 to float
  %743 = uitofp i32 %737 to float
  %744 = uitofp i32 %741 to float
  %745 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %746 = extractvalue %dx.types.CBufRet.f32 %745, 0
  %747 = extractvalue %dx.types.CBufRet.f32 %745, 1
  %748 = extractvalue %dx.types.CBufRet.f32 %745, 2
  %749 = fmul fast float %746, %742
  %750 = fmul fast float %743, %747
  %751 = fmul fast float %744, %748
  %752 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %753 = extractvalue %dx.types.CBufRet.f32 %752, 0
  %754 = extractvalue %dx.types.CBufRet.f32 %752, 1
  %755 = extractvalue %dx.types.CBufRet.f32 %752, 2
  %756 = fmul fast float %753, %726
  %757 = fmul fast float %754, %727
  %758 = fmul fast float %755, %728
  %759 = fadd fast float %756, %749
  %760 = fadd fast float %757, %750
  %761 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %762 = extractvalue %dx.types.CBufRet.f32 %761, 0
  %763 = extractvalue %dx.types.CBufRet.f32 %761, 1
  %764 = extractvalue %dx.types.CBufRet.f32 %761, 2
  %765 = fadd fast float %759, %762
  %766 = fadd fast float %760, %763
  %767 = fadd fast float %764, %758
  %768 = fadd fast float %767, %751
  %769 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %770 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %771 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %769, %dx.types.Handle %770, float %765, float %766, float %768, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %772 = extractvalue %dx.types.ResRet.f32 %771, 0
  %773 = fmul fast float %772, %619
  br label %774

; <label>:774                                     ; preds = %722, %710
  %775 = phi float [ %773, %722 ], [ %619, %710 ]
  %776 = fadd fast float %636, %598
  %777 = fmul fast float %616, %597
  %778 = fmul fast float %776, %617
  %779 = fadd fast float %622, %777
  %780 = fadd fast float %778, %623
  %781 = fptosi float %779 to i32
  %782 = fptosi float %780 to i32
  %783 = add i32 %782, %648
  %784 = mul i32 %783, %625
  %785 = add i32 %781, %613
  %786 = add i32 %785, %784
  %787 = shl i32 %786, 2
  %788 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %654, i32 %787, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %789 = extractvalue %dx.types.ResRet.i32 %788, 0
  %790 = icmp eq i32 %789, -1
  br i1 %790, label %843, label %791

; <label>:791                                     ; preds = %774
  %792 = sitofp i32 %781 to float
  %793 = sitofp i32 %782 to float
  %794 = sitofp i32 %647 to float
  %795 = fsub fast float %779, %792
  %796 = fsub fast float %780, %793
  %797 = fsub fast float %644, %794
  %798 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %799 = extractvalue %dx.types.CBufRet.i32 %798, 0
  %800 = and i32 %799, %789
  %801 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %802 = extractvalue %dx.types.CBufRet.i32 %801, 0
  %803 = and i32 %802, 31
  %804 = lshr i32 %789, %803
  %805 = extractvalue %dx.types.CBufRet.i32 %798, 1
  %806 = and i32 %804, %805
  %807 = extractvalue %dx.types.CBufRet.i32 %801, 1
  %808 = add i32 %807, %802
  %809 = and i32 %808, 31
  %810 = lshr i32 %789, %809
  %811 = uitofp i32 %800 to float
  %812 = uitofp i32 %806 to float
  %813 = uitofp i32 %810 to float
  %814 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %815 = extractvalue %dx.types.CBufRet.f32 %814, 0
  %816 = extractvalue %dx.types.CBufRet.f32 %814, 1
  %817 = extractvalue %dx.types.CBufRet.f32 %814, 2
  %818 = fmul fast float %815, %811
  %819 = fmul fast float %812, %816
  %820 = fmul fast float %813, %817
  %821 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %822 = extractvalue %dx.types.CBufRet.f32 %821, 0
  %823 = extractvalue %dx.types.CBufRet.f32 %821, 1
  %824 = extractvalue %dx.types.CBufRet.f32 %821, 2
  %825 = fmul fast float %822, %795
  %826 = fmul fast float %823, %796
  %827 = fmul fast float %824, %797
  %828 = fadd fast float %825, %818
  %829 = fadd fast float %826, %819
  %830 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %831 = extractvalue %dx.types.CBufRet.f32 %830, 0
  %832 = extractvalue %dx.types.CBufRet.f32 %830, 1
  %833 = extractvalue %dx.types.CBufRet.f32 %830, 2
  %834 = fadd fast float %828, %831
  %835 = fadd fast float %829, %832
  %836 = fadd fast float %833, %827
  %837 = fadd fast float %836, %820
  %838 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %839 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %840 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %838, %dx.types.Handle %839, float %834, float %835, float %837, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %841 = extractvalue %dx.types.ResRet.f32 %840, 0
  %842 = fmul fast float %841, %619
  br label %843

; <label>:843                                     ; preds = %791, %774
  %844 = phi float [ %842, %791 ], [ %619, %774 ]
  %845 = fsub fast float %598, %636
  %846 = fmul fast float %845, %617
  %847 = fadd fast float %846, %623
  %848 = fptosi float %847 to i32
  %849 = add i32 %848, %648
  %850 = mul i32 %849, %625
  %851 = add i32 %785, %850
  %852 = shl i32 %851, 2
  %853 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %654, i32 %852, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %854 = extractvalue %dx.types.ResRet.i32 %853, 0
  %855 = icmp eq i32 %854, -1
  br i1 %855, label %908, label %856

; <label>:856                                     ; preds = %843
  %857 = sitofp i32 %781 to float
  %858 = sitofp i32 %848 to float
  %859 = sitofp i32 %647 to float
  %860 = fsub fast float %779, %857
  %861 = fsub fast float %847, %858
  %862 = fsub fast float %644, %859
  %863 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %864 = extractvalue %dx.types.CBufRet.i32 %863, 0
  %865 = and i32 %864, %854
  %866 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %867 = extractvalue %dx.types.CBufRet.i32 %866, 0
  %868 = and i32 %867, 31
  %869 = lshr i32 %854, %868
  %870 = extractvalue %dx.types.CBufRet.i32 %863, 1
  %871 = and i32 %869, %870
  %872 = extractvalue %dx.types.CBufRet.i32 %866, 1
  %873 = add i32 %872, %867
  %874 = and i32 %873, 31
  %875 = lshr i32 %854, %874
  %876 = uitofp i32 %865 to float
  %877 = uitofp i32 %871 to float
  %878 = uitofp i32 %875 to float
  %879 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %880 = extractvalue %dx.types.CBufRet.f32 %879, 0
  %881 = extractvalue %dx.types.CBufRet.f32 %879, 1
  %882 = extractvalue %dx.types.CBufRet.f32 %879, 2
  %883 = fmul fast float %880, %876
  %884 = fmul fast float %877, %881
  %885 = fmul fast float %878, %882
  %886 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %887 = extractvalue %dx.types.CBufRet.f32 %886, 0
  %888 = extractvalue %dx.types.CBufRet.f32 %886, 1
  %889 = extractvalue %dx.types.CBufRet.f32 %886, 2
  %890 = fmul fast float %887, %860
  %891 = fmul fast float %888, %861
  %892 = fmul fast float %889, %862
  %893 = fadd fast float %890, %883
  %894 = fadd fast float %891, %884
  %895 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %896 = extractvalue %dx.types.CBufRet.f32 %895, 0
  %897 = extractvalue %dx.types.CBufRet.f32 %895, 1
  %898 = extractvalue %dx.types.CBufRet.f32 %895, 2
  %899 = fadd fast float %893, %896
  %900 = fadd fast float %894, %897
  %901 = fadd fast float %898, %892
  %902 = fadd fast float %901, %885
  %903 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %904 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %905 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %903, %dx.types.Handle %904, float %899, float %900, float %902, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %906 = extractvalue %dx.types.ResRet.f32 %905, 0
  %907 = fmul fast float %906, %619
  br label %908

; <label>:908                                     ; preds = %856, %843
  %909 = phi float [ %907, %856 ], [ %619, %843 ]
  %910 = fadd fast float %637, %599
  %911 = fmul fast float %910, %618
  %912 = fadd fast float %911, %624
  %913 = fptosi float %912 to i32
  %914 = mul i32 %913, %627
  %915 = add i32 %914, %646
  %916 = mul i32 %915, %625
  %917 = add i32 %785, %916
  %918 = shl i32 %917, 2
  %919 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %654, i32 %918, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %920 = extractvalue %dx.types.ResRet.i32 %919, 0
  %921 = icmp eq i32 %920, -1
  br i1 %921, label %974, label %922

; <label>:922                                     ; preds = %908
  %923 = sitofp i32 %781 to float
  %924 = sitofp i32 %646 to float
  %925 = sitofp i32 %913 to float
  %926 = fsub fast float %779, %923
  %927 = fsub fast float %643, %924
  %928 = fsub fast float %912, %925
  %929 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %930 = extractvalue %dx.types.CBufRet.i32 %929, 0
  %931 = and i32 %930, %920
  %932 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %933 = extractvalue %dx.types.CBufRet.i32 %932, 0
  %934 = and i32 %933, 31
  %935 = lshr i32 %920, %934
  %936 = extractvalue %dx.types.CBufRet.i32 %929, 1
  %937 = and i32 %935, %936
  %938 = extractvalue %dx.types.CBufRet.i32 %932, 1
  %939 = add i32 %938, %933
  %940 = and i32 %939, 31
  %941 = lshr i32 %920, %940
  %942 = uitofp i32 %931 to float
  %943 = uitofp i32 %937 to float
  %944 = uitofp i32 %941 to float
  %945 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %946 = extractvalue %dx.types.CBufRet.f32 %945, 0
  %947 = extractvalue %dx.types.CBufRet.f32 %945, 1
  %948 = extractvalue %dx.types.CBufRet.f32 %945, 2
  %949 = fmul fast float %946, %942
  %950 = fmul fast float %943, %947
  %951 = fmul fast float %944, %948
  %952 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %953 = extractvalue %dx.types.CBufRet.f32 %952, 0
  %954 = extractvalue %dx.types.CBufRet.f32 %952, 1
  %955 = extractvalue %dx.types.CBufRet.f32 %952, 2
  %956 = fmul fast float %953, %926
  %957 = fmul fast float %954, %927
  %958 = fmul fast float %955, %928
  %959 = fadd fast float %956, %949
  %960 = fadd fast float %957, %950
  %961 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %962 = extractvalue %dx.types.CBufRet.f32 %961, 0
  %963 = extractvalue %dx.types.CBufRet.f32 %961, 1
  %964 = extractvalue %dx.types.CBufRet.f32 %961, 2
  %965 = fadd fast float %959, %962
  %966 = fadd fast float %960, %963
  %967 = fadd fast float %964, %958
  %968 = fadd fast float %967, %951
  %969 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %970 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %971 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %969, %dx.types.Handle %970, float %965, float %966, float %968, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %972 = extractvalue %dx.types.ResRet.f32 %971, 0
  %973 = fmul fast float %972, %619
  br label %974

; <label>:974                                     ; preds = %922, %908
  %975 = phi float [ %973, %922 ], [ %619, %908 ]
  %976 = fsub fast float %599, %637
  %977 = fmul fast float %976, %618
  %978 = fadd fast float %977, %624
  %979 = fptosi float %978 to i32
  %980 = mul i32 %979, %627
  %981 = add i32 %980, %646
  %982 = mul i32 %981, %625
  %983 = add i32 %785, %982
  %984 = shl i32 %983, 2
  %985 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %654, i32 %984, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %986 = extractvalue %dx.types.ResRet.i32 %985, 0
  %987 = icmp eq i32 %986, -1
  br i1 %987, label %1040, label %988

; <label>:988                                     ; preds = %974
  %989 = sitofp i32 %781 to float
  %990 = sitofp i32 %646 to float
  %991 = sitofp i32 %979 to float
  %992 = fsub fast float %779, %989
  %993 = fsub fast float %643, %990
  %994 = fsub fast float %978, %991
  %995 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %996 = extractvalue %dx.types.CBufRet.i32 %995, 0
  %997 = and i32 %996, %986
  %998 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %999 = extractvalue %dx.types.CBufRet.i32 %998, 0
  %1000 = and i32 %999, 31
  %1001 = lshr i32 %986, %1000
  %1002 = extractvalue %dx.types.CBufRet.i32 %995, 1
  %1003 = and i32 %1001, %1002
  %1004 = extractvalue %dx.types.CBufRet.i32 %998, 1
  %1005 = add i32 %1004, %999
  %1006 = and i32 %1005, 31
  %1007 = lshr i32 %986, %1006
  %1008 = uitofp i32 %997 to float
  %1009 = uitofp i32 %1003 to float
  %1010 = uitofp i32 %1007 to float
  %1011 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1012 = extractvalue %dx.types.CBufRet.f32 %1011, 0
  %1013 = extractvalue %dx.types.CBufRet.f32 %1011, 1
  %1014 = extractvalue %dx.types.CBufRet.f32 %1011, 2
  %1015 = fmul fast float %1012, %1008
  %1016 = fmul fast float %1009, %1013
  %1017 = fmul fast float %1010, %1014
  %1018 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1019 = extractvalue %dx.types.CBufRet.f32 %1018, 0
  %1020 = extractvalue %dx.types.CBufRet.f32 %1018, 1
  %1021 = extractvalue %dx.types.CBufRet.f32 %1018, 2
  %1022 = fmul fast float %1019, %992
  %1023 = fmul fast float %1020, %993
  %1024 = fmul fast float %1021, %994
  %1025 = fadd fast float %1022, %1015
  %1026 = fadd fast float %1023, %1016
  %1027 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1028 = extractvalue %dx.types.CBufRet.f32 %1027, 0
  %1029 = extractvalue %dx.types.CBufRet.f32 %1027, 1
  %1030 = extractvalue %dx.types.CBufRet.f32 %1027, 2
  %1031 = fadd fast float %1025, %1028
  %1032 = fadd fast float %1026, %1029
  %1033 = fadd fast float %1030, %1024
  %1034 = fadd fast float %1033, %1017
  %1035 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1036 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1037 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1035, %dx.types.Handle %1036, float %1031, float %1032, float %1034, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1038 = extractvalue %dx.types.ResRet.f32 %1037, 0
  %1039 = fmul fast float %1038, %619
  br label %1040

; <label>:1040                                    ; preds = %988, %974
  %1041 = phi float [ %1039, %988 ], [ %619, %974 ]
  %1042 = fsub fast float %711, %775
  %1043 = fsub fast float %844, %909
  %1044 = fsub fast float %975, %1041
  %1045 = fmul fast float %1042, %1042
  %1046 = fmul fast float %1043, %1043
  %1047 = fadd fast float %1046, %1045
  %1048 = fmul fast float %1044, %1044
  %1049 = fadd fast float %1047, %1048
  %1050 = call float @dx.op.unary.f32(i32 24, float %1049)  ; Sqrt(value)
  %1051 = fcmp fast ogt float %1050, 0.000000e+00
  br i1 %1051, label %1052, label %1056

; <label>:1052                                    ; preds = %1040
  %1053 = fdiv fast float %1042, %1050
  %1054 = fdiv fast float %1043, %1050
  %1055 = fdiv fast float %1044, %1050
  br label %1056

; <label>:1056                                    ; preds = %1052, %1040
  %1057 = phi float [ %1053, %1052 ], [ 0.000000e+00, %1040 ]
  %1058 = phi float [ %1054, %1052 ], [ 0.000000e+00, %1040 ]
  %1059 = phi float [ %1055, %1052 ], [ 0.000000e+00, %1040 ]
  %1060 = fmul fast float %1057, %529
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %1058, float %535, float %1060)  ; FMad(a,b,c)
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %1059, float %541, float %1061)  ; FMad(a,b,c)
  %1063 = fmul fast float %1057, %530
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %1058, float %536, float %1063)  ; FMad(a,b,c)
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %1059, float %542, float %1064)  ; FMad(a,b,c)
  %1066 = fmul fast float %1057, %531
  %1067 = call float @dx.op.tertiary.f32(i32 46, float %1058, float %537, float %1066)  ; FMad(a,b,c)
  %1068 = call float @dx.op.tertiary.f32(i32 46, float %1059, float %543, float %1067)  ; FMad(a,b,c)
  %1069 = fmul fast float %1062, %1062
  %1070 = fmul fast float %1065, %1065
  %1071 = fadd fast float %1070, %1069
  %1072 = fmul fast float %1068, %1068
  %1073 = fadd fast float %1071, %1072
  %1074 = call float @dx.op.unary.f32(i32 24, float %1073)  ; Sqrt(value)
  %1075 = fcmp fast ogt float %1074, 0.000000e+00
  br i1 %1075, label %1076, label %1080

; <label>:1076                                    ; preds = %1056
  %1077 = fdiv fast float %1062, %1074
  %1078 = fdiv fast float %1065, %1074
  %1079 = fdiv fast float %1068, %1074
  br label %1080

; <label>:1080                                    ; preds = %1076, %1056
  %1081 = phi float [ %1077, %1076 ], [ 0.000000e+00, %1056 ]
  %1082 = phi float [ %1078, %1076 ], [ 0.000000e+00, %1056 ]
  %1083 = phi float [ %1079, %1076 ], [ 0.000000e+00, %1056 ]
  %1084 = shl i32 %553, 2
  %1085 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1086 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1085, i32 %1084, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1087 = extractvalue %dx.types.ResRet.i32 %1086, 0
  %1088 = fmul fast float %518, %175
  %1089 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1090 = extractvalue %dx.types.CBufRet.i32 %1089, 1
  %1091 = icmp ult i32 %1087, %1090
  br i1 %1091, label %1092, label %1571

; <label>:1092                                    ; preds = %1080
  %1093 = mul i32 %1087, 6
  %1094 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1095 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1094, i32 %1093, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1096 = extractvalue %dx.types.ResRet.f32 %1095, 0
  %1097 = extractvalue %dx.types.ResRet.f32 %1095, 1
  %1098 = extractvalue %dx.types.ResRet.f32 %1095, 2
  %1099 = or i32 %1093, 1
  %1100 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1094, i32 %1099, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1101 = extractvalue %dx.types.ResRet.f32 %1100, 0
  %1102 = extractvalue %dx.types.ResRet.f32 %1100, 1
  %1103 = extractvalue %dx.types.ResRet.f32 %1100, 2
  %1104 = extractvalue %dx.types.ResRet.f32 %1100, 3
  %1105 = add i32 %1093, 2
  %1106 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1094, i32 %1105, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1107 = extractvalue %dx.types.ResRet.f32 %1106, 0
  %1108 = extractvalue %dx.types.ResRet.f32 %1106, 1
  %1109 = extractvalue %dx.types.ResRet.f32 %1106, 2
  %1110 = extractvalue %dx.types.ResRet.f32 %1106, 3
  %1111 = add i32 %1093, 3
  %1112 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1094, i32 %1111, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1113 = extractvalue %dx.types.ResRet.f32 %1112, 0
  %1114 = extractvalue %dx.types.ResRet.f32 %1112, 1
  %1115 = extractvalue %dx.types.ResRet.f32 %1112, 2
  %1116 = extractvalue %dx.types.ResRet.f32 %1112, 3
  %1117 = fmul fast float %1096, 2.097152e+06
  %1118 = fmul fast float %1097, 2.097152e+06
  %1119 = fmul fast float %1098, 2.097152e+06
  %1120 = add i32 %1093, 4
  %1121 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1094, i32 %1120, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1122 = extractvalue %dx.types.ResRet.f32 %1121, 0
  %1123 = extractvalue %dx.types.ResRet.f32 %1121, 1
  %1124 = extractvalue %dx.types.ResRet.f32 %1121, 2
  %1125 = extractvalue %dx.types.ResRet.f32 %1121, 3
  %1126 = bitcast float %1122 to i32
  %1127 = bitcast float %1123 to i32
  %1128 = add i32 %1093, 5
  %1129 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1094, i32 %1128, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1130 = extractvalue %dx.types.ResRet.f32 %1129, 0
  %1131 = extractvalue %dx.types.ResRet.f32 %1129, 1
  %1132 = extractvalue %dx.types.ResRet.f32 %1129, 2
  %1133 = extractvalue %dx.types.ResRet.f32 %1129, 3
  %1134 = and i32 %1127, 65536
  %1135 = icmp ne i32 %1134, 0
  %1136 = and i32 %1127, 131072
  %1137 = icmp ne i32 %1136, 0
  %1138 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 0
  %1139 = bitcast i32* %1138 to float*
  store float %1124, float* %1139, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1140 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 1
  %1141 = bitcast i32* %1140 to float*
  store float %1125, float* %1141, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1142 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 2
  %1143 = bitcast i32* %1142 to float*
  store float %1130, float* %1143, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1144 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 3
  %1145 = bitcast i32* %1144 to float*
  store float %1131, float* %1145, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1146 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 4
  %1147 = bitcast i32* %1146 to float*
  store float %1132, float* %1147, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1148 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 5
  %1149 = bitcast i32* %1148 to float*
  store float %1133, float* %1149, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1150 = select i1 %1137, float 7.000000e+01, float 2.000000e+01
  %1151 = fsub fast float %576, %1117
  %1152 = fsub fast float %1151, %1104
  %1153 = fsub fast float %577, %1118
  %1154 = fsub fast float %1153, %1110
  %1155 = fsub fast float %578, %1119
  %1156 = fsub fast float %1155, %1116
  %1157 = fmul fast float %1152, %1101
  %1158 = call float @dx.op.tertiary.f32(i32 46, float %1154, float %1107, float %1157)  ; FMad(a,b,c)
  %1159 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %1113, float %1158)  ; FMad(a,b,c)
  %1160 = fmul fast float %1152, %1102
  %1161 = call float @dx.op.tertiary.f32(i32 46, float %1154, float %1108, float %1160)  ; FMad(a,b,c)
  %1162 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %1114, float %1161)  ; FMad(a,b,c)
  %1163 = fmul fast float %1152, %1103
  %1164 = call float @dx.op.tertiary.f32(i32 46, float %1154, float %1109, float %1163)  ; FMad(a,b,c)
  %1165 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %1115, float %1164)  ; FMad(a,b,c)
  %1166 = fmul fast float %1101, %1081
  %1167 = call float @dx.op.tertiary.f32(i32 46, float %1082, float %1107, float %1166)  ; FMad(a,b,c)
  %1168 = call float @dx.op.tertiary.f32(i32 46, float %1083, float %1113, float %1167)  ; FMad(a,b,c)
  %1169 = fmul fast float %1102, %1081
  %1170 = call float @dx.op.tertiary.f32(i32 46, float %1082, float %1108, float %1169)  ; FMad(a,b,c)
  %1171 = call float @dx.op.tertiary.f32(i32 46, float %1083, float %1114, float %1170)  ; FMad(a,b,c)
  %1172 = fmul fast float %1103, %1081
  %1173 = call float @dx.op.tertiary.f32(i32 46, float %1082, float %1109, float %1172)  ; FMad(a,b,c)
  %1174 = call float @dx.op.tertiary.f32(i32 46, float %1083, float %1115, float %1173)  ; FMad(a,b,c)
  %1175 = fmul fast float %1168, %1168
  %1176 = fmul fast float %1171, %1171
  %1177 = fmul fast float %1174, %1174
  %1178 = fcmp fast ogt float %1175, 0.000000e+00
  br i1 %1178, label %1179, label %1184

; <label>:1179                                    ; preds = %1092
  %1180 = fcmp uge float %1168, 0.000000e+00
  %1181 = zext i1 %1180 to i32
  %1182 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 %1181
  %1183 = load i32, i32* %1182, align 4, !tbaa !64, !noalias !71
  br label %1184

; <label>:1184                                    ; preds = %1179, %1092
  %1185 = phi i32 [ %1183, %1179 ], [ 0, %1092 ]
  %1186 = fcmp fast ogt float %1176, 0.000000e+00
  br i1 %1186, label %1187, label %1193

; <label>:1187                                    ; preds = %1184
  %1188 = fcmp fast olt float %1171, 0.000000e+00
  %1189 = select i1 %1188, i32 2, i32 3
  %1190 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 %1189
  %1191 = load i32, i32* %1190, align 4, !tbaa !64, !noalias !71
  %1192 = or i32 %1191, %1185
  br label %1193

; <label>:1193                                    ; preds = %1187, %1184
  %1194 = phi i32 [ %1192, %1187 ], [ %1185, %1184 ]
  %1195 = fcmp fast ogt float %1177, 0.000000e+00
  br i1 %1195, label %1196, label %1202

; <label>:1196                                    ; preds = %1193
  %1197 = fcmp fast olt float %1174, 0.000000e+00
  %1198 = select i1 %1197, i32 4, i32 5
  %1199 = getelementptr inbounds [6 x i32], [6 x i32]* %50, i32 0, i32 %1198
  %1200 = load i32, i32* %1199, align 4, !tbaa !64, !noalias !71
  %1201 = or i32 %1200, %1194
  br label %1202

; <label>:1202                                    ; preds = %1196, %1193
  %1203 = phi i32 [ %1201, %1196 ], [ %1194, %1193 ]
  %1204 = icmp eq i32 %1203, 0
  br i1 %1204, label %1249, label %1205

; <label>:1205                                    ; preds = %1202
  br label %1206

; <label>:1206                                    ; preds = %1206, %1205
  %1207 = phi i32 [ %1212, %1206 ], [ %1203, %1205 ]
  %1208 = phi i32 [ %1246, %1206 ], [ 0, %1205 ]
  %1209 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1207)  ; FirstbitLo(value)
  %1210 = and i32 %1209, 31
  %1211 = shl i32 1, %1210
  %1212 = xor i32 %1211, %1207
  %1213 = add i32 %1209, %1126
  %1214 = mul i32 %1213, 10
  %1215 = add i32 %1214, 6
  %1216 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1217 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1216, i32 %1215, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1218 = extractvalue %dx.types.ResRet.f32 %1217, 3
  %1219 = add i32 %1214, 7
  %1220 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1216, i32 %1219, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1221 = extractvalue %dx.types.ResRet.f32 %1220, 3
  %1222 = add i32 %1214, 8
  %1223 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1216, i32 %1222, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1224 = extractvalue %dx.types.ResRet.f32 %1223, 3
  %1225 = add i32 %1214, 9
  %1226 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1216, i32 %1225, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1227 = extractvalue %dx.types.ResRet.f32 %1226, 0
  %1228 = extractvalue %dx.types.ResRet.f32 %1226, 1
  %1229 = extractvalue %dx.types.ResRet.f32 %1226, 2
  %1230 = fsub fast float %1159, %1218
  %1231 = fsub fast float %1162, %1221
  %1232 = fsub fast float %1165, %1224
  %1233 = call float @dx.op.unary.f32(i32 6, float %1230)  ; FAbs(value)
  %1234 = call float @dx.op.unary.f32(i32 6, float %1231)  ; FAbs(value)
  %1235 = call float @dx.op.unary.f32(i32 6, float %1232)  ; FAbs(value)
  %1236 = fmul fast float %1150, 5.000000e-01
  %1237 = fadd fast float %1227, %1236
  %1238 = fadd fast float %1228, %1236
  %1239 = fadd fast float %1229, %1236
  %1240 = fcmp fast ole float %1233, %1237
  %1241 = fcmp fast ole float %1234, %1238
  %1242 = fcmp fast ole float %1235, %1239
  %1243 = and i1 %1240, %1241
  %1244 = and i1 %1243, %1242
  %1245 = select i1 %1244, i32 %1211, i32 0
  %1246 = or i32 %1245, %1208
  %1247 = icmp eq i32 %1207, %1211
  br i1 %1247, label %1248, label %1206

; <label>:1248                                    ; preds = %1206
  br label %1249

; <label>:1249                                    ; preds = %1248, %1202
  %1250 = phi i32 [ 0, %1202 ], [ %1246, %1248 ]
  %1251 = select i1 %1135, i32 1, i32 %1250
  %1252 = icmp eq i32 %1251, 0
  br i1 %1252, label %1571, label %1253

; <label>:1253                                    ; preds = %1249
  br label %1254

; <label>:1254                                    ; preds = %1277, %1253
  %1255 = phi float [ %1278, %1277 ], [ 0.000000e+00, %1253 ]
  %1256 = phi float [ %1279, %1277 ], [ 0.000000e+00, %1253 ]
  %1257 = phi float [ %1280, %1277 ], [ 0.000000e+00, %1253 ]
  %1258 = phi float [ %1281, %1277 ], [ 0.000000e+00, %1253 ]
  %1259 = phi float [ %1282, %1277 ], [ 0.000000e+00, %1253 ]
  %1260 = phi i32 [ %1283, %1277 ], [ 0, %1253 ]
  %1261 = phi i32 [ %1284, %1277 ], [ 0, %1253 ]
  %1262 = phi i32 [ %1285, %1277 ], [ 0, %1253 ]
  %1263 = phi i32 [ %1267, %1277 ], [ %1251, %1253 ]
  %1264 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1263)  ; FirstbitLo(value)
  %1265 = and i32 %1264, 31
  %1266 = shl i32 1, %1265
  %1267 = xor i32 %1266, %1263
  %1268 = add i32 %1264, %1126
  %1269 = mul i32 %1268, 10
  %1270 = add i32 %1269, 4
  %1271 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1272 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1271, i32 %1270, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1273 = extractvalue %dx.types.ResRet.f32 %1272, 3
  %1274 = bitcast float %1273 to i32
  %1275 = and i32 %1274, 16777216
  %1276 = icmp eq i32 %1275, 0
  br i1 %1276, label %1277, label %1287

; <label>:1277                                    ; preds = %3336, %1569, %1537, %1506, %1344, %1291, %1287, %1254
  %1278 = phi float [ %1255, %1254 ], [ %3343, %1569 ], [ %1255, %1537 ], [ %1255, %3336 ], [ %1255, %1506 ], [ %1255, %1344 ], [ %1255, %1291 ], [ %1255, %1287 ]
  %1279 = phi float [ %1256, %1254 ], [ %1564, %1569 ], [ %1564, %1537 ], [ %1256, %3336 ], [ %1256, %1506 ], [ %1256, %1344 ], [ %1256, %1291 ], [ %1256, %1287 ]
  %1280 = phi float [ %1257, %1254 ], [ %1565, %1569 ], [ %1565, %1537 ], [ %1257, %3336 ], [ %1257, %1506 ], [ %1257, %1344 ], [ %1257, %1291 ], [ %1257, %1287 ]
  %1281 = phi float [ %1258, %1254 ], [ %1566, %1569 ], [ %1566, %1537 ], [ %1258, %3336 ], [ %1258, %1506 ], [ %1258, %1344 ], [ %1258, %1291 ], [ %1258, %1287 ]
  %1282 = phi float [ %1259, %1254 ], [ %1567, %1569 ], [ %1567, %1537 ], [ %1259, %3336 ], [ %1259, %1506 ], [ %1259, %1344 ], [ %1259, %1291 ], [ %1259, %1287 ]
  %1283 = phi i32 [ %1260, %1254 ], [ %1481, %1569 ], [ %1260, %1537 ], [ %1260, %3336 ], [ %1260, %1506 ], [ %1260, %1344 ], [ %1260, %1291 ], [ %1260, %1287 ]
  %1284 = phi i32 [ %1261, %1254 ], [ %1483, %1569 ], [ %1261, %1537 ], [ %1261, %3336 ], [ %1261, %1506 ], [ %1261, %1344 ], [ %1261, %1291 ], [ %1261, %1287 ]
  %1285 = phi i32 [ %1262, %1254 ], [ %1387, %1569 ], [ %1262, %1537 ], [ %1262, %3336 ], [ %1262, %1506 ], [ %1262, %1344 ], [ %1262, %1291 ], [ %1262, %1287 ]
  %1286 = icmp eq i32 %1263, %1266
  br i1 %1286, label %1570, label %1254

; <label>:1287                                    ; preds = %1254
  %1288 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1289 = extractvalue %dx.types.CBufRet.i32 %1288, 0
  %1290 = icmp ult i32 %1268, %1289
  br i1 %1290, label %1291, label %1277

; <label>:1291                                    ; preds = %1287
  %1292 = extractvalue %dx.types.ResRet.f32 %1272, 0
  %1293 = extractvalue %dx.types.ResRet.f32 %1272, 1
  %1294 = extractvalue %dx.types.ResRet.f32 %1272, 2
  %1295 = add i32 %1269, 5
  %1296 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1271, i32 %1295, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1297 = add i32 %1269, 6
  %1298 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1271, i32 %1297, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1299 = add i32 %1269, 7
  %1300 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1271, i32 %1299, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1301 = add i32 %1269, 8
  %1302 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1271, i32 %1301, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1303 = call float @dx.op.unary.f32(i32 6, float %1292)  ; FAbs(value)
  %1304 = call float @dx.op.unary.f32(i32 6, float %1293)  ; FAbs(value)
  %1305 = call float @dx.op.unary.f32(i32 6, float %1294)  ; FAbs(value)
  %1306 = lshr i32 %1274, 16
  %1307 = and i32 %1306, 15
  %1308 = extractvalue %dx.types.ResRet.f32 %1302, 3
  %1309 = extractvalue %dx.types.ResRet.f32 %1302, 2
  %1310 = extractvalue %dx.types.ResRet.f32 %1302, 1
  %1311 = extractvalue %dx.types.ResRet.f32 %1302, 0
  %1312 = extractvalue %dx.types.ResRet.f32 %1300, 3
  %1313 = extractvalue %dx.types.ResRet.f32 %1300, 2
  %1314 = extractvalue %dx.types.ResRet.f32 %1300, 1
  %1315 = extractvalue %dx.types.ResRet.f32 %1300, 0
  %1316 = extractvalue %dx.types.ResRet.f32 %1298, 3
  %1317 = extractvalue %dx.types.ResRet.f32 %1298, 2
  %1318 = extractvalue %dx.types.ResRet.f32 %1298, 1
  %1319 = extractvalue %dx.types.ResRet.f32 %1298, 0
  %1320 = fsub fast float %1159, %1316
  %1321 = fsub fast float %1162, %1312
  %1322 = fsub fast float %1165, %1308
  %1323 = fmul fast float %1320, %1319
  %1324 = call float @dx.op.tertiary.f32(i32 46, float %1321, float %1315, float %1323)  ; FMad(a,b,c)
  %1325 = call float @dx.op.tertiary.f32(i32 46, float %1322, float %1311, float %1324)  ; FMad(a,b,c)
  %1326 = fmul fast float %1320, %1318
  %1327 = call float @dx.op.tertiary.f32(i32 46, float %1321, float %1314, float %1326)  ; FMad(a,b,c)
  %1328 = call float @dx.op.tertiary.f32(i32 46, float %1322, float %1310, float %1327)  ; FMad(a,b,c)
  %1329 = fmul fast float %1320, %1317
  %1330 = call float @dx.op.tertiary.f32(i32 46, float %1321, float %1313, float %1329)  ; FMad(a,b,c)
  %1331 = call float @dx.op.tertiary.f32(i32 46, float %1322, float %1309, float %1330)  ; FMad(a,b,c)
  %1332 = call float @dx.op.unary.f32(i32 6, float %1325)  ; FAbs(value)
  %1333 = call float @dx.op.unary.f32(i32 6, float %1328)  ; FAbs(value)
  %1334 = call float @dx.op.unary.f32(i32 6, float %1331)  ; FAbs(value)
  %1335 = fmul fast float %1150, 5.000000e-01
  %1336 = fadd fast float %1303, %1335
  %1337 = fadd fast float %1304, %1335
  %1338 = fadd fast float %1305, %1335
  %1339 = fcmp fast ole float %1332, %1336
  %1340 = fcmp fast ole float %1333, %1337
  %1341 = fcmp fast ole float %1334, %1338
  %1342 = and i1 %1339, %1340
  %1343 = and i1 %1342, %1341
  br i1 %1343, label %1344, label %1277

; <label>:1344                                    ; preds = %1291
  %1345 = lshr i32 %1274, 8
  %1346 = and i32 %1345, 255
  %1347 = and i32 %1274, 255
  %1348 = extractvalue %dx.types.ResRet.f32 %1296, 3
  %1349 = extractvalue %dx.types.ResRet.f32 %1296, 2
  %1350 = extractvalue %dx.types.ResRet.f32 %1296, 1
  %1351 = extractvalue %dx.types.ResRet.f32 %1296, 0
  %1352 = fsub fast float -0.000000e+00, %1303
  %1353 = fsub fast float -0.000000e+00, %1304
  %1354 = call float @dx.op.binary.f32(i32 35, float %1325, float %1352)  ; FMax(a,b)
  %1355 = call float @dx.op.binary.f32(i32 35, float %1328, float %1353)  ; FMax(a,b)
  %1356 = call float @dx.op.binary.f32(i32 36, float %1354, float %1303)  ; FMin(a,b)
  %1357 = call float @dx.op.binary.f32(i32 36, float %1355, float %1304)  ; FMin(a,b)
  %1358 = fdiv fast float %1356, %1303
  %1359 = fdiv fast float %1357, %1304
  %1360 = fmul fast float %1358, 5.000000e-01
  %1361 = fmul fast float %1359, 5.000000e-01
  %1362 = fadd fast float %1360, 5.000000e-01
  %1363 = fsub fast float 5.000000e-01, %1361
  %1364 = call float @dx.op.unary.f32(i32 7, float %1362)  ; Saturate(value)
  %1365 = call float @dx.op.unary.f32(i32 7, float %1363)  ; Saturate(value)
  %1366 = call float @dx.op.binary.f32(i32 36, float %1364, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1367 = call float @dx.op.binary.f32(i32 36, float %1365, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1368 = select i1 %178, float %1349, float %1351
  %1369 = bitcast float %1368 to i32
  %1370 = and i32 %1369, 65535
  %1371 = lshr i32 %1369, 16
  %1372 = select i1 %178, float %1348, float %1350
  %1373 = bitcast float %1372 to i32
  %1374 = uitofp i32 %1370 to float
  %1375 = uitofp i32 %1371 to float
  %1376 = fmul fast float %1366, %1374
  %1377 = fmul fast float %1367, %1375
  %1378 = fptoui float %1376 to i32
  %1379 = fptoui float %1377 to i32
  %1380 = mul i32 %1379, %1370
  %1381 = add i32 %1378, %1373
  %1382 = add i32 %1381, %1380
  %1383 = shl i32 %1382, 3
  %1384 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1385 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1384, i32 %1383, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1386 = extractvalue %dx.types.ResRet.i32 %1385, 0
  %1387 = extractvalue %dx.types.ResRet.i32 %1385, 1
  %1388 = shl i32 %1386, 3
  %1389 = and i32 %1388, 32760
  %1390 = lshr i32 %1386, 9
  %1391 = and i32 %1390, 32760
  %1392 = lshr i32 %1386, 24
  %1393 = and i32 %1392, 15
  %1394 = lshr i32 %1386, 28
  %1395 = add nuw nsw i32 %1393, 25
  %1396 = add nuw nsw i32 %1394, 25
  %1397 = and i32 %1395, 31
  %1398 = and i32 %1396, 31
  %1399 = shl i32 1, %1397
  %1400 = shl i32 1, %1398
  %1401 = icmp ugt i32 %1393, 7
  %1402 = icmp slt i32 %1386, 0
  %1403 = select i1 %1401, i32 %1399, i32 1
  %1404 = select i1 %1402, i32 %1400, i32 1
  %1405 = uitofp i32 %1403 to float
  %1406 = uitofp i32 %1404 to float
  %1407 = fmul fast float %1405, %1366
  %1408 = fmul fast float %1406, %1367
  %1409 = fptoui float %1407 to i32
  %1410 = fptoui float %1408 to i32
  %1411 = shl i32 1, %1393
  %1412 = shl i32 1, %1394
  %1413 = call float @dx.op.unary.f32(i32 22, float %1407)  ; Frc(value)
  %1414 = call float @dx.op.unary.f32(i32 22, float %1408)  ; Frc(value)
  %1415 = icmp eq i32 %1409, 0
  %1416 = icmp eq i32 %1410, 0
  %1417 = select i1 %1415, float 0.000000e+00, float 5.000000e-01
  %1418 = select i1 %1416, float 0.000000e+00, float 5.000000e-01
  %1419 = add i32 %1409, 1
  %1420 = add i32 %1410, 1
  %1421 = icmp eq i32 %1419, %1403
  %1422 = icmp eq i32 %1420, %1404
  %1423 = uitofp i32 %1411 to float
  %1424 = select i1 %1401, float 1.280000e+02, float %1423
  %1425 = uitofp i32 %1412 to float
  %1426 = select i1 %1402, float 1.280000e+02, float %1425
  %1427 = fsub fast float %1424, %1417
  %1428 = fsub fast float %1426, %1418
  %1429 = select i1 %1421, float -0.000000e+00, float -5.000000e-01
  %1430 = fadd fast float %1427, %1429
  %1431 = select i1 %1422, float -0.000000e+00, float -5.000000e-01
  %1432 = fadd fast float %1428, %1431
  %1433 = fmul fast float %1430, %1413
  %1434 = fmul fast float %1432, %1414
  %1435 = fadd fast float %1433, %1417
  %1436 = fadd fast float %1434, %1418
  %1437 = fadd fast float %1424, -1.500000e+00
  %1438 = fadd fast float %1426, -1.500000e+00
  %1439 = call float @dx.op.binary.f32(i32 35, float %1435, float 5.000000e-01)  ; FMax(a,b)
  %1440 = call float @dx.op.binary.f32(i32 35, float %1436, float 5.000000e-01)  ; FMax(a,b)
  %1441 = call float @dx.op.binary.f32(i32 36, float %1439, float %1437)  ; FMin(a,b)
  %1442 = call float @dx.op.binary.f32(i32 36, float %1440, float %1438)  ; FMin(a,b)
  %1443 = uitofp i32 %1389 to float
  %1444 = uitofp i32 %1391 to float
  %1445 = fadd fast float %1441, %1443
  %1446 = fadd fast float %1442, %1444
  %1447 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1448 = extractvalue %dx.types.CBufRet.f32 %1447, 0
  %1449 = extractvalue %dx.types.CBufRet.f32 %1447, 1
  %1450 = fmul fast float %1448, %1445
  %1451 = fmul fast float %1449, %1446
  %1452 = call float @dx.op.binary.f32(i32 35, float %1303, float %1304)  ; FMax(a,b)
  %1453 = call float @dx.op.binary.f32(i32 35, float %1088, float 1.000000e+00)  ; FMax(a,b)
  %1454 = fdiv fast float %1452, %1453
  %1455 = call float @dx.op.unary.f32(i32 23, float %1454)  ; Log(value)
  %1456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1457 = extractvalue %dx.types.CBufRet.f32 %1456, 0
  %1458 = fadd fast float %1457, %1455
  %1459 = call float @dx.op.binary.f32(i32 35, float %1458, float 3.000000e+00)  ; FMax(a,b)
  %1460 = call float @dx.op.binary.f32(i32 36, float %1459, float 1.100000e+01)  ; FMin(a,b)
  %1461 = fptoui float %1460 to i32
  %1462 = sub i32 %1461, %1347
  %1463 = sub i32 %1461, %1346
  %1464 = add i32 %1462, 25
  %1465 = add i32 %1463, 25
  %1466 = and i32 %1464, 31
  %1467 = and i32 %1465, 31
  %1468 = shl i32 1, %1466
  %1469 = shl i32 1, %1467
  %1470 = icmp ugt i32 %1462, 7
  %1471 = icmp ugt i32 %1463, 7
  %1472 = uitofp i32 %1468 to float
  %1473 = select i1 %1470, float %1472, float 1.000000e+00
  %1474 = uitofp i32 %1469 to float
  %1475 = select i1 %1471, float %1474, float 1.000000e+00
  %1476 = fmul fast float %1473, %1366
  %1477 = fmul fast float %1475, %1367
  %1478 = fptoui float %1476 to i32
  %1479 = fptoui float %1477 to i32
  %1480 = shl i32 %1461, 24
  %1481 = or i32 %1480, %1268
  %1482 = shl i32 %1479, 8
  %1483 = add i32 %1482, %1478
  %1484 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1485 = extractvalue %dx.types.CBufRet.f32 %1484, 2
  %1486 = extractvalue %dx.types.CBufRet.f32 %1484, 3
  %1487 = fmul fast float %1485, %1450
  %1488 = fmul fast float %1486, %1451
  %1489 = fadd fast float %1487, 0x3FE0100000000000
  %1490 = fadd fast float %1488, 0x3FE0100000000000
  %1491 = call float @dx.op.unary.f32(i32 22, float %1489)  ; Frc(value)
  %1492 = call float @dx.op.unary.f32(i32 22, float %1490)  ; Frc(value)
  %1493 = fsub fast float 1.000000e+00, %1491
  %1494 = fmul fast float %1493, %1492
  %1495 = fmul fast float %1492, %1491
  %1496 = fsub fast float 1.000000e+00, %1492
  %1497 = fmul fast float %1496, %1491
  %1498 = fmul fast float %1496, %1493
  %1499 = icmp eq i32 %1393, 0
  br i1 %1499, label %1277, label %1500

; <label>:1500                                    ; preds = %1344
  br i1 %1135, label %1506, label %1501

; <label>:1501                                    ; preds = %1500
  %1502 = icmp ult i32 %1307, 2
  br i1 %1502, label %1506, label %1503

; <label>:1503                                    ; preds = %1501
  %1504 = icmp ult i32 %1307, 4
  %1505 = select i1 %1504, float %1176, float %1177
  br label %1506

; <label>:1506                                    ; preds = %1503, %1501, %1500
  %1507 = phi float [ 1.000000e+00, %1500 ], [ %1175, %1501 ], [ %1505, %1503 ]
  %1508 = fcmp fast ogt float %1507, 0.000000e+00
  br i1 %1508, label %1509, label %1277

; <label>:1509                                    ; preds = %1506
  %1510 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1511 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1512 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1510, %dx.types.Handle %1511, float %1450, float %1451, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1513 = extractvalue %dx.types.ResRet.f32 %1512, 0
  %1514 = extractvalue %dx.types.ResRet.f32 %1512, 1
  %1515 = extractvalue %dx.types.ResRet.f32 %1512, 2
  %1516 = extractvalue %dx.types.ResRet.f32 %1512, 3
  %1517 = fdiv fast float %1331, %1305
  %1518 = fmul fast float %1517, 5.000000e-01
  %1519 = fsub fast float 5.000000e-01, %1518
  %1520 = fdiv fast float %1150, %1305
  %1521 = fmul fast float %1520, 2.500000e-01
  %1522 = fcmp uge float %1513, 1.000000e+00
  %1523 = or i1 %1135, %1522
  %1524 = select i1 %1522, float 0.000000e+00, float 1.000000e+00
  br i1 %1523, label %1532, label %1525

; <label>:1525                                    ; preds = %1509
  %1526 = fsub fast float %1519, %1513
  %1527 = call float @dx.op.unary.f32(i32 6, float %1526)  ; FAbs(value)
  %1528 = fsub fast float %1527, %1520
  %1529 = fdiv fast float %1528, %1521
  %1530 = call float @dx.op.unary.f32(i32 7, float %1529)  ; Saturate(value)
  %1531 = fsub fast float 1.000000e+00, %1530
  br label %1532

; <label>:1532                                    ; preds = %1525, %1509
  %1533 = phi float [ %1531, %1525 ], [ %1524, %1509 ]
  %1534 = fcmp uge float %1514, 1.000000e+00
  %1535 = or i1 %1135, %1534
  %1536 = select i1 %1534, float 0.000000e+00, float 1.000000e+00
  br i1 %1535, label %3312, label %3305

; <label>:1537                                    ; preds = %3336
  %1538 = fdiv fast float %3338, %3342
  %1539 = fdiv fast float %3339, %3342
  %1540 = fdiv fast float %3340, %3342
  %1541 = fdiv fast float %3341, %3342
  %1542 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1543 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1542, %dx.types.Handle %1511, float %1450, float %1451, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1544 = extractvalue %dx.types.ResRet.f32 %1543, 0
  %1545 = extractvalue %dx.types.ResRet.f32 %1543, 1
  %1546 = extractvalue %dx.types.ResRet.f32 %1543, 2
  %1547 = extractvalue %dx.types.ResRet.f32 %1543, 3
  %1548 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1542, %dx.types.Handle %1511, float %1450, float %1451, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1549 = extractvalue %dx.types.ResRet.f32 %1548, 0
  %1550 = extractvalue %dx.types.ResRet.f32 %1548, 1
  %1551 = extractvalue %dx.types.ResRet.f32 %1548, 2
  %1552 = extractvalue %dx.types.ResRet.f32 %1548, 3
  %1553 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1542, %dx.types.Handle %1511, float %1450, float %1451, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1554 = extractvalue %dx.types.ResRet.f32 %1553, 0
  %1555 = extractvalue %dx.types.ResRet.f32 %1553, 1
  %1556 = extractvalue %dx.types.ResRet.f32 %1553, 2
  %1557 = extractvalue %dx.types.ResRet.f32 %1553, 3
  %1558 = call float @dx.op.dot4.f32(i32 56, float %1544, float %1545, float %1546, float %1547, float %1538, float %1539, float %1540, float %1541)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1559 = call float @dx.op.dot4.f32(i32 56, float %1549, float %1550, float %1551, float %1552, float %1538, float %1539, float %1540, float %1541)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1560 = call float @dx.op.dot4.f32(i32 56, float %1554, float %1555, float %1556, float %1557, float %1538, float %1539, float %1540, float %1541)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1561 = fmul fast float %1558, %3343
  %1562 = fmul fast float %1559, %3343
  %1563 = fmul fast float %1560, %3343
  %1564 = fadd fast float %1561, %1256
  %1565 = fadd fast float %1562, %1257
  %1566 = fadd fast float %1563, %1258
  %1567 = fadd fast float %3343, %1259
  %1568 = fcmp fast ogt float %3343, %1255
  br i1 %1568, label %1569, label %1277

; <label>:1569                                    ; preds = %1537
  br label %1277

; <label>:1570                                    ; preds = %1277
  br label %1571

; <label>:1571                                    ; preds = %1570, %1249, %1080
  %1572 = phi float [ 0.000000e+00, %1080 ], [ 0.000000e+00, %1249 ], [ %1279, %1570 ]
  %1573 = phi float [ 0.000000e+00, %1080 ], [ 0.000000e+00, %1249 ], [ %1280, %1570 ]
  %1574 = phi float [ 0.000000e+00, %1080 ], [ 0.000000e+00, %1249 ], [ %1281, %1570 ]
  %1575 = phi float [ 0.000000e+00, %1080 ], [ 0.000000e+00, %1249 ], [ %1282, %1570 ]
  %1576 = phi i32 [ 0, %1080 ], [ 0, %1249 ], [ %1283, %1570 ]
  %1577 = phi i32 [ 0, %1080 ], [ 0, %1249 ], [ %1284, %1570 ]
  %1578 = phi i32 [ 0, %1080 ], [ 0, %1249 ], [ %1285, %1570 ]
  %1579 = fcmp fast ogt float %1575, 0.000000e+00
  br i1 %1579, label %1580, label %1610

; <label>:1580                                    ; preds = %1571
  %1581 = fdiv fast float %1572, %1575
  %1582 = fdiv fast float %1573, %1575
  %1583 = fdiv fast float %1574, %1575
  %1584 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1585 = extractvalue %dx.types.CBufRet.i32 %1584, 1
  %1586 = and i32 %1585, %60
  %1587 = and i32 %1585, %61
  %1588 = extractvalue %dx.types.CBufRet.i32 %1584, 2
  %1589 = extractvalue %dx.types.CBufRet.i32 %1584, 3
  %1590 = icmp eq i32 %1586, %1588
  %1591 = icmp eq i32 %1587, %1589
  %1592 = and i1 %1590, %1591
  br i1 %1592, label %1593, label %1610

; <label>:1593                                    ; preds = %1580
  %1594 = extractvalue %dx.types.CBufRet.i32 %1584, 0
  %1595 = icmp ne i32 %1594, 0
  %1596 = fcmp fast ogt float %1575, 0x3FB99999A0000000
  %1597 = and i1 %1596, %1595
  br i1 %1597, label %1598, label %1610

; <label>:1598                                    ; preds = %1593
  %1599 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1600 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1599, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1601 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1602 = extractvalue %dx.types.CBufRet.i32 %1601, 0
  %1603 = icmp ult i32 %1600, %1602
  br i1 %1603, label %1604, label %1606

; <label>:1604                                    ; preds = %1598
  %1605 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1605, i32 %1600, i32 0, i32 %1576, i32 %1577, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1606

; <label>:1606                                    ; preds = %1604, %1598
  %1607 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1608 = extractvalue %dx.types.CBufRet.i32 %1607, 1
  %1609 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1609, i32 %1578, i32 0, i32 %1608, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1610

; <label>:1610                                    ; preds = %1606, %1593, %1580, %1571, %516, %56
  %1611 = phi float [ %161, %56 ], [ %518, %1571 ], [ %518, %1580 ], [ %518, %1593 ], [ %518, %1606 ], [ %518, %516 ]
  %1612 = phi float [ 1.000000e+00, %56 ], [ 0.000000e+00, %1571 ], [ 0.000000e+00, %1580 ], [ 0.000000e+00, %1593 ], [ 0.000000e+00, %1606 ], [ 1.000000e+00, %516 ]
  %1613 = phi float [ 0.000000e+00, %56 ], [ 0.000000e+00, %1571 ], [ %1581, %1580 ], [ %1581, %1593 ], [ %1581, %1606 ], [ 0.000000e+00, %516 ]
  %1614 = phi float [ 0.000000e+00, %56 ], [ 0.000000e+00, %1571 ], [ %1582, %1580 ], [ %1582, %1593 ], [ %1582, %1606 ], [ 0.000000e+00, %516 ]
  %1615 = phi float [ 0.000000e+00, %56 ], [ 0.000000e+00, %1571 ], [ %1583, %1580 ], [ %1583, %1593 ], [ %1583, %1606 ], [ 0.000000e+00, %516 ]
  %1616 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1617 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1616, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %1618 = extractvalue %dx.types.ResRet.i32 %1617, 0
  %1619 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1620 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1619, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %1621 = extractvalue %dx.types.ResRet.i32 %1620, 0
  br i1 %212, label %1622, label %2872

; <label>:1622                                    ; preds = %1610
  %1623 = call float @dx.op.binary.f32(i32 36, float %180, float %1611)  ; FMin(a,b)
  %1624 = icmp eq i32 %1618, 0
  br i1 %1624, label %2330, label %1625

; <label>:1625                                    ; preds = %1622
  br label %1626

; <label>:1626                                    ; preds = %2315, %1625
  %1627 = phi float [ %2324, %2315 ], [ %1623, %1625 ]
  %1628 = phi i32 [ %2325, %2315 ], [ 0, %1625 ]
  %1629 = phi i32 [ %2326, %2315 ], [ 0, %1625 ]
  %1630 = phi i32 [ %2327, %2315 ], [ 0, %1625 ]
  %1631 = add i32 %1630, %1621
  %1632 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1633 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1632, i32 %1631, i32 undef)  ; BufferLoad(srv,index,wot)
  %1634 = extractvalue %dx.types.ResRet.i32 %1633, 0
  %1635 = mul i32 %1634, 3
  %1636 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1637 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1636, i32 %1635, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1638 = extractvalue %dx.types.ResRet.f32 %1637, 3
  %1639 = bitcast float %1638 to i32
  %1640 = mul i32 %1639, 6
  %1641 = add i32 %1640, 4
  %1642 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1643 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1642, i32 %1641, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1644 = extractvalue %dx.types.ResRet.f32 %1643, 0
  %1645 = bitcast float %1644 to i32
  %1646 = mul i32 %1645, 10
  %1647 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1648 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1647, i32 %1646, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1649 = extractvalue %dx.types.ResRet.f32 %1648, 0
  %1650 = extractvalue %dx.types.ResRet.f32 %1648, 1
  %1651 = extractvalue %dx.types.ResRet.f32 %1648, 2
  %1652 = or i32 %1646, 1
  %1653 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1647, i32 %1652, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1654 = extractvalue %dx.types.ResRet.f32 %1653, 0
  %1655 = extractvalue %dx.types.ResRet.f32 %1653, 1
  %1656 = extractvalue %dx.types.ResRet.f32 %1653, 2
  %1657 = extractvalue %dx.types.ResRet.f32 %1653, 3
  %1658 = add i32 %1646, 2
  %1659 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1647, i32 %1658, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1660 = extractvalue %dx.types.ResRet.f32 %1659, 0
  %1661 = extractvalue %dx.types.ResRet.f32 %1659, 1
  %1662 = extractvalue %dx.types.ResRet.f32 %1659, 2
  %1663 = extractvalue %dx.types.ResRet.f32 %1659, 3
  %1664 = add i32 %1646, 3
  %1665 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1647, i32 %1664, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1666 = extractvalue %dx.types.ResRet.f32 %1665, 0
  %1667 = extractvalue %dx.types.ResRet.f32 %1665, 1
  %1668 = extractvalue %dx.types.ResRet.f32 %1665, 2
  %1669 = extractvalue %dx.types.ResRet.f32 %1665, 3
  %1670 = add i32 %1646, 4
  %1671 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1647, i32 %1670, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1672 = extractvalue %dx.types.ResRet.f32 %1671, 0
  %1673 = extractvalue %dx.types.ResRet.f32 %1671, 1
  %1674 = extractvalue %dx.types.ResRet.f32 %1671, 2
  %1675 = add i32 %1646, 5
  %1676 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1647, i32 %1675, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1677 = extractvalue %dx.types.ResRet.f32 %1676, 0
  %1678 = extractvalue %dx.types.ResRet.f32 %1676, 1
  %1679 = add i32 %1646, 9
  %1680 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1647, i32 %1679, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1681 = extractvalue %dx.types.ResRet.f32 %1680, 3
  %1682 = fmul fast float %1649, 2.097152e+06
  %1683 = fmul fast float %1650, 2.097152e+06
  %1684 = fmul fast float %1651, 2.097152e+06
  %1685 = call float @dx.op.unary.f32(i32 6, float %1672)  ; FAbs(value)
  %1686 = call float @dx.op.unary.f32(i32 6, float %1673)  ; FAbs(value)
  %1687 = call float @dx.op.unary.f32(i32 6, float %1674)  ; FAbs(value)
  %1688 = bitcast float %1677 to i32
  %1689 = and i32 %1688, 65535
  %1690 = lshr i32 %1688, 16
  %1691 = bitcast float %1678 to i32
  %1692 = fsub fast float %167, %1682
  %1693 = fsub fast float %1692, %1657
  %1694 = fsub fast float %168, %1683
  %1695 = fsub fast float %1694, %1663
  %1696 = fsub fast float %169, %1684
  %1697 = fsub fast float %1696, %1669
  %1698 = fmul fast float %1693, %1654
  %1699 = call float @dx.op.tertiary.f32(i32 46, float %1695, float %1660, float %1698)  ; FMad(a,b,c)
  %1700 = call float @dx.op.tertiary.f32(i32 46, float %1697, float %1666, float %1699)  ; FMad(a,b,c)
  %1701 = fmul fast float %1693, %1655
  %1702 = call float @dx.op.tertiary.f32(i32 46, float %1695, float %1661, float %1701)  ; FMad(a,b,c)
  %1703 = call float @dx.op.tertiary.f32(i32 46, float %1697, float %1667, float %1702)  ; FMad(a,b,c)
  %1704 = fmul fast float %1693, %1656
  %1705 = call float @dx.op.tertiary.f32(i32 46, float %1695, float %1662, float %1704)  ; FMad(a,b,c)
  %1706 = call float @dx.op.tertiary.f32(i32 46, float %1697, float %1668, float %1705)  ; FMad(a,b,c)
  %1707 = fmul fast float %1654, %153
  %1708 = call float @dx.op.tertiary.f32(i32 46, float %154, float %1660, float %1707)  ; FMad(a,b,c)
  %1709 = call float @dx.op.tertiary.f32(i32 46, float %155, float %1666, float %1708)  ; FMad(a,b,c)
  %1710 = fmul fast float %1655, %153
  %1711 = call float @dx.op.tertiary.f32(i32 46, float %154, float %1661, float %1710)  ; FMad(a,b,c)
  %1712 = call float @dx.op.tertiary.f32(i32 46, float %155, float %1667, float %1711)  ; FMad(a,b,c)
  %1713 = fmul fast float %1656, %153
  %1714 = call float @dx.op.tertiary.f32(i32 46, float %154, float %1662, float %1713)  ; FMad(a,b,c)
  %1715 = call float @dx.op.tertiary.f32(i32 46, float %155, float %1668, float %1714)  ; FMad(a,b,c)
  %1716 = fmul fast float %1709, %1623
  %1717 = fmul fast float %1712, %1623
  %1718 = fmul fast float %1715, %1623
  %1719 = fsub fast float -0.000000e+00, %1685
  %1720 = fsub fast float -0.000000e+00, %1686
  %1721 = fsub fast float -0.000000e+00, %1687
  %1722 = fdiv fast float 1.000000e+00, %1716
  %1723 = fdiv fast float 1.000000e+00, %1717
  %1724 = fdiv fast float 1.000000e+00, %1718
  %1725 = fsub fast float %1719, %1700
  %1726 = fsub fast float %1720, %1703
  %1727 = fsub fast float %1721, %1706
  %1728 = fmul fast float %1722, %1725
  %1729 = fmul fast float %1723, %1726
  %1730 = fmul fast float %1724, %1727
  %1731 = fsub fast float %1685, %1700
  %1732 = fsub fast float %1686, %1703
  %1733 = fsub fast float %1687, %1706
  %1734 = fmul fast float %1722, %1731
  %1735 = fmul fast float %1723, %1732
  %1736 = fmul fast float %1724, %1733
  %1737 = call float @dx.op.binary.f32(i32 36, float %1728, float %1734)  ; FMin(a,b)
  %1738 = call float @dx.op.binary.f32(i32 36, float %1729, float %1735)  ; FMin(a,b)
  %1739 = call float @dx.op.binary.f32(i32 36, float %1730, float %1736)  ; FMin(a,b)
  %1740 = call float @dx.op.binary.f32(i32 35, float %1728, float %1734)  ; FMax(a,b)
  %1741 = call float @dx.op.binary.f32(i32 35, float %1729, float %1735)  ; FMax(a,b)
  %1742 = call float @dx.op.binary.f32(i32 35, float %1730, float %1736)  ; FMax(a,b)
  %1743 = call float @dx.op.binary.f32(i32 35, float %1738, float %1739)  ; FMax(a,b)
  %1744 = call float @dx.op.binary.f32(i32 35, float %1737, float %1743)  ; FMax(a,b)
  %1745 = call float @dx.op.binary.f32(i32 36, float %1741, float %1742)  ; FMin(a,b)
  %1746 = call float @dx.op.binary.f32(i32 36, float %1740, float %1745)  ; FMin(a,b)
  %1747 = call float @dx.op.unary.f32(i32 7, float %1744)  ; Saturate(value)
  %1748 = call float @dx.op.unary.f32(i32 7, float %1746)  ; Saturate(value)
  %1749 = fmul fast float %1716, %1716
  %1750 = fmul fast float %1717, %1717
  %1751 = fadd fast float %1750, %1749
  %1752 = fmul fast float %1718, %1718
  %1753 = fadd fast float %1751, %1752
  %1754 = call float @dx.op.unary.f32(i32 24, float %1753)  ; Sqrt(value)
  %1755 = fmul fast float %1754, %1747
  %1756 = fmul fast float %1754, %1748
  %1757 = call float @dx.op.binary.f32(i32 35, float %1755, float %174)  ; FMax(a,b)
  %1758 = call float @dx.op.binary.f32(i32 36, float %1756, float %1623)  ; FMin(a,b)
  %1759 = fcmp fast olt float %1757, %1758
  br i1 %1759, label %1760, label %2315

; <label>:1760                                    ; preds = %1626
  %1761 = extractvalue %dx.types.ResRet.f32 %1671, 3
  %1762 = bitcast float %1761 to i32
  %1763 = and i32 %1762, 16777216
  %1764 = icmp eq i32 %1763, 0
  br i1 %1764, label %2315, label %1765

; <label>:1765                                    ; preds = %1760
  %1766 = fmul fast float %1757, %1709
  %1767 = fmul fast float %1757, %1712
  %1768 = fmul fast float %1757, %1715
  %1769 = fadd fast float %1766, %1700
  %1770 = fadd fast float %1767, %1703
  %1771 = fadd fast float %1768, %1706
  %1772 = fdiv fast float %1769, %1685
  %1773 = fdiv fast float %1770, %1686
  %1774 = fmul fast float %1772, 5.000000e-01
  %1775 = fmul fast float %1773, 5.000000e-01
  %1776 = fadd fast float %1774, 5.000000e-01
  %1777 = fsub fast float 5.000000e-01, %1775
  %1778 = call float @dx.op.unary.f32(i32 7, float %1776)  ; Saturate(value)
  %1779 = call float @dx.op.unary.f32(i32 7, float %1777)  ; Saturate(value)
  %1780 = call float @dx.op.binary.f32(i32 36, float %1778, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1781 = call float @dx.op.binary.f32(i32 36, float %1779, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1782 = uitofp i32 %1689 to float
  %1783 = uitofp i32 %1690 to float
  %1784 = fmul fast float %1780, %1782
  %1785 = fmul fast float %1781, %1783
  %1786 = fptoui float %1784 to i32
  %1787 = fptoui float %1785 to i32
  %1788 = mul i32 %1787, %1689
  %1789 = add i32 %1786, %1691
  %1790 = add i32 %1789, %1788
  %1791 = shl i32 %1790, 3
  %1792 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1793 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1792, i32 %1791, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1794 = extractvalue %dx.types.ResRet.i32 %1793, 0
  %1795 = shl i32 %1794, 3
  %1796 = and i32 %1795, 32760
  %1797 = lshr i32 %1794, 9
  %1798 = and i32 %1797, 32760
  %1799 = lshr i32 %1794, 24
  %1800 = and i32 %1799, 15
  %1801 = lshr i32 %1794, 28
  %1802 = add nuw nsw i32 %1800, 25
  %1803 = add nuw nsw i32 %1801, 25
  %1804 = and i32 %1802, 31
  %1805 = and i32 %1803, 31
  %1806 = shl i32 1, %1804
  %1807 = shl i32 1, %1805
  %1808 = icmp ugt i32 %1800, 7
  %1809 = icmp slt i32 %1794, 0
  %1810 = select i1 %1808, i32 %1806, i32 1
  %1811 = select i1 %1809, i32 %1807, i32 1
  %1812 = uitofp i32 %1810 to float
  %1813 = uitofp i32 %1811 to float
  %1814 = fmul fast float %1812, %1780
  %1815 = fmul fast float %1813, %1781
  %1816 = fptoui float %1814 to i32
  %1817 = fptoui float %1815 to i32
  %1818 = shl i32 1, %1800
  %1819 = shl i32 1, %1801
  %1820 = call float @dx.op.unary.f32(i32 22, float %1814)  ; Frc(value)
  %1821 = call float @dx.op.unary.f32(i32 22, float %1815)  ; Frc(value)
  %1822 = icmp eq i32 %1816, 0
  %1823 = icmp eq i32 %1817, 0
  %1824 = select i1 %1822, float 0.000000e+00, float 5.000000e-01
  %1825 = select i1 %1823, float 0.000000e+00, float 5.000000e-01
  %1826 = add i32 %1816, 1
  %1827 = add i32 %1817, 1
  %1828 = icmp eq i32 %1826, %1810
  %1829 = icmp eq i32 %1827, %1811
  %1830 = uitofp i32 %1818 to float
  %1831 = select i1 %1808, float 1.280000e+02, float %1830
  %1832 = uitofp i32 %1819 to float
  %1833 = select i1 %1809, float 1.280000e+02, float %1832
  %1834 = fsub fast float %1831, %1824
  %1835 = fsub fast float %1833, %1825
  %1836 = select i1 %1828, float -0.000000e+00, float -5.000000e-01
  %1837 = fadd fast float %1834, %1836
  %1838 = select i1 %1829, float -0.000000e+00, float -5.000000e-01
  %1839 = fadd fast float %1835, %1838
  %1840 = fmul fast float %1837, %1820
  %1841 = fmul fast float %1839, %1821
  %1842 = fadd fast float %1840, %1824
  %1843 = fadd fast float %1841, %1825
  %1844 = fadd fast float %1831, -1.500000e+00
  %1845 = fadd fast float %1833, -1.500000e+00
  %1846 = call float @dx.op.binary.f32(i32 35, float %1842, float 5.000000e-01)  ; FMax(a,b)
  %1847 = call float @dx.op.binary.f32(i32 35, float %1843, float 5.000000e-01)  ; FMax(a,b)
  %1848 = call float @dx.op.binary.f32(i32 36, float %1846, float %1844)  ; FMin(a,b)
  %1849 = call float @dx.op.binary.f32(i32 36, float %1847, float %1845)  ; FMin(a,b)
  %1850 = uitofp i32 %1796 to float
  %1851 = uitofp i32 %1798 to float
  %1852 = fadd fast float %1848, %1850
  %1853 = fadd fast float %1849, %1851
  %1854 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1855 = extractvalue %dx.types.CBufRet.f32 %1854, 0
  %1856 = extractvalue %dx.types.CBufRet.f32 %1854, 1
  %1857 = fmul fast float %1855, %1852
  %1858 = fmul fast float %1856, %1853
  %1859 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1860 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1861 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1859, %dx.types.Handle %1860, float %1857, float %1858, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1862 = extractvalue %dx.types.ResRet.f32 %1861, 0
  %1863 = fmul fast float %1862, 2.000000e+00
  %1864 = fadd fast float %1863, -1.000000e+00
  %1865 = fmul fast float %1864, %1687
  %1866 = fsub fast float -0.000000e+00, %1865
  %1867 = fcmp fast ogt float %1771, %1866
  %1868 = zext i1 %1867 to i32
  %1869 = fcmp fast olt float %1757, %1681
  br i1 %1869, label %1870, label %2070

; <label>:1870                                    ; preds = %1765
  %1871 = fmul fast float %1709, %1681
  %1872 = fmul fast float %1712, %1681
  %1873 = fmul fast float %1715, %1681
  %1874 = fadd fast float %1871, %1700
  %1875 = fadd fast float %1872, %1703
  %1876 = fadd fast float %1873, %1706
  %1877 = fdiv fast float %1874, %1685
  %1878 = fdiv fast float %1875, %1686
  %1879 = fmul fast float %1877, 5.000000e-01
  %1880 = fmul fast float %1878, 5.000000e-01
  %1881 = fadd fast float %1879, 5.000000e-01
  %1882 = fsub fast float 5.000000e-01, %1880
  %1883 = call float @dx.op.unary.f32(i32 7, float %1881)  ; Saturate(value)
  %1884 = call float @dx.op.unary.f32(i32 7, float %1882)  ; Saturate(value)
  %1885 = call float @dx.op.binary.f32(i32 36, float %1883, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1886 = call float @dx.op.binary.f32(i32 36, float %1884, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1887 = fmul fast float %1885, %1782
  %1888 = fmul fast float %1886, %1783
  %1889 = fptoui float %1887 to i32
  %1890 = fptoui float %1888 to i32
  %1891 = mul i32 %1890, %1689
  %1892 = add i32 %1889, %1691
  %1893 = add i32 %1892, %1891
  %1894 = shl i32 %1893, 3
  %1895 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1792, i32 %1894, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1896 = extractvalue %dx.types.ResRet.i32 %1895, 0
  %1897 = shl i32 %1896, 3
  %1898 = and i32 %1897, 32760
  %1899 = lshr i32 %1896, 9
  %1900 = and i32 %1899, 32760
  %1901 = lshr i32 %1896, 24
  %1902 = and i32 %1901, 15
  %1903 = lshr i32 %1896, 28
  %1904 = add nuw nsw i32 %1902, 25
  %1905 = add nuw nsw i32 %1903, 25
  %1906 = and i32 %1904, 31
  %1907 = and i32 %1905, 31
  %1908 = shl i32 1, %1906
  %1909 = shl i32 1, %1907
  %1910 = icmp ugt i32 %1902, 7
  %1911 = icmp slt i32 %1896, 0
  %1912 = select i1 %1910, i32 %1908, i32 1
  %1913 = select i1 %1911, i32 %1909, i32 1
  %1914 = uitofp i32 %1912 to float
  %1915 = uitofp i32 %1913 to float
  %1916 = fmul fast float %1914, %1885
  %1917 = fmul fast float %1915, %1886
  %1918 = fptoui float %1916 to i32
  %1919 = fptoui float %1917 to i32
  %1920 = shl i32 1, %1902
  %1921 = shl i32 1, %1903
  %1922 = call float @dx.op.unary.f32(i32 22, float %1916)  ; Frc(value)
  %1923 = call float @dx.op.unary.f32(i32 22, float %1917)  ; Frc(value)
  %1924 = icmp eq i32 %1918, 0
  %1925 = icmp eq i32 %1919, 0
  %1926 = select i1 %1924, float 0.000000e+00, float 5.000000e-01
  %1927 = select i1 %1925, float 0.000000e+00, float 5.000000e-01
  %1928 = add i32 %1918, 1
  %1929 = add i32 %1919, 1
  %1930 = icmp eq i32 %1928, %1912
  %1931 = icmp eq i32 %1929, %1913
  %1932 = uitofp i32 %1920 to float
  %1933 = select i1 %1910, float 1.280000e+02, float %1932
  %1934 = uitofp i32 %1921 to float
  %1935 = select i1 %1911, float 1.280000e+02, float %1934
  %1936 = fsub fast float %1933, %1926
  %1937 = fsub fast float %1935, %1927
  %1938 = select i1 %1930, float -0.000000e+00, float -5.000000e-01
  %1939 = fadd fast float %1936, %1938
  %1940 = select i1 %1931, float -0.000000e+00, float -5.000000e-01
  %1941 = fadd fast float %1937, %1940
  %1942 = fmul fast float %1939, %1922
  %1943 = fmul fast float %1941, %1923
  %1944 = fadd fast float %1942, %1926
  %1945 = fadd fast float %1943, %1927
  %1946 = fadd fast float %1933, -1.500000e+00
  %1947 = fadd fast float %1935, -1.500000e+00
  %1948 = call float @dx.op.binary.f32(i32 35, float %1944, float 5.000000e-01)  ; FMax(a,b)
  %1949 = call float @dx.op.binary.f32(i32 35, float %1945, float 5.000000e-01)  ; FMax(a,b)
  %1950 = call float @dx.op.binary.f32(i32 36, float %1948, float %1946)  ; FMin(a,b)
  %1951 = call float @dx.op.binary.f32(i32 36, float %1949, float %1947)  ; FMin(a,b)
  %1952 = uitofp i32 %1898 to float
  %1953 = uitofp i32 %1900 to float
  %1954 = fadd fast float %1950, %1952
  %1955 = fadd fast float %1951, %1953
  %1956 = fmul fast float %1855, %1954
  %1957 = fmul fast float %1856, %1955
  %1958 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1859, %dx.types.Handle %1860, float %1956, float %1957, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1959 = extractvalue %dx.types.ResRet.f32 %1958, 0
  %1960 = fmul fast float %1959, 2.000000e+00
  %1961 = fadd fast float %1960, -1.000000e+00
  %1962 = fmul fast float %1961, %1687
  %1963 = fsub fast float -0.000000e+00, %1962
  %1964 = fcmp fast ogt float %1876, %1963
  %1965 = zext i1 %1964 to i32
  br i1 %1867, label %1966, label %2070

; <label>:1966                                    ; preds = %1870
  br i1 %1964, label %2070, label %1967

; <label>:1967                                    ; preds = %1966
  %1968 = fadd fast float %1865, %1771
  %1969 = fsub fast float %1757, %1681
  %1970 = fmul fast float %1969, %1715
  %1971 = fadd fast float %1865, %1970
  %1972 = fsub fast float %1971, %1962
  %1973 = fdiv fast float %1968, %1972
  %1974 = fmul fast float %1973, %1681
  %1975 = fadd fast float %1974, %1757
  %1976 = call float @dx.op.binary.f32(i32 35, float %1975, float %1757)  ; FMax(a,b)
  %1977 = call float @dx.op.binary.f32(i32 36, float %1976, float %1758)  ; FMin(a,b)
  %1978 = fmul fast float %1977, %1709
  %1979 = fmul fast float %1977, %1712
  %1980 = fadd fast float %1978, %1700
  %1981 = fadd fast float %1979, %1703
  %1982 = fdiv fast float %1980, %1685
  %1983 = fdiv fast float %1981, %1686
  %1984 = fmul fast float %1982, 5.000000e-01
  %1985 = fmul fast float %1983, 5.000000e-01
  %1986 = fadd fast float %1984, 5.000000e-01
  %1987 = fsub fast float 5.000000e-01, %1985
  %1988 = call float @dx.op.unary.f32(i32 7, float %1986)  ; Saturate(value)
  %1989 = call float @dx.op.unary.f32(i32 7, float %1987)  ; Saturate(value)
  %1990 = call float @dx.op.binary.f32(i32 36, float %1988, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1991 = call float @dx.op.binary.f32(i32 36, float %1989, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1992 = fmul fast float %1990, %1782
  %1993 = fmul fast float %1991, %1783
  %1994 = fptoui float %1992 to i32
  %1995 = fptoui float %1993 to i32
  %1996 = mul i32 %1995, %1689
  %1997 = add i32 %1994, %1691
  %1998 = add i32 %1997, %1996
  %1999 = shl i32 %1998, 3
  %2000 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1792, i32 %1999, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2001 = extractvalue %dx.types.ResRet.i32 %2000, 0
  %2002 = shl i32 %2001, 3
  %2003 = and i32 %2002, 32760
  %2004 = lshr i32 %2001, 9
  %2005 = and i32 %2004, 32760
  %2006 = lshr i32 %2001, 24
  %2007 = and i32 %2006, 15
  %2008 = lshr i32 %2001, 28
  %2009 = add nuw nsw i32 %2007, 25
  %2010 = add nuw nsw i32 %2008, 25
  %2011 = and i32 %2009, 31
  %2012 = and i32 %2010, 31
  %2013 = shl i32 1, %2011
  %2014 = shl i32 1, %2012
  %2015 = icmp ugt i32 %2007, 7
  %2016 = icmp slt i32 %2001, 0
  %2017 = select i1 %2015, i32 %2013, i32 1
  %2018 = select i1 %2016, i32 %2014, i32 1
  %2019 = uitofp i32 %2017 to float
  %2020 = uitofp i32 %2018 to float
  %2021 = fmul fast float %2019, %1990
  %2022 = fmul fast float %2020, %1991
  %2023 = fptoui float %2021 to i32
  %2024 = fptoui float %2022 to i32
  %2025 = shl i32 1, %2007
  %2026 = shl i32 1, %2008
  %2027 = call float @dx.op.unary.f32(i32 22, float %2021)  ; Frc(value)
  %2028 = call float @dx.op.unary.f32(i32 22, float %2022)  ; Frc(value)
  %2029 = icmp eq i32 %2023, 0
  %2030 = icmp eq i32 %2024, 0
  %2031 = select i1 %2029, float 0.000000e+00, float 5.000000e-01
  %2032 = select i1 %2030, float 0.000000e+00, float 5.000000e-01
  %2033 = add i32 %2023, 1
  %2034 = add i32 %2024, 1
  %2035 = icmp eq i32 %2033, %2017
  %2036 = icmp eq i32 %2034, %2018
  %2037 = uitofp i32 %2025 to float
  %2038 = select i1 %2015, float 1.280000e+02, float %2037
  %2039 = uitofp i32 %2026 to float
  %2040 = select i1 %2016, float 1.280000e+02, float %2039
  %2041 = fsub fast float %2038, %2031
  %2042 = fsub fast float %2040, %2032
  %2043 = select i1 %2035, float -0.000000e+00, float -5.000000e-01
  %2044 = fadd fast float %2041, %2043
  %2045 = select i1 %2036, float -0.000000e+00, float -5.000000e-01
  %2046 = fadd fast float %2042, %2045
  %2047 = fmul fast float %2044, %2027
  %2048 = fmul fast float %2046, %2028
  %2049 = fadd fast float %2047, %2031
  %2050 = fadd fast float %2048, %2032
  %2051 = fadd fast float %2038, -1.500000e+00
  %2052 = fadd fast float %2040, -1.500000e+00
  %2053 = call float @dx.op.binary.f32(i32 35, float %2049, float 5.000000e-01)  ; FMax(a,b)
  %2054 = call float @dx.op.binary.f32(i32 35, float %2050, float 5.000000e-01)  ; FMax(a,b)
  %2055 = call float @dx.op.binary.f32(i32 36, float %2053, float %2051)  ; FMin(a,b)
  %2056 = call float @dx.op.binary.f32(i32 36, float %2054, float %2052)  ; FMin(a,b)
  %2057 = uitofp i32 %2003 to float
  %2058 = uitofp i32 %2005 to float
  %2059 = fadd fast float %2055, %2057
  %2060 = fadd fast float %2056, %2058
  %2061 = fmul fast float %1855, %2059
  %2062 = fmul fast float %1856, %2060
  %2063 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2064 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2063, %dx.types.Handle %1860, float %2061, float %2062, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2065 = extractvalue %dx.types.ResRet.f32 %2064, 0
  %2066 = fcmp fast ogt float %2065, 5.000000e-01
  %2067 = select i1 %2066, float %1977, float %1623
  %2068 = zext i1 %2066 to i32
  %2069 = zext i1 %2066 to i32
  br label %2070

; <label>:2070                                    ; preds = %1967, %1966, %1870, %1765
  %2071 = phi i32 [ %1868, %1765 ], [ %1965, %1967 ], [ %1965, %1966 ], [ %1965, %1870 ]
  %2072 = phi float [ %1866, %1765 ], [ %1963, %1967 ], [ %1963, %1966 ], [ %1963, %1870 ]
  %2073 = phi float [ %1771, %1765 ], [ %1876, %1967 ], [ %1876, %1966 ], [ %1876, %1870 ]
  %2074 = phi float [ %1757, %1765 ], [ %1681, %1967 ], [ %1681, %1966 ], [ %1681, %1870 ]
  %2075 = phi float [ %1623, %1765 ], [ %2067, %1967 ], [ %1623, %1966 ], [ %1623, %1870 ]
  %2076 = phi i32 [ 0, %1765 ], [ %2068, %1967 ], [ 0, %1966 ], [ 0, %1870 ]
  %2077 = phi i32 [ 0, %1765 ], [ %2069, %1967 ], [ 0, %1966 ], [ 0, %1870 ]
  %2078 = icmp eq i32 %2077, 0
  br i1 %2078, label %2079, label %2315

; <label>:2079                                    ; preds = %2070
  %2080 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %2081 = extractvalue %dx.types.CBufRet.i32 %2080, 0
  %2082 = fsub fast float %1758, %2074
  %2083 = sitofp i32 %2081 to float
  %2084 = fdiv fast float %2082, %2083
  %2085 = call float @dx.op.binary.f32(i32 35, float %1681, float %2084)  ; FMax(a,b)
  %2086 = icmp sgt i32 %2081, 0
  br i1 %2086, label %2087, label %2315

; <label>:2087                                    ; preds = %2079
  br label %2088

; <label>:2088                                    ; preds = %2310, %2087
  %2089 = phi i32 [ %2198, %2310 ], [ %2071, %2087 ]
  %2090 = phi float [ %2196, %2310 ], [ %2072, %2087 ]
  %2091 = phi float [ %2103, %2310 ], [ %2073, %2087 ]
  %2092 = phi float [ %2097, %2310 ], [ %2074, %2087 ]
  %2093 = phi i32 [ %2311, %2310 ], [ 0, %2087 ]
  %2094 = phi float [ %2304, %2310 ], [ %2075, %2087 ]
  %2095 = phi i32 [ %2305, %2310 ], [ %2076, %2087 ]
  %2096 = fadd fast float %2092, %2085
  %2097 = call float @dx.op.binary.f32(i32 36, float %2096, float %1758)  ; FMin(a,b)
  %2098 = fmul fast float %2097, %1709
  %2099 = fmul fast float %2097, %1712
  %2100 = fmul fast float %2097, %1715
  %2101 = fadd fast float %2098, %1700
  %2102 = fadd fast float %2099, %1703
  %2103 = fadd fast float %2100, %1706
  %2104 = fdiv fast float %2101, %1685
  %2105 = fdiv fast float %2102, %1686
  %2106 = fmul fast float %2104, 5.000000e-01
  %2107 = fmul fast float %2105, 5.000000e-01
  %2108 = fadd fast float %2106, 5.000000e-01
  %2109 = fsub fast float 5.000000e-01, %2107
  %2110 = call float @dx.op.unary.f32(i32 7, float %2108)  ; Saturate(value)
  %2111 = call float @dx.op.unary.f32(i32 7, float %2109)  ; Saturate(value)
  %2112 = call float @dx.op.binary.f32(i32 36, float %2110, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2113 = call float @dx.op.binary.f32(i32 36, float %2111, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2114 = fmul fast float %2112, %1782
  %2115 = fmul fast float %2113, %1783
  %2116 = fptoui float %2114 to i32
  %2117 = fptoui float %2115 to i32
  %2118 = mul i32 %2117, %1689
  %2119 = add i32 %2116, %1691
  %2120 = add i32 %2119, %2118
  %2121 = shl i32 %2120, 3
  %2122 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2123 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2122, i32 %2121, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2124 = extractvalue %dx.types.ResRet.i32 %2123, 0
  %2125 = shl i32 %2124, 3
  %2126 = and i32 %2125, 32760
  %2127 = lshr i32 %2124, 9
  %2128 = and i32 %2127, 32760
  %2129 = lshr i32 %2124, 24
  %2130 = and i32 %2129, 15
  %2131 = lshr i32 %2124, 28
  %2132 = add nuw nsw i32 %2130, 25
  %2133 = add nuw nsw i32 %2131, 25
  %2134 = and i32 %2132, 31
  %2135 = and i32 %2133, 31
  %2136 = shl i32 1, %2134
  %2137 = shl i32 1, %2135
  %2138 = icmp ugt i32 %2130, 7
  %2139 = icmp slt i32 %2124, 0
  %2140 = select i1 %2138, i32 %2136, i32 1
  %2141 = select i1 %2139, i32 %2137, i32 1
  %2142 = uitofp i32 %2140 to float
  %2143 = uitofp i32 %2141 to float
  %2144 = fmul fast float %2142, %2112
  %2145 = fmul fast float %2143, %2113
  %2146 = fptoui float %2144 to i32
  %2147 = fptoui float %2145 to i32
  %2148 = shl i32 1, %2130
  %2149 = shl i32 1, %2131
  %2150 = call float @dx.op.unary.f32(i32 22, float %2144)  ; Frc(value)
  %2151 = call float @dx.op.unary.f32(i32 22, float %2145)  ; Frc(value)
  %2152 = icmp eq i32 %2146, 0
  %2153 = icmp eq i32 %2147, 0
  %2154 = select i1 %2152, float 0.000000e+00, float 5.000000e-01
  %2155 = select i1 %2153, float 0.000000e+00, float 5.000000e-01
  %2156 = add i32 %2146, 1
  %2157 = add i32 %2147, 1
  %2158 = icmp eq i32 %2156, %2140
  %2159 = icmp eq i32 %2157, %2141
  %2160 = uitofp i32 %2148 to float
  %2161 = select i1 %2138, float 1.280000e+02, float %2160
  %2162 = uitofp i32 %2149 to float
  %2163 = select i1 %2139, float 1.280000e+02, float %2162
  %2164 = fsub fast float %2161, %2154
  %2165 = fsub fast float %2163, %2155
  %2166 = select i1 %2158, float -0.000000e+00, float -5.000000e-01
  %2167 = fadd fast float %2164, %2166
  %2168 = select i1 %2159, float -0.000000e+00, float -5.000000e-01
  %2169 = fadd fast float %2165, %2168
  %2170 = fmul fast float %2167, %2150
  %2171 = fmul fast float %2169, %2151
  %2172 = fadd fast float %2170, %2154
  %2173 = fadd fast float %2171, %2155
  %2174 = fadd fast float %2161, -1.500000e+00
  %2175 = fadd fast float %2163, -1.500000e+00
  %2176 = call float @dx.op.binary.f32(i32 35, float %2172, float 5.000000e-01)  ; FMax(a,b)
  %2177 = call float @dx.op.binary.f32(i32 35, float %2173, float 5.000000e-01)  ; FMax(a,b)
  %2178 = call float @dx.op.binary.f32(i32 36, float %2176, float %2174)  ; FMin(a,b)
  %2179 = call float @dx.op.binary.f32(i32 36, float %2177, float %2175)  ; FMin(a,b)
  %2180 = uitofp i32 %2126 to float
  %2181 = uitofp i32 %2128 to float
  %2182 = fadd fast float %2178, %2180
  %2183 = fadd fast float %2179, %2181
  %2184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2185 = extractvalue %dx.types.CBufRet.f32 %2184, 0
  %2186 = extractvalue %dx.types.CBufRet.f32 %2184, 1
  %2187 = fmul fast float %2185, %2182
  %2188 = fmul fast float %2186, %2183
  %2189 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2190 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2191 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2189, %dx.types.Handle %2190, float %2187, float %2188, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2192 = extractvalue %dx.types.ResRet.f32 %2191, 0
  %2193 = fmul fast float %2192, 2.000000e+00
  %2194 = fadd fast float %2193, -1.000000e+00
  %2195 = fmul fast float %2194, %1687
  %2196 = fsub fast float -0.000000e+00, %2195
  %2197 = fcmp fast ogt float %2103, %2196
  %2198 = zext i1 %2197 to i32
  %2199 = icmp ne i32 %2089, 0
  %2200 = xor i1 %2199, %2197
  br i1 %2200, label %2201, label %2303

; <label>:2201                                    ; preds = %2088
  %2202 = fsub fast float %2091, %2090
  %2203 = fsub fast float %2202, %2103
  %2204 = fsub fast float %2203, %2195
  %2205 = fdiv fast float %2202, %2204
  %2206 = fmul fast float %2205, %2085
  %2207 = fadd fast float %2206, %2092
  %2208 = call float @dx.op.binary.f32(i32 35, float %2207, float %2074)  ; FMax(a,b)
  %2209 = call float @dx.op.binary.f32(i32 36, float %2208, float %1758)  ; FMin(a,b)
  %2210 = fmul fast float %2209, %1709
  %2211 = fmul fast float %2209, %1712
  %2212 = fadd fast float %2210, %1700
  %2213 = fadd fast float %2211, %1703
  %2214 = fdiv fast float %2212, %1685
  %2215 = fdiv fast float %2213, %1686
  %2216 = fmul fast float %2214, 5.000000e-01
  %2217 = fmul fast float %2215, 5.000000e-01
  %2218 = fadd fast float %2216, 5.000000e-01
  %2219 = fsub fast float 5.000000e-01, %2217
  %2220 = call float @dx.op.unary.f32(i32 7, float %2218)  ; Saturate(value)
  %2221 = call float @dx.op.unary.f32(i32 7, float %2219)  ; Saturate(value)
  %2222 = call float @dx.op.binary.f32(i32 36, float %2220, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2223 = call float @dx.op.binary.f32(i32 36, float %2221, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2224 = fmul fast float %2222, %1782
  %2225 = fmul fast float %2223, %1783
  %2226 = fptoui float %2224 to i32
  %2227 = fptoui float %2225 to i32
  %2228 = mul i32 %2227, %1689
  %2229 = add i32 %2226, %1691
  %2230 = add i32 %2229, %2228
  %2231 = shl i32 %2230, 3
  %2232 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2122, i32 %2231, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2233 = extractvalue %dx.types.ResRet.i32 %2232, 0
  %2234 = shl i32 %2233, 3
  %2235 = and i32 %2234, 32760
  %2236 = lshr i32 %2233, 9
  %2237 = and i32 %2236, 32760
  %2238 = lshr i32 %2233, 24
  %2239 = and i32 %2238, 15
  %2240 = lshr i32 %2233, 28
  %2241 = add nuw nsw i32 %2239, 25
  %2242 = add nuw nsw i32 %2240, 25
  %2243 = and i32 %2241, 31
  %2244 = and i32 %2242, 31
  %2245 = shl i32 1, %2243
  %2246 = shl i32 1, %2244
  %2247 = icmp ugt i32 %2239, 7
  %2248 = icmp slt i32 %2233, 0
  %2249 = select i1 %2247, i32 %2245, i32 1
  %2250 = select i1 %2248, i32 %2246, i32 1
  %2251 = uitofp i32 %2249 to float
  %2252 = uitofp i32 %2250 to float
  %2253 = fmul fast float %2251, %2222
  %2254 = fmul fast float %2252, %2223
  %2255 = fptoui float %2253 to i32
  %2256 = fptoui float %2254 to i32
  %2257 = shl i32 1, %2239
  %2258 = shl i32 1, %2240
  %2259 = call float @dx.op.unary.f32(i32 22, float %2253)  ; Frc(value)
  %2260 = call float @dx.op.unary.f32(i32 22, float %2254)  ; Frc(value)
  %2261 = icmp eq i32 %2255, 0
  %2262 = icmp eq i32 %2256, 0
  %2263 = select i1 %2261, float 0.000000e+00, float 5.000000e-01
  %2264 = select i1 %2262, float 0.000000e+00, float 5.000000e-01
  %2265 = add i32 %2255, 1
  %2266 = add i32 %2256, 1
  %2267 = icmp eq i32 %2265, %2249
  %2268 = icmp eq i32 %2266, %2250
  %2269 = uitofp i32 %2257 to float
  %2270 = select i1 %2247, float 1.280000e+02, float %2269
  %2271 = uitofp i32 %2258 to float
  %2272 = select i1 %2248, float 1.280000e+02, float %2271
  %2273 = fsub fast float %2270, %2263
  %2274 = fsub fast float %2272, %2264
  %2275 = select i1 %2267, float -0.000000e+00, float -5.000000e-01
  %2276 = fadd fast float %2273, %2275
  %2277 = select i1 %2268, float -0.000000e+00, float -5.000000e-01
  %2278 = fadd fast float %2274, %2277
  %2279 = fmul fast float %2276, %2259
  %2280 = fmul fast float %2278, %2260
  %2281 = fadd fast float %2279, %2263
  %2282 = fadd fast float %2280, %2264
  %2283 = fadd fast float %2270, -1.500000e+00
  %2284 = fadd fast float %2272, -1.500000e+00
  %2285 = call float @dx.op.binary.f32(i32 35, float %2281, float 5.000000e-01)  ; FMax(a,b)
  %2286 = call float @dx.op.binary.f32(i32 35, float %2282, float 5.000000e-01)  ; FMax(a,b)
  %2287 = call float @dx.op.binary.f32(i32 36, float %2285, float %2283)  ; FMin(a,b)
  %2288 = call float @dx.op.binary.f32(i32 36, float %2286, float %2284)  ; FMin(a,b)
  %2289 = uitofp i32 %2235 to float
  %2290 = uitofp i32 %2237 to float
  %2291 = fadd fast float %2287, %2289
  %2292 = fadd fast float %2288, %2290
  %2293 = fmul fast float %2185, %2291
  %2294 = fmul fast float %2186, %2292
  %2295 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2296 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2295, %dx.types.Handle %2190, float %2293, float %2294, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2297 = extractvalue %dx.types.ResRet.f32 %2296, 0
  %2298 = fcmp fast ogt float %2297, 5.000000e-01
  %2299 = xor i32 %2198, 1
  %2300 = select i1 %2298, float %2209, float %2094
  %2301 = select i1 %2298, i32 %2299, i32 %2095
  %2302 = zext i1 %2298 to i32
  br label %2303

; <label>:2303                                    ; preds = %2201, %2088
  %2304 = phi float [ %2094, %2088 ], [ %2300, %2201 ]
  %2305 = phi i32 [ %2095, %2088 ], [ %2301, %2201 ]
  %2306 = phi i32 [ 0, %2088 ], [ %2302, %2201 ]
  %2307 = icmp ne i32 %2306, 0
  %2308 = fcmp fast oge float %2097, %1758
  %2309 = or i1 %2308, %2307
  br i1 %2309, label %2313, label %2310

; <label>:2310                                    ; preds = %2303
  %2311 = add nuw nsw i32 %2093, 1
  %2312 = icmp slt i32 %2311, %2081
  br i1 %2312, label %2088, label %2313

; <label>:2313                                    ; preds = %2310, %2303
  %2314 = phi i32 [ 0, %2310 ], [ %2306, %2303 ]
  br label %2315

; <label>:2315                                    ; preds = %2313, %2079, %2070, %1760, %1626
  %2316 = phi float [ %2075, %2070 ], [ %1623, %1760 ], [ %1623, %1626 ], [ %2075, %2079 ], [ %2304, %2313 ]
  %2317 = phi i32 [ %2076, %2070 ], [ 0, %1760 ], [ 0, %1626 ], [ %2076, %2079 ], [ %2305, %2313 ]
  %2318 = phi i32 [ %2077, %2070 ], [ 0, %1760 ], [ 0, %1626 ], [ 0, %2079 ], [ %2314, %2313 ]
  %2319 = icmp ne i32 %2318, 0
  %2320 = fcmp fast olt float %2316, %1627
  %2321 = and i1 %2320, %2319
  %2322 = icmp ne i32 %2317, 0
  %2323 = zext i1 %2322 to i32
  %2324 = select i1 %2321, float %2316, float %1627
  %2325 = select i1 %2321, i32 %1634, i32 %1628
  %2326 = select i1 %2321, i32 %2323, i32 %1629
  %2327 = add nuw i32 %1630, 1
  %2328 = icmp eq i32 %2327, %1618
  br i1 %2328, label %2329, label %1626

; <label>:2329                                    ; preds = %2315
  br label %2330

; <label>:2330                                    ; preds = %2329, %1622
  %2331 = phi float [ %1623, %1622 ], [ %2324, %2329 ]
  %2332 = phi i32 [ 0, %1622 ], [ %2325, %2329 ]
  %2333 = phi i32 [ 0, %1622 ], [ %2326, %2329 ]
  %2334 = fcmp fast olt float %2331, %1623
  br i1 %2334, label %2335, label %2863

; <label>:2335                                    ; preds = %2330
  %2336 = mul i32 %2332, 3
  %2337 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2338 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2337, i32 %2336, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2339 = extractvalue %dx.types.ResRet.f32 %2338, 3
  %2340 = bitcast float %2339 to i32
  %2341 = fmul fast float %2331, %153
  %2342 = fmul fast float %2331, %154
  %2343 = fmul fast float %2331, %155
  %2344 = fmul fast float %2331, %175
  %2345 = call float @dx.op.binary.f32(i32 35, float %2344, float 0.000000e+00)  ; FMax(a,b)
  %2346 = icmp eq i32 %2333, 0
  br i1 %2346, label %2863, label %2347

; <label>:2347                                    ; preds = %2335
  %2348 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2349 = extractvalue %dx.types.CBufRet.i32 %2348, 1
  %2350 = icmp ult i32 %2340, %2349
  br i1 %2350, label %2351, label %2824

; <label>:2351                                    ; preds = %2347
  %2352 = mul i32 %2340, 6
  %2353 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2354 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2353, i32 %2352, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2355 = extractvalue %dx.types.ResRet.f32 %2354, 0
  %2356 = extractvalue %dx.types.ResRet.f32 %2354, 1
  %2357 = extractvalue %dx.types.ResRet.f32 %2354, 2
  %2358 = or i32 %2352, 1
  %2359 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2353, i32 %2358, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2360 = extractvalue %dx.types.ResRet.f32 %2359, 0
  %2361 = extractvalue %dx.types.ResRet.f32 %2359, 1
  %2362 = extractvalue %dx.types.ResRet.f32 %2359, 2
  %2363 = extractvalue %dx.types.ResRet.f32 %2359, 3
  %2364 = add i32 %2352, 2
  %2365 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2353, i32 %2364, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2366 = extractvalue %dx.types.ResRet.f32 %2365, 0
  %2367 = extractvalue %dx.types.ResRet.f32 %2365, 1
  %2368 = extractvalue %dx.types.ResRet.f32 %2365, 2
  %2369 = extractvalue %dx.types.ResRet.f32 %2365, 3
  %2370 = add i32 %2352, 3
  %2371 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2353, i32 %2370, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2372 = extractvalue %dx.types.ResRet.f32 %2371, 0
  %2373 = extractvalue %dx.types.ResRet.f32 %2371, 1
  %2374 = extractvalue %dx.types.ResRet.f32 %2371, 2
  %2375 = extractvalue %dx.types.ResRet.f32 %2371, 3
  %2376 = fmul fast float %2355, 2.097152e+06
  %2377 = fmul fast float %2356, 2.097152e+06
  %2378 = fmul fast float %2357, 2.097152e+06
  %2379 = add i32 %2352, 4
  %2380 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2353, i32 %2379, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2381 = extractvalue %dx.types.ResRet.f32 %2380, 0
  %2382 = extractvalue %dx.types.ResRet.f32 %2380, 1
  %2383 = extractvalue %dx.types.ResRet.f32 %2380, 2
  %2384 = extractvalue %dx.types.ResRet.f32 %2380, 3
  %2385 = bitcast float %2381 to i32
  %2386 = bitcast float %2382 to i32
  %2387 = add i32 %2352, 5
  %2388 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2353, i32 %2387, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2389 = extractvalue %dx.types.ResRet.f32 %2388, 0
  %2390 = extractvalue %dx.types.ResRet.f32 %2388, 1
  %2391 = extractvalue %dx.types.ResRet.f32 %2388, 2
  %2392 = extractvalue %dx.types.ResRet.f32 %2388, 3
  %2393 = and i32 %2386, 65536
  %2394 = icmp ne i32 %2393, 0
  %2395 = and i32 %2386, 131072
  %2396 = icmp ne i32 %2395, 0
  %2397 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 0
  %2398 = bitcast i32* %2397 to float*
  store float %2383, float* %2398, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2399 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 1
  %2400 = bitcast i32* %2399 to float*
  store float %2384, float* %2400, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2401 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 2
  %2402 = bitcast i32* %2401 to float*
  store float %2389, float* %2402, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2403 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 3
  %2404 = bitcast i32* %2403 to float*
  store float %2390, float* %2404, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2405 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 4
  %2406 = bitcast i32* %2405 to float*
  store float %2391, float* %2406, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2407 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 5
  %2408 = bitcast i32* %2407 to float*
  store float %2392, float* %2408, align 4, !tbaa !64, !alias.scope !80, !noalias !83
  %2409 = select i1 %2396, float 7.000000e+01, float 2.000000e+01
  %2410 = fadd fast float %2341, %167
  %2411 = fsub fast float %2410, %2376
  %2412 = fsub fast float %2411, %2363
  %2413 = fadd fast float %2342, %168
  %2414 = fsub fast float %2413, %2377
  %2415 = fsub fast float %2414, %2369
  %2416 = fadd fast float %2343, %169
  %2417 = fsub fast float %2416, %2378
  %2418 = fsub fast float %2417, %2375
  %2419 = fmul fast float %2412, %2360
  %2420 = call float @dx.op.tertiary.f32(i32 46, float %2415, float %2366, float %2419)  ; FMad(a,b,c)
  %2421 = call float @dx.op.tertiary.f32(i32 46, float %2418, float %2372, float %2420)  ; FMad(a,b,c)
  %2422 = fmul fast float %2412, %2361
  %2423 = call float @dx.op.tertiary.f32(i32 46, float %2415, float %2367, float %2422)  ; FMad(a,b,c)
  %2424 = call float @dx.op.tertiary.f32(i32 46, float %2418, float %2373, float %2423)  ; FMad(a,b,c)
  %2425 = fmul fast float %2412, %2362
  %2426 = call float @dx.op.tertiary.f32(i32 46, float %2415, float %2368, float %2425)  ; FMad(a,b,c)
  %2427 = call float @dx.op.tertiary.f32(i32 46, float %2418, float %2374, float %2426)  ; FMad(a,b,c)
  %2428 = fmul fast float %2372, %2372
  %2429 = fmul fast float %2373, %2373
  %2430 = fmul fast float %2374, %2374
  %2431 = fcmp fast ogt float %2428, 0.000000e+00
  br i1 %2431, label %2432, label %2437

; <label>:2432                                    ; preds = %2351
  %2433 = fcmp uge float %2372, 0.000000e+00
  %2434 = zext i1 %2433 to i32
  %2435 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 %2434
  %2436 = load i32, i32* %2435, align 4, !tbaa !64, !noalias !83
  br label %2437

; <label>:2437                                    ; preds = %2432, %2351
  %2438 = phi i32 [ %2436, %2432 ], [ 0, %2351 ]
  %2439 = fcmp fast ogt float %2429, 0.000000e+00
  br i1 %2439, label %2440, label %2446

; <label>:2440                                    ; preds = %2437
  %2441 = fcmp fast olt float %2373, 0.000000e+00
  %2442 = select i1 %2441, i32 2, i32 3
  %2443 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 %2442
  %2444 = load i32, i32* %2443, align 4, !tbaa !64, !noalias !83
  %2445 = or i32 %2444, %2438
  br label %2446

; <label>:2446                                    ; preds = %2440, %2437
  %2447 = phi i32 [ %2445, %2440 ], [ %2438, %2437 ]
  %2448 = fcmp fast ogt float %2430, 0.000000e+00
  br i1 %2448, label %2449, label %2455

; <label>:2449                                    ; preds = %2446
  %2450 = fcmp fast olt float %2374, 0.000000e+00
  %2451 = select i1 %2450, i32 4, i32 5
  %2452 = getelementptr inbounds [6 x i32], [6 x i32]* %51, i32 0, i32 %2451
  %2453 = load i32, i32* %2452, align 4, !tbaa !64, !noalias !83
  %2454 = or i32 %2453, %2447
  br label %2455

; <label>:2455                                    ; preds = %2449, %2446
  %2456 = phi i32 [ %2454, %2449 ], [ %2447, %2446 ]
  %2457 = icmp eq i32 %2456, 0
  br i1 %2457, label %2502, label %2458

; <label>:2458                                    ; preds = %2455
  br label %2459

; <label>:2459                                    ; preds = %2459, %2458
  %2460 = phi i32 [ %2465, %2459 ], [ %2456, %2458 ]
  %2461 = phi i32 [ %2499, %2459 ], [ 0, %2458 ]
  %2462 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %2460)  ; FirstbitLo(value)
  %2463 = and i32 %2462, 31
  %2464 = shl i32 1, %2463
  %2465 = xor i32 %2464, %2460
  %2466 = add i32 %2462, %2385
  %2467 = mul i32 %2466, 10
  %2468 = add i32 %2467, 6
  %2469 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2470 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2469, i32 %2468, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2471 = extractvalue %dx.types.ResRet.f32 %2470, 3
  %2472 = add i32 %2467, 7
  %2473 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2469, i32 %2472, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2474 = extractvalue %dx.types.ResRet.f32 %2473, 3
  %2475 = add i32 %2467, 8
  %2476 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2469, i32 %2475, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2477 = extractvalue %dx.types.ResRet.f32 %2476, 3
  %2478 = add i32 %2467, 9
  %2479 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2469, i32 %2478, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2480 = extractvalue %dx.types.ResRet.f32 %2479, 0
  %2481 = extractvalue %dx.types.ResRet.f32 %2479, 1
  %2482 = extractvalue %dx.types.ResRet.f32 %2479, 2
  %2483 = fsub fast float %2421, %2471
  %2484 = fsub fast float %2424, %2474
  %2485 = fsub fast float %2427, %2477
  %2486 = call float @dx.op.unary.f32(i32 6, float %2483)  ; FAbs(value)
  %2487 = call float @dx.op.unary.f32(i32 6, float %2484)  ; FAbs(value)
  %2488 = call float @dx.op.unary.f32(i32 6, float %2485)  ; FAbs(value)
  %2489 = fmul fast float %2409, 5.000000e-01
  %2490 = fadd fast float %2480, %2489
  %2491 = fadd fast float %2481, %2489
  %2492 = fadd fast float %2482, %2489
  %2493 = fcmp fast ole float %2486, %2490
  %2494 = fcmp fast ole float %2487, %2491
  %2495 = fcmp fast ole float %2488, %2492
  %2496 = and i1 %2493, %2494
  %2497 = and i1 %2496, %2495
  %2498 = select i1 %2497, i32 %2464, i32 0
  %2499 = or i32 %2498, %2461
  %2500 = icmp eq i32 %2460, %2464
  br i1 %2500, label %2501, label %2459

; <label>:2501                                    ; preds = %2459
  br label %2502

; <label>:2502                                    ; preds = %2501, %2455
  %2503 = phi i32 [ 0, %2455 ], [ %2499, %2501 ]
  %2504 = select i1 %2394, i32 1, i32 %2503
  %2505 = icmp eq i32 %2504, 0
  br i1 %2505, label %2824, label %2506

; <label>:2506                                    ; preds = %2502
  br label %2507

; <label>:2507                                    ; preds = %2530, %2506
  %2508 = phi float [ %2531, %2530 ], [ 0.000000e+00, %2506 ]
  %2509 = phi float [ %2532, %2530 ], [ 0.000000e+00, %2506 ]
  %2510 = phi float [ %2533, %2530 ], [ 0.000000e+00, %2506 ]
  %2511 = phi float [ %2534, %2530 ], [ 0.000000e+00, %2506 ]
  %2512 = phi float [ %2535, %2530 ], [ 0.000000e+00, %2506 ]
  %2513 = phi i32 [ %2536, %2530 ], [ 0, %2506 ]
  %2514 = phi i32 [ %2537, %2530 ], [ 0, %2506 ]
  %2515 = phi i32 [ %2538, %2530 ], [ 0, %2506 ]
  %2516 = phi i32 [ %2520, %2530 ], [ %2504, %2506 ]
  %2517 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %2516)  ; FirstbitLo(value)
  %2518 = and i32 %2517, 31
  %2519 = shl i32 1, %2518
  %2520 = xor i32 %2519, %2516
  %2521 = add i32 %2517, %2385
  %2522 = mul i32 %2521, 10
  %2523 = add i32 %2522, 4
  %2524 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2525 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2524, i32 %2523, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2526 = extractvalue %dx.types.ResRet.f32 %2525, 3
  %2527 = bitcast float %2526 to i32
  %2528 = and i32 %2527, 16777216
  %2529 = icmp eq i32 %2528, 0
  br i1 %2529, label %2530, label %2540

; <label>:2530                                    ; preds = %3296, %2822, %2790, %2759, %2597, %2544, %2540, %2507
  %2531 = phi float [ %2508, %2507 ], [ %3303, %2822 ], [ %2508, %2790 ], [ %2508, %3296 ], [ %2508, %2759 ], [ %2508, %2597 ], [ %2508, %2544 ], [ %2508, %2540 ]
  %2532 = phi float [ %2509, %2507 ], [ %2817, %2822 ], [ %2817, %2790 ], [ %2509, %3296 ], [ %2509, %2759 ], [ %2509, %2597 ], [ %2509, %2544 ], [ %2509, %2540 ]
  %2533 = phi float [ %2510, %2507 ], [ %2818, %2822 ], [ %2818, %2790 ], [ %2510, %3296 ], [ %2510, %2759 ], [ %2510, %2597 ], [ %2510, %2544 ], [ %2510, %2540 ]
  %2534 = phi float [ %2511, %2507 ], [ %2819, %2822 ], [ %2819, %2790 ], [ %2511, %3296 ], [ %2511, %2759 ], [ %2511, %2597 ], [ %2511, %2544 ], [ %2511, %2540 ]
  %2535 = phi float [ %2512, %2507 ], [ %2820, %2822 ], [ %2820, %2790 ], [ %2512, %3296 ], [ %2512, %2759 ], [ %2512, %2597 ], [ %2512, %2544 ], [ %2512, %2540 ]
  %2536 = phi i32 [ %2513, %2507 ], [ %2734, %2822 ], [ %2513, %2790 ], [ %2513, %3296 ], [ %2513, %2759 ], [ %2513, %2597 ], [ %2513, %2544 ], [ %2513, %2540 ]
  %2537 = phi i32 [ %2514, %2507 ], [ %2736, %2822 ], [ %2514, %2790 ], [ %2514, %3296 ], [ %2514, %2759 ], [ %2514, %2597 ], [ %2514, %2544 ], [ %2514, %2540 ]
  %2538 = phi i32 [ %2515, %2507 ], [ %2640, %2822 ], [ %2515, %2790 ], [ %2515, %3296 ], [ %2515, %2759 ], [ %2515, %2597 ], [ %2515, %2544 ], [ %2515, %2540 ]
  %2539 = icmp eq i32 %2516, %2519
  br i1 %2539, label %2823, label %2507

; <label>:2540                                    ; preds = %2507
  %2541 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2542 = extractvalue %dx.types.CBufRet.i32 %2541, 0
  %2543 = icmp ult i32 %2521, %2542
  br i1 %2543, label %2544, label %2530

; <label>:2544                                    ; preds = %2540
  %2545 = extractvalue %dx.types.ResRet.f32 %2525, 0
  %2546 = extractvalue %dx.types.ResRet.f32 %2525, 1
  %2547 = extractvalue %dx.types.ResRet.f32 %2525, 2
  %2548 = add i32 %2522, 5
  %2549 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2524, i32 %2548, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2550 = add i32 %2522, 6
  %2551 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2524, i32 %2550, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2552 = add i32 %2522, 7
  %2553 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2524, i32 %2552, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2554 = add i32 %2522, 8
  %2555 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2524, i32 %2554, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2556 = call float @dx.op.unary.f32(i32 6, float %2545)  ; FAbs(value)
  %2557 = call float @dx.op.unary.f32(i32 6, float %2546)  ; FAbs(value)
  %2558 = call float @dx.op.unary.f32(i32 6, float %2547)  ; FAbs(value)
  %2559 = lshr i32 %2527, 16
  %2560 = and i32 %2559, 15
  %2561 = extractvalue %dx.types.ResRet.f32 %2555, 3
  %2562 = extractvalue %dx.types.ResRet.f32 %2555, 2
  %2563 = extractvalue %dx.types.ResRet.f32 %2555, 1
  %2564 = extractvalue %dx.types.ResRet.f32 %2555, 0
  %2565 = extractvalue %dx.types.ResRet.f32 %2553, 3
  %2566 = extractvalue %dx.types.ResRet.f32 %2553, 2
  %2567 = extractvalue %dx.types.ResRet.f32 %2553, 1
  %2568 = extractvalue %dx.types.ResRet.f32 %2553, 0
  %2569 = extractvalue %dx.types.ResRet.f32 %2551, 3
  %2570 = extractvalue %dx.types.ResRet.f32 %2551, 2
  %2571 = extractvalue %dx.types.ResRet.f32 %2551, 1
  %2572 = extractvalue %dx.types.ResRet.f32 %2551, 0
  %2573 = fsub fast float %2421, %2569
  %2574 = fsub fast float %2424, %2565
  %2575 = fsub fast float %2427, %2561
  %2576 = fmul fast float %2573, %2572
  %2577 = call float @dx.op.tertiary.f32(i32 46, float %2574, float %2568, float %2576)  ; FMad(a,b,c)
  %2578 = call float @dx.op.tertiary.f32(i32 46, float %2575, float %2564, float %2577)  ; FMad(a,b,c)
  %2579 = fmul fast float %2573, %2571
  %2580 = call float @dx.op.tertiary.f32(i32 46, float %2574, float %2567, float %2579)  ; FMad(a,b,c)
  %2581 = call float @dx.op.tertiary.f32(i32 46, float %2575, float %2563, float %2580)  ; FMad(a,b,c)
  %2582 = fmul fast float %2573, %2570
  %2583 = call float @dx.op.tertiary.f32(i32 46, float %2574, float %2566, float %2582)  ; FMad(a,b,c)
  %2584 = call float @dx.op.tertiary.f32(i32 46, float %2575, float %2562, float %2583)  ; FMad(a,b,c)
  %2585 = call float @dx.op.unary.f32(i32 6, float %2578)  ; FAbs(value)
  %2586 = call float @dx.op.unary.f32(i32 6, float %2581)  ; FAbs(value)
  %2587 = call float @dx.op.unary.f32(i32 6, float %2584)  ; FAbs(value)
  %2588 = fmul fast float %2409, 5.000000e-01
  %2589 = fadd fast float %2556, %2588
  %2590 = fadd fast float %2557, %2588
  %2591 = fadd fast float %2558, %2588
  %2592 = fcmp fast ole float %2585, %2589
  %2593 = fcmp fast ole float %2586, %2590
  %2594 = fcmp fast ole float %2587, %2591
  %2595 = and i1 %2592, %2593
  %2596 = and i1 %2595, %2594
  br i1 %2596, label %2597, label %2530

; <label>:2597                                    ; preds = %2544
  %2598 = lshr i32 %2527, 8
  %2599 = and i32 %2598, 255
  %2600 = and i32 %2527, 255
  %2601 = extractvalue %dx.types.ResRet.f32 %2549, 3
  %2602 = extractvalue %dx.types.ResRet.f32 %2549, 2
  %2603 = extractvalue %dx.types.ResRet.f32 %2549, 1
  %2604 = extractvalue %dx.types.ResRet.f32 %2549, 0
  %2605 = fsub fast float -0.000000e+00, %2556
  %2606 = fsub fast float -0.000000e+00, %2557
  %2607 = call float @dx.op.binary.f32(i32 35, float %2578, float %2605)  ; FMax(a,b)
  %2608 = call float @dx.op.binary.f32(i32 35, float %2581, float %2606)  ; FMax(a,b)
  %2609 = call float @dx.op.binary.f32(i32 36, float %2607, float %2556)  ; FMin(a,b)
  %2610 = call float @dx.op.binary.f32(i32 36, float %2608, float %2557)  ; FMin(a,b)
  %2611 = fdiv fast float %2609, %2556
  %2612 = fdiv fast float %2610, %2557
  %2613 = fmul fast float %2611, 5.000000e-01
  %2614 = fmul fast float %2612, 5.000000e-01
  %2615 = fadd fast float %2613, 5.000000e-01
  %2616 = fsub fast float 5.000000e-01, %2614
  %2617 = call float @dx.op.unary.f32(i32 7, float %2615)  ; Saturate(value)
  %2618 = call float @dx.op.unary.f32(i32 7, float %2616)  ; Saturate(value)
  %2619 = call float @dx.op.binary.f32(i32 36, float %2617, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2620 = call float @dx.op.binary.f32(i32 36, float %2618, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2621 = select i1 %178, float %2602, float %2604
  %2622 = bitcast float %2621 to i32
  %2623 = and i32 %2622, 65535
  %2624 = lshr i32 %2622, 16
  %2625 = select i1 %178, float %2601, float %2603
  %2626 = bitcast float %2625 to i32
  %2627 = uitofp i32 %2623 to float
  %2628 = uitofp i32 %2624 to float
  %2629 = fmul fast float %2619, %2627
  %2630 = fmul fast float %2620, %2628
  %2631 = fptoui float %2629 to i32
  %2632 = fptoui float %2630 to i32
  %2633 = mul i32 %2632, %2623
  %2634 = add i32 %2631, %2626
  %2635 = add i32 %2634, %2633
  %2636 = shl i32 %2635, 3
  %2637 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2638 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2637, i32 %2636, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2639 = extractvalue %dx.types.ResRet.i32 %2638, 0
  %2640 = extractvalue %dx.types.ResRet.i32 %2638, 1
  %2641 = shl i32 %2639, 3
  %2642 = and i32 %2641, 32760
  %2643 = lshr i32 %2639, 9
  %2644 = and i32 %2643, 32760
  %2645 = lshr i32 %2639, 24
  %2646 = and i32 %2645, 15
  %2647 = lshr i32 %2639, 28
  %2648 = add nuw nsw i32 %2646, 25
  %2649 = add nuw nsw i32 %2647, 25
  %2650 = and i32 %2648, 31
  %2651 = and i32 %2649, 31
  %2652 = shl i32 1, %2650
  %2653 = shl i32 1, %2651
  %2654 = icmp ugt i32 %2646, 7
  %2655 = icmp slt i32 %2639, 0
  %2656 = select i1 %2654, i32 %2652, i32 1
  %2657 = select i1 %2655, i32 %2653, i32 1
  %2658 = uitofp i32 %2656 to float
  %2659 = uitofp i32 %2657 to float
  %2660 = fmul fast float %2658, %2619
  %2661 = fmul fast float %2659, %2620
  %2662 = fptoui float %2660 to i32
  %2663 = fptoui float %2661 to i32
  %2664 = shl i32 1, %2646
  %2665 = shl i32 1, %2647
  %2666 = call float @dx.op.unary.f32(i32 22, float %2660)  ; Frc(value)
  %2667 = call float @dx.op.unary.f32(i32 22, float %2661)  ; Frc(value)
  %2668 = icmp eq i32 %2662, 0
  %2669 = icmp eq i32 %2663, 0
  %2670 = select i1 %2668, float 0.000000e+00, float 5.000000e-01
  %2671 = select i1 %2669, float 0.000000e+00, float 5.000000e-01
  %2672 = add i32 %2662, 1
  %2673 = add i32 %2663, 1
  %2674 = icmp eq i32 %2672, %2656
  %2675 = icmp eq i32 %2673, %2657
  %2676 = uitofp i32 %2664 to float
  %2677 = select i1 %2654, float 1.280000e+02, float %2676
  %2678 = uitofp i32 %2665 to float
  %2679 = select i1 %2655, float 1.280000e+02, float %2678
  %2680 = fsub fast float %2677, %2670
  %2681 = fsub fast float %2679, %2671
  %2682 = select i1 %2674, float -0.000000e+00, float -5.000000e-01
  %2683 = fadd fast float %2680, %2682
  %2684 = select i1 %2675, float -0.000000e+00, float -5.000000e-01
  %2685 = fadd fast float %2681, %2684
  %2686 = fmul fast float %2683, %2666
  %2687 = fmul fast float %2685, %2667
  %2688 = fadd fast float %2686, %2670
  %2689 = fadd fast float %2687, %2671
  %2690 = fadd fast float %2677, -1.500000e+00
  %2691 = fadd fast float %2679, -1.500000e+00
  %2692 = call float @dx.op.binary.f32(i32 35, float %2688, float 5.000000e-01)  ; FMax(a,b)
  %2693 = call float @dx.op.binary.f32(i32 35, float %2689, float 5.000000e-01)  ; FMax(a,b)
  %2694 = call float @dx.op.binary.f32(i32 36, float %2692, float %2690)  ; FMin(a,b)
  %2695 = call float @dx.op.binary.f32(i32 36, float %2693, float %2691)  ; FMin(a,b)
  %2696 = uitofp i32 %2642 to float
  %2697 = uitofp i32 %2644 to float
  %2698 = fadd fast float %2694, %2696
  %2699 = fadd fast float %2695, %2697
  %2700 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2701 = extractvalue %dx.types.CBufRet.f32 %2700, 0
  %2702 = extractvalue %dx.types.CBufRet.f32 %2700, 1
  %2703 = fmul fast float %2701, %2698
  %2704 = fmul fast float %2702, %2699
  %2705 = call float @dx.op.binary.f32(i32 35, float %2556, float %2557)  ; FMax(a,b)
  %2706 = call float @dx.op.binary.f32(i32 35, float %2345, float 1.000000e+00)  ; FMax(a,b)
  %2707 = fdiv fast float %2705, %2706
  %2708 = call float @dx.op.unary.f32(i32 23, float %2707)  ; Log(value)
  %2709 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2710 = extractvalue %dx.types.CBufRet.f32 %2709, 0
  %2711 = fadd fast float %2710, %2708
  %2712 = call float @dx.op.binary.f32(i32 35, float %2711, float 3.000000e+00)  ; FMax(a,b)
  %2713 = call float @dx.op.binary.f32(i32 36, float %2712, float 1.100000e+01)  ; FMin(a,b)
  %2714 = fptoui float %2713 to i32
  %2715 = sub i32 %2714, %2600
  %2716 = sub i32 %2714, %2599
  %2717 = add i32 %2715, 25
  %2718 = add i32 %2716, 25
  %2719 = and i32 %2717, 31
  %2720 = and i32 %2718, 31
  %2721 = shl i32 1, %2719
  %2722 = shl i32 1, %2720
  %2723 = icmp ugt i32 %2715, 7
  %2724 = icmp ugt i32 %2716, 7
  %2725 = uitofp i32 %2721 to float
  %2726 = select i1 %2723, float %2725, float 1.000000e+00
  %2727 = uitofp i32 %2722 to float
  %2728 = select i1 %2724, float %2727, float 1.000000e+00
  %2729 = fmul fast float %2726, %2619
  %2730 = fmul fast float %2728, %2620
  %2731 = fptoui float %2729 to i32
  %2732 = fptoui float %2730 to i32
  %2733 = shl i32 %2714, 24
  %2734 = or i32 %2733, %2521
  %2735 = shl i32 %2732, 8
  %2736 = add i32 %2735, %2731
  %2737 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2738 = extractvalue %dx.types.CBufRet.f32 %2737, 2
  %2739 = extractvalue %dx.types.CBufRet.f32 %2737, 3
  %2740 = fmul fast float %2738, %2703
  %2741 = fmul fast float %2739, %2704
  %2742 = fadd fast float %2740, 0x3FE0100000000000
  %2743 = fadd fast float %2741, 0x3FE0100000000000
  %2744 = call float @dx.op.unary.f32(i32 22, float %2742)  ; Frc(value)
  %2745 = call float @dx.op.unary.f32(i32 22, float %2743)  ; Frc(value)
  %2746 = fsub fast float 1.000000e+00, %2744
  %2747 = fmul fast float %2746, %2745
  %2748 = fmul fast float %2745, %2744
  %2749 = fsub fast float 1.000000e+00, %2745
  %2750 = fmul fast float %2749, %2744
  %2751 = fmul fast float %2749, %2746
  %2752 = icmp eq i32 %2646, 0
  br i1 %2752, label %2530, label %2753

; <label>:2753                                    ; preds = %2597
  br i1 %2394, label %2759, label %2754

; <label>:2754                                    ; preds = %2753
  %2755 = icmp ult i32 %2560, 2
  br i1 %2755, label %2759, label %2756

; <label>:2756                                    ; preds = %2754
  %2757 = icmp ult i32 %2560, 4
  %2758 = select i1 %2757, float %2429, float %2430
  br label %2759

; <label>:2759                                    ; preds = %2756, %2754, %2753
  %2760 = phi float [ 1.000000e+00, %2753 ], [ %2428, %2754 ], [ %2758, %2756 ]
  %2761 = fcmp fast ogt float %2760, 0.000000e+00
  br i1 %2761, label %2762, label %2530

; <label>:2762                                    ; preds = %2759
  %2763 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2764 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2765 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2763, %dx.types.Handle %2764, float %2703, float %2704, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2766 = extractvalue %dx.types.ResRet.f32 %2765, 0
  %2767 = extractvalue %dx.types.ResRet.f32 %2765, 1
  %2768 = extractvalue %dx.types.ResRet.f32 %2765, 2
  %2769 = extractvalue %dx.types.ResRet.f32 %2765, 3
  %2770 = fdiv fast float %2584, %2558
  %2771 = fmul fast float %2770, 5.000000e-01
  %2772 = fsub fast float 5.000000e-01, %2771
  %2773 = fdiv fast float %2409, %2558
  %2774 = fmul fast float %2773, 2.500000e-01
  %2775 = fcmp uge float %2766, 1.000000e+00
  %2776 = or i1 %2394, %2775
  %2777 = select i1 %2775, float 0.000000e+00, float 1.000000e+00
  br i1 %2776, label %2785, label %2778

; <label>:2778                                    ; preds = %2762
  %2779 = fsub fast float %2772, %2766
  %2780 = call float @dx.op.unary.f32(i32 6, float %2779)  ; FAbs(value)
  %2781 = fsub fast float %2780, %2773
  %2782 = fdiv fast float %2781, %2774
  %2783 = call float @dx.op.unary.f32(i32 7, float %2782)  ; Saturate(value)
  %2784 = fsub fast float 1.000000e+00, %2783
  br label %2785

; <label>:2785                                    ; preds = %2778, %2762
  %2786 = phi float [ %2784, %2778 ], [ %2777, %2762 ]
  %2787 = fcmp uge float %2767, 1.000000e+00
  %2788 = or i1 %2394, %2787
  %2789 = select i1 %2787, float 0.000000e+00, float 1.000000e+00
  br i1 %2788, label %3272, label %3265

; <label>:2790                                    ; preds = %3296
  %2791 = fdiv fast float %3298, %3302
  %2792 = fdiv fast float %3299, %3302
  %2793 = fdiv fast float %3300, %3302
  %2794 = fdiv fast float %3301, %3302
  %2795 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2796 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2795, %dx.types.Handle %2764, float %2703, float %2704, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2797 = extractvalue %dx.types.ResRet.f32 %2796, 0
  %2798 = extractvalue %dx.types.ResRet.f32 %2796, 1
  %2799 = extractvalue %dx.types.ResRet.f32 %2796, 2
  %2800 = extractvalue %dx.types.ResRet.f32 %2796, 3
  %2801 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2795, %dx.types.Handle %2764, float %2703, float %2704, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2802 = extractvalue %dx.types.ResRet.f32 %2801, 0
  %2803 = extractvalue %dx.types.ResRet.f32 %2801, 1
  %2804 = extractvalue %dx.types.ResRet.f32 %2801, 2
  %2805 = extractvalue %dx.types.ResRet.f32 %2801, 3
  %2806 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2795, %dx.types.Handle %2764, float %2703, float %2704, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2807 = extractvalue %dx.types.ResRet.f32 %2806, 0
  %2808 = extractvalue %dx.types.ResRet.f32 %2806, 1
  %2809 = extractvalue %dx.types.ResRet.f32 %2806, 2
  %2810 = extractvalue %dx.types.ResRet.f32 %2806, 3
  %2811 = call float @dx.op.dot4.f32(i32 56, float %2797, float %2798, float %2799, float %2800, float %2791, float %2792, float %2793, float %2794)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2812 = call float @dx.op.dot4.f32(i32 56, float %2802, float %2803, float %2804, float %2805, float %2791, float %2792, float %2793, float %2794)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2813 = call float @dx.op.dot4.f32(i32 56, float %2807, float %2808, float %2809, float %2810, float %2791, float %2792, float %2793, float %2794)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2814 = fmul fast float %2811, %3303
  %2815 = fmul fast float %2812, %3303
  %2816 = fmul fast float %2813, %3303
  %2817 = fadd fast float %2814, %2509
  %2818 = fadd fast float %2815, %2510
  %2819 = fadd fast float %2816, %2511
  %2820 = fadd fast float %3303, %2512
  %2821 = fcmp fast ogt float %3303, %2508
  br i1 %2821, label %2822, label %2530

; <label>:2822                                    ; preds = %2790
  br label %2530

; <label>:2823                                    ; preds = %2530
  br label %2824

; <label>:2824                                    ; preds = %2823, %2502, %2347
  %2825 = phi float [ 0.000000e+00, %2347 ], [ 0.000000e+00, %2502 ], [ %2532, %2823 ]
  %2826 = phi float [ 0.000000e+00, %2347 ], [ 0.000000e+00, %2502 ], [ %2533, %2823 ]
  %2827 = phi float [ 0.000000e+00, %2347 ], [ 0.000000e+00, %2502 ], [ %2534, %2823 ]
  %2828 = phi float [ 0.000000e+00, %2347 ], [ 0.000000e+00, %2502 ], [ %2535, %2823 ]
  %2829 = phi i32 [ 0, %2347 ], [ 0, %2502 ], [ %2536, %2823 ]
  %2830 = phi i32 [ 0, %2347 ], [ 0, %2502 ], [ %2537, %2823 ]
  %2831 = phi i32 [ 0, %2347 ], [ 0, %2502 ], [ %2538, %2823 ]
  %2832 = fcmp fast ogt float %2828, 0.000000e+00
  br i1 %2832, label %2833, label %2863

; <label>:2833                                    ; preds = %2824
  %2834 = fdiv fast float %2825, %2828
  %2835 = fdiv fast float %2826, %2828
  %2836 = fdiv fast float %2827, %2828
  %2837 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2838 = extractvalue %dx.types.CBufRet.i32 %2837, 1
  %2839 = and i32 %2838, %60
  %2840 = and i32 %2838, %61
  %2841 = extractvalue %dx.types.CBufRet.i32 %2837, 2
  %2842 = extractvalue %dx.types.CBufRet.i32 %2837, 3
  %2843 = icmp eq i32 %2839, %2841
  %2844 = icmp eq i32 %2840, %2842
  %2845 = and i1 %2843, %2844
  br i1 %2845, label %2846, label %2863

; <label>:2846                                    ; preds = %2833
  %2847 = extractvalue %dx.types.CBufRet.i32 %2837, 0
  %2848 = icmp ne i32 %2847, 0
  %2849 = fcmp fast ogt float %2828, 0x3FB99999A0000000
  %2850 = and i1 %2849, %2848
  br i1 %2850, label %2851, label %2863

; <label>:2851                                    ; preds = %2846
  %2852 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %2853 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2852, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %2854 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2855 = extractvalue %dx.types.CBufRet.i32 %2854, 0
  %2856 = icmp ult i32 %2853, %2855
  br i1 %2856, label %2857, label %2859

; <label>:2857                                    ; preds = %2851
  %2858 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2858, i32 %2853, i32 0, i32 %2829, i32 %2830, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %2859

; <label>:2859                                    ; preds = %2857, %2851
  %2860 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2861 = extractvalue %dx.types.CBufRet.i32 %2860, 1
  %2862 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2862, i32 %2831, i32 0, i32 %2861, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %2863

; <label>:2863                                    ; preds = %2859, %2846, %2833, %2824, %2335, %2330
  %2864 = phi float [ 0.000000e+00, %2330 ], [ %2834, %2859 ], [ %2834, %2846 ], [ %2834, %2833 ], [ 0.000000e+00, %2824 ], [ 0.000000e+00, %2335 ]
  %2865 = phi float [ 0.000000e+00, %2330 ], [ %2835, %2859 ], [ %2835, %2846 ], [ %2835, %2833 ], [ 0.000000e+00, %2824 ], [ 0.000000e+00, %2335 ]
  %2866 = phi float [ 0.000000e+00, %2330 ], [ %2836, %2859 ], [ %2836, %2846 ], [ %2836, %2833 ], [ 0.000000e+00, %2824 ], [ 0.000000e+00, %2335 ]
  %2867 = select i1 %2334, float %2331, float %1611
  %2868 = select i1 %2334, float 0.000000e+00, float %1612
  %2869 = select i1 %2334, float %2864, float %1613
  %2870 = select i1 %2334, float %2865, float %1614
  %2871 = select i1 %2334, float %2866, float %1615
  br label %2872

; <label>:2872                                    ; preds = %2863, %1610
  %2873 = phi float [ %1611, %1610 ], [ %2867, %2863 ]
  %2874 = phi float [ %1612, %1610 ], [ %2868, %2863 ]
  %2875 = phi float [ %1613, %1610 ], [ %2869, %2863 ]
  %2876 = phi float [ %1614, %1610 ], [ %2870, %2863 ]
  %2877 = phi float [ %1615, %1610 ], [ %2871, %2863 ]
  %2878 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %2879 = extractvalue %dx.types.CBufRet.f32 %2878, 2
  %2880 = fmul fast float %2879, %2875
  %2881 = fmul fast float %2879, %2876
  %2882 = fmul fast float %2879, %2877
  %2883 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %2884 = extractvalue %dx.types.CBufRet.f32 %2883, 0
  %2885 = extractvalue %dx.types.CBufRet.f32 %2883, 1
  %2886 = extractvalue %dx.types.CBufRet.f32 %2883, 2
  %2887 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %2888 = extractvalue %dx.types.CBufRet.f32 %2887, 0
  %2889 = extractvalue %dx.types.CBufRet.f32 %2887, 1
  %2890 = extractvalue %dx.types.CBufRet.f32 %2887, 2
  %2891 = fmul fast float %2884, 2.097152e+06
  %2892 = fmul fast float %2885, 2.097152e+06
  %2893 = fmul fast float %2886, 2.097152e+06
  %2894 = fsub fast float %2888, %142
  %2895 = fadd fast float %2894, %2891
  %2896 = fsub fast float %2889, %146
  %2897 = fadd fast float %2896, %2892
  %2898 = fsub fast float %2890, %150
  %2899 = fadd fast float %2898, %2893
  %2900 = fmul fast float %2895, %2895
  %2901 = fmul fast float %2897, %2897
  %2902 = fadd fast float %2900, %2901
  %2903 = fmul fast float %2899, %2899
  %2904 = fadd fast float %2902, %2903
  %2905 = call float @dx.op.unary.f32(i32 24, float %2904)  ; Sqrt(value)
  %2906 = fmul fast float %2905, 4.000000e+00
  %2907 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %2908 = extractvalue %dx.types.CBufRet.f32 %2907, 1
  %2909 = fdiv fast float %2906, %2908
  %2910 = fadd fast float %2909, -3.000000e+00
  %2911 = call float @dx.op.unary.f32(i32 7, float %2910)  ; Saturate(value)
  %2912 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %2913 = extractvalue %dx.types.CBufRet.f32 %2912, 3
  %2914 = fmul fast float %2913, 0x3FE6666660000000
  %2915 = fsub fast float %2873, %2914
  %2916 = fmul fast float %2913, 0x3FD3333340000000
  %2917 = fdiv fast float %2915, %2916
  %2918 = call float @dx.op.unary.f32(i32 7, float %2917)  ; Saturate(value)
  %2919 = call float @dx.op.binary.f32(i32 35, float %2911, float %2918)  ; FMax(a,b)
  %2920 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2921 = extractvalue %dx.types.CBufRet.i32 %2920, 0
  %2922 = icmp eq i32 %2921, 0
  %2923 = fsub fast float 1.000000e+00, %2874
  br i1 %2922, label %3185, label %2924

; <label>:2924                                    ; preds = %2872
  %2925 = call float @dx.op.unary.f32(i32 7, float %2923)  ; Saturate(value)
  %2926 = fmul fast float %2873, %153
  %2927 = fmul fast float %2873, %154
  %2928 = fmul fast float %2873, %155
  %2929 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2930 = extractvalue %dx.types.CBufRet.f32 %2929, 3
  %2931 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2932 = extractvalue %dx.types.CBufRet.f32 %2931, 2
  %2933 = fadd fast float %2893, %2890
  %2934 = call float @dx.op.binary.f32(i32 36, float %2933, float %2932)  ; FMin(a,b)
  %2935 = fsub fast float %2928, %2934
  %2936 = fadd fast float %2935, %2890
  %2937 = fadd fast float %2936, %2893
  %2938 = call float @dx.op.dot3.f32(i32 55, float %2926, float %2927, float %2937, float %2926, float %2927, float %2937)  ; Dot3(ax,ay,az,bx,by,bz)
  %2939 = call float @dx.op.binary.f32(i32 35, float %2938, float 0x3E45798EE0000000)  ; FMax(a,b)
  %2940 = call float @dx.op.unary.f32(i32 25, float %2939)  ; Rsqrt(value)
  %2941 = fmul fast float %2940, %2938
  %2942 = fmul fast float %2940, %2926
  %2943 = fmul fast float %2940, %2927
  %2944 = fmul fast float %2937, %2940
  %2945 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2946 = extractvalue %dx.types.CBufRet.f32 %2931, 3
  %2947 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2946)  ; FMax(a,b)
  %2948 = fcmp fast ogt float %2947, 0.000000e+00
  %2949 = extractvalue %dx.types.CBufRet.f32 %2931, 1
  %2950 = extractvalue %dx.types.CBufRet.f32 %2945, 1
  br i1 %2948, label %2954, label %2951

; <label>:2951                                    ; preds = %2924
  %2952 = extractvalue %dx.types.CBufRet.f32 %2945, 0
  %2953 = extractvalue %dx.types.CBufRet.f32 %2931, 0
  br label %2978

; <label>:2954                                    ; preds = %2924
  %2955 = fmul fast float %2947, %2940
  %2956 = fmul fast float %2955, %2937
  %2957 = fadd fast float %2956, %2934
  %2958 = fsub fast float %2937, %2956
  %2959 = fsub fast float 1.000000e+00, %2955
  %2960 = fmul fast float %2959, %2941
  %2961 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2962 = extractvalue %dx.types.CBufRet.f32 %2961, 1
  %2963 = fsub fast float %2957, %2962
  %2964 = fmul fast float %2963, %2949
  %2965 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2964)  ; FMax(a,b)
  %2966 = extractvalue %dx.types.CBufRet.f32 %2961, 0
  %2967 = fsub fast float -0.000000e+00, %2965
  %2968 = call float @dx.op.unary.f32(i32 21, float %2967)  ; Exp(value)
  %2969 = fmul fast float %2966, %2968
  %2970 = extractvalue %dx.types.CBufRet.f32 %2945, 3
  %2971 = fsub fast float %2957, %2970
  %2972 = fmul fast float %2971, %2950
  %2973 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2972)  ; FMax(a,b)
  %2974 = extractvalue %dx.types.CBufRet.f32 %2945, 2
  %2975 = fsub fast float -0.000000e+00, %2973
  %2976 = call float @dx.op.unary.f32(i32 21, float %2975)  ; Exp(value)
  %2977 = fmul fast float %2974, %2976
  br label %2978

; <label>:2978                                    ; preds = %2954, %2951
  %2979 = phi float [ %2969, %2954 ], [ %2953, %2951 ]
  %2980 = phi float [ %2977, %2954 ], [ %2952, %2951 ]
  %2981 = phi float [ %2960, %2954 ], [ %2941, %2951 ]
  %2982 = phi float [ %2958, %2954 ], [ %2937, %2951 ]
  %2983 = fmul fast float %2949, %2982
  %2984 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2983)  ; FMax(a,b)
  %2985 = fsub fast float -0.000000e+00, %2984
  %2986 = call float @dx.op.unary.f32(i32 21, float %2985)  ; Exp(value)
  %2987 = fsub fast float 1.000000e+00, %2986
  %2988 = fdiv fast float %2987, %2984
  %2989 = fmul fast float %2984, 0x3FCEBFBE00000000
  %2990 = fsub fast float 0x3FE62E4300000000, %2989
  %2991 = call float @dx.op.unary.f32(i32 6, float %2984)  ; FAbs(value)
  %2992 = fcmp fast ogt float %2991, 0x3F847AE140000000
  %2993 = select i1 %2992, float %2988, float %2990
  %2994 = fmul fast float %2993, %2979
  %2995 = fmul fast float %2950, %2982
  %2996 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2995)  ; FMax(a,b)
  %2997 = fsub fast float -0.000000e+00, %2996
  %2998 = call float @dx.op.unary.f32(i32 21, float %2997)  ; Exp(value)
  %2999 = fsub fast float 1.000000e+00, %2998
  %3000 = fdiv fast float %2999, %2996
  %3001 = fmul fast float %2996, 0x3FCEBFBE00000000
  %3002 = fsub fast float 0x3FE62E4300000000, %3001
  %3003 = call float @dx.op.unary.f32(i32 6, float %2996)  ; FAbs(value)
  %3004 = fcmp fast ogt float %3003, 0x3F847AE140000000
  %3005 = select i1 %3004, float %3000, float %3002
  %3006 = fmul fast float %3005, %2980
  %3007 = fadd fast float %3006, %2994
  %3008 = extractvalue %dx.types.CBufRet.f32 %2929, 0
  %3009 = extractvalue %dx.types.CBufRet.f32 %2929, 1
  %3010 = extractvalue %dx.types.CBufRet.f32 %2929, 2
  %3011 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3012 = extractvalue %dx.types.CBufRet.f32 %3011, 2
  %3013 = fcmp fast ogt float %3012, 0.000000e+00
  br i1 %3013, label %3014, label %3050, !dx.controlflow.hints !93

; <label>:3014                                    ; preds = %2978
  %3015 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %3016 = extractvalue %dx.types.CBufRet.f32 %3015, 0
  %3017 = fmul fast float %3016, %2941
  %3018 = extractvalue %dx.types.CBufRet.f32 %3015, 1
  %3019 = fadd fast float %3017, %3018
  %3020 = call float @dx.op.unary.f32(i32 7, float %3019)  ; Saturate(value)
  %3021 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %3022 = extractvalue %dx.types.CBufRet.f32 %3021, 1
  %3023 = extractvalue %dx.types.CBufRet.f32 %3021, 0
  %3024 = fsub fast float -0.000000e+00, %3023
  %3025 = call float @dx.op.dot2.f32(i32 54, float %2926, float %2927, float %3022, float %3024)  ; Dot2(ax,ay,bx,by)
  %3026 = call float @dx.op.dot2.f32(i32 54, float %2926, float %2927, float %3023, float %3022)  ; Dot2(ax,ay,bx,by)
  %3027 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3028 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3029 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3027, %dx.types.Handle %3028, float %3025, float %3026, float %2937, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3030 = extractvalue %dx.types.ResRet.f32 %3029, 0
  %3031 = extractvalue %dx.types.ResRet.f32 %3029, 1
  %3032 = extractvalue %dx.types.ResRet.f32 %3029, 2
  %3033 = extractvalue %dx.types.CBufRet.f32 %3015, 2
  %3034 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3027, %dx.types.Handle %3028, float %3025, float %3026, float %2937, float undef, i32 undef, i32 undef, i32 undef, float %3033)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3035 = extractvalue %dx.types.ResRet.f32 %3034, 0
  %3036 = extractvalue %dx.types.ResRet.f32 %3034, 1
  %3037 = extractvalue %dx.types.ResRet.f32 %3034, 2
  %3038 = fsub fast float %3030, %3035
  %3039 = fsub fast float %3031, %3036
  %3040 = fsub fast float %3032, %3037
  %3041 = fmul fast float %3038, %3020
  %3042 = fmul fast float %3039, %3020
  %3043 = fmul fast float %3040, %3020
  %3044 = fadd fast float %3041, %3035
  %3045 = fadd fast float %3042, %3036
  %3046 = fadd fast float %3043, %3037
  %3047 = fmul fast float %3044, %3008
  %3048 = fmul fast float %3045, %3009
  %3049 = fmul fast float %3046, %3010
  br label %3050

; <label>:3050                                    ; preds = %3014, %2978
  %3051 = phi float [ %3047, %3014 ], [ %3008, %2978 ]
  %3052 = phi float [ %3048, %3014 ], [ %3009, %2978 ]
  %3053 = phi float [ %3049, %3014 ], [ %3010, %2978 ]
  %3054 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3055 = extractvalue %dx.types.CBufRet.f32 %3054, 0
  %3056 = extractvalue %dx.types.CBufRet.f32 %3054, 1
  %3057 = extractvalue %dx.types.CBufRet.f32 %3054, 2
  %3058 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %3059 = extractvalue %dx.types.CBufRet.f32 %3058, 1
  %3060 = fmul fast float %3059, %3055
  %3061 = fmul fast float %3059, %3056
  %3062 = fmul fast float %3059, %3057
  %3063 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3064 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3065 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3063, %dx.types.Handle %3064, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3066 = extractvalue %dx.types.ResRet.f32 %3065, 0
  %3067 = extractvalue %dx.types.ResRet.f32 %3065, 1
  %3068 = extractvalue %dx.types.ResRet.f32 %3065, 2
  %3069 = fmul fast float %3060, %3066
  %3070 = fmul fast float %3061, %3067
  %3071 = fmul fast float %3062, %3068
  %3072 = fadd fast float %3069, %3051
  %3073 = fadd fast float %3070, %3052
  %3074 = fadd fast float %3071, %3053
  %3075 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3076 = extractvalue %dx.types.CBufRet.f32 %3075, 3
  %3077 = fcmp fast oge float %3076, 0.000000e+00
  %3078 = fcmp fast oeq float %3012, 0.000000e+00
  %3079 = and i1 %3077, %3078
  br i1 %3079, label %3080, label %3151

; <label>:3080                                    ; preds = %3050
  %3081 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %3082 = extractvalue %dx.types.CBufRet.f32 %3081, 0
  %3083 = extractvalue %dx.types.CBufRet.f32 %3081, 1
  %3084 = extractvalue %dx.types.CBufRet.f32 %3081, 2
  %3085 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %3086 = extractvalue %dx.types.CBufRet.f32 %3085, 0
  %3087 = extractvalue %dx.types.CBufRet.f32 %3085, 1
  %3088 = extractvalue %dx.types.CBufRet.f32 %3085, 2
  %3089 = fmul fast float %3059, 0x3FB45F3060000000
  %3090 = fmul fast float %3089, %3086
  %3091 = fmul fast float %3089, %3087
  %3092 = fmul fast float %3089, %3088
  %3093 = fadd fast float %3090, %3082
  %3094 = fadd fast float %3091, %3083
  %3095 = fadd fast float %3092, %3084
  %3096 = extractvalue %dx.types.CBufRet.f32 %3081, 3
  %3097 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %3098 = extractvalue %dx.types.CBufRet.f32 %3097, 0
  %3099 = extractvalue %dx.types.CBufRet.f32 %3097, 1
  %3100 = extractvalue %dx.types.CBufRet.f32 %3097, 2
  %3101 = call float @dx.op.dot3.f32(i32 55, float %2942, float %2943, float %2944, float %3098, float %3099, float %3100)  ; Dot3(ax,ay,az,bx,by,bz)
  %3102 = call float @dx.op.unary.f32(i32 7, float %3101)  ; Saturate(value)
  %3103 = call float @dx.op.unary.f32(i32 23, float %3102)  ; Log(value)
  %3104 = fmul fast float %3103, %3096
  %3105 = call float @dx.op.unary.f32(i32 21, float %3104)  ; Exp(value)
  %3106 = fmul fast float %3105, %3093
  %3107 = fmul fast float %3105, %3094
  %3108 = fmul fast float %3105, %3095
  %3109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %3110 = extractvalue %dx.types.CBufRet.f32 %3109, 3
  %3111 = fcmp fast ogt float %3110, 0.000000e+00
  br i1 %3111, label %3112, label %3137

; <label>:3112                                    ; preds = %3080
  %3113 = extractvalue %dx.types.CBufRet.f32 %3109, 0
  %3114 = extractvalue %dx.types.CBufRet.f32 %3109, 1
  %3115 = extractvalue %dx.types.CBufRet.f32 %3109, 2
  %3116 = fmul fast float %3089, %3113
  %3117 = fmul fast float %3089, %3114
  %3118 = fmul fast float %3089, %3115
  %3119 = fadd fast float %3116, %3082
  %3120 = fadd fast float %3117, %3083
  %3121 = fadd fast float %3118, %3084
  %3122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %3123 = extractvalue %dx.types.CBufRet.f32 %3122, 0
  %3124 = extractvalue %dx.types.CBufRet.f32 %3122, 1
  %3125 = extractvalue %dx.types.CBufRet.f32 %3122, 2
  %3126 = call float @dx.op.dot3.f32(i32 55, float %2942, float %2943, float %2944, float %3123, float %3124, float %3125)  ; Dot3(ax,ay,az,bx,by,bz)
  %3127 = call float @dx.op.unary.f32(i32 7, float %3126)  ; Saturate(value)
  %3128 = call float @dx.op.unary.f32(i32 23, float %3127)  ; Log(value)
  %3129 = fmul fast float %3128, %3096
  %3130 = call float @dx.op.unary.f32(i32 21, float %3129)  ; Exp(value)
  %3131 = fmul fast float %3130, %3119
  %3132 = fmul fast float %3130, %3120
  %3133 = fmul fast float %3130, %3121
  %3134 = fadd fast float %3131, %3106
  %3135 = fadd fast float %3132, %3107
  %3136 = fadd fast float %3133, %3108
  br label %3137

; <label>:3137                                    ; preds = %3112, %3080
  %3138 = phi float [ %3134, %3112 ], [ %3106, %3080 ]
  %3139 = phi float [ %3135, %3112 ], [ %3107, %3080 ]
  %3140 = phi float [ %3136, %3112 ], [ %3108, %3080 ]
  %3141 = fsub fast float %2981, %3076
  %3142 = call float @dx.op.binary.f32(i32 35, float %3141, float 0.000000e+00)  ; FMax(a,b)
  %3143 = fmul fast float %3007, %3142
  %3144 = fsub fast float -0.000000e+00, %3143
  %3145 = call float @dx.op.unary.f32(i32 21, float %3144)  ; Exp(value)
  %3146 = call float @dx.op.unary.f32(i32 7, float %3145)  ; Saturate(value)
  %3147 = fsub fast float 1.000000e+00, %3146
  %3148 = fmul fast float %3147, %3138
  %3149 = fmul fast float %3147, %3139
  %3150 = fmul fast float %3147, %3140
  br label %3151

; <label>:3151                                    ; preds = %3137, %3050
  %3152 = phi float [ %3148, %3137 ], [ 0.000000e+00, %3050 ]
  %3153 = phi float [ %3149, %3137 ], [ 0.000000e+00, %3050 ]
  %3154 = phi float [ %3150, %3137 ], [ 0.000000e+00, %3050 ]
  %3155 = fmul fast float %2981, %3007
  %3156 = fsub fast float -0.000000e+00, %3155
  %3157 = call float @dx.op.unary.f32(i32 21, float %3156)  ; Exp(value)
  %3158 = call float @dx.op.unary.f32(i32 7, float %3157)  ; Saturate(value)
  %3159 = call float @dx.op.binary.f32(i32 35, float %3158, float %2930)  ; FMax(a,b)
  %3160 = extractvalue %dx.types.CBufRet.f32 %3011, 3
  %3161 = fcmp fast ogt float %3160, 0.000000e+00
  %3162 = fcmp fast ogt float %2941, %3160
  %3163 = and i1 %3161, %3162
  %3164 = select i1 %3163, float 0.000000e+00, float %3152
  %3165 = select i1 %3163, float 0.000000e+00, float %3153
  %3166 = select i1 %3163, float 0.000000e+00, float %3154
  %3167 = select i1 %3163, float 1.000000e+00, float %3159
  %3168 = fsub fast float 1.000000e+00, %3167
  %3169 = fmul fast float %3168, %3072
  %3170 = fmul fast float %3168, %3073
  %3171 = fmul fast float %3168, %3074
  %3172 = fadd fast float %3169, %3164
  %3173 = fadd fast float %3170, %3165
  %3174 = fadd fast float %3171, %3166
  %3175 = fmul fast float %3167, %2880
  %3176 = fmul fast float %3167, %2881
  %3177 = fmul fast float %3167, %2882
  %3178 = fmul fast float %2879, %2925
  %3179 = fmul fast float %3178, %3172
  %3180 = fmul fast float %3178, %3173
  %3181 = fmul fast float %3178, %3174
  %3182 = fadd fast float %3179, %3175
  %3183 = fadd fast float %3180, %3176
  %3184 = fadd fast float %3181, %3177
  br label %3185

; <label>:3185                                    ; preds = %3151, %2872
  %3186 = phi float [ %3182, %3151 ], [ %2880, %2872 ]
  %3187 = phi float [ %3183, %3151 ], [ %2881, %2872 ]
  %3188 = phi float [ %3184, %3151 ], [ %2882, %2872 ]
  %3189 = fmul fast float %2919, %2923
  %3190 = fadd fast float %3189, %2874
  %3191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3192 = extractvalue %dx.types.CBufRet.f32 %3191, 1
  %3193 = fcmp fast ogt float %3192, 0.000000e+00
  br i1 %3193, label %3194, label %3226

; <label>:3194                                    ; preds = %3185
  %3195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3196 = extractvalue %dx.types.CBufRet.f32 %3195, 1
  %3197 = fcmp fast ogt float %3196, 0.000000e+00
  br i1 %3197, label %3198, label %3226

; <label>:3198                                    ; preds = %3194
  %3199 = extractvalue %dx.types.CBufRet.f32 %3195, 2
  %3200 = extractvalue %dx.types.CBufRet.f32 %3191, 0
  %3201 = call float @dx.op.binary.f32(i32 35, float %3199, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3202 = call float @dx.op.unary.f32(i32 23, float %3201)  ; Log(value)
  %3203 = fmul fast float %3202, 0x3FF3333340000000
  %3204 = fadd fast float %3200, -2.000000e+00
  %3205 = fadd fast float %3204, %3203
  %3206 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3207 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3208 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3206, %dx.types.Handle %3207, float %153, float %154, float %155, float undef, i32 undef, i32 undef, i32 undef, float %3205)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3209 = extractvalue %dx.types.ResRet.f32 %3208, 0
  %3210 = extractvalue %dx.types.ResRet.f32 %3208, 1
  %3211 = extractvalue %dx.types.ResRet.f32 %3208, 2
  %3212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %3213 = extractvalue %dx.types.CBufRet.f32 %3212, 0
  %3214 = extractvalue %dx.types.CBufRet.f32 %3212, 1
  %3215 = extractvalue %dx.types.CBufRet.f32 %3212, 2
  %3216 = fmul fast float %3213, %3209
  %3217 = fmul fast float %3214, %3210
  %3218 = fmul fast float %3215, %3211
  %3219 = extractvalue %dx.types.CBufRet.f32 %3195, 3
  %3220 = fmul fast float %3219, %2873
  %3221 = call float @dx.op.unary.f32(i32 7, float %3220)  ; Saturate(value)
  %3222 = fmul fast float %3221, %3196
  %3223 = fmul fast float %3216, %3222
  %3224 = fmul fast float %3217, %3222
  %3225 = fmul fast float %3218, %3222
  br label %3226

; <label>:3226                                    ; preds = %3198, %3194, %3185
  %3227 = phi float [ %3223, %3198 ], [ 0.000000e+00, %3194 ], [ 0.000000e+00, %3185 ]
  %3228 = phi float [ %3224, %3198 ], [ 0.000000e+00, %3194 ], [ 0.000000e+00, %3185 ]
  %3229 = phi float [ %3225, %3198 ], [ 0.000000e+00, %3194 ], [ 0.000000e+00, %3185 ]
  %3230 = fmul fast float %2879, %3227
  %3231 = fmul fast float %2879, %3228
  %3232 = fmul fast float %2879, %3229
  %3233 = fadd fast float %3230, %3186
  %3234 = fadd fast float %3231, %3187
  %3235 = fadd fast float %3232, %3188
  %3236 = call float @dx.op.binary.f32(i32 35, float %3234, float %3235)  ; FMax(a,b)
  %3237 = call float @dx.op.binary.f32(i32 35, float %3233, float %3236)  ; FMax(a,b)
  %3238 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %3239 = extractvalue %dx.types.CBufRet.f32 %3238, 2
  %3240 = fcmp fast ogt float %3237, %3239
  br i1 %3240, label %3241, label %3246

; <label>:3241                                    ; preds = %3226
  %3242 = fdiv fast float %3239, %3237
  %3243 = fmul fast float %3242, %3233
  %3244 = fmul fast float %3242, %3234
  %3245 = fmul fast float %3242, %3235
  br label %3246

; <label>:3246                                    ; preds = %3241, %3226
  %3247 = phi float [ %3243, %3241 ], [ %3233, %3226 ]
  %3248 = phi float [ %3244, %3241 ], [ %3234, %3226 ]
  %3249 = phi float [ %3245, %3241 ], [ %3235, %3226 ]
  %3250 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3250, i32 %60, i32 %61, i32 undef, float %3247, float %3248, float %3249, float %3247, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3251 = uitofp i32 %60 to float
  %3252 = uitofp i32 %61 to float
  %3253 = fadd fast float %3251, 5.000000e-01
  %3254 = fadd fast float %3252, 5.000000e-01
  %3255 = call float @dx.op.dot2.f32(i32 54, float %3253, float %3254, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %3256 = call float @dx.op.unary.f32(i32 22, float %3255)  ; Frc(value)
  %3257 = fmul fast float %3256, 0x404A7DD040000000
  %3258 = call float @dx.op.unary.f32(i32 22, float %3257)  ; Frc(value)
  %3259 = fcmp fast olt float %3190, %3258
  %3260 = call float @dx.op.binary.f32(i32 35, float %2873, float 0.000000e+00)  ; FMax(a,b)
  %3261 = select i1 %3259, float -1.000000e+00, float 1.000000e+00
  %3262 = fmul fast float %3261, %3260
  %3263 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3263, i32 %60, i32 %61, i32 undef, float %3262, float %3262, float %3262, float %3262, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3264

; <label>:3264                                    ; preds = %3246, %0
  ret void

; <label>:3265                                    ; preds = %2785
  %3266 = fsub fast float %2772, %2767
  %3267 = call float @dx.op.unary.f32(i32 6, float %3266)  ; FAbs(value)
  %3268 = fsub fast float %3267, %2773
  %3269 = fdiv fast float %3268, %2774
  %3270 = call float @dx.op.unary.f32(i32 7, float %3269)  ; Saturate(value)
  %3271 = fsub fast float 1.000000e+00, %3270
  br label %3272

; <label>:3272                                    ; preds = %3265, %2785
  %3273 = phi float [ %3271, %3265 ], [ %2789, %2785 ]
  %3274 = fcmp uge float %2768, 1.000000e+00
  %3275 = or i1 %2394, %3274
  %3276 = select i1 %3274, float 0.000000e+00, float 1.000000e+00
  br i1 %3275, label %3284, label %3277

; <label>:3277                                    ; preds = %3272
  %3278 = fsub fast float %2772, %2768
  %3279 = call float @dx.op.unary.f32(i32 6, float %3278)  ; FAbs(value)
  %3280 = fsub fast float %3279, %2773
  %3281 = fdiv fast float %3280, %2774
  %3282 = call float @dx.op.unary.f32(i32 7, float %3281)  ; Saturate(value)
  %3283 = fsub fast float 1.000000e+00, %3282
  br label %3284

; <label>:3284                                    ; preds = %3277, %3272
  %3285 = phi float [ %3283, %3277 ], [ %3276, %3272 ]
  %3286 = fcmp uge float %2769, 1.000000e+00
  %3287 = or i1 %2394, %3286
  %3288 = select i1 %3286, float 0.000000e+00, float 1.000000e+00
  br i1 %3287, label %3296, label %3289

; <label>:3289                                    ; preds = %3284
  %3290 = fsub fast float %2772, %2769
  %3291 = call float @dx.op.unary.f32(i32 6, float %3290)  ; FAbs(value)
  %3292 = fsub fast float %3291, %2773
  %3293 = fdiv fast float %3292, %2774
  %3294 = call float @dx.op.unary.f32(i32 7, float %3293)  ; Saturate(value)
  %3295 = fsub fast float 1.000000e+00, %3294
  br label %3296

; <label>:3296                                    ; preds = %3289, %3284
  %3297 = phi float [ %3295, %3289 ], [ %3288, %3284 ]
  %3298 = fmul fast float %2786, %2747
  %3299 = fmul fast float %3273, %2748
  %3300 = fmul fast float %3285, %2750
  %3301 = fmul fast float %3297, %2751
  %3302 = call float @dx.op.dot4.f32(i32 56, float %3298, float %3299, float %3300, float %3301, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3303 = fmul fast float %3302, %2760
  %3304 = fcmp fast ogt float %3303, 0.000000e+00
  br i1 %3304, label %2790, label %2530

; <label>:3305                                    ; preds = %1532
  %3306 = fsub fast float %1519, %1514
  %3307 = call float @dx.op.unary.f32(i32 6, float %3306)  ; FAbs(value)
  %3308 = fsub fast float %3307, %1520
  %3309 = fdiv fast float %3308, %1521
  %3310 = call float @dx.op.unary.f32(i32 7, float %3309)  ; Saturate(value)
  %3311 = fsub fast float 1.000000e+00, %3310
  br label %3312

; <label>:3312                                    ; preds = %3305, %1532
  %3313 = phi float [ %3311, %3305 ], [ %1536, %1532 ]
  %3314 = fcmp uge float %1515, 1.000000e+00
  %3315 = or i1 %1135, %3314
  %3316 = select i1 %3314, float 0.000000e+00, float 1.000000e+00
  br i1 %3315, label %3324, label %3317

; <label>:3317                                    ; preds = %3312
  %3318 = fsub fast float %1519, %1515
  %3319 = call float @dx.op.unary.f32(i32 6, float %3318)  ; FAbs(value)
  %3320 = fsub fast float %3319, %1520
  %3321 = fdiv fast float %3320, %1521
  %3322 = call float @dx.op.unary.f32(i32 7, float %3321)  ; Saturate(value)
  %3323 = fsub fast float 1.000000e+00, %3322
  br label %3324

; <label>:3324                                    ; preds = %3317, %3312
  %3325 = phi float [ %3323, %3317 ], [ %3316, %3312 ]
  %3326 = fcmp uge float %1516, 1.000000e+00
  %3327 = or i1 %1135, %3326
  %3328 = select i1 %3326, float 0.000000e+00, float 1.000000e+00
  br i1 %3327, label %3336, label %3329

; <label>:3329                                    ; preds = %3324
  %3330 = fsub fast float %1519, %1516
  %3331 = call float @dx.op.unary.f32(i32 6, float %3330)  ; FAbs(value)
  %3332 = fsub fast float %3331, %1520
  %3333 = fdiv fast float %3332, %1521
  %3334 = call float @dx.op.unary.f32(i32 7, float %3333)  ; Saturate(value)
  %3335 = fsub fast float 1.000000e+00, %3334
  br label %3336

; <label>:3336                                    ; preds = %3329, %3324
  %3337 = phi float [ %3335, %3329 ], [ %3328, %3324 ]
  %3338 = fmul fast float %1533, %1494
  %3339 = fmul fast float %3313, %1495
  %3340 = fmul fast float %3325, %1497
  %3341 = fmul fast float %3337, %1498
  %3342 = call float @dx.op.dot4.f32(i32 56, float %3338, float %3339, float %3340, float %3341, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3343 = fmul fast float %3342, %1507
  %3344 = fcmp fast ogt float %3343, 0.000000e+00
  br i1 %3344, label %1537, label %1277
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!57}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !36, !44, !50}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 16}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !9}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !9}
!12 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!15 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!16 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!17 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !7}
!18 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!19 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!20 = !{i32 12, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 12, i32 1, i32 11, i32 0, null}
!21 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !7}
!22 = !{i32 14, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 12, i32 0, !9}
!23 = !{i32 15, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 12, i32 0, !9}
!24 = !{i32 16, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 16, i32 1, i32 10, i32 0, !25}
!25 = !{i32 0, i32 5}
!26 = !{i32 17, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 10, i32 0, !25}
!27 = !{i32 18, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 18, i32 1, i32 10, i32 0, !25}
!28 = !{i32 19, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 19, i32 1, i32 10, i32 0, !25}
!29 = !{i32 20, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 10, i32 0, !25}
!30 = !{i32 21, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 21, i32 1, i32 10, i32 0, !25}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !7}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !7}
!33 = !{i32 24, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !25}
!34 = !{i32 25, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 25, i32 1, i32 10, i32 0, !25}
!35 = !{i32 26, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 26, i32 1, i32 10, i32 0, !25}
!36 = !{!37, !39, !40, !42, !43}
!37 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !38}
!38 = !{i32 1, i32 4}
!39 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !38}
!40 = !{i32 2, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !41}
!41 = !{i32 1, i32 8}
!42 = !{i32 3, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!43 = !{i32 4, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!44 = !{!45, !46, !47, !48, !49}
!45 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 900, null}
!46 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!47 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 140, null}
!48 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!49 = !{i32 4, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 4, i32 1, i32 180, null}
!50 = !{!51, !52, !53, !54, !55, !56}
!51 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!52 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 2, i32 1, i32 0, null}
!53 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!54 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!55 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!56 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!57 = !{void ()* @ReflectionTraceMeshSDFsCS, !"ReflectionTraceMeshSDFsCS", null, !4, !58}
!58 = !{i32 0, i64 16, i32 4, !59, i32 5, !60}
!59 = !{i32 64, i32 1, i32 1}
!60 = !{i32 0}
!61 = distinct !{!61, !"dx.controlflow.hints", i32 1}
!62 = distinct !{!62, !63}
!63 = !{!"llvm.loop.unroll.disable"}
!64 = !{!65, !65, i64 0}
!65 = !{!"int", !66, i64 0}
!66 = !{!"omnipotent char", !67, i64 0}
!67 = !{!"Simple C/C++ TBAA"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!70 = distinct !{!70, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!71 = !{!72, !74, !76, !78}
!72 = distinct !{!72, !73, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!73 = distinct !{!73, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!74 = distinct !{!74, !75, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z: %agg.result"}
!75 = distinct !{!75, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z"}
!76 = distinct !{!76, !77, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!77 = distinct !{!77, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!78 = distinct !{!78, !79, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!79 = distinct !{!79, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!82 = distinct !{!82, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!83 = !{!84, !86, !88, !90, !91}
!84 = distinct !{!84, !85, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!85 = distinct !{!85, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!86 = distinct !{!86, !87, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z: %agg.result"}
!87 = distinct !{!87, !"\01?EvaluateRayHitFromSurfaceCache@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_N@Z"}
!88 = distinct !{!88, !89, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %agg.result"}
!89 = distinct !{!89, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z"}
!90 = distinct !{!90, !89, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!91 = distinct !{!91, !92, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!92 = distinct !{!92, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!93 = distinct !{!93, !"dx.controlflow.hints", i32 1}
