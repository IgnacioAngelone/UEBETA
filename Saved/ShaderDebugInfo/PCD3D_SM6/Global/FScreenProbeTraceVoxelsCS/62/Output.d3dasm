;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 4a02c5778f8b866904759f53c2ab6600
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   64
;       float SkylightLeaking;                        ; Offset:   68
;       float SkylightLeakingRoughness;               ; Offset:   72
;       float InvFullSkylightLeakingDistance;         ; Offset:   76
;       uint SampleHeightFog;                         ; Offset:   80
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  164
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:  256
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:  260
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:  264
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:  268
;       uint ScreenProbeDownsampleFactor;             ; Offset:  272
;       uint2 ScreenProbeViewSize;                    ; Offset:  280
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:  288
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:  296
;       float ScreenProbeGatherMaxMip;                ; Offset:  304
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:  308
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:  312
;       float2 SampleRadianceProbeUVMul;              ; Offset:  320
;       float2 SampleRadianceProbeUVAdd;              ; Offset:  328
;       float2 SampleRadianceAtlasUVMul;              ; Offset:  336
;       uint NumUniformScreenProbes;                  ; Offset:  348
;       uint MaxNumAdaptiveProbes;                    ; Offset:  352
;       int FixedJitterIndex;                         ; Offset:  356
;       uint MaxImportanceSamplingOctahedronResolution;; Offset:  512
;       uint ScreenProbeBRDFOctahedronResolution;     ; Offset:  516
;       float StepFactor;                             ; Offset:  560
;       float CardTraceEndDistanceFromCamera;         ; Offset:  564
;       float MinSampleRadius;                        ; Offset:  576
;       float MinTraceDistance;                       ; Offset:  580
;       float MaxTraceDistance;                       ; Offset:  584
;       float MaxMeshSDFTraceDistance;                ; Offset:  588
;       float SurfaceBias;                            ; Offset:  592
;       float CardInterpolateInfluenceRadius;         ; Offset:  596
;       int HeightfieldMaxTracingSteps;               ; Offset:  608
;       float ReprojectionRadiusScale;                ; Offset:  624
;       float InvClipmapFadeSize;                     ; Offset:  636
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  640
;       uint RadianceProbeClipmapResolution;          ; Offset:  648
;       uint NumRadianceProbeClipmaps;                ; Offset:  652
;       uint RadianceProbeResolution;                 ; Offset:  656
;       uint FinalProbeResolution;                    ; Offset:  660
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  664
;       uint CalculateIrradiance;                     ; Offset:  668
;       uint IrradianceProbeResolution;               ; Offset:  672
;       uint OcclusionProbeResolution;                ; Offset:  676
;       float4 RadianceProbeSettings[6];              ; Offset:  736
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  832
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  928
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1024
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1032
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1040
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1048
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1052
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1056
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1060
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1064
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_NumPrimitiveGroups;       ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       float PrePadding_LumenCardScene_44;           ; Offset:   44
;       uint BindlessResource_LumenCardScene_CardData;; Offset:   48
;       uint PrePadding_LumenCardScene_52;            ; Offset:   52
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:   56
;       uint PrePadding_LumenCardScene_60;            ; Offset:   60
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:   64
;       uint PrePadding_LumenCardScene_68;            ; Offset:   68
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:   72
;       uint PrePadding_LumenCardScene_76;            ; Offset:   76
;       uint BindlessResource_LumenCardScene_PrimitiveGroupData;; Offset:   80
;       uint PrePadding_LumenCardScene_84;            ; Offset:   84
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:   88
;       uint PrePadding_LumenCardScene_92;            ; Offset:   92
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:   96
;       uint PrePadding_LumenCardScene_100;           ; Offset:  100
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  104
;       uint PrePadding_LumenCardScene_108;           ; Offset:  108
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  136
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   140
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_AllocatedPageCountBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  200
;       uint PrePadding_VirtualVoxel_204;             ; Offset:  204
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  208
;       float PrePadding_VirtualVoxel_212;            ; Offset:  212
;       float PrePadding_VirtualVoxel_216;            ; Offset:  216
;       float PrePadding_VirtualVoxel_220;            ; Offset:  220
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  224
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   228
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for GlobalDistanceFieldPageObjectGridBuffer
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for ProbeWorldOffset
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for AdaptiveScreenProbeData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for CompactedTraceTexelAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for CompactedTraceTexelData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB4            cb4     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB5            cb5     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB6            cb6     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S1   s3,space1000     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S2   s4,space1000     1
; D3DStaticTrilinearClampedSampler   sampler      NA          NA      S3   s5,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S4             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S5             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S6             s2     1
; View_GlobalDistanceFieldPageAtlasTexture   texture     f32          3d      T0             t0     1
; View_GlobalDistanceFieldPageTableTexture   texture     u32          3d      T1             t1     1
; View_GlobalDistanceFieldMipTexture   texture     f32          3d      T2             t2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T3             t3     1
; LumenCardScene_CardData           texture  struct         r/o      T4             t4     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T5             t5     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T6             t6     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T7             t7     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T8             t8     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T9             t9     1
; BlueNoise_Vec2Texture             texture     f32          2d     T10            t10     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf     T11            t11     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T12            t12     1
; VirtualVoxel_PageTexture          texture     u32          3d     T13            t13     1
; FinalLightingAtlas                texture     f32          2d     T14            t14     1
; DepthAtlas                        texture     f32          2d     T15            t15     1
; GlobalDistanceFieldPageObjectGridBuffer   texture  struct         r/o     T16            t16     1
; RadianceProbeIndirectionTexture   texture     u32          3d     T17            t17     1
; RadianceCacheFinalRadianceAtlas   texture     f32          2d     T18            t18     1
; ProbeWorldOffset                  texture  struct         r/o     T19            t19     1
; ScreenProbeSceneDepth             texture     u32          2d     T20            t20     1
; ScreenProbeWorldNormal            texture     f32          2d     T21            t21     1
; ScreenProbeWorldSpeed             texture     u32          2d     T22            t22     1
; AdaptiveScreenProbeData           texture  struct         r/o     T23            t23     1
; CompactedTraceTexelAllocator      texture  struct         r/o     T24            t24     1
; CompactedTraceTexelData           texture  struct         r/o     T25            t25     1
; StructuredImportanceSampledRayInfosForTracing   texture     u32          2d     T26            t26     1
; RWTraceHit                            UAV     u32          2d      U0             u0     1
; RWTraceRadiance                       UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 2> >" = type { <2 x float>, %"class.Texture2D<vector<float, 2> >::mips_type" }
%"class.Texture2D<vector<float, 2> >::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32 }
%struct.SamplerState = type { i32 }

define void @ScreenProbeTraceVoxelsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 1000, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 2 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 13, i32 228 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 13, i32 140 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %50 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 13, i32 1064 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %51 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %52 = alloca [6 x i32], align 4
  %53 = alloca [4 x i32], align 4
  %54 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %55 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %54, i32 0, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %56 = extractvalue %dx.types.ResRet.i32 %55, 0
  %57 = icmp ult i32 %51, %56
  br i1 %57, label %58, label %3632

; <label>:58                                      ; preds = %0
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %60 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %59, i32 %51, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %61 = extractvalue %dx.types.ResRet.i32 %60, 0
  %62 = and i32 %61, 1048575
  %63 = lshr i32 %61, 20
  %64 = and i32 %63, 31
  %65 = lshr i32 %61, 25
  %66 = and i32 %65, 31
  %67 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.i32 %67, 0
  %69 = urem i32 %62, %68
  %70 = udiv i32 %62, %68
  %71 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.i32 %71, 2
  %73 = urem i32 %62, %72
  %74 = udiv i32 %62, %72
  %75 = extractvalue %dx.types.CBufRet.i32 %71, 0
  %76 = mul i32 %75, %73
  %77 = mul i32 %75, %74
  %78 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.i32 %78, 1
  %80 = icmp slt i32 %79, 0
  br i1 %80, label %81, label %84

; <label>:81                                      ; preds = %58
  %82 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.i32 %82, 1
  br label %84

; <label>:84                                      ; preds = %81, %58
  %85 = phi i32 [ %83, %81 ], [ %79, %58 ]
  %86 = uitofp i32 %85 to float
  %87 = fmul fast float %86, 1.250000e-01
  %88 = call float @dx.op.unary.f32(i32 22, float %87)  ; Frc(value)
  %89 = call i32 @dx.op.unary.i32(i32 30, i32 %85)  ; Bfrev(value)
  %90 = lshr i32 %89, 16
  %91 = uitofp i32 %90 to float
  %92 = fmul fast float %91, 0x3EF0000000000000
  %93 = uitofp i32 %75 to float
  %94 = fmul fast float %93, %88
  %95 = fmul fast float %92, %93
  %96 = fptoui float %94 to i32
  %97 = fptoui float %95 to i32
  %98 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.i32 %98, 0
  %100 = extractvalue %dx.types.CBufRet.i32 %98, 1
  %101 = add i32 %99, %76
  %102 = add i32 %101, %96
  %103 = add i32 %100, %77
  %104 = add i32 %103, %97
  %105 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.i32 %105, 3
  %107 = icmp ult i32 %62, %106
  br i1 %107, label %115, label %108

; <label>:108                                     ; preds = %84
  %109 = sub i32 %62, %106
  %110 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %111 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %110, i32 %109, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %112 = extractvalue %dx.types.ResRet.i32 %111, 0
  %113 = and i32 %112, 65535
  %114 = lshr i32 %112, 16
  br label %115

; <label>:115                                     ; preds = %108, %84
  %116 = phi i32 [ %113, %108 ], [ %102, %84 ]
  %117 = phi i32 [ %114, %108 ], [ %104, %84 ]
  br i1 %80, label %118, label %121

; <label>:118                                     ; preds = %115
  %119 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.i32 %119, 1
  br label %121

; <label>:121                                     ; preds = %118, %115
  %122 = phi i32 [ %120, %118 ], [ %79, %115 ]
  %123 = uitofp i32 %122 to float
  %124 = fmul fast float %123, 1.250000e-01
  %125 = call float @dx.op.unary.f32(i32 22, float %124)  ; Frc(value)
  %126 = call i32 @dx.op.unary.i32(i32 30, i32 %122)  ; Bfrev(value)
  %127 = lshr i32 %126, 16
  %128 = uitofp i32 %127 to float
  %129 = fmul fast float %128, 0x3EF0000000000000
  %130 = fmul fast float %93, %125
  %131 = fmul fast float %129, %93
  %132 = fptoui float %130 to i32
  %133 = fptoui float %131 to i32
  %134 = sub i32 %116, %99
  %135 = sub i32 %134, %132
  %136 = sub i32 %117, %100
  %137 = sub i32 %136, %133
  %138 = udiv i32 %135, %75
  %139 = udiv i32 %137, %75
  %140 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.i32 %140, 0
  %142 = mul i32 %141, %69
  %143 = mul i32 %141, %70
  %144 = add i32 %142, %64
  %145 = add i32 %143, %66
  %146 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %147 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %146, i32 undef, i32 %144, i32 %145, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %148 = extractvalue %dx.types.ResRet.i32 %147, 0
  %149 = and i32 %148, 536870911
  %150 = uitofp i32 %149 to float
  %151 = fmul fast float %150, 1.000000e+01
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %154 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = fadd fast float %153, -1.000000e+00
  %159 = fadd fast float %158, %156
  %160 = fadd fast float %154, -1.000000e+00
  %161 = fadd fast float %160, %157
  %162 = uitofp i32 %116 to float
  %163 = uitofp i32 %117 to float
  %164 = call float @dx.op.binary.f32(i32 36, float %162, float %159)  ; FMin(a,b)
  %165 = call float @dx.op.binary.f32(i32 36, float %163, float %161)  ; FMin(a,b)
  %166 = fadd fast float %164, 5.000000e-01
  %167 = fadd fast float %165, 5.000000e-01
  %168 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %169 = extractvalue %dx.types.CBufRet.f32 %168, 2
  %170 = extractvalue %dx.types.CBufRet.f32 %168, 3
  %171 = fmul fast float %169, %166
  %172 = fmul fast float %170, %167
  %173 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %174 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %173, i32 0, i32 %69, i32 %70, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %175 = extractvalue %dx.types.ResRet.i32 %174, 0
  %176 = bitcast i32 %175 to float
  %177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %178 = extractvalue %dx.types.CBufRet.f32 %177, 2
  %179 = extractvalue %dx.types.CBufRet.f32 %177, 3
  %180 = fsub fast float %171, %179
  %181 = fsub fast float %172, %178
  %182 = extractvalue %dx.types.CBufRet.f32 %177, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %177, 1
  %184 = fdiv fast float %180, %182
  %185 = fdiv fast float %181, %183
  %186 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %187 = extractvalue %dx.types.CBufRet.f32 %186, 0
  %188 = extractvalue %dx.types.CBufRet.f32 %186, 1
  %189 = extractvalue %dx.types.CBufRet.f32 %186, 2
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 0
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 1
  %193 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.f32 %194, 0
  %196 = extractvalue %dx.types.CBufRet.f32 %194, 1
  %197 = extractvalue %dx.types.CBufRet.f32 %194, 2
  %198 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %199 = extractvalue %dx.types.CBufRet.f32 %198, 0
  %200 = extractvalue %dx.types.CBufRet.f32 %198, 1
  %201 = extractvalue %dx.types.CBufRet.f32 %198, 2
  %202 = fmul fast float %184, %176
  %203 = fmul fast float %185, %176
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 3
  %206 = bitcast float %205 to i32
  %207 = icmp ne i32 %206, 0
  %208 = select i1 %207, float %184, float %202
  %209 = select i1 %207, float %185, float %203
  %210 = fmul fast float %208, %187
  %211 = call float @dx.op.tertiary.f32(i32 46, float %209, float %191, float %210)  ; FMad(a,b,c)
  %212 = call float @dx.op.tertiary.f32(i32 46, float %176, float %195, float %211)  ; FMad(a,b,c)
  %213 = fadd fast float %212, %199
  %214 = fmul fast float %208, %188
  %215 = call float @dx.op.tertiary.f32(i32 46, float %209, float %192, float %214)  ; FMad(a,b,c)
  %216 = call float @dx.op.tertiary.f32(i32 46, float %176, float %196, float %215)  ; FMad(a,b,c)
  %217 = fadd fast float %216, %200
  %218 = fmul fast float %208, %189
  %219 = call float @dx.op.tertiary.f32(i32 46, float %209, float %193, float %218)  ; FMad(a,b,c)
  %220 = call float @dx.op.tertiary.f32(i32 46, float %176, float %197, float %219)  ; FMad(a,b,c)
  %221 = fadd fast float %220, %201
  %222 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %223 = extractvalue %dx.types.CBufRet.f32 %222, 0
  %224 = extractvalue %dx.types.CBufRet.f32 %222, 1
  %225 = extractvalue %dx.types.CBufRet.f32 %222, 2
  %226 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %227 = extractvalue %dx.types.CBufRet.f32 %226, 0
  %228 = extractvalue %dx.types.CBufRet.f32 %226, 1
  %229 = extractvalue %dx.types.CBufRet.f32 %226, 2
  %230 = fmul fast float %223, 2.097152e+06
  %231 = fmul fast float %224, 2.097152e+06
  %232 = fmul fast float %225, 2.097152e+06
  %233 = fsub fast float %227, %230
  %234 = fsub fast float %228, %231
  %235 = fsub fast float %229, %232
  %236 = fsub fast float %213, %233
  %237 = fsub fast float %217, %234
  %238 = fsub fast float %221, %235
  %239 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %240 = extractvalue %dx.types.CBufRet.f32 %239, 2
  br i1 %80, label %241, label %244

; <label>:241                                     ; preds = %121
  %242 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %243 = extractvalue %dx.types.CBufRet.i32 %242, 2
  br label %244

; <label>:244                                     ; preds = %241, %121
  %245 = phi i32 [ %243, %241 ], [ %79, %121 ]
  %246 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %45, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.i32 %246, 0
  %248 = extractvalue %dx.types.CBufRet.i32 %246, 1
  %249 = extractvalue %dx.types.CBufRet.i32 %246, 2
  %250 = and i32 %247, %138
  %251 = and i32 %248, %139
  %252 = and i32 %249, %245
  %253 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %45, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.i32 %253, 1
  %255 = mul i32 %252, %254
  %256 = add i32 %255, %251
  %257 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %258 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %257, i32 0, i32 %250, i32 %256, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %259 = extractvalue %dx.types.ResRet.f32 %258, 0
  %260 = extractvalue %dx.types.ResRet.f32 %258, 1
  %261 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %262 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %261, i32 0, i32 %144, i32 %145, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %263 = extractvalue %dx.types.ResRet.i32 %262, 0
  %264 = and i32 %263, 63
  %265 = lshr i32 %263, 6
  %266 = and i32 %265, 63
  %267 = lshr i32 %263, 12
  %268 = and i32 %267, 15
  %269 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %270 = extractvalue %dx.types.CBufRet.i32 %269, 0
  %271 = lshr i32 %270, %268
  %272 = uitofp i32 %271 to float
  %273 = fdiv fast float 1.000000e+00, %272
  %274 = uitofp i32 %264 to float
  %275 = uitofp i32 %266 to float
  %276 = fadd fast float %274, %259
  %277 = fadd fast float %275, %260
  %278 = fmul fast float %273, %273
  %279 = fsub fast float 1.000000e+00, %278
  %280 = call float @dx.op.unary.f32(i32 6, float %279)  ; FAbs(value)
  %281 = fmul fast float %280, 0x3FC40AE960000000
  %282 = fsub fast float 0x3FF921FB60000000, %281
  %283 = fsub fast float 1.000000e+00, %280
  %284 = call float @dx.op.unary.f32(i32 24, float %283)  ; Sqrt(value)
  %285 = fmul fast float %282, %284
  %286 = fcmp fast oge float %279, 0.000000e+00
  %287 = fsub fast float 0x400921FB60000000, %285
  %288 = select i1 %286, float %285, float %287
  %289 = fmul fast float %273, 2.000000e+00
  %290 = fmul fast float %289, %276
  %291 = fmul fast float %289, %277
  %292 = fadd fast float %290, -1.000000e+00
  %293 = fadd fast float %291, -1.000000e+00
  %294 = call float @dx.op.unary.f32(i32 6, float %292)  ; FAbs(value)
  %295 = call float @dx.op.unary.f32(i32 6, float %293)  ; FAbs(value)
  %296 = fsub fast float 1.000000e+00, %294
  %297 = fsub fast float %296, %295
  %298 = call float @dx.op.unary.f32(i32 6, float %297)  ; FAbs(value)
  %299 = fsub fast float 1.000000e+00, %298
  %300 = fcmp fast oeq float %299, 0.000000e+00
  br i1 %300, label %306, label %301

; <label>:301                                     ; preds = %244
  %302 = fsub fast float %295, %294
  %303 = fdiv fast float %302, %299
  %304 = fadd fast float %303, 1.000000e+00
  %305 = fmul fast float %304, 0x3FE921FB60000000
  br label %306

; <label>:306                                     ; preds = %301, %244
  %307 = phi float [ %305, %301 ], [ 0.000000e+00, %244 ]
  %308 = fmul fast float %299, %299
  %309 = fsub fast float 2.000000e+00, %308
  %310 = call float @dx.op.unary.f32(i32 24, float %309)  ; Sqrt(value)
  %311 = fmul fast float %310, %299
  %312 = fcmp fast ogt float %292, 0.000000e+00
  %313 = fcmp fast olt float %292, 0.000000e+00
  %314 = zext i1 %312 to i32
  %315 = zext i1 %313 to i32
  %316 = sub nsw i32 %314, %315
  %317 = sitofp i32 %316 to float
  %318 = fmul fast float %311, %317
  %319 = call float @dx.op.unary.f32(i32 12, float %307)  ; Cos(value)
  %320 = call float @dx.op.unary.f32(i32 6, float %319)  ; FAbs(value)
  %321 = fmul fast float %318, %320
  %322 = fcmp fast ogt float %293, 0.000000e+00
  %323 = fcmp fast olt float %293, 0.000000e+00
  %324 = zext i1 %322 to i32
  %325 = zext i1 %323 to i32
  %326 = sub nsw i32 %324, %325
  %327 = sitofp i32 %326 to float
  %328 = fmul fast float %311, %327
  %329 = call float @dx.op.unary.f32(i32 13, float %307)  ; Sin(value)
  %330 = call float @dx.op.unary.f32(i32 6, float %329)  ; FAbs(value)
  %331 = fmul fast float %328, %330
  %332 = fcmp fast ogt float %297, 0.000000e+00
  %333 = fcmp fast olt float %297, 0.000000e+00
  %334 = zext i1 %332 to i32
  %335 = zext i1 %333 to i32
  %336 = sub nsw i32 %334, %335
  %337 = sitofp i32 %336 to float
  %338 = fsub fast float 1.000000e+00, %308
  %339 = fmul fast float %337, %338
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = fmul fast float %341, %321
  %343 = fmul fast float %341, %331
  %344 = fmul fast float %341, %339
  %345 = fadd fast float %342, %213
  %346 = fadd fast float %343, %217
  %347 = fadd fast float %344, %221
  %348 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 521 })  ; AnnotateHandle(res,props)  resource: Texture2D<2xF32>
  %349 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %348, i32 0, i32 %69, i32 %70, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %350 = extractvalue %dx.types.ResRet.f32 %349, 0
  %351 = extractvalue %dx.types.ResRet.f32 %349, 1
  %352 = fmul fast float %350, 2.000000e+00
  %353 = fmul fast float %351, 2.000000e+00
  %354 = fadd fast float %352, -1.000000e+00
  %355 = fadd fast float %353, -1.000000e+00
  %356 = call float @dx.op.unary.f32(i32 6, float %354)  ; FAbs(value)
  %357 = call float @dx.op.unary.f32(i32 6, float %355)  ; FAbs(value)
  %358 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %356, float %357)  ; Dot2(ax,ay,bx,by)
  %359 = fsub fast float 1.000000e+00, %358
  %360 = fsub fast float -0.000000e+00, %359
  %361 = call float @dx.op.binary.f32(i32 35, float %360, float 0.000000e+00)  ; FMax(a,b)
  %362 = fsub fast float -0.000000e+00, %361
  %363 = fcmp fast oge float %354, 0.000000e+00
  %364 = fcmp fast oge float %355, 0.000000e+00
  %365 = select i1 %363, float %362, float %361
  %366 = select i1 %364, float %362, float %361
  %367 = fadd fast float %365, %354
  %368 = fadd fast float %366, %355
  %369 = call float @dx.op.dot3.f32(i32 55, float %367, float %368, float %359, float %367, float %368, float %359)  ; Dot3(ax,ay,az,bx,by,bz)
  %370 = call float @dx.op.unary.f32(i32 25, float %369)  ; Rsqrt(value)
  %371 = fmul fast float %367, %370
  %372 = fmul fast float %368, %370
  %373 = fmul fast float %370, %359
  %374 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %375 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %374, i32 0, i32 %69, i32 %70, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %376 = extractvalue %dx.types.ResRet.i32 %375, 0
  %377 = and i32 %376, 32768
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %386, label %379

; <label>:379                                     ; preds = %306
  %380 = call float @dx.op.dot3.f32(i32 55, float %371, float %372, float %373, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %381 = fcmp fast olt float %380, 0.000000e+00
  br i1 %381, label %382, label %386

; <label>:382                                     ; preds = %379
  %383 = fsub fast float -0.000000e+00, %371
  %384 = fsub fast float -0.000000e+00, %372
  %385 = fsub fast float -0.000000e+00, %373
  br label %386

; <label>:386                                     ; preds = %382, %379, %306
  %387 = phi float [ %383, %382 ], [ %371, %379 ], [ %371, %306 ]
  %388 = phi float [ %384, %382 ], [ %372, %379 ], [ %372, %306 ]
  %389 = phi float [ %385, %382 ], [ %373, %379 ], [ %373, %306 ]
  %390 = fmul fast float %387, %341
  %391 = fmul fast float %388, %341
  %392 = fmul fast float %389, %341
  %393 = fadd fast float %345, %390
  %394 = fadd fast float %346, %391
  %395 = fadd fast float %347, %392
  %396 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %397 = extractvalue %dx.types.CBufRet.i32 %396, 3
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %453, label %399

; <label>:399                                     ; preds = %386
  br label %400

; <label>:400                                     ; preds = %448, %399
  %401 = phi i32 [ %449, %448 ], [ 0, %399 ]
  %402 = add i32 %401, 46
  %403 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 %402)  ; CBufferLoadLegacy(handle,regIndex)
  %404 = extractvalue %dx.types.CBufRet.f32 %403, 1
  %405 = fmul fast float %404, %236
  %406 = fmul fast float %404, %237
  %407 = fmul fast float %404, %238
  %408 = add i32 %401, 52
  %409 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 %408)  ; CBufferLoadLegacy(handle,regIndex)
  %410 = extractvalue %dx.types.CBufRet.f32 %409, 0
  %411 = extractvalue %dx.types.CBufRet.f32 %409, 1
  %412 = extractvalue %dx.types.CBufRet.f32 %409, 2
  %413 = fadd fast float %405, %410
  %414 = fadd fast float %406, %411
  %415 = fadd fast float %407, %412
  %416 = fadd fast float %413, -5.000000e-01
  %417 = fadd fast float %414, -5.000000e-01
  %418 = fadd fast float %415, -5.000000e-01
  %419 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %420 = extractvalue %dx.types.CBufRet.f32 %419, 3
  %421 = fmul fast float %416, %420
  %422 = fmul fast float %417, %420
  %423 = fmul fast float %418, %420
  %424 = call float @dx.op.unary.f32(i32 7, float %421)  ; Saturate(value)
  %425 = call float @dx.op.unary.f32(i32 7, float %422)  ; Saturate(value)
  %426 = call float @dx.op.unary.f32(i32 7, float %423)  ; Saturate(value)
  %427 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %428 = extractvalue %dx.types.CBufRet.i32 %427, 2
  %429 = uitofp i32 %428 to float
  %430 = fsub fast float -5.000000e-01, %413
  %431 = fadd fast float %430, %429
  %432 = fsub fast float -5.000000e-01, %414
  %433 = fadd fast float %432, %429
  %434 = fsub fast float -5.000000e-01, %415
  %435 = fadd fast float %434, %429
  %436 = fmul fast float %431, %420
  %437 = fmul fast float %433, %420
  %438 = fmul fast float %435, %420
  %439 = call float @dx.op.unary.f32(i32 7, float %436)  ; Saturate(value)
  %440 = call float @dx.op.unary.f32(i32 7, float %437)  ; Saturate(value)
  %441 = call float @dx.op.unary.f32(i32 7, float %438)  ; Saturate(value)
  %442 = call float @dx.op.binary.f32(i32 36, float %440, float %441)  ; FMin(a,b)
  %443 = call float @dx.op.binary.f32(i32 36, float %439, float %442)  ; FMin(a,b)
  %444 = call float @dx.op.binary.f32(i32 36, float %425, float %426)  ; FMin(a,b)
  %445 = call float @dx.op.binary.f32(i32 36, float %424, float %444)  ; FMin(a,b)
  %446 = call float @dx.op.binary.f32(i32 36, float %445, float %443)  ; FMin(a,b)
  %447 = fcmp fast ogt float %446, 0.000000e+00
  br i1 %447, label %456, label %448

; <label>:448                                     ; preds = %400
  %449 = add i32 %401, 1
  %450 = extractvalue %dx.types.CBufRet.i32 %427, 3
  %451 = icmp ult i32 %449, %450
  br i1 %451, label %400, label %452

; <label>:452                                     ; preds = %448
  br label %453

; <label>:453                                     ; preds = %452, %386
  %454 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %455 = extractvalue %dx.types.CBufRet.i32 %454, 3
  br label %457

; <label>:456                                     ; preds = %400
  br label %457

; <label>:457                                     ; preds = %456, %453
  %458 = phi i32 [ %455, %453 ], [ %401, %456 ]
  %459 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %460 = extractvalue %dx.types.CBufRet.i32 %459, 3
  %461 = icmp ult i32 %458, %460
  br i1 %461, label %462, label %469

; <label>:462                                     ; preds = %457
  %463 = add i32 %458, 46
  %464 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 %463)  ; CBufferLoadLegacy(handle,regIndex)
  %465 = extractvalue %dx.types.CBufRet.f32 %464, 2
  %466 = fmul fast float %465, 0x3FFBB67AE0000000
  %467 = extractvalue %dx.types.CBufRet.f32 %464, 0
  %468 = fadd fast float %467, %466
  br label %469

; <label>:469                                     ; preds = %462, %457
  %470 = phi i1 [ true, %462 ], [ false, %457 ]
  %471 = phi float [ %468, %462 ], [ 1.000000e+07, %457 ]
  br i1 %470, label %472, label %474

; <label>:472                                     ; preds = %469
  %473 = call float @dx.op.binary.f32(i32 36, float %240, float %471)  ; FMin(a,b)
  br label %474

; <label>:474                                     ; preds = %472, %469
  %475 = phi float [ %473, %472 ], [ %240, %469 ]
  %476 = fmul fast float %341, 2.000000e+00
  %477 = fsub fast float %151, %476
  %478 = extractvalue %dx.types.CBufRet.f32 %239, 1
  %479 = call float @dx.op.binary.f32(i32 35, float %478, float %477)  ; FMax(a,b)
  %480 = fcmp fast olt float %479, %475
  br i1 %480, label %481, label %1752

; <label>:481                                     ; preds = %474
  %482 = mul i32 %141, %139
  %483 = add i32 %482, %66
  %484 = mul i32 %141, %138
  %485 = add i32 %484, %64
  %486 = uitofp i32 %485 to float
  %487 = uitofp i32 %483 to float
  %488 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %489 = extractvalue %dx.types.CBufRet.i32 %488, 1
  %490 = uitofp i32 %489 to float
  %491 = fmul fast float %490, 0x4040551EC0000000
  %492 = fmul fast float %490, 0x4027A147A0000000
  %493 = fadd fast float %491, %486
  %494 = fadd fast float %492, %487
  %495 = call float @dx.op.dot2.f32(i32 54, float %493, float %494, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %496 = call float @dx.op.unary.f32(i32 22, float %495)  ; Frc(value)
  %497 = fmul fast float %496, 0x404A7DD040000000
  %498 = call float @dx.op.unary.f32(i32 22, float %497)  ; Frc(value)
  %499 = fmul fast float %479, %321
  %500 = fmul fast float %479, %331
  %501 = fmul fast float %479, %339
  %502 = fadd fast float %499, %393
  %503 = fadd fast float %500, %394
  %504 = fadd fast float %501, %395
  %505 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %506 = extractvalue %dx.types.CBufRet.i32 %505, 2
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %551, label %508

; <label>:508                                     ; preds = %481
  br label %509

; <label>:509                                     ; preds = %544, %508
  %510 = phi i32 [ %545, %544 ], [ 0, %508 ]
  %511 = add i32 %510, 195
  %512 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 %511)  ; CBufferLoadLegacy(handle,regIndex)
  %513 = extractvalue %dx.types.CBufRet.f32 %512, 3
  %514 = extractvalue %dx.types.CBufRet.f32 %512, 0
  %515 = extractvalue %dx.types.CBufRet.f32 %512, 1
  %516 = extractvalue %dx.types.CBufRet.f32 %512, 2
  %517 = fadd fast float %513, %502
  %518 = fsub fast float %517, %514
  %519 = fadd fast float %513, %503
  %520 = fsub fast float %519, %515
  %521 = fadd fast float %513, %504
  %522 = fsub fast float %521, %516
  %523 = call float @dx.op.binary.f32(i32 35, float %518, float 0.000000e+00)  ; FMax(a,b)
  %524 = call float @dx.op.binary.f32(i32 35, float %520, float 0.000000e+00)  ; FMax(a,b)
  %525 = call float @dx.op.binary.f32(i32 35, float %522, float 0.000000e+00)  ; FMax(a,b)
  %526 = fsub fast float %513, %502
  %527 = fadd fast float %526, %514
  %528 = fsub fast float %513, %503
  %529 = fadd fast float %528, %515
  %530 = fsub fast float %513, %504
  %531 = fadd fast float %530, %516
  %532 = call float @dx.op.binary.f32(i32 35, float %527, float 0.000000e+00)  ; FMax(a,b)
  %533 = call float @dx.op.binary.f32(i32 35, float %529, float 0.000000e+00)  ; FMax(a,b)
  %534 = call float @dx.op.binary.f32(i32 35, float %531, float 0.000000e+00)  ; FMax(a,b)
  %535 = call float @dx.op.binary.f32(i32 36, float %523, float %532)  ; FMin(a,b)
  %536 = call float @dx.op.binary.f32(i32 36, float %524, float %533)  ; FMin(a,b)
  %537 = call float @dx.op.binary.f32(i32 36, float %525, float %534)  ; FMin(a,b)
  %538 = call float @dx.op.binary.f32(i32 36, float %536, float %537)  ; FMin(a,b)
  %539 = call float @dx.op.binary.f32(i32 36, float %535, float %538)  ; FMin(a,b)
  %540 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %541 = extractvalue %dx.types.CBufRet.f32 %540, 0
  %542 = fmul fast float %541, %513
  %543 = fcmp fast ogt float %539, %542
  br i1 %543, label %549, label %544

; <label>:544                                     ; preds = %509
  %545 = add i32 %510, 1
  %546 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %547 = extractvalue %dx.types.CBufRet.i32 %546, 2
  %548 = icmp ult i32 %545, %547
  br i1 %548, label %509, label %549

; <label>:549                                     ; preds = %544, %509
  %550 = phi i32 [ %510, %509 ], [ 0, %544 ]
  br label %551

; <label>:551                                     ; preds = %549, %481
  %552 = phi i32 [ 0, %481 ], [ %550, %549 ]
  %553 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %554 = extractvalue %dx.types.CBufRet.i32 %553, 2
  %555 = icmp ult i32 %552, %554
  br i1 %555, label %556, label %804

; <label>:556                                     ; preds = %551
  br label %557

; <label>:557                                     ; preds = %793, %556
  %558 = phi float [ %796, %793 ], [ -1.000000e+00, %556 ]
  %559 = phi i32 [ %795, %793 ], [ 0, %556 ]
  %560 = phi i32 [ %797, %793 ], [ %552, %556 ]
  %561 = phi float [ %794, %793 ], [ %479, %556 ]
  %562 = add i32 %560, 195
  %563 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 %562)  ; CBufferLoadLegacy(handle,regIndex)
  %564 = extractvalue %dx.types.CBufRet.f32 %563, 3
  %565 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %566 = extractvalue %dx.types.CBufRet.f32 %565, 0
  %567 = fmul fast float %566, %564
  %568 = extractvalue %dx.types.CBufRet.f32 %563, 0
  %569 = extractvalue %dx.types.CBufRet.f32 %563, 1
  %570 = extractvalue %dx.types.CBufRet.f32 %563, 2
  %571 = fsub fast float %564, %567
  %572 = fmul fast float %475, %321
  %573 = fmul fast float %475, %331
  %574 = fmul fast float %475, %339
  %575 = fdiv fast float 1.000000e+00, %572
  %576 = fdiv fast float 1.000000e+00, %573
  %577 = fdiv fast float 1.000000e+00, %574
  %578 = fsub fast float %568, %393
  %579 = fsub fast float %578, %571
  %580 = fsub fast float %569, %394
  %581 = fsub fast float %580, %571
  %582 = fsub fast float %570, %395
  %583 = fsub fast float %582, %571
  %584 = fmul fast float %579, %575
  %585 = fmul fast float %581, %576
  %586 = fmul fast float %583, %577
  %587 = fadd fast float %578, %571
  %588 = fadd fast float %580, %571
  %589 = fadd fast float %582, %571
  %590 = fmul fast float %587, %575
  %591 = fmul fast float %588, %576
  %592 = fmul fast float %589, %577
  %593 = call float @dx.op.binary.f32(i32 36, float %584, float %590)  ; FMin(a,b)
  %594 = call float @dx.op.binary.f32(i32 36, float %585, float %591)  ; FMin(a,b)
  %595 = call float @dx.op.binary.f32(i32 36, float %586, float %592)  ; FMin(a,b)
  %596 = call float @dx.op.binary.f32(i32 35, float %584, float %590)  ; FMax(a,b)
  %597 = call float @dx.op.binary.f32(i32 35, float %585, float %591)  ; FMax(a,b)
  %598 = call float @dx.op.binary.f32(i32 35, float %586, float %592)  ; FMax(a,b)
  %599 = call float @dx.op.binary.f32(i32 35, float %594, float %595)  ; FMax(a,b)
  %600 = call float @dx.op.binary.f32(i32 35, float %593, float %599)  ; FMax(a,b)
  %601 = call float @dx.op.binary.f32(i32 36, float %597, float %598)  ; FMin(a,b)
  %602 = call float @dx.op.binary.f32(i32 36, float %596, float %601)  ; FMin(a,b)
  %603 = call float @dx.op.unary.f32(i32 7, float %600)  ; Saturate(value)
  %604 = call float @dx.op.unary.f32(i32 7, float %602)  ; Saturate(value)
  %605 = fmul fast float %603, %475
  %606 = fmul fast float %604, %475
  %607 = call float @dx.op.binary.f32(i32 35, float %605, float %561)  ; FMax(a,b)
  %608 = call float @dx.op.binary.f32(i32 35, float %607, float 0.000000e+00)  ; FMax(a,b)
  %609 = fcmp fast olt float %608, %606
  br i1 %609, label %610, label %793

; <label>:610                                     ; preds = %557
  %611 = fmul fast float %564, 8.000000e+00
  %612 = fmul fast float %611, %566
  br label %613

; <label>:613                                     ; preds = %789, %610
  %614 = phi float [ %608, %610 ], [ %785, %789 ]
  %615 = phi i32 [ 0, %610 ], [ %790, %789 ]
  %616 = fmul fast float %614, %321
  %617 = fmul fast float %614, %331
  %618 = fmul fast float %614, %339
  %619 = fadd fast float %616, %393
  %620 = fadd fast float %617, %394
  %621 = fadd fast float %618, %395
  %622 = add i32 %560, 201
  %623 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 %622)  ; CBufferLoadLegacy(handle,regIndex)
  %624 = extractvalue %dx.types.CBufRet.f32 %623, 0
  %625 = extractvalue %dx.types.CBufRet.f32 %623, 1
  %626 = extractvalue %dx.types.CBufRet.f32 %623, 2
  %627 = extractvalue %dx.types.CBufRet.f32 %623, 3
  %628 = fmul fast float %627, %619
  %629 = fmul fast float %627, %620
  %630 = fmul fast float %627, %621
  %631 = fadd fast float %628, %624
  %632 = fadd fast float %629, %625
  %633 = fadd fast float %630, %626
  %634 = call float @dx.op.unary.f32(i32 22, float %631)  ; Frc(value)
  %635 = call float @dx.op.unary.f32(i32 22, float %632)  ; Frc(value)
  %636 = call float @dx.op.unary.f32(i32 22, float %633)  ; Frc(value)
  %637 = call float @dx.op.unary.f32(i32 22, float %634)  ; Frc(value)
  %638 = call float @dx.op.unary.f32(i32 22, float %635)  ; Frc(value)
  %639 = call float @dx.op.unary.f32(i32 22, float %636)  ; Frc(value)
  %640 = add i32 %560, 207
  %641 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 %640)  ; CBufferLoadLegacy(handle,regIndex)
  %642 = extractvalue %dx.types.CBufRet.f32 %641, 0
  %643 = extractvalue %dx.types.CBufRet.f32 %641, 1
  %644 = extractvalue %dx.types.CBufRet.f32 %641, 2
  %645 = fmul fast float %642, %619
  %646 = fmul fast float %643, %620
  %647 = fmul fast float %644, %621
  %648 = add i32 %560, 213
  %649 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 %648)  ; CBufferLoadLegacy(handle,regIndex)
  %650 = extractvalue %dx.types.CBufRet.f32 %649, 0
  %651 = extractvalue %dx.types.CBufRet.f32 %649, 1
  %652 = extractvalue %dx.types.CBufRet.f32 %649, 2
  %653 = fadd fast float %645, %650
  %654 = fadd fast float %646, %651
  %655 = fadd fast float %647, %652
  %656 = call float @dx.op.unary.f32(i32 7, float %653)  ; Saturate(value)
  %657 = call float @dx.op.unary.f32(i32 7, float %654)  ; Saturate(value)
  %658 = call float @dx.op.unary.f32(i32 7, float %655)  ; Saturate(value)
  %659 = extractvalue %dx.types.CBufRet.f32 %641, 3
  %660 = extractvalue %dx.types.CBufRet.f32 %649, 3
  %661 = call float @dx.op.binary.f32(i32 35, float %658, float %659)  ; FMax(a,b)
  %662 = call float @dx.op.binary.f32(i32 36, float %661, float %660)  ; FMin(a,b)
  %663 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %664 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %665 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %663, %dx.types.Handle %664, float %656, float %657, float %662, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %666 = extractvalue %dx.types.ResRet.f32 %665, 0
  %667 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %668 = extractvalue %dx.types.CBufRet.f32 %667, 0
  %669 = fmul fast float %668, %612
  %670 = fmul fast float %666, 2.000000e+00
  %671 = fadd fast float %670, -1.000000e+00
  %672 = fmul fast float %669, %671
  %673 = call float @dx.op.unary.f32(i32 7, float %637)  ; Saturate(value)
  %674 = call float @dx.op.unary.f32(i32 7, float %638)  ; Saturate(value)
  %675 = call float @dx.op.unary.f32(i32 7, float %639)  ; Saturate(value)
  %676 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %677 = extractvalue %dx.types.CBufRet.i32 %676, 2
  %678 = sitofp i32 %677 to float
  %679 = fmul fast float %678, %673
  %680 = fmul fast float %678, %674
  %681 = fmul fast float %678, %675
  %682 = mul i32 %677, %560
  %683 = sitofp i32 %682 to float
  %684 = fadd fast float %683, %681
  %685 = fptosi float %679 to i32
  %686 = fptosi float %680 to i32
  %687 = fptosi float %684 to i32
  %688 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %689 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %688, i32 0, i32 %685, i32 %686, i32 %687, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %690 = extractvalue %dx.types.ResRet.i32 %689, 0
  %691 = icmp ne i32 %690, -1
  %692 = extractvalue %dx.types.CBufRet.f32 %667, 1
  %693 = fcmp fast olt float %666, %692
  %694 = and i1 %691, %693
  br i1 %694, label %695, label %736

; <label>:695                                     ; preds = %613
  %696 = icmp slt i32 %690, 0
  %697 = fmul fast float %678, %637
  %698 = fmul fast float %678, %638
  %699 = fmul fast float %678, %639
  %700 = call float @dx.op.unary.f32(i32 22, float %697)  ; Frc(value)
  %701 = call float @dx.op.unary.f32(i32 22, float %698)  ; Frc(value)
  %702 = call float @dx.op.unary.f32(i32 22, float %699)  ; Frc(value)
  %703 = shl i32 %690, 3
  %704 = and i32 %703, 1016
  %705 = lshr i32 %690, 4
  %706 = and i32 %705, 1016
  %707 = lshr i32 %690, 11
  %708 = and i32 %707, 8184
  %709 = uitofp i32 %704 to float
  %710 = uitofp i32 %706 to float
  %711 = uitofp i32 %708 to float
  %712 = fmul fast float %700, 7.000000e+00
  %713 = fmul fast float %701, 7.000000e+00
  %714 = fmul fast float %702, 7.000000e+00
  %715 = fadd fast float %709, 5.000000e-01
  %716 = fadd fast float %715, %712
  %717 = fadd fast float %710, 5.000000e-01
  %718 = fadd fast float %717, %713
  %719 = fadd fast float %711, 5.000000e-01
  %720 = fadd fast float %719, %714
  %721 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %722 = extractvalue %dx.types.CBufRet.f32 %721, 0
  %723 = extractvalue %dx.types.CBufRet.f32 %721, 1
  %724 = extractvalue %dx.types.CBufRet.f32 %721, 2
  %725 = fmul fast float %722, %716
  %726 = fmul fast float %718, %723
  %727 = fmul fast float %720, %724
  %728 = select i1 %696, float 0.000000e+00, float 1.000000e+00
  %729 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %730 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %731 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %729, %dx.types.Handle %730, float %725, float %726, float %727, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %732 = extractvalue %dx.types.ResRet.f32 %731, 0
  %733 = fmul fast float %732, 2.000000e+00
  %734 = fadd fast float %733, -1.000000e+00
  %735 = fmul fast float %734, %612
  br label %736

; <label>:736                                     ; preds = %695, %613
  %737 = phi float [ %735, %695 ], [ %672, %613 ]
  %738 = phi float [ %728, %695 ], [ 1.000000e+00, %613 ]
  %739 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %740 = extractvalue %dx.types.CBufRet.f32 %739, 3
  %741 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 223)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.f32 %741, 0
  %743 = fsub fast float %740, %742
  %744 = fmul fast float %743, %738
  %745 = fadd fast float %744, %742
  %746 = fmul fast float %567, 2.000000e+00
  %747 = fdiv fast float %614, %746
  %748 = call float @dx.op.unary.f32(i32 7, float %747)  ; Saturate(value)
  %749 = fmul fast float %748, %567
  %750 = fmul fast float %749, %745
  %751 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %752 = extractvalue %dx.types.CBufRet.i32 %751, 1
  %753 = shl i32 %752, 8
  %754 = add i32 %753, %615
  %755 = uitofp i32 %754 to float
  %756 = fcmp fast olt float %737, %750
  br i1 %756, label %757, label %778

; <label>:757                                     ; preds = %736
  %758 = fmul fast float %755, 0x4040551EC0000000
  %759 = fadd fast float %758, %486
  %760 = fmul fast float %755, 0x4027A147A0000000
  %761 = fadd fast float %760, %487
  %762 = call float @dx.op.dot2.f32(i32 54, float %759, float %761, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %763 = call float @dx.op.unary.f32(i32 22, float %762)  ; Frc(value)
  %764 = fmul fast float %763, 0x404A7DD040000000
  %765 = call float @dx.op.unary.f32(i32 22, float %764)  ; Frc(value)
  %766 = fsub fast float 1.000000e+00, %738
  %767 = fmul fast float %765, %766
  %768 = extractvalue %dx.types.CBufRet.f32 %741, 2
  %769 = fcmp fast ugt float %767, %768
  br i1 %769, label %778, label %770

; <label>:770                                     ; preds = %757
  %771 = fmul fast float %766, %498
  %772 = extractvalue %dx.types.CBufRet.f32 %741, 3
  %773 = fcmp fast ugt float %771, %772
  br i1 %773, label %778, label %774

; <label>:774                                     ; preds = %770
  %775 = fadd fast float %737, %614
  %776 = fsub fast float %775, %750
  %777 = call float @dx.op.binary.f32(i32 35, float %776, float 0.000000e+00)  ; FMax(a,b)
  br label %793

; <label>:778                                     ; preds = %770, %757, %736
  %779 = extractvalue %dx.types.CBufRet.f32 %741, 1
  %780 = fsub fast float 1.000000e+00, %779
  %781 = fmul fast float %780, %738
  %782 = fadd fast float %781, %779
  %783 = fmul fast float %782, %567
  %784 = call float @dx.op.binary.f32(i32 35, float %737, float %783)  ; FMax(a,b)
  %785 = fadd fast float %784, %614
  %786 = fcmp fast ogt float %785, %606
  %787 = fcmp fast oge float %558, 0.000000e+00
  %788 = or i1 %787, %786
  br i1 %788, label %792, label %789

; <label>:789                                     ; preds = %778
  %790 = add nuw nsw i32 %615, 1
  %791 = icmp ult i32 %790, 256
  br i1 %791, label %613, label %792, !llvm.loop !61

; <label>:792                                     ; preds = %789, %778
  br label %793

; <label>:793                                     ; preds = %792, %774, %557
  %794 = phi float [ %561, %557 ], [ %606, %774 ], [ %606, %792 ]
  %795 = phi i32 [ %559, %557 ], [ %560, %774 ], [ %559, %792 ]
  %796 = phi float [ %558, %557 ], [ %777, %774 ], [ %558, %792 ]
  %797 = add i32 %560, 1
  %798 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %799 = extractvalue %dx.types.CBufRet.i32 %798, 2
  %800 = icmp ult i32 %797, %799
  %801 = fcmp fast olt float %796, 0.000000e+00
  %802 = and i1 %801, %800
  br i1 %802, label %557, label %803, !llvm.loop !63

; <label>:803                                     ; preds = %793
  br label %804

; <label>:804                                     ; preds = %803, %551
  %805 = phi float [ -1.000000e+00, %551 ], [ %796, %803 ]
  %806 = phi i32 [ 0, %551 ], [ %795, %803 ]
  %807 = fcmp fast ult float %805, 0.000000e+00
  br i1 %807, label %1745, label %808

; <label>:808                                     ; preds = %804
  %809 = fmul fast float %805, %321
  %810 = fmul fast float %805, %331
  %811 = fmul fast float %805, %339
  %812 = fadd fast float %809, %393
  %813 = fadd fast float %810, %394
  %814 = fadd fast float %811, %395
  %815 = fsub fast float -0.000000e+00, %321
  %816 = fsub fast float -0.000000e+00, %331
  %817 = fsub fast float -0.000000e+00, %339
  %818 = add i32 %806, 201
  %819 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 %818)  ; CBufferLoadLegacy(handle,regIndex)
  %820 = extractvalue %dx.types.CBufRet.f32 %819, 0
  %821 = extractvalue %dx.types.CBufRet.f32 %819, 1
  %822 = extractvalue %dx.types.CBufRet.f32 %819, 2
  %823 = extractvalue %dx.types.CBufRet.f32 %819, 3
  %824 = fmul fast float %823, %812
  %825 = fmul fast float %823, %813
  %826 = fmul fast float %823, %814
  %827 = fadd fast float %824, %820
  %828 = fadd fast float %825, %821
  %829 = fadd fast float %826, %822
  %830 = call float @dx.op.unary.f32(i32 22, float %827)  ; Frc(value)
  %831 = call float @dx.op.unary.f32(i32 22, float %828)  ; Frc(value)
  %832 = call float @dx.op.unary.f32(i32 22, float %829)  ; Frc(value)
  %833 = call float @dx.op.unary.f32(i32 22, float %830)  ; Frc(value)
  %834 = call float @dx.op.unary.f32(i32 22, float %831)  ; Frc(value)
  %835 = call float @dx.op.unary.f32(i32 22, float %832)  ; Frc(value)
  %836 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %837 = extractvalue %dx.types.CBufRet.f32 %836, 0
  %838 = fmul fast float %837, 5.000000e-01
  %839 = fadd fast float %838, %833
  %840 = call float @dx.op.unary.f32(i32 22, float %839)  ; Frc(value)
  %841 = call float @dx.op.unary.f32(i32 22, float %834)  ; Frc(value)
  %842 = call float @dx.op.unary.f32(i32 22, float %835)  ; Frc(value)
  %843 = call float @dx.op.unary.f32(i32 7, float %840)  ; Saturate(value)
  %844 = call float @dx.op.unary.f32(i32 7, float %841)  ; Saturate(value)
  %845 = call float @dx.op.unary.f32(i32 7, float %842)  ; Saturate(value)
  %846 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %847 = extractvalue %dx.types.CBufRet.i32 %846, 2
  %848 = sitofp i32 %847 to float
  %849 = fmul fast float %848, %843
  %850 = fmul fast float %848, %844
  %851 = fmul fast float %848, %845
  %852 = mul i32 %847, %806
  %853 = sitofp i32 %852 to float
  %854 = fadd fast float %853, %851
  %855 = fptosi float %849 to i32
  %856 = fptosi float %850 to i32
  %857 = fptosi float %854 to i32
  %858 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %859 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %858, i32 0, i32 %855, i32 %856, i32 %857, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %860 = extractvalue %dx.types.ResRet.i32 %859, 0
  %861 = icmp eq i32 %860, -1
  br i1 %861, label %898, label %862

; <label>:862                                     ; preds = %808
  %863 = fmul fast float %848, %840
  %864 = fmul fast float %848, %841
  %865 = fmul fast float %848, %842
  %866 = call float @dx.op.unary.f32(i32 22, float %863)  ; Frc(value)
  %867 = call float @dx.op.unary.f32(i32 22, float %864)  ; Frc(value)
  %868 = call float @dx.op.unary.f32(i32 22, float %865)  ; Frc(value)
  %869 = shl i32 %860, 3
  %870 = and i32 %869, 1016
  %871 = lshr i32 %860, 4
  %872 = and i32 %871, 1016
  %873 = lshr i32 %860, 11
  %874 = and i32 %873, 8184
  %875 = uitofp i32 %870 to float
  %876 = uitofp i32 %872 to float
  %877 = uitofp i32 %874 to float
  %878 = fmul fast float %866, 7.000000e+00
  %879 = fmul fast float %867, 7.000000e+00
  %880 = fmul fast float %868, 7.000000e+00
  %881 = fadd fast float %875, 5.000000e-01
  %882 = fadd fast float %881, %878
  %883 = fadd fast float %876, 5.000000e-01
  %884 = fadd fast float %883, %879
  %885 = fadd fast float %877, 5.000000e-01
  %886 = fadd fast float %885, %880
  %887 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %888 = extractvalue %dx.types.CBufRet.f32 %887, 0
  %889 = extractvalue %dx.types.CBufRet.f32 %887, 1
  %890 = extractvalue %dx.types.CBufRet.f32 %887, 2
  %891 = fmul fast float %888, %882
  %892 = fmul fast float %884, %889
  %893 = fmul fast float %886, %890
  %894 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %895 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %896 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %894, %dx.types.Handle %895, float %891, float %892, float %893, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %897 = extractvalue %dx.types.ResRet.f32 %896, 0
  br label %898

; <label>:898                                     ; preds = %862, %808
  %899 = phi float [ %897, %862 ], [ 1.000000e+00, %808 ]
  %900 = fsub fast float %833, %838
  %901 = call float @dx.op.unary.f32(i32 22, float %900)  ; Frc(value)
  %902 = call float @dx.op.unary.f32(i32 7, float %901)  ; Saturate(value)
  %903 = fmul fast float %848, %902
  %904 = fptosi float %903 to i32
  %905 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %858, i32 0, i32 %904, i32 %856, i32 %857, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %906 = extractvalue %dx.types.ResRet.i32 %905, 0
  %907 = icmp eq i32 %906, -1
  br i1 %907, label %944, label %908

; <label>:908                                     ; preds = %898
  %909 = fmul fast float %848, %901
  %910 = fmul fast float %848, %841
  %911 = fmul fast float %848, %842
  %912 = call float @dx.op.unary.f32(i32 22, float %909)  ; Frc(value)
  %913 = call float @dx.op.unary.f32(i32 22, float %910)  ; Frc(value)
  %914 = call float @dx.op.unary.f32(i32 22, float %911)  ; Frc(value)
  %915 = shl i32 %906, 3
  %916 = and i32 %915, 1016
  %917 = lshr i32 %906, 4
  %918 = and i32 %917, 1016
  %919 = lshr i32 %906, 11
  %920 = and i32 %919, 8184
  %921 = uitofp i32 %916 to float
  %922 = uitofp i32 %918 to float
  %923 = uitofp i32 %920 to float
  %924 = fmul fast float %912, 7.000000e+00
  %925 = fmul fast float %913, 7.000000e+00
  %926 = fmul fast float %914, 7.000000e+00
  %927 = fadd fast float %921, 5.000000e-01
  %928 = fadd fast float %927, %924
  %929 = fadd fast float %922, 5.000000e-01
  %930 = fadd fast float %929, %925
  %931 = fadd fast float %923, 5.000000e-01
  %932 = fadd fast float %931, %926
  %933 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %934 = extractvalue %dx.types.CBufRet.f32 %933, 0
  %935 = extractvalue %dx.types.CBufRet.f32 %933, 1
  %936 = extractvalue %dx.types.CBufRet.f32 %933, 2
  %937 = fmul fast float %934, %928
  %938 = fmul fast float %930, %935
  %939 = fmul fast float %932, %936
  %940 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %941 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %942 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %940, %dx.types.Handle %941, float %937, float %938, float %939, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %943 = extractvalue %dx.types.ResRet.f32 %942, 0
  br label %944

; <label>:944                                     ; preds = %908, %898
  %945 = phi float [ %943, %908 ], [ 1.000000e+00, %898 ]
  %946 = fadd fast float %838, %834
  %947 = call float @dx.op.unary.f32(i32 22, float %833)  ; Frc(value)
  %948 = call float @dx.op.unary.f32(i32 22, float %946)  ; Frc(value)
  %949 = call float @dx.op.unary.f32(i32 7, float %947)  ; Saturate(value)
  %950 = call float @dx.op.unary.f32(i32 7, float %948)  ; Saturate(value)
  %951 = fmul fast float %848, %949
  %952 = fmul fast float %848, %950
  %953 = fptosi float %951 to i32
  %954 = fptosi float %952 to i32
  %955 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %858, i32 0, i32 %953, i32 %954, i32 %857, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %956 = extractvalue %dx.types.ResRet.i32 %955, 0
  %957 = icmp eq i32 %956, -1
  br i1 %957, label %994, label %958

; <label>:958                                     ; preds = %944
  %959 = fmul fast float %848, %947
  %960 = fmul fast float %848, %948
  %961 = fmul fast float %848, %842
  %962 = call float @dx.op.unary.f32(i32 22, float %959)  ; Frc(value)
  %963 = call float @dx.op.unary.f32(i32 22, float %960)  ; Frc(value)
  %964 = call float @dx.op.unary.f32(i32 22, float %961)  ; Frc(value)
  %965 = shl i32 %956, 3
  %966 = and i32 %965, 1016
  %967 = lshr i32 %956, 4
  %968 = and i32 %967, 1016
  %969 = lshr i32 %956, 11
  %970 = and i32 %969, 8184
  %971 = uitofp i32 %966 to float
  %972 = uitofp i32 %968 to float
  %973 = uitofp i32 %970 to float
  %974 = fmul fast float %962, 7.000000e+00
  %975 = fmul fast float %963, 7.000000e+00
  %976 = fmul fast float %964, 7.000000e+00
  %977 = fadd fast float %971, 5.000000e-01
  %978 = fadd fast float %977, %974
  %979 = fadd fast float %972, 5.000000e-01
  %980 = fadd fast float %979, %975
  %981 = fadd fast float %973, 5.000000e-01
  %982 = fadd fast float %981, %976
  %983 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %984 = extractvalue %dx.types.CBufRet.f32 %983, 0
  %985 = extractvalue %dx.types.CBufRet.f32 %983, 1
  %986 = extractvalue %dx.types.CBufRet.f32 %983, 2
  %987 = fmul fast float %984, %978
  %988 = fmul fast float %980, %985
  %989 = fmul fast float %982, %986
  %990 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %991 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %992 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %990, %dx.types.Handle %991, float %987, float %988, float %989, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %993 = extractvalue %dx.types.ResRet.f32 %992, 0
  br label %994

; <label>:994                                     ; preds = %958, %944
  %995 = phi float [ %993, %958 ], [ 1.000000e+00, %944 ]
  %996 = fsub fast float %834, %838
  %997 = call float @dx.op.unary.f32(i32 22, float %996)  ; Frc(value)
  %998 = call float @dx.op.unary.f32(i32 7, float %997)  ; Saturate(value)
  %999 = fmul fast float %848, %998
  %1000 = fptosi float %999 to i32
  %1001 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %858, i32 0, i32 %953, i32 %1000, i32 %857, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1002 = extractvalue %dx.types.ResRet.i32 %1001, 0
  %1003 = icmp eq i32 %1002, -1
  br i1 %1003, label %1040, label %1004

; <label>:1004                                    ; preds = %994
  %1005 = fmul fast float %848, %947
  %1006 = fmul fast float %848, %997
  %1007 = fmul fast float %848, %842
  %1008 = call float @dx.op.unary.f32(i32 22, float %1005)  ; Frc(value)
  %1009 = call float @dx.op.unary.f32(i32 22, float %1006)  ; Frc(value)
  %1010 = call float @dx.op.unary.f32(i32 22, float %1007)  ; Frc(value)
  %1011 = shl i32 %1002, 3
  %1012 = and i32 %1011, 1016
  %1013 = lshr i32 %1002, 4
  %1014 = and i32 %1013, 1016
  %1015 = lshr i32 %1002, 11
  %1016 = and i32 %1015, 8184
  %1017 = uitofp i32 %1012 to float
  %1018 = uitofp i32 %1014 to float
  %1019 = uitofp i32 %1016 to float
  %1020 = fmul fast float %1008, 7.000000e+00
  %1021 = fmul fast float %1009, 7.000000e+00
  %1022 = fmul fast float %1010, 7.000000e+00
  %1023 = fadd fast float %1017, 5.000000e-01
  %1024 = fadd fast float %1023, %1020
  %1025 = fadd fast float %1018, 5.000000e-01
  %1026 = fadd fast float %1025, %1021
  %1027 = fadd fast float %1019, 5.000000e-01
  %1028 = fadd fast float %1027, %1022
  %1029 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %1030 = extractvalue %dx.types.CBufRet.f32 %1029, 0
  %1031 = extractvalue %dx.types.CBufRet.f32 %1029, 1
  %1032 = extractvalue %dx.types.CBufRet.f32 %1029, 2
  %1033 = fmul fast float %1030, %1024
  %1034 = fmul fast float %1026, %1031
  %1035 = fmul fast float %1028, %1032
  %1036 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1037 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1038 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1036, %dx.types.Handle %1037, float %1033, float %1034, float %1035, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1039 = extractvalue %dx.types.ResRet.f32 %1038, 0
  br label %1040

; <label>:1040                                    ; preds = %1004, %994
  %1041 = phi float [ %1039, %1004 ], [ 1.000000e+00, %994 ]
  %1042 = fadd fast float %838, %835
  %1043 = call float @dx.op.unary.f32(i32 22, float %1042)  ; Frc(value)
  %1044 = call float @dx.op.unary.f32(i32 7, float %1043)  ; Saturate(value)
  %1045 = fmul fast float %848, %1044
  %1046 = fadd fast float %853, %1045
  %1047 = fptosi float %1046 to i32
  %1048 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %858, i32 0, i32 %953, i32 %856, i32 %1047, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1049 = extractvalue %dx.types.ResRet.i32 %1048, 0
  %1050 = icmp eq i32 %1049, -1
  br i1 %1050, label %1087, label %1051

; <label>:1051                                    ; preds = %1040
  %1052 = fmul fast float %848, %947
  %1053 = fmul fast float %848, %841
  %1054 = fmul fast float %848, %1043
  %1055 = call float @dx.op.unary.f32(i32 22, float %1052)  ; Frc(value)
  %1056 = call float @dx.op.unary.f32(i32 22, float %1053)  ; Frc(value)
  %1057 = call float @dx.op.unary.f32(i32 22, float %1054)  ; Frc(value)
  %1058 = shl i32 %1049, 3
  %1059 = and i32 %1058, 1016
  %1060 = lshr i32 %1049, 4
  %1061 = and i32 %1060, 1016
  %1062 = lshr i32 %1049, 11
  %1063 = and i32 %1062, 8184
  %1064 = uitofp i32 %1059 to float
  %1065 = uitofp i32 %1061 to float
  %1066 = uitofp i32 %1063 to float
  %1067 = fmul fast float %1055, 7.000000e+00
  %1068 = fmul fast float %1056, 7.000000e+00
  %1069 = fmul fast float %1057, 7.000000e+00
  %1070 = fadd fast float %1064, 5.000000e-01
  %1071 = fadd fast float %1070, %1067
  %1072 = fadd fast float %1065, 5.000000e-01
  %1073 = fadd fast float %1072, %1068
  %1074 = fadd fast float %1066, 5.000000e-01
  %1075 = fadd fast float %1074, %1069
  %1076 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %1077 = extractvalue %dx.types.CBufRet.f32 %1076, 0
  %1078 = extractvalue %dx.types.CBufRet.f32 %1076, 1
  %1079 = extractvalue %dx.types.CBufRet.f32 %1076, 2
  %1080 = fmul fast float %1077, %1071
  %1081 = fmul fast float %1073, %1078
  %1082 = fmul fast float %1075, %1079
  %1083 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1084 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1085 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1083, %dx.types.Handle %1084, float %1080, float %1081, float %1082, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1086 = extractvalue %dx.types.ResRet.f32 %1085, 0
  br label %1087

; <label>:1087                                    ; preds = %1051, %1040
  %1088 = phi float [ %1086, %1051 ], [ 1.000000e+00, %1040 ]
  %1089 = fsub fast float %835, %838
  %1090 = call float @dx.op.unary.f32(i32 22, float %1089)  ; Frc(value)
  %1091 = call float @dx.op.unary.f32(i32 7, float %1090)  ; Saturate(value)
  %1092 = fmul fast float %848, %1091
  %1093 = fadd fast float %853, %1092
  %1094 = fptosi float %1093 to i32
  %1095 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %858, i32 0, i32 %953, i32 %856, i32 %1094, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1096 = extractvalue %dx.types.ResRet.i32 %1095, 0
  %1097 = icmp eq i32 %1096, -1
  br i1 %1097, label %1134, label %1098

; <label>:1098                                    ; preds = %1087
  %1099 = fmul fast float %848, %947
  %1100 = fmul fast float %848, %841
  %1101 = fmul fast float %848, %1090
  %1102 = call float @dx.op.unary.f32(i32 22, float %1099)  ; Frc(value)
  %1103 = call float @dx.op.unary.f32(i32 22, float %1100)  ; Frc(value)
  %1104 = call float @dx.op.unary.f32(i32 22, float %1101)  ; Frc(value)
  %1105 = shl i32 %1096, 3
  %1106 = and i32 %1105, 1016
  %1107 = lshr i32 %1096, 4
  %1108 = and i32 %1107, 1016
  %1109 = lshr i32 %1096, 11
  %1110 = and i32 %1109, 8184
  %1111 = uitofp i32 %1106 to float
  %1112 = uitofp i32 %1108 to float
  %1113 = uitofp i32 %1110 to float
  %1114 = fmul fast float %1102, 7.000000e+00
  %1115 = fmul fast float %1103, 7.000000e+00
  %1116 = fmul fast float %1104, 7.000000e+00
  %1117 = fadd fast float %1111, 5.000000e-01
  %1118 = fadd fast float %1117, %1114
  %1119 = fadd fast float %1112, 5.000000e-01
  %1120 = fadd fast float %1119, %1115
  %1121 = fadd fast float %1113, 5.000000e-01
  %1122 = fadd fast float %1121, %1116
  %1123 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %1124 = extractvalue %dx.types.CBufRet.f32 %1123, 0
  %1125 = extractvalue %dx.types.CBufRet.f32 %1123, 1
  %1126 = extractvalue %dx.types.CBufRet.f32 %1123, 2
  %1127 = fmul fast float %1124, %1118
  %1128 = fmul fast float %1120, %1125
  %1129 = fmul fast float %1122, %1126
  %1130 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1131 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1132 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1130, %dx.types.Handle %1131, float %1127, float %1128, float %1129, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1133 = extractvalue %dx.types.ResRet.f32 %1132, 0
  br label %1134

; <label>:1134                                    ; preds = %1098, %1087
  %1135 = phi float [ %1133, %1098 ], [ 1.000000e+00, %1087 ]
  %1136 = fsub fast float %899, %945
  %1137 = fsub fast float %995, %1041
  %1138 = fsub fast float %1088, %1135
  %1139 = fmul fast float %1136, %1136
  %1140 = fmul fast float %1137, %1137
  %1141 = fadd fast float %1140, %1139
  %1142 = fmul fast float %1138, %1138
  %1143 = fadd fast float %1141, %1142
  %1144 = call float @dx.op.unary.f32(i32 24, float %1143)  ; Sqrt(value)
  %1145 = fcmp fast ogt float %1144, 0x3F50624DE0000000
  br i1 %1145, label %1146, label %1150

; <label>:1146                                    ; preds = %1134
  %1147 = fdiv fast float %1136, %1144
  %1148 = fdiv fast float %1137, %1144
  %1149 = fdiv fast float %1138, %1144
  br label %1150

; <label>:1150                                    ; preds = %1146, %1134
  %1151 = phi float [ %1147, %1146 ], [ %815, %1134 ]
  %1152 = phi float [ %1148, %1146 ], [ %816, %1134 ]
  %1153 = phi float [ %1149, %1146 ], [ %817, %1134 ]
  %1154 = add i32 %806, 195
  %1155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 %1154)  ; CBufferLoadLegacy(handle,regIndex)
  %1156 = extractvalue %dx.types.CBufRet.f32 %1155, 3
  %1157 = fmul fast float %837, %1156
  %1158 = fmul fast float %1157, %1151
  %1159 = fmul fast float %1157, %1152
  %1160 = fmul fast float %1157, %1153
  %1161 = fadd fast float %1158, %812
  %1162 = fadd fast float %1159, %813
  %1163 = fadd fast float %1160, %814
  %1164 = fmul fast float %1157, 1.500000e+00
  %1165 = fmul fast float %1157, 5.000000e-01
  %1166 = fsub fast float %805, %1164
  %1167 = fdiv fast float %1166, %1165
  %1168 = call float @dx.op.unary.f32(i32 7, float %1167)  ; Saturate(value)
  %1169 = fmul fast float %1168, 2.000000e+00
  %1170 = fsub fast float 3.000000e+00, %1169
  %1171 = fmul fast float %1168, %1168
  %1172 = fmul fast float %1171, %1170
  %1173 = fmul fast float %1161, %823
  %1174 = fmul fast float %1162, %823
  %1175 = fmul fast float %1163, %823
  %1176 = fadd fast float %1173, %820
  %1177 = fadd fast float %1174, %821
  %1178 = fadd fast float %1175, %822
  %1179 = call float @dx.op.unary.f32(i32 22, float %1176)  ; Frc(value)
  %1180 = call float @dx.op.unary.f32(i32 22, float %1177)  ; Frc(value)
  %1181 = call float @dx.op.unary.f32(i32 22, float %1178)  ; Frc(value)
  %1182 = call float @dx.op.unary.f32(i32 22, float %1179)  ; Frc(value)
  %1183 = call float @dx.op.unary.f32(i32 22, float %1180)  ; Frc(value)
  %1184 = call float @dx.op.unary.f32(i32 22, float %1181)  ; Frc(value)
  %1185 = call float @dx.op.unary.f32(i32 7, float %1182)  ; Saturate(value)
  %1186 = call float @dx.op.unary.f32(i32 7, float %1183)  ; Saturate(value)
  %1187 = call float @dx.op.unary.f32(i32 7, float %1184)  ; Saturate(value)
  %1188 = fmul fast float %848, %1185
  %1189 = fmul fast float %848, %1186
  %1190 = fmul fast float %848, %1187
  %1191 = fadd fast float %853, %1190
  %1192 = fptosi float %1188 to i32
  %1193 = fptosi float %1189 to i32
  %1194 = fptosi float %1191 to i32
  %1195 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %858, i32 0, i32 %1192, i32 %1193, i32 %1194, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1196 = extractvalue %dx.types.ResRet.i32 %1195, 0
  %1197 = fcmp ule float %1172, 0.000000e+00
  %1198 = icmp eq i32 %1196, -1
  %1199 = or i1 %1197, %1198
  br i1 %1199, label %1745, label %1200

; <label>:1200                                    ; preds = %1150
  %1201 = call float @dx.op.unary.f32(i32 22, float %1188)  ; Frc(value)
  %1202 = call float @dx.op.unary.f32(i32 22, float %1189)  ; Frc(value)
  %1203 = call float @dx.op.unary.f32(i32 22, float %1190)  ; Frc(value)
  %1204 = call float @dx.op.unary.f32(i32 22, float %1201)  ; Frc(value)
  %1205 = call float @dx.op.unary.f32(i32 22, float %1202)  ; Frc(value)
  %1206 = call float @dx.op.unary.f32(i32 22, float %1203)  ; Frc(value)
  %1207 = fmul fast float %1204, 4.000000e+00
  %1208 = fmul fast float %1205, 4.000000e+00
  %1209 = fmul fast float %1206, 4.000000e+00
  %1210 = fptoui float %1207 to i32
  %1211 = fptoui float %1208 to i32
  %1212 = fptoui float %1209 to i32
  %1213 = and i32 %1210, 1
  %1214 = shl i32 %1211, 1
  %1215 = and i32 %1214, 2
  %1216 = shl i32 %1212, 2
  %1217 = and i32 %1216, 4
  %1218 = shl i32 %1210, 2
  %1219 = and i32 %1218, 8
  %1220 = shl i32 %1211, 3
  %1221 = and i32 %1220, 16
  %1222 = shl i32 %1212, 4
  %1223 = and i32 %1222, 32
  %1224 = shl i32 %1196, 6
  %1225 = and i32 %1224, 1073741760
  %1226 = or i32 %1213, %1225
  %1227 = or i32 %1226, %1219
  %1228 = or i32 %1227, %1215
  %1229 = or i32 %1228, %1221
  %1230 = or i32 %1229, %1217
  %1231 = or i32 %1230, %1223
  %1232 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1233 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1232, i32 %1231, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1234 = extractvalue %dx.types.ResRet.i32 %1233, 0
  %1235 = extractvalue %dx.types.ResRet.i32 %1233, 1
  %1236 = extractvalue %dx.types.ResRet.i32 %1233, 2
  %1237 = extractvalue %dx.types.ResRet.i32 %1233, 3
  %1238 = getelementptr inbounds [4 x i32], [4 x i32]* %53, i32 0, i32 0
  store i32 %1234, i32* %1238, align 4
  %1239 = getelementptr inbounds [4 x i32], [4 x i32]* %53, i32 0, i32 1
  store i32 %1235, i32* %1239, align 4
  %1240 = getelementptr inbounds [4 x i32], [4 x i32]* %53, i32 0, i32 2
  store i32 %1236, i32* %1240, align 4
  %1241 = getelementptr inbounds [4 x i32], [4 x i32]* %53, i32 0, i32 3
  store i32 %1237, i32* %1241, align 4
  %1242 = icmp eq i32 %1234, -1
  br i1 %1242, label %1728, label %1243

; <label>:1243                                    ; preds = %1200
  br label %1244

; <label>:1244                                    ; preds = %1719, %1243
  %1245 = phi i32 [ %1717, %1719 ], [ 0, %1243 ]
  %1246 = phi float [ %1716, %1719 ], [ 0.000000e+00, %1243 ]
  %1247 = phi float [ %1715, %1719 ], [ 0.000000e+00, %1243 ]
  %1248 = phi float [ %1714, %1719 ], [ 0.000000e+00, %1243 ]
  %1249 = phi float [ %1713, %1719 ], [ 0.000000e+00, %1243 ]
  %1250 = phi float [ %1712, %1719 ], [ 0.000000e+00, %1243 ]
  %1251 = phi i32 [ %1721, %1719 ], [ %1234, %1243 ]
  %1252 = shl i32 %1251, 2
  %1253 = and i32 %1252, 67108860
  %1254 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1255 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1254, i32 %1253, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1256 = extractvalue %dx.types.ResRet.i32 %1255, 0
  %1257 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1258 = extractvalue %dx.types.CBufRet.i32 %1257, 1
  %1259 = icmp ult i32 %1256, %1258
  br i1 %1259, label %1260, label %1711

; <label>:1260                                    ; preds = %1244
  %1261 = fmul fast float %1157, 3.000000e+00
  %1262 = mul i32 %1256, 6
  %1263 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1264 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1263, i32 %1262, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1265 = extractvalue %dx.types.ResRet.f32 %1264, 0
  %1266 = extractvalue %dx.types.ResRet.f32 %1264, 1
  %1267 = extractvalue %dx.types.ResRet.f32 %1264, 2
  %1268 = or i32 %1262, 1
  %1269 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1263, i32 %1268, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1270 = extractvalue %dx.types.ResRet.f32 %1269, 0
  %1271 = extractvalue %dx.types.ResRet.f32 %1269, 1
  %1272 = extractvalue %dx.types.ResRet.f32 %1269, 2
  %1273 = extractvalue %dx.types.ResRet.f32 %1269, 3
  %1274 = add i32 %1262, 2
  %1275 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1263, i32 %1274, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1276 = extractvalue %dx.types.ResRet.f32 %1275, 0
  %1277 = extractvalue %dx.types.ResRet.f32 %1275, 1
  %1278 = extractvalue %dx.types.ResRet.f32 %1275, 2
  %1279 = extractvalue %dx.types.ResRet.f32 %1275, 3
  %1280 = add i32 %1262, 3
  %1281 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1263, i32 %1280, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1282 = extractvalue %dx.types.ResRet.f32 %1281, 0
  %1283 = extractvalue %dx.types.ResRet.f32 %1281, 1
  %1284 = extractvalue %dx.types.ResRet.f32 %1281, 2
  %1285 = extractvalue %dx.types.ResRet.f32 %1281, 3
  %1286 = fmul fast float %1265, 2.097152e+06
  %1287 = fmul fast float %1266, 2.097152e+06
  %1288 = fmul fast float %1267, 2.097152e+06
  %1289 = add i32 %1262, 4
  %1290 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1263, i32 %1289, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1291 = extractvalue %dx.types.ResRet.f32 %1290, 0
  %1292 = extractvalue %dx.types.ResRet.f32 %1290, 1
  %1293 = extractvalue %dx.types.ResRet.f32 %1290, 2
  %1294 = extractvalue %dx.types.ResRet.f32 %1290, 3
  %1295 = bitcast float %1291 to i32
  %1296 = bitcast float %1292 to i32
  %1297 = add i32 %1262, 5
  %1298 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1263, i32 %1297, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1299 = extractvalue %dx.types.ResRet.f32 %1298, 0
  %1300 = extractvalue %dx.types.ResRet.f32 %1298, 1
  %1301 = extractvalue %dx.types.ResRet.f32 %1298, 2
  %1302 = extractvalue %dx.types.ResRet.f32 %1298, 3
  %1303 = and i32 %1296, 65536
  %1304 = icmp ne i32 %1303, 0
  %1305 = and i32 %1296, 131072
  %1306 = icmp ne i32 %1305, 0
  %1307 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 0
  %1308 = bitcast i32* %1307 to float*
  store float %1293, float* %1308, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1309 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 1
  %1310 = bitcast i32* %1309 to float*
  store float %1294, float* %1310, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1311 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 2
  %1312 = bitcast i32* %1311 to float*
  store float %1299, float* %1312, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1313 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 3
  %1314 = bitcast i32* %1313 to float*
  store float %1300, float* %1314, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1315 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 4
  %1316 = bitcast i32* %1315 to float*
  store float %1301, float* %1316, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1317 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 5
  %1318 = bitcast i32* %1317 to float*
  store float %1302, float* %1318, align 4, !tbaa !64, !alias.scope !68, !noalias !71
  %1319 = fadd fast float %1261, 5.000000e+01
  %1320 = select i1 %1306, float %1319, float %1261
  %1321 = fadd fast float %230, %393
  %1322 = fsub fast float %1321, %227
  %1323 = fadd fast float %1322, %809
  %1324 = fsub fast float %1323, %1286
  %1325 = fsub fast float %1324, %1273
  %1326 = fadd fast float %231, %394
  %1327 = fsub fast float %1326, %228
  %1328 = fadd fast float %1327, %810
  %1329 = fsub fast float %1328, %1287
  %1330 = fsub fast float %1329, %1279
  %1331 = fadd fast float %232, %395
  %1332 = fsub fast float %1331, %229
  %1333 = fadd fast float %1332, %811
  %1334 = fsub fast float %1333, %1288
  %1335 = fsub fast float %1334, %1285
  %1336 = fmul fast float %1325, %1270
  %1337 = call float @dx.op.tertiary.f32(i32 46, float %1330, float %1276, float %1336)  ; FMad(a,b,c)
  %1338 = call float @dx.op.tertiary.f32(i32 46, float %1335, float %1282, float %1337)  ; FMad(a,b,c)
  %1339 = fmul fast float %1325, %1271
  %1340 = call float @dx.op.tertiary.f32(i32 46, float %1330, float %1277, float %1339)  ; FMad(a,b,c)
  %1341 = call float @dx.op.tertiary.f32(i32 46, float %1335, float %1283, float %1340)  ; FMad(a,b,c)
  %1342 = fmul fast float %1325, %1272
  %1343 = call float @dx.op.tertiary.f32(i32 46, float %1330, float %1278, float %1342)  ; FMad(a,b,c)
  %1344 = call float @dx.op.tertiary.f32(i32 46, float %1335, float %1284, float %1343)  ; FMad(a,b,c)
  %1345 = fmul fast float %1270, %1151
  %1346 = call float @dx.op.tertiary.f32(i32 46, float %1152, float %1276, float %1345)  ; FMad(a,b,c)
  %1347 = call float @dx.op.tertiary.f32(i32 46, float %1153, float %1282, float %1346)  ; FMad(a,b,c)
  %1348 = fmul fast float %1271, %1151
  %1349 = call float @dx.op.tertiary.f32(i32 46, float %1152, float %1277, float %1348)  ; FMad(a,b,c)
  %1350 = call float @dx.op.tertiary.f32(i32 46, float %1153, float %1283, float %1349)  ; FMad(a,b,c)
  %1351 = fmul fast float %1272, %1151
  %1352 = call float @dx.op.tertiary.f32(i32 46, float %1152, float %1278, float %1351)  ; FMad(a,b,c)
  %1353 = call float @dx.op.tertiary.f32(i32 46, float %1153, float %1284, float %1352)  ; FMad(a,b,c)
  %1354 = fmul fast float %1347, %1347
  %1355 = fmul fast float %1350, %1350
  %1356 = fmul fast float %1353, %1353
  %1357 = fcmp fast ogt float %1354, 0.000000e+00
  br i1 %1357, label %1358, label %1363

; <label>:1358                                    ; preds = %1260
  %1359 = fcmp uge float %1347, 0.000000e+00
  %1360 = zext i1 %1359 to i32
  %1361 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 %1360
  %1362 = load i32, i32* %1361, align 4, !tbaa !64, !noalias !71
  br label %1363

; <label>:1363                                    ; preds = %1358, %1260
  %1364 = phi i32 [ %1362, %1358 ], [ 0, %1260 ]
  %1365 = fcmp fast ogt float %1355, 0.000000e+00
  br i1 %1365, label %1366, label %1372

; <label>:1366                                    ; preds = %1363
  %1367 = fcmp fast olt float %1350, 0.000000e+00
  %1368 = select i1 %1367, i32 2, i32 3
  %1369 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 %1368
  %1370 = load i32, i32* %1369, align 4, !tbaa !64, !noalias !71
  %1371 = or i32 %1370, %1364
  br label %1372

; <label>:1372                                    ; preds = %1366, %1363
  %1373 = phi i32 [ %1371, %1366 ], [ %1364, %1363 ]
  %1374 = fcmp fast ogt float %1356, 0.000000e+00
  br i1 %1374, label %1375, label %1381

; <label>:1375                                    ; preds = %1372
  %1376 = fcmp fast olt float %1353, 0.000000e+00
  %1377 = select i1 %1376, i32 4, i32 5
  %1378 = getelementptr inbounds [6 x i32], [6 x i32]* %52, i32 0, i32 %1377
  %1379 = load i32, i32* %1378, align 4, !tbaa !64, !noalias !71
  %1380 = or i32 %1379, %1373
  br label %1381

; <label>:1381                                    ; preds = %1375, %1372
  %1382 = phi i32 [ %1380, %1375 ], [ %1373, %1372 ]
  %1383 = icmp eq i32 %1382, 0
  br i1 %1383, label %1428, label %1384

; <label>:1384                                    ; preds = %1381
  br label %1385

; <label>:1385                                    ; preds = %1385, %1384
  %1386 = phi i32 [ %1391, %1385 ], [ %1382, %1384 ]
  %1387 = phi i32 [ %1425, %1385 ], [ 0, %1384 ]
  %1388 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1386)  ; FirstbitLo(value)
  %1389 = and i32 %1388, 31
  %1390 = shl i32 1, %1389
  %1391 = xor i32 %1390, %1386
  %1392 = add i32 %1388, %1295
  %1393 = mul i32 %1392, 10
  %1394 = add i32 %1393, 6
  %1395 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1396 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1395, i32 %1394, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1397 = extractvalue %dx.types.ResRet.f32 %1396, 3
  %1398 = add i32 %1393, 7
  %1399 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1395, i32 %1398, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1400 = extractvalue %dx.types.ResRet.f32 %1399, 3
  %1401 = add i32 %1393, 8
  %1402 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1395, i32 %1401, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1403 = extractvalue %dx.types.ResRet.f32 %1402, 3
  %1404 = add i32 %1393, 9
  %1405 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1395, i32 %1404, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1406 = extractvalue %dx.types.ResRet.f32 %1405, 0
  %1407 = extractvalue %dx.types.ResRet.f32 %1405, 1
  %1408 = extractvalue %dx.types.ResRet.f32 %1405, 2
  %1409 = fsub fast float %1338, %1397
  %1410 = fsub fast float %1341, %1400
  %1411 = fsub fast float %1344, %1403
  %1412 = call float @dx.op.unary.f32(i32 6, float %1409)  ; FAbs(value)
  %1413 = call float @dx.op.unary.f32(i32 6, float %1410)  ; FAbs(value)
  %1414 = call float @dx.op.unary.f32(i32 6, float %1411)  ; FAbs(value)
  %1415 = fmul fast float %1320, 5.000000e-01
  %1416 = fadd fast float %1406, %1415
  %1417 = fadd fast float %1407, %1415
  %1418 = fadd fast float %1408, %1415
  %1419 = fcmp fast ole float %1412, %1416
  %1420 = fcmp fast ole float %1413, %1417
  %1421 = fcmp fast ole float %1414, %1418
  %1422 = and i1 %1419, %1420
  %1423 = and i1 %1422, %1421
  %1424 = select i1 %1423, i32 %1390, i32 0
  %1425 = or i32 %1424, %1387
  %1426 = icmp eq i32 %1386, %1390
  br i1 %1426, label %1427, label %1385

; <label>:1427                                    ; preds = %1385
  br label %1428

; <label>:1428                                    ; preds = %1427, %1381
  %1429 = phi i32 [ 0, %1381 ], [ %1425, %1427 ]
  %1430 = select i1 %1304, i32 1, i32 %1429
  %1431 = icmp eq i32 %1430, 0
  br i1 %1431, label %1704, label %1432

; <label>:1432                                    ; preds = %1428
  br label %1433

; <label>:1433                                    ; preds = %1453, %1432
  %1434 = phi float [ %1454, %1453 ], [ %1250, %1432 ]
  %1435 = phi float [ %1455, %1453 ], [ %1249, %1432 ]
  %1436 = phi float [ %1456, %1453 ], [ %1248, %1432 ]
  %1437 = phi float [ %1457, %1453 ], [ %1247, %1432 ]
  %1438 = phi float [ %1458, %1453 ], [ %1246, %1432 ]
  %1439 = phi i32 [ %1443, %1453 ], [ %1430, %1432 ]
  %1440 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1439)  ; FirstbitLo(value)
  %1441 = and i32 %1440, 31
  %1442 = shl i32 1, %1441
  %1443 = xor i32 %1442, %1439
  %1444 = add i32 %1440, %1295
  %1445 = mul i32 %1444, 10
  %1446 = add i32 %1445, 4
  %1447 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1448 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1447, i32 %1446, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1449 = extractvalue %dx.types.ResRet.f32 %1448, 3
  %1450 = bitcast float %1449 to i32
  %1451 = and i32 %1450, 16777216
  %1452 = icmp eq i32 %1451, 0
  br i1 %1452, label %1453, label %1460

; <label>:1453                                    ; preds = %3664, %1702, %1670, %1639, %1520, %1464, %1460, %1433
  %1454 = phi float [ %1434, %1433 ], [ %3671, %1702 ], [ %1434, %1670 ], [ %1434, %3664 ], [ %1434, %1639 ], [ %1434, %1520 ], [ %1434, %1464 ], [ %1434, %1460 ]
  %1455 = phi float [ %1435, %1433 ], [ %1697, %1702 ], [ %1697, %1670 ], [ %1435, %3664 ], [ %1435, %1639 ], [ %1435, %1520 ], [ %1435, %1464 ], [ %1435, %1460 ]
  %1456 = phi float [ %1436, %1433 ], [ %1698, %1702 ], [ %1698, %1670 ], [ %1436, %3664 ], [ %1436, %1639 ], [ %1436, %1520 ], [ %1436, %1464 ], [ %1436, %1460 ]
  %1457 = phi float [ %1437, %1433 ], [ %1699, %1702 ], [ %1699, %1670 ], [ %1437, %3664 ], [ %1437, %1639 ], [ %1437, %1520 ], [ %1437, %1464 ], [ %1437, %1460 ]
  %1458 = phi float [ %1438, %1433 ], [ %1700, %1702 ], [ %1700, %1670 ], [ %1438, %3664 ], [ %1438, %1639 ], [ %1438, %1520 ], [ %1438, %1464 ], [ %1438, %1460 ]
  %1459 = icmp eq i32 %1439, %1442
  br i1 %1459, label %1703, label %1433

; <label>:1460                                    ; preds = %1433
  %1461 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %48, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1462 = extractvalue %dx.types.CBufRet.i32 %1461, 0
  %1463 = icmp ult i32 %1444, %1462
  br i1 %1463, label %1464, label %1453

; <label>:1464                                    ; preds = %1460
  %1465 = extractvalue %dx.types.ResRet.f32 %1448, 0
  %1466 = extractvalue %dx.types.ResRet.f32 %1448, 1
  %1467 = extractvalue %dx.types.ResRet.f32 %1448, 2
  %1468 = add i32 %1445, 5
  %1469 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1447, i32 %1468, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1470 = extractvalue %dx.types.ResRet.f32 %1469, 0
  %1471 = add i32 %1445, 6
  %1472 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1447, i32 %1471, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1473 = add i32 %1445, 7
  %1474 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1447, i32 %1473, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1475 = add i32 %1445, 8
  %1476 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1447, i32 %1475, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1477 = call float @dx.op.unary.f32(i32 6, float %1465)  ; FAbs(value)
  %1478 = call float @dx.op.unary.f32(i32 6, float %1466)  ; FAbs(value)
  %1479 = call float @dx.op.unary.f32(i32 6, float %1467)  ; FAbs(value)
  %1480 = lshr i32 %1450, 16
  %1481 = and i32 %1480, 15
  %1482 = bitcast float %1470 to i32
  %1483 = and i32 %1482, 65535
  %1484 = extractvalue %dx.types.ResRet.f32 %1476, 3
  %1485 = extractvalue %dx.types.ResRet.f32 %1476, 2
  %1486 = extractvalue %dx.types.ResRet.f32 %1476, 1
  %1487 = extractvalue %dx.types.ResRet.f32 %1476, 0
  %1488 = extractvalue %dx.types.ResRet.f32 %1474, 3
  %1489 = extractvalue %dx.types.ResRet.f32 %1474, 2
  %1490 = extractvalue %dx.types.ResRet.f32 %1474, 1
  %1491 = extractvalue %dx.types.ResRet.f32 %1474, 0
  %1492 = extractvalue %dx.types.ResRet.f32 %1472, 3
  %1493 = extractvalue %dx.types.ResRet.f32 %1472, 2
  %1494 = extractvalue %dx.types.ResRet.f32 %1472, 1
  %1495 = extractvalue %dx.types.ResRet.f32 %1472, 0
  %1496 = fsub fast float %1338, %1492
  %1497 = fsub fast float %1341, %1488
  %1498 = fsub fast float %1344, %1484
  %1499 = fmul fast float %1496, %1495
  %1500 = call float @dx.op.tertiary.f32(i32 46, float %1497, float %1491, float %1499)  ; FMad(a,b,c)
  %1501 = call float @dx.op.tertiary.f32(i32 46, float %1498, float %1487, float %1500)  ; FMad(a,b,c)
  %1502 = fmul fast float %1496, %1494
  %1503 = call float @dx.op.tertiary.f32(i32 46, float %1497, float %1490, float %1502)  ; FMad(a,b,c)
  %1504 = call float @dx.op.tertiary.f32(i32 46, float %1498, float %1486, float %1503)  ; FMad(a,b,c)
  %1505 = fmul fast float %1496, %1493
  %1506 = call float @dx.op.tertiary.f32(i32 46, float %1497, float %1489, float %1505)  ; FMad(a,b,c)
  %1507 = call float @dx.op.tertiary.f32(i32 46, float %1498, float %1485, float %1506)  ; FMad(a,b,c)
  %1508 = call float @dx.op.unary.f32(i32 6, float %1501)  ; FAbs(value)
  %1509 = call float @dx.op.unary.f32(i32 6, float %1504)  ; FAbs(value)
  %1510 = call float @dx.op.unary.f32(i32 6, float %1507)  ; FAbs(value)
  %1511 = fmul fast float %1320, 5.000000e-01
  %1512 = fadd fast float %1477, %1511
  %1513 = fadd fast float %1478, %1511
  %1514 = fadd fast float %1479, %1511
  %1515 = fcmp fast ole float %1508, %1512
  %1516 = fcmp fast ole float %1509, %1513
  %1517 = fcmp fast ole float %1510, %1514
  %1518 = and i1 %1515, %1516
  %1519 = and i1 %1518, %1517
  br i1 %1519, label %1520, label %1453

; <label>:1520                                    ; preds = %1464
  %1521 = extractvalue %dx.types.ResRet.f32 %1469, 1
  %1522 = bitcast float %1521 to i32
  %1523 = lshr i32 %1482, 16
  %1524 = fsub fast float -0.000000e+00, %1477
  %1525 = fsub fast float -0.000000e+00, %1478
  %1526 = call float @dx.op.binary.f32(i32 35, float %1501, float %1524)  ; FMax(a,b)
  %1527 = call float @dx.op.binary.f32(i32 35, float %1504, float %1525)  ; FMax(a,b)
  %1528 = call float @dx.op.binary.f32(i32 36, float %1526, float %1477)  ; FMin(a,b)
  %1529 = call float @dx.op.binary.f32(i32 36, float %1527, float %1478)  ; FMin(a,b)
  %1530 = fdiv fast float %1528, %1477
  %1531 = fdiv fast float %1529, %1478
  %1532 = fmul fast float %1530, 5.000000e-01
  %1533 = fmul fast float %1531, 5.000000e-01
  %1534 = fadd fast float %1532, 5.000000e-01
  %1535 = fsub fast float 5.000000e-01, %1533
  %1536 = call float @dx.op.unary.f32(i32 7, float %1534)  ; Saturate(value)
  %1537 = call float @dx.op.unary.f32(i32 7, float %1535)  ; Saturate(value)
  %1538 = call float @dx.op.binary.f32(i32 36, float %1536, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1539 = call float @dx.op.binary.f32(i32 36, float %1537, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1540 = uitofp i32 %1483 to float
  %1541 = uitofp i32 %1523 to float
  %1542 = fmul fast float %1538, %1540
  %1543 = fmul fast float %1539, %1541
  %1544 = fptoui float %1542 to i32
  %1545 = fptoui float %1543 to i32
  %1546 = mul i32 %1545, %1483
  %1547 = add i32 %1544, %1522
  %1548 = add i32 %1547, %1546
  %1549 = shl i32 %1548, 3
  %1550 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1551 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1550, i32 %1549, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1552 = extractvalue %dx.types.ResRet.i32 %1551, 0
  %1553 = shl i32 %1552, 3
  %1554 = and i32 %1553, 32760
  %1555 = lshr i32 %1552, 9
  %1556 = and i32 %1555, 32760
  %1557 = lshr i32 %1552, 24
  %1558 = and i32 %1557, 15
  %1559 = lshr i32 %1552, 28
  %1560 = add nuw nsw i32 %1558, 25
  %1561 = add nuw nsw i32 %1559, 25
  %1562 = and i32 %1560, 31
  %1563 = and i32 %1561, 31
  %1564 = shl i32 1, %1562
  %1565 = shl i32 1, %1563
  %1566 = icmp ugt i32 %1558, 7
  %1567 = icmp slt i32 %1552, 0
  %1568 = select i1 %1566, i32 %1564, i32 1
  %1569 = select i1 %1567, i32 %1565, i32 1
  %1570 = uitofp i32 %1568 to float
  %1571 = uitofp i32 %1569 to float
  %1572 = fmul fast float %1570, %1538
  %1573 = fmul fast float %1571, %1539
  %1574 = fptoui float %1572 to i32
  %1575 = fptoui float %1573 to i32
  %1576 = shl i32 1, %1558
  %1577 = shl i32 1, %1559
  %1578 = call float @dx.op.unary.f32(i32 22, float %1572)  ; Frc(value)
  %1579 = call float @dx.op.unary.f32(i32 22, float %1573)  ; Frc(value)
  %1580 = icmp eq i32 %1574, 0
  %1581 = icmp eq i32 %1575, 0
  %1582 = select i1 %1580, float 0.000000e+00, float 5.000000e-01
  %1583 = select i1 %1581, float 0.000000e+00, float 5.000000e-01
  %1584 = add i32 %1574, 1
  %1585 = add i32 %1575, 1
  %1586 = icmp eq i32 %1584, %1568
  %1587 = icmp eq i32 %1585, %1569
  %1588 = uitofp i32 %1576 to float
  %1589 = select i1 %1566, float 1.280000e+02, float %1588
  %1590 = uitofp i32 %1577 to float
  %1591 = select i1 %1567, float 1.280000e+02, float %1590
  %1592 = fsub fast float %1589, %1582
  %1593 = fsub fast float %1591, %1583
  %1594 = select i1 %1586, float -0.000000e+00, float -5.000000e-01
  %1595 = fadd fast float %1592, %1594
  %1596 = select i1 %1587, float -0.000000e+00, float -5.000000e-01
  %1597 = fadd fast float %1593, %1596
  %1598 = fmul fast float %1595, %1578
  %1599 = fmul fast float %1597, %1579
  %1600 = fadd fast float %1598, %1582
  %1601 = fadd fast float %1599, %1583
  %1602 = fadd fast float %1589, -1.500000e+00
  %1603 = fadd fast float %1591, -1.500000e+00
  %1604 = call float @dx.op.binary.f32(i32 35, float %1600, float 5.000000e-01)  ; FMax(a,b)
  %1605 = call float @dx.op.binary.f32(i32 35, float %1601, float 5.000000e-01)  ; FMax(a,b)
  %1606 = call float @dx.op.binary.f32(i32 36, float %1604, float %1602)  ; FMin(a,b)
  %1607 = call float @dx.op.binary.f32(i32 36, float %1605, float %1603)  ; FMin(a,b)
  %1608 = uitofp i32 %1554 to float
  %1609 = uitofp i32 %1556 to float
  %1610 = fadd fast float %1606, %1608
  %1611 = fadd fast float %1607, %1609
  %1612 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1613 = extractvalue %dx.types.CBufRet.f32 %1612, 0
  %1614 = extractvalue %dx.types.CBufRet.f32 %1612, 1
  %1615 = fmul fast float %1613, %1610
  %1616 = fmul fast float %1614, %1611
  %1617 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1618 = extractvalue %dx.types.CBufRet.f32 %1617, 2
  %1619 = extractvalue %dx.types.CBufRet.f32 %1617, 3
  %1620 = fmul fast float %1615, %1618
  %1621 = fmul fast float %1616, %1619
  %1622 = fadd fast float %1620, 0x3FE0100000000000
  %1623 = fadd fast float %1621, 0x3FE0100000000000
  %1624 = call float @dx.op.unary.f32(i32 22, float %1622)  ; Frc(value)
  %1625 = call float @dx.op.unary.f32(i32 22, float %1623)  ; Frc(value)
  %1626 = fsub fast float 1.000000e+00, %1624
  %1627 = fmul fast float %1626, %1625
  %1628 = fmul fast float %1625, %1624
  %1629 = fsub fast float 1.000000e+00, %1625
  %1630 = fmul fast float %1629, %1624
  %1631 = fmul fast float %1629, %1626
  %1632 = icmp eq i32 %1558, 0
  br i1 %1632, label %1453, label %1633

; <label>:1633                                    ; preds = %1520
  br i1 %1304, label %1639, label %1634

; <label>:1634                                    ; preds = %1633
  %1635 = icmp ult i32 %1481, 2
  br i1 %1635, label %1639, label %1636

; <label>:1636                                    ; preds = %1634
  %1637 = icmp ult i32 %1481, 4
  %1638 = select i1 %1637, float %1355, float %1356
  br label %1639

; <label>:1639                                    ; preds = %1636, %1634, %1633
  %1640 = phi float [ 1.000000e+00, %1633 ], [ %1354, %1634 ], [ %1638, %1636 ]
  %1641 = fcmp fast ogt float %1640, 0.000000e+00
  br i1 %1641, label %1642, label %1453

; <label>:1642                                    ; preds = %1639
  %1643 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1644 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1645 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1643, %dx.types.Handle %1644, float %1615, float %1616, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1646 = extractvalue %dx.types.ResRet.f32 %1645, 0
  %1647 = extractvalue %dx.types.ResRet.f32 %1645, 1
  %1648 = extractvalue %dx.types.ResRet.f32 %1645, 2
  %1649 = extractvalue %dx.types.ResRet.f32 %1645, 3
  %1650 = fdiv fast float %1507, %1479
  %1651 = fmul fast float %1650, 5.000000e-01
  %1652 = fsub fast float 5.000000e-01, %1651
  %1653 = fdiv fast float %1320, %1479
  %1654 = fmul fast float %1653, 2.500000e-01
  %1655 = fcmp uge float %1646, 1.000000e+00
  %1656 = or i1 %1304, %1655
  %1657 = select i1 %1655, float 0.000000e+00, float 1.000000e+00
  br i1 %1656, label %1665, label %1658

; <label>:1658                                    ; preds = %1642
  %1659 = fsub fast float %1652, %1646
  %1660 = call float @dx.op.unary.f32(i32 6, float %1659)  ; FAbs(value)
  %1661 = fsub fast float %1660, %1653
  %1662 = fdiv fast float %1661, %1654
  %1663 = call float @dx.op.unary.f32(i32 7, float %1662)  ; Saturate(value)
  %1664 = fsub fast float 1.000000e+00, %1663
  br label %1665

; <label>:1665                                    ; preds = %1658, %1642
  %1666 = phi float [ %1664, %1658 ], [ %1657, %1642 ]
  %1667 = fcmp uge float %1647, 1.000000e+00
  %1668 = or i1 %1304, %1667
  %1669 = select i1 %1667, float 0.000000e+00, float 1.000000e+00
  br i1 %1668, label %3640, label %3633

; <label>:1670                                    ; preds = %3664
  %1671 = fdiv fast float %3666, %3670
  %1672 = fdiv fast float %3667, %3670
  %1673 = fdiv fast float %3668, %3670
  %1674 = fdiv fast float %3669, %3670
  %1675 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1676 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1675, %dx.types.Handle %1644, float %1615, float %1616, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1677 = extractvalue %dx.types.ResRet.f32 %1676, 0
  %1678 = extractvalue %dx.types.ResRet.f32 %1676, 1
  %1679 = extractvalue %dx.types.ResRet.f32 %1676, 2
  %1680 = extractvalue %dx.types.ResRet.f32 %1676, 3
  %1681 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1675, %dx.types.Handle %1644, float %1615, float %1616, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1682 = extractvalue %dx.types.ResRet.f32 %1681, 0
  %1683 = extractvalue %dx.types.ResRet.f32 %1681, 1
  %1684 = extractvalue %dx.types.ResRet.f32 %1681, 2
  %1685 = extractvalue %dx.types.ResRet.f32 %1681, 3
  %1686 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1675, %dx.types.Handle %1644, float %1615, float %1616, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1687 = extractvalue %dx.types.ResRet.f32 %1686, 0
  %1688 = extractvalue %dx.types.ResRet.f32 %1686, 1
  %1689 = extractvalue %dx.types.ResRet.f32 %1686, 2
  %1690 = extractvalue %dx.types.ResRet.f32 %1686, 3
  %1691 = call float @dx.op.dot4.f32(i32 56, float %1677, float %1678, float %1679, float %1680, float %1671, float %1672, float %1673, float %1674)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1692 = call float @dx.op.dot4.f32(i32 56, float %1682, float %1683, float %1684, float %1685, float %1671, float %1672, float %1673, float %1674)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1693 = call float @dx.op.dot4.f32(i32 56, float %1687, float %1688, float %1689, float %1690, float %1671, float %1672, float %1673, float %1674)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1694 = fmul fast float %1691, %3671
  %1695 = fmul fast float %1692, %3671
  %1696 = fmul fast float %1693, %3671
  %1697 = fadd fast float %1694, %1435
  %1698 = fadd fast float %1695, %1436
  %1699 = fadd fast float %1696, %1437
  %1700 = fadd fast float %3671, %1438
  %1701 = fcmp fast ogt float %3671, %1434
  br i1 %1701, label %1702, label %1453

; <label>:1702                                    ; preds = %1670
  br label %1453

; <label>:1703                                    ; preds = %1453
  br label %1704

; <label>:1704                                    ; preds = %1703, %1428
  %1705 = phi float [ %1250, %1428 ], [ %1454, %1703 ]
  %1706 = phi float [ %1249, %1428 ], [ %1455, %1703 ]
  %1707 = phi float [ %1248, %1428 ], [ %1456, %1703 ]
  %1708 = phi float [ %1247, %1428 ], [ %1457, %1703 ]
  %1709 = phi float [ %1246, %1428 ], [ %1458, %1703 ]
  %1710 = fcmp fast ult float %1709, 0x3FECCCCCC0000000
  br i1 %1710, label %1711, label %1723

; <label>:1711                                    ; preds = %1704, %1244
  %1712 = phi float [ %1705, %1704 ], [ %1250, %1244 ]
  %1713 = phi float [ %1706, %1704 ], [ %1249, %1244 ]
  %1714 = phi float [ %1707, %1704 ], [ %1248, %1244 ]
  %1715 = phi float [ %1708, %1704 ], [ %1247, %1244 ]
  %1716 = phi float [ %1709, %1704 ], [ %1246, %1244 ]
  %1717 = add nuw nsw i32 %1245, 1
  %1718 = icmp ult i32 %1717, 4
  br i1 %1718, label %1719, label %1723

; <label>:1719                                    ; preds = %1711
  %1720 = getelementptr [4 x i32], [4 x i32]* %53, i32 0, i32 %1717
  %1721 = load i32, i32* %1720, align 4, !tbaa !64, !noalias !80
  %1722 = icmp eq i32 %1721, -1
  br i1 %1722, label %1723, label %1244

; <label>:1723                                    ; preds = %1719, %1711, %1704
  %1724 = phi float [ %1706, %1704 ], [ %1713, %1719 ], [ %1713, %1711 ]
  %1725 = phi float [ %1707, %1704 ], [ %1714, %1719 ], [ %1714, %1711 ]
  %1726 = phi float [ %1708, %1704 ], [ %1715, %1719 ], [ %1715, %1711 ]
  %1727 = phi float [ %1709, %1704 ], [ %1716, %1719 ], [ %1716, %1711 ]
  br label %1728

; <label>:1728                                    ; preds = %1723, %1200
  %1729 = phi float [ 0.000000e+00, %1200 ], [ %1724, %1723 ]
  %1730 = phi float [ 0.000000e+00, %1200 ], [ %1725, %1723 ]
  %1731 = phi float [ 0.000000e+00, %1200 ], [ %1726, %1723 ]
  %1732 = phi float [ 0.000000e+00, %1200 ], [ %1727, %1723 ]
  %1733 = fcmp fast ogt float %1732, 0.000000e+00
  br i1 %1733, label %1734, label %1738

; <label>:1734                                    ; preds = %1728
  %1735 = fdiv fast float %1729, %1732
  %1736 = fdiv fast float %1730, %1732
  %1737 = fdiv fast float %1731, %1732
  br label %1738

; <label>:1738                                    ; preds = %1734, %1728
  %1739 = phi float [ %1735, %1734 ], [ 0.000000e+00, %1728 ]
  %1740 = phi float [ %1736, %1734 ], [ 0.000000e+00, %1728 ]
  %1741 = phi float [ %1737, %1734 ], [ 0.000000e+00, %1728 ]
  %1742 = fmul fast float %1739, %1172
  %1743 = fmul fast float %1740, %1172
  %1744 = fmul fast float %1741, %1172
  br label %1745

; <label>:1745                                    ; preds = %1738, %1150, %804
  %1746 = phi float [ %475, %804 ], [ %805, %1150 ], [ %805, %1738 ]
  %1747 = phi float [ 1.000000e+00, %804 ], [ 0.000000e+00, %1150 ], [ 0.000000e+00, %1738 ]
  %1748 = phi float [ 0.000000e+00, %804 ], [ 0.000000e+00, %1150 ], [ %1742, %1738 ]
  %1749 = phi float [ 0.000000e+00, %804 ], [ 0.000000e+00, %1150 ], [ %1743, %1738 ]
  %1750 = phi float [ 0.000000e+00, %804 ], [ 0.000000e+00, %1150 ], [ %1744, %1738 ]
  %1751 = call float @dx.op.binary.f32(i32 36, float %475, float %1746)  ; FMin(a,b)
  br label %1752

; <label>:1752                                    ; preds = %1745, %474
  %1753 = phi float [ %1751, %1745 ], [ %475, %474 ]
  %1754 = phi float [ %1747, %1745 ], [ 1.000000e+00, %474 ]
  %1755 = phi float [ %1748, %1745 ], [ 0.000000e+00, %474 ]
  %1756 = phi float [ %1749, %1745 ], [ 0.000000e+00, %474 ]
  %1757 = phi float [ %1750, %1745 ], [ 0.000000e+00, %474 ]
  %1758 = call float @dx.op.binary.f32(i32 36, float %475, float %1753)  ; FMin(a,b)
  %1759 = fmul fast float %1758, %321
  %1760 = fmul fast float %1758, %331
  %1761 = fmul fast float %1758, %339
  %1762 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1763 = extractvalue %dx.types.CBufRet.i32 %1762, 1
  %1764 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1765 = extractvalue %dx.types.CBufRet.i32 %1764, 1
  %1766 = icmp ugt i32 %1763, 1
  %1767 = select i1 %1766, i32 0, i32 %1765
  %1768 = mul i32 %116, 1664525
  %1769 = mul i32 %117, 1664525
  %1770 = mul i32 %1767, 1664525
  %1771 = add i32 %1768, 1013904223
  %1772 = add i32 %1769, 1013904223
  %1773 = add i32 %1770, 1013904223
  %1774 = mul i32 %1773, %1772
  %1775 = add i32 %1771, %1774
  %1776 = mul i32 %1775, %1773
  %1777 = add i32 %1776, %1772
  %1778 = mul i32 %1777, %1775
  %1779 = add i32 %1778, %1773
  %1780 = mul i32 %1779, %1777
  %1781 = add i32 %1780, %1775
  %1782 = add i32 %1768, 1042201148
  %1783 = add i32 %1769, 1042201148
  %1784 = mul i32 %1773, %1783
  %1785 = add i32 %1782, %1784
  %1786 = mul i32 %1785, %1773
  %1787 = add i32 %1786, %1783
  %1788 = icmp eq i32 %1763, 0
  br i1 %1788, label %1813, label %1789

; <label>:1789                                    ; preds = %1752
  %1790 = mul i32 %1787, %1785
  %1791 = add i32 %1790, %1773
  %1792 = mul i32 %1791, %1787
  %1793 = add i32 %1792, %1785
  %1794 = lshr i32 %1793, 16
  %1795 = mul i32 %1781, %1779
  %1796 = add i32 %1795, %1777
  %1797 = lshr i32 %1781, 16
  %1798 = uitofp i32 %1767 to float
  %1799 = fmul fast float %1798, 1.250000e-01
  %1800 = uitofp i32 %1797 to float
  %1801 = fmul fast float %1800, 0x3EF0000000000000
  %1802 = fadd fast float %1801, %1799
  %1803 = call float @dx.op.unary.f32(i32 22, float %1802)  ; Frc(value)
  %1804 = call i32 @dx.op.unary.i32(i32 30, i32 %1767)  ; Bfrev(value)
  %1805 = xor i32 %1804, %1796
  %1806 = lshr i32 %1805, 16
  %1807 = uitofp i32 %1806 to float
  %1808 = fmul fast float %1807, 0x3EF0000000000000
  %1809 = uitofp i32 %1794 to float
  %1810 = fmul fast float %1809, 0x3EF0000000000000
  %1811 = fadd fast float %1810, %1799
  %1812 = call float @dx.op.unary.f32(i32 22, float %1811)  ; Frc(value)
  br label %1813

; <label>:1813                                    ; preds = %1789, %1752
  %1814 = phi float [ %1803, %1789 ], [ 0.000000e+00, %1752 ]
  %1815 = phi float [ %1808, %1789 ], [ 0.000000e+00, %1752 ]
  %1816 = phi float [ %1812, %1789 ], [ 0.000000e+00, %1752 ]
  %1817 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1818 = extractvalue %dx.types.CBufRet.f32 %1817, 0
  %1819 = fmul fast float %1818, %321
  %1820 = fmul fast float %1818, %331
  %1821 = fmul fast float %1818, %339
  %1822 = fadd fast float %1814, -5.000000e-01
  %1823 = fadd fast float %1815, -5.000000e-01
  %1824 = fadd fast float %1816, -5.000000e-01
  %1825 = fadd fast float %1822, %1819
  %1826 = fadd fast float %1823, %1820
  %1827 = fadd fast float %1824, %1821
  %1828 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1829 = extractvalue %dx.types.CBufRet.i32 %1828, 0
  %1830 = extractvalue %dx.types.CBufRet.i32 %1828, 1
  %1831 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1832 = extractvalue %dx.types.CBufRet.i32 %1831, 0
  %1833 = extractvalue %dx.types.CBufRet.i32 %1831, 1
  %1834 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1835 = extractvalue %dx.types.CBufRet.f32 %1834, 2
  %1836 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1837 = extractvalue %dx.types.CBufRet.f32 %1836, 1
  %1838 = extractvalue %dx.types.CBufRet.i32 %1762, 0
  %1839 = icmp eq i32 %1838, 0
  br i1 %1839, label %2104, label %1840

; <label>:1840                                    ; preds = %1813
  br label %1841

; <label>:1841                                    ; preds = %2095, %1840
  %1842 = phi i32 [ %2099, %2095 ], [ 0, %1840 ]
  %1843 = phi i32 [ %2098, %2095 ], [ 0, %1840 ]
  %1844 = phi float [ %2097, %2095 ], [ %1758, %1840 ]
  %1845 = phi float [ %2096, %2095 ], [ 1.000000e+00, %1840 ]
  %1846 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %1847 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1846, i32 %1842, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1848 = extractvalue %dx.types.ResRet.f32 %1847, 0
  %1849 = extractvalue %dx.types.ResRet.f32 %1847, 1
  %1850 = extractvalue %dx.types.ResRet.f32 %1847, 2
  %1851 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1846, i32 %1842, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1852 = extractvalue %dx.types.ResRet.i32 %1851, 0
  %1853 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1846, i32 %1842, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1854 = extractvalue %dx.types.ResRet.f32 %1853, 0
  %1855 = extractvalue %dx.types.ResRet.f32 %1853, 1
  %1856 = extractvalue %dx.types.ResRet.f32 %1853, 2
  %1857 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1846, i32 %1842, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1858 = extractvalue %dx.types.ResRet.i32 %1857, 0
  %1859 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1860 = extractvalue %dx.types.CBufRet.i32 %1859, 0
  %1861 = and i32 %1852, 255
  %1862 = lshr i32 %1852, 8
  %1863 = and i32 %1862, 255
  %1864 = lshr i32 %1852, 16
  %1865 = and i32 %1864, 255
  %1866 = mul i32 %1860, %1861
  %1867 = mul i32 %1860, %1863
  %1868 = mul i32 %1860, %1865
  %1869 = and i32 %1858, 4194303
  %1870 = lshr i32 %1858, 22
  %1871 = uitofp i32 %1870 to float
  %1872 = fmul fast float %1871, 0x3F84050140000000
  %1873 = icmp ne i32 %1861, 0
  %1874 = icmp ne i32 %1863, 0
  %1875 = icmp ne i32 %1865, 0
  %1876 = and i1 %1873, %1874
  %1877 = and i1 %1875, %1876
  %1878 = fmul fast float %1872, %1825
  %1879 = fmul fast float %1872, %1826
  %1880 = fmul fast float %1872, %1827
  %1881 = fadd fast float %1878, %213
  %1882 = fadd fast float %1879, %217
  %1883 = fadd fast float %1880, %221
  %1884 = fdiv fast float 0x4059933340000000, %1871
  br i1 %1877, label %1885, label %2086

; <label>:1885                                    ; preds = %1841
  %1886 = fsub fast float %1759, %1878
  %1887 = fsub fast float %1760, %1879
  %1888 = fsub fast float %1761, %1880
  %1889 = fdiv fast float 1.000000e+00, %1886
  %1890 = fdiv fast float 1.000000e+00, %1887
  %1891 = fdiv fast float 1.000000e+00, %1888
  %1892 = fsub fast float %1848, %1881
  %1893 = fsub fast float %1849, %1882
  %1894 = fsub fast float %1850, %1883
  %1895 = fmul fast float %1889, %1892
  %1896 = fmul fast float %1890, %1893
  %1897 = fmul fast float %1891, %1894
  %1898 = fsub fast float %1854, %1881
  %1899 = fsub fast float %1855, %1882
  %1900 = fsub fast float %1856, %1883
  %1901 = fmul fast float %1889, %1898
  %1902 = fmul fast float %1890, %1899
  %1903 = fmul fast float %1891, %1900
  %1904 = call float @dx.op.binary.f32(i32 36, float %1895, float %1901)  ; FMin(a,b)
  %1905 = call float @dx.op.binary.f32(i32 36, float %1896, float %1902)  ; FMin(a,b)
  %1906 = call float @dx.op.binary.f32(i32 36, float %1897, float %1903)  ; FMin(a,b)
  %1907 = call float @dx.op.binary.f32(i32 35, float %1895, float %1901)  ; FMax(a,b)
  %1908 = call float @dx.op.binary.f32(i32 35, float %1896, float %1902)  ; FMax(a,b)
  %1909 = call float @dx.op.binary.f32(i32 35, float %1897, float %1903)  ; FMax(a,b)
  %1910 = call float @dx.op.binary.f32(i32 35, float %1905, float %1906)  ; FMax(a,b)
  %1911 = call float @dx.op.binary.f32(i32 35, float %1904, float %1910)  ; FMax(a,b)
  %1912 = call float @dx.op.binary.f32(i32 36, float %1908, float %1909)  ; FMin(a,b)
  %1913 = call float @dx.op.binary.f32(i32 36, float %1907, float %1912)  ; FMin(a,b)
  %1914 = call float @dx.op.unary.f32(i32 7, float %1911)  ; Saturate(value)
  %1915 = call float @dx.op.unary.f32(i32 7, float %1913)  ; Saturate(value)
  %1916 = fcmp fast olt float %1914, %1915
  br i1 %1916, label %1917, label %2086

; <label>:1917                                    ; preds = %1885
  %1918 = fmul fast float %1914, %1886
  %1919 = fmul fast float %1914, %1887
  %1920 = fmul fast float %1914, %1888
  %1921 = fadd fast float %1918, %1881
  %1922 = fadd fast float %1919, %1882
  %1923 = fadd fast float %1920, %1883
  %1924 = fsub fast float %1915, %1914
  %1925 = fmul fast float %1886, %1924
  %1926 = fsub fast float %1915, %1914
  %1927 = fmul fast float %1887, %1926
  %1928 = fsub fast float %1915, %1914
  %1929 = fmul fast float %1888, %1928
  %1930 = fmul fast float %1925, %1925
  %1931 = fmul fast float %1927, %1927
  %1932 = fadd fast float %1930, %1931
  %1933 = fmul fast float %1929, %1929
  %1934 = fadd fast float %1932, %1933
  %1935 = call float @dx.op.unary.f32(i32 24, float %1934)  ; Sqrt(value)
  %1936 = call float @dx.op.binary.f32(i32 36, float %1935, float %1758)  ; FMin(a,b)
  %1937 = call float @dx.op.dot3.f32(i32 55, float %1925, float %1927, float %1929, float %1925, float %1927, float %1929)  ; Dot3(ax,ay,az,bx,by,bz)
  %1938 = call float @dx.op.unary.f32(i32 25, float %1937)  ; Rsqrt(value)
  %1939 = fdiv fast float %1936, %1872
  %1940 = call float @dx.op.unary.f32(i32 28, float %1939)  ; Round_pi(value)
  %1941 = call float @dx.op.binary.f32(i32 36, float %1940, float 1.024000e+03)  ; FMin(a,b)
  %1942 = fdiv fast float %1936, %1941
  %1943 = fcmp fast ogt float %1941, 0.000000e+00
  br i1 %1943, label %1944, label %2086

; <label>:1944                                    ; preds = %1917
  br label %1945

; <label>:1945                                    ; preds = %2078, %1944
  %1946 = phi i32 [ %2029, %2078 ], [ 9999, %1944 ]
  %1947 = phi i32 [ %2030, %2078 ], [ 9999, %1944 ]
  %1948 = phi i32 [ %2031, %2078 ], [ 9999, %1944 ]
  %1949 = phi i32 [ %2032, %2078 ], [ 0, %1944 ]
  %1950 = phi i32 [ %2033, %2078 ], [ 0, %1944 ]
  %1951 = phi i32 [ %2034, %2078 ], [ 0, %1944 ]
  %1952 = phi i32 [ %2035, %2078 ], [ 0, %1944 ]
  %1953 = phi float [ %2082, %2078 ], [ 1.000000e+00, %1944 ]
  %1954 = phi float [ %2083, %2078 ], [ 0.000000e+00, %1944 ]
  %1955 = phi float [ %2079, %2078 ], [ 0.000000e+00, %1944 ]
  %1956 = fmul fast float %1953, %1942
  %1957 = call float @dx.op.binary.f32(i32 35, float %1956, float 0.000000e+00)  ; FMax(a,b)
  %1958 = fmul fast float %1925, %1872
  %1959 = fmul fast float %1958, %1938
  %1960 = fmul fast float %1959, %1954
  %1961 = fmul fast float %1927, %1872
  %1962 = fmul fast float %1961, %1938
  %1963 = fmul fast float %1962, %1954
  %1964 = fmul fast float %1929, %1872
  %1965 = fmul fast float %1964, %1938
  %1966 = fmul fast float %1965, %1954
  %1967 = fadd fast float %1921, %1960
  %1968 = fadd fast float %1922, %1963
  %1969 = fadd fast float %1923, %1966
  %1970 = fmul fast float %1822, %1957
  %1971 = fmul fast float %1823, %1957
  %1972 = fmul fast float %1824, %1957
  %1973 = fadd fast float %1967, %1970
  %1974 = fadd fast float %1968, %1971
  %1975 = fadd fast float %1969, %1972
  %1976 = add i32 %1866, -1
  %1977 = add i32 %1867, -1
  %1978 = add i32 %1868, -1
  %1979 = fsub fast float %1973, %1848
  %1980 = fsub fast float %1974, %1849
  %1981 = fsub fast float %1975, %1850
  %1982 = fsub fast float %1854, %1848
  %1983 = fsub fast float %1855, %1849
  %1984 = fsub fast float %1856, %1850
  %1985 = fdiv fast float %1979, %1982
  %1986 = fdiv fast float %1980, %1983
  %1987 = fdiv fast float %1981, %1984
  %1988 = call float @dx.op.unary.f32(i32 7, float %1985)  ; Saturate(value)
  %1989 = call float @dx.op.unary.f32(i32 7, float %1986)  ; Saturate(value)
  %1990 = call float @dx.op.unary.f32(i32 7, float %1987)  ; Saturate(value)
  %1991 = uitofp i32 %1866 to float
  %1992 = uitofp i32 %1867 to float
  %1993 = uitofp i32 %1868 to float
  %1994 = fmul fast float %1988, %1991
  %1995 = fmul fast float %1989, %1992
  %1996 = fmul fast float %1990, %1993
  %1997 = fptoui float %1994 to i32
  %1998 = fptoui float %1995 to i32
  %1999 = fptoui float %1996 to i32
  %2000 = call i32 @dx.op.binary.i32(i32 40, i32 %1997, i32 %1976)  ; UMin(a,b)
  %2001 = call i32 @dx.op.binary.i32(i32 40, i32 %1998, i32 %1977)  ; UMin(a,b)
  %2002 = call i32 @dx.op.binary.i32(i32 40, i32 %1999, i32 %1978)  ; UMin(a,b)
  %2003 = and i32 %1833, 31
  %2004 = lshr i32 %2000, %2003
  %2005 = lshr i32 %2001, %2003
  %2006 = lshr i32 %2002, %2003
  %2007 = icmp ne i32 %2004, %1946
  %2008 = icmp ne i32 %2005, %1947
  %2009 = icmp ne i32 %2006, %1948
  %2010 = or i1 %2007, %2008
  %2011 = or i1 %2010, %2009
  br i1 %2011, label %2012, label %2028

; <label>:2012                                    ; preds = %1945
  %2013 = mul i32 %2006, %1863
  %2014 = add i32 %2013, %2005
  %2015 = mul i32 %2014, %1861
  %2016 = add i32 %2004, %1869
  %2017 = add i32 %2016, %2015
  %2018 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2019 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2018, i32 %2017, i32 undef)  ; BufferLoad(srv,index,wot)
  %2020 = extractvalue %dx.types.ResRet.i32 %2019, 0
  %2021 = icmp ne i32 %2020, -1
  %2022 = zext i1 %2021 to i32
  %2023 = mul i32 %1829, %1830
  %2024 = urem i32 %2020, %2023
  %2025 = urem i32 %2024, %1829
  %2026 = udiv i32 %2024, %1829
  %2027 = udiv i32 %2020, %2023
  br label %2028

; <label>:2028                                    ; preds = %2012, %1945
  %2029 = phi i32 [ %2004, %2012 ], [ %1946, %1945 ]
  %2030 = phi i32 [ %2005, %2012 ], [ %1947, %1945 ]
  %2031 = phi i32 [ %2006, %2012 ], [ %1948, %1945 ]
  %2032 = phi i32 [ %2022, %2012 ], [ %1949, %1945 ]
  %2033 = phi i32 [ %2025, %2012 ], [ %1950, %1945 ]
  %2034 = phi i32 [ %2026, %2012 ], [ %1951, %1945 ]
  %2035 = phi i32 [ %2027, %2012 ], [ %1952, %1945 ]
  %2036 = icmp eq i32 %2032, 0
  br i1 %2036, label %2078, label %2037

; <label>:2037                                    ; preds = %2028
  %2038 = shl i32 %2033, %2003
  %2039 = shl i32 %2034, %2003
  %2040 = shl i32 %2035, %2003
  %2041 = shl i32 %2004, %2003
  %2042 = shl i32 %2005, %2003
  %2043 = shl i32 %2006, %2003
  %2044 = sub i32 %2000, %2041
  %2045 = sub i32 %2001, %2042
  %2046 = sub i32 %2002, %2043
  %2047 = add i32 %2044, %2038
  %2048 = add i32 %2045, %2039
  %2049 = add i32 %2046, %2040
  %2050 = fmul fast float %1957, %1884
  %2051 = call float @dx.op.unary.f32(i32 23, float %2050)  ; Log(value)
  %2052 = fptoui float %2051 to i32
  %2053 = and i32 %2052, 31
  %2054 = lshr i32 %2047, %2053
  %2055 = lshr i32 %2048, %2053
  %2056 = lshr i32 %2049, %2053
  %2057 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %2058 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2057, i32 %2052, i32 %2054, i32 %2055, i32 %2056, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2059 = extractvalue %dx.types.ResRet.i32 %2058, 0
  %2060 = and i32 %2059, 16777215
  %2061 = uitofp i32 %2060 to float
  %2062 = fmul fast float %1835, 0x3F50624DE0000000
  %2063 = fmul fast float %2062, %1884
  %2064 = fmul fast float %2063, %1957
  %2065 = fmul fast float %2064, %2061
  %2066 = fadd fast float %2065, %1955
  %2067 = fcmp fast ogt float %2066, 1.000000e+00
  br i1 %2067, label %2068, label %2078

; <label>:2068                                    ; preds = %2037
  %2069 = fsub fast float %1973, %1881
  %2070 = fsub fast float %1974, %1882
  %2071 = fsub fast float %1975, %1883
  %2072 = fmul fast float %2069, %2069
  %2073 = fmul fast float %2070, %2070
  %2074 = fadd fast float %2072, %2073
  %2075 = fmul fast float %2071, %2071
  %2076 = fadd fast float %2074, %2075
  %2077 = call float @dx.op.unary.f32(i32 24, float %2076)  ; Sqrt(value)
  br label %2086

; <label>:2078                                    ; preds = %2037, %2028
  %2079 = phi float [ %2066, %2037 ], [ %1955, %2028 ]
  %2080 = fmul fast float %1953, %1837
  %2081 = uitofp i32 %1832 to float
  %2082 = call float @dx.op.binary.f32(i32 36, float %2081, float %2080)  ; FMin(a,b)
  %2083 = fadd fast float %2082, %1954
  %2084 = fcmp fast olt float %2083, %1941
  br i1 %2084, label %1945, label %2085

; <label>:2085                                    ; preds = %2078
  br label %2086

; <label>:2086                                    ; preds = %2085, %2068, %1917, %1885, %1841
  %2087 = phi float [ %2077, %2068 ], [ -1.000000e+00, %1885 ], [ -1.000000e+00, %1841 ], [ -1.000000e+00, %1917 ], [ -1.000000e+00, %2085 ]
  %2088 = phi float [ %2066, %2068 ], [ 0.000000e+00, %1885 ], [ 0.000000e+00, %1841 ], [ 0.000000e+00, %1917 ], [ %2079, %2085 ]
  %2089 = fcmp fast ult float %2087, 0.000000e+00
  br i1 %2089, label %2095, label %2090

; <label>:2090                                    ; preds = %2086
  %2091 = fsub fast float 1.000000e+00, %2088
  %2092 = call float @dx.op.unary.f32(i32 7, float %2091)  ; Saturate(value)
  %2093 = call float @dx.op.binary.f32(i32 36, float %1845, float %2092)  ; FMin(a,b)
  %2094 = call float @dx.op.binary.f32(i32 36, float %1844, float %2087)  ; FMin(a,b)
  br label %2095

; <label>:2095                                    ; preds = %2090, %2086
  %2096 = phi float [ %2093, %2090 ], [ %1845, %2086 ]
  %2097 = phi float [ %2094, %2090 ], [ %1844, %2086 ]
  %2098 = phi i32 [ 1, %2090 ], [ %1843, %2086 ]
  %2099 = add nuw i32 %1842, 1
  %2100 = fcmp fast ogt float %2096, 0x3F847AE140000000
  %2101 = icmp ult i32 %2099, %1838
  %2102 = and i1 %2100, %2101
  br i1 %2102, label %1841, label %2103

; <label>:2103                                    ; preds = %2095
  br label %2104

; <label>:2104                                    ; preds = %2103, %1813
  %2105 = phi i32 [ 0, %1813 ], [ %2098, %2103 ]
  %2106 = phi float [ %1758, %1813 ], [ %2097, %2103 ]
  %2107 = phi float [ 1.000000e+00, %1813 ], [ %2096, %2103 ]
  %2108 = icmp ne i32 %2105, 0
  %2109 = fcmp fast olt float %2106, %1758
  %2110 = and i1 %2109, %2108
  br i1 %2110, label %2111, label %2117

; <label>:2111                                    ; preds = %2104
  %2112 = fmul fast float %2107, %1755
  %2113 = fmul fast float %2107, %1756
  %2114 = fmul fast float %2107, %1757
  %2115 = fmul fast float %2107, %1754
  %2116 = call float @dx.op.binary.f32(i32 36, float %2106, float %1753)  ; FMin(a,b)
  br label %2117

; <label>:2117                                    ; preds = %2111, %2104
  %2118 = phi float [ %2116, %2111 ], [ %1753, %2104 ]
  %2119 = phi float [ %2115, %2111 ], [ %1754, %2104 ]
  %2120 = phi float [ %2112, %2111 ], [ %1755, %2104 ]
  %2121 = phi float [ %2113, %2111 ], [ %1756, %2104 ]
  %2122 = phi float [ %2114, %2111 ], [ %1757, %2104 ]
  %2123 = fcmp fast ole float %2119, 5.000000e-01
  %2124 = select i1 %2123, float %475, float %151
  %2125 = select i1 %2123, float %2118, float %151
  %2126 = fsub fast float 1.000000e+00, %2119
  %2127 = select i1 %2123, float %2126, float 0.000000e+00
  %2128 = fcmp fast ogt float %2119, 5.000000e-01
  br i1 %470, label %2129, label %3267

; <label>:2129                                    ; preds = %2117
  %2130 = select i1 %2128, float %240, float %2124
  %2131 = select i1 %2128, float %240, float %2125
  %2132 = add i32 %458, 46
  %2133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 %2132)  ; CBufferLoadLegacy(handle,regIndex)
  %2134 = extractvalue %dx.types.CBufRet.f32 %2133, 1
  %2135 = fmul fast float %2134, %236
  %2136 = fmul fast float %2134, %237
  %2137 = fmul fast float %2134, %238
  %2138 = add i32 %458, 52
  %2139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 %2138)  ; CBufferLoadLegacy(handle,regIndex)
  %2140 = extractvalue %dx.types.CBufRet.f32 %2139, 0
  %2141 = extractvalue %dx.types.CBufRet.f32 %2139, 1
  %2142 = extractvalue %dx.types.CBufRet.f32 %2139, 2
  %2143 = call float @dx.op.unary.f32(i32 12, float %288)  ; Cos(value)
  %2144 = fsub fast float 1.000000e+00, %2143
  %2145 = call float @dx.op.unary.f32(i32 24, float %2144)  ; Sqrt(value)
  %2146 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %2147 = extractvalue %dx.types.CBufRet.i32 %2146, 0
  %2148 = uitofp i32 %2147 to float
  %2149 = fmul fast float %2148, %2145
  %2150 = extractvalue %dx.types.CBufRet.i32 %2146, 2
  %2151 = uitofp i32 %2150 to float
  %2152 = call float @dx.op.unary.f32(i32 23, float %2149)  ; Log(value)
  %2153 = call float @dx.op.binary.f32(i32 35, float %2152, float 0.000000e+00)  ; FMax(a,b)
  %2154 = call float @dx.op.binary.f32(i32 36, float %2153, float %2151)  ; FMin(a,b)
  %2155 = fadd fast float %2140, -5.000000e-01
  %2156 = fadd fast float %2155, %2135
  %2157 = fadd fast float %2141, -5.000000e-01
  %2158 = fadd fast float %2157, %2136
  %2159 = fadd fast float %2142, -5.000000e-01
  %2160 = fadd fast float %2159, %2137
  %2161 = call float @dx.op.unary.f32(i32 27, float %2156)  ; Round_ni(value)
  %2162 = call float @dx.op.unary.f32(i32 27, float %2158)  ; Round_ni(value)
  %2163 = call float @dx.op.unary.f32(i32 27, float %2160)  ; Round_ni(value)
  %2164 = fptosi float %2161 to i32
  %2165 = fptosi float %2162 to i32
  %2166 = fptosi float %2163 to i32
  %2167 = call float @dx.op.unary.f32(i32 22, float %2156)  ; Frc(value)
  %2168 = call float @dx.op.unary.f32(i32 22, float %2158)  ; Frc(value)
  %2169 = call float @dx.op.unary.f32(i32 22, float %2160)  ; Frc(value)
  %2170 = extractvalue %dx.types.CBufRet.f32 %2133, 0
  %2171 = extractvalue %dx.types.CBufRet.i32 %459, 2
  %2172 = mul i32 %2171, %458
  %2173 = add i32 %2172, %2164
  %2174 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %2175 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2173, i32 %2165, i32 %2166, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2176 = extractvalue %dx.types.ResRet.i32 %2175, 0
  %2177 = uitofp i32 %2164 to float
  %2178 = uitofp i32 %2165 to float
  %2179 = uitofp i32 %2166 to float
  %2180 = extractvalue %dx.types.CBufRet.f32 %2133, 2
  %2181 = fmul fast float %2180, %2177
  %2182 = fmul fast float %2180, %2178
  %2183 = fmul fast float %2180, %2179
  %2184 = add i32 %458, 58
  %2185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 %2184)  ; CBufferLoadLegacy(handle,regIndex)
  %2186 = extractvalue %dx.types.CBufRet.f32 %2185, 0
  %2187 = extractvalue %dx.types.CBufRet.f32 %2185, 1
  %2188 = extractvalue %dx.types.CBufRet.f32 %2185, 2
  %2189 = fadd fast float %2181, %2186
  %2190 = fadd fast float %2182, %2187
  %2191 = fadd fast float %2183, %2188
  %2192 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2193 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %2176, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2194 = extractvalue %dx.types.ResRet.f32 %2193, 0
  %2195 = extractvalue %dx.types.ResRet.f32 %2193, 1
  %2196 = extractvalue %dx.types.ResRet.f32 %2193, 2
  %2197 = fadd fast float %2189, %2194
  %2198 = fadd fast float %2190, %2195
  %2199 = fadd fast float %2191, %2196
  %2200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %2201 = extractvalue %dx.types.CBufRet.f32 %2200, 0
  %2202 = fmul fast float %2201, %2170
  %2203 = fsub fast float %236, %2197
  %2204 = fsub fast float %237, %2198
  %2205 = fsub fast float %238, %2199
  %2206 = call float @dx.op.dot3.f32(i32 55, float %2203, float %2204, float %2205, float %2203, float %2204, float %2205)  ; Dot3(ax,ay,az,bx,by,bz)
  %2207 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2208 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %2203, float %2204, float %2205)  ; Dot3(ax,ay,az,bx,by,bz)
  %2209 = fmul fast float %2208, 2.000000e+00
  %2210 = fmul fast float %2202, %2202
  %2211 = fsub fast float %2206, %2210
  %2212 = fmul fast float %2209, %2209
  %2213 = fmul fast float %2207, 4.000000e+00
  %2214 = fmul fast float %2213, %2211
  %2215 = fsub fast float %2212, %2214
  %2216 = fcmp fast ult float %2215, 0.000000e+00
  br i1 %2216, label %2222, label %2217, !dx.controlflow.hints !81

; <label>:2217                                    ; preds = %2129
  %2218 = call float @dx.op.unary.f32(i32 24, float %2215)  ; Sqrt(value)
  %2219 = fsub fast float %2218, %2209
  %2220 = fmul fast float %2207, 2.000000e+00
  %2221 = fdiv fast float %2219, %2220
  br label %2222

; <label>:2222                                    ; preds = %2217, %2129
  %2223 = phi float [ %2221, %2217 ], [ -1.000000e+00, %2129 ]
  %2224 = fmul fast float %2223, %321
  %2225 = fmul fast float %2223, %331
  %2226 = fmul fast float %2223, %339
  %2227 = fadd fast float %2203, %2224
  %2228 = fadd fast float %2204, %2225
  %2229 = fadd fast float %2205, %2226
  %2230 = fmul fast float %2223, %2223
  %2231 = call float @dx.op.dot3.f32(i32 55, float %2227, float %2228, float %2229, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2232 = fmul fast float %2231, %2202
  %2233 = fdiv fast float %2230, %2232
  %2234 = call float @dx.op.dot3.f32(i32 55, float %2227, float %2228, float %2229, float %2227, float %2228, float %2229)  ; Dot3(ax,ay,az,bx,by,bz)
  %2235 = call float @dx.op.unary.f32(i32 25, float %2234)  ; Rsqrt(value)
  %2236 = fmul fast float %2235, %2227
  %2237 = fmul fast float %2235, %2228
  %2238 = fmul fast float %2235, %2229
  %2239 = call float @dx.op.unary.f32(i32 6, float %2236)  ; FAbs(value)
  %2240 = call float @dx.op.unary.f32(i32 6, float %2237)  ; FAbs(value)
  %2241 = call float @dx.op.unary.f32(i32 6, float %2238)  ; FAbs(value)
  %2242 = fsub fast float 1.000000e+00, %2241
  %2243 = call float @dx.op.unary.f32(i32 24, float %2242)  ; Sqrt(value)
  %2244 = call float @dx.op.binary.f32(i32 36, float %2239, float %2240)  ; FMin(a,b)
  %2245 = call float @dx.op.binary.f32(i32 35, float %2239, float %2240)  ; FMax(a,b)
  %2246 = fadd fast float %2245, 0x3BF0000000000000
  %2247 = fdiv fast float %2244, %2246
  %2248 = fmul fast float %2247, 0x3F99BE1040000000
  %2249 = fsub fast float 0x3FA5746D00000000, %2248
  %2250 = fmul fast float %2249, %2247
  %2251 = fadd fast float %2250, 0x3FB692C5C0000000
  %2252 = fmul fast float %2251, %2247
  %2253 = fadd fast float %2252, 0xBFCFA8A1C0000000
  %2254 = fmul fast float %2253, %2247
  %2255 = fadd fast float %2254, 0x3F79384B40000000
  %2256 = fmul fast float %2255, %2247
  %2257 = fadd fast float %2256, 0x3FE45BF7C0000000
  %2258 = fmul fast float %2257, %2247
  %2259 = fadd fast float %2258, 0x3ED10F8960000000
  %2260 = fcmp fast olt float %2239, %2240
  %2261 = fsub fast float 0x3FEFFFF780000000, %2258
  %2262 = select i1 %2260, float %2261, float %2259
  %2263 = fmul fast float %2262, %2243
  %2264 = fsub fast float %2243, %2263
  %2265 = fcmp fast olt float %2238, 0.000000e+00
  %2266 = extractvalue %dx.types.CBufRet.i32 %2146, 1
  %2267 = and i32 %2150, 31
  %2268 = shl i32 1, %2267
  %2269 = uitofp i32 %2268 to float
  %2270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %2271 = icmp eq i32 %2176, -1
  br i1 %2271, label %2317, label %2272

; <label>:2272                                    ; preds = %2222
  %2273 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %2274 = extractvalue %dx.types.CBufRet.i32 %2273, 1
  %2275 = and i32 %2274, 31
  %2276 = lshr i32 %2176, %2275
  %2277 = mul i32 %2276, %2266
  %2278 = uitofp i32 %2277 to float
  %2279 = fsub fast float 1.000000e+00, %2264
  %2280 = select i1 %2265, float %2279, float %2263
  %2281 = bitcast float %2280 to i32
  %2282 = bitcast float %2237 to i32
  %2283 = and i32 %2282, -2147483648
  %2284 = xor i32 %2281, %2283
  %2285 = bitcast i32 %2284 to float
  %2286 = fmul fast float %2285, 5.000000e-01
  %2287 = fadd fast float %2286, 5.000000e-01
  %2288 = fmul fast float %2287, %2148
  %2289 = fadd fast float %2288, %2269
  %2290 = fadd fast float %2289, %2278
  %2291 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %2292 = fmul fast float %2290, %2291
  %2293 = extractvalue %dx.types.CBufRet.i32 %2273, 0
  %2294 = and i32 %2293, %2176
  %2295 = mul i32 %2294, %2266
  %2296 = uitofp i32 %2295 to float
  %2297 = fsub fast float 1.000000e+00, %2263
  %2298 = select i1 %2265, float %2297, float %2264
  %2299 = bitcast float %2298 to i32
  %2300 = bitcast float %2236 to i32
  %2301 = and i32 %2300, -2147483648
  %2302 = xor i32 %2299, %2301
  %2303 = bitcast i32 %2302 to float
  %2304 = fmul fast float %2303, 5.000000e-01
  %2305 = fadd fast float %2304, 5.000000e-01
  %2306 = fmul fast float %2305, %2148
  %2307 = fadd fast float %2306, %2269
  %2308 = fadd fast float %2307, %2296
  %2309 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %2310 = fmul fast float %2308, %2309
  %2311 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2312 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2313 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2311, %dx.types.Handle %2312, float %2310, float %2292, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2314 = extractvalue %dx.types.ResRet.f32 %2313, 0
  %2315 = extractvalue %dx.types.ResRet.f32 %2313, 1
  %2316 = extractvalue %dx.types.ResRet.f32 %2313, 2
  br label %2317

; <label>:2317                                    ; preds = %2272, %2222
  %2318 = phi float [ %2314, %2272 ], [ 0.000000e+00, %2222 ]
  %2319 = phi float [ %2315, %2272 ], [ 0.000000e+00, %2222 ]
  %2320 = phi float [ %2316, %2272 ], [ 0.000000e+00, %2222 ]
  %2321 = fmul fast float %2318, %2233
  %2322 = fmul fast float %2319, %2233
  %2323 = fmul fast float %2320, %2233
  %2324 = add i32 %2166, 1
  %2325 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2173, i32 %2165, i32 %2324, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2326 = extractvalue %dx.types.ResRet.i32 %2325, 0
  %2327 = uitofp i32 %2324 to float
  %2328 = fmul fast float %2180, %2327
  %2329 = fadd fast float %2328, %2188
  %2330 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %2326, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2331 = extractvalue %dx.types.ResRet.f32 %2330, 0
  %2332 = extractvalue %dx.types.ResRet.f32 %2330, 1
  %2333 = extractvalue %dx.types.ResRet.f32 %2330, 2
  %2334 = fadd fast float %2189, %2331
  %2335 = fadd fast float %2190, %2332
  %2336 = fadd fast float %2329, %2333
  %2337 = fsub fast float %236, %2334
  %2338 = fsub fast float %237, %2335
  %2339 = fsub fast float %238, %2336
  %2340 = call float @dx.op.dot3.f32(i32 55, float %2337, float %2338, float %2339, float %2337, float %2338, float %2339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2341 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %2337, float %2338, float %2339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2342 = fmul fast float %2341, 2.000000e+00
  %2343 = fsub fast float %2340, %2210
  %2344 = fmul fast float %2342, %2342
  %2345 = fmul fast float %2213, %2343
  %2346 = fsub fast float %2344, %2345
  %2347 = fcmp fast ult float %2346, 0.000000e+00
  br i1 %2347, label %2353, label %2348, !dx.controlflow.hints !81

; <label>:2348                                    ; preds = %2317
  %2349 = call float @dx.op.unary.f32(i32 24, float %2346)  ; Sqrt(value)
  %2350 = fsub fast float %2349, %2342
  %2351 = fmul fast float %2207, 2.000000e+00
  %2352 = fdiv fast float %2350, %2351
  br label %2353

; <label>:2353                                    ; preds = %2348, %2317
  %2354 = phi float [ %2352, %2348 ], [ -1.000000e+00, %2317 ]
  %2355 = fmul fast float %2354, %321
  %2356 = fmul fast float %2354, %331
  %2357 = fmul fast float %2354, %339
  %2358 = fadd fast float %2337, %2355
  %2359 = fadd fast float %2338, %2356
  %2360 = fadd fast float %2339, %2357
  %2361 = fmul fast float %2354, %2354
  %2362 = call float @dx.op.dot3.f32(i32 55, float %2358, float %2359, float %2360, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2363 = fmul fast float %2362, %2202
  %2364 = fdiv fast float %2361, %2363
  %2365 = call float @dx.op.dot3.f32(i32 55, float %2358, float %2359, float %2360, float %2358, float %2359, float %2360)  ; Dot3(ax,ay,az,bx,by,bz)
  %2366 = call float @dx.op.unary.f32(i32 25, float %2365)  ; Rsqrt(value)
  %2367 = fmul fast float %2366, %2358
  %2368 = fmul fast float %2366, %2359
  %2369 = fmul fast float %2366, %2360
  %2370 = call float @dx.op.unary.f32(i32 6, float %2367)  ; FAbs(value)
  %2371 = call float @dx.op.unary.f32(i32 6, float %2368)  ; FAbs(value)
  %2372 = call float @dx.op.unary.f32(i32 6, float %2369)  ; FAbs(value)
  %2373 = fsub fast float 1.000000e+00, %2372
  %2374 = call float @dx.op.unary.f32(i32 24, float %2373)  ; Sqrt(value)
  %2375 = call float @dx.op.binary.f32(i32 36, float %2370, float %2371)  ; FMin(a,b)
  %2376 = call float @dx.op.binary.f32(i32 35, float %2370, float %2371)  ; FMax(a,b)
  %2377 = fadd fast float %2376, 0x3BF0000000000000
  %2378 = fdiv fast float %2375, %2377
  %2379 = fmul fast float %2378, 0x3F99BE1040000000
  %2380 = fsub fast float 0x3FA5746D00000000, %2379
  %2381 = fmul fast float %2380, %2378
  %2382 = fadd fast float %2381, 0x3FB692C5C0000000
  %2383 = fmul fast float %2382, %2378
  %2384 = fadd fast float %2383, 0xBFCFA8A1C0000000
  %2385 = fmul fast float %2384, %2378
  %2386 = fadd fast float %2385, 0x3F79384B40000000
  %2387 = fmul fast float %2386, %2378
  %2388 = fadd fast float %2387, 0x3FE45BF7C0000000
  %2389 = fmul fast float %2388, %2378
  %2390 = fadd fast float %2389, 0x3ED10F8960000000
  %2391 = fcmp fast olt float %2370, %2371
  %2392 = fsub fast float 0x3FEFFFF780000000, %2389
  %2393 = select i1 %2391, float %2392, float %2390
  %2394 = fmul fast float %2393, %2374
  %2395 = fsub fast float %2374, %2394
  %2396 = fcmp fast olt float %2369, 0.000000e+00
  %2397 = icmp eq i32 %2326, -1
  br i1 %2397, label %2443, label %2398

; <label>:2398                                    ; preds = %2353
  %2399 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %2400 = extractvalue %dx.types.CBufRet.i32 %2399, 1
  %2401 = and i32 %2400, 31
  %2402 = lshr i32 %2326, %2401
  %2403 = mul i32 %2402, %2266
  %2404 = uitofp i32 %2403 to float
  %2405 = fsub fast float 1.000000e+00, %2395
  %2406 = select i1 %2396, float %2405, float %2394
  %2407 = bitcast float %2406 to i32
  %2408 = bitcast float %2368 to i32
  %2409 = and i32 %2408, -2147483648
  %2410 = xor i32 %2407, %2409
  %2411 = bitcast i32 %2410 to float
  %2412 = fmul fast float %2411, 5.000000e-01
  %2413 = fadd fast float %2412, 5.000000e-01
  %2414 = fmul fast float %2413, %2148
  %2415 = fadd fast float %2414, %2269
  %2416 = fadd fast float %2415, %2404
  %2417 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %2418 = fmul fast float %2416, %2417
  %2419 = extractvalue %dx.types.CBufRet.i32 %2399, 0
  %2420 = and i32 %2419, %2326
  %2421 = mul i32 %2420, %2266
  %2422 = uitofp i32 %2421 to float
  %2423 = fsub fast float 1.000000e+00, %2394
  %2424 = select i1 %2396, float %2423, float %2395
  %2425 = bitcast float %2424 to i32
  %2426 = bitcast float %2367 to i32
  %2427 = and i32 %2426, -2147483648
  %2428 = xor i32 %2425, %2427
  %2429 = bitcast i32 %2428 to float
  %2430 = fmul fast float %2429, 5.000000e-01
  %2431 = fadd fast float %2430, 5.000000e-01
  %2432 = fmul fast float %2431, %2148
  %2433 = fadd fast float %2432, %2269
  %2434 = fadd fast float %2433, %2422
  %2435 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %2436 = fmul fast float %2434, %2435
  %2437 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2438 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2439 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2437, %dx.types.Handle %2438, float %2436, float %2418, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2440 = extractvalue %dx.types.ResRet.f32 %2439, 0
  %2441 = extractvalue %dx.types.ResRet.f32 %2439, 1
  %2442 = extractvalue %dx.types.ResRet.f32 %2439, 2
  br label %2443

; <label>:2443                                    ; preds = %2398, %2353
  %2444 = phi float [ %2440, %2398 ], [ 0.000000e+00, %2353 ]
  %2445 = phi float [ %2441, %2398 ], [ 0.000000e+00, %2353 ]
  %2446 = phi float [ %2442, %2398 ], [ 0.000000e+00, %2353 ]
  %2447 = fmul fast float %2444, %2364
  %2448 = fmul fast float %2445, %2364
  %2449 = fmul fast float %2446, %2364
  %2450 = add i32 %2165, 1
  %2451 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2173, i32 %2450, i32 %2166, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2452 = extractvalue %dx.types.ResRet.i32 %2451, 0
  %2453 = uitofp i32 %2450 to float
  %2454 = fmul fast float %2180, %2453
  %2455 = fadd fast float %2454, %2187
  %2456 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %2452, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2457 = extractvalue %dx.types.ResRet.f32 %2456, 0
  %2458 = extractvalue %dx.types.ResRet.f32 %2456, 1
  %2459 = extractvalue %dx.types.ResRet.f32 %2456, 2
  %2460 = fadd fast float %2189, %2457
  %2461 = fadd fast float %2455, %2458
  %2462 = fadd fast float %2191, %2459
  %2463 = fsub fast float %236, %2460
  %2464 = fsub fast float %237, %2461
  %2465 = fsub fast float %238, %2462
  %2466 = call float @dx.op.dot3.f32(i32 55, float %2463, float %2464, float %2465, float %2463, float %2464, float %2465)  ; Dot3(ax,ay,az,bx,by,bz)
  %2467 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %2463, float %2464, float %2465)  ; Dot3(ax,ay,az,bx,by,bz)
  %2468 = fmul fast float %2467, 2.000000e+00
  %2469 = fsub fast float %2466, %2210
  %2470 = fmul fast float %2468, %2468
  %2471 = fmul fast float %2213, %2469
  %2472 = fsub fast float %2470, %2471
  %2473 = fcmp fast ult float %2472, 0.000000e+00
  br i1 %2473, label %2479, label %2474, !dx.controlflow.hints !81

; <label>:2474                                    ; preds = %2443
  %2475 = call float @dx.op.unary.f32(i32 24, float %2472)  ; Sqrt(value)
  %2476 = fsub fast float %2475, %2468
  %2477 = fmul fast float %2207, 2.000000e+00
  %2478 = fdiv fast float %2476, %2477
  br label %2479

; <label>:2479                                    ; preds = %2474, %2443
  %2480 = phi float [ %2478, %2474 ], [ -1.000000e+00, %2443 ]
  %2481 = fmul fast float %2480, %321
  %2482 = fmul fast float %2480, %331
  %2483 = fmul fast float %2480, %339
  %2484 = fadd fast float %2463, %2481
  %2485 = fadd fast float %2464, %2482
  %2486 = fadd fast float %2465, %2483
  %2487 = fmul fast float %2480, %2480
  %2488 = call float @dx.op.dot3.f32(i32 55, float %2484, float %2485, float %2486, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2489 = fmul fast float %2488, %2202
  %2490 = fdiv fast float %2487, %2489
  %2491 = call float @dx.op.dot3.f32(i32 55, float %2484, float %2485, float %2486, float %2484, float %2485, float %2486)  ; Dot3(ax,ay,az,bx,by,bz)
  %2492 = call float @dx.op.unary.f32(i32 25, float %2491)  ; Rsqrt(value)
  %2493 = fmul fast float %2492, %2484
  %2494 = fmul fast float %2492, %2485
  %2495 = fmul fast float %2492, %2486
  %2496 = call float @dx.op.unary.f32(i32 6, float %2493)  ; FAbs(value)
  %2497 = call float @dx.op.unary.f32(i32 6, float %2494)  ; FAbs(value)
  %2498 = call float @dx.op.unary.f32(i32 6, float %2495)  ; FAbs(value)
  %2499 = fsub fast float 1.000000e+00, %2498
  %2500 = call float @dx.op.unary.f32(i32 24, float %2499)  ; Sqrt(value)
  %2501 = call float @dx.op.binary.f32(i32 36, float %2496, float %2497)  ; FMin(a,b)
  %2502 = call float @dx.op.binary.f32(i32 35, float %2496, float %2497)  ; FMax(a,b)
  %2503 = fadd fast float %2502, 0x3BF0000000000000
  %2504 = fdiv fast float %2501, %2503
  %2505 = fmul fast float %2504, 0x3F99BE1040000000
  %2506 = fsub fast float 0x3FA5746D00000000, %2505
  %2507 = fmul fast float %2506, %2504
  %2508 = fadd fast float %2507, 0x3FB692C5C0000000
  %2509 = fmul fast float %2508, %2504
  %2510 = fadd fast float %2509, 0xBFCFA8A1C0000000
  %2511 = fmul fast float %2510, %2504
  %2512 = fadd fast float %2511, 0x3F79384B40000000
  %2513 = fmul fast float %2512, %2504
  %2514 = fadd fast float %2513, 0x3FE45BF7C0000000
  %2515 = fmul fast float %2514, %2504
  %2516 = fadd fast float %2515, 0x3ED10F8960000000
  %2517 = fcmp fast olt float %2496, %2497
  %2518 = fsub fast float 0x3FEFFFF780000000, %2515
  %2519 = select i1 %2517, float %2518, float %2516
  %2520 = fmul fast float %2519, %2500
  %2521 = fsub fast float %2500, %2520
  %2522 = fcmp fast olt float %2495, 0.000000e+00
  %2523 = icmp eq i32 %2452, -1
  br i1 %2523, label %2569, label %2524

; <label>:2524                                    ; preds = %2479
  %2525 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %2526 = extractvalue %dx.types.CBufRet.i32 %2525, 1
  %2527 = and i32 %2526, 31
  %2528 = lshr i32 %2452, %2527
  %2529 = mul i32 %2528, %2266
  %2530 = uitofp i32 %2529 to float
  %2531 = fsub fast float 1.000000e+00, %2521
  %2532 = select i1 %2522, float %2531, float %2520
  %2533 = bitcast float %2532 to i32
  %2534 = bitcast float %2494 to i32
  %2535 = and i32 %2534, -2147483648
  %2536 = xor i32 %2533, %2535
  %2537 = bitcast i32 %2536 to float
  %2538 = fmul fast float %2537, 5.000000e-01
  %2539 = fadd fast float %2538, 5.000000e-01
  %2540 = fmul fast float %2539, %2148
  %2541 = fadd fast float %2540, %2269
  %2542 = fadd fast float %2541, %2530
  %2543 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %2544 = fmul fast float %2542, %2543
  %2545 = extractvalue %dx.types.CBufRet.i32 %2525, 0
  %2546 = and i32 %2545, %2452
  %2547 = mul i32 %2546, %2266
  %2548 = uitofp i32 %2547 to float
  %2549 = fsub fast float 1.000000e+00, %2520
  %2550 = select i1 %2522, float %2549, float %2521
  %2551 = bitcast float %2550 to i32
  %2552 = bitcast float %2493 to i32
  %2553 = and i32 %2552, -2147483648
  %2554 = xor i32 %2551, %2553
  %2555 = bitcast i32 %2554 to float
  %2556 = fmul fast float %2555, 5.000000e-01
  %2557 = fadd fast float %2556, 5.000000e-01
  %2558 = fmul fast float %2557, %2148
  %2559 = fadd fast float %2558, %2269
  %2560 = fadd fast float %2559, %2548
  %2561 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %2562 = fmul fast float %2560, %2561
  %2563 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2564 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2565 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2563, %dx.types.Handle %2564, float %2562, float %2544, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2566 = extractvalue %dx.types.ResRet.f32 %2565, 0
  %2567 = extractvalue %dx.types.ResRet.f32 %2565, 1
  %2568 = extractvalue %dx.types.ResRet.f32 %2565, 2
  br label %2569

; <label>:2569                                    ; preds = %2524, %2479
  %2570 = phi float [ %2566, %2524 ], [ 0.000000e+00, %2479 ]
  %2571 = phi float [ %2567, %2524 ], [ 0.000000e+00, %2479 ]
  %2572 = phi float [ %2568, %2524 ], [ 0.000000e+00, %2479 ]
  %2573 = fmul fast float %2570, %2490
  %2574 = fmul fast float %2571, %2490
  %2575 = fmul fast float %2572, %2490
  %2576 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2173, i32 %2450, i32 %2324, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2577 = extractvalue %dx.types.ResRet.i32 %2576, 0
  %2578 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %2577, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2579 = extractvalue %dx.types.ResRet.f32 %2578, 0
  %2580 = extractvalue %dx.types.ResRet.f32 %2578, 1
  %2581 = extractvalue %dx.types.ResRet.f32 %2578, 2
  %2582 = fadd fast float %2189, %2579
  %2583 = fadd fast float %2455, %2580
  %2584 = fadd fast float %2329, %2581
  %2585 = fsub fast float %236, %2582
  %2586 = fsub fast float %237, %2583
  %2587 = fsub fast float %238, %2584
  %2588 = call float @dx.op.dot3.f32(i32 55, float %2585, float %2586, float %2587, float %2585, float %2586, float %2587)  ; Dot3(ax,ay,az,bx,by,bz)
  %2589 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %2585, float %2586, float %2587)  ; Dot3(ax,ay,az,bx,by,bz)
  %2590 = fmul fast float %2589, 2.000000e+00
  %2591 = fsub fast float %2588, %2210
  %2592 = fmul fast float %2590, %2590
  %2593 = fmul fast float %2213, %2591
  %2594 = fsub fast float %2592, %2593
  %2595 = fcmp fast ult float %2594, 0.000000e+00
  br i1 %2595, label %2601, label %2596, !dx.controlflow.hints !81

; <label>:2596                                    ; preds = %2569
  %2597 = call float @dx.op.unary.f32(i32 24, float %2594)  ; Sqrt(value)
  %2598 = fsub fast float %2597, %2590
  %2599 = fmul fast float %2207, 2.000000e+00
  %2600 = fdiv fast float %2598, %2599
  br label %2601

; <label>:2601                                    ; preds = %2596, %2569
  %2602 = phi float [ %2600, %2596 ], [ -1.000000e+00, %2569 ]
  %2603 = fmul fast float %2602, %321
  %2604 = fmul fast float %2602, %331
  %2605 = fmul fast float %2602, %339
  %2606 = fadd fast float %2585, %2603
  %2607 = fadd fast float %2586, %2604
  %2608 = fadd fast float %2587, %2605
  %2609 = fmul fast float %2602, %2602
  %2610 = call float @dx.op.dot3.f32(i32 55, float %2606, float %2607, float %2608, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2611 = fmul fast float %2610, %2202
  %2612 = fdiv fast float %2609, %2611
  %2613 = call float @dx.op.dot3.f32(i32 55, float %2606, float %2607, float %2608, float %2606, float %2607, float %2608)  ; Dot3(ax,ay,az,bx,by,bz)
  %2614 = call float @dx.op.unary.f32(i32 25, float %2613)  ; Rsqrt(value)
  %2615 = fmul fast float %2614, %2606
  %2616 = fmul fast float %2614, %2607
  %2617 = fmul fast float %2614, %2608
  %2618 = call float @dx.op.unary.f32(i32 6, float %2615)  ; FAbs(value)
  %2619 = call float @dx.op.unary.f32(i32 6, float %2616)  ; FAbs(value)
  %2620 = call float @dx.op.unary.f32(i32 6, float %2617)  ; FAbs(value)
  %2621 = fsub fast float 1.000000e+00, %2620
  %2622 = call float @dx.op.unary.f32(i32 24, float %2621)  ; Sqrt(value)
  %2623 = call float @dx.op.binary.f32(i32 36, float %2618, float %2619)  ; FMin(a,b)
  %2624 = call float @dx.op.binary.f32(i32 35, float %2618, float %2619)  ; FMax(a,b)
  %2625 = fadd fast float %2624, 0x3BF0000000000000
  %2626 = fdiv fast float %2623, %2625
  %2627 = fmul fast float %2626, 0x3F99BE1040000000
  %2628 = fsub fast float 0x3FA5746D00000000, %2627
  %2629 = fmul fast float %2628, %2626
  %2630 = fadd fast float %2629, 0x3FB692C5C0000000
  %2631 = fmul fast float %2630, %2626
  %2632 = fadd fast float %2631, 0xBFCFA8A1C0000000
  %2633 = fmul fast float %2632, %2626
  %2634 = fadd fast float %2633, 0x3F79384B40000000
  %2635 = fmul fast float %2634, %2626
  %2636 = fadd fast float %2635, 0x3FE45BF7C0000000
  %2637 = fmul fast float %2636, %2626
  %2638 = fadd fast float %2637, 0x3ED10F8960000000
  %2639 = fcmp fast olt float %2618, %2619
  %2640 = fsub fast float 0x3FEFFFF780000000, %2637
  %2641 = select i1 %2639, float %2640, float %2638
  %2642 = fmul fast float %2641, %2622
  %2643 = fsub fast float %2622, %2642
  %2644 = fcmp fast olt float %2617, 0.000000e+00
  %2645 = icmp eq i32 %2577, -1
  br i1 %2645, label %2691, label %2646

; <label>:2646                                    ; preds = %2601
  %2647 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %2648 = extractvalue %dx.types.CBufRet.i32 %2647, 1
  %2649 = and i32 %2648, 31
  %2650 = lshr i32 %2577, %2649
  %2651 = mul i32 %2650, %2266
  %2652 = uitofp i32 %2651 to float
  %2653 = fsub fast float 1.000000e+00, %2643
  %2654 = select i1 %2644, float %2653, float %2642
  %2655 = bitcast float %2654 to i32
  %2656 = bitcast float %2616 to i32
  %2657 = and i32 %2656, -2147483648
  %2658 = xor i32 %2655, %2657
  %2659 = bitcast i32 %2658 to float
  %2660 = fmul fast float %2659, 5.000000e-01
  %2661 = fadd fast float %2660, 5.000000e-01
  %2662 = fmul fast float %2661, %2148
  %2663 = fadd fast float %2662, %2269
  %2664 = fadd fast float %2663, %2652
  %2665 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %2666 = fmul fast float %2664, %2665
  %2667 = extractvalue %dx.types.CBufRet.i32 %2647, 0
  %2668 = and i32 %2667, %2577
  %2669 = mul i32 %2668, %2266
  %2670 = uitofp i32 %2669 to float
  %2671 = fsub fast float 1.000000e+00, %2642
  %2672 = select i1 %2644, float %2671, float %2643
  %2673 = bitcast float %2672 to i32
  %2674 = bitcast float %2615 to i32
  %2675 = and i32 %2674, -2147483648
  %2676 = xor i32 %2673, %2675
  %2677 = bitcast i32 %2676 to float
  %2678 = fmul fast float %2677, 5.000000e-01
  %2679 = fadd fast float %2678, 5.000000e-01
  %2680 = fmul fast float %2679, %2148
  %2681 = fadd fast float %2680, %2269
  %2682 = fadd fast float %2681, %2670
  %2683 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %2684 = fmul fast float %2682, %2683
  %2685 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2687 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2685, %dx.types.Handle %2686, float %2684, float %2666, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2688 = extractvalue %dx.types.ResRet.f32 %2687, 0
  %2689 = extractvalue %dx.types.ResRet.f32 %2687, 1
  %2690 = extractvalue %dx.types.ResRet.f32 %2687, 2
  br label %2691

; <label>:2691                                    ; preds = %2646, %2601
  %2692 = phi float [ %2688, %2646 ], [ 0.000000e+00, %2601 ]
  %2693 = phi float [ %2689, %2646 ], [ 0.000000e+00, %2601 ]
  %2694 = phi float [ %2690, %2646 ], [ 0.000000e+00, %2601 ]
  %2695 = fmul fast float %2692, %2612
  %2696 = fmul fast float %2693, %2612
  %2697 = fmul fast float %2694, %2612
  %2698 = add i32 %2164, 1
  %2699 = add i32 %2172, %2698
  %2700 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2699, i32 %2165, i32 %2166, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2701 = extractvalue %dx.types.ResRet.i32 %2700, 0
  %2702 = uitofp i32 %2698 to float
  %2703 = fmul fast float %2180, %2702
  %2704 = fadd fast float %2703, %2186
  %2705 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %2701, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2706 = extractvalue %dx.types.ResRet.f32 %2705, 0
  %2707 = extractvalue %dx.types.ResRet.f32 %2705, 1
  %2708 = extractvalue %dx.types.ResRet.f32 %2705, 2
  %2709 = fadd fast float %2704, %2706
  %2710 = fadd fast float %2190, %2707
  %2711 = fadd fast float %2191, %2708
  %2712 = fsub fast float %236, %2709
  %2713 = fsub fast float %237, %2710
  %2714 = fsub fast float %238, %2711
  %2715 = call float @dx.op.dot3.f32(i32 55, float %2712, float %2713, float %2714, float %2712, float %2713, float %2714)  ; Dot3(ax,ay,az,bx,by,bz)
  %2716 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %2712, float %2713, float %2714)  ; Dot3(ax,ay,az,bx,by,bz)
  %2717 = fmul fast float %2716, 2.000000e+00
  %2718 = fsub fast float %2715, %2210
  %2719 = fmul fast float %2717, %2717
  %2720 = fmul fast float %2213, %2718
  %2721 = fsub fast float %2719, %2720
  %2722 = fcmp fast ult float %2721, 0.000000e+00
  br i1 %2722, label %2728, label %2723, !dx.controlflow.hints !81

; <label>:2723                                    ; preds = %2691
  %2724 = call float @dx.op.unary.f32(i32 24, float %2721)  ; Sqrt(value)
  %2725 = fsub fast float %2724, %2717
  %2726 = fmul fast float %2207, 2.000000e+00
  %2727 = fdiv fast float %2725, %2726
  br label %2728

; <label>:2728                                    ; preds = %2723, %2691
  %2729 = phi float [ %2727, %2723 ], [ -1.000000e+00, %2691 ]
  %2730 = fmul fast float %2729, %321
  %2731 = fmul fast float %2729, %331
  %2732 = fmul fast float %2729, %339
  %2733 = fadd fast float %2712, %2730
  %2734 = fadd fast float %2713, %2731
  %2735 = fadd fast float %2714, %2732
  %2736 = fmul fast float %2729, %2729
  %2737 = call float @dx.op.dot3.f32(i32 55, float %2733, float %2734, float %2735, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2738 = fmul fast float %2737, %2202
  %2739 = fdiv fast float %2736, %2738
  %2740 = call float @dx.op.dot3.f32(i32 55, float %2733, float %2734, float %2735, float %2733, float %2734, float %2735)  ; Dot3(ax,ay,az,bx,by,bz)
  %2741 = call float @dx.op.unary.f32(i32 25, float %2740)  ; Rsqrt(value)
  %2742 = fmul fast float %2741, %2733
  %2743 = fmul fast float %2741, %2734
  %2744 = fmul fast float %2741, %2735
  %2745 = call float @dx.op.unary.f32(i32 6, float %2742)  ; FAbs(value)
  %2746 = call float @dx.op.unary.f32(i32 6, float %2743)  ; FAbs(value)
  %2747 = call float @dx.op.unary.f32(i32 6, float %2744)  ; FAbs(value)
  %2748 = fsub fast float 1.000000e+00, %2747
  %2749 = call float @dx.op.unary.f32(i32 24, float %2748)  ; Sqrt(value)
  %2750 = call float @dx.op.binary.f32(i32 36, float %2745, float %2746)  ; FMin(a,b)
  %2751 = call float @dx.op.binary.f32(i32 35, float %2745, float %2746)  ; FMax(a,b)
  %2752 = fadd fast float %2751, 0x3BF0000000000000
  %2753 = fdiv fast float %2750, %2752
  %2754 = fmul fast float %2753, 0x3F99BE1040000000
  %2755 = fsub fast float 0x3FA5746D00000000, %2754
  %2756 = fmul fast float %2755, %2753
  %2757 = fadd fast float %2756, 0x3FB692C5C0000000
  %2758 = fmul fast float %2757, %2753
  %2759 = fadd fast float %2758, 0xBFCFA8A1C0000000
  %2760 = fmul fast float %2759, %2753
  %2761 = fadd fast float %2760, 0x3F79384B40000000
  %2762 = fmul fast float %2761, %2753
  %2763 = fadd fast float %2762, 0x3FE45BF7C0000000
  %2764 = fmul fast float %2763, %2753
  %2765 = fadd fast float %2764, 0x3ED10F8960000000
  %2766 = fcmp fast olt float %2745, %2746
  %2767 = fsub fast float 0x3FEFFFF780000000, %2764
  %2768 = select i1 %2766, float %2767, float %2765
  %2769 = fmul fast float %2768, %2749
  %2770 = fsub fast float %2749, %2769
  %2771 = fcmp fast olt float %2744, 0.000000e+00
  %2772 = icmp eq i32 %2701, -1
  br i1 %2772, label %2818, label %2773

; <label>:2773                                    ; preds = %2728
  %2774 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %2775 = extractvalue %dx.types.CBufRet.i32 %2774, 1
  %2776 = and i32 %2775, 31
  %2777 = lshr i32 %2701, %2776
  %2778 = mul i32 %2777, %2266
  %2779 = uitofp i32 %2778 to float
  %2780 = fsub fast float 1.000000e+00, %2770
  %2781 = select i1 %2771, float %2780, float %2769
  %2782 = bitcast float %2781 to i32
  %2783 = bitcast float %2743 to i32
  %2784 = and i32 %2783, -2147483648
  %2785 = xor i32 %2782, %2784
  %2786 = bitcast i32 %2785 to float
  %2787 = fmul fast float %2786, 5.000000e-01
  %2788 = fadd fast float %2787, 5.000000e-01
  %2789 = fmul fast float %2788, %2148
  %2790 = fadd fast float %2789, %2269
  %2791 = fadd fast float %2790, %2779
  %2792 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %2793 = fmul fast float %2791, %2792
  %2794 = extractvalue %dx.types.CBufRet.i32 %2774, 0
  %2795 = and i32 %2794, %2701
  %2796 = mul i32 %2795, %2266
  %2797 = uitofp i32 %2796 to float
  %2798 = fsub fast float 1.000000e+00, %2769
  %2799 = select i1 %2771, float %2798, float %2770
  %2800 = bitcast float %2799 to i32
  %2801 = bitcast float %2742 to i32
  %2802 = and i32 %2801, -2147483648
  %2803 = xor i32 %2800, %2802
  %2804 = bitcast i32 %2803 to float
  %2805 = fmul fast float %2804, 5.000000e-01
  %2806 = fadd fast float %2805, 5.000000e-01
  %2807 = fmul fast float %2806, %2148
  %2808 = fadd fast float %2807, %2269
  %2809 = fadd fast float %2808, %2797
  %2810 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %2811 = fmul fast float %2809, %2810
  %2812 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2813 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2814 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2812, %dx.types.Handle %2813, float %2811, float %2793, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2815 = extractvalue %dx.types.ResRet.f32 %2814, 0
  %2816 = extractvalue %dx.types.ResRet.f32 %2814, 1
  %2817 = extractvalue %dx.types.ResRet.f32 %2814, 2
  br label %2818

; <label>:2818                                    ; preds = %2773, %2728
  %2819 = phi float [ %2815, %2773 ], [ 0.000000e+00, %2728 ]
  %2820 = phi float [ %2816, %2773 ], [ 0.000000e+00, %2728 ]
  %2821 = phi float [ %2817, %2773 ], [ 0.000000e+00, %2728 ]
  %2822 = fmul fast float %2819, %2739
  %2823 = fmul fast float %2820, %2739
  %2824 = fmul fast float %2821, %2739
  %2825 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2699, i32 %2165, i32 %2324, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2826 = extractvalue %dx.types.ResRet.i32 %2825, 0
  %2827 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %2826, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2828 = extractvalue %dx.types.ResRet.f32 %2827, 0
  %2829 = extractvalue %dx.types.ResRet.f32 %2827, 1
  %2830 = extractvalue %dx.types.ResRet.f32 %2827, 2
  %2831 = fadd fast float %2704, %2828
  %2832 = fadd fast float %2190, %2829
  %2833 = fadd fast float %2329, %2830
  %2834 = fsub fast float %236, %2831
  %2835 = fsub fast float %237, %2832
  %2836 = fsub fast float %238, %2833
  %2837 = call float @dx.op.dot3.f32(i32 55, float %2834, float %2835, float %2836, float %2834, float %2835, float %2836)  ; Dot3(ax,ay,az,bx,by,bz)
  %2838 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %2834, float %2835, float %2836)  ; Dot3(ax,ay,az,bx,by,bz)
  %2839 = fmul fast float %2838, 2.000000e+00
  %2840 = fsub fast float %2837, %2210
  %2841 = fmul fast float %2839, %2839
  %2842 = fmul fast float %2213, %2840
  %2843 = fsub fast float %2841, %2842
  %2844 = fcmp fast ult float %2843, 0.000000e+00
  br i1 %2844, label %2850, label %2845, !dx.controlflow.hints !81

; <label>:2845                                    ; preds = %2818
  %2846 = call float @dx.op.unary.f32(i32 24, float %2843)  ; Sqrt(value)
  %2847 = fsub fast float %2846, %2839
  %2848 = fmul fast float %2207, 2.000000e+00
  %2849 = fdiv fast float %2847, %2848
  br label %2850

; <label>:2850                                    ; preds = %2845, %2818
  %2851 = phi float [ %2849, %2845 ], [ -1.000000e+00, %2818 ]
  %2852 = fmul fast float %2851, %321
  %2853 = fmul fast float %2851, %331
  %2854 = fmul fast float %2851, %339
  %2855 = fadd fast float %2834, %2852
  %2856 = fadd fast float %2835, %2853
  %2857 = fadd fast float %2836, %2854
  %2858 = fmul fast float %2851, %2851
  %2859 = call float @dx.op.dot3.f32(i32 55, float %2855, float %2856, float %2857, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2860 = fmul fast float %2859, %2202
  %2861 = fdiv fast float %2858, %2860
  %2862 = call float @dx.op.dot3.f32(i32 55, float %2855, float %2856, float %2857, float %2855, float %2856, float %2857)  ; Dot3(ax,ay,az,bx,by,bz)
  %2863 = call float @dx.op.unary.f32(i32 25, float %2862)  ; Rsqrt(value)
  %2864 = fmul fast float %2863, %2855
  %2865 = fmul fast float %2863, %2856
  %2866 = fmul fast float %2863, %2857
  %2867 = call float @dx.op.unary.f32(i32 6, float %2864)  ; FAbs(value)
  %2868 = call float @dx.op.unary.f32(i32 6, float %2865)  ; FAbs(value)
  %2869 = call float @dx.op.unary.f32(i32 6, float %2866)  ; FAbs(value)
  %2870 = fsub fast float 1.000000e+00, %2869
  %2871 = call float @dx.op.unary.f32(i32 24, float %2870)  ; Sqrt(value)
  %2872 = call float @dx.op.binary.f32(i32 36, float %2867, float %2868)  ; FMin(a,b)
  %2873 = call float @dx.op.binary.f32(i32 35, float %2867, float %2868)  ; FMax(a,b)
  %2874 = fadd fast float %2873, 0x3BF0000000000000
  %2875 = fdiv fast float %2872, %2874
  %2876 = fmul fast float %2875, 0x3F99BE1040000000
  %2877 = fsub fast float 0x3FA5746D00000000, %2876
  %2878 = fmul fast float %2877, %2875
  %2879 = fadd fast float %2878, 0x3FB692C5C0000000
  %2880 = fmul fast float %2879, %2875
  %2881 = fadd fast float %2880, 0xBFCFA8A1C0000000
  %2882 = fmul fast float %2881, %2875
  %2883 = fadd fast float %2882, 0x3F79384B40000000
  %2884 = fmul fast float %2883, %2875
  %2885 = fadd fast float %2884, 0x3FE45BF7C0000000
  %2886 = fmul fast float %2885, %2875
  %2887 = fadd fast float %2886, 0x3ED10F8960000000
  %2888 = fcmp fast olt float %2867, %2868
  %2889 = fsub fast float 0x3FEFFFF780000000, %2886
  %2890 = select i1 %2888, float %2889, float %2887
  %2891 = fmul fast float %2890, %2871
  %2892 = fsub fast float %2871, %2891
  %2893 = fcmp fast olt float %2866, 0.000000e+00
  %2894 = icmp eq i32 %2826, -1
  br i1 %2894, label %2940, label %2895

; <label>:2895                                    ; preds = %2850
  %2896 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %2897 = extractvalue %dx.types.CBufRet.i32 %2896, 1
  %2898 = and i32 %2897, 31
  %2899 = lshr i32 %2826, %2898
  %2900 = mul i32 %2899, %2266
  %2901 = uitofp i32 %2900 to float
  %2902 = fsub fast float 1.000000e+00, %2892
  %2903 = select i1 %2893, float %2902, float %2891
  %2904 = bitcast float %2903 to i32
  %2905 = bitcast float %2865 to i32
  %2906 = and i32 %2905, -2147483648
  %2907 = xor i32 %2904, %2906
  %2908 = bitcast i32 %2907 to float
  %2909 = fmul fast float %2908, 5.000000e-01
  %2910 = fadd fast float %2909, 5.000000e-01
  %2911 = fmul fast float %2910, %2148
  %2912 = fadd fast float %2911, %2269
  %2913 = fadd fast float %2912, %2901
  %2914 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %2915 = fmul fast float %2913, %2914
  %2916 = extractvalue %dx.types.CBufRet.i32 %2896, 0
  %2917 = and i32 %2916, %2826
  %2918 = mul i32 %2917, %2266
  %2919 = uitofp i32 %2918 to float
  %2920 = fsub fast float 1.000000e+00, %2891
  %2921 = select i1 %2893, float %2920, float %2892
  %2922 = bitcast float %2921 to i32
  %2923 = bitcast float %2864 to i32
  %2924 = and i32 %2923, -2147483648
  %2925 = xor i32 %2922, %2924
  %2926 = bitcast i32 %2925 to float
  %2927 = fmul fast float %2926, 5.000000e-01
  %2928 = fadd fast float %2927, 5.000000e-01
  %2929 = fmul fast float %2928, %2148
  %2930 = fadd fast float %2929, %2269
  %2931 = fadd fast float %2930, %2919
  %2932 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %2933 = fmul fast float %2931, %2932
  %2934 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2935 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2936 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2934, %dx.types.Handle %2935, float %2933, float %2915, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2937 = extractvalue %dx.types.ResRet.f32 %2936, 0
  %2938 = extractvalue %dx.types.ResRet.f32 %2936, 1
  %2939 = extractvalue %dx.types.ResRet.f32 %2936, 2
  br label %2940

; <label>:2940                                    ; preds = %2895, %2850
  %2941 = phi float [ %2937, %2895 ], [ 0.000000e+00, %2850 ]
  %2942 = phi float [ %2938, %2895 ], [ 0.000000e+00, %2850 ]
  %2943 = phi float [ %2939, %2895 ], [ 0.000000e+00, %2850 ]
  %2944 = fmul fast float %2941, %2861
  %2945 = fmul fast float %2942, %2861
  %2946 = fmul fast float %2943, %2861
  %2947 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2699, i32 %2450, i32 %2166, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2948 = extractvalue %dx.types.ResRet.i32 %2947, 0
  %2949 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %2948, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2950 = extractvalue %dx.types.ResRet.f32 %2949, 0
  %2951 = extractvalue %dx.types.ResRet.f32 %2949, 1
  %2952 = extractvalue %dx.types.ResRet.f32 %2949, 2
  %2953 = fadd fast float %2704, %2950
  %2954 = fadd fast float %2455, %2951
  %2955 = fadd fast float %2191, %2952
  %2956 = fsub fast float %236, %2953
  %2957 = fsub fast float %237, %2954
  %2958 = fsub fast float %238, %2955
  %2959 = call float @dx.op.dot3.f32(i32 55, float %2956, float %2957, float %2958, float %2956, float %2957, float %2958)  ; Dot3(ax,ay,az,bx,by,bz)
  %2960 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %2956, float %2957, float %2958)  ; Dot3(ax,ay,az,bx,by,bz)
  %2961 = fmul fast float %2960, 2.000000e+00
  %2962 = fsub fast float %2959, %2210
  %2963 = fmul fast float %2961, %2961
  %2964 = fmul fast float %2213, %2962
  %2965 = fsub fast float %2963, %2964
  %2966 = fcmp fast ult float %2965, 0.000000e+00
  br i1 %2966, label %2972, label %2967, !dx.controlflow.hints !81

; <label>:2967                                    ; preds = %2940
  %2968 = call float @dx.op.unary.f32(i32 24, float %2965)  ; Sqrt(value)
  %2969 = fsub fast float %2968, %2961
  %2970 = fmul fast float %2207, 2.000000e+00
  %2971 = fdiv fast float %2969, %2970
  br label %2972

; <label>:2972                                    ; preds = %2967, %2940
  %2973 = phi float [ %2971, %2967 ], [ -1.000000e+00, %2940 ]
  %2974 = fmul fast float %2973, %321
  %2975 = fmul fast float %2973, %331
  %2976 = fmul fast float %2973, %339
  %2977 = fadd fast float %2956, %2974
  %2978 = fadd fast float %2957, %2975
  %2979 = fadd fast float %2958, %2976
  %2980 = fmul fast float %2973, %2973
  %2981 = call float @dx.op.dot3.f32(i32 55, float %2977, float %2978, float %2979, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %2982 = fmul fast float %2981, %2202
  %2983 = fdiv fast float %2980, %2982
  %2984 = call float @dx.op.dot3.f32(i32 55, float %2977, float %2978, float %2979, float %2977, float %2978, float %2979)  ; Dot3(ax,ay,az,bx,by,bz)
  %2985 = call float @dx.op.unary.f32(i32 25, float %2984)  ; Rsqrt(value)
  %2986 = fmul fast float %2985, %2977
  %2987 = fmul fast float %2985, %2978
  %2988 = fmul fast float %2985, %2979
  %2989 = call float @dx.op.unary.f32(i32 6, float %2986)  ; FAbs(value)
  %2990 = call float @dx.op.unary.f32(i32 6, float %2987)  ; FAbs(value)
  %2991 = call float @dx.op.unary.f32(i32 6, float %2988)  ; FAbs(value)
  %2992 = fsub fast float 1.000000e+00, %2991
  %2993 = call float @dx.op.unary.f32(i32 24, float %2992)  ; Sqrt(value)
  %2994 = call float @dx.op.binary.f32(i32 36, float %2989, float %2990)  ; FMin(a,b)
  %2995 = call float @dx.op.binary.f32(i32 35, float %2989, float %2990)  ; FMax(a,b)
  %2996 = fadd fast float %2995, 0x3BF0000000000000
  %2997 = fdiv fast float %2994, %2996
  %2998 = fmul fast float %2997, 0x3F99BE1040000000
  %2999 = fsub fast float 0x3FA5746D00000000, %2998
  %3000 = fmul fast float %2999, %2997
  %3001 = fadd fast float %3000, 0x3FB692C5C0000000
  %3002 = fmul fast float %3001, %2997
  %3003 = fadd fast float %3002, 0xBFCFA8A1C0000000
  %3004 = fmul fast float %3003, %2997
  %3005 = fadd fast float %3004, 0x3F79384B40000000
  %3006 = fmul fast float %3005, %2997
  %3007 = fadd fast float %3006, 0x3FE45BF7C0000000
  %3008 = fmul fast float %3007, %2997
  %3009 = fadd fast float %3008, 0x3ED10F8960000000
  %3010 = fcmp fast olt float %2989, %2990
  %3011 = fsub fast float 0x3FEFFFF780000000, %3008
  %3012 = select i1 %3010, float %3011, float %3009
  %3013 = fmul fast float %3012, %2993
  %3014 = fsub fast float %2993, %3013
  %3015 = fcmp fast olt float %2988, 0.000000e+00
  %3016 = icmp eq i32 %2948, -1
  br i1 %3016, label %3062, label %3017

; <label>:3017                                    ; preds = %2972
  %3018 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %3019 = extractvalue %dx.types.CBufRet.i32 %3018, 1
  %3020 = and i32 %3019, 31
  %3021 = lshr i32 %2948, %3020
  %3022 = mul i32 %3021, %2266
  %3023 = uitofp i32 %3022 to float
  %3024 = fsub fast float 1.000000e+00, %3014
  %3025 = select i1 %3015, float %3024, float %3013
  %3026 = bitcast float %3025 to i32
  %3027 = bitcast float %2987 to i32
  %3028 = and i32 %3027, -2147483648
  %3029 = xor i32 %3026, %3028
  %3030 = bitcast i32 %3029 to float
  %3031 = fmul fast float %3030, 5.000000e-01
  %3032 = fadd fast float %3031, 5.000000e-01
  %3033 = fmul fast float %3032, %2148
  %3034 = fadd fast float %3033, %2269
  %3035 = fadd fast float %3034, %3023
  %3036 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %3037 = fmul fast float %3035, %3036
  %3038 = extractvalue %dx.types.CBufRet.i32 %3018, 0
  %3039 = and i32 %3038, %2948
  %3040 = mul i32 %3039, %2266
  %3041 = uitofp i32 %3040 to float
  %3042 = fsub fast float 1.000000e+00, %3013
  %3043 = select i1 %3015, float %3042, float %3014
  %3044 = bitcast float %3043 to i32
  %3045 = bitcast float %2986 to i32
  %3046 = and i32 %3045, -2147483648
  %3047 = xor i32 %3044, %3046
  %3048 = bitcast i32 %3047 to float
  %3049 = fmul fast float %3048, 5.000000e-01
  %3050 = fadd fast float %3049, 5.000000e-01
  %3051 = fmul fast float %3050, %2148
  %3052 = fadd fast float %3051, %2269
  %3053 = fadd fast float %3052, %3041
  %3054 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %3055 = fmul fast float %3053, %3054
  %3056 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %3057 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3058 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3056, %dx.types.Handle %3057, float %3055, float %3037, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3059 = extractvalue %dx.types.ResRet.f32 %3058, 0
  %3060 = extractvalue %dx.types.ResRet.f32 %3058, 1
  %3061 = extractvalue %dx.types.ResRet.f32 %3058, 2
  br label %3062

; <label>:3062                                    ; preds = %3017, %2972
  %3063 = phi float [ %3059, %3017 ], [ 0.000000e+00, %2972 ]
  %3064 = phi float [ %3060, %3017 ], [ 0.000000e+00, %2972 ]
  %3065 = phi float [ %3061, %3017 ], [ 0.000000e+00, %2972 ]
  %3066 = fmul fast float %3063, %2983
  %3067 = fmul fast float %3064, %2983
  %3068 = fmul fast float %3065, %2983
  %3069 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2174, i32 0, i32 %2699, i32 %2450, i32 %2324, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3070 = extractvalue %dx.types.ResRet.i32 %3069, 0
  %3071 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2192, i32 %3070, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3072 = extractvalue %dx.types.ResRet.f32 %3071, 0
  %3073 = extractvalue %dx.types.ResRet.f32 %3071, 1
  %3074 = extractvalue %dx.types.ResRet.f32 %3071, 2
  %3075 = fadd fast float %2704, %3072
  %3076 = fadd fast float %2455, %3073
  %3077 = fadd fast float %2329, %3074
  %3078 = fsub fast float %236, %3075
  %3079 = fsub fast float %237, %3076
  %3080 = fsub fast float %238, %3077
  %3081 = call float @dx.op.dot3.f32(i32 55, float %3078, float %3079, float %3080, float %3078, float %3079, float %3080)  ; Dot3(ax,ay,az,bx,by,bz)
  %3082 = call float @dx.op.dot3.f32(i32 55, float %321, float %331, float %339, float %3078, float %3079, float %3080)  ; Dot3(ax,ay,az,bx,by,bz)
  %3083 = fmul fast float %3082, 2.000000e+00
  %3084 = fsub fast float %3081, %2210
  %3085 = fmul fast float %3083, %3083
  %3086 = fmul fast float %2213, %3084
  %3087 = fsub fast float %3085, %3086
  %3088 = fcmp fast ult float %3087, 0.000000e+00
  br i1 %3088, label %3094, label %3089, !dx.controlflow.hints !81

; <label>:3089                                    ; preds = %3062
  %3090 = call float @dx.op.unary.f32(i32 24, float %3087)  ; Sqrt(value)
  %3091 = fsub fast float %3090, %3083
  %3092 = fmul fast float %2207, 2.000000e+00
  %3093 = fdiv fast float %3091, %3092
  br label %3094

; <label>:3094                                    ; preds = %3089, %3062
  %3095 = phi float [ %3093, %3089 ], [ -1.000000e+00, %3062 ]
  %3096 = fmul fast float %3095, %321
  %3097 = fmul fast float %3095, %331
  %3098 = fmul fast float %3095, %339
  %3099 = fadd fast float %3078, %3096
  %3100 = fadd fast float %3079, %3097
  %3101 = fadd fast float %3080, %3098
  %3102 = fmul fast float %3095, %3095
  %3103 = call float @dx.op.dot3.f32(i32 55, float %3099, float %3100, float %3101, float %321, float %331, float %339)  ; Dot3(ax,ay,az,bx,by,bz)
  %3104 = fmul fast float %3103, %2202
  %3105 = fdiv fast float %3102, %3104
  %3106 = call float @dx.op.dot3.f32(i32 55, float %3099, float %3100, float %3101, float %3099, float %3100, float %3101)  ; Dot3(ax,ay,az,bx,by,bz)
  %3107 = call float @dx.op.unary.f32(i32 25, float %3106)  ; Rsqrt(value)
  %3108 = fmul fast float %3107, %3099
  %3109 = fmul fast float %3107, %3100
  %3110 = fmul fast float %3107, %3101
  %3111 = call float @dx.op.unary.f32(i32 6, float %3108)  ; FAbs(value)
  %3112 = call float @dx.op.unary.f32(i32 6, float %3109)  ; FAbs(value)
  %3113 = call float @dx.op.unary.f32(i32 6, float %3110)  ; FAbs(value)
  %3114 = fsub fast float 1.000000e+00, %3113
  %3115 = call float @dx.op.unary.f32(i32 24, float %3114)  ; Sqrt(value)
  %3116 = call float @dx.op.binary.f32(i32 36, float %3111, float %3112)  ; FMin(a,b)
  %3117 = call float @dx.op.binary.f32(i32 35, float %3111, float %3112)  ; FMax(a,b)
  %3118 = fadd fast float %3117, 0x3BF0000000000000
  %3119 = fdiv fast float %3116, %3118
  %3120 = fmul fast float %3119, 0x3F99BE1040000000
  %3121 = fsub fast float 0x3FA5746D00000000, %3120
  %3122 = fmul fast float %3121, %3119
  %3123 = fadd fast float %3122, 0x3FB692C5C0000000
  %3124 = fmul fast float %3123, %3119
  %3125 = fadd fast float %3124, 0xBFCFA8A1C0000000
  %3126 = fmul fast float %3125, %3119
  %3127 = fadd fast float %3126, 0x3F79384B40000000
  %3128 = fmul fast float %3127, %3119
  %3129 = fadd fast float %3128, 0x3FE45BF7C0000000
  %3130 = fmul fast float %3129, %3119
  %3131 = fadd fast float %3130, 0x3ED10F8960000000
  %3132 = fcmp fast olt float %3111, %3112
  %3133 = fsub fast float 0x3FEFFFF780000000, %3130
  %3134 = select i1 %3132, float %3133, float %3131
  %3135 = fmul fast float %3134, %3115
  %3136 = fsub fast float %3115, %3135
  %3137 = fcmp fast olt float %3110, 0.000000e+00
  %3138 = icmp eq i32 %3070, -1
  br i1 %3138, label %3184, label %3139

; <label>:3139                                    ; preds = %3094
  %3140 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %3141 = extractvalue %dx.types.CBufRet.i32 %3140, 1
  %3142 = and i32 %3141, 31
  %3143 = lshr i32 %3070, %3142
  %3144 = mul i32 %3143, %2266
  %3145 = uitofp i32 %3144 to float
  %3146 = fsub fast float 1.000000e+00, %3136
  %3147 = select i1 %3137, float %3146, float %3135
  %3148 = bitcast float %3147 to i32
  %3149 = bitcast float %3109 to i32
  %3150 = and i32 %3149, -2147483648
  %3151 = xor i32 %3148, %3150
  %3152 = bitcast i32 %3151 to float
  %3153 = fmul fast float %3152, 5.000000e-01
  %3154 = fadd fast float %3153, 5.000000e-01
  %3155 = fmul fast float %3154, %2148
  %3156 = fadd fast float %3155, %2269
  %3157 = fadd fast float %3156, %3145
  %3158 = extractvalue %dx.types.CBufRet.f32 %2270, 1
  %3159 = fmul fast float %3157, %3158
  %3160 = extractvalue %dx.types.CBufRet.i32 %3140, 0
  %3161 = and i32 %3160, %3070
  %3162 = mul i32 %3161, %2266
  %3163 = uitofp i32 %3162 to float
  %3164 = fsub fast float 1.000000e+00, %3135
  %3165 = select i1 %3137, float %3164, float %3136
  %3166 = bitcast float %3165 to i32
  %3167 = bitcast float %3108 to i32
  %3168 = and i32 %3167, -2147483648
  %3169 = xor i32 %3166, %3168
  %3170 = bitcast i32 %3169 to float
  %3171 = fmul fast float %3170, 5.000000e-01
  %3172 = fadd fast float %3171, 5.000000e-01
  %3173 = fmul fast float %3172, %2148
  %3174 = fadd fast float %3173, %2269
  %3175 = fadd fast float %3174, %3163
  %3176 = extractvalue %dx.types.CBufRet.f32 %2270, 0
  %3177 = fmul fast float %3175, %3176
  %3178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %3179 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3180 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3178, %dx.types.Handle %3179, float %3177, float %3159, float undef, float undef, i32 0, i32 0, i32 undef, float %2154)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3181 = extractvalue %dx.types.ResRet.f32 %3180, 0
  %3182 = extractvalue %dx.types.ResRet.f32 %3180, 1
  %3183 = extractvalue %dx.types.ResRet.f32 %3180, 2
  br label %3184

; <label>:3184                                    ; preds = %3139, %3094
  %3185 = phi float [ %3181, %3139 ], [ 0.000000e+00, %3094 ]
  %3186 = phi float [ %3182, %3139 ], [ 0.000000e+00, %3094 ]
  %3187 = phi float [ %3183, %3139 ], [ 0.000000e+00, %3094 ]
  %3188 = fmul fast float %3185, %3105
  %3189 = fmul fast float %3186, %3105
  %3190 = fmul fast float %3187, %3105
  %3191 = fsub fast float %2447, %2321
  %3192 = fsub fast float %2448, %2322
  %3193 = fsub fast float %2449, %2323
  %3194 = fmul fast float %3191, %2169
  %3195 = fmul fast float %3192, %2169
  %3196 = fmul fast float %3193, %2169
  %3197 = fadd fast float %3194, %2321
  %3198 = fadd fast float %3195, %2322
  %3199 = fadd fast float %3196, %2323
  %3200 = fsub fast float %2695, %2573
  %3201 = fsub fast float %2696, %2574
  %3202 = fsub fast float %2697, %2575
  %3203 = fmul fast float %3200, %2169
  %3204 = fmul fast float %3201, %2169
  %3205 = fmul fast float %3202, %2169
  %3206 = fsub fast float %2944, %2822
  %3207 = fsub fast float %2945, %2823
  %3208 = fsub fast float %2946, %2824
  %3209 = fmul fast float %3206, %2169
  %3210 = fmul fast float %3207, %2169
  %3211 = fmul fast float %3208, %2169
  %3212 = fadd fast float %3209, %2822
  %3213 = fadd fast float %3210, %2823
  %3214 = fadd fast float %3211, %2824
  %3215 = fsub fast float %3188, %3066
  %3216 = fsub fast float %3189, %3067
  %3217 = fsub fast float %3190, %3068
  %3218 = fmul fast float %3215, %2169
  %3219 = fmul fast float %3216, %2169
  %3220 = fmul fast float %3217, %2169
  %3221 = fsub fast float %2573, %3197
  %3222 = fadd fast float %3221, %3203
  %3223 = fsub fast float %2574, %3198
  %3224 = fadd fast float %3223, %3204
  %3225 = fsub fast float %2575, %3199
  %3226 = fadd fast float %3225, %3205
  %3227 = fmul fast float %3222, %2168
  %3228 = fmul fast float %3224, %2168
  %3229 = fmul fast float %3226, %2168
  %3230 = fadd fast float %3227, %3197
  %3231 = fadd fast float %3228, %3198
  %3232 = fadd fast float %3229, %3199
  %3233 = fsub fast float %3066, %3212
  %3234 = fadd fast float %3233, %3218
  %3235 = fsub fast float %3067, %3213
  %3236 = fadd fast float %3235, %3219
  %3237 = fsub fast float %3068, %3214
  %3238 = fadd fast float %3237, %3220
  %3239 = fmul fast float %3234, %2168
  %3240 = fmul fast float %3236, %2168
  %3241 = fmul fast float %3238, %2168
  %3242 = fsub fast float %3212, %3230
  %3243 = fadd fast float %3242, %3239
  %3244 = fsub fast float %3213, %3231
  %3245 = fadd fast float %3244, %3240
  %3246 = fsub fast float %3214, %3232
  %3247 = fadd fast float %3246, %3241
  %3248 = fmul fast float %3243, %2167
  %3249 = fmul fast float %3245, %2167
  %3250 = fmul fast float %3247, %2167
  %3251 = fadd fast float %3248, %3230
  %3252 = fadd fast float %3249, %3231
  %3253 = fadd fast float %3250, %3232
  %3254 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %3255 = extractvalue %dx.types.CBufRet.i32 %3254, 2
  %3256 = icmp eq i32 %3255, 0
  br i1 %3256, label %3257, label %3301

; <label>:3257                                    ; preds = %3184
  %3258 = extractvalue %dx.types.CBufRet.i32 %3254, 3
  %3259 = icmp eq i32 %3258, 0
  br i1 %3259, label %3260, label %3301

; <label>:3260                                    ; preds = %3257
  %3261 = fmul fast float %3251, %2119
  %3262 = fmul fast float %3252, %2119
  %3263 = fmul fast float %3253, %2119
  %3264 = fadd fast float %3261, %2120
  %3265 = fadd fast float %3262, %2121
  %3266 = fadd fast float %3263, %2122
  br label %3301

; <label>:3267                                    ; preds = %2117
  %3268 = select i1 %2128, float %240, float %2124
  %3269 = select i1 %2128, float %240, float %2125
  %3270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3271 = extractvalue %dx.types.CBufRet.f32 %3270, 1
  %3272 = fcmp fast ogt float %3271, 0.000000e+00
  br i1 %3272, label %3273, label %3295

; <label>:3273                                    ; preds = %3267
  %3274 = extractvalue %dx.types.CBufRet.f32 %3270, 0
  %3275 = fadd fast float %3274, 0xC02BEAFA60000000
  %3276 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3277 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3278 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3276, %dx.types.Handle %3277, float %321, float %331, float %339, float undef, i32 undef, i32 undef, i32 undef, float %3275)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3279 = extractvalue %dx.types.ResRet.f32 %3278, 0
  %3280 = extractvalue %dx.types.ResRet.f32 %3278, 1
  %3281 = extractvalue %dx.types.ResRet.f32 %3278, 2
  %3282 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %3283 = extractvalue %dx.types.CBufRet.f32 %3282, 0
  %3284 = extractvalue %dx.types.CBufRet.f32 %3282, 1
  %3285 = extractvalue %dx.types.CBufRet.f32 %3282, 2
  %3286 = fmul fast float %3279, %2119
  %3287 = fmul fast float %3286, %3283
  %3288 = fmul fast float %3280, %2119
  %3289 = fmul fast float %3288, %3284
  %3290 = fmul fast float %3281, %2119
  %3291 = fmul fast float %3290, %3285
  %3292 = fadd fast float %3287, %2120
  %3293 = fadd fast float %3289, %2121
  %3294 = fadd fast float %3291, %2122
  br label %3295

; <label>:3295                                    ; preds = %3273, %3267
  %3296 = phi float [ %3292, %3273 ], [ %2120, %3267 ]
  %3297 = phi float [ %3293, %3273 ], [ %2121, %3267 ]
  %3298 = phi float [ %3294, %3273 ], [ %2122, %3267 ]
  %3299 = fcmp fast ult float %3268, 6.550400e+04
  br i1 %3299, label %3301, label %3300

; <label>:3300                                    ; preds = %3295
  br label %3301

; <label>:3301                                    ; preds = %3300, %3295, %3260, %3257, %3184
  %3302 = phi float [ %3296, %3300 ], [ %3296, %3295 ], [ %3264, %3260 ], [ %2120, %3257 ], [ %3251, %3184 ]
  %3303 = phi float [ %3297, %3300 ], [ %3297, %3295 ], [ %3265, %3260 ], [ %2121, %3257 ], [ %3252, %3184 ]
  %3304 = phi float [ %3298, %3300 ], [ %3298, %3295 ], [ %3266, %3260 ], [ %2122, %3257 ], [ %3253, %3184 ]
  %3305 = phi float [ %240, %3300 ], [ %3268, %3295 ], [ %2130, %3260 ], [ %2130, %3257 ], [ %2130, %3184 ]
  %3306 = phi float [ %3269, %3300 ], [ %3269, %3295 ], [ %2131, %3260 ], [ %2131, %3257 ], [ %2131, %3184 ]
  %3307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3308 = extractvalue %dx.types.CBufRet.f32 %3307, 1
  %3309 = fcmp fast ogt float %3308, 0.000000e+00
  br i1 %3309, label %3310, label %3342

; <label>:3310                                    ; preds = %3301
  %3311 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3312 = extractvalue %dx.types.CBufRet.f32 %3311, 1
  %3313 = fcmp fast ogt float %3312, 0.000000e+00
  br i1 %3313, label %3314, label %3342

; <label>:3314                                    ; preds = %3310
  %3315 = extractvalue %dx.types.CBufRet.f32 %3311, 2
  %3316 = extractvalue %dx.types.CBufRet.f32 %3307, 0
  %3317 = call float @dx.op.binary.f32(i32 35, float %3315, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3318 = call float @dx.op.unary.f32(i32 23, float %3317)  ; Log(value)
  %3319 = fmul fast float %3318, 0x3FF3333340000000
  %3320 = fadd fast float %3316, -2.000000e+00
  %3321 = fadd fast float %3320, %3319
  %3322 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3323 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3324 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3322, %dx.types.Handle %3323, float %321, float %331, float %339, float undef, i32 undef, i32 undef, i32 undef, float %3321)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3325 = extractvalue %dx.types.ResRet.f32 %3324, 0
  %3326 = extractvalue %dx.types.ResRet.f32 %3324, 1
  %3327 = extractvalue %dx.types.ResRet.f32 %3324, 2
  %3328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %3329 = extractvalue %dx.types.CBufRet.f32 %3328, 0
  %3330 = extractvalue %dx.types.CBufRet.f32 %3328, 1
  %3331 = extractvalue %dx.types.CBufRet.f32 %3328, 2
  %3332 = fmul fast float %3329, %3325
  %3333 = fmul fast float %3330, %3326
  %3334 = fmul fast float %3331, %3327
  %3335 = extractvalue %dx.types.CBufRet.f32 %3311, 3
  %3336 = fmul fast float %3335, %3306
  %3337 = call float @dx.op.unary.f32(i32 7, float %3336)  ; Saturate(value)
  %3338 = fmul fast float %3337, %3312
  %3339 = fmul fast float %3332, %3338
  %3340 = fmul fast float %3333, %3338
  %3341 = fmul fast float %3334, %3338
  br label %3342

; <label>:3342                                    ; preds = %3314, %3310, %3301
  %3343 = phi float [ %3339, %3314 ], [ 0.000000e+00, %3310 ], [ 0.000000e+00, %3301 ]
  %3344 = phi float [ %3340, %3314 ], [ 0.000000e+00, %3310 ], [ 0.000000e+00, %3301 ]
  %3345 = phi float [ %3341, %3314 ], [ 0.000000e+00, %3310 ], [ 0.000000e+00, %3301 ]
  %3346 = fadd fast float %3343, %3302
  %3347 = fadd fast float %3344, %3303
  %3348 = fadd fast float %3345, %3304
  %3349 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %3350 = extractvalue %dx.types.CBufRet.f32 %3349, 2
  %3351 = fmul fast float %3350, %3346
  %3352 = fmul fast float %3350, %3347
  %3353 = fmul fast float %3350, %3348
  %3354 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %50, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3355 = extractvalue %dx.types.CBufRet.i32 %3354, 0
  %3356 = icmp eq i32 %3355, 0
  br i1 %3356, label %3619, label %3357

; <label>:3357                                    ; preds = %3342
  %3358 = fmul fast float %3305, %321
  %3359 = fmul fast float %3305, %331
  %3360 = fmul fast float %3305, %339
  %3361 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %3362 = extractvalue %dx.types.CBufRet.f32 %3361, 3
  %3363 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3364 = extractvalue %dx.types.CBufRet.f32 %3363, 2
  %3365 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %3366 = extractvalue %dx.types.CBufRet.f32 %3365, 2
  %3367 = fadd fast float %232, %3366
  %3368 = call float @dx.op.binary.f32(i32 36, float %3367, float %3364)  ; FMin(a,b)
  %3369 = fsub fast float %3360, %3368
  %3370 = fadd fast float %3369, %3366
  %3371 = fadd fast float %3370, %232
  %3372 = call float @dx.op.dot3.f32(i32 55, float %3358, float %3359, float %3371, float %3358, float %3359, float %3371)  ; Dot3(ax,ay,az,bx,by,bz)
  %3373 = call float @dx.op.binary.f32(i32 35, float %3372, float 0x3E45798EE0000000)  ; FMax(a,b)
  %3374 = call float @dx.op.unary.f32(i32 25, float %3373)  ; Rsqrt(value)
  %3375 = fmul fast float %3374, %3372
  %3376 = fmul fast float %3374, %3358
  %3377 = fmul fast float %3374, %3359
  %3378 = fmul fast float %3371, %3374
  %3379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %3380 = extractvalue %dx.types.CBufRet.f32 %3363, 3
  %3381 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3380)  ; FMax(a,b)
  %3382 = fcmp fast ogt float %3381, 0.000000e+00
  %3383 = extractvalue %dx.types.CBufRet.f32 %3363, 1
  %3384 = extractvalue %dx.types.CBufRet.f32 %3379, 1
  br i1 %3382, label %3388, label %3385

; <label>:3385                                    ; preds = %3357
  %3386 = extractvalue %dx.types.CBufRet.f32 %3379, 0
  %3387 = extractvalue %dx.types.CBufRet.f32 %3363, 0
  br label %3412

; <label>:3388                                    ; preds = %3357
  %3389 = fmul fast float %3381, %3374
  %3390 = fmul fast float %3389, %3371
  %3391 = fadd fast float %3390, %3368
  %3392 = fsub fast float %3371, %3390
  %3393 = fsub fast float 1.000000e+00, %3389
  %3394 = fmul fast float %3393, %3375
  %3395 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3396 = extractvalue %dx.types.CBufRet.f32 %3395, 1
  %3397 = fsub fast float %3391, %3396
  %3398 = fmul fast float %3397, %3383
  %3399 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3398)  ; FMax(a,b)
  %3400 = extractvalue %dx.types.CBufRet.f32 %3395, 0
  %3401 = fsub fast float -0.000000e+00, %3399
  %3402 = call float @dx.op.unary.f32(i32 21, float %3401)  ; Exp(value)
  %3403 = fmul fast float %3400, %3402
  %3404 = extractvalue %dx.types.CBufRet.f32 %3379, 3
  %3405 = fsub fast float %3391, %3404
  %3406 = fmul fast float %3405, %3384
  %3407 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3406)  ; FMax(a,b)
  %3408 = extractvalue %dx.types.CBufRet.f32 %3379, 2
  %3409 = fsub fast float -0.000000e+00, %3407
  %3410 = call float @dx.op.unary.f32(i32 21, float %3409)  ; Exp(value)
  %3411 = fmul fast float %3408, %3410
  br label %3412

; <label>:3412                                    ; preds = %3388, %3385
  %3413 = phi float [ %3403, %3388 ], [ %3387, %3385 ]
  %3414 = phi float [ %3411, %3388 ], [ %3386, %3385 ]
  %3415 = phi float [ %3394, %3388 ], [ %3375, %3385 ]
  %3416 = phi float [ %3392, %3388 ], [ %3371, %3385 ]
  %3417 = fmul fast float %3383, %3416
  %3418 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3417)  ; FMax(a,b)
  %3419 = fsub fast float -0.000000e+00, %3418
  %3420 = call float @dx.op.unary.f32(i32 21, float %3419)  ; Exp(value)
  %3421 = fsub fast float 1.000000e+00, %3420
  %3422 = fdiv fast float %3421, %3418
  %3423 = fmul fast float %3418, 0x3FCEBFBE00000000
  %3424 = fsub fast float 0x3FE62E4300000000, %3423
  %3425 = call float @dx.op.unary.f32(i32 6, float %3418)  ; FAbs(value)
  %3426 = fcmp fast ogt float %3425, 0x3F847AE140000000
  %3427 = select i1 %3426, float %3422, float %3424
  %3428 = fmul fast float %3427, %3413
  %3429 = fmul fast float %3384, %3416
  %3430 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3429)  ; FMax(a,b)
  %3431 = fsub fast float -0.000000e+00, %3430
  %3432 = call float @dx.op.unary.f32(i32 21, float %3431)  ; Exp(value)
  %3433 = fsub fast float 1.000000e+00, %3432
  %3434 = fdiv fast float %3433, %3430
  %3435 = fmul fast float %3430, 0x3FCEBFBE00000000
  %3436 = fsub fast float 0x3FE62E4300000000, %3435
  %3437 = call float @dx.op.unary.f32(i32 6, float %3430)  ; FAbs(value)
  %3438 = fcmp fast ogt float %3437, 0x3F847AE140000000
  %3439 = select i1 %3438, float %3434, float %3436
  %3440 = fmul fast float %3439, %3414
  %3441 = fadd fast float %3440, %3428
  %3442 = extractvalue %dx.types.CBufRet.f32 %3361, 0
  %3443 = extractvalue %dx.types.CBufRet.f32 %3361, 1
  %3444 = extractvalue %dx.types.CBufRet.f32 %3361, 2
  %3445 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3446 = extractvalue %dx.types.CBufRet.f32 %3445, 2
  %3447 = fcmp fast ogt float %3446, 0.000000e+00
  br i1 %3447, label %3448, label %3484, !dx.controlflow.hints !82

; <label>:3448                                    ; preds = %3412
  %3449 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %3450 = extractvalue %dx.types.CBufRet.f32 %3449, 0
  %3451 = fmul fast float %3450, %3375
  %3452 = extractvalue %dx.types.CBufRet.f32 %3449, 1
  %3453 = fadd fast float %3451, %3452
  %3454 = call float @dx.op.unary.f32(i32 7, float %3453)  ; Saturate(value)
  %3455 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %3456 = extractvalue %dx.types.CBufRet.f32 %3455, 1
  %3457 = extractvalue %dx.types.CBufRet.f32 %3455, 0
  %3458 = fsub fast float -0.000000e+00, %3457
  %3459 = call float @dx.op.dot2.f32(i32 54, float %3358, float %3359, float %3456, float %3458)  ; Dot2(ax,ay,bx,by)
  %3460 = call float @dx.op.dot2.f32(i32 54, float %3358, float %3359, float %3457, float %3456)  ; Dot2(ax,ay,bx,by)
  %3461 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3462 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3463 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3461, %dx.types.Handle %3462, float %3459, float %3460, float %3371, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3464 = extractvalue %dx.types.ResRet.f32 %3463, 0
  %3465 = extractvalue %dx.types.ResRet.f32 %3463, 1
  %3466 = extractvalue %dx.types.ResRet.f32 %3463, 2
  %3467 = extractvalue %dx.types.CBufRet.f32 %3449, 2
  %3468 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3461, %dx.types.Handle %3462, float %3459, float %3460, float %3371, float undef, i32 undef, i32 undef, i32 undef, float %3467)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3469 = extractvalue %dx.types.ResRet.f32 %3468, 0
  %3470 = extractvalue %dx.types.ResRet.f32 %3468, 1
  %3471 = extractvalue %dx.types.ResRet.f32 %3468, 2
  %3472 = fsub fast float %3464, %3469
  %3473 = fsub fast float %3465, %3470
  %3474 = fsub fast float %3466, %3471
  %3475 = fmul fast float %3472, %3454
  %3476 = fmul fast float %3473, %3454
  %3477 = fmul fast float %3474, %3454
  %3478 = fadd fast float %3475, %3469
  %3479 = fadd fast float %3476, %3470
  %3480 = fadd fast float %3477, %3471
  %3481 = fmul fast float %3478, %3442
  %3482 = fmul fast float %3479, %3443
  %3483 = fmul fast float %3480, %3444
  br label %3484

; <label>:3484                                    ; preds = %3448, %3412
  %3485 = phi float [ %3481, %3448 ], [ %3442, %3412 ]
  %3486 = phi float [ %3482, %3448 ], [ %3443, %3412 ]
  %3487 = phi float [ %3483, %3448 ], [ %3444, %3412 ]
  %3488 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3489 = extractvalue %dx.types.CBufRet.f32 %3488, 0
  %3490 = extractvalue %dx.types.CBufRet.f32 %3488, 1
  %3491 = extractvalue %dx.types.CBufRet.f32 %3488, 2
  %3492 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 175)  ; CBufferLoadLegacy(handle,regIndex)
  %3493 = extractvalue %dx.types.CBufRet.f32 %3492, 1
  %3494 = fmul fast float %3493, %3489
  %3495 = fmul fast float %3493, %3490
  %3496 = fmul fast float %3493, %3491
  %3497 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3498 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3499 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3497, %dx.types.Handle %3498, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3500 = extractvalue %dx.types.ResRet.f32 %3499, 0
  %3501 = extractvalue %dx.types.ResRet.f32 %3499, 1
  %3502 = extractvalue %dx.types.ResRet.f32 %3499, 2
  %3503 = fmul fast float %3494, %3500
  %3504 = fmul fast float %3495, %3501
  %3505 = fmul fast float %3496, %3502
  %3506 = fadd fast float %3503, %3485
  %3507 = fadd fast float %3504, %3486
  %3508 = fadd fast float %3505, %3487
  %3509 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3510 = extractvalue %dx.types.CBufRet.f32 %3509, 3
  %3511 = fcmp fast oge float %3510, 0.000000e+00
  %3512 = fcmp fast oeq float %3446, 0.000000e+00
  %3513 = and i1 %3511, %3512
  br i1 %3513, label %3514, label %3585

; <label>:3514                                    ; preds = %3484
  %3515 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %3516 = extractvalue %dx.types.CBufRet.f32 %3515, 0
  %3517 = extractvalue %dx.types.CBufRet.f32 %3515, 1
  %3518 = extractvalue %dx.types.CBufRet.f32 %3515, 2
  %3519 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %3520 = extractvalue %dx.types.CBufRet.f32 %3519, 0
  %3521 = extractvalue %dx.types.CBufRet.f32 %3519, 1
  %3522 = extractvalue %dx.types.CBufRet.f32 %3519, 2
  %3523 = fmul fast float %3493, 0x3FB45F3060000000
  %3524 = fmul fast float %3523, %3520
  %3525 = fmul fast float %3523, %3521
  %3526 = fmul fast float %3523, %3522
  %3527 = fadd fast float %3524, %3516
  %3528 = fadd fast float %3525, %3517
  %3529 = fadd fast float %3526, %3518
  %3530 = extractvalue %dx.types.CBufRet.f32 %3515, 3
  %3531 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %3532 = extractvalue %dx.types.CBufRet.f32 %3531, 0
  %3533 = extractvalue %dx.types.CBufRet.f32 %3531, 1
  %3534 = extractvalue %dx.types.CBufRet.f32 %3531, 2
  %3535 = call float @dx.op.dot3.f32(i32 55, float %3376, float %3377, float %3378, float %3532, float %3533, float %3534)  ; Dot3(ax,ay,az,bx,by,bz)
  %3536 = call float @dx.op.unary.f32(i32 7, float %3535)  ; Saturate(value)
  %3537 = call float @dx.op.unary.f32(i32 23, float %3536)  ; Log(value)
  %3538 = fmul fast float %3537, %3530
  %3539 = call float @dx.op.unary.f32(i32 21, float %3538)  ; Exp(value)
  %3540 = fmul fast float %3539, %3527
  %3541 = fmul fast float %3539, %3528
  %3542 = fmul fast float %3539, %3529
  %3543 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %3544 = extractvalue %dx.types.CBufRet.f32 %3543, 3
  %3545 = fcmp fast ogt float %3544, 0.000000e+00
  br i1 %3545, label %3546, label %3571

; <label>:3546                                    ; preds = %3514
  %3547 = extractvalue %dx.types.CBufRet.f32 %3543, 0
  %3548 = extractvalue %dx.types.CBufRet.f32 %3543, 1
  %3549 = extractvalue %dx.types.CBufRet.f32 %3543, 2
  %3550 = fmul fast float %3523, %3547
  %3551 = fmul fast float %3523, %3548
  %3552 = fmul fast float %3523, %3549
  %3553 = fadd fast float %3550, %3516
  %3554 = fadd fast float %3551, %3517
  %3555 = fadd fast float %3552, %3518
  %3556 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %3557 = extractvalue %dx.types.CBufRet.f32 %3556, 0
  %3558 = extractvalue %dx.types.CBufRet.f32 %3556, 1
  %3559 = extractvalue %dx.types.CBufRet.f32 %3556, 2
  %3560 = call float @dx.op.dot3.f32(i32 55, float %3376, float %3377, float %3378, float %3557, float %3558, float %3559)  ; Dot3(ax,ay,az,bx,by,bz)
  %3561 = call float @dx.op.unary.f32(i32 7, float %3560)  ; Saturate(value)
  %3562 = call float @dx.op.unary.f32(i32 23, float %3561)  ; Log(value)
  %3563 = fmul fast float %3562, %3530
  %3564 = call float @dx.op.unary.f32(i32 21, float %3563)  ; Exp(value)
  %3565 = fmul fast float %3564, %3553
  %3566 = fmul fast float %3564, %3554
  %3567 = fmul fast float %3564, %3555
  %3568 = fadd fast float %3565, %3540
  %3569 = fadd fast float %3566, %3541
  %3570 = fadd fast float %3567, %3542
  br label %3571

; <label>:3571                                    ; preds = %3546, %3514
  %3572 = phi float [ %3568, %3546 ], [ %3540, %3514 ]
  %3573 = phi float [ %3569, %3546 ], [ %3541, %3514 ]
  %3574 = phi float [ %3570, %3546 ], [ %3542, %3514 ]
  %3575 = fsub fast float %3415, %3510
  %3576 = call float @dx.op.binary.f32(i32 35, float %3575, float 0.000000e+00)  ; FMax(a,b)
  %3577 = fmul fast float %3441, %3576
  %3578 = fsub fast float -0.000000e+00, %3577
  %3579 = call float @dx.op.unary.f32(i32 21, float %3578)  ; Exp(value)
  %3580 = call float @dx.op.unary.f32(i32 7, float %3579)  ; Saturate(value)
  %3581 = fsub fast float 1.000000e+00, %3580
  %3582 = fmul fast float %3581, %3572
  %3583 = fmul fast float %3581, %3573
  %3584 = fmul fast float %3581, %3574
  br label %3585

; <label>:3585                                    ; preds = %3571, %3484
  %3586 = phi float [ %3582, %3571 ], [ 0.000000e+00, %3484 ]
  %3587 = phi float [ %3583, %3571 ], [ 0.000000e+00, %3484 ]
  %3588 = phi float [ %3584, %3571 ], [ 0.000000e+00, %3484 ]
  %3589 = fmul fast float %3415, %3441
  %3590 = fsub fast float -0.000000e+00, %3589
  %3591 = call float @dx.op.unary.f32(i32 21, float %3590)  ; Exp(value)
  %3592 = call float @dx.op.unary.f32(i32 7, float %3591)  ; Saturate(value)
  %3593 = call float @dx.op.binary.f32(i32 35, float %3592, float %3362)  ; FMax(a,b)
  %3594 = extractvalue %dx.types.CBufRet.f32 %3445, 3
  %3595 = fcmp fast ogt float %3594, 0.000000e+00
  %3596 = fcmp fast ogt float %3375, %3594
  %3597 = and i1 %3595, %3596
  %3598 = select i1 %3597, float 0.000000e+00, float %3586
  %3599 = select i1 %3597, float 0.000000e+00, float %3587
  %3600 = select i1 %3597, float 0.000000e+00, float %3588
  %3601 = select i1 %3597, float 1.000000e+00, float %3593
  %3602 = fsub fast float 1.000000e+00, %3601
  %3603 = fmul fast float %3602, %3506
  %3604 = fmul fast float %3602, %3507
  %3605 = fmul fast float %3602, %3508
  %3606 = fadd fast float %3603, %3598
  %3607 = fadd fast float %3604, %3599
  %3608 = fadd fast float %3605, %3600
  %3609 = fmul fast float %3601, %3351
  %3610 = fmul fast float %3601, %3352
  %3611 = fmul fast float %3601, %3353
  %3612 = fmul fast float %3350, %2127
  %3613 = fmul fast float %3612, %3606
  %3614 = fmul fast float %3612, %3607
  %3615 = fmul fast float %3612, %3608
  %3616 = fadd fast float %3613, %3609
  %3617 = fadd fast float %3614, %3610
  %3618 = fadd fast float %3615, %3611
  br label %3619

; <label>:3619                                    ; preds = %3585, %3342
  %3620 = phi float [ %3616, %3585 ], [ %3351, %3342 ]
  %3621 = phi float [ %3617, %3585 ], [ %3352, %3342 ]
  %3622 = phi float [ %3618, %3585 ], [ %3353, %3342 ]
  %3623 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3623, i32 %144, i32 %145, i32 undef, float %3620, float %3621, float %3622, float %3620, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3624 = call float @dx.op.binary.f32(i32 35, float %3305, float 0.000000e+00)  ; FMax(a,b)
  %3625 = fmul fast float %3624, 0x3FB99999A0000000
  %3626 = fadd fast float %3625, 5.000000e-01
  %3627 = fptoui float %3626 to i32
  %3628 = call i32 @dx.op.binary.i32(i32 40, i32 %3627, i32 536870911)  ; UMin(a,b)
  %3629 = select i1 %2123, i32 536870912, i32 0
  %3630 = or i32 %3628, %3629
  %3631 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %3631, i32 %144, i32 %145, i32 undef, i32 %3630, i32 %3630, i32 %3630, i32 %3630, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3632

; <label>:3632                                    ; preds = %3619, %0
  ret void

; <label>:3633                                    ; preds = %1665
  %3634 = fsub fast float %1652, %1647
  %3635 = call float @dx.op.unary.f32(i32 6, float %3634)  ; FAbs(value)
  %3636 = fsub fast float %3635, %1653
  %3637 = fdiv fast float %3636, %1654
  %3638 = call float @dx.op.unary.f32(i32 7, float %3637)  ; Saturate(value)
  %3639 = fsub fast float 1.000000e+00, %3638
  br label %3640

; <label>:3640                                    ; preds = %3633, %1665
  %3641 = phi float [ %3639, %3633 ], [ %1669, %1665 ]
  %3642 = fcmp uge float %1648, 1.000000e+00
  %3643 = or i1 %1304, %3642
  %3644 = select i1 %3642, float 0.000000e+00, float 1.000000e+00
  br i1 %3643, label %3652, label %3645

; <label>:3645                                    ; preds = %3640
  %3646 = fsub fast float %1652, %1648
  %3647 = call float @dx.op.unary.f32(i32 6, float %3646)  ; FAbs(value)
  %3648 = fsub fast float %3647, %1653
  %3649 = fdiv fast float %3648, %1654
  %3650 = call float @dx.op.unary.f32(i32 7, float %3649)  ; Saturate(value)
  %3651 = fsub fast float 1.000000e+00, %3650
  br label %3652

; <label>:3652                                    ; preds = %3645, %3640
  %3653 = phi float [ %3651, %3645 ], [ %3644, %3640 ]
  %3654 = fcmp uge float %1649, 1.000000e+00
  %3655 = or i1 %1304, %3654
  %3656 = select i1 %3654, float 0.000000e+00, float 1.000000e+00
  br i1 %3655, label %3664, label %3657

; <label>:3657                                    ; preds = %3652
  %3658 = fsub fast float %1652, %1649
  %3659 = call float @dx.op.unary.f32(i32 6, float %3658)  ; FAbs(value)
  %3660 = fsub fast float %3659, %1653
  %3661 = fdiv fast float %3660, %1654
  %3662 = call float @dx.op.unary.f32(i32 7, float %3661)  ; Saturate(value)
  %3663 = fsub fast float 1.000000e+00, %3662
  br label %3664

; <label>:3664                                    ; preds = %3657, %3652
  %3665 = phi float [ %3663, %3657 ], [ %3656, %3652 ]
  %3666 = fmul fast float %1666, %1627
  %3667 = fmul fast float %3641, %1628
  %3668 = fmul fast float %3653, %1630
  %3669 = fmul fast float %3665, %1631
  %3670 = call float @dx.op.dot4.f32(i32 56, float %3666, float %3667, float %3668, float %3669, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3671 = fmul fast float %3670, %1640
  %3672 = fcmp fast ogt float %3671, 0.000000e+00
  br i1 %3672, label %1670, label %1453
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!57}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !38, !41, !49}
!5 = !{!6, !8, !10, !11, !12, !14, !15, !16, !17, !18, !19, !20, !21, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !35, !36, !37}
!6 = !{i32 0, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 5}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !7}
!11 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 16}
!14 = !{i32 5, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!15 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!18 = !{i32 9, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 5, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !9}
!21 = !{i32 12, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 12, i32 1, i32 12, i32 0, !22}
!22 = !{i32 1, i32 32}
!23 = !{i32 13, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !9}
!24 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!25 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!26 = !{i32 16, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 12, i32 0, !13}
!27 = !{i32 17, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !9}
!28 = !{i32 18, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !7}
!29 = !{i32 19, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 12, i32 0, !13}
!30 = !{i32 20, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!31 = !{i32 21, %"class.Texture2D<vector<float, 2> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !7}
!32 = !{i32 22, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!33 = !{i32 23, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 23, i32 1, i32 12, i32 0, !34}
!34 = !{i32 1, i32 4}
!35 = !{i32 24, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 24, i32 1, i32 12, i32 0, !34}
!36 = !{i32 25, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 25, i32 1, i32 12, i32 0, !34}
!37 = !{i32 26, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!38 = !{!39, !40}
!39 = !{i32 0, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !9}
!40 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!41 = !{!42, !43, !44, !45, !46, !47, !48}
!42 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1064, null}
!43 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!44 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 140, null}
!45 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!46 = !{i32 4, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 4, i32 1, i32 180, null}
!47 = !{i32 5, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 5, i32 1, i32 44, null}
!48 = !{i32 6, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 6, i32 1, i32 228, null}
!49 = !{!50, !51, !52, !53, !54, !55, !56}
!50 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!51 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!52 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!53 = !{i32 3, %struct.SamplerState* undef, !"", i32 1000, i32 5, i32 1, i32 0, null}
!54 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!55 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!56 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!57 = !{void ()* @ScreenProbeTraceVoxelsCS, !"ScreenProbeTraceVoxelsCS", null, !4, !58}
!58 = !{i32 0, i64 16, i32 4, !59, i32 5, !60}
!59 = !{i32 64, i32 1, i32 1}
!60 = !{i32 0}
!61 = distinct !{!61, !62}
!62 = !{!"llvm.loop.unroll.disable"}
!63 = distinct !{!63, !62}
!64 = !{!65, !65, i64 0}
!65 = !{!"int", !66, i64 0}
!66 = !{!"omnipotent char", !67, i64 0}
!67 = !{!"Simple C/C++ TBAA"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!70 = distinct !{!70, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!71 = !{!72, !74, !76, !78}
!72 = distinct !{!72, !73, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z: %CardSampleAccumulator"}
!73 = distinct !{!73, !"\01?SampleLumenMeshCards@@YAXIV?$vector@M$02@@0MM_NUFCardSampleAccumulator@@@Z"}
!74 = distinct !{!74, !75, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z: %ConeTraceResult"}
!75 = distinct !{!75, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z"}
!76 = distinct !{!76, !77, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!77 = distinct !{!77, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!78 = distinct !{!78, !79, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!79 = distinct !{!79, !"\01?ConeTraceLumenSceneVoxels@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!80 = !{!74, !76, !78}
!81 = distinct !{!81, !"dx.controlflow.hints", i32 2}
!82 = distinct !{!82, !"dx.controlflow.hints", i32 1}
