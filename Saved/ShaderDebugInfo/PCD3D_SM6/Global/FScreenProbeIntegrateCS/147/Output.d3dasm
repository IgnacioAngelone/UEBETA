;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 8cb03e45c2042fafd504194435444ec7
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:   32
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:   36
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:   40
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:   44
;       uint ScreenProbeDownsampleFactor;             ; Offset:   48
;       uint2 ScreenProbeViewSize;                    ; Offset:   56
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:   64
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:   72
;       float ScreenProbeGatherMaxMip;                ; Offset:   80
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:   84
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:   88
;       float2 SampleRadianceProbeUVMul;              ; Offset:   96
;       float2 SampleRadianceProbeUVAdd;              ; Offset:  104
;       float2 SampleRadianceAtlasUVMul;              ; Offset:  112
;       uint NumUniformScreenProbes;                  ; Offset:  124
;       uint MaxNumAdaptiveProbes;                    ; Offset:  128
;       int FixedJitterIndex;                         ; Offset:  132
;       uint UseShortRangeAO;                         ; Offset:  440
;       float MaxRoughnessToTrace;                    ; Offset:  448
;       float MaxRoughnessToTraceForFoliage;          ; Offset:  452
;       float InvRoughnessFadeLength;                 ; Offset:  456
;       float FullResolutionJitterWidth;              ; Offset:  464
;       float MaxRoughnessToEvaluateRoughSpecular;    ; Offset:  468
;       uint ApplyMaterialAO;                         ; Offset:  472
;       float MaxAOMultibounceAlbedo;                 ; Offset:  476
;       uint LumenReflectionInputIsSSR;               ; Offset:  480
;       uint DefaultDiffuseIntegrationMethod;         ; Offset:  484
;       uint2 ViewportTileDimensions;                 ; Offset:  488
;       uint2 ViewportTileDimensionsWithOverflow;     ; Offset:  496
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   504
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; Resource bind info for AdaptiveScreenProbeData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB2            cb2     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S0   s3,space1000     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S1             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T3             t3     1
; SceneTexturesStruct_GBufferFTexture   texture     f32          2d      T4             t4     1
; BlueNoise_ScalarTexture           texture     f32          2d      T5             t5     1
; BlueNoise_Vec2Texture             texture     f32          2d      T6             t6     1
; ScreenProbeSceneDepth             texture     u32          2d      T7             t7     1
; AdaptiveScreenProbeData           texture  struct         r/o      T8             t8     1
; ScreenTileAdaptiveProbeHeader     texture     u32          2d      T9             t9     1
; ScreenTileAdaptiveProbeIndices    texture     u32          2d     T10            t10     1
; ScreenProbeMoving                 texture     f32          2d     T11            t11     1
; ScreenProbeRadianceSHAmbient      texture     f32          2d     T12            t12     1
; ScreenProbeRadianceSHDirectional   texture     f32          2d     T13            t13     1
; ScreenProbeRadianceWithBorder     texture     f32          2d     T14            t14     1
; ScreenProbeRadiance               texture     f32          2d     T15            t15     1
; RWDiffuseIndirect                     UAV     f32          2d      U0             u0     1
; RWBackfaceDiffuseIndirect             UAV     f32          2d      U1             u1     1
; RWRoughSpecularIndirect               UAV     f32          2d      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, float, float, float, i32, float, i32, i32, <2 x i32>, <2 x i32> }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ScreenProbeIntegrateCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 504 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %29 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %30 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %31 = extractvalue %dx.types.CBufRet.i32 %30, 0
  %32 = extractvalue %dx.types.CBufRet.i32 %30, 1
  %33 = add i32 %31, %28
  %34 = add i32 %32, %29
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %36 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %35, i32 0, i32 %33, i32 %34, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %37 = extractvalue %dx.types.ResRet.f32 %36, 0
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = fmul fast float %39, %37
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %42 = fadd fast float %40, %41
  %43 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %44 = fmul fast float %43, %37
  %45 = extractvalue %dx.types.CBufRet.f32 %38, 3
  %46 = fsub fast float %44, %45
  %47 = fdiv fast float 1.000000e+00, %46
  %48 = fadd fast float %42, %47
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %50 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %49, i32 0, i32 %33, i32 %34, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 0
  %52 = extractvalue %dx.types.ResRet.f32 %50, 1
  %53 = extractvalue %dx.types.ResRet.f32 %50, 2
  %54 = extractvalue %dx.types.ResRet.f32 %50, 3
  %55 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %56 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %55, i32 0, i32 %33, i32 %34, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %57 = extractvalue %dx.types.ResRet.f32 %56, 0
  %58 = extractvalue %dx.types.ResRet.f32 %56, 1
  %59 = extractvalue %dx.types.ResRet.f32 %56, 2
  %60 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %61 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %60, i32 0, i32 %33, i32 %34, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %62 = extractvalue %dx.types.ResRet.f32 %61, 2
  %63 = extractvalue %dx.types.ResRet.f32 %61, 3
  %64 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %65 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %64, i32 0, i32 %33, i32 %34, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %66 = extractvalue %dx.types.ResRet.f32 %65, 0
  %67 = extractvalue %dx.types.ResRet.f32 %65, 1
  %68 = extractvalue %dx.types.ResRet.f32 %65, 2
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 149)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = fptoui float %70 to i32
  %72 = add i32 %33, %34
  %73 = add i32 %72, %71
  %74 = and i32 %73, 1
  %75 = icmp ne i32 %74, 0
  %76 = fmul fast float %63, 2.550000e+02
  %77 = fadd fast float %76, 5.000000e-01
  %78 = fptoui float %77 to i32
  %79 = and i32 %78, 15
  %80 = fmul fast float %57, 2.000000e+00
  %81 = fmul fast float %58, 2.000000e+00
  %82 = fmul fast float %59, 2.000000e+00
  %83 = fadd fast float %80, -1.000000e+00
  %84 = fadd fast float %81, -1.000000e+00
  %85 = fadd fast float %82, -1.000000e+00
  %86 = and i32 %78, 16
  %87 = icmp eq i32 %86, 0
  %88 = call float @dx.op.dot3.f32(i32 55, float %83, float %84, float %85, float %83, float %84, float %85)  ; Dot3(ax,ay,az,bx,by,bz)
  %89 = call float @dx.op.unary.f32(i32 25, float %88)  ; Rsqrt(value)
  %90 = fmul fast float %89, %83
  %91 = fmul fast float %89, %84
  %92 = fmul fast float %89, %85
  %93 = icmp eq i32 %79, 5
  %94 = icmp eq i32 %79, 9
  %95 = or i1 %93, %94
  br i1 %95, label %96, label %114

; <label>:96                                      ; preds = %0
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 245)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 3
  %99 = fcmp fast ogt float %98, 0.000000e+00
  br i1 %99, label %100, label %104

; <label>:100                                     ; preds = %96
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %103 = fcmp fast ogt float %102, 0.000000e+00
  br label %104

; <label>:104                                     ; preds = %100, %96
  %105 = phi i1 [ false, %96 ], [ %103, %100 ]
  %106 = fcmp fast une float %98, 0.000000e+00
  %107 = select i1 %106, float 1.000000e+00, float %66
  %108 = select i1 %106, float 1.000000e+00, float %67
  %109 = select i1 %106, float 1.000000e+00, float %68
  %110 = uitofp i1 %75 to float
  %111 = select i1 %105, float %110, float %107
  %112 = select i1 %105, float %110, float %108
  %113 = select i1 %105, float %110, float %109
  br label %114

; <label>:114                                     ; preds = %104, %0
  %115 = phi float [ %66, %0 ], [ %111, %104 ]
  %116 = phi float [ %67, %0 ], [ %112, %104 ]
  %117 = phi float [ %68, %0 ], [ %113, %104 ]
  br i1 %87, label %132, label %118

; <label>:118                                     ; preds = %114
  %119 = fmul fast float %51, 2.000000e+00
  %120 = fmul fast float %52, 2.000000e+00
  %121 = fmul fast float %53, 2.000000e+00
  %122 = fadd fast float %119, -1.000000e+00
  %123 = fadd fast float %120, -1.000000e+00
  %124 = fadd fast float %121, -1.000000e+00
  %125 = fmul fast float %54, 2.000000e+00
  %126 = fadd fast float %125, -1.000000e+00
  %127 = call float @dx.op.dot3.f32(i32 55, float %122, float %123, float %124, float %122, float %123, float %124)  ; Dot3(ax,ay,az,bx,by,bz)
  %128 = call float @dx.op.unary.f32(i32 25, float %127)  ; Rsqrt(value)
  %129 = fmul fast float %128, %122
  %130 = fmul fast float %128, %123
  %131 = fmul fast float %128, %124
  br label %132

; <label>:132                                     ; preds = %118, %114
  %133 = phi float [ %129, %118 ], [ 0.000000e+00, %114 ]
  %134 = phi float [ %130, %118 ], [ 0.000000e+00, %114 ]
  %135 = phi float [ %131, %118 ], [ 0.000000e+00, %114 ]
  %136 = phi float [ %126, %118 ], [ 0.000000e+00, %114 ]
  %137 = and i32 %78, 11
  %138 = icmp eq i32 %137, 2
  %139 = icmp eq i32 %79, 7
  %140 = icmp eq i32 %79, 0
  br i1 %140, label %2301, label %141

; <label>:141                                     ; preds = %132
  %142 = uitofp i32 %33 to float
  %143 = uitofp i32 %34 to float
  %144 = fadd fast float %142, 5.000000e-01
  %145 = fadd fast float %143, 5.000000e-01
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %148 = extractvalue %dx.types.CBufRet.f32 %146, 3
  %149 = fmul fast float %147, %144
  %150 = fmul fast float %148, %145
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 3
  %154 = fsub fast float %149, %153
  %155 = fsub fast float %150, %152
  %156 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %158 = fdiv fast float %154, %156
  %159 = fdiv fast float %155, %157
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %165 = extractvalue %dx.types.CBufRet.f32 %164, 0
  %166 = extractvalue %dx.types.CBufRet.f32 %164, 1
  %167 = extractvalue %dx.types.CBufRet.f32 %164, 2
  %168 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %169 = extractvalue %dx.types.CBufRet.f32 %168, 0
  %170 = extractvalue %dx.types.CBufRet.f32 %168, 1
  %171 = extractvalue %dx.types.CBufRet.f32 %168, 2
  %172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %173 = extractvalue %dx.types.CBufRet.f32 %172, 0
  %174 = extractvalue %dx.types.CBufRet.f32 %172, 1
  %175 = extractvalue %dx.types.CBufRet.f32 %172, 2
  %176 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.f32 %176, 0
  %178 = extractvalue %dx.types.CBufRet.f32 %176, 1
  %179 = extractvalue %dx.types.CBufRet.f32 %176, 2
  %180 = fmul fast float %177, 2.097152e+06
  %181 = fmul fast float %178, 2.097152e+06
  %182 = fmul fast float %179, 2.097152e+06
  %183 = fadd fast float %180, %173
  %184 = fadd fast float %181, %174
  %185 = fadd fast float %182, %175
  %186 = fmul fast float %158, %48
  %187 = fmul fast float %159, %48
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %190 = bitcast float %189 to i32
  %191 = icmp ne i32 %190, 0
  %192 = select i1 %191, float %158, float %186
  %193 = select i1 %191, float %159, float %187
  %194 = fmul fast float %192, %161
  %195 = call float @dx.op.tertiary.f32(i32 46, float %193, float %165, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %48, float %169, float %195)  ; FMad(a,b,c)
  %197 = fadd fast float %183, %196
  %198 = fmul fast float %192, %162
  %199 = call float @dx.op.tertiary.f32(i32 46, float %193, float %166, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %48, float %170, float %199)  ; FMad(a,b,c)
  %201 = fadd fast float %184, %200
  %202 = fmul fast float %192, %163
  %203 = call float @dx.op.tertiary.f32(i32 46, float %193, float %167, float %202)  ; FMad(a,b,c)
  %204 = call float @dx.op.tertiary.f32(i32 46, float %48, float %171, float %203)  ; FMad(a,b,c)
  %205 = fadd fast float %185, %204
  %206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.f32 %206, 0
  %208 = fcmp fast ogt float %207, 0.000000e+00
  br i1 %208, label %209, label %305

; <label>:209                                     ; preds = %141
  %210 = fadd fast float %48, -5.000000e+02
  %211 = fmul fast float %210, 0x3F60624DE0000000
  %212 = call float @dx.op.unary.f32(i32 7, float %211)  ; Saturate(value)
  %213 = fmul fast float %212, 5.000000e-01
  %214 = fsub fast float 1.000000e+00, %213
  %215 = fmul fast float %214, %207
  %216 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.i32 %216, 1
  %218 = icmp slt i32 %217, 0
  br i1 %218, label %219, label %222

; <label>:219                                     ; preds = %209
  %220 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %221 = extractvalue %dx.types.CBufRet.i32 %220, 2
  br label %222

; <label>:222                                     ; preds = %219, %209
  %223 = phi i32 [ %221, %219 ], [ %217, %209 ]
  %224 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.i32 %224, 0
  %226 = extractvalue %dx.types.CBufRet.i32 %224, 1
  %227 = extractvalue %dx.types.CBufRet.i32 %224, 2
  %228 = and i32 %225, %33
  %229 = and i32 %226, %34
  %230 = and i32 %227, %223
  %231 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %232 = extractvalue %dx.types.CBufRet.i32 %231, 1
  %233 = mul i32 %230, %232
  %234 = add i32 %233, %229
  %235 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %236 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %235, i32 0, i32 %228, i32 %234, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %237 = extractvalue %dx.types.ResRet.f32 %236, 0
  %238 = extractvalue %dx.types.ResRet.f32 %236, 1
  %239 = fmul fast float %237, 2.000000e+00
  %240 = fmul fast float %238, 2.000000e+00
  %241 = fadd fast float %239, -1.000000e+00
  %242 = fadd fast float %240, -1.000000e+00
  %243 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %244 = extractvalue %dx.types.CBufRet.i32 %243, 0
  %245 = uitofp i32 %244 to float
  %246 = fmul fast float %245, %215
  %247 = fmul fast float %246, %241
  %248 = fmul fast float %246, %242
  %249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.f32 %249, 0
  %251 = extractvalue %dx.types.CBufRet.f32 %249, 1
  %252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %253 = extractvalue %dx.types.CBufRet.f32 %252, 0
  %254 = extractvalue %dx.types.CBufRet.f32 %252, 1
  %255 = fadd fast float %250, -1.000000e+00
  %256 = fadd fast float %255, %253
  %257 = fadd fast float %251, -1.000000e+00
  %258 = fadd fast float %257, %254
  %259 = fadd fast float %247, %142
  %260 = fadd fast float %248, %143
  %261 = call float @dx.op.binary.f32(i32 35, float %259, float %250)  ; FMax(a,b)
  %262 = call float @dx.op.binary.f32(i32 35, float %260, float %251)  ; FMax(a,b)
  %263 = call float @dx.op.binary.f32(i32 36, float %261, float %256)  ; FMin(a,b)
  %264 = call float @dx.op.binary.f32(i32 36, float %262, float %258)  ; FMin(a,b)
  %265 = fmul fast float %147, %263
  %266 = fmul fast float %148, %264
  %267 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %268 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %35, %dx.types.Handle %267, float %265, float %266, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %269 = extractvalue %dx.types.ResRet.f32 %268, 0
  %270 = fmul fast float %39, %269
  %271 = fadd fast float %270, %41
  %272 = fmul fast float %43, %269
  %273 = fsub fast float %272, %45
  %274 = fdiv fast float 1.000000e+00, %273
  %275 = fadd fast float %271, %274
  %276 = call float @dx.op.dot3.f32(i32 55, float %197, float %201, float %205, float %90, float %91, float %92)  ; Dot3(ax,ay,az,bx,by,bz)
  %277 = fsub fast float %265, %153
  %278 = fsub fast float %266, %152
  %279 = fdiv fast float %277, %156
  %280 = fdiv fast float %278, %157
  %281 = fmul fast float %279, %275
  %282 = fmul fast float %280, %275
  %283 = select i1 %191, float %279, float %281
  %284 = select i1 %191, float %280, float %282
  %285 = fmul fast float %283, %161
  %286 = call float @dx.op.tertiary.f32(i32 46, float %284, float %165, float %285)  ; FMad(a,b,c)
  %287 = call float @dx.op.tertiary.f32(i32 46, float %275, float %169, float %286)  ; FMad(a,b,c)
  %288 = fadd fast float %183, %287
  %289 = fmul fast float %283, %162
  %290 = call float @dx.op.tertiary.f32(i32 46, float %284, float %166, float %289)  ; FMad(a,b,c)
  %291 = call float @dx.op.tertiary.f32(i32 46, float %275, float %170, float %290)  ; FMad(a,b,c)
  %292 = fadd fast float %184, %291
  %293 = fmul fast float %283, %163
  %294 = call float @dx.op.tertiary.f32(i32 46, float %284, float %167, float %293)  ; FMad(a,b,c)
  %295 = call float @dx.op.tertiary.f32(i32 46, float %275, float %171, float %294)  ; FMad(a,b,c)
  %296 = fadd fast float %185, %295
  %297 = call float @dx.op.dot4.f32(i32 56, float %288, float %292, float %296, float -1.000000e+00, float %90, float %91, float %92, float %276)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %298 = call float @dx.op.unary.f32(i32 6, float %297)  ; FAbs(value)
  %299 = fdiv fast float %298, %48
  %300 = fmul fast float %299, %299
  %301 = fmul fast float %300, -1.000000e+06
  %302 = call float @dx.op.unary.f32(i32 21, float %301)  ; Exp(value)
  %303 = fcmp fast ogt float %302, 0x3F847AE140000000
  br i1 %303, label %304, label %305

; <label>:304                                     ; preds = %222
  br label %305

; <label>:305                                     ; preds = %304, %222, %141
  %306 = phi float [ %247, %304 ], [ 0.000000e+00, %222 ], [ 0.000000e+00, %141 ]
  %307 = phi float [ %248, %304 ], [ 0.000000e+00, %222 ], [ 0.000000e+00, %141 ]
  %308 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %309 = extractvalue %dx.types.CBufRet.f32 %308, 0
  %310 = extractvalue %dx.types.CBufRet.f32 %308, 1
  %311 = fadd fast float %309, -1.000000e+00
  %312 = fadd fast float %310, -1.000000e+00
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.i32 %316, 1
  %318 = icmp slt i32 %317, 0
  br i1 %318, label %319, label %322

; <label>:319                                     ; preds = %305
  %320 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %321 = extractvalue %dx.types.CBufRet.i32 %320, 1
  br label %322

; <label>:322                                     ; preds = %319, %305
  %323 = phi i32 [ %321, %319 ], [ %317, %305 ]
  %324 = uitofp i32 %323 to float
  %325 = fmul fast float %324, 1.250000e-01
  %326 = call float @dx.op.unary.f32(i32 22, float %325)  ; Frc(value)
  %327 = call i32 @dx.op.unary.i32(i32 30, i32 %323)  ; Bfrev(value)
  %328 = lshr i32 %327, 16
  %329 = uitofp i32 %328 to float
  %330 = fmul fast float %329, 0x3EF0000000000000
  %331 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.i32 %331, 0
  %333 = uitofp i32 %332 to float
  %334 = fmul fast float %333, %326
  %335 = fmul fast float %330, %333
  %336 = fptoui float %334 to i32
  %337 = fptoui float %335 to i32
  %338 = uitofp i32 %336 to float
  %339 = uitofp i32 %337 to float
  %340 = fadd fast float %306, %142
  %341 = fsub fast float %340, %314
  %342 = fsub fast float %341, %338
  %343 = fadd fast float %307, %143
  %344 = fsub fast float %343, %315
  %345 = fsub fast float %344, %339
  %346 = call float @dx.op.binary.f32(i32 35, float %342, float 0.000000e+00)  ; FMax(a,b)
  %347 = call float @dx.op.binary.f32(i32 35, float %345, float 0.000000e+00)  ; FMax(a,b)
  %348 = call float @dx.op.binary.f32(i32 36, float %346, float %311)  ; FMin(a,b)
  %349 = call float @dx.op.binary.f32(i32 36, float %347, float %312)  ; FMin(a,b)
  %350 = fptoui float %348 to i32
  %351 = fptoui float %349 to i32
  %352 = extractvalue %dx.types.CBufRet.i32 %331, 2
  %353 = extractvalue %dx.types.CBufRet.i32 %331, 3
  %354 = add i32 %352, -2
  %355 = add i32 %353, -2
  %356 = udiv i32 %350, %332
  %357 = udiv i32 %351, %332
  %358 = call i32 @dx.op.binary.i32(i32 40, i32 %356, i32 %354)  ; UMin(a,b)
  %359 = call i32 @dx.op.binary.i32(i32 40, i32 %357, i32 %355)  ; UMin(a,b)
  %360 = mul i32 %332, %358
  %361 = mul i32 %332, %359
  %362 = add i32 %350, 1
  %363 = sub i32 %362, %360
  %364 = add i32 %351, 1
  %365 = sub i32 %364, %361
  %366 = uitofp i32 %363 to float
  %367 = uitofp i32 %365 to float
  %368 = add i32 %332, 2
  %369 = uitofp i32 %368 to float
  %370 = fdiv fast float %366, %369
  %371 = fdiv fast float %367, %369
  %372 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %373 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %372, i32 0, i32 %358, i32 %359, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %374 = extractvalue %dx.types.ResRet.i32 %373, 0
  %375 = bitcast i32 %374 to float
  %376 = add i32 %358, 1
  %377 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %372, i32 0, i32 %376, i32 %359, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %378 = extractvalue %dx.types.ResRet.i32 %377, 0
  %379 = bitcast i32 %378 to float
  %380 = add i32 %359, 1
  %381 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %372, i32 0, i32 %358, i32 %380, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %382 = extractvalue %dx.types.ResRet.i32 %381, 0
  %383 = bitcast i32 %382 to float
  %384 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %372, i32 0, i32 %376, i32 %380, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %385 = extractvalue %dx.types.ResRet.i32 %384, 0
  %386 = bitcast i32 %385 to float
  %387 = fsub fast float 1.000000e+00, %371
  %388 = fsub fast float 1.000000e+00, %370
  %389 = fmul fast float %387, %388
  %390 = fmul fast float %387, %370
  %391 = fmul fast float %371, %388
  %392 = fmul fast float %371, %370
  %393 = call float @dx.op.dot3.f32(i32 55, float %197, float %201, float %205, float %90, float %91, float %92)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %318, label %394, label %397

; <label>:394                                     ; preds = %322
  %395 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %396 = extractvalue %dx.types.CBufRet.i32 %395, 1
  br label %397

; <label>:397                                     ; preds = %394, %322
  %398 = phi i32 [ %396, %394 ], [ %317, %322 ]
  %399 = uitofp i32 %398 to float
  %400 = fmul fast float %399, 1.250000e-01
  %401 = call float @dx.op.unary.f32(i32 22, float %400)  ; Frc(value)
  %402 = call i32 @dx.op.unary.i32(i32 30, i32 %398)  ; Bfrev(value)
  %403 = lshr i32 %402, 16
  %404 = uitofp i32 %403 to float
  %405 = fmul fast float %404, 0x3EF0000000000000
  %406 = fmul fast float %333, %401
  %407 = fmul fast float %405, %333
  %408 = fptoui float %406 to i32
  %409 = fptoui float %407 to i32
  %410 = add i32 %31, %360
  %411 = add i32 %410, %408
  %412 = add i32 %32, %361
  %413 = add i32 %412, %409
  %414 = uitofp i32 %411 to float
  %415 = uitofp i32 %413 to float
  %416 = fadd fast float %414, 5.000000e-01
  %417 = fadd fast float %415, 5.000000e-01
  %418 = fmul fast float %416, %147
  %419 = fmul fast float %417, %148
  %420 = fsub fast float %418, %153
  %421 = fsub fast float %419, %152
  %422 = fdiv fast float %420, %156
  %423 = fdiv fast float %421, %157
  %424 = fmul fast float %422, %375
  %425 = fmul fast float %423, %375
  %426 = select i1 %191, float %422, float %424
  %427 = select i1 %191, float %423, float %425
  %428 = fmul fast float %426, %161
  %429 = call float @dx.op.tertiary.f32(i32 46, float %427, float %165, float %428)  ; FMad(a,b,c)
  %430 = call float @dx.op.tertiary.f32(i32 46, float %375, float %169, float %429)  ; FMad(a,b,c)
  %431 = fadd fast float %183, %430
  %432 = fmul fast float %426, %162
  %433 = call float @dx.op.tertiary.f32(i32 46, float %427, float %166, float %432)  ; FMad(a,b,c)
  %434 = call float @dx.op.tertiary.f32(i32 46, float %375, float %170, float %433)  ; FMad(a,b,c)
  %435 = fadd fast float %184, %434
  %436 = fmul fast float %426, %163
  %437 = call float @dx.op.tertiary.f32(i32 46, float %427, float %167, float %436)  ; FMad(a,b,c)
  %438 = call float @dx.op.tertiary.f32(i32 46, float %375, float %171, float %437)  ; FMad(a,b,c)
  %439 = fadd fast float %185, %438
  %440 = mul i32 %332, %376
  br i1 %318, label %441, label %444

; <label>:441                                     ; preds = %397
  %442 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %443 = extractvalue %dx.types.CBufRet.i32 %442, 1
  br label %444

; <label>:444                                     ; preds = %441, %397
  %445 = phi i32 [ %443, %441 ], [ %317, %397 ]
  %446 = uitofp i32 %445 to float
  %447 = fmul fast float %446, 1.250000e-01
  %448 = call float @dx.op.unary.f32(i32 22, float %447)  ; Frc(value)
  %449 = call i32 @dx.op.unary.i32(i32 30, i32 %445)  ; Bfrev(value)
  %450 = lshr i32 %449, 16
  %451 = uitofp i32 %450 to float
  %452 = fmul fast float %451, 0x3EF0000000000000
  %453 = fmul fast float %333, %448
  %454 = fmul fast float %452, %333
  %455 = fptoui float %453 to i32
  %456 = fptoui float %454 to i32
  %457 = add i32 %31, %440
  %458 = add i32 %457, %455
  %459 = add i32 %412, %456
  %460 = uitofp i32 %458 to float
  %461 = uitofp i32 %459 to float
  %462 = fadd fast float %460, 5.000000e-01
  %463 = fadd fast float %461, 5.000000e-01
  %464 = fmul fast float %462, %147
  %465 = fmul fast float %463, %148
  %466 = fsub fast float %464, %153
  %467 = fsub fast float %465, %152
  %468 = fdiv fast float %466, %156
  %469 = fdiv fast float %467, %157
  %470 = fmul fast float %468, %379
  %471 = fmul fast float %469, %379
  %472 = select i1 %191, float %468, float %470
  %473 = select i1 %191, float %469, float %471
  %474 = fmul fast float %472, %161
  %475 = call float @dx.op.tertiary.f32(i32 46, float %473, float %165, float %474)  ; FMad(a,b,c)
  %476 = call float @dx.op.tertiary.f32(i32 46, float %379, float %169, float %475)  ; FMad(a,b,c)
  %477 = fadd fast float %183, %476
  %478 = fmul fast float %472, %162
  %479 = call float @dx.op.tertiary.f32(i32 46, float %473, float %166, float %478)  ; FMad(a,b,c)
  %480 = call float @dx.op.tertiary.f32(i32 46, float %379, float %170, float %479)  ; FMad(a,b,c)
  %481 = fadd fast float %184, %480
  %482 = fmul fast float %472, %163
  %483 = call float @dx.op.tertiary.f32(i32 46, float %473, float %167, float %482)  ; FMad(a,b,c)
  %484 = call float @dx.op.tertiary.f32(i32 46, float %379, float %171, float %483)  ; FMad(a,b,c)
  %485 = fadd fast float %185, %484
  %486 = mul i32 %332, %380
  br i1 %318, label %487, label %490

; <label>:487                                     ; preds = %444
  %488 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %489 = extractvalue %dx.types.CBufRet.i32 %488, 1
  br label %490

; <label>:490                                     ; preds = %487, %444
  %491 = phi i32 [ %489, %487 ], [ %317, %444 ]
  %492 = uitofp i32 %491 to float
  %493 = fmul fast float %492, 1.250000e-01
  %494 = call float @dx.op.unary.f32(i32 22, float %493)  ; Frc(value)
  %495 = call i32 @dx.op.unary.i32(i32 30, i32 %491)  ; Bfrev(value)
  %496 = lshr i32 %495, 16
  %497 = uitofp i32 %496 to float
  %498 = fmul fast float %497, 0x3EF0000000000000
  %499 = fmul fast float %333, %494
  %500 = fmul fast float %498, %333
  %501 = fptoui float %499 to i32
  %502 = fptoui float %500 to i32
  %503 = add i32 %410, %501
  %504 = add i32 %32, %486
  %505 = add i32 %504, %502
  %506 = uitofp i32 %503 to float
  %507 = uitofp i32 %505 to float
  %508 = fadd fast float %506, 5.000000e-01
  %509 = fadd fast float %507, 5.000000e-01
  %510 = fmul fast float %508, %147
  %511 = fmul fast float %509, %148
  %512 = fsub fast float %510, %153
  %513 = fsub fast float %511, %152
  %514 = fdiv fast float %512, %156
  %515 = fdiv fast float %513, %157
  %516 = fmul fast float %514, %383
  %517 = fmul fast float %515, %383
  %518 = select i1 %191, float %514, float %516
  %519 = select i1 %191, float %515, float %517
  %520 = fmul fast float %518, %161
  %521 = call float @dx.op.tertiary.f32(i32 46, float %519, float %165, float %520)  ; FMad(a,b,c)
  %522 = call float @dx.op.tertiary.f32(i32 46, float %383, float %169, float %521)  ; FMad(a,b,c)
  %523 = fadd fast float %183, %522
  %524 = fmul fast float %518, %162
  %525 = call float @dx.op.tertiary.f32(i32 46, float %519, float %166, float %524)  ; FMad(a,b,c)
  %526 = call float @dx.op.tertiary.f32(i32 46, float %383, float %170, float %525)  ; FMad(a,b,c)
  %527 = fadd fast float %184, %526
  %528 = fmul fast float %518, %163
  %529 = call float @dx.op.tertiary.f32(i32 46, float %519, float %167, float %528)  ; FMad(a,b,c)
  %530 = call float @dx.op.tertiary.f32(i32 46, float %383, float %171, float %529)  ; FMad(a,b,c)
  %531 = fadd fast float %185, %530
  br i1 %318, label %532, label %535

; <label>:532                                     ; preds = %490
  %533 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %534 = extractvalue %dx.types.CBufRet.i32 %533, 1
  br label %535

; <label>:535                                     ; preds = %532, %490
  %536 = phi i32 [ %534, %532 ], [ %317, %490 ]
  %537 = uitofp i32 %536 to float
  %538 = fmul fast float %537, 1.250000e-01
  %539 = call float @dx.op.unary.f32(i32 22, float %538)  ; Frc(value)
  %540 = call i32 @dx.op.unary.i32(i32 30, i32 %536)  ; Bfrev(value)
  %541 = lshr i32 %540, 16
  %542 = uitofp i32 %541 to float
  %543 = fmul fast float %542, 0x3EF0000000000000
  %544 = fmul fast float %333, %539
  %545 = fmul fast float %543, %333
  %546 = fptoui float %544 to i32
  %547 = fptoui float %545 to i32
  %548 = add i32 %457, %546
  %549 = add i32 %504, %547
  %550 = uitofp i32 %548 to float
  %551 = uitofp i32 %549 to float
  %552 = fadd fast float %550, 5.000000e-01
  %553 = fadd fast float %551, 5.000000e-01
  %554 = fmul fast float %552, %147
  %555 = fmul fast float %553, %148
  %556 = fsub fast float %554, %153
  %557 = fsub fast float %555, %152
  %558 = fdiv fast float %556, %156
  %559 = fdiv fast float %557, %157
  %560 = fmul fast float %558, %386
  %561 = fmul fast float %559, %386
  %562 = select i1 %191, float %558, float %560
  %563 = select i1 %191, float %559, float %561
  %564 = fmul fast float %562, %161
  %565 = call float @dx.op.tertiary.f32(i32 46, float %563, float %165, float %564)  ; FMad(a,b,c)
  %566 = call float @dx.op.tertiary.f32(i32 46, float %386, float %169, float %565)  ; FMad(a,b,c)
  %567 = fadd fast float %183, %566
  %568 = fmul fast float %562, %162
  %569 = call float @dx.op.tertiary.f32(i32 46, float %563, float %166, float %568)  ; FMad(a,b,c)
  %570 = call float @dx.op.tertiary.f32(i32 46, float %386, float %170, float %569)  ; FMad(a,b,c)
  %571 = fadd fast float %184, %570
  %572 = fmul fast float %562, %163
  %573 = call float @dx.op.tertiary.f32(i32 46, float %563, float %167, float %572)  ; FMad(a,b,c)
  %574 = call float @dx.op.tertiary.f32(i32 46, float %386, float %171, float %573)  ; FMad(a,b,c)
  %575 = fadd fast float %185, %574
  %576 = call float @dx.op.dot4.f32(i32 56, float %431, float %435, float %439, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %577 = call float @dx.op.unary.f32(i32 6, float %576)  ; FAbs(value)
  %578 = call float @dx.op.dot4.f32(i32 56, float %477, float %481, float %485, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %579 = call float @dx.op.unary.f32(i32 6, float %578)  ; FAbs(value)
  %580 = call float @dx.op.dot4.f32(i32 56, float %523, float %527, float %531, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %581 = call float @dx.op.unary.f32(i32 6, float %580)  ; FAbs(value)
  %582 = call float @dx.op.dot4.f32(i32 56, float %567, float %571, float %575, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %583 = call float @dx.op.unary.f32(i32 6, float %582)  ; FAbs(value)
  %584 = fdiv fast float %577, %48
  %585 = fdiv fast float %579, %48
  %586 = fdiv fast float %581, %48
  %587 = fdiv fast float %583, %48
  %588 = fmul fast float %584, %584
  %589 = fmul fast float %588, -1.000000e+04
  %590 = fmul fast float %585, %585
  %591 = fmul fast float %590, -1.000000e+04
  %592 = fmul fast float %586, %586
  %593 = fmul fast float %592, -1.000000e+04
  %594 = fmul fast float %587, %587
  %595 = fmul fast float %594, -1.000000e+04
  %596 = call float @dx.op.unary.f32(i32 21, float %589)  ; Exp(value)
  %597 = call float @dx.op.unary.f32(i32 21, float %591)  ; Exp(value)
  %598 = call float @dx.op.unary.f32(i32 21, float %593)  ; Exp(value)
  %599 = call float @dx.op.unary.f32(i32 21, float %595)  ; Exp(value)
  %600 = fcmp fast ogt float %375, 0.000000e+00
  %601 = fcmp fast ogt float %379, 0.000000e+00
  %602 = fcmp fast ogt float %383, 0.000000e+00
  %603 = fcmp fast ogt float %386, 0.000000e+00
  %604 = select i1 %600, float %596, float 0.000000e+00
  %605 = select i1 %601, float %597, float 0.000000e+00
  %606 = select i1 %602, float %598, float 0.000000e+00
  %607 = select i1 %603, float %599, float 0.000000e+00
  %608 = fmul fast float %389, %604
  %609 = fmul fast float %390, %605
  %610 = fmul fast float %391, %606
  %611 = fmul fast float %392, %607
  %612 = fcmp fast ugt float %608, 0x3F847AE140000000
  br i1 %612, label %787, label %613

; <label>:613                                     ; preds = %535
  %614 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %615 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %614, i32 0, i32 %358, i32 %359, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %616 = extractvalue %dx.types.ResRet.i32 %615, 0
  %617 = icmp eq i32 %616, 0
  br i1 %617, label %787, label %618

; <label>:618                                     ; preds = %613
  br label %619

; <label>:619                                     ; preds = %678, %618
  %620 = phi i32 [ %781, %678 ], [ %358, %618 ]
  %621 = phi i32 [ %782, %678 ], [ %359, %618 ]
  %622 = phi float [ %783, %678 ], [ %608, %618 ]
  %623 = phi i32 [ %784, %678 ], [ 0, %618 ]
  %624 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %625 = extractvalue %dx.types.CBufRet.i32 %624, 0
  %626 = urem i32 %623, %625
  %627 = udiv i32 %623, %625
  %628 = extractvalue %dx.types.CBufRet.i32 %624, 2
  %629 = extractvalue %dx.types.CBufRet.i32 %624, 3
  %630 = mul i32 %628, %626
  %631 = mul i32 %629, %627
  %632 = add i32 %630, %358
  %633 = add i32 %631, %359
  %634 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %635 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %634, i32 0, i32 %632, i32 %633, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %636 = extractvalue %dx.types.ResRet.i32 %635, 0
  %637 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %638 = extractvalue %dx.types.CBufRet.i32 %637, 3
  %639 = add i32 %638, %636
  %640 = urem i32 %639, %628
  %641 = udiv i32 %639, %628
  %642 = mul i32 %625, %640
  %643 = mul i32 %625, %641
  %644 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %645 = extractvalue %dx.types.CBufRet.i32 %644, 1
  %646 = icmp slt i32 %645, 0
  br i1 %646, label %647, label %650

; <label>:647                                     ; preds = %619
  %648 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %649 = extractvalue %dx.types.CBufRet.i32 %648, 1
  br label %650

; <label>:650                                     ; preds = %647, %619
  %651 = phi i32 [ %649, %647 ], [ %645, %619 ]
  %652 = uitofp i32 %651 to float
  %653 = fmul fast float %652, 1.250000e-01
  %654 = call float @dx.op.unary.f32(i32 22, float %653)  ; Frc(value)
  %655 = call i32 @dx.op.unary.i32(i32 30, i32 %651)  ; Bfrev(value)
  %656 = lshr i32 %655, 16
  %657 = uitofp i32 %656 to float
  %658 = fmul fast float %657, 0x3EF0000000000000
  %659 = uitofp i32 %625 to float
  %660 = fmul fast float %659, %654
  %661 = fmul fast float %658, %659
  %662 = fptoui float %660 to i32
  %663 = fptoui float %661 to i32
  %664 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %665 = extractvalue %dx.types.CBufRet.i32 %664, 0
  %666 = extractvalue %dx.types.CBufRet.i32 %664, 1
  %667 = add i32 %665, %642
  %668 = add i32 %667, %662
  %669 = add i32 %666, %643
  %670 = add i32 %669, %663
  %671 = icmp ult i32 %639, %638
  br i1 %671, label %678, label %672

; <label>:672                                     ; preds = %650
  %673 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %674 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %673, i32 %636, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %675 = extractvalue %dx.types.ResRet.i32 %674, 0
  %676 = and i32 %675, 65535
  %677 = lshr i32 %675, 16
  br label %678

; <label>:678                                     ; preds = %672, %650
  %679 = phi i32 [ %676, %672 ], [ %668, %650 ]
  %680 = phi i32 [ %677, %672 ], [ %670, %650 ]
  %681 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %682 = extractvalue %dx.types.CBufRet.i32 %681, 0
  %683 = urem i32 %639, %682
  %684 = udiv i32 %639, %682
  %685 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %686 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %685, i32 0, i32 %683, i32 %684, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %687 = extractvalue %dx.types.ResRet.i32 %686, 0
  %688 = bitcast i32 %687 to float
  %689 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %690 = extractvalue %dx.types.CBufRet.f32 %689, 0
  %691 = extractvalue %dx.types.CBufRet.f32 %689, 1
  %692 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %693 = extractvalue %dx.types.CBufRet.f32 %692, 0
  %694 = extractvalue %dx.types.CBufRet.f32 %692, 1
  %695 = fadd fast float %690, -1.000000e+00
  %696 = fadd fast float %695, %693
  %697 = fadd fast float %691, -1.000000e+00
  %698 = fadd fast float %697, %694
  %699 = uitofp i32 %679 to float
  %700 = uitofp i32 %680 to float
  %701 = call float @dx.op.binary.f32(i32 36, float %699, float %696)  ; FMin(a,b)
  %702 = call float @dx.op.binary.f32(i32 36, float %700, float %698)  ; FMin(a,b)
  %703 = fadd fast float %701, 5.000000e-01
  %704 = fadd fast float %702, 5.000000e-01
  %705 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %706 = extractvalue %dx.types.CBufRet.f32 %705, 2
  %707 = extractvalue %dx.types.CBufRet.f32 %705, 3
  %708 = fmul fast float %706, %703
  %709 = fmul fast float %707, %704
  %710 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %711 = extractvalue %dx.types.CBufRet.f32 %710, 2
  %712 = extractvalue %dx.types.CBufRet.f32 %710, 3
  %713 = fsub fast float %708, %712
  %714 = fsub fast float %709, %711
  %715 = extractvalue %dx.types.CBufRet.f32 %710, 0
  %716 = extractvalue %dx.types.CBufRet.f32 %710, 1
  %717 = fdiv fast float %713, %715
  %718 = fdiv fast float %714, %716
  %719 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %720 = extractvalue %dx.types.CBufRet.f32 %719, 0
  %721 = extractvalue %dx.types.CBufRet.f32 %719, 1
  %722 = extractvalue %dx.types.CBufRet.f32 %719, 2
  %723 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %724 = extractvalue %dx.types.CBufRet.f32 %723, 0
  %725 = extractvalue %dx.types.CBufRet.f32 %723, 1
  %726 = extractvalue %dx.types.CBufRet.f32 %723, 2
  %727 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %728 = extractvalue %dx.types.CBufRet.f32 %727, 0
  %729 = extractvalue %dx.types.CBufRet.f32 %727, 1
  %730 = extractvalue %dx.types.CBufRet.f32 %727, 2
  %731 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %732 = extractvalue %dx.types.CBufRet.f32 %731, 0
  %733 = extractvalue %dx.types.CBufRet.f32 %731, 1
  %734 = extractvalue %dx.types.CBufRet.f32 %731, 2
  %735 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %736 = extractvalue %dx.types.CBufRet.f32 %735, 0
  %737 = extractvalue %dx.types.CBufRet.f32 %735, 1
  %738 = extractvalue %dx.types.CBufRet.f32 %735, 2
  %739 = fmul fast float %736, 2.097152e+06
  %740 = fmul fast float %737, 2.097152e+06
  %741 = fmul fast float %738, 2.097152e+06
  %742 = fadd fast float %739, %732
  %743 = fadd fast float %740, %733
  %744 = fadd fast float %741, %734
  %745 = fmul fast float %717, %688
  %746 = fmul fast float %718, %688
  %747 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %748 = extractvalue %dx.types.CBufRet.f32 %747, 3
  %749 = bitcast float %748 to i32
  %750 = icmp ne i32 %749, 0
  %751 = select i1 %750, float %717, float %745
  %752 = select i1 %750, float %718, float %746
  %753 = fmul fast float %751, %720
  %754 = call float @dx.op.tertiary.f32(i32 46, float %752, float %724, float %753)  ; FMad(a,b,c)
  %755 = call float @dx.op.tertiary.f32(i32 46, float %688, float %728, float %754)  ; FMad(a,b,c)
  %756 = fadd fast float %742, %755
  %757 = fmul fast float %751, %721
  %758 = call float @dx.op.tertiary.f32(i32 46, float %752, float %725, float %757)  ; FMad(a,b,c)
  %759 = call float @dx.op.tertiary.f32(i32 46, float %688, float %729, float %758)  ; FMad(a,b,c)
  %760 = fadd fast float %743, %759
  %761 = fmul fast float %751, %722
  %762 = call float @dx.op.tertiary.f32(i32 46, float %752, float %726, float %761)  ; FMad(a,b,c)
  %763 = call float @dx.op.tertiary.f32(i32 46, float %688, float %730, float %762)  ; FMad(a,b,c)
  %764 = fadd fast float %744, %763
  %765 = call float @dx.op.dot4.f32(i32 56, float %756, float %760, float %764, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %766 = call float @dx.op.unary.f32(i32 6, float %765)  ; FAbs(value)
  %767 = fdiv fast float %766, %48
  %768 = fmul fast float %767, %767
  %769 = fmul fast float %768, -1.000000e+04
  %770 = call float @dx.op.unary.f32(i32 21, float %769)  ; Exp(value)
  %771 = fsub fast float %699, %142
  %772 = fsub fast float %700, %143
  %773 = call float @dx.op.unary.f32(i32 6, float %771)  ; FAbs(value)
  %774 = call float @dx.op.unary.f32(i32 6, float %772)  ; FAbs(value)
  %775 = call float @dx.op.binary.f32(i32 36, float %773, float %774)  ; FMin(a,b)
  %776 = fdiv fast float %775, %659
  %777 = call float @dx.op.unary.f32(i32 7, float %776)  ; Saturate(value)
  %778 = fsub fast float 1.000000e+00, %777
  %779 = fmul fast float %778, %770
  %780 = fcmp fast ogt float %779, %622
  %781 = select i1 %780, i32 %683, i32 %620
  %782 = select i1 %780, i32 %684, i32 %621
  %783 = select i1 %780, float %779, float %622
  %784 = add nuw i32 %623, 1
  %785 = icmp eq i32 %784, %616
  br i1 %785, label %786, label %619

; <label>:786                                     ; preds = %678
  br label %787

; <label>:787                                     ; preds = %786, %613, %535
  %788 = phi i32 [ %358, %613 ], [ %358, %535 ], [ %781, %786 ]
  %789 = phi i32 [ %359, %613 ], [ %359, %535 ], [ %782, %786 ]
  %790 = phi float [ %608, %613 ], [ %608, %535 ], [ %783, %786 ]
  %791 = fcmp fast ugt float %609, 0x3F847AE140000000
  br i1 %791, label %966, label %792

; <label>:792                                     ; preds = %787
  %793 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %794 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %793, i32 0, i32 %376, i32 %359, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %795 = extractvalue %dx.types.ResRet.i32 %794, 0
  %796 = icmp eq i32 %795, 0
  br i1 %796, label %966, label %797

; <label>:797                                     ; preds = %792
  br label %798

; <label>:798                                     ; preds = %857, %797
  %799 = phi i32 [ %960, %857 ], [ %376, %797 ]
  %800 = phi i32 [ %961, %857 ], [ %359, %797 ]
  %801 = phi float [ %962, %857 ], [ %609, %797 ]
  %802 = phi i32 [ %963, %857 ], [ 0, %797 ]
  %803 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %804 = extractvalue %dx.types.CBufRet.i32 %803, 0
  %805 = urem i32 %802, %804
  %806 = udiv i32 %802, %804
  %807 = extractvalue %dx.types.CBufRet.i32 %803, 2
  %808 = extractvalue %dx.types.CBufRet.i32 %803, 3
  %809 = mul i32 %807, %805
  %810 = mul i32 %808, %806
  %811 = add i32 %809, %376
  %812 = add i32 %810, %359
  %813 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %814 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %813, i32 0, i32 %811, i32 %812, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %815 = extractvalue %dx.types.ResRet.i32 %814, 0
  %816 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %817 = extractvalue %dx.types.CBufRet.i32 %816, 3
  %818 = add i32 %817, %815
  %819 = urem i32 %818, %807
  %820 = udiv i32 %818, %807
  %821 = mul i32 %804, %819
  %822 = mul i32 %804, %820
  %823 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %824 = extractvalue %dx.types.CBufRet.i32 %823, 1
  %825 = icmp slt i32 %824, 0
  br i1 %825, label %826, label %829

; <label>:826                                     ; preds = %798
  %827 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %828 = extractvalue %dx.types.CBufRet.i32 %827, 1
  br label %829

; <label>:829                                     ; preds = %826, %798
  %830 = phi i32 [ %828, %826 ], [ %824, %798 ]
  %831 = uitofp i32 %830 to float
  %832 = fmul fast float %831, 1.250000e-01
  %833 = call float @dx.op.unary.f32(i32 22, float %832)  ; Frc(value)
  %834 = call i32 @dx.op.unary.i32(i32 30, i32 %830)  ; Bfrev(value)
  %835 = lshr i32 %834, 16
  %836 = uitofp i32 %835 to float
  %837 = fmul fast float %836, 0x3EF0000000000000
  %838 = uitofp i32 %804 to float
  %839 = fmul fast float %838, %833
  %840 = fmul fast float %837, %838
  %841 = fptoui float %839 to i32
  %842 = fptoui float %840 to i32
  %843 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %844 = extractvalue %dx.types.CBufRet.i32 %843, 0
  %845 = extractvalue %dx.types.CBufRet.i32 %843, 1
  %846 = add i32 %844, %821
  %847 = add i32 %846, %841
  %848 = add i32 %845, %822
  %849 = add i32 %848, %842
  %850 = icmp ult i32 %818, %817
  br i1 %850, label %857, label %851

; <label>:851                                     ; preds = %829
  %852 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %853 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %852, i32 %815, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %854 = extractvalue %dx.types.ResRet.i32 %853, 0
  %855 = and i32 %854, 65535
  %856 = lshr i32 %854, 16
  br label %857

; <label>:857                                     ; preds = %851, %829
  %858 = phi i32 [ %855, %851 ], [ %847, %829 ]
  %859 = phi i32 [ %856, %851 ], [ %849, %829 ]
  %860 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %861 = extractvalue %dx.types.CBufRet.i32 %860, 0
  %862 = urem i32 %818, %861
  %863 = udiv i32 %818, %861
  %864 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %865 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %864, i32 0, i32 %862, i32 %863, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %866 = extractvalue %dx.types.ResRet.i32 %865, 0
  %867 = bitcast i32 %866 to float
  %868 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %869 = extractvalue %dx.types.CBufRet.f32 %868, 0
  %870 = extractvalue %dx.types.CBufRet.f32 %868, 1
  %871 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %872 = extractvalue %dx.types.CBufRet.f32 %871, 0
  %873 = extractvalue %dx.types.CBufRet.f32 %871, 1
  %874 = fadd fast float %869, -1.000000e+00
  %875 = fadd fast float %874, %872
  %876 = fadd fast float %870, -1.000000e+00
  %877 = fadd fast float %876, %873
  %878 = uitofp i32 %858 to float
  %879 = uitofp i32 %859 to float
  %880 = call float @dx.op.binary.f32(i32 36, float %878, float %875)  ; FMin(a,b)
  %881 = call float @dx.op.binary.f32(i32 36, float %879, float %877)  ; FMin(a,b)
  %882 = fadd fast float %880, 5.000000e-01
  %883 = fadd fast float %881, 5.000000e-01
  %884 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %885 = extractvalue %dx.types.CBufRet.f32 %884, 2
  %886 = extractvalue %dx.types.CBufRet.f32 %884, 3
  %887 = fmul fast float %885, %882
  %888 = fmul fast float %886, %883
  %889 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %890 = extractvalue %dx.types.CBufRet.f32 %889, 2
  %891 = extractvalue %dx.types.CBufRet.f32 %889, 3
  %892 = fsub fast float %887, %891
  %893 = fsub fast float %888, %890
  %894 = extractvalue %dx.types.CBufRet.f32 %889, 0
  %895 = extractvalue %dx.types.CBufRet.f32 %889, 1
  %896 = fdiv fast float %892, %894
  %897 = fdiv fast float %893, %895
  %898 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %899 = extractvalue %dx.types.CBufRet.f32 %898, 0
  %900 = extractvalue %dx.types.CBufRet.f32 %898, 1
  %901 = extractvalue %dx.types.CBufRet.f32 %898, 2
  %902 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %903 = extractvalue %dx.types.CBufRet.f32 %902, 0
  %904 = extractvalue %dx.types.CBufRet.f32 %902, 1
  %905 = extractvalue %dx.types.CBufRet.f32 %902, 2
  %906 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %907 = extractvalue %dx.types.CBufRet.f32 %906, 0
  %908 = extractvalue %dx.types.CBufRet.f32 %906, 1
  %909 = extractvalue %dx.types.CBufRet.f32 %906, 2
  %910 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %911 = extractvalue %dx.types.CBufRet.f32 %910, 0
  %912 = extractvalue %dx.types.CBufRet.f32 %910, 1
  %913 = extractvalue %dx.types.CBufRet.f32 %910, 2
  %914 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %915 = extractvalue %dx.types.CBufRet.f32 %914, 0
  %916 = extractvalue %dx.types.CBufRet.f32 %914, 1
  %917 = extractvalue %dx.types.CBufRet.f32 %914, 2
  %918 = fmul fast float %915, 2.097152e+06
  %919 = fmul fast float %916, 2.097152e+06
  %920 = fmul fast float %917, 2.097152e+06
  %921 = fadd fast float %918, %911
  %922 = fadd fast float %919, %912
  %923 = fadd fast float %920, %913
  %924 = fmul fast float %896, %867
  %925 = fmul fast float %897, %867
  %926 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %927 = extractvalue %dx.types.CBufRet.f32 %926, 3
  %928 = bitcast float %927 to i32
  %929 = icmp ne i32 %928, 0
  %930 = select i1 %929, float %896, float %924
  %931 = select i1 %929, float %897, float %925
  %932 = fmul fast float %930, %899
  %933 = call float @dx.op.tertiary.f32(i32 46, float %931, float %903, float %932)  ; FMad(a,b,c)
  %934 = call float @dx.op.tertiary.f32(i32 46, float %867, float %907, float %933)  ; FMad(a,b,c)
  %935 = fadd fast float %921, %934
  %936 = fmul fast float %930, %900
  %937 = call float @dx.op.tertiary.f32(i32 46, float %931, float %904, float %936)  ; FMad(a,b,c)
  %938 = call float @dx.op.tertiary.f32(i32 46, float %867, float %908, float %937)  ; FMad(a,b,c)
  %939 = fadd fast float %922, %938
  %940 = fmul fast float %930, %901
  %941 = call float @dx.op.tertiary.f32(i32 46, float %931, float %905, float %940)  ; FMad(a,b,c)
  %942 = call float @dx.op.tertiary.f32(i32 46, float %867, float %909, float %941)  ; FMad(a,b,c)
  %943 = fadd fast float %923, %942
  %944 = call float @dx.op.dot4.f32(i32 56, float %935, float %939, float %943, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %945 = call float @dx.op.unary.f32(i32 6, float %944)  ; FAbs(value)
  %946 = fdiv fast float %945, %48
  %947 = fmul fast float %946, %946
  %948 = fmul fast float %947, -1.000000e+04
  %949 = call float @dx.op.unary.f32(i32 21, float %948)  ; Exp(value)
  %950 = fsub fast float %878, %142
  %951 = fsub fast float %879, %143
  %952 = call float @dx.op.unary.f32(i32 6, float %950)  ; FAbs(value)
  %953 = call float @dx.op.unary.f32(i32 6, float %951)  ; FAbs(value)
  %954 = call float @dx.op.binary.f32(i32 36, float %952, float %953)  ; FMin(a,b)
  %955 = fdiv fast float %954, %838
  %956 = call float @dx.op.unary.f32(i32 7, float %955)  ; Saturate(value)
  %957 = fsub fast float 1.000000e+00, %956
  %958 = fmul fast float %957, %949
  %959 = fcmp fast ogt float %958, %801
  %960 = select i1 %959, i32 %862, i32 %799
  %961 = select i1 %959, i32 %863, i32 %800
  %962 = select i1 %959, float %958, float %801
  %963 = add nuw i32 %802, 1
  %964 = icmp eq i32 %963, %795
  br i1 %964, label %965, label %798

; <label>:965                                     ; preds = %857
  br label %966

; <label>:966                                     ; preds = %965, %792, %787
  %967 = phi i32 [ %376, %792 ], [ %376, %787 ], [ %960, %965 ]
  %968 = phi i32 [ %359, %792 ], [ %359, %787 ], [ %961, %965 ]
  %969 = phi float [ %609, %792 ], [ %609, %787 ], [ %962, %965 ]
  %970 = fcmp fast ugt float %610, 0x3F847AE140000000
  br i1 %970, label %1145, label %971

; <label>:971                                     ; preds = %966
  %972 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %973 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %972, i32 0, i32 %358, i32 %380, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %974 = extractvalue %dx.types.ResRet.i32 %973, 0
  %975 = icmp eq i32 %974, 0
  br i1 %975, label %1145, label %976

; <label>:976                                     ; preds = %971
  br label %977

; <label>:977                                     ; preds = %1036, %976
  %978 = phi i32 [ %1139, %1036 ], [ %358, %976 ]
  %979 = phi i32 [ %1140, %1036 ], [ %380, %976 ]
  %980 = phi float [ %1141, %1036 ], [ %610, %976 ]
  %981 = phi i32 [ %1142, %1036 ], [ 0, %976 ]
  %982 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %983 = extractvalue %dx.types.CBufRet.i32 %982, 0
  %984 = urem i32 %981, %983
  %985 = udiv i32 %981, %983
  %986 = extractvalue %dx.types.CBufRet.i32 %982, 2
  %987 = extractvalue %dx.types.CBufRet.i32 %982, 3
  %988 = mul i32 %986, %984
  %989 = mul i32 %987, %985
  %990 = add i32 %988, %358
  %991 = add i32 %989, %380
  %992 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %993 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %992, i32 0, i32 %990, i32 %991, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %994 = extractvalue %dx.types.ResRet.i32 %993, 0
  %995 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %996 = extractvalue %dx.types.CBufRet.i32 %995, 3
  %997 = add i32 %996, %994
  %998 = urem i32 %997, %986
  %999 = udiv i32 %997, %986
  %1000 = mul i32 %983, %998
  %1001 = mul i32 %983, %999
  %1002 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1003 = extractvalue %dx.types.CBufRet.i32 %1002, 1
  %1004 = icmp slt i32 %1003, 0
  br i1 %1004, label %1005, label %1008

; <label>:1005                                    ; preds = %977
  %1006 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1007 = extractvalue %dx.types.CBufRet.i32 %1006, 1
  br label %1008

; <label>:1008                                    ; preds = %1005, %977
  %1009 = phi i32 [ %1007, %1005 ], [ %1003, %977 ]
  %1010 = uitofp i32 %1009 to float
  %1011 = fmul fast float %1010, 1.250000e-01
  %1012 = call float @dx.op.unary.f32(i32 22, float %1011)  ; Frc(value)
  %1013 = call i32 @dx.op.unary.i32(i32 30, i32 %1009)  ; Bfrev(value)
  %1014 = lshr i32 %1013, 16
  %1015 = uitofp i32 %1014 to float
  %1016 = fmul fast float %1015, 0x3EF0000000000000
  %1017 = uitofp i32 %983 to float
  %1018 = fmul fast float %1017, %1012
  %1019 = fmul fast float %1016, %1017
  %1020 = fptoui float %1018 to i32
  %1021 = fptoui float %1019 to i32
  %1022 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %1023 = extractvalue %dx.types.CBufRet.i32 %1022, 0
  %1024 = extractvalue %dx.types.CBufRet.i32 %1022, 1
  %1025 = add i32 %1023, %1000
  %1026 = add i32 %1025, %1020
  %1027 = add i32 %1024, %1001
  %1028 = add i32 %1027, %1021
  %1029 = icmp ult i32 %997, %996
  br i1 %1029, label %1036, label %1030

; <label>:1030                                    ; preds = %1008
  %1031 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1032 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1031, i32 %994, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1033 = extractvalue %dx.types.ResRet.i32 %1032, 0
  %1034 = and i32 %1033, 65535
  %1035 = lshr i32 %1033, 16
  br label %1036

; <label>:1036                                    ; preds = %1030, %1008
  %1037 = phi i32 [ %1034, %1030 ], [ %1026, %1008 ]
  %1038 = phi i32 [ %1035, %1030 ], [ %1028, %1008 ]
  %1039 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1040 = extractvalue %dx.types.CBufRet.i32 %1039, 0
  %1041 = urem i32 %997, %1040
  %1042 = udiv i32 %997, %1040
  %1043 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1044 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1043, i32 0, i32 %1041, i32 %1042, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1045 = extractvalue %dx.types.ResRet.i32 %1044, 0
  %1046 = bitcast i32 %1045 to float
  %1047 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %1048 = extractvalue %dx.types.CBufRet.f32 %1047, 0
  %1049 = extractvalue %dx.types.CBufRet.f32 %1047, 1
  %1050 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %1051 = extractvalue %dx.types.CBufRet.f32 %1050, 0
  %1052 = extractvalue %dx.types.CBufRet.f32 %1050, 1
  %1053 = fadd fast float %1048, -1.000000e+00
  %1054 = fadd fast float %1053, %1051
  %1055 = fadd fast float %1049, -1.000000e+00
  %1056 = fadd fast float %1055, %1052
  %1057 = uitofp i32 %1037 to float
  %1058 = uitofp i32 %1038 to float
  %1059 = call float @dx.op.binary.f32(i32 36, float %1057, float %1054)  ; FMin(a,b)
  %1060 = call float @dx.op.binary.f32(i32 36, float %1058, float %1056)  ; FMin(a,b)
  %1061 = fadd fast float %1059, 5.000000e-01
  %1062 = fadd fast float %1060, 5.000000e-01
  %1063 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1064 = extractvalue %dx.types.CBufRet.f32 %1063, 2
  %1065 = extractvalue %dx.types.CBufRet.f32 %1063, 3
  %1066 = fmul fast float %1064, %1061
  %1067 = fmul fast float %1065, %1062
  %1068 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1069 = extractvalue %dx.types.CBufRet.f32 %1068, 2
  %1070 = extractvalue %dx.types.CBufRet.f32 %1068, 3
  %1071 = fsub fast float %1066, %1070
  %1072 = fsub fast float %1067, %1069
  %1073 = extractvalue %dx.types.CBufRet.f32 %1068, 0
  %1074 = extractvalue %dx.types.CBufRet.f32 %1068, 1
  %1075 = fdiv fast float %1071, %1073
  %1076 = fdiv fast float %1072, %1074
  %1077 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %1078 = extractvalue %dx.types.CBufRet.f32 %1077, 0
  %1079 = extractvalue %dx.types.CBufRet.f32 %1077, 1
  %1080 = extractvalue %dx.types.CBufRet.f32 %1077, 2
  %1081 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %1082 = extractvalue %dx.types.CBufRet.f32 %1081, 0
  %1083 = extractvalue %dx.types.CBufRet.f32 %1081, 1
  %1084 = extractvalue %dx.types.CBufRet.f32 %1081, 2
  %1085 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1086 = extractvalue %dx.types.CBufRet.f32 %1085, 0
  %1087 = extractvalue %dx.types.CBufRet.f32 %1085, 1
  %1088 = extractvalue %dx.types.CBufRet.f32 %1085, 2
  %1089 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1090 = extractvalue %dx.types.CBufRet.f32 %1089, 0
  %1091 = extractvalue %dx.types.CBufRet.f32 %1089, 1
  %1092 = extractvalue %dx.types.CBufRet.f32 %1089, 2
  %1093 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %1094 = extractvalue %dx.types.CBufRet.f32 %1093, 0
  %1095 = extractvalue %dx.types.CBufRet.f32 %1093, 1
  %1096 = extractvalue %dx.types.CBufRet.f32 %1093, 2
  %1097 = fmul fast float %1094, 2.097152e+06
  %1098 = fmul fast float %1095, 2.097152e+06
  %1099 = fmul fast float %1096, 2.097152e+06
  %1100 = fadd fast float %1097, %1090
  %1101 = fadd fast float %1098, %1091
  %1102 = fadd fast float %1099, %1092
  %1103 = fmul fast float %1075, %1046
  %1104 = fmul fast float %1076, %1046
  %1105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1106 = extractvalue %dx.types.CBufRet.f32 %1105, 3
  %1107 = bitcast float %1106 to i32
  %1108 = icmp ne i32 %1107, 0
  %1109 = select i1 %1108, float %1075, float %1103
  %1110 = select i1 %1108, float %1076, float %1104
  %1111 = fmul fast float %1109, %1078
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %1110, float %1082, float %1111)  ; FMad(a,b,c)
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %1046, float %1086, float %1112)  ; FMad(a,b,c)
  %1114 = fadd fast float %1100, %1113
  %1115 = fmul fast float %1109, %1079
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %1110, float %1083, float %1115)  ; FMad(a,b,c)
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %1046, float %1087, float %1116)  ; FMad(a,b,c)
  %1118 = fadd fast float %1101, %1117
  %1119 = fmul fast float %1109, %1080
  %1120 = call float @dx.op.tertiary.f32(i32 46, float %1110, float %1084, float %1119)  ; FMad(a,b,c)
  %1121 = call float @dx.op.tertiary.f32(i32 46, float %1046, float %1088, float %1120)  ; FMad(a,b,c)
  %1122 = fadd fast float %1102, %1121
  %1123 = call float @dx.op.dot4.f32(i32 56, float %1114, float %1118, float %1122, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1124 = call float @dx.op.unary.f32(i32 6, float %1123)  ; FAbs(value)
  %1125 = fdiv fast float %1124, %48
  %1126 = fmul fast float %1125, %1125
  %1127 = fmul fast float %1126, -1.000000e+04
  %1128 = call float @dx.op.unary.f32(i32 21, float %1127)  ; Exp(value)
  %1129 = fsub fast float %1057, %142
  %1130 = fsub fast float %1058, %143
  %1131 = call float @dx.op.unary.f32(i32 6, float %1129)  ; FAbs(value)
  %1132 = call float @dx.op.unary.f32(i32 6, float %1130)  ; FAbs(value)
  %1133 = call float @dx.op.binary.f32(i32 36, float %1131, float %1132)  ; FMin(a,b)
  %1134 = fdiv fast float %1133, %1017
  %1135 = call float @dx.op.unary.f32(i32 7, float %1134)  ; Saturate(value)
  %1136 = fsub fast float 1.000000e+00, %1135
  %1137 = fmul fast float %1136, %1128
  %1138 = fcmp fast ogt float %1137, %980
  %1139 = select i1 %1138, i32 %1041, i32 %978
  %1140 = select i1 %1138, i32 %1042, i32 %979
  %1141 = select i1 %1138, float %1137, float %980
  %1142 = add nuw i32 %981, 1
  %1143 = icmp eq i32 %1142, %974
  br i1 %1143, label %1144, label %977

; <label>:1144                                    ; preds = %1036
  br label %1145

; <label>:1145                                    ; preds = %1144, %971, %966
  %1146 = phi i32 [ %358, %971 ], [ %358, %966 ], [ %1139, %1144 ]
  %1147 = phi i32 [ %380, %971 ], [ %380, %966 ], [ %1140, %1144 ]
  %1148 = phi float [ %610, %971 ], [ %610, %966 ], [ %1141, %1144 ]
  %1149 = fcmp fast ugt float %611, 0x3F847AE140000000
  br i1 %1149, label %1324, label %1150

; <label>:1150                                    ; preds = %1145
  %1151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1152 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1151, i32 0, i32 %376, i32 %380, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1153 = extractvalue %dx.types.ResRet.i32 %1152, 0
  %1154 = icmp eq i32 %1153, 0
  br i1 %1154, label %1324, label %1155

; <label>:1155                                    ; preds = %1150
  br label %1156

; <label>:1156                                    ; preds = %1215, %1155
  %1157 = phi i32 [ %1318, %1215 ], [ %376, %1155 ]
  %1158 = phi i32 [ %1319, %1215 ], [ %380, %1155 ]
  %1159 = phi float [ %1320, %1215 ], [ %611, %1155 ]
  %1160 = phi i32 [ %1321, %1215 ], [ 0, %1155 ]
  %1161 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1162 = extractvalue %dx.types.CBufRet.i32 %1161, 0
  %1163 = urem i32 %1160, %1162
  %1164 = udiv i32 %1160, %1162
  %1165 = extractvalue %dx.types.CBufRet.i32 %1161, 2
  %1166 = extractvalue %dx.types.CBufRet.i32 %1161, 3
  %1167 = mul i32 %1165, %1163
  %1168 = mul i32 %1166, %1164
  %1169 = add i32 %1167, %376
  %1170 = add i32 %1168, %380
  %1171 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1172 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1171, i32 0, i32 %1169, i32 %1170, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1173 = extractvalue %dx.types.ResRet.i32 %1172, 0
  %1174 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1175 = extractvalue %dx.types.CBufRet.i32 %1174, 3
  %1176 = add i32 %1175, %1173
  %1177 = urem i32 %1176, %1165
  %1178 = udiv i32 %1176, %1165
  %1179 = mul i32 %1162, %1177
  %1180 = mul i32 %1162, %1178
  %1181 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1182 = extractvalue %dx.types.CBufRet.i32 %1181, 1
  %1183 = icmp slt i32 %1182, 0
  br i1 %1183, label %1184, label %1187

; <label>:1184                                    ; preds = %1156
  %1185 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1186 = extractvalue %dx.types.CBufRet.i32 %1185, 1
  br label %1187

; <label>:1187                                    ; preds = %1184, %1156
  %1188 = phi i32 [ %1186, %1184 ], [ %1182, %1156 ]
  %1189 = uitofp i32 %1188 to float
  %1190 = fmul fast float %1189, 1.250000e-01
  %1191 = call float @dx.op.unary.f32(i32 22, float %1190)  ; Frc(value)
  %1192 = call i32 @dx.op.unary.i32(i32 30, i32 %1188)  ; Bfrev(value)
  %1193 = lshr i32 %1192, 16
  %1194 = uitofp i32 %1193 to float
  %1195 = fmul fast float %1194, 0x3EF0000000000000
  %1196 = uitofp i32 %1162 to float
  %1197 = fmul fast float %1196, %1191
  %1198 = fmul fast float %1195, %1196
  %1199 = fptoui float %1197 to i32
  %1200 = fptoui float %1198 to i32
  %1201 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %1202 = extractvalue %dx.types.CBufRet.i32 %1201, 0
  %1203 = extractvalue %dx.types.CBufRet.i32 %1201, 1
  %1204 = add i32 %1202, %1179
  %1205 = add i32 %1204, %1199
  %1206 = add i32 %1203, %1180
  %1207 = add i32 %1206, %1200
  %1208 = icmp ult i32 %1176, %1175
  br i1 %1208, label %1215, label %1209

; <label>:1209                                    ; preds = %1187
  %1210 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1211 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1210, i32 %1173, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1212 = extractvalue %dx.types.ResRet.i32 %1211, 0
  %1213 = and i32 %1212, 65535
  %1214 = lshr i32 %1212, 16
  br label %1215

; <label>:1215                                    ; preds = %1209, %1187
  %1216 = phi i32 [ %1213, %1209 ], [ %1205, %1187 ]
  %1217 = phi i32 [ %1214, %1209 ], [ %1207, %1187 ]
  %1218 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1219 = extractvalue %dx.types.CBufRet.i32 %1218, 0
  %1220 = urem i32 %1176, %1219
  %1221 = udiv i32 %1176, %1219
  %1222 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1223 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1222, i32 0, i32 %1220, i32 %1221, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1224 = extractvalue %dx.types.ResRet.i32 %1223, 0
  %1225 = bitcast i32 %1224 to float
  %1226 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %1227 = extractvalue %dx.types.CBufRet.f32 %1226, 0
  %1228 = extractvalue %dx.types.CBufRet.f32 %1226, 1
  %1229 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %1230 = extractvalue %dx.types.CBufRet.f32 %1229, 0
  %1231 = extractvalue %dx.types.CBufRet.f32 %1229, 1
  %1232 = fadd fast float %1227, -1.000000e+00
  %1233 = fadd fast float %1232, %1230
  %1234 = fadd fast float %1228, -1.000000e+00
  %1235 = fadd fast float %1234, %1231
  %1236 = uitofp i32 %1216 to float
  %1237 = uitofp i32 %1217 to float
  %1238 = call float @dx.op.binary.f32(i32 36, float %1236, float %1233)  ; FMin(a,b)
  %1239 = call float @dx.op.binary.f32(i32 36, float %1237, float %1235)  ; FMin(a,b)
  %1240 = fadd fast float %1238, 5.000000e-01
  %1241 = fadd fast float %1239, 5.000000e-01
  %1242 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1243 = extractvalue %dx.types.CBufRet.f32 %1242, 2
  %1244 = extractvalue %dx.types.CBufRet.f32 %1242, 3
  %1245 = fmul fast float %1243, %1240
  %1246 = fmul fast float %1244, %1241
  %1247 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1248 = extractvalue %dx.types.CBufRet.f32 %1247, 2
  %1249 = extractvalue %dx.types.CBufRet.f32 %1247, 3
  %1250 = fsub fast float %1245, %1249
  %1251 = fsub fast float %1246, %1248
  %1252 = extractvalue %dx.types.CBufRet.f32 %1247, 0
  %1253 = extractvalue %dx.types.CBufRet.f32 %1247, 1
  %1254 = fdiv fast float %1250, %1252
  %1255 = fdiv fast float %1251, %1253
  %1256 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %1257 = extractvalue %dx.types.CBufRet.f32 %1256, 0
  %1258 = extractvalue %dx.types.CBufRet.f32 %1256, 1
  %1259 = extractvalue %dx.types.CBufRet.f32 %1256, 2
  %1260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %1261 = extractvalue %dx.types.CBufRet.f32 %1260, 0
  %1262 = extractvalue %dx.types.CBufRet.f32 %1260, 1
  %1263 = extractvalue %dx.types.CBufRet.f32 %1260, 2
  %1264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1265 = extractvalue %dx.types.CBufRet.f32 %1264, 0
  %1266 = extractvalue %dx.types.CBufRet.f32 %1264, 1
  %1267 = extractvalue %dx.types.CBufRet.f32 %1264, 2
  %1268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1269 = extractvalue %dx.types.CBufRet.f32 %1268, 0
  %1270 = extractvalue %dx.types.CBufRet.f32 %1268, 1
  %1271 = extractvalue %dx.types.CBufRet.f32 %1268, 2
  %1272 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %1273 = extractvalue %dx.types.CBufRet.f32 %1272, 0
  %1274 = extractvalue %dx.types.CBufRet.f32 %1272, 1
  %1275 = extractvalue %dx.types.CBufRet.f32 %1272, 2
  %1276 = fmul fast float %1273, 2.097152e+06
  %1277 = fmul fast float %1274, 2.097152e+06
  %1278 = fmul fast float %1275, 2.097152e+06
  %1279 = fadd fast float %1276, %1269
  %1280 = fadd fast float %1277, %1270
  %1281 = fadd fast float %1278, %1271
  %1282 = fmul fast float %1254, %1225
  %1283 = fmul fast float %1255, %1225
  %1284 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1285 = extractvalue %dx.types.CBufRet.f32 %1284, 3
  %1286 = bitcast float %1285 to i32
  %1287 = icmp ne i32 %1286, 0
  %1288 = select i1 %1287, float %1254, float %1282
  %1289 = select i1 %1287, float %1255, float %1283
  %1290 = fmul fast float %1288, %1257
  %1291 = call float @dx.op.tertiary.f32(i32 46, float %1289, float %1261, float %1290)  ; FMad(a,b,c)
  %1292 = call float @dx.op.tertiary.f32(i32 46, float %1225, float %1265, float %1291)  ; FMad(a,b,c)
  %1293 = fadd fast float %1279, %1292
  %1294 = fmul fast float %1288, %1258
  %1295 = call float @dx.op.tertiary.f32(i32 46, float %1289, float %1262, float %1294)  ; FMad(a,b,c)
  %1296 = call float @dx.op.tertiary.f32(i32 46, float %1225, float %1266, float %1295)  ; FMad(a,b,c)
  %1297 = fadd fast float %1280, %1296
  %1298 = fmul fast float %1288, %1259
  %1299 = call float @dx.op.tertiary.f32(i32 46, float %1289, float %1263, float %1298)  ; FMad(a,b,c)
  %1300 = call float @dx.op.tertiary.f32(i32 46, float %1225, float %1267, float %1299)  ; FMad(a,b,c)
  %1301 = fadd fast float %1281, %1300
  %1302 = call float @dx.op.dot4.f32(i32 56, float %1293, float %1297, float %1301, float -1.000000e+00, float %90, float %91, float %92, float %393)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1303 = call float @dx.op.unary.f32(i32 6, float %1302)  ; FAbs(value)
  %1304 = fdiv fast float %1303, %48
  %1305 = fmul fast float %1304, %1304
  %1306 = fmul fast float %1305, -1.000000e+04
  %1307 = call float @dx.op.unary.f32(i32 21, float %1306)  ; Exp(value)
  %1308 = fsub fast float %1236, %142
  %1309 = fsub fast float %1237, %143
  %1310 = call float @dx.op.unary.f32(i32 6, float %1308)  ; FAbs(value)
  %1311 = call float @dx.op.unary.f32(i32 6, float %1309)  ; FAbs(value)
  %1312 = call float @dx.op.binary.f32(i32 36, float %1310, float %1311)  ; FMin(a,b)
  %1313 = fdiv fast float %1312, %1196
  %1314 = call float @dx.op.unary.f32(i32 7, float %1313)  ; Saturate(value)
  %1315 = fsub fast float 1.000000e+00, %1314
  %1316 = fmul fast float %1315, %1307
  %1317 = fcmp fast ogt float %1316, %1159
  %1318 = select i1 %1317, i32 %1220, i32 %1157
  %1319 = select i1 %1317, i32 %1221, i32 %1158
  %1320 = select i1 %1317, float %1316, float %1159
  %1321 = add nuw i32 %1160, 1
  %1322 = icmp eq i32 %1321, %1153
  br i1 %1322, label %1323, label %1156

; <label>:1323                                    ; preds = %1215
  br label %1324

; <label>:1324                                    ; preds = %1323, %1150, %1145
  %1325 = phi i32 [ %376, %1150 ], [ %376, %1145 ], [ %1318, %1323 ]
  %1326 = phi i32 [ %380, %1150 ], [ %380, %1145 ], [ %1319, %1323 ]
  %1327 = phi float [ %611, %1150 ], [ %611, %1145 ], [ %1320, %1323 ]
  %1328 = call float @dx.op.dot4.f32(i32 56, float %790, float %969, float %1148, float %1327, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1329 = call float @dx.op.binary.f32(i32 35, float %1328, float 0x3F847AE140000000)  ; FMax(a,b)
  %1330 = fdiv fast float %790, %1329
  %1331 = fdiv fast float %969, %1329
  %1332 = fdiv fast float %1148, %1329
  %1333 = fdiv fast float %1327, %1329
  %1334 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1335 = extractvalue %dx.types.CBufRet.i32 %1334, 1
  %1336 = icmp slt i32 %1335, 0
  br i1 %1336, label %1337, label %1340

; <label>:1337                                    ; preds = %1324
  %1338 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1339 = extractvalue %dx.types.CBufRet.i32 %1338, 2
  br label %1340

; <label>:1340                                    ; preds = %1337, %1324
  %1341 = phi i32 [ %1339, %1337 ], [ %1335, %1324 ]
  %1342 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1343 = extractvalue %dx.types.CBufRet.i32 %1342, 0
  %1344 = extractvalue %dx.types.CBufRet.i32 %1342, 1
  %1345 = extractvalue %dx.types.CBufRet.i32 %1342, 2
  %1346 = and i32 %1343, %33
  %1347 = and i32 %1344, %34
  %1348 = and i32 %1345, %1341
  %1349 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1350 = extractvalue %dx.types.CBufRet.i32 %1349, 1
  %1351 = mul i32 %1348, %1350
  %1352 = add i32 %1351, %1347
  %1353 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1354 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1353, i32 0, i32 %1346, i32 %1352, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1355 = extractvalue %dx.types.ResRet.f32 %1354, 0
  %1356 = call float @dx.op.binary.f32(i32 36, float %1355, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1357 = call float @dx.op.dot4.f32(i32 56, float %1330, float %1331, float %1332, float %1333, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1358 = fmul fast float %1357, %1356
  %1359 = fadd fast float %969, %790
  %1360 = fadd fast float %1359, %1148
  %1361 = fdiv fast float %1360, %1329
  %1362 = fcmp fast ult float %1358, %1361
  br i1 %1362, label %1363, label %1369

; <label>:1363                                    ; preds = %1340
  %1364 = fdiv fast float %1359, %1329
  %1365 = fcmp fast ult float %1358, %1364
  br i1 %1365, label %1366, label %1369

; <label>:1366                                    ; preds = %1363
  %1367 = fcmp fast ult float %1358, %1330
  br i1 %1367, label %1368, label %1369

; <label>:1368                                    ; preds = %1366
  br label %1369

; <label>:1369                                    ; preds = %1368, %1366, %1363, %1340
  %1370 = phi i32 [ %788, %1368 ], [ %1325, %1340 ], [ %1146, %1363 ], [ %967, %1366 ]
  %1371 = phi i32 [ %789, %1368 ], [ %1326, %1340 ], [ %1147, %1363 ], [ %968, %1366 ]
  %1372 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %1373 = extractvalue %dx.types.CBufRet.f32 %1372, 0
  %1374 = extractvalue %dx.types.CBufRet.f32 %1372, 1
  %1375 = extractvalue %dx.types.CBufRet.f32 %1372, 2
  %1376 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %1377 = extractvalue %dx.types.CBufRet.f32 %1376, 0
  %1378 = extractvalue %dx.types.CBufRet.f32 %1376, 1
  %1379 = extractvalue %dx.types.CBufRet.f32 %1376, 2
  %1380 = fmul fast float %1373, 2.097152e+06
  %1381 = fmul fast float %1374, 2.097152e+06
  %1382 = fmul fast float %1375, 2.097152e+06
  %1383 = fsub fast float %1377, %197
  %1384 = fadd fast float %1383, %1380
  %1385 = fsub fast float %1378, %201
  %1386 = fadd fast float %1385, %1381
  %1387 = fsub fast float %1379, %205
  %1388 = fadd fast float %1387, %1382
  %1389 = call float @dx.op.dot3.f32(i32 55, float %1384, float %1386, float %1388, float %1384, float %1386, float %1388)  ; Dot3(ax,ay,az,bx,by,bz)
  %1390 = call float @dx.op.unary.f32(i32 25, float %1389)  ; Rsqrt(value)
  %1391 = fmul fast float %1384, %1390
  %1392 = fmul fast float %1386, %1390
  %1393 = fmul fast float %1388, %1390
  %1394 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1395 = extractvalue %dx.types.CBufRet.i32 %1394, 1
  %1396 = select i1 %139, i32 1, i32 %1395
  %1397 = icmp eq i32 %1396, 0
  br i1 %1397, label %1398, label %1566

; <label>:1398                                    ; preds = %1369
  %1399 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1400 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1399, i32 0, i32 %1370, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1401 = extractvalue %dx.types.ResRet.f32 %1400, 0
  %1402 = extractvalue %dx.types.ResRet.f32 %1400, 1
  %1403 = extractvalue %dx.types.ResRet.f32 %1400, 2
  %1404 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1405 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1404, i32 0, i32 %1370, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1406 = extractvalue %dx.types.ResRet.f32 %1405, 0
  %1407 = extractvalue %dx.types.ResRet.f32 %1405, 1
  %1408 = extractvalue %dx.types.ResRet.f32 %1405, 2
  %1409 = extractvalue %dx.types.ResRet.f32 %1405, 3
  %1410 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1411 = extractvalue %dx.types.CBufRet.i32 %1410, 0
  %1412 = add i32 %1411, %1370
  %1413 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1404, i32 0, i32 %1412, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1414 = extractvalue %dx.types.ResRet.f32 %1413, 0
  %1415 = extractvalue %dx.types.ResRet.f32 %1413, 1
  %1416 = extractvalue %dx.types.ResRet.f32 %1413, 2
  %1417 = extractvalue %dx.types.ResRet.f32 %1413, 3
  %1418 = shl i32 %1411, 1
  %1419 = add i32 %1418, %1370
  %1420 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1404, i32 0, i32 %1419, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1421 = extractvalue %dx.types.ResRet.f32 %1420, 0
  %1422 = extractvalue %dx.types.ResRet.f32 %1420, 1
  %1423 = extractvalue %dx.types.ResRet.f32 %1420, 2
  %1424 = extractvalue %dx.types.ResRet.f32 %1420, 3
  %1425 = mul i32 %1411, 3
  %1426 = add i32 %1425, %1370
  %1427 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1404, i32 0, i32 %1426, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1428 = extractvalue %dx.types.ResRet.f32 %1427, 0
  %1429 = extractvalue %dx.types.ResRet.f32 %1427, 1
  %1430 = extractvalue %dx.types.ResRet.f32 %1427, 2
  %1431 = extractvalue %dx.types.ResRet.f32 %1427, 3
  %1432 = shl i32 %1411, 2
  %1433 = add i32 %1432, %1370
  %1434 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1404, i32 0, i32 %1433, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1435 = extractvalue %dx.types.ResRet.f32 %1434, 0
  %1436 = extractvalue %dx.types.ResRet.f32 %1434, 1
  %1437 = extractvalue %dx.types.ResRet.f32 %1434, 2
  %1438 = extractvalue %dx.types.ResRet.f32 %1434, 3
  %1439 = mul i32 %1411, 5
  %1440 = add i32 %1439, %1370
  %1441 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1404, i32 0, i32 %1440, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1442 = extractvalue %dx.types.ResRet.f32 %1441, 0
  %1443 = extractvalue %dx.types.ResRet.f32 %1441, 1
  %1444 = extractvalue %dx.types.ResRet.f32 %1441, 2
  %1445 = extractvalue %dx.types.ResRet.f32 %1441, 3
  %1446 = fmul fast float %1401, 0x3FEC5BF8A0000000
  %1447 = fmul fast float %1402, 0x3FEC5BF8A0000000
  %1448 = fmul fast float %1403, 0x3FEC5BF8A0000000
  %1449 = fmul fast float %1406, %91
  %1450 = fmul fast float %1421, %91
  %1451 = fmul fast float %1435, %91
  %1452 = fmul fast float %1407, %92
  %1453 = fmul fast float %1422, %92
  %1454 = fmul fast float %1436, %92
  %1455 = fsub fast float %1452, %1449
  %1456 = fsub fast float %1453, %1450
  %1457 = fsub fast float %1454, %1451
  %1458 = fmul fast float %1408, %90
  %1459 = fmul fast float %1423, %90
  %1460 = fmul fast float %1437, %90
  %1461 = fsub fast float %1455, %1458
  %1462 = fsub fast float %1456, %1459
  %1463 = fsub fast float %1457, %1460
  %1464 = fmul fast float %1461, 0x3FF05F8BE0000000
  %1465 = fmul fast float %1462, 0x3FF05F8BE0000000
  %1466 = fmul fast float %1463, 0x3FF05F8BE0000000
  %1467 = fadd fast float %1464, %1446
  %1468 = fadd fast float %1465, %1447
  %1469 = fadd fast float %1466, %1448
  %1470 = fmul fast float %92, %92
  %1471 = fmul fast float %1470, 3.000000e+00
  %1472 = fadd fast float %1471, -1.000000e+00
  %1473 = fmul fast float %1415, %1472
  %1474 = fmul fast float %1429, %1472
  %1475 = fmul fast float %1443, %1472
  %1476 = fmul fast float %90, %90
  %1477 = fmul fast float %91, %91
  %1478 = fsub fast float %1476, %1477
  %1479 = fmul fast float %1417, %1478
  %1480 = fmul fast float %1431, %1478
  %1481 = fmul fast float %1445, %1478
  %1482 = fmul fast float %91, %90
  %1483 = fmul fast float %1482, %1409
  %1484 = fmul fast float %1482, %1424
  %1485 = fmul fast float %1482, %1438
  %1486 = fmul fast float %92, %91
  %1487 = fmul fast float %1486, %1414
  %1488 = fmul fast float %1486, %1428
  %1489 = fmul fast float %1486, %1442
  %1490 = fsub fast float %1483, %1487
  %1491 = fsub fast float %1484, %1488
  %1492 = fsub fast float %1485, %1489
  %1493 = fmul fast float %90, %92
  %1494 = fmul fast float %1493, %1416
  %1495 = fmul fast float %1493, %1430
  %1496 = fmul fast float %1493, %1444
  %1497 = fsub fast float %1490, %1494
  %1498 = fsub fast float %1491, %1495
  %1499 = fsub fast float %1492, %1496
  %1500 = fmul fast float %1497, 2.000000e+00
  %1501 = fmul fast float %1498, 2.000000e+00
  %1502 = fmul fast float %1499, 2.000000e+00
  %1503 = fadd fast float %1500, %1479
  %1504 = fadd fast float %1501, %1480
  %1505 = fadd fast float %1502, %1481
  %1506 = fmul fast float %1503, 0x3FFBB67AE0000000
  %1507 = fmul fast float %1504, 0x3FFBB67AE0000000
  %1508 = fmul fast float %1505, 0x3FFBB67AE0000000
  %1509 = fadd fast float %1506, %1473
  %1510 = fadd fast float %1507, %1474
  %1511 = fadd fast float %1508, %1475
  %1512 = fmul fast float %1509, 0x3FCFB4E500000000
  %1513 = fmul fast float %1510, 0x3FCFB4E500000000
  %1514 = fmul fast float %1511, 0x3FCFB4E500000000
  %1515 = fadd fast float %1467, %1512
  %1516 = fadd fast float %1468, %1513
  %1517 = fadd fast float %1469, %1514
  %1518 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1515)  ; FMax(a,b)
  %1519 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1516)  ; FMax(a,b)
  %1520 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1517)  ; FMax(a,b)
  %1521 = fmul fast float %1518, 0x402921FB60000000
  %1522 = fmul fast float %1519, 0x402921FB60000000
  %1523 = fmul fast float %1520, 0x402921FB60000000
  br i1 %138, label %1524, label %1950

; <label>:1524                                    ; preds = %1398
  %1525 = fsub fast float -0.000000e+00, %90
  %1526 = fsub fast float -0.000000e+00, %92
  %1527 = fmul fast float %1407, %1526
  %1528 = fmul fast float %1422, %1526
  %1529 = fmul fast float %1436, %1526
  %1530 = fadd fast float %1449, %1527
  %1531 = fadd fast float %1450, %1528
  %1532 = fadd fast float %1451, %1529
  %1533 = fmul fast float %1408, %1525
  %1534 = fmul fast float %1423, %1525
  %1535 = fmul fast float %1437, %1525
  %1536 = fsub fast float %1530, %1533
  %1537 = fsub fast float %1531, %1534
  %1538 = fsub fast float %1532, %1535
  %1539 = fmul fast float %1536, 0x3FF05F8BE0000000
  %1540 = fmul fast float %1537, 0x3FF05F8BE0000000
  %1541 = fmul fast float %1538, 0x3FF05F8BE0000000
  %1542 = fadd fast float %1539, %1446
  %1543 = fadd fast float %1540, %1447
  %1544 = fadd fast float %1541, %1448
  %1545 = fmul fast float %92, -3.000000e+00
  %1546 = fmul fast float %1545, %1526
  %1547 = fadd fast float %1546, -1.000000e+00
  %1548 = fmul fast float %1415, %1547
  %1549 = fmul fast float %1429, %1547
  %1550 = fmul fast float %1443, %1547
  %1551 = fadd fast float %1506, %1548
  %1552 = fadd fast float %1507, %1549
  %1553 = fadd fast float %1508, %1550
  %1554 = fmul fast float %1551, 0x3FCFB4E500000000
  %1555 = fmul fast float %1552, 0x3FCFB4E500000000
  %1556 = fmul fast float %1553, 0x3FCFB4E500000000
  %1557 = fadd fast float %1542, %1554
  %1558 = fadd fast float %1543, %1555
  %1559 = fadd fast float %1544, %1556
  %1560 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1557)  ; FMax(a,b)
  %1561 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1558)  ; FMax(a,b)
  %1562 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1559)  ; FMax(a,b)
  %1563 = fmul fast float %1560, 4.000000e+00
  %1564 = fmul fast float %1561, 4.000000e+00
  %1565 = fmul fast float %1562, 4.000000e+00
  br label %1950

; <label>:1566                                    ; preds = %1369
  %1567 = icmp eq i32 %1396, 1
  br i1 %1567, label %1568, label %1788

; <label>:1568                                    ; preds = %1566
  %1569 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1570 = extractvalue %dx.types.CBufRet.f32 %1569, 0
  br label %1571

; <label>:1571                                    ; preds = %1697, %1568
  %1572 = phi float [ 0.000000e+00, %1568 ], [ %1779, %1697 ]
  %1573 = phi float [ 0.000000e+00, %1568 ], [ %1780, %1697 ]
  %1574 = phi float [ 0.000000e+00, %1568 ], [ %1781, %1697 ]
  %1575 = phi i32 [ 0, %1568 ], [ %1782, %1697 ]
  %1576 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1577 = extractvalue %dx.types.CBufRet.i32 %1576, 1
  %1578 = mul i32 %33, 1664525
  %1579 = mul i32 %34, 1664525
  %1580 = mul i32 %1577, 1664525
  %1581 = add i32 %1578, 1013904223
  %1582 = add i32 %1579, 1013904223
  %1583 = add i32 %1580, 1013904223
  %1584 = mul i32 %1583, %1582
  %1585 = add i32 %1581, %1584
  %1586 = mul i32 %1585, %1583
  %1587 = add i32 %1586, %1582
  %1588 = mul i32 %1587, %1585
  %1589 = add i32 %1588, %1583
  %1590 = mul i32 %1589, %1587
  %1591 = add i32 %1590, %1585
  %1592 = mul i32 %1591, %1589
  %1593 = add i32 %1592, %1587
  %1594 = lshr i32 %1591, 16
  %1595 = uitofp i32 %1575 to float
  %1596 = fmul fast float %1595, 1.250000e-01
  %1597 = uitofp i32 %1594 to float
  %1598 = fmul fast float %1597, 0x3EF0000000000000
  %1599 = fadd fast float %1598, %1596
  %1600 = call float @dx.op.unary.f32(i32 22, float %1599)  ; Frc(value)
  %1601 = call i32 @dx.op.unary.i32(i32 30, i32 %1575)  ; Bfrev(value)
  %1602 = xor i32 %1593, %1601
  %1603 = lshr i32 %1602, 16
  %1604 = uitofp i32 %1603 to float
  switch i32 %79, label %1697 [
    i32 1, label %1605
    i32 10, label %1605
    i32 2, label %1605
    i32 5, label %1605
    i32 3, label %1605
    i32 4, label %1605
    i32 6, label %1605
    i32 9, label %1605
    i32 7, label %1686
  ]

; <label>:1605                                    ; preds = %1571, %1571, %1571, %1571, %1571, %1571, %1571, %1571
  %1606 = fcmp fast une float %136, 0.000000e+00
  br i1 %1606, label %1607, label %1617

; <label>:1607                                    ; preds = %1605
  %1608 = fmul fast float %135, %91
  %1609 = fmul fast float %134, %92
  %1610 = fsub fast float %1608, %1609
  %1611 = fmul fast float %133, %92
  %1612 = fmul fast float %135, %90
  %1613 = fsub fast float %1611, %1612
  %1614 = fmul fast float %134, %90
  %1615 = fmul fast float %133, %91
  %1616 = fsub fast float %1614, %1615
  br label %1636

; <label>:1617                                    ; preds = %1605
  %1618 = fcmp fast oge float %92, 0.000000e+00
  %1619 = select i1 %1618, float 1.000000e+00, float -1.000000e+00
  %1620 = fadd fast float %1619, %92
  %1621 = fdiv fast float 1.000000e+00, %1620
  %1622 = fsub fast float -0.000000e+00, %1621
  %1623 = fmul fast float %90, %91
  %1624 = fmul fast float %1623, %1622
  %1625 = fmul fast float %90, %90
  %1626 = fmul fast float %1625, %1619
  %1627 = fmul fast float %1626, %1622
  %1628 = fadd fast float %1627, 1.000000e+00
  %1629 = fmul fast float %1624, %1619
  %1630 = fmul fast float %90, %1619
  %1631 = fsub fast float -0.000000e+00, %1630
  %1632 = fmul fast float %91, %91
  %1633 = fmul fast float %1632, %1622
  %1634 = fadd fast float %1633, %1619
  %1635 = fsub fast float -0.000000e+00, %91
  br label %1636

; <label>:1636                                    ; preds = %1617, %1607
  %1637 = phi float [ %133, %1607 ], [ %1628, %1617 ]
  %1638 = phi float [ %134, %1607 ], [ %1629, %1617 ]
  %1639 = phi float [ %135, %1607 ], [ %1631, %1617 ]
  %1640 = phi float [ %1610, %1607 ], [ %1624, %1617 ]
  %1641 = phi float [ %1613, %1607 ], [ %1634, %1617 ]
  %1642 = phi float [ %1616, %1607 ], [ %1635, %1617 ]
  %1643 = fmul fast float %1600, 2.000000e+00
  %1644 = fmul fast float %1604, 0x3F00000000000000
  %1645 = fadd fast float %1643, 0xBFEFFFFFE0000000
  %1646 = fadd fast float %1644, 0xBFEFFFFFE0000000
  %1647 = call float @dx.op.unary.f32(i32 6, float %1645)  ; FAbs(value)
  %1648 = call float @dx.op.unary.f32(i32 6, float %1646)  ; FAbs(value)
  %1649 = call float @dx.op.binary.f32(i32 36, float %1647, float %1648)  ; FMin(a,b)
  %1650 = call float @dx.op.binary.f32(i32 35, float %1647, float %1648)  ; FMax(a,b)
  %1651 = fadd fast float %1650, 0x3BF0000000000000
  %1652 = fdiv fast float %1649, %1651
  %1653 = fcmp fast oge float %1648, %1647
  %1654 = uitofp i1 %1653 to float
  %1655 = fmul fast float %1654, 2.000000e+00
  %1656 = fadd fast float %1652, %1655
  %1657 = fmul fast float %1656, 0x3FE921FB60000000
  %1658 = call float @dx.op.unary.f32(i32 12, float %1657)  ; Cos(value)
  %1659 = call float @dx.op.unary.f32(i32 13, float %1657)  ; Sin(value)
  %1660 = bitcast float %1658 to i32
  %1661 = bitcast float %1659 to i32
  %1662 = and i32 %1660, 2147483647
  %1663 = and i32 %1661, 2147483647
  %1664 = bitcast float %1645 to i32
  %1665 = bitcast float %1646 to i32
  %1666 = and i32 %1664, -2147483648
  %1667 = and i32 %1665, -2147483648
  %1668 = or i32 %1662, %1666
  %1669 = or i32 %1663, %1667
  %1670 = bitcast i32 %1668 to float
  %1671 = bitcast i32 %1669 to float
  %1672 = fmul fast float %1670, %1650
  %1673 = fmul fast float %1671, %1650
  %1674 = call float @dx.op.dot2.f32(i32 54, float %1672, float %1673, float %1672, float %1673)  ; Dot2(ax,ay,bx,by)
  %1675 = fsub fast float 1.000000e+00, %1674
  %1676 = call float @dx.op.unary.f32(i32 24, float %1675)  ; Sqrt(value)
  %1677 = fmul fast float %1672, %1637
  %1678 = call float @dx.op.tertiary.f32(i32 46, float %1673, float %1640, float %1677)  ; FMad(a,b,c)
  %1679 = call float @dx.op.tertiary.f32(i32 46, float %1676, float %90, float %1678)  ; FMad(a,b,c)
  %1680 = fmul fast float %1672, %1638
  %1681 = call float @dx.op.tertiary.f32(i32 46, float %1673, float %1641, float %1680)  ; FMad(a,b,c)
  %1682 = call float @dx.op.tertiary.f32(i32 46, float %1676, float %91, float %1681)  ; FMad(a,b,c)
  %1683 = fmul fast float %1672, %1639
  %1684 = call float @dx.op.tertiary.f32(i32 46, float %1673, float %1642, float %1683)  ; FMad(a,b,c)
  %1685 = call float @dx.op.tertiary.f32(i32 46, float %1676, float %92, float %1684)  ; FMad(a,b,c)
  br label %1697

; <label>:1686                                    ; preds = %1571
  %1687 = fmul fast float %1600, 0x401921FB60000000
  %1688 = fmul fast float %1604, 0x3F00000000000000
  %1689 = fsub fast float 1.000000e+00, %1688
  %1690 = fmul fast float %1689, %1689
  %1691 = fsub fast float 1.000000e+00, %1690
  %1692 = call float @dx.op.unary.f32(i32 24, float %1691)  ; Sqrt(value)
  %1693 = call float @dx.op.unary.f32(i32 12, float %1687)  ; Cos(value)
  %1694 = fmul fast float %1693, %1692
  %1695 = call float @dx.op.unary.f32(i32 13, float %1687)  ; Sin(value)
  %1696 = fmul fast float %1695, %1692
  br label %1697

; <label>:1697                                    ; preds = %1686, %1636, %1571
  %1698 = phi float [ 1.000000e+00, %1686 ], [ 1.000000e+00, %1636 ], [ 0.000000e+00, %1571 ]
  %1699 = phi float [ %1694, %1686 ], [ %1679, %1636 ], [ 0.000000e+00, %1571 ]
  %1700 = phi float [ %1696, %1686 ], [ %1682, %1636 ], [ 0.000000e+00, %1571 ]
  %1701 = phi float [ %1689, %1686 ], [ %1685, %1636 ], [ 0.000000e+00, %1571 ]
  %1702 = call float @dx.op.dot3.f32(i32 55, float %1699, float %1700, float %1701, float %1699, float %1700, float %1701)  ; Dot3(ax,ay,az,bx,by,bz)
  %1703 = call float @dx.op.unary.f32(i32 25, float %1702)  ; Rsqrt(value)
  %1704 = fmul fast float %1703, %1699
  %1705 = fmul fast float %1703, %1700
  %1706 = fmul fast float %1703, %1701
  %1707 = call float @dx.op.unary.f32(i32 6, float %1704)  ; FAbs(value)
  %1708 = call float @dx.op.unary.f32(i32 6, float %1705)  ; FAbs(value)
  %1709 = call float @dx.op.unary.f32(i32 6, float %1706)  ; FAbs(value)
  %1710 = fsub fast float 1.000000e+00, %1709
  %1711 = call float @dx.op.unary.f32(i32 24, float %1710)  ; Sqrt(value)
  %1712 = call float @dx.op.binary.f32(i32 36, float %1707, float %1708)  ; FMin(a,b)
  %1713 = call float @dx.op.binary.f32(i32 35, float %1707, float %1708)  ; FMax(a,b)
  %1714 = fadd fast float %1713, 0x3BF0000000000000
  %1715 = fdiv fast float %1712, %1714
  %1716 = fmul fast float %1715, 0x3F99BE1040000000
  %1717 = fsub fast float 0x3FA5746D00000000, %1716
  %1718 = fmul fast float %1717, %1715
  %1719 = fadd fast float %1718, 0x3FB692C5C0000000
  %1720 = fmul fast float %1719, %1715
  %1721 = fadd fast float %1720, 0xBFCFA8A1C0000000
  %1722 = fmul fast float %1721, %1715
  %1723 = fadd fast float %1722, 0x3F79384B40000000
  %1724 = fmul fast float %1723, %1715
  %1725 = fadd fast float %1724, 0x3FE45BF7C0000000
  %1726 = fmul fast float %1725, %1715
  %1727 = fadd fast float %1726, 0x3ED10F8960000000
  %1728 = fcmp fast olt float %1707, %1708
  %1729 = fsub fast float 0x3FEFFFF780000000, %1726
  %1730 = select i1 %1728, float %1729, float %1727
  %1731 = fmul fast float %1730, %1711
  %1732 = fsub fast float %1711, %1731
  %1733 = fcmp fast olt float %1706, 0.000000e+00
  %1734 = fsub fast float 1.000000e+00, %1731
  %1735 = fsub fast float 1.000000e+00, %1732
  %1736 = select i1 %1733, float %1734, float %1732
  %1737 = select i1 %1733, float %1735, float %1731
  %1738 = bitcast float %1736 to i32
  %1739 = bitcast float %1737 to i32
  %1740 = bitcast float %1704 to i32
  %1741 = bitcast float %1705 to i32
  %1742 = and i32 %1740, -2147483648
  %1743 = and i32 %1741, -2147483648
  %1744 = xor i32 %1738, %1742
  %1745 = xor i32 %1739, %1743
  %1746 = bitcast i32 %1744 to float
  %1747 = bitcast i32 %1745 to float
  %1748 = fmul fast float %1746, 5.000000e-01
  %1749 = fmul fast float %1747, 5.000000e-01
  %1750 = fadd fast float %1748, 5.000000e-01
  %1751 = fadd fast float %1749, 5.000000e-01
  %1752 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1753 = extractvalue %dx.types.CBufRet.f32 %1752, 0
  %1754 = extractvalue %dx.types.CBufRet.f32 %1752, 1
  %1755 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1756 = extractvalue %dx.types.CBufRet.f32 %1755, 0
  %1757 = extractvalue %dx.types.CBufRet.f32 %1755, 1
  %1758 = fmul fast float %1750, %1756
  %1759 = fmul fast float %1751, %1757
  %1760 = extractvalue %dx.types.CBufRet.f32 %1755, 2
  %1761 = extractvalue %dx.types.CBufRet.f32 %1755, 3
  %1762 = uitofp i32 %1370 to float
  %1763 = uitofp i32 %1371 to float
  %1764 = fmul fast float %1753, %1762
  %1765 = fmul fast float %1754, %1763
  %1766 = fadd fast float %1760, %1764
  %1767 = fadd fast float %1766, %1758
  %1768 = fadd fast float %1761, %1765
  %1769 = fadd fast float %1768, %1759
  %1770 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1771 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1772 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1770, %dx.types.Handle %1771, float %1767, float %1769, float undef, float undef, i32 0, i32 0, i32 undef, float %1570)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1773 = extractvalue %dx.types.ResRet.f32 %1772, 0
  %1774 = extractvalue %dx.types.ResRet.f32 %1772, 1
  %1775 = extractvalue %dx.types.ResRet.f32 %1772, 2
  %1776 = fmul fast float %1773, %1698
  %1777 = fmul fast float %1774, %1698
  %1778 = fmul fast float %1775, %1698
  %1779 = fadd fast float %1776, %1572
  %1780 = fadd fast float %1777, %1573
  %1781 = fadd fast float %1778, %1574
  %1782 = add nuw nsw i32 %1575, 1
  %1783 = icmp eq i32 %1782, 8
  br i1 %1783, label %1784, label %1571

; <label>:1784                                    ; preds = %1697
  %1785 = fmul fast float %1779, 0x3FD921FB60000000
  %1786 = fmul fast float %1780, 0x3FD921FB60000000
  %1787 = fmul fast float %1781, 0x3FD921FB60000000
  br label %1950

; <label>:1788                                    ; preds = %1566
  %1789 = icmp eq i32 %1396, 2
  br i1 %1789, label %1790, label %1950

; <label>:1790                                    ; preds = %1788
  %1791 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1792 = extractvalue %dx.types.CBufRet.i32 %1791, 2
  %1793 = uitofp i32 %1792 to float
  %1794 = icmp eq i32 %1792, 0
  br i1 %1794, label %1932, label %1795

; <label>:1795                                    ; preds = %1790
  br label %1796

; <label>:1796                                    ; preds = %1928, %1795
  %1797 = phi float [ %1919, %1928 ], [ 0.000000e+00, %1795 ]
  %1798 = phi float [ %1920, %1928 ], [ 0.000000e+00, %1795 ]
  %1799 = phi float [ %1921, %1928 ], [ 0.000000e+00, %1795 ]
  %1800 = phi float [ %1922, %1928 ], [ 0.000000e+00, %1795 ]
  %1801 = phi float [ %1923, %1928 ], [ 0.000000e+00, %1795 ]
  %1802 = phi float [ %1924, %1928 ], [ 0.000000e+00, %1795 ]
  %1803 = phi i32 [ %1925, %1928 ], [ 0, %1795 ]
  %1804 = phi float [ %1929, %1928 ], [ 0.000000e+00, %1795 ]
  br label %1805

; <label>:1805                                    ; preds = %1918, %1796
  %1806 = phi float [ %1919, %1918 ], [ %1797, %1796 ]
  %1807 = phi float [ %1920, %1918 ], [ %1798, %1796 ]
  %1808 = phi float [ %1921, %1918 ], [ %1799, %1796 ]
  %1809 = phi float [ %1922, %1918 ], [ %1800, %1796 ]
  %1810 = phi float [ %1923, %1918 ], [ %1801, %1796 ]
  %1811 = phi float [ %1924, %1918 ], [ %1802, %1796 ]
  %1812 = phi i32 [ %1925, %1918 ], [ %1803, %1796 ]
  %1813 = phi float [ %1926, %1918 ], [ 0.000000e+00, %1796 ]
  %1814 = fadd fast float %1813, 5.000000e-01
  %1815 = fadd fast float %1804, 5.000000e-01
  %1816 = fdiv fast float 2.000000e+00, %1793
  %1817 = fmul fast float %1816, %1814
  %1818 = fmul fast float %1816, %1815
  %1819 = fadd fast float %1817, -1.000000e+00
  %1820 = fadd fast float %1818, -1.000000e+00
  %1821 = call float @dx.op.unary.f32(i32 6, float %1819)  ; FAbs(value)
  %1822 = call float @dx.op.unary.f32(i32 6, float %1820)  ; FAbs(value)
  %1823 = fsub fast float 1.000000e+00, %1821
  %1824 = fsub fast float %1823, %1822
  %1825 = call float @dx.op.unary.f32(i32 6, float %1824)  ; FAbs(value)
  %1826 = fsub fast float 1.000000e+00, %1825
  %1827 = fcmp fast oeq float %1826, 0.000000e+00
  br i1 %1827, label %1833, label %1828

; <label>:1828                                    ; preds = %1805
  %1829 = fsub fast float %1822, %1821
  %1830 = fdiv fast float %1829, %1826
  %1831 = fadd fast float %1830, 1.000000e+00
  %1832 = fmul fast float %1831, 0x3FE921FB60000000
  br label %1833

; <label>:1833                                    ; preds = %1828, %1805
  %1834 = phi float [ %1832, %1828 ], [ 0.000000e+00, %1805 ]
  %1835 = fmul fast float %1826, %1826
  %1836 = fsub fast float 2.000000e+00, %1835
  %1837 = call float @dx.op.unary.f32(i32 24, float %1836)  ; Sqrt(value)
  %1838 = fmul fast float %1837, %1826
  %1839 = fcmp fast ogt float %1819, 0.000000e+00
  %1840 = fcmp fast olt float %1819, 0.000000e+00
  %1841 = zext i1 %1839 to i32
  %1842 = zext i1 %1840 to i32
  %1843 = sub nsw i32 %1841, %1842
  %1844 = sitofp i32 %1843 to float
  %1845 = fmul fast float %1838, %1844
  %1846 = call float @dx.op.unary.f32(i32 12, float %1834)  ; Cos(value)
  %1847 = call float @dx.op.unary.f32(i32 6, float %1846)  ; FAbs(value)
  %1848 = fmul fast float %1845, %1847
  %1849 = fcmp fast ogt float %1820, 0.000000e+00
  %1850 = fcmp fast olt float %1820, 0.000000e+00
  %1851 = zext i1 %1849 to i32
  %1852 = zext i1 %1850 to i32
  %1853 = sub nsw i32 %1851, %1852
  %1854 = sitofp i32 %1853 to float
  %1855 = fmul fast float %1838, %1854
  %1856 = call float @dx.op.unary.f32(i32 13, float %1834)  ; Sin(value)
  %1857 = call float @dx.op.unary.f32(i32 6, float %1856)  ; FAbs(value)
  %1858 = fmul fast float %1855, %1857
  %1859 = fcmp fast ogt float %1824, 0.000000e+00
  %1860 = fcmp fast olt float %1824, 0.000000e+00
  %1861 = zext i1 %1859 to i32
  %1862 = zext i1 %1860 to i32
  %1863 = sub nsw i32 %1861, %1862
  %1864 = sitofp i32 %1863 to float
  %1865 = fsub fast float 1.000000e+00, %1835
  %1866 = fmul fast float %1864, %1865
  %1867 = call float @dx.op.dot3.f32(i32 55, float %1848, float %1858, float %1866, float %90, float %91, float %92)  ; Dot3(ax,ay,az,bx,by,bz)
  %1868 = fcmp fast ogt float %1867, 0.000000e+00
  %1869 = or i1 %138, %1868
  br i1 %1869, label %1870, label %1918

; <label>:1870                                    ; preds = %1833
  %1871 = call float @dx.op.unary.f32(i32 7, float %1867)  ; Saturate(value)
  %1872 = fptoui float %1813 to i32
  %1873 = fptoui float %1804 to i32
  %1874 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1875 = extractvalue %dx.types.CBufRet.i32 %1874, 2
  %1876 = mul i32 %1875, %1370
  %1877 = mul i32 %1875, %1371
  %1878 = add i32 %1876, %1872
  %1879 = add i32 %1877, %1873
  %1880 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1881 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1880, i32 0, i32 %1878, i32 %1879, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1882 = extractvalue %dx.types.ResRet.f32 %1881, 0
  %1883 = extractvalue %dx.types.ResRet.f32 %1881, 1
  %1884 = extractvalue %dx.types.ResRet.f32 %1881, 2
  %1885 = fmul fast float %1882, %1871
  %1886 = fmul fast float %1883, %1871
  %1887 = fmul fast float %1884, %1871
  %1888 = fadd fast float %1885, %1806
  %1889 = fadd fast float %1886, %1807
  %1890 = fadd fast float %1887, %1808
  br i1 %138, label %1891, label %1913

; <label>:1891                                    ; preds = %1870
  %1892 = call float @dx.op.dot3.f32(i32 55, float %90, float %91, float %92, float %1848, float %1858, float %1866)  ; Dot3(ax,ay,az,bx,by,bz)
  %1893 = fsub fast float 5.000000e-01, %1892
  %1894 = fmul fast float %1893, 0x3FDC71C720000000
  %1895 = call float @dx.op.unary.f32(i32 7, float %1894)  ; Saturate(value)
  %1896 = call float @dx.op.dot3.f32(i32 55, float %1391, float %1392, float %1393, float %1848, float %1858, float %1866)  ; Dot3(ax,ay,az,bx,by,bz)
  %1897 = fsub fast float -0.000000e+00, %1896
  %1898 = call float @dx.op.unary.f32(i32 7, float %1897)  ; Saturate(value)
  %1899 = fmul fast float %1898, %1898
  %1900 = fmul fast float %1899, 0x3FE47AE140000000
  %1901 = fsub fast float 1.000000e+00, %1900
  %1902 = fmul fast float %1899, 0x400015BFA0000000
  %1903 = fsub fast float 0x400921FB60000000, %1902
  %1904 = fmul fast float %1903, %1901
  %1905 = fdiv fast float 0x3FD70A3D80000000, %1904
  %1906 = fmul fast float %1905, %1895
  %1907 = fmul fast float %1906, %1882
  %1908 = fmul fast float %1906, %1883
  %1909 = fmul fast float %1906, %1884
  %1910 = fadd fast float %1907, %1809
  %1911 = fadd fast float %1908, %1810
  %1912 = fadd fast float %1909, %1811
  br label %1913

; <label>:1913                                    ; preds = %1891, %1870
  %1914 = phi float [ %1910, %1891 ], [ %1809, %1870 ]
  %1915 = phi float [ %1911, %1891 ], [ %1810, %1870 ]
  %1916 = phi float [ %1912, %1891 ], [ %1811, %1870 ]
  %1917 = add nsw i32 %1812, 1
  br label %1918

; <label>:1918                                    ; preds = %1913, %1833
  %1919 = phi float [ %1888, %1913 ], [ %1806, %1833 ]
  %1920 = phi float [ %1889, %1913 ], [ %1807, %1833 ]
  %1921 = phi float [ %1890, %1913 ], [ %1808, %1833 ]
  %1922 = phi float [ %1914, %1913 ], [ %1809, %1833 ]
  %1923 = phi float [ %1915, %1913 ], [ %1810, %1833 ]
  %1924 = phi float [ %1916, %1913 ], [ %1811, %1833 ]
  %1925 = phi i32 [ %1917, %1913 ], [ %1812, %1833 ]
  %1926 = fadd fast float %1813, 1.000000e+00
  %1927 = fcmp fast olt float %1926, %1793
  br i1 %1927, label %1805, label %1928

; <label>:1928                                    ; preds = %1918
  %1929 = fadd fast float %1804, 1.000000e+00
  %1930 = fcmp fast olt float %1929, %1793
  br i1 %1930, label %1796, label %1931

; <label>:1931                                    ; preds = %1928
  br label %1932

; <label>:1932                                    ; preds = %1931, %1790
  %1933 = phi float [ 0.000000e+00, %1790 ], [ %1919, %1931 ]
  %1934 = phi float [ 0.000000e+00, %1790 ], [ %1920, %1931 ]
  %1935 = phi float [ 0.000000e+00, %1790 ], [ %1921, %1931 ]
  %1936 = phi float [ 0.000000e+00, %1790 ], [ %1922, %1931 ]
  %1937 = phi float [ 0.000000e+00, %1790 ], [ %1923, %1931 ]
  %1938 = phi float [ 0.000000e+00, %1790 ], [ %1924, %1931 ]
  %1939 = phi i32 [ 0, %1790 ], [ %1925, %1931 ]
  %1940 = icmp sgt i32 %1939, 0
  br i1 %1940, label %1941, label %1950

; <label>:1941                                    ; preds = %1932
  %1942 = sitofp i32 %1939 to float
  %1943 = fdiv fast float 0x401921FB60000000, %1942
  %1944 = fmul fast float %1943, %1933
  %1945 = fmul fast float %1943, %1934
  %1946 = fmul fast float %1943, %1935
  %1947 = fmul fast float %1943, %1936
  %1948 = fmul fast float %1943, %1937
  %1949 = fmul fast float %1943, %1938
  br label %1950

; <label>:1950                                    ; preds = %1941, %1932, %1788, %1784, %1524, %1398
  %1951 = phi float [ %1785, %1784 ], [ %1944, %1941 ], [ %1933, %1932 ], [ 0.000000e+00, %1788 ], [ %1521, %1398 ], [ %1521, %1524 ]
  %1952 = phi float [ %1786, %1784 ], [ %1945, %1941 ], [ %1934, %1932 ], [ 0.000000e+00, %1788 ], [ %1522, %1398 ], [ %1522, %1524 ]
  %1953 = phi float [ %1787, %1784 ], [ %1946, %1941 ], [ %1935, %1932 ], [ 0.000000e+00, %1788 ], [ %1523, %1398 ], [ %1523, %1524 ]
  %1954 = phi float [ 0.000000e+00, %1784 ], [ %1947, %1941 ], [ %1936, %1932 ], [ 0.000000e+00, %1788 ], [ 0.000000e+00, %1398 ], [ %1563, %1524 ]
  %1955 = phi float [ 0.000000e+00, %1784 ], [ %1948, %1941 ], [ %1937, %1932 ], [ 0.000000e+00, %1788 ], [ 0.000000e+00, %1398 ], [ %1564, %1524 ]
  %1956 = phi float [ 0.000000e+00, %1784 ], [ %1949, %1941 ], [ %1938, %1932 ], [ 0.000000e+00, %1788 ], [ 0.000000e+00, %1398 ], [ %1565, %1524 ]
  %1957 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1958 = extractvalue %dx.types.CBufRet.i32 %1957, 2
  %1959 = icmp eq i32 %1958, 0
  br i1 %1959, label %1977, label %1960

; <label>:1960                                    ; preds = %1950
  %1961 = extractvalue %dx.types.CBufRet.f32 %206, 3
  %1962 = call float @dx.op.binary.f32(i32 36, float %115, float %1961)  ; FMin(a,b)
  %1963 = call float @dx.op.binary.f32(i32 36, float %116, float %1961)  ; FMin(a,b)
  %1964 = call float @dx.op.binary.f32(i32 36, float %117, float %1961)  ; FMin(a,b)
  %1965 = fmul fast float %1962, 0x3F40600000000000
  %1966 = fadd fast float %1965, 0x3FEFFCB940000000
  %1967 = fmul fast float %1963, 0x3F40600000000000
  %1968 = fadd fast float %1967, 0x3FEFFCB940000000
  %1969 = fmul fast float %1964, 0x3F40600000000000
  %1970 = fadd fast float %1969, 0x3FEFFCB940000000
  %1971 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %1966)  ; FMax(a,b)
  %1972 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %1968)  ; FMax(a,b)
  %1973 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %1970)  ; FMax(a,b)
  %1974 = fmul fast float %1971, %1951
  %1975 = fmul fast float %1972, %1952
  %1976 = fmul fast float %1973, %1953
  br label %1977

; <label>:1977                                    ; preds = %1960, %1950
  %1978 = phi float [ %1974, %1960 ], [ %1951, %1950 ]
  %1979 = phi float [ %1975, %1960 ], [ %1952, %1950 ]
  %1980 = phi float [ %1976, %1960 ], [ %1953, %1950 ]
  %1981 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %1982 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1981, i32 0, i32 %1370, i32 %1371, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1983 = extractvalue %dx.types.ResRet.f32 %1982, 0
  %1984 = call float @dx.op.binary.f32(i32 35, float %1983, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1985 = fmul fast float %1978, 0x3FD45F3060000000
  %1986 = fmul fast float %1979, 0x3FD45F3060000000
  %1987 = fmul fast float %1980, 0x3FD45F3060000000
  %1988 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1988, i32 %33, i32 %34, i32 undef, float %1985, float %1986, float %1987, float %1984, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1989 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1989, i32 %33, i32 %34, i32 undef, float %1954, float %1955, float %1956, float %1954, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1990 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1991 = extractvalue %dx.types.CBufRet.f32 %1990, 1
  %1992 = fadd fast float %62, 0x3FC99999A0000000
  %1993 = fsub fast float %1992, %1991
  %1994 = fmul fast float %1993, 5.000000e+00
  %1995 = call float @dx.op.unary.f32(i32 7, float %1994)  ; Saturate(value)
  %1996 = call float @dx.op.binary.f32(i32 35, float %62, float 0x3F847AE140000000)  ; FMax(a,b)
  %1997 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1998 = extractvalue %dx.types.CBufRet.f32 %1997, 1
  %1999 = extractvalue %dx.types.CBufRet.f32 %1997, 0
  %2000 = select i1 %138, float %1998, float %1999
  %2001 = fsub fast float %2000, %1996
  %2002 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %2003 = extractvalue %dx.types.CBufRet.f32 %2002, 2
  %2004 = fmul fast float %2003, %2001
  %2005 = call float @dx.op.unary.f32(i32 7, float %2004)  ; Saturate(value)
  %2006 = fcmp fast olt float %1995, 1.000000e+00
  %2007 = fcmp fast olt float %2005, 1.000000e+00
  %2008 = and i1 %2006, %2007
  %2009 = icmp eq i32 %79, 4
  %2010 = or i1 %2009, %2008
  br i1 %2010, label %2011, label %2283

; <label>:2011                                    ; preds = %1977
  %2012 = call float @dx.op.binary.f32(i32 35, float %1996, float 0x3FC99999A0000000)  ; FMax(a,b)
  %2013 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2014 = extractvalue %dx.types.CBufRet.i32 %2013, 2
  %2015 = uitofp i32 %2014 to float
  %2016 = fmul fast float %2015, 0x3FC98844E0000000
  %2017 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2018 = extractvalue %dx.types.CBufRet.f32 %2017, 0
  %2019 = call float @dx.op.unary.f32(i32 23, float %2016)  ; Log(value)
  %2020 = call float @dx.op.binary.f32(i32 35, float %2019, float 0.000000e+00)  ; FMax(a,b)
  %2021 = call float @dx.op.binary.f32(i32 36, float %2020, float %2018)  ; FMin(a,b)
  br label %2022

; <label>:2022                                    ; preds = %2173, %2011
  %2023 = phi float [ 0.000000e+00, %2011 ], [ %2260, %2173 ]
  %2024 = phi float [ 0.000000e+00, %2011 ], [ %2261, %2173 ]
  %2025 = phi float [ 0.000000e+00, %2011 ], [ %2262, %2173 ]
  %2026 = phi i32 [ 0, %2011 ], [ %2263, %2173 ]
  %2027 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2028 = extractvalue %dx.types.CBufRet.i32 %2027, 1
  %2029 = mul i32 %33, 1664525
  %2030 = mul i32 %34, 1664525
  %2031 = mul i32 %2028, 1664525
  %2032 = add i32 %2029, 1013904223
  %2033 = add i32 %2030, 1013904223
  %2034 = add i32 %2031, 1013904223
  %2035 = mul i32 %2034, %2033
  %2036 = add i32 %2032, %2035
  %2037 = mul i32 %2036, %2034
  %2038 = add i32 %2037, %2033
  %2039 = mul i32 %2038, %2036
  %2040 = add i32 %2039, %2034
  %2041 = mul i32 %2040, %2038
  %2042 = add i32 %2041, %2036
  %2043 = mul i32 %2042, %2040
  %2044 = add i32 %2043, %2038
  %2045 = lshr i32 %2042, 16
  %2046 = uitofp i32 %2026 to float
  %2047 = fmul fast float %2046, 2.500000e-01
  %2048 = uitofp i32 %2045 to float
  %2049 = fmul fast float %2048, 0x3EF0000000000000
  %2050 = fadd fast float %2049, %2047
  %2051 = call float @dx.op.unary.f32(i32 22, float %2050)  ; Frc(value)
  %2052 = call i32 @dx.op.unary.i32(i32 30, i32 %2026)  ; Bfrev(value)
  %2053 = xor i32 %2044, %2052
  %2054 = lshr i32 %2053, 16
  %2055 = uitofp i32 %2054 to float
  %2056 = fmul fast float %2055, 0x3EECCCCCC0000000
  %2057 = fadd fast float %2056, 0x3FA9999A00000000
  switch i32 %79, label %2173 [
    i32 1, label %2058
    i32 10, label %2058
    i32 2, label %2058
    i32 5, label %2058
    i32 3, label %2058
    i32 4, label %2058
    i32 6, label %2058
    i32 9, label %2058
    i32 7, label %2162
  ]

; <label>:2058                                    ; preds = %2022, %2022, %2022, %2022, %2022, %2022, %2022, %2022
  %2059 = fcmp fast une float %136, 0.000000e+00
  br i1 %2059, label %2060, label %2070

; <label>:2060                                    ; preds = %2058
  %2061 = fmul fast float %135, %91
  %2062 = fmul fast float %134, %92
  %2063 = fsub fast float %2061, %2062
  %2064 = fmul fast float %133, %92
  %2065 = fmul fast float %135, %90
  %2066 = fsub fast float %2064, %2065
  %2067 = fmul fast float %134, %90
  %2068 = fmul fast float %133, %91
  %2069 = fsub fast float %2067, %2068
  br label %2089

; <label>:2070                                    ; preds = %2058
  %2071 = fcmp fast oge float %92, 0.000000e+00
  %2072 = select i1 %2071, float 1.000000e+00, float -1.000000e+00
  %2073 = fadd fast float %2072, %92
  %2074 = fdiv fast float 1.000000e+00, %2073
  %2075 = fsub fast float -0.000000e+00, %2074
  %2076 = fmul fast float %90, %91
  %2077 = fmul fast float %2076, %2075
  %2078 = fmul fast float %90, %90
  %2079 = fmul fast float %2078, %2072
  %2080 = fmul fast float %2079, %2075
  %2081 = fadd fast float %2080, 1.000000e+00
  %2082 = fmul fast float %2077, %2072
  %2083 = fmul fast float %90, %2072
  %2084 = fsub fast float -0.000000e+00, %2083
  %2085 = fmul fast float %91, %91
  %2086 = fmul fast float %2085, %2075
  %2087 = fadd fast float %2086, %2072
  %2088 = fsub fast float -0.000000e+00, %91
  br label %2089

; <label>:2089                                    ; preds = %2070, %2060
  %2090 = phi float [ %133, %2060 ], [ %2081, %2070 ]
  %2091 = phi float [ %134, %2060 ], [ %2082, %2070 ]
  %2092 = phi float [ %135, %2060 ], [ %2084, %2070 ]
  %2093 = phi float [ %2063, %2060 ], [ %2077, %2070 ]
  %2094 = phi float [ %2066, %2060 ], [ %2087, %2070 ]
  %2095 = phi float [ %2069, %2060 ], [ %2088, %2070 ]
  %2096 = fmul fast float %2012, %2012
  br i1 %2059, label %2097, label %2104

; <label>:2097                                    ; preds = %2089
  %2098 = fadd fast float %136, 1.000000e+00
  %2099 = fmul fast float %2096, %2098
  %2100 = call float @dx.op.binary.f32(i32 35, float %2099, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2101 = fsub fast float 1.000000e+00, %136
  %2102 = fmul fast float %2096, %2101
  %2103 = call float @dx.op.binary.f32(i32 35, float %2102, float 0x3F50624DE0000000)  ; FMax(a,b)
  br label %2104

; <label>:2104                                    ; preds = %2097, %2089
  %2105 = phi float [ %2100, %2097 ], [ %2096, %2089 ]
  %2106 = phi float [ %2103, %2097 ], [ %2096, %2089 ]
  %2107 = fmul fast float %2090, %1391
  %2108 = call float @dx.op.tertiary.f32(i32 46, float %2091, float %1392, float %2107)  ; FMad(a,b,c)
  %2109 = call float @dx.op.tertiary.f32(i32 46, float %2092, float %1393, float %2108)  ; FMad(a,b,c)
  %2110 = fmul fast float %2093, %1391
  %2111 = call float @dx.op.tertiary.f32(i32 46, float %2094, float %1392, float %2110)  ; FMad(a,b,c)
  %2112 = call float @dx.op.tertiary.f32(i32 46, float %2095, float %1393, float %2111)  ; FMad(a,b,c)
  %2113 = fmul fast float %1391, %90
  %2114 = call float @dx.op.tertiary.f32(i32 46, float %91, float %1392, float %2113)  ; FMad(a,b,c)
  %2115 = call float @dx.op.tertiary.f32(i32 46, float %92, float %1393, float %2114)  ; FMad(a,b,c)
  %2116 = fmul fast float %2109, %2105
  %2117 = fmul fast float %2112, %2106
  %2118 = call float @dx.op.dot3.f32(i32 55, float %2116, float %2117, float %2115, float %2116, float %2117, float %2115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2119 = call float @dx.op.unary.f32(i32 25, float %2118)  ; Rsqrt(value)
  %2120 = fmul fast float %2119, %2116
  %2121 = fmul fast float %2119, %2117
  %2122 = fmul fast float %2119, %2115
  %2123 = fmul fast float %2051, 0x401921FB60000000
  %2124 = fadd fast float %2122, 1.000000e+00
  %2125 = fmul fast float %2124, %2057
  %2126 = fsub fast float %2125, %2122
  %2127 = fmul fast float %2126, %2126
  %2128 = fsub fast float 1.000000e+00, %2127
  %2129 = call float @dx.op.unary.f32(i32 7, float %2128)  ; Saturate(value)
  %2130 = call float @dx.op.unary.f32(i32 24, float %2129)  ; Sqrt(value)
  %2131 = call float @dx.op.unary.f32(i32 12, float %2123)  ; Cos(value)
  %2132 = fmul fast float %2131, %2130
  %2133 = call float @dx.op.unary.f32(i32 13, float %2123)  ; Sin(value)
  %2134 = fmul fast float %2133, %2130
  %2135 = fadd fast float %2132, %2120
  %2136 = fadd fast float %2134, %2121
  %2137 = fmul fast float %2135, %2105
  %2138 = fmul fast float %2136, %2106
  %2139 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2125)  ; FMax(a,b)
  %2140 = call float @dx.op.dot3.f32(i32 55, float %2137, float %2138, float %2139, float %2137, float %2138, float %2139)  ; Dot3(ax,ay,az,bx,by,bz)
  %2141 = call float @dx.op.unary.f32(i32 25, float %2140)  ; Rsqrt(value)
  %2142 = fmul fast float %2141, %2137
  %2143 = fmul fast float %2138, %2141
  %2144 = fmul fast float %2141, %2139
  %2145 = fmul fast float %2142, %2090
  %2146 = call float @dx.op.tertiary.f32(i32 46, float %2143, float %2093, float %2145)  ; FMad(a,b,c)
  %2147 = call float @dx.op.tertiary.f32(i32 46, float %2144, float %90, float %2146)  ; FMad(a,b,c)
  %2148 = fmul fast float %2142, %2091
  %2149 = call float @dx.op.tertiary.f32(i32 46, float %2143, float %2094, float %2148)  ; FMad(a,b,c)
  %2150 = call float @dx.op.tertiary.f32(i32 46, float %2144, float %91, float %2149)  ; FMad(a,b,c)
  %2151 = fmul fast float %2142, %2092
  %2152 = call float @dx.op.tertiary.f32(i32 46, float %2143, float %2095, float %2151)  ; FMad(a,b,c)
  %2153 = call float @dx.op.tertiary.f32(i32 46, float %2144, float %92, float %2152)  ; FMad(a,b,c)
  %2154 = call float @dx.op.dot3.f32(i32 55, float %1391, float %1392, float %1393, float %2147, float %2150, float %2153)  ; Dot3(ax,ay,az,bx,by,bz)
  %2155 = fmul fast float %2154, 2.000000e+00
  %2156 = fmul fast float %2155, %2147
  %2157 = fmul fast float %2155, %2150
  %2158 = fmul fast float %2155, %2153
  %2159 = fsub fast float %2156, %1391
  %2160 = fsub fast float %2157, %1392
  %2161 = fsub fast float %2158, %1393
  br label %2173

; <label>:2162                                    ; preds = %2022
  %2163 = fmul fast float %2051, 0x401921FB60000000
  %2164 = fmul fast float %2055, 0x3EFCCCCCC0000000
  %2165 = fsub fast float 0x3FECCCCCC0000000, %2164
  %2166 = fmul fast float %2165, %2165
  %2167 = fsub fast float 1.000000e+00, %2166
  %2168 = call float @dx.op.unary.f32(i32 24, float %2167)  ; Sqrt(value)
  %2169 = call float @dx.op.unary.f32(i32 12, float %2163)  ; Cos(value)
  %2170 = fmul fast float %2169, %2168
  %2171 = call float @dx.op.unary.f32(i32 13, float %2163)  ; Sin(value)
  %2172 = fmul fast float %2171, %2168
  br label %2173

; <label>:2173                                    ; preds = %2162, %2104, %2022
  %2174 = phi float [ 1.000000e+00, %2162 ], [ 1.000000e+00, %2104 ], [ 0.000000e+00, %2022 ]
  %2175 = phi float [ %2170, %2162 ], [ %2159, %2104 ], [ 0.000000e+00, %2022 ]
  %2176 = phi float [ %2172, %2162 ], [ %2160, %2104 ], [ 0.000000e+00, %2022 ]
  %2177 = phi float [ %2165, %2162 ], [ %2161, %2104 ], [ 0.000000e+00, %2022 ]
  %2178 = call float @dx.op.dot3.f32(i32 55, float %2175, float %2176, float %2177, float %2175, float %2176, float %2177)  ; Dot3(ax,ay,az,bx,by,bz)
  %2179 = call float @dx.op.unary.f32(i32 25, float %2178)  ; Rsqrt(value)
  %2180 = fmul fast float %2179, %2175
  %2181 = fmul fast float %2179, %2176
  %2182 = fmul fast float %2179, %2177
  %2183 = call float @dx.op.unary.f32(i32 6, float %2180)  ; FAbs(value)
  %2184 = call float @dx.op.unary.f32(i32 6, float %2181)  ; FAbs(value)
  %2185 = call float @dx.op.unary.f32(i32 6, float %2182)  ; FAbs(value)
  %2186 = fsub fast float 1.000000e+00, %2185
  %2187 = call float @dx.op.unary.f32(i32 24, float %2186)  ; Sqrt(value)
  %2188 = call float @dx.op.binary.f32(i32 36, float %2183, float %2184)  ; FMin(a,b)
  %2189 = call float @dx.op.binary.f32(i32 35, float %2183, float %2184)  ; FMax(a,b)
  %2190 = fadd fast float %2189, 0x3BF0000000000000
  %2191 = fdiv fast float %2188, %2190
  %2192 = fmul fast float %2191, 0x3F99BE1040000000
  %2193 = fsub fast float 0x3FA5746D00000000, %2192
  %2194 = fmul fast float %2193, %2191
  %2195 = fadd fast float %2194, 0x3FB692C5C0000000
  %2196 = fmul fast float %2195, %2191
  %2197 = fadd fast float %2196, 0xBFCFA8A1C0000000
  %2198 = fmul fast float %2197, %2191
  %2199 = fadd fast float %2198, 0x3F79384B40000000
  %2200 = fmul fast float %2199, %2191
  %2201 = fadd fast float %2200, 0x3FE45BF7C0000000
  %2202 = fmul fast float %2201, %2191
  %2203 = fadd fast float %2202, 0x3ED10F8960000000
  %2204 = fcmp fast olt float %2183, %2184
  %2205 = fsub fast float 0x3FEFFFF780000000, %2202
  %2206 = select i1 %2204, float %2205, float %2203
  %2207 = fmul fast float %2206, %2187
  %2208 = fsub fast float %2187, %2207
  %2209 = fcmp fast olt float %2182, 0.000000e+00
  %2210 = fsub fast float 1.000000e+00, %2207
  %2211 = fsub fast float 1.000000e+00, %2208
  %2212 = select i1 %2209, float %2210, float %2208
  %2213 = select i1 %2209, float %2211, float %2207
  %2214 = bitcast float %2212 to i32
  %2215 = bitcast float %2213 to i32
  %2216 = bitcast float %2180 to i32
  %2217 = bitcast float %2181 to i32
  %2218 = and i32 %2216, -2147483648
  %2219 = and i32 %2217, -2147483648
  %2220 = xor i32 %2214, %2218
  %2221 = xor i32 %2215, %2219
  %2222 = bitcast i32 %2220 to float
  %2223 = bitcast i32 %2221 to float
  %2224 = fmul fast float %2222, 5.000000e-01
  %2225 = fmul fast float %2223, 5.000000e-01
  %2226 = fadd fast float %2224, 5.000000e-01
  %2227 = fadd fast float %2225, 5.000000e-01
  %2228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2229 = extractvalue %dx.types.CBufRet.f32 %2228, 0
  %2230 = extractvalue %dx.types.CBufRet.f32 %2228, 1
  %2231 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2232 = extractvalue %dx.types.CBufRet.f32 %2231, 0
  %2233 = extractvalue %dx.types.CBufRet.f32 %2231, 1
  %2234 = fmul fast float %2226, %2232
  %2235 = fmul fast float %2227, %2233
  %2236 = extractvalue %dx.types.CBufRet.f32 %2231, 2
  %2237 = extractvalue %dx.types.CBufRet.f32 %2231, 3
  %2238 = uitofp i32 %1370 to float
  %2239 = uitofp i32 %1371 to float
  %2240 = fmul fast float %2229, %2238
  %2241 = fmul fast float %2230, %2239
  %2242 = fadd fast float %2236, %2240
  %2243 = fadd fast float %2242, %2234
  %2244 = fadd fast float %2237, %2241
  %2245 = fadd fast float %2244, %2235
  %2246 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2247 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2248 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2246, %dx.types.Handle %2247, float %2243, float %2245, float undef, float undef, i32 0, i32 0, i32 undef, float %2021)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2249 = extractvalue %dx.types.ResRet.f32 %2248, 0
  %2250 = extractvalue %dx.types.ResRet.f32 %2248, 1
  %2251 = extractvalue %dx.types.ResRet.f32 %2248, 2
  %2252 = fmul fast float %2249, %2174
  %2253 = fmul fast float %2250, %2174
  %2254 = fmul fast float %2251, %2174
  %2255 = call float @dx.op.dot3.f32(i32 55, float %2252, float %2253, float %2254, float 0x3FCB367A00000000, float 0x3FE6E2EB20000000, float 0x3FB27BB300000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2256 = fadd fast float %2255, 1.000000e+00
  %2257 = fdiv fast float %2252, %2256
  %2258 = fdiv fast float %2253, %2256
  %2259 = fdiv fast float %2254, %2256
  %2260 = fadd fast float %2257, %2023
  %2261 = fadd fast float %2258, %2024
  %2262 = fadd fast float %2259, %2025
  %2263 = add nuw nsw i32 %2026, 1
  %2264 = icmp eq i32 %2263, 4
  br i1 %2264, label %2265, label %2022

; <label>:2265                                    ; preds = %2173
  %2266 = fmul fast float %2260, 2.500000e-01
  %2267 = fmul fast float %2261, 2.500000e-01
  %2268 = fmul fast float %2262, 2.500000e-01
  %2269 = call float @dx.op.dot3.f32(i32 55, float %2266, float %2267, float %2268, float 0x3FCB367A00000000, float 0x3FE6E2EB20000000, float 0x3FB27BB300000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2270 = fsub fast float 1.000000e+00, %2269
  %2271 = fdiv fast float %2266, %2270
  %2272 = fdiv fast float %2267, %2270
  %2273 = fdiv fast float %2268, %2270
  %2274 = fsub fast float %1985, %2271
  %2275 = fsub fast float %1986, %2272
  %2276 = fsub fast float %1987, %2273
  %2277 = fmul fast float %2274, %1995
  %2278 = fmul fast float %2275, %1995
  %2279 = fmul fast float %2276, %1995
  %2280 = fadd fast float %2277, %2271
  %2281 = fadd fast float %2278, %2272
  %2282 = fadd fast float %2279, %2273
  br label %2283

; <label>:2283                                    ; preds = %2265, %1977
  %2284 = phi float [ %2280, %2265 ], [ %1985, %1977 ]
  %2285 = phi float [ %2281, %2265 ], [ %1986, %1977 ]
  %2286 = phi float [ %2282, %2265 ], [ %1987, %1977 ]
  br i1 %2009, label %2296, label %2287

; <label>:2287                                    ; preds = %2283
  %2288 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %2289 = extractvalue %dx.types.CBufRet.i32 %2288, 0
  %2290 = icmp eq i32 %2289, 0
  br i1 %2290, label %2291, label %2296

; <label>:2291                                    ; preds = %2287
  %2292 = fsub fast float 1.000000e+00, %2005
  %2293 = fmul fast float %2284, %2292
  %2294 = fmul fast float %2285, %2292
  %2295 = fmul fast float %2286, %2292
  br label %2296

; <label>:2296                                    ; preds = %2291, %2287, %2283
  %2297 = phi float [ %2284, %2283 ], [ %2293, %2291 ], [ %2284, %2287 ]
  %2298 = phi float [ %2285, %2283 ], [ %2294, %2291 ], [ %2285, %2287 ]
  %2299 = phi float [ %2286, %2283 ], [ %2295, %2291 ], [ %2286, %2287 ]
  %2300 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2300, i32 %33, i32 %34, i32 undef, float %2297, float %2298, float %2299, float %2297, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2305

; <label>:2301                                    ; preds = %132
  %2302 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2302, i32 %33, i32 %34, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2303 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2303, i32 %33, i32 %34, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2304 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2304, i32 %33, i32 %34, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2305

; <label>:2305                                    ; preds = %2301, %2296
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!36}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !25, !29, !33}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !14, !16, !18, !19, !20, !21, !22, !23, !24}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!14 = !{i32 7, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !15}
!19 = !{i32 10, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !15}
!20 = !{i32 11, %"class.Texture2D<float>"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{i32 12, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!24 = !{i32 15, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!25 = !{!26, !27, !28}
!26 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!27 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!28 = !{i32 2, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!29 = !{!30, !31, !32}
!30 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 504, null}
!31 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!32 = !{i32 2, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 2, i32 1, i32 44, null}
!33 = !{!34, !35}
!34 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!35 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!36 = !{void ()* @ScreenProbeIntegrateCS, !"ScreenProbeIntegrateCS", null, !4, !37}
!37 = !{i32 0, i64 16, i32 4, !38, i32 5, !39}
!38 = !{i32 8, i32 8, i32 1}
!39 = !{i32 0}
