;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: b77dcad48a80225ec06fa43f4a1dee50
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:   32
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:   36
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:   40
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:   44
;       uint ScreenProbeDownsampleFactor;             ; Offset:   48
;       uint2 ScreenProbeViewSize;                    ; Offset:   56
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:   64
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:   72
;       float ScreenProbeGatherMaxMip;                ; Offset:   80
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:   84
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:   88
;       float2 SampleRadianceProbeUVMul;              ; Offset:   96
;       float2 SampleRadianceProbeUVAdd;              ; Offset:  104
;       float2 SampleRadianceAtlasUVMul;              ; Offset:  112
;       uint NumUniformScreenProbes;                  ; Offset:  124
;       uint MaxNumAdaptiveProbes;                    ; Offset:  128
;       int FixedJitterIndex;                         ; Offset:  132
;       uint UseShortRangeAO;                         ; Offset:  440
;       float MaxRoughnessToTrace;                    ; Offset:  448
;       float MaxRoughnessToTraceForFoliage;          ; Offset:  452
;       float InvRoughnessFadeLength;                 ; Offset:  456
;       float FullResolutionJitterWidth;              ; Offset:  464
;       float MaxRoughnessToEvaluateRoughSpecular;    ; Offset:  468
;       uint ApplyMaterialAO;                         ; Offset:  472
;       float MaxAOMultibounceAlbedo;                 ; Offset:  476
;       uint LumenReflectionInputIsSSR;               ; Offset:  480
;       uint DefaultDiffuseIntegrationMethod;         ; Offset:  484
;       uint2 ViewportTileDimensions;                 ; Offset:  488
;       uint2 ViewportTileDimensionsWithOverflow;     ; Offset:  496
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   504
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; Resource bind info for AdaptiveScreenProbeData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for IntegrateTileData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB2            cb2     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S0   s3,space1000     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S1             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T3             t3     1
; SceneTexturesStruct_GBufferFTexture   texture     f32          2d      T4             t4     1
; BlueNoise_Vec2Texture             texture     f32          2d      T5             t5     1
; ScreenProbeSceneDepth             texture     u32          2d      T6             t6     1
; AdaptiveScreenProbeData           texture  struct         r/o      T7             t7     1
; ScreenTileAdaptiveProbeHeader     texture     u32          2d      T8             t8     1
; ScreenTileAdaptiveProbeIndices    texture     u32          2d      T9             t9     1
; ScreenProbeMoving                 texture     f32          2d     T10            t10     1
; ScreenProbeLightSampleDirection   texture     f32          2d     T11            t11     1
; ScreenProbeLightSampleFlags       texture     u32          2d     T12            t12     1
; ScreenProbeLightSampleRadiance    texture     f32          2d     T13            t13     1
; LightSampleTraceHit               texture     u32          2d     T14            t14     1
; ScreenProbeRadianceSHAmbient      texture     f32          2d     T15            t15     1
; ScreenProbeRadianceSHDirectional   texture     f32          2d     T16            t16     1
; ScreenProbeRadianceWithBorder     texture     f32          2d     T17            t17     1
; IntegrateTileData                 texture  struct         r/o     T18            t18     1
; RWDiffuseIndirect                     UAV     f32          2d      U0             u0     1
; RWBackfaceDiffuseIndirect             UAV     f32          2d      U1             u1     1
; RWRoughSpecularIndirect               UAV     f32          2d      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, float, float, float, i32, float, i32, i32, <2 x i32>, <2 x i32> }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ScreenProbeIntegrateCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 504 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %32 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %33 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)  ; ThreadIdInGroup(component)
  %34 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.i32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.i32 %34, 1
  %37 = shl i32 %36, 1
  %38 = mul i32 %37, %35
  %39 = add i32 %38, %31
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %41 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %40, i32 %39, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %42 = extractvalue %dx.types.ResRet.i32 %41, 0
  %43 = lshr i32 %42, 16
  %44 = shl i32 %42, 3
  %45 = and i32 %44, 524280
  %46 = shl nuw nsw i32 %43, 3
  %47 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.i32 %47, 0
  %49 = extractvalue %dx.types.CBufRet.i32 %47, 1
  %50 = add i32 %48, %32
  %51 = add i32 %50, %45
  %52 = add i32 %49, %33
  %53 = add i32 %52, %46
  %54 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %55 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %54, i32 0, i32 %51, i32 %53, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %56 = extractvalue %dx.types.ResRet.f32 %55, 0
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = fmul fast float %58, %56
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %61 = fadd fast float %59, %60
  %62 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %63 = fmul fast float %62, %56
  %64 = extractvalue %dx.types.CBufRet.f32 %57, 3
  %65 = fsub fast float %63, %64
  %66 = fdiv fast float 1.000000e+00, %65
  %67 = fadd fast float %61, %66
  %68 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %69 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %68, i32 0, i32 %51, i32 %53, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %70 = extractvalue %dx.types.ResRet.f32 %69, 0
  %71 = extractvalue %dx.types.ResRet.f32 %69, 1
  %72 = extractvalue %dx.types.ResRet.f32 %69, 2
  %73 = extractvalue %dx.types.ResRet.f32 %69, 3
  %74 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %75 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %74, i32 0, i32 %51, i32 %53, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %76 = extractvalue %dx.types.ResRet.f32 %75, 0
  %77 = extractvalue %dx.types.ResRet.f32 %75, 1
  %78 = extractvalue %dx.types.ResRet.f32 %75, 2
  %79 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %80 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %79, i32 0, i32 %51, i32 %53, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %81 = extractvalue %dx.types.ResRet.f32 %80, 0
  %82 = extractvalue %dx.types.ResRet.f32 %80, 1
  %83 = extractvalue %dx.types.ResRet.f32 %80, 2
  %84 = extractvalue %dx.types.ResRet.f32 %80, 3
  %85 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %86 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %85, i32 0, i32 %51, i32 %53, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %87 = extractvalue %dx.types.ResRet.f32 %86, 0
  %88 = extractvalue %dx.types.ResRet.f32 %86, 1
  %89 = extractvalue %dx.types.ResRet.f32 %86, 2
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 149)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = fptoui float %91 to i32
  %93 = add i32 %51, %53
  %94 = add i32 %93, %92
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  %97 = fmul fast float %84, 2.550000e+02
  %98 = fadd fast float %97, 5.000000e-01
  %99 = fptoui float %98 to i32
  %100 = and i32 %99, 15
  %101 = fmul fast float %76, 2.000000e+00
  %102 = fmul fast float %77, 2.000000e+00
  %103 = fmul fast float %78, 2.000000e+00
  %104 = fadd fast float %101, -1.000000e+00
  %105 = fadd fast float %102, -1.000000e+00
  %106 = fadd fast float %103, -1.000000e+00
  %107 = and i32 %99, 16
  %108 = icmp eq i32 %107, 0
  %109 = call float @dx.op.dot3.f32(i32 55, float %104, float %105, float %106, float %104, float %105, float %106)  ; Dot3(ax,ay,az,bx,by,bz)
  %110 = call float @dx.op.unary.f32(i32 25, float %109)  ; Rsqrt(value)
  %111 = fmul fast float %110, %104
  %112 = fmul fast float %110, %105
  %113 = fmul fast float %110, %106
  %114 = icmp eq i32 %100, 9
  %115 = select i1 %114, float 0.000000e+00, float %81
  %116 = fmul fast float %82, 0x3FB47AE140000000
  %117 = fsub fast float %87, %116
  %118 = fsub fast float %88, %116
  %119 = fsub fast float %89, %116
  %120 = fmul fast float %115, %117
  %121 = fmul fast float %115, %118
  %122 = fmul fast float %115, %119
  %123 = fadd fast float %120, %116
  %124 = fadd fast float %121, %116
  %125 = fadd fast float %122, %116
  %126 = icmp eq i32 %100, 5
  %127 = or i1 %126, %114
  br i1 %127, label %128, label %149

; <label>:128                                     ; preds = %0
  %129 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 245)  ; CBufferLoadLegacy(handle,regIndex)
  %130 = extractvalue %dx.types.CBufRet.f32 %129, 3
  %131 = fcmp fast ogt float %130, 0.000000e+00
  br i1 %131, label %132, label %136

; <label>:132                                     ; preds = %128
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 2
  %135 = fcmp fast ogt float %134, 0.000000e+00
  br label %136

; <label>:136                                     ; preds = %132, %128
  %137 = phi i1 [ false, %128 ], [ %135, %132 ]
  %138 = fcmp fast une float %130, 0.000000e+00
  %139 = select i1 %138, float 1.000000e+00, float %87
  %140 = select i1 %138, float 1.000000e+00, float %88
  %141 = select i1 %138, float 1.000000e+00, float %89
  br i1 %137, label %142, label %149

; <label>:142                                     ; preds = %136
  %143 = uitofp i1 %96 to float
  %144 = xor i1 %96, true
  %145 = uitofp i1 %144 to float
  %146 = fmul fast float %145, %123
  %147 = fmul fast float %145, %124
  %148 = fmul fast float %145, %125
  br label %149

; <label>:149                                     ; preds = %142, %136, %0
  %150 = phi float [ %123, %0 ], [ %146, %142 ], [ %123, %136 ]
  %151 = phi float [ %124, %0 ], [ %147, %142 ], [ %124, %136 ]
  %152 = phi float [ %125, %0 ], [ %148, %142 ], [ %125, %136 ]
  %153 = phi float [ %87, %0 ], [ %143, %142 ], [ %139, %136 ]
  %154 = phi float [ %88, %0 ], [ %143, %142 ], [ %140, %136 ]
  %155 = phi float [ %89, %0 ], [ %143, %142 ], [ %141, %136 ]
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 3
  %158 = fmul fast float %157, %150
  %159 = fmul fast float %157, %151
  %160 = fmul fast float %157, %152
  %161 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %156, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %156, 2
  %164 = fadd fast float %158, %161
  %165 = fadd fast float %159, %162
  %166 = fadd fast float %160, %163
  br i1 %108, label %181, label %167

; <label>:167                                     ; preds = %149
  %168 = fmul fast float %70, 2.000000e+00
  %169 = fmul fast float %71, 2.000000e+00
  %170 = fmul fast float %72, 2.000000e+00
  %171 = fadd fast float %168, -1.000000e+00
  %172 = fadd fast float %169, -1.000000e+00
  %173 = fadd fast float %170, -1.000000e+00
  %174 = fmul fast float %73, 2.000000e+00
  %175 = fadd fast float %174, -1.000000e+00
  %176 = call float @dx.op.dot3.f32(i32 55, float %171, float %172, float %173, float %171, float %172, float %173)  ; Dot3(ax,ay,az,bx,by,bz)
  %177 = call float @dx.op.unary.f32(i32 25, float %176)  ; Rsqrt(value)
  %178 = fmul fast float %177, %171
  %179 = fmul fast float %177, %172
  %180 = fmul fast float %177, %173
  br label %181

; <label>:181                                     ; preds = %167, %149
  %182 = phi float [ %178, %167 ], [ 0.000000e+00, %149 ]
  %183 = phi float [ %179, %167 ], [ 0.000000e+00, %149 ]
  %184 = phi float [ %180, %167 ], [ 0.000000e+00, %149 ]
  %185 = phi float [ %175, %167 ], [ 0.000000e+00, %149 ]
  %186 = and i32 %99, 11
  %187 = icmp eq i32 %186, 2
  %188 = icmp eq i32 %100, 7
  %189 = icmp eq i32 %100, 0
  br i1 %189, label %3054, label %190

; <label>:190                                     ; preds = %181
  %191 = uitofp i32 %51 to float
  %192 = uitofp i32 %53 to float
  %193 = fadd fast float %191, 5.000000e-01
  %194 = fadd fast float %192, 5.000000e-01
  %195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.f32 %195, 2
  %197 = extractvalue %dx.types.CBufRet.f32 %195, 3
  %198 = fmul fast float %196, %193
  %199 = fmul fast float %197, %194
  %200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %201 = extractvalue %dx.types.CBufRet.f32 %200, 2
  %202 = extractvalue %dx.types.CBufRet.f32 %200, 3
  %203 = fsub fast float %198, %202
  %204 = fsub fast float %199, %201
  %205 = extractvalue %dx.types.CBufRet.f32 %200, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %200, 1
  %207 = fdiv fast float %203, %205
  %208 = fdiv fast float %204, %206
  %209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %210 = extractvalue %dx.types.CBufRet.f32 %209, 0
  %211 = extractvalue %dx.types.CBufRet.f32 %209, 1
  %212 = extractvalue %dx.types.CBufRet.f32 %209, 2
  %213 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %214 = extractvalue %dx.types.CBufRet.f32 %213, 0
  %215 = extractvalue %dx.types.CBufRet.f32 %213, 1
  %216 = extractvalue %dx.types.CBufRet.f32 %213, 2
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 0
  %219 = extractvalue %dx.types.CBufRet.f32 %217, 1
  %220 = extractvalue %dx.types.CBufRet.f32 %217, 2
  %221 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %222 = extractvalue %dx.types.CBufRet.f32 %221, 0
  %223 = extractvalue %dx.types.CBufRet.f32 %221, 1
  %224 = extractvalue %dx.types.CBufRet.f32 %221, 2
  %225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %226 = extractvalue %dx.types.CBufRet.f32 %225, 0
  %227 = extractvalue %dx.types.CBufRet.f32 %225, 1
  %228 = extractvalue %dx.types.CBufRet.f32 %225, 2
  %229 = fmul fast float %226, 2.097152e+06
  %230 = fmul fast float %227, 2.097152e+06
  %231 = fmul fast float %228, 2.097152e+06
  %232 = fadd fast float %229, %222
  %233 = fadd fast float %230, %223
  %234 = fadd fast float %231, %224
  %235 = fmul fast float %207, %67
  %236 = fmul fast float %208, %67
  %237 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.f32 %237, 3
  %239 = bitcast float %238 to i32
  %240 = icmp ne i32 %239, 0
  %241 = select i1 %240, float %207, float %235
  %242 = select i1 %240, float %208, float %236
  %243 = fmul fast float %241, %210
  %244 = call float @dx.op.tertiary.f32(i32 46, float %242, float %214, float %243)  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %67, float %218, float %244)  ; FMad(a,b,c)
  %246 = fadd fast float %232, %245
  %247 = fmul fast float %241, %211
  %248 = call float @dx.op.tertiary.f32(i32 46, float %242, float %215, float %247)  ; FMad(a,b,c)
  %249 = call float @dx.op.tertiary.f32(i32 46, float %67, float %219, float %248)  ; FMad(a,b,c)
  %250 = fadd fast float %233, %249
  %251 = fmul fast float %241, %212
  %252 = call float @dx.op.tertiary.f32(i32 46, float %242, float %216, float %251)  ; FMad(a,b,c)
  %253 = call float @dx.op.tertiary.f32(i32 46, float %67, float %220, float %252)  ; FMad(a,b,c)
  %254 = fadd fast float %234, %253
  %255 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %256 = extractvalue %dx.types.CBufRet.f32 %255, 0
  %257 = fcmp fast ogt float %256, 0.000000e+00
  br i1 %257, label %258, label %354

; <label>:258                                     ; preds = %190
  %259 = fadd fast float %67, -5.000000e+02
  %260 = fmul fast float %259, 0x3F60624DE0000000
  %261 = call float @dx.op.unary.f32(i32 7, float %260)  ; Saturate(value)
  %262 = fmul fast float %261, 5.000000e-01
  %263 = fsub fast float 1.000000e+00, %262
  %264 = fmul fast float %263, %256
  %265 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %266 = extractvalue %dx.types.CBufRet.i32 %265, 1
  %267 = icmp slt i32 %266, 0
  br i1 %267, label %268, label %271

; <label>:268                                     ; preds = %258
  %269 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %270 = extractvalue %dx.types.CBufRet.i32 %269, 2
  br label %271

; <label>:271                                     ; preds = %268, %258
  %272 = phi i32 [ %270, %268 ], [ %266, %258 ]
  %273 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %274 = extractvalue %dx.types.CBufRet.i32 %273, 0
  %275 = extractvalue %dx.types.CBufRet.i32 %273, 1
  %276 = extractvalue %dx.types.CBufRet.i32 %273, 2
  %277 = and i32 %274, %51
  %278 = and i32 %275, %53
  %279 = and i32 %276, %272
  %280 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %281 = extractvalue %dx.types.CBufRet.i32 %280, 1
  %282 = mul i32 %279, %281
  %283 = add i32 %282, %278
  %284 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %285 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %284, i32 0, i32 %277, i32 %283, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %286 = extractvalue %dx.types.ResRet.f32 %285, 0
  %287 = extractvalue %dx.types.ResRet.f32 %285, 1
  %288 = fmul fast float %286, 2.000000e+00
  %289 = fmul fast float %287, 2.000000e+00
  %290 = fadd fast float %288, -1.000000e+00
  %291 = fadd fast float %289, -1.000000e+00
  %292 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %293 = extractvalue %dx.types.CBufRet.i32 %292, 0
  %294 = uitofp i32 %293 to float
  %295 = fmul fast float %294, %264
  %296 = fmul fast float %295, %290
  %297 = fmul fast float %295, %291
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 0
  %300 = extractvalue %dx.types.CBufRet.f32 %298, 1
  %301 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %302 = extractvalue %dx.types.CBufRet.f32 %301, 0
  %303 = extractvalue %dx.types.CBufRet.f32 %301, 1
  %304 = fadd fast float %299, -1.000000e+00
  %305 = fadd fast float %304, %302
  %306 = fadd fast float %300, -1.000000e+00
  %307 = fadd fast float %306, %303
  %308 = fadd fast float %296, %191
  %309 = fadd fast float %297, %192
  %310 = call float @dx.op.binary.f32(i32 35, float %308, float %299)  ; FMax(a,b)
  %311 = call float @dx.op.binary.f32(i32 35, float %309, float %300)  ; FMax(a,b)
  %312 = call float @dx.op.binary.f32(i32 36, float %310, float %305)  ; FMin(a,b)
  %313 = call float @dx.op.binary.f32(i32 36, float %311, float %307)  ; FMin(a,b)
  %314 = fmul fast float %196, %312
  %315 = fmul fast float %197, %313
  %316 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %317 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %54, %dx.types.Handle %316, float %314, float %315, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %318 = extractvalue %dx.types.ResRet.f32 %317, 0
  %319 = fmul fast float %58, %318
  %320 = fadd fast float %319, %60
  %321 = fmul fast float %62, %318
  %322 = fsub fast float %321, %64
  %323 = fdiv fast float 1.000000e+00, %322
  %324 = fadd fast float %320, %323
  %325 = call float @dx.op.dot3.f32(i32 55, float %246, float %250, float %254, float %111, float %112, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %326 = fsub fast float %314, %202
  %327 = fsub fast float %315, %201
  %328 = fdiv fast float %326, %205
  %329 = fdiv fast float %327, %206
  %330 = fmul fast float %328, %324
  %331 = fmul fast float %329, %324
  %332 = select i1 %240, float %328, float %330
  %333 = select i1 %240, float %329, float %331
  %334 = fmul fast float %332, %210
  %335 = call float @dx.op.tertiary.f32(i32 46, float %333, float %214, float %334)  ; FMad(a,b,c)
  %336 = call float @dx.op.tertiary.f32(i32 46, float %324, float %218, float %335)  ; FMad(a,b,c)
  %337 = fadd fast float %232, %336
  %338 = fmul fast float %332, %211
  %339 = call float @dx.op.tertiary.f32(i32 46, float %333, float %215, float %338)  ; FMad(a,b,c)
  %340 = call float @dx.op.tertiary.f32(i32 46, float %324, float %219, float %339)  ; FMad(a,b,c)
  %341 = fadd fast float %233, %340
  %342 = fmul fast float %332, %212
  %343 = call float @dx.op.tertiary.f32(i32 46, float %333, float %216, float %342)  ; FMad(a,b,c)
  %344 = call float @dx.op.tertiary.f32(i32 46, float %324, float %220, float %343)  ; FMad(a,b,c)
  %345 = fadd fast float %234, %344
  %346 = call float @dx.op.dot4.f32(i32 56, float %337, float %341, float %345, float -1.000000e+00, float %111, float %112, float %113, float %325)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %347 = call float @dx.op.unary.f32(i32 6, float %346)  ; FAbs(value)
  %348 = fdiv fast float %347, %67
  %349 = fmul fast float %348, %348
  %350 = fmul fast float %349, -1.000000e+06
  %351 = call float @dx.op.unary.f32(i32 21, float %350)  ; Exp(value)
  %352 = fcmp fast ogt float %351, 0x3F847AE140000000
  br i1 %352, label %353, label %354

; <label>:353                                     ; preds = %271
  br label %354

; <label>:354                                     ; preds = %353, %271, %190
  %355 = phi float [ %296, %353 ], [ 0.000000e+00, %271 ], [ 0.000000e+00, %190 ]
  %356 = phi float [ %297, %353 ], [ 0.000000e+00, %271 ], [ 0.000000e+00, %190 ]
  %357 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %358 = extractvalue %dx.types.CBufRet.f32 %357, 0
  %359 = extractvalue %dx.types.CBufRet.f32 %357, 1
  %360 = fadd fast float %358, -1.000000e+00
  %361 = fadd fast float %359, -1.000000e+00
  %362 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %363 = extractvalue %dx.types.CBufRet.f32 %362, 0
  %364 = extractvalue %dx.types.CBufRet.f32 %362, 1
  %365 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %366 = extractvalue %dx.types.CBufRet.i32 %365, 1
  %367 = icmp slt i32 %366, 0
  br i1 %367, label %368, label %371

; <label>:368                                     ; preds = %354
  %369 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %370 = extractvalue %dx.types.CBufRet.i32 %369, 1
  br label %371

; <label>:371                                     ; preds = %368, %354
  %372 = phi i32 [ %370, %368 ], [ %366, %354 ]
  %373 = uitofp i32 %372 to float
  %374 = fmul fast float %373, 1.250000e-01
  %375 = call float @dx.op.unary.f32(i32 22, float %374)  ; Frc(value)
  %376 = call i32 @dx.op.unary.i32(i32 30, i32 %372)  ; Bfrev(value)
  %377 = lshr i32 %376, 16
  %378 = uitofp i32 %377 to float
  %379 = fmul fast float %378, 0x3EF0000000000000
  %380 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %381 = extractvalue %dx.types.CBufRet.i32 %380, 0
  %382 = uitofp i32 %381 to float
  %383 = fmul fast float %382, %375
  %384 = fmul fast float %379, %382
  %385 = fptoui float %383 to i32
  %386 = fptoui float %384 to i32
  %387 = uitofp i32 %385 to float
  %388 = uitofp i32 %386 to float
  %389 = fadd fast float %355, %191
  %390 = fsub fast float %389, %363
  %391 = fsub fast float %390, %387
  %392 = fadd fast float %356, %192
  %393 = fsub fast float %392, %364
  %394 = fsub fast float %393, %388
  %395 = call float @dx.op.binary.f32(i32 35, float %391, float 0.000000e+00)  ; FMax(a,b)
  %396 = call float @dx.op.binary.f32(i32 35, float %394, float 0.000000e+00)  ; FMax(a,b)
  %397 = call float @dx.op.binary.f32(i32 36, float %395, float %360)  ; FMin(a,b)
  %398 = call float @dx.op.binary.f32(i32 36, float %396, float %361)  ; FMin(a,b)
  %399 = fptoui float %397 to i32
  %400 = fptoui float %398 to i32
  %401 = extractvalue %dx.types.CBufRet.i32 %380, 2
  %402 = extractvalue %dx.types.CBufRet.i32 %380, 3
  %403 = add i32 %401, -2
  %404 = add i32 %402, -2
  %405 = udiv i32 %399, %381
  %406 = udiv i32 %400, %381
  %407 = call i32 @dx.op.binary.i32(i32 40, i32 %405, i32 %403)  ; UMin(a,b)
  %408 = call i32 @dx.op.binary.i32(i32 40, i32 %406, i32 %404)  ; UMin(a,b)
  %409 = mul i32 %381, %407
  %410 = mul i32 %381, %408
  %411 = add i32 %399, 1
  %412 = sub i32 %411, %409
  %413 = add i32 %400, 1
  %414 = sub i32 %413, %410
  %415 = uitofp i32 %412 to float
  %416 = uitofp i32 %414 to float
  %417 = add i32 %381, 2
  %418 = uitofp i32 %417 to float
  %419 = fdiv fast float %415, %418
  %420 = fdiv fast float %416, %418
  %421 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %422 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %421, i32 0, i32 %407, i32 %408, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %423 = extractvalue %dx.types.ResRet.i32 %422, 0
  %424 = bitcast i32 %423 to float
  %425 = add i32 %407, 1
  %426 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %421, i32 0, i32 %425, i32 %408, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %427 = extractvalue %dx.types.ResRet.i32 %426, 0
  %428 = bitcast i32 %427 to float
  %429 = add i32 %408, 1
  %430 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %421, i32 0, i32 %407, i32 %429, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %431 = extractvalue %dx.types.ResRet.i32 %430, 0
  %432 = bitcast i32 %431 to float
  %433 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %421, i32 0, i32 %425, i32 %429, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %434 = extractvalue %dx.types.ResRet.i32 %433, 0
  %435 = bitcast i32 %434 to float
  %436 = fsub fast float 1.000000e+00, %420
  %437 = fsub fast float 1.000000e+00, %419
  %438 = fmul fast float %436, %437
  %439 = fmul fast float %436, %419
  %440 = fmul fast float %420, %437
  %441 = fmul fast float %420, %419
  %442 = call float @dx.op.dot3.f32(i32 55, float %246, float %250, float %254, float %111, float %112, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %367, label %443, label %446

; <label>:443                                     ; preds = %371
  %444 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %445 = extractvalue %dx.types.CBufRet.i32 %444, 1
  br label %446

; <label>:446                                     ; preds = %443, %371
  %447 = phi i32 [ %445, %443 ], [ %366, %371 ]
  %448 = uitofp i32 %447 to float
  %449 = fmul fast float %448, 1.250000e-01
  %450 = call float @dx.op.unary.f32(i32 22, float %449)  ; Frc(value)
  %451 = call i32 @dx.op.unary.i32(i32 30, i32 %447)  ; Bfrev(value)
  %452 = lshr i32 %451, 16
  %453 = uitofp i32 %452 to float
  %454 = fmul fast float %453, 0x3EF0000000000000
  %455 = fmul fast float %382, %450
  %456 = fmul fast float %454, %382
  %457 = fptoui float %455 to i32
  %458 = fptoui float %456 to i32
  %459 = add i32 %48, %409
  %460 = add i32 %459, %457
  %461 = add i32 %49, %410
  %462 = add i32 %461, %458
  %463 = uitofp i32 %460 to float
  %464 = uitofp i32 %462 to float
  %465 = fadd fast float %463, 5.000000e-01
  %466 = fadd fast float %464, 5.000000e-01
  %467 = fmul fast float %465, %196
  %468 = fmul fast float %466, %197
  %469 = fsub fast float %467, %202
  %470 = fsub fast float %468, %201
  %471 = fdiv fast float %469, %205
  %472 = fdiv fast float %470, %206
  %473 = fmul fast float %471, %424
  %474 = fmul fast float %472, %424
  %475 = select i1 %240, float %471, float %473
  %476 = select i1 %240, float %472, float %474
  %477 = fmul fast float %475, %210
  %478 = call float @dx.op.tertiary.f32(i32 46, float %476, float %214, float %477)  ; FMad(a,b,c)
  %479 = call float @dx.op.tertiary.f32(i32 46, float %424, float %218, float %478)  ; FMad(a,b,c)
  %480 = fadd fast float %232, %479
  %481 = fmul fast float %475, %211
  %482 = call float @dx.op.tertiary.f32(i32 46, float %476, float %215, float %481)  ; FMad(a,b,c)
  %483 = call float @dx.op.tertiary.f32(i32 46, float %424, float %219, float %482)  ; FMad(a,b,c)
  %484 = fadd fast float %233, %483
  %485 = fmul fast float %475, %212
  %486 = call float @dx.op.tertiary.f32(i32 46, float %476, float %216, float %485)  ; FMad(a,b,c)
  %487 = call float @dx.op.tertiary.f32(i32 46, float %424, float %220, float %486)  ; FMad(a,b,c)
  %488 = fadd fast float %234, %487
  %489 = mul i32 %381, %425
  br i1 %367, label %490, label %493

; <label>:490                                     ; preds = %446
  %491 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %492 = extractvalue %dx.types.CBufRet.i32 %491, 1
  br label %493

; <label>:493                                     ; preds = %490, %446
  %494 = phi i32 [ %492, %490 ], [ %366, %446 ]
  %495 = uitofp i32 %494 to float
  %496 = fmul fast float %495, 1.250000e-01
  %497 = call float @dx.op.unary.f32(i32 22, float %496)  ; Frc(value)
  %498 = call i32 @dx.op.unary.i32(i32 30, i32 %494)  ; Bfrev(value)
  %499 = lshr i32 %498, 16
  %500 = uitofp i32 %499 to float
  %501 = fmul fast float %500, 0x3EF0000000000000
  %502 = fmul fast float %382, %497
  %503 = fmul fast float %501, %382
  %504 = fptoui float %502 to i32
  %505 = fptoui float %503 to i32
  %506 = add i32 %48, %489
  %507 = add i32 %506, %504
  %508 = add i32 %461, %505
  %509 = uitofp i32 %507 to float
  %510 = uitofp i32 %508 to float
  %511 = fadd fast float %509, 5.000000e-01
  %512 = fadd fast float %510, 5.000000e-01
  %513 = fmul fast float %511, %196
  %514 = fmul fast float %512, %197
  %515 = fsub fast float %513, %202
  %516 = fsub fast float %514, %201
  %517 = fdiv fast float %515, %205
  %518 = fdiv fast float %516, %206
  %519 = fmul fast float %517, %428
  %520 = fmul fast float %518, %428
  %521 = select i1 %240, float %517, float %519
  %522 = select i1 %240, float %518, float %520
  %523 = fmul fast float %521, %210
  %524 = call float @dx.op.tertiary.f32(i32 46, float %522, float %214, float %523)  ; FMad(a,b,c)
  %525 = call float @dx.op.tertiary.f32(i32 46, float %428, float %218, float %524)  ; FMad(a,b,c)
  %526 = fadd fast float %232, %525
  %527 = fmul fast float %521, %211
  %528 = call float @dx.op.tertiary.f32(i32 46, float %522, float %215, float %527)  ; FMad(a,b,c)
  %529 = call float @dx.op.tertiary.f32(i32 46, float %428, float %219, float %528)  ; FMad(a,b,c)
  %530 = fadd fast float %233, %529
  %531 = fmul fast float %521, %212
  %532 = call float @dx.op.tertiary.f32(i32 46, float %522, float %216, float %531)  ; FMad(a,b,c)
  %533 = call float @dx.op.tertiary.f32(i32 46, float %428, float %220, float %532)  ; FMad(a,b,c)
  %534 = fadd fast float %234, %533
  %535 = mul i32 %381, %429
  br i1 %367, label %536, label %539

; <label>:536                                     ; preds = %493
  %537 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %538 = extractvalue %dx.types.CBufRet.i32 %537, 1
  br label %539

; <label>:539                                     ; preds = %536, %493
  %540 = phi i32 [ %538, %536 ], [ %366, %493 ]
  %541 = uitofp i32 %540 to float
  %542 = fmul fast float %541, 1.250000e-01
  %543 = call float @dx.op.unary.f32(i32 22, float %542)  ; Frc(value)
  %544 = call i32 @dx.op.unary.i32(i32 30, i32 %540)  ; Bfrev(value)
  %545 = lshr i32 %544, 16
  %546 = uitofp i32 %545 to float
  %547 = fmul fast float %546, 0x3EF0000000000000
  %548 = fmul fast float %382, %543
  %549 = fmul fast float %547, %382
  %550 = fptoui float %548 to i32
  %551 = fptoui float %549 to i32
  %552 = add i32 %459, %550
  %553 = add i32 %49, %535
  %554 = add i32 %553, %551
  %555 = uitofp i32 %552 to float
  %556 = uitofp i32 %554 to float
  %557 = fadd fast float %555, 5.000000e-01
  %558 = fadd fast float %556, 5.000000e-01
  %559 = fmul fast float %557, %196
  %560 = fmul fast float %558, %197
  %561 = fsub fast float %559, %202
  %562 = fsub fast float %560, %201
  %563 = fdiv fast float %561, %205
  %564 = fdiv fast float %562, %206
  %565 = fmul fast float %563, %432
  %566 = fmul fast float %564, %432
  %567 = select i1 %240, float %563, float %565
  %568 = select i1 %240, float %564, float %566
  %569 = fmul fast float %567, %210
  %570 = call float @dx.op.tertiary.f32(i32 46, float %568, float %214, float %569)  ; FMad(a,b,c)
  %571 = call float @dx.op.tertiary.f32(i32 46, float %432, float %218, float %570)  ; FMad(a,b,c)
  %572 = fadd fast float %232, %571
  %573 = fmul fast float %567, %211
  %574 = call float @dx.op.tertiary.f32(i32 46, float %568, float %215, float %573)  ; FMad(a,b,c)
  %575 = call float @dx.op.tertiary.f32(i32 46, float %432, float %219, float %574)  ; FMad(a,b,c)
  %576 = fadd fast float %233, %575
  %577 = fmul fast float %567, %212
  %578 = call float @dx.op.tertiary.f32(i32 46, float %568, float %216, float %577)  ; FMad(a,b,c)
  %579 = call float @dx.op.tertiary.f32(i32 46, float %432, float %220, float %578)  ; FMad(a,b,c)
  %580 = fadd fast float %234, %579
  br i1 %367, label %581, label %584

; <label>:581                                     ; preds = %539
  %582 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %583 = extractvalue %dx.types.CBufRet.i32 %582, 1
  br label %584

; <label>:584                                     ; preds = %581, %539
  %585 = phi i32 [ %583, %581 ], [ %366, %539 ]
  %586 = uitofp i32 %585 to float
  %587 = fmul fast float %586, 1.250000e-01
  %588 = call float @dx.op.unary.f32(i32 22, float %587)  ; Frc(value)
  %589 = call i32 @dx.op.unary.i32(i32 30, i32 %585)  ; Bfrev(value)
  %590 = lshr i32 %589, 16
  %591 = uitofp i32 %590 to float
  %592 = fmul fast float %591, 0x3EF0000000000000
  %593 = fmul fast float %382, %588
  %594 = fmul fast float %592, %382
  %595 = fptoui float %593 to i32
  %596 = fptoui float %594 to i32
  %597 = add i32 %506, %595
  %598 = add i32 %553, %596
  %599 = uitofp i32 %597 to float
  %600 = uitofp i32 %598 to float
  %601 = fadd fast float %599, 5.000000e-01
  %602 = fadd fast float %600, 5.000000e-01
  %603 = fmul fast float %601, %196
  %604 = fmul fast float %602, %197
  %605 = fsub fast float %603, %202
  %606 = fsub fast float %604, %201
  %607 = fdiv fast float %605, %205
  %608 = fdiv fast float %606, %206
  %609 = fmul fast float %607, %435
  %610 = fmul fast float %608, %435
  %611 = select i1 %240, float %607, float %609
  %612 = select i1 %240, float %608, float %610
  %613 = fmul fast float %611, %210
  %614 = call float @dx.op.tertiary.f32(i32 46, float %612, float %214, float %613)  ; FMad(a,b,c)
  %615 = call float @dx.op.tertiary.f32(i32 46, float %435, float %218, float %614)  ; FMad(a,b,c)
  %616 = fadd fast float %232, %615
  %617 = fmul fast float %611, %211
  %618 = call float @dx.op.tertiary.f32(i32 46, float %612, float %215, float %617)  ; FMad(a,b,c)
  %619 = call float @dx.op.tertiary.f32(i32 46, float %435, float %219, float %618)  ; FMad(a,b,c)
  %620 = fadd fast float %233, %619
  %621 = fmul fast float %611, %212
  %622 = call float @dx.op.tertiary.f32(i32 46, float %612, float %216, float %621)  ; FMad(a,b,c)
  %623 = call float @dx.op.tertiary.f32(i32 46, float %435, float %220, float %622)  ; FMad(a,b,c)
  %624 = fadd fast float %234, %623
  %625 = call float @dx.op.dot4.f32(i32 56, float %480, float %484, float %488, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %626 = call float @dx.op.unary.f32(i32 6, float %625)  ; FAbs(value)
  %627 = call float @dx.op.dot4.f32(i32 56, float %526, float %530, float %534, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %628 = call float @dx.op.unary.f32(i32 6, float %627)  ; FAbs(value)
  %629 = call float @dx.op.dot4.f32(i32 56, float %572, float %576, float %580, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %630 = call float @dx.op.unary.f32(i32 6, float %629)  ; FAbs(value)
  %631 = call float @dx.op.dot4.f32(i32 56, float %616, float %620, float %624, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %632 = call float @dx.op.unary.f32(i32 6, float %631)  ; FAbs(value)
  %633 = fdiv fast float %626, %67
  %634 = fdiv fast float %628, %67
  %635 = fdiv fast float %630, %67
  %636 = fdiv fast float %632, %67
  %637 = fmul fast float %633, %633
  %638 = fmul fast float %637, -1.000000e+04
  %639 = fmul fast float %634, %634
  %640 = fmul fast float %639, -1.000000e+04
  %641 = fmul fast float %635, %635
  %642 = fmul fast float %641, -1.000000e+04
  %643 = fmul fast float %636, %636
  %644 = fmul fast float %643, -1.000000e+04
  %645 = call float @dx.op.unary.f32(i32 21, float %638)  ; Exp(value)
  %646 = call float @dx.op.unary.f32(i32 21, float %640)  ; Exp(value)
  %647 = call float @dx.op.unary.f32(i32 21, float %642)  ; Exp(value)
  %648 = call float @dx.op.unary.f32(i32 21, float %644)  ; Exp(value)
  %649 = fcmp fast ogt float %424, 0.000000e+00
  %650 = fcmp fast ogt float %428, 0.000000e+00
  %651 = fcmp fast ogt float %432, 0.000000e+00
  %652 = fcmp fast ogt float %435, 0.000000e+00
  %653 = select i1 %649, float %645, float 0.000000e+00
  %654 = select i1 %650, float %646, float 0.000000e+00
  %655 = select i1 %651, float %647, float 0.000000e+00
  %656 = select i1 %652, float %648, float 0.000000e+00
  %657 = fmul fast float %438, %653
  %658 = fmul fast float %439, %654
  %659 = fmul fast float %440, %655
  %660 = fmul fast float %441, %656
  %661 = fcmp fast ugt float %657, 0x3F847AE140000000
  br i1 %661, label %836, label %662

; <label>:662                                     ; preds = %584
  %663 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %664 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %663, i32 0, i32 %407, i32 %408, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %665 = extractvalue %dx.types.ResRet.i32 %664, 0
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %836, label %667

; <label>:667                                     ; preds = %662
  br label %668

; <label>:668                                     ; preds = %727, %667
  %669 = phi i32 [ %830, %727 ], [ %407, %667 ]
  %670 = phi i32 [ %831, %727 ], [ %408, %667 ]
  %671 = phi float [ %832, %727 ], [ %657, %667 ]
  %672 = phi i32 [ %833, %727 ], [ 0, %667 ]
  %673 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %674 = extractvalue %dx.types.CBufRet.i32 %673, 0
  %675 = urem i32 %672, %674
  %676 = udiv i32 %672, %674
  %677 = extractvalue %dx.types.CBufRet.i32 %673, 2
  %678 = extractvalue %dx.types.CBufRet.i32 %673, 3
  %679 = mul i32 %677, %675
  %680 = mul i32 %678, %676
  %681 = add i32 %679, %407
  %682 = add i32 %680, %408
  %683 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %684 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %683, i32 0, i32 %681, i32 %682, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %685 = extractvalue %dx.types.ResRet.i32 %684, 0
  %686 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %687 = extractvalue %dx.types.CBufRet.i32 %686, 3
  %688 = add i32 %687, %685
  %689 = urem i32 %688, %677
  %690 = udiv i32 %688, %677
  %691 = mul i32 %674, %689
  %692 = mul i32 %674, %690
  %693 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %694 = extractvalue %dx.types.CBufRet.i32 %693, 1
  %695 = icmp slt i32 %694, 0
  br i1 %695, label %696, label %699

; <label>:696                                     ; preds = %668
  %697 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %698 = extractvalue %dx.types.CBufRet.i32 %697, 1
  br label %699

; <label>:699                                     ; preds = %696, %668
  %700 = phi i32 [ %698, %696 ], [ %694, %668 ]
  %701 = uitofp i32 %700 to float
  %702 = fmul fast float %701, 1.250000e-01
  %703 = call float @dx.op.unary.f32(i32 22, float %702)  ; Frc(value)
  %704 = call i32 @dx.op.unary.i32(i32 30, i32 %700)  ; Bfrev(value)
  %705 = lshr i32 %704, 16
  %706 = uitofp i32 %705 to float
  %707 = fmul fast float %706, 0x3EF0000000000000
  %708 = uitofp i32 %674 to float
  %709 = fmul fast float %708, %703
  %710 = fmul fast float %707, %708
  %711 = fptoui float %709 to i32
  %712 = fptoui float %710 to i32
  %713 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %714 = extractvalue %dx.types.CBufRet.i32 %713, 0
  %715 = extractvalue %dx.types.CBufRet.i32 %713, 1
  %716 = add i32 %714, %691
  %717 = add i32 %716, %711
  %718 = add i32 %715, %692
  %719 = add i32 %718, %712
  %720 = icmp ult i32 %688, %687
  br i1 %720, label %727, label %721

; <label>:721                                     ; preds = %699
  %722 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %723 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %722, i32 %685, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %724 = extractvalue %dx.types.ResRet.i32 %723, 0
  %725 = and i32 %724, 65535
  %726 = lshr i32 %724, 16
  br label %727

; <label>:727                                     ; preds = %721, %699
  %728 = phi i32 [ %725, %721 ], [ %717, %699 ]
  %729 = phi i32 [ %726, %721 ], [ %719, %699 ]
  %730 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %731 = extractvalue %dx.types.CBufRet.i32 %730, 0
  %732 = urem i32 %688, %731
  %733 = udiv i32 %688, %731
  %734 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %735 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %734, i32 0, i32 %732, i32 %733, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %736 = extractvalue %dx.types.ResRet.i32 %735, 0
  %737 = bitcast i32 %736 to float
  %738 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %739 = extractvalue %dx.types.CBufRet.f32 %738, 0
  %740 = extractvalue %dx.types.CBufRet.f32 %738, 1
  %741 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.f32 %741, 0
  %743 = extractvalue %dx.types.CBufRet.f32 %741, 1
  %744 = fadd fast float %739, -1.000000e+00
  %745 = fadd fast float %744, %742
  %746 = fadd fast float %740, -1.000000e+00
  %747 = fadd fast float %746, %743
  %748 = uitofp i32 %728 to float
  %749 = uitofp i32 %729 to float
  %750 = call float @dx.op.binary.f32(i32 36, float %748, float %745)  ; FMin(a,b)
  %751 = call float @dx.op.binary.f32(i32 36, float %749, float %747)  ; FMin(a,b)
  %752 = fadd fast float %750, 5.000000e-01
  %753 = fadd fast float %751, 5.000000e-01
  %754 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %755 = extractvalue %dx.types.CBufRet.f32 %754, 2
  %756 = extractvalue %dx.types.CBufRet.f32 %754, 3
  %757 = fmul fast float %755, %752
  %758 = fmul fast float %756, %753
  %759 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %760 = extractvalue %dx.types.CBufRet.f32 %759, 2
  %761 = extractvalue %dx.types.CBufRet.f32 %759, 3
  %762 = fsub fast float %757, %761
  %763 = fsub fast float %758, %760
  %764 = extractvalue %dx.types.CBufRet.f32 %759, 0
  %765 = extractvalue %dx.types.CBufRet.f32 %759, 1
  %766 = fdiv fast float %762, %764
  %767 = fdiv fast float %763, %765
  %768 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %769 = extractvalue %dx.types.CBufRet.f32 %768, 0
  %770 = extractvalue %dx.types.CBufRet.f32 %768, 1
  %771 = extractvalue %dx.types.CBufRet.f32 %768, 2
  %772 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %773 = extractvalue %dx.types.CBufRet.f32 %772, 0
  %774 = extractvalue %dx.types.CBufRet.f32 %772, 1
  %775 = extractvalue %dx.types.CBufRet.f32 %772, 2
  %776 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %777 = extractvalue %dx.types.CBufRet.f32 %776, 0
  %778 = extractvalue %dx.types.CBufRet.f32 %776, 1
  %779 = extractvalue %dx.types.CBufRet.f32 %776, 2
  %780 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %781 = extractvalue %dx.types.CBufRet.f32 %780, 0
  %782 = extractvalue %dx.types.CBufRet.f32 %780, 1
  %783 = extractvalue %dx.types.CBufRet.f32 %780, 2
  %784 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %785 = extractvalue %dx.types.CBufRet.f32 %784, 0
  %786 = extractvalue %dx.types.CBufRet.f32 %784, 1
  %787 = extractvalue %dx.types.CBufRet.f32 %784, 2
  %788 = fmul fast float %785, 2.097152e+06
  %789 = fmul fast float %786, 2.097152e+06
  %790 = fmul fast float %787, 2.097152e+06
  %791 = fadd fast float %788, %781
  %792 = fadd fast float %789, %782
  %793 = fadd fast float %790, %783
  %794 = fmul fast float %766, %737
  %795 = fmul fast float %767, %737
  %796 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %797 = extractvalue %dx.types.CBufRet.f32 %796, 3
  %798 = bitcast float %797 to i32
  %799 = icmp ne i32 %798, 0
  %800 = select i1 %799, float %766, float %794
  %801 = select i1 %799, float %767, float %795
  %802 = fmul fast float %800, %769
  %803 = call float @dx.op.tertiary.f32(i32 46, float %801, float %773, float %802)  ; FMad(a,b,c)
  %804 = call float @dx.op.tertiary.f32(i32 46, float %737, float %777, float %803)  ; FMad(a,b,c)
  %805 = fadd fast float %791, %804
  %806 = fmul fast float %800, %770
  %807 = call float @dx.op.tertiary.f32(i32 46, float %801, float %774, float %806)  ; FMad(a,b,c)
  %808 = call float @dx.op.tertiary.f32(i32 46, float %737, float %778, float %807)  ; FMad(a,b,c)
  %809 = fadd fast float %792, %808
  %810 = fmul fast float %800, %771
  %811 = call float @dx.op.tertiary.f32(i32 46, float %801, float %775, float %810)  ; FMad(a,b,c)
  %812 = call float @dx.op.tertiary.f32(i32 46, float %737, float %779, float %811)  ; FMad(a,b,c)
  %813 = fadd fast float %793, %812
  %814 = call float @dx.op.dot4.f32(i32 56, float %805, float %809, float %813, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %815 = call float @dx.op.unary.f32(i32 6, float %814)  ; FAbs(value)
  %816 = fdiv fast float %815, %67
  %817 = fmul fast float %816, %816
  %818 = fmul fast float %817, -1.000000e+04
  %819 = call float @dx.op.unary.f32(i32 21, float %818)  ; Exp(value)
  %820 = fsub fast float %748, %191
  %821 = fsub fast float %749, %192
  %822 = call float @dx.op.unary.f32(i32 6, float %820)  ; FAbs(value)
  %823 = call float @dx.op.unary.f32(i32 6, float %821)  ; FAbs(value)
  %824 = call float @dx.op.binary.f32(i32 36, float %822, float %823)  ; FMin(a,b)
  %825 = fdiv fast float %824, %708
  %826 = call float @dx.op.unary.f32(i32 7, float %825)  ; Saturate(value)
  %827 = fsub fast float 1.000000e+00, %826
  %828 = fmul fast float %827, %819
  %829 = fcmp fast ogt float %828, %671
  %830 = select i1 %829, i32 %732, i32 %669
  %831 = select i1 %829, i32 %733, i32 %670
  %832 = select i1 %829, float %828, float %671
  %833 = add nuw i32 %672, 1
  %834 = icmp eq i32 %833, %665
  br i1 %834, label %835, label %668

; <label>:835                                     ; preds = %727
  br label %836

; <label>:836                                     ; preds = %835, %662, %584
  %837 = phi i32 [ %407, %662 ], [ %407, %584 ], [ %830, %835 ]
  %838 = phi i32 [ %408, %662 ], [ %408, %584 ], [ %831, %835 ]
  %839 = phi float [ %657, %662 ], [ %657, %584 ], [ %832, %835 ]
  %840 = fcmp fast ugt float %658, 0x3F847AE140000000
  br i1 %840, label %1015, label %841

; <label>:841                                     ; preds = %836
  %842 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %843 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %842, i32 0, i32 %425, i32 %408, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %844 = extractvalue %dx.types.ResRet.i32 %843, 0
  %845 = icmp eq i32 %844, 0
  br i1 %845, label %1015, label %846

; <label>:846                                     ; preds = %841
  br label %847

; <label>:847                                     ; preds = %906, %846
  %848 = phi i32 [ %1009, %906 ], [ %425, %846 ]
  %849 = phi i32 [ %1010, %906 ], [ %408, %846 ]
  %850 = phi float [ %1011, %906 ], [ %658, %846 ]
  %851 = phi i32 [ %1012, %906 ], [ 0, %846 ]
  %852 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %853 = extractvalue %dx.types.CBufRet.i32 %852, 0
  %854 = urem i32 %851, %853
  %855 = udiv i32 %851, %853
  %856 = extractvalue %dx.types.CBufRet.i32 %852, 2
  %857 = extractvalue %dx.types.CBufRet.i32 %852, 3
  %858 = mul i32 %856, %854
  %859 = mul i32 %857, %855
  %860 = add i32 %858, %425
  %861 = add i32 %859, %408
  %862 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %863 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %862, i32 0, i32 %860, i32 %861, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %864 = extractvalue %dx.types.ResRet.i32 %863, 0
  %865 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %866 = extractvalue %dx.types.CBufRet.i32 %865, 3
  %867 = add i32 %866, %864
  %868 = urem i32 %867, %856
  %869 = udiv i32 %867, %856
  %870 = mul i32 %853, %868
  %871 = mul i32 %853, %869
  %872 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %873 = extractvalue %dx.types.CBufRet.i32 %872, 1
  %874 = icmp slt i32 %873, 0
  br i1 %874, label %875, label %878

; <label>:875                                     ; preds = %847
  %876 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %877 = extractvalue %dx.types.CBufRet.i32 %876, 1
  br label %878

; <label>:878                                     ; preds = %875, %847
  %879 = phi i32 [ %877, %875 ], [ %873, %847 ]
  %880 = uitofp i32 %879 to float
  %881 = fmul fast float %880, 1.250000e-01
  %882 = call float @dx.op.unary.f32(i32 22, float %881)  ; Frc(value)
  %883 = call i32 @dx.op.unary.i32(i32 30, i32 %879)  ; Bfrev(value)
  %884 = lshr i32 %883, 16
  %885 = uitofp i32 %884 to float
  %886 = fmul fast float %885, 0x3EF0000000000000
  %887 = uitofp i32 %853 to float
  %888 = fmul fast float %887, %882
  %889 = fmul fast float %886, %887
  %890 = fptoui float %888 to i32
  %891 = fptoui float %889 to i32
  %892 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %893 = extractvalue %dx.types.CBufRet.i32 %892, 0
  %894 = extractvalue %dx.types.CBufRet.i32 %892, 1
  %895 = add i32 %893, %870
  %896 = add i32 %895, %890
  %897 = add i32 %894, %871
  %898 = add i32 %897, %891
  %899 = icmp ult i32 %867, %866
  br i1 %899, label %906, label %900

; <label>:900                                     ; preds = %878
  %901 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %902 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %901, i32 %864, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %903 = extractvalue %dx.types.ResRet.i32 %902, 0
  %904 = and i32 %903, 65535
  %905 = lshr i32 %903, 16
  br label %906

; <label>:906                                     ; preds = %900, %878
  %907 = phi i32 [ %904, %900 ], [ %896, %878 ]
  %908 = phi i32 [ %905, %900 ], [ %898, %878 ]
  %909 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %910 = extractvalue %dx.types.CBufRet.i32 %909, 0
  %911 = urem i32 %867, %910
  %912 = udiv i32 %867, %910
  %913 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %914 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %913, i32 0, i32 %911, i32 %912, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %915 = extractvalue %dx.types.ResRet.i32 %914, 0
  %916 = bitcast i32 %915 to float
  %917 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %918 = extractvalue %dx.types.CBufRet.f32 %917, 0
  %919 = extractvalue %dx.types.CBufRet.f32 %917, 1
  %920 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %921 = extractvalue %dx.types.CBufRet.f32 %920, 0
  %922 = extractvalue %dx.types.CBufRet.f32 %920, 1
  %923 = fadd fast float %918, -1.000000e+00
  %924 = fadd fast float %923, %921
  %925 = fadd fast float %919, -1.000000e+00
  %926 = fadd fast float %925, %922
  %927 = uitofp i32 %907 to float
  %928 = uitofp i32 %908 to float
  %929 = call float @dx.op.binary.f32(i32 36, float %927, float %924)  ; FMin(a,b)
  %930 = call float @dx.op.binary.f32(i32 36, float %928, float %926)  ; FMin(a,b)
  %931 = fadd fast float %929, 5.000000e-01
  %932 = fadd fast float %930, 5.000000e-01
  %933 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %934 = extractvalue %dx.types.CBufRet.f32 %933, 2
  %935 = extractvalue %dx.types.CBufRet.f32 %933, 3
  %936 = fmul fast float %934, %931
  %937 = fmul fast float %935, %932
  %938 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %939 = extractvalue %dx.types.CBufRet.f32 %938, 2
  %940 = extractvalue %dx.types.CBufRet.f32 %938, 3
  %941 = fsub fast float %936, %940
  %942 = fsub fast float %937, %939
  %943 = extractvalue %dx.types.CBufRet.f32 %938, 0
  %944 = extractvalue %dx.types.CBufRet.f32 %938, 1
  %945 = fdiv fast float %941, %943
  %946 = fdiv fast float %942, %944
  %947 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %948 = extractvalue %dx.types.CBufRet.f32 %947, 0
  %949 = extractvalue %dx.types.CBufRet.f32 %947, 1
  %950 = extractvalue %dx.types.CBufRet.f32 %947, 2
  %951 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %952 = extractvalue %dx.types.CBufRet.f32 %951, 0
  %953 = extractvalue %dx.types.CBufRet.f32 %951, 1
  %954 = extractvalue %dx.types.CBufRet.f32 %951, 2
  %955 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %956 = extractvalue %dx.types.CBufRet.f32 %955, 0
  %957 = extractvalue %dx.types.CBufRet.f32 %955, 1
  %958 = extractvalue %dx.types.CBufRet.f32 %955, 2
  %959 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %960 = extractvalue %dx.types.CBufRet.f32 %959, 0
  %961 = extractvalue %dx.types.CBufRet.f32 %959, 1
  %962 = extractvalue %dx.types.CBufRet.f32 %959, 2
  %963 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %964 = extractvalue %dx.types.CBufRet.f32 %963, 0
  %965 = extractvalue %dx.types.CBufRet.f32 %963, 1
  %966 = extractvalue %dx.types.CBufRet.f32 %963, 2
  %967 = fmul fast float %964, 2.097152e+06
  %968 = fmul fast float %965, 2.097152e+06
  %969 = fmul fast float %966, 2.097152e+06
  %970 = fadd fast float %967, %960
  %971 = fadd fast float %968, %961
  %972 = fadd fast float %969, %962
  %973 = fmul fast float %945, %916
  %974 = fmul fast float %946, %916
  %975 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %976 = extractvalue %dx.types.CBufRet.f32 %975, 3
  %977 = bitcast float %976 to i32
  %978 = icmp ne i32 %977, 0
  %979 = select i1 %978, float %945, float %973
  %980 = select i1 %978, float %946, float %974
  %981 = fmul fast float %979, %948
  %982 = call float @dx.op.tertiary.f32(i32 46, float %980, float %952, float %981)  ; FMad(a,b,c)
  %983 = call float @dx.op.tertiary.f32(i32 46, float %916, float %956, float %982)  ; FMad(a,b,c)
  %984 = fadd fast float %970, %983
  %985 = fmul fast float %979, %949
  %986 = call float @dx.op.tertiary.f32(i32 46, float %980, float %953, float %985)  ; FMad(a,b,c)
  %987 = call float @dx.op.tertiary.f32(i32 46, float %916, float %957, float %986)  ; FMad(a,b,c)
  %988 = fadd fast float %971, %987
  %989 = fmul fast float %979, %950
  %990 = call float @dx.op.tertiary.f32(i32 46, float %980, float %954, float %989)  ; FMad(a,b,c)
  %991 = call float @dx.op.tertiary.f32(i32 46, float %916, float %958, float %990)  ; FMad(a,b,c)
  %992 = fadd fast float %972, %991
  %993 = call float @dx.op.dot4.f32(i32 56, float %984, float %988, float %992, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %994 = call float @dx.op.unary.f32(i32 6, float %993)  ; FAbs(value)
  %995 = fdiv fast float %994, %67
  %996 = fmul fast float %995, %995
  %997 = fmul fast float %996, -1.000000e+04
  %998 = call float @dx.op.unary.f32(i32 21, float %997)  ; Exp(value)
  %999 = fsub fast float %927, %191
  %1000 = fsub fast float %928, %192
  %1001 = call float @dx.op.unary.f32(i32 6, float %999)  ; FAbs(value)
  %1002 = call float @dx.op.unary.f32(i32 6, float %1000)  ; FAbs(value)
  %1003 = call float @dx.op.binary.f32(i32 36, float %1001, float %1002)  ; FMin(a,b)
  %1004 = fdiv fast float %1003, %887
  %1005 = call float @dx.op.unary.f32(i32 7, float %1004)  ; Saturate(value)
  %1006 = fsub fast float 1.000000e+00, %1005
  %1007 = fmul fast float %1006, %998
  %1008 = fcmp fast ogt float %1007, %850
  %1009 = select i1 %1008, i32 %911, i32 %848
  %1010 = select i1 %1008, i32 %912, i32 %849
  %1011 = select i1 %1008, float %1007, float %850
  %1012 = add nuw i32 %851, 1
  %1013 = icmp eq i32 %1012, %844
  br i1 %1013, label %1014, label %847

; <label>:1014                                    ; preds = %906
  br label %1015

; <label>:1015                                    ; preds = %1014, %841, %836
  %1016 = phi i32 [ %425, %841 ], [ %425, %836 ], [ %1009, %1014 ]
  %1017 = phi i32 [ %408, %841 ], [ %408, %836 ], [ %1010, %1014 ]
  %1018 = phi float [ %658, %841 ], [ %658, %836 ], [ %1011, %1014 ]
  %1019 = fcmp fast ugt float %659, 0x3F847AE140000000
  br i1 %1019, label %1194, label %1020

; <label>:1020                                    ; preds = %1015
  %1021 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1022 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1021, i32 0, i32 %407, i32 %429, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1023 = extractvalue %dx.types.ResRet.i32 %1022, 0
  %1024 = icmp eq i32 %1023, 0
  br i1 %1024, label %1194, label %1025

; <label>:1025                                    ; preds = %1020
  br label %1026

; <label>:1026                                    ; preds = %1085, %1025
  %1027 = phi i32 [ %1188, %1085 ], [ %407, %1025 ]
  %1028 = phi i32 [ %1189, %1085 ], [ %429, %1025 ]
  %1029 = phi float [ %1190, %1085 ], [ %659, %1025 ]
  %1030 = phi i32 [ %1191, %1085 ], [ 0, %1025 ]
  %1031 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1032 = extractvalue %dx.types.CBufRet.i32 %1031, 0
  %1033 = urem i32 %1030, %1032
  %1034 = udiv i32 %1030, %1032
  %1035 = extractvalue %dx.types.CBufRet.i32 %1031, 2
  %1036 = extractvalue %dx.types.CBufRet.i32 %1031, 3
  %1037 = mul i32 %1035, %1033
  %1038 = mul i32 %1036, %1034
  %1039 = add i32 %1037, %407
  %1040 = add i32 %1038, %429
  %1041 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1042 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1041, i32 0, i32 %1039, i32 %1040, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1043 = extractvalue %dx.types.ResRet.i32 %1042, 0
  %1044 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1045 = extractvalue %dx.types.CBufRet.i32 %1044, 3
  %1046 = add i32 %1045, %1043
  %1047 = urem i32 %1046, %1035
  %1048 = udiv i32 %1046, %1035
  %1049 = mul i32 %1032, %1047
  %1050 = mul i32 %1032, %1048
  %1051 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1052 = extractvalue %dx.types.CBufRet.i32 %1051, 1
  %1053 = icmp slt i32 %1052, 0
  br i1 %1053, label %1054, label %1057

; <label>:1054                                    ; preds = %1026
  %1055 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1056 = extractvalue %dx.types.CBufRet.i32 %1055, 1
  br label %1057

; <label>:1057                                    ; preds = %1054, %1026
  %1058 = phi i32 [ %1056, %1054 ], [ %1052, %1026 ]
  %1059 = uitofp i32 %1058 to float
  %1060 = fmul fast float %1059, 1.250000e-01
  %1061 = call float @dx.op.unary.f32(i32 22, float %1060)  ; Frc(value)
  %1062 = call i32 @dx.op.unary.i32(i32 30, i32 %1058)  ; Bfrev(value)
  %1063 = lshr i32 %1062, 16
  %1064 = uitofp i32 %1063 to float
  %1065 = fmul fast float %1064, 0x3EF0000000000000
  %1066 = uitofp i32 %1032 to float
  %1067 = fmul fast float %1066, %1061
  %1068 = fmul fast float %1065, %1066
  %1069 = fptoui float %1067 to i32
  %1070 = fptoui float %1068 to i32
  %1071 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %1072 = extractvalue %dx.types.CBufRet.i32 %1071, 0
  %1073 = extractvalue %dx.types.CBufRet.i32 %1071, 1
  %1074 = add i32 %1072, %1049
  %1075 = add i32 %1074, %1069
  %1076 = add i32 %1073, %1050
  %1077 = add i32 %1076, %1070
  %1078 = icmp ult i32 %1046, %1045
  br i1 %1078, label %1085, label %1079

; <label>:1079                                    ; preds = %1057
  %1080 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1081 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1080, i32 %1043, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1082 = extractvalue %dx.types.ResRet.i32 %1081, 0
  %1083 = and i32 %1082, 65535
  %1084 = lshr i32 %1082, 16
  br label %1085

; <label>:1085                                    ; preds = %1079, %1057
  %1086 = phi i32 [ %1083, %1079 ], [ %1075, %1057 ]
  %1087 = phi i32 [ %1084, %1079 ], [ %1077, %1057 ]
  %1088 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1089 = extractvalue %dx.types.CBufRet.i32 %1088, 0
  %1090 = urem i32 %1046, %1089
  %1091 = udiv i32 %1046, %1089
  %1092 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1093 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1092, i32 0, i32 %1090, i32 %1091, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1094 = extractvalue %dx.types.ResRet.i32 %1093, 0
  %1095 = bitcast i32 %1094 to float
  %1096 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %1097 = extractvalue %dx.types.CBufRet.f32 %1096, 0
  %1098 = extractvalue %dx.types.CBufRet.f32 %1096, 1
  %1099 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %1100 = extractvalue %dx.types.CBufRet.f32 %1099, 0
  %1101 = extractvalue %dx.types.CBufRet.f32 %1099, 1
  %1102 = fadd fast float %1097, -1.000000e+00
  %1103 = fadd fast float %1102, %1100
  %1104 = fadd fast float %1098, -1.000000e+00
  %1105 = fadd fast float %1104, %1101
  %1106 = uitofp i32 %1086 to float
  %1107 = uitofp i32 %1087 to float
  %1108 = call float @dx.op.binary.f32(i32 36, float %1106, float %1103)  ; FMin(a,b)
  %1109 = call float @dx.op.binary.f32(i32 36, float %1107, float %1105)  ; FMin(a,b)
  %1110 = fadd fast float %1108, 5.000000e-01
  %1111 = fadd fast float %1109, 5.000000e-01
  %1112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1113 = extractvalue %dx.types.CBufRet.f32 %1112, 2
  %1114 = extractvalue %dx.types.CBufRet.f32 %1112, 3
  %1115 = fmul fast float %1113, %1110
  %1116 = fmul fast float %1114, %1111
  %1117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1118 = extractvalue %dx.types.CBufRet.f32 %1117, 2
  %1119 = extractvalue %dx.types.CBufRet.f32 %1117, 3
  %1120 = fsub fast float %1115, %1119
  %1121 = fsub fast float %1116, %1118
  %1122 = extractvalue %dx.types.CBufRet.f32 %1117, 0
  %1123 = extractvalue %dx.types.CBufRet.f32 %1117, 1
  %1124 = fdiv fast float %1120, %1122
  %1125 = fdiv fast float %1121, %1123
  %1126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %1127 = extractvalue %dx.types.CBufRet.f32 %1126, 0
  %1128 = extractvalue %dx.types.CBufRet.f32 %1126, 1
  %1129 = extractvalue %dx.types.CBufRet.f32 %1126, 2
  %1130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %1131 = extractvalue %dx.types.CBufRet.f32 %1130, 0
  %1132 = extractvalue %dx.types.CBufRet.f32 %1130, 1
  %1133 = extractvalue %dx.types.CBufRet.f32 %1130, 2
  %1134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1135 = extractvalue %dx.types.CBufRet.f32 %1134, 0
  %1136 = extractvalue %dx.types.CBufRet.f32 %1134, 1
  %1137 = extractvalue %dx.types.CBufRet.f32 %1134, 2
  %1138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1139 = extractvalue %dx.types.CBufRet.f32 %1138, 0
  %1140 = extractvalue %dx.types.CBufRet.f32 %1138, 1
  %1141 = extractvalue %dx.types.CBufRet.f32 %1138, 2
  %1142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %1143 = extractvalue %dx.types.CBufRet.f32 %1142, 0
  %1144 = extractvalue %dx.types.CBufRet.f32 %1142, 1
  %1145 = extractvalue %dx.types.CBufRet.f32 %1142, 2
  %1146 = fmul fast float %1143, 2.097152e+06
  %1147 = fmul fast float %1144, 2.097152e+06
  %1148 = fmul fast float %1145, 2.097152e+06
  %1149 = fadd fast float %1146, %1139
  %1150 = fadd fast float %1147, %1140
  %1151 = fadd fast float %1148, %1141
  %1152 = fmul fast float %1124, %1095
  %1153 = fmul fast float %1125, %1095
  %1154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1155 = extractvalue %dx.types.CBufRet.f32 %1154, 3
  %1156 = bitcast float %1155 to i32
  %1157 = icmp ne i32 %1156, 0
  %1158 = select i1 %1157, float %1124, float %1152
  %1159 = select i1 %1157, float %1125, float %1153
  %1160 = fmul fast float %1158, %1127
  %1161 = call float @dx.op.tertiary.f32(i32 46, float %1159, float %1131, float %1160)  ; FMad(a,b,c)
  %1162 = call float @dx.op.tertiary.f32(i32 46, float %1095, float %1135, float %1161)  ; FMad(a,b,c)
  %1163 = fadd fast float %1149, %1162
  %1164 = fmul fast float %1158, %1128
  %1165 = call float @dx.op.tertiary.f32(i32 46, float %1159, float %1132, float %1164)  ; FMad(a,b,c)
  %1166 = call float @dx.op.tertiary.f32(i32 46, float %1095, float %1136, float %1165)  ; FMad(a,b,c)
  %1167 = fadd fast float %1150, %1166
  %1168 = fmul fast float %1158, %1129
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1159, float %1133, float %1168)  ; FMad(a,b,c)
  %1170 = call float @dx.op.tertiary.f32(i32 46, float %1095, float %1137, float %1169)  ; FMad(a,b,c)
  %1171 = fadd fast float %1151, %1170
  %1172 = call float @dx.op.dot4.f32(i32 56, float %1163, float %1167, float %1171, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1173 = call float @dx.op.unary.f32(i32 6, float %1172)  ; FAbs(value)
  %1174 = fdiv fast float %1173, %67
  %1175 = fmul fast float %1174, %1174
  %1176 = fmul fast float %1175, -1.000000e+04
  %1177 = call float @dx.op.unary.f32(i32 21, float %1176)  ; Exp(value)
  %1178 = fsub fast float %1106, %191
  %1179 = fsub fast float %1107, %192
  %1180 = call float @dx.op.unary.f32(i32 6, float %1178)  ; FAbs(value)
  %1181 = call float @dx.op.unary.f32(i32 6, float %1179)  ; FAbs(value)
  %1182 = call float @dx.op.binary.f32(i32 36, float %1180, float %1181)  ; FMin(a,b)
  %1183 = fdiv fast float %1182, %1066
  %1184 = call float @dx.op.unary.f32(i32 7, float %1183)  ; Saturate(value)
  %1185 = fsub fast float 1.000000e+00, %1184
  %1186 = fmul fast float %1185, %1177
  %1187 = fcmp fast ogt float %1186, %1029
  %1188 = select i1 %1187, i32 %1090, i32 %1027
  %1189 = select i1 %1187, i32 %1091, i32 %1028
  %1190 = select i1 %1187, float %1186, float %1029
  %1191 = add nuw i32 %1030, 1
  %1192 = icmp eq i32 %1191, %1023
  br i1 %1192, label %1193, label %1026

; <label>:1193                                    ; preds = %1085
  br label %1194

; <label>:1194                                    ; preds = %1193, %1020, %1015
  %1195 = phi i32 [ %407, %1020 ], [ %407, %1015 ], [ %1188, %1193 ]
  %1196 = phi i32 [ %429, %1020 ], [ %429, %1015 ], [ %1189, %1193 ]
  %1197 = phi float [ %659, %1020 ], [ %659, %1015 ], [ %1190, %1193 ]
  %1198 = fcmp fast ugt float %660, 0x3F847AE140000000
  br i1 %1198, label %1373, label %1199

; <label>:1199                                    ; preds = %1194
  %1200 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1201 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1200, i32 0, i32 %425, i32 %429, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1202 = extractvalue %dx.types.ResRet.i32 %1201, 0
  %1203 = icmp eq i32 %1202, 0
  br i1 %1203, label %1373, label %1204

; <label>:1204                                    ; preds = %1199
  br label %1205

; <label>:1205                                    ; preds = %1264, %1204
  %1206 = phi i32 [ %1367, %1264 ], [ %425, %1204 ]
  %1207 = phi i32 [ %1368, %1264 ], [ %429, %1204 ]
  %1208 = phi float [ %1369, %1264 ], [ %660, %1204 ]
  %1209 = phi i32 [ %1370, %1264 ], [ 0, %1204 ]
  %1210 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1211 = extractvalue %dx.types.CBufRet.i32 %1210, 0
  %1212 = urem i32 %1209, %1211
  %1213 = udiv i32 %1209, %1211
  %1214 = extractvalue %dx.types.CBufRet.i32 %1210, 2
  %1215 = extractvalue %dx.types.CBufRet.i32 %1210, 3
  %1216 = mul i32 %1214, %1212
  %1217 = mul i32 %1215, %1213
  %1218 = add i32 %1216, %425
  %1219 = add i32 %1217, %429
  %1220 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1221 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1220, i32 0, i32 %1218, i32 %1219, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1222 = extractvalue %dx.types.ResRet.i32 %1221, 0
  %1223 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1224 = extractvalue %dx.types.CBufRet.i32 %1223, 3
  %1225 = add i32 %1224, %1222
  %1226 = urem i32 %1225, %1214
  %1227 = udiv i32 %1225, %1214
  %1228 = mul i32 %1211, %1226
  %1229 = mul i32 %1211, %1227
  %1230 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1231 = extractvalue %dx.types.CBufRet.i32 %1230, 1
  %1232 = icmp slt i32 %1231, 0
  br i1 %1232, label %1233, label %1236

; <label>:1233                                    ; preds = %1205
  %1234 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1235 = extractvalue %dx.types.CBufRet.i32 %1234, 1
  br label %1236

; <label>:1236                                    ; preds = %1233, %1205
  %1237 = phi i32 [ %1235, %1233 ], [ %1231, %1205 ]
  %1238 = uitofp i32 %1237 to float
  %1239 = fmul fast float %1238, 1.250000e-01
  %1240 = call float @dx.op.unary.f32(i32 22, float %1239)  ; Frc(value)
  %1241 = call i32 @dx.op.unary.i32(i32 30, i32 %1237)  ; Bfrev(value)
  %1242 = lshr i32 %1241, 16
  %1243 = uitofp i32 %1242 to float
  %1244 = fmul fast float %1243, 0x3EF0000000000000
  %1245 = uitofp i32 %1211 to float
  %1246 = fmul fast float %1245, %1240
  %1247 = fmul fast float %1244, %1245
  %1248 = fptoui float %1246 to i32
  %1249 = fptoui float %1247 to i32
  %1250 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 126)  ; CBufferLoadLegacy(handle,regIndex)
  %1251 = extractvalue %dx.types.CBufRet.i32 %1250, 0
  %1252 = extractvalue %dx.types.CBufRet.i32 %1250, 1
  %1253 = add i32 %1251, %1228
  %1254 = add i32 %1253, %1248
  %1255 = add i32 %1252, %1229
  %1256 = add i32 %1255, %1249
  %1257 = icmp ult i32 %1225, %1224
  br i1 %1257, label %1264, label %1258

; <label>:1258                                    ; preds = %1236
  %1259 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1260 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1259, i32 %1222, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1261 = extractvalue %dx.types.ResRet.i32 %1260, 0
  %1262 = and i32 %1261, 65535
  %1263 = lshr i32 %1261, 16
  br label %1264

; <label>:1264                                    ; preds = %1258, %1236
  %1265 = phi i32 [ %1262, %1258 ], [ %1254, %1236 ]
  %1266 = phi i32 [ %1263, %1258 ], [ %1256, %1236 ]
  %1267 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1268 = extractvalue %dx.types.CBufRet.i32 %1267, 0
  %1269 = urem i32 %1225, %1268
  %1270 = udiv i32 %1225, %1268
  %1271 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1272 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1271, i32 0, i32 %1269, i32 %1270, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1273 = extractvalue %dx.types.ResRet.i32 %1272, 0
  %1274 = bitcast i32 %1273 to float
  %1275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %1276 = extractvalue %dx.types.CBufRet.f32 %1275, 0
  %1277 = extractvalue %dx.types.CBufRet.f32 %1275, 1
  %1278 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %1279 = extractvalue %dx.types.CBufRet.f32 %1278, 0
  %1280 = extractvalue %dx.types.CBufRet.f32 %1278, 1
  %1281 = fadd fast float %1276, -1.000000e+00
  %1282 = fadd fast float %1281, %1279
  %1283 = fadd fast float %1277, -1.000000e+00
  %1284 = fadd fast float %1283, %1280
  %1285 = uitofp i32 %1265 to float
  %1286 = uitofp i32 %1266 to float
  %1287 = call float @dx.op.binary.f32(i32 36, float %1285, float %1282)  ; FMin(a,b)
  %1288 = call float @dx.op.binary.f32(i32 36, float %1286, float %1284)  ; FMin(a,b)
  %1289 = fadd fast float %1287, 5.000000e-01
  %1290 = fadd fast float %1288, 5.000000e-01
  %1291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1292 = extractvalue %dx.types.CBufRet.f32 %1291, 2
  %1293 = extractvalue %dx.types.CBufRet.f32 %1291, 3
  %1294 = fmul fast float %1292, %1289
  %1295 = fmul fast float %1293, %1290
  %1296 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1297 = extractvalue %dx.types.CBufRet.f32 %1296, 2
  %1298 = extractvalue %dx.types.CBufRet.f32 %1296, 3
  %1299 = fsub fast float %1294, %1298
  %1300 = fsub fast float %1295, %1297
  %1301 = extractvalue %dx.types.CBufRet.f32 %1296, 0
  %1302 = extractvalue %dx.types.CBufRet.f32 %1296, 1
  %1303 = fdiv fast float %1299, %1301
  %1304 = fdiv fast float %1300, %1302
  %1305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %1306 = extractvalue %dx.types.CBufRet.f32 %1305, 0
  %1307 = extractvalue %dx.types.CBufRet.f32 %1305, 1
  %1308 = extractvalue %dx.types.CBufRet.f32 %1305, 2
  %1309 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %1310 = extractvalue %dx.types.CBufRet.f32 %1309, 0
  %1311 = extractvalue %dx.types.CBufRet.f32 %1309, 1
  %1312 = extractvalue %dx.types.CBufRet.f32 %1309, 2
  %1313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1314 = extractvalue %dx.types.CBufRet.f32 %1313, 0
  %1315 = extractvalue %dx.types.CBufRet.f32 %1313, 1
  %1316 = extractvalue %dx.types.CBufRet.f32 %1313, 2
  %1317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1318 = extractvalue %dx.types.CBufRet.f32 %1317, 0
  %1319 = extractvalue %dx.types.CBufRet.f32 %1317, 1
  %1320 = extractvalue %dx.types.CBufRet.f32 %1317, 2
  %1321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %1322 = extractvalue %dx.types.CBufRet.f32 %1321, 0
  %1323 = extractvalue %dx.types.CBufRet.f32 %1321, 1
  %1324 = extractvalue %dx.types.CBufRet.f32 %1321, 2
  %1325 = fmul fast float %1322, 2.097152e+06
  %1326 = fmul fast float %1323, 2.097152e+06
  %1327 = fmul fast float %1324, 2.097152e+06
  %1328 = fadd fast float %1325, %1318
  %1329 = fadd fast float %1326, %1319
  %1330 = fadd fast float %1327, %1320
  %1331 = fmul fast float %1303, %1274
  %1332 = fmul fast float %1304, %1274
  %1333 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %1334 = extractvalue %dx.types.CBufRet.f32 %1333, 3
  %1335 = bitcast float %1334 to i32
  %1336 = icmp ne i32 %1335, 0
  %1337 = select i1 %1336, float %1303, float %1331
  %1338 = select i1 %1336, float %1304, float %1332
  %1339 = fmul fast float %1337, %1306
  %1340 = call float @dx.op.tertiary.f32(i32 46, float %1338, float %1310, float %1339)  ; FMad(a,b,c)
  %1341 = call float @dx.op.tertiary.f32(i32 46, float %1274, float %1314, float %1340)  ; FMad(a,b,c)
  %1342 = fadd fast float %1328, %1341
  %1343 = fmul fast float %1337, %1307
  %1344 = call float @dx.op.tertiary.f32(i32 46, float %1338, float %1311, float %1343)  ; FMad(a,b,c)
  %1345 = call float @dx.op.tertiary.f32(i32 46, float %1274, float %1315, float %1344)  ; FMad(a,b,c)
  %1346 = fadd fast float %1329, %1345
  %1347 = fmul fast float %1337, %1308
  %1348 = call float @dx.op.tertiary.f32(i32 46, float %1338, float %1312, float %1347)  ; FMad(a,b,c)
  %1349 = call float @dx.op.tertiary.f32(i32 46, float %1274, float %1316, float %1348)  ; FMad(a,b,c)
  %1350 = fadd fast float %1330, %1349
  %1351 = call float @dx.op.dot4.f32(i32 56, float %1342, float %1346, float %1350, float -1.000000e+00, float %111, float %112, float %113, float %442)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1352 = call float @dx.op.unary.f32(i32 6, float %1351)  ; FAbs(value)
  %1353 = fdiv fast float %1352, %67
  %1354 = fmul fast float %1353, %1353
  %1355 = fmul fast float %1354, -1.000000e+04
  %1356 = call float @dx.op.unary.f32(i32 21, float %1355)  ; Exp(value)
  %1357 = fsub fast float %1285, %191
  %1358 = fsub fast float %1286, %192
  %1359 = call float @dx.op.unary.f32(i32 6, float %1357)  ; FAbs(value)
  %1360 = call float @dx.op.unary.f32(i32 6, float %1358)  ; FAbs(value)
  %1361 = call float @dx.op.binary.f32(i32 36, float %1359, float %1360)  ; FMin(a,b)
  %1362 = fdiv fast float %1361, %1245
  %1363 = call float @dx.op.unary.f32(i32 7, float %1362)  ; Saturate(value)
  %1364 = fsub fast float 1.000000e+00, %1363
  %1365 = fmul fast float %1364, %1356
  %1366 = fcmp fast ogt float %1365, %1208
  %1367 = select i1 %1366, i32 %1269, i32 %1206
  %1368 = select i1 %1366, i32 %1270, i32 %1207
  %1369 = select i1 %1366, float %1365, float %1208
  %1370 = add nuw i32 %1209, 1
  %1371 = icmp eq i32 %1370, %1202
  br i1 %1371, label %1372, label %1205

; <label>:1372                                    ; preds = %1264
  br label %1373

; <label>:1373                                    ; preds = %1372, %1199, %1194
  %1374 = phi i32 [ %425, %1199 ], [ %425, %1194 ], [ %1367, %1372 ]
  %1375 = phi i32 [ %429, %1199 ], [ %429, %1194 ], [ %1368, %1372 ]
  %1376 = phi float [ %660, %1199 ], [ %660, %1194 ], [ %1369, %1372 ]
  %1377 = call float @dx.op.dot4.f32(i32 56, float %839, float %1018, float %1197, float %1376, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1378 = call float @dx.op.binary.f32(i32 35, float %1377, float 0x3F847AE140000000)  ; FMax(a,b)
  %1379 = fdiv fast float %839, %1378
  %1380 = fdiv fast float %1018, %1378
  %1381 = fdiv fast float %1197, %1378
  %1382 = fdiv fast float %1376, %1378
  %1383 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %1384 = extractvalue %dx.types.CBufRet.f32 %1383, 0
  %1385 = extractvalue %dx.types.CBufRet.f32 %1383, 1
  %1386 = extractvalue %dx.types.CBufRet.f32 %1383, 2
  %1387 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %1388 = extractvalue %dx.types.CBufRet.f32 %1387, 0
  %1389 = extractvalue %dx.types.CBufRet.f32 %1387, 1
  %1390 = extractvalue %dx.types.CBufRet.f32 %1387, 2
  %1391 = fmul fast float %1384, 2.097152e+06
  %1392 = fmul fast float %1385, 2.097152e+06
  %1393 = fmul fast float %1386, 2.097152e+06
  %1394 = fsub fast float %1388, %246
  %1395 = fadd fast float %1394, %1391
  %1396 = fsub fast float %1389, %250
  %1397 = fadd fast float %1396, %1392
  %1398 = fsub fast float %1390, %254
  %1399 = fadd fast float %1398, %1393
  %1400 = call float @dx.op.dot3.f32(i32 55, float %1395, float %1397, float %1399, float %1395, float %1397, float %1399)  ; Dot3(ax,ay,az,bx,by,bz)
  %1401 = call float @dx.op.unary.f32(i32 25, float %1400)  ; Rsqrt(value)
  %1402 = fmul fast float %1395, %1401
  %1403 = fmul fast float %1397, %1401
  %1404 = fmul fast float %1399, %1401
  %1405 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1406 = extractvalue %dx.types.CBufRet.i32 %1405, 1
  %1407 = select i1 %188, i32 1, i32 %1406
  %1408 = icmp eq i32 %1407, 0
  br i1 %1408, label %1409, label %1883

; <label>:1409                                    ; preds = %1373
  %1410 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1411 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1410, i32 0, i32 %837, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1412 = extractvalue %dx.types.ResRet.f32 %1411, 0
  %1413 = extractvalue %dx.types.ResRet.f32 %1411, 1
  %1414 = extractvalue %dx.types.ResRet.f32 %1411, 2
  %1415 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1416 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %837, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1417 = extractvalue %dx.types.ResRet.f32 %1416, 0
  %1418 = extractvalue %dx.types.ResRet.f32 %1416, 1
  %1419 = extractvalue %dx.types.ResRet.f32 %1416, 2
  %1420 = extractvalue %dx.types.ResRet.f32 %1416, 3
  %1421 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1422 = extractvalue %dx.types.CBufRet.i32 %1421, 0
  %1423 = add i32 %1422, %837
  %1424 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1423, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1425 = extractvalue %dx.types.ResRet.f32 %1424, 0
  %1426 = extractvalue %dx.types.ResRet.f32 %1424, 1
  %1427 = extractvalue %dx.types.ResRet.f32 %1424, 2
  %1428 = extractvalue %dx.types.ResRet.f32 %1424, 3
  %1429 = shl i32 %1422, 1
  %1430 = add i32 %1429, %837
  %1431 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1430, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1432 = extractvalue %dx.types.ResRet.f32 %1431, 0
  %1433 = extractvalue %dx.types.ResRet.f32 %1431, 1
  %1434 = extractvalue %dx.types.ResRet.f32 %1431, 2
  %1435 = extractvalue %dx.types.ResRet.f32 %1431, 3
  %1436 = mul i32 %1422, 3
  %1437 = add i32 %1436, %837
  %1438 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1437, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1439 = extractvalue %dx.types.ResRet.f32 %1438, 0
  %1440 = extractvalue %dx.types.ResRet.f32 %1438, 1
  %1441 = extractvalue %dx.types.ResRet.f32 %1438, 2
  %1442 = extractvalue %dx.types.ResRet.f32 %1438, 3
  %1443 = shl i32 %1422, 2
  %1444 = add i32 %1443, %837
  %1445 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1444, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1446 = extractvalue %dx.types.ResRet.f32 %1445, 0
  %1447 = extractvalue %dx.types.ResRet.f32 %1445, 1
  %1448 = extractvalue %dx.types.ResRet.f32 %1445, 2
  %1449 = extractvalue %dx.types.ResRet.f32 %1445, 3
  %1450 = mul i32 %1422, 5
  %1451 = add i32 %1450, %837
  %1452 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1451, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1453 = extractvalue %dx.types.ResRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.ResRet.f32 %1452, 1
  %1455 = extractvalue %dx.types.ResRet.f32 %1452, 2
  %1456 = extractvalue %dx.types.ResRet.f32 %1452, 3
  %1457 = fmul fast float %1412, %1379
  %1458 = fmul fast float %1417, %1379
  %1459 = fmul fast float %1418, %1379
  %1460 = fmul fast float %1419, %1379
  %1461 = fmul fast float %1420, %1379
  %1462 = fmul fast float %1425, %1379
  %1463 = fmul fast float %1426, %1379
  %1464 = fmul fast float %1427, %1379
  %1465 = fmul fast float %1428, %1379
  %1466 = fmul fast float %1413, %1379
  %1467 = fmul fast float %1432, %1379
  %1468 = fmul fast float %1433, %1379
  %1469 = fmul fast float %1434, %1379
  %1470 = fmul fast float %1435, %1379
  %1471 = fmul fast float %1439, %1379
  %1472 = fmul fast float %1440, %1379
  %1473 = fmul fast float %1441, %1379
  %1474 = fmul fast float %1442, %1379
  %1475 = fmul fast float %1414, %1379
  %1476 = fmul fast float %1446, %1379
  %1477 = fmul fast float %1447, %1379
  %1478 = fmul fast float %1448, %1379
  %1479 = fmul fast float %1449, %1379
  %1480 = fmul fast float %1453, %1379
  %1481 = fmul fast float %1454, %1379
  %1482 = fmul fast float %1455, %1379
  %1483 = fmul fast float %1456, %1379
  %1484 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1410, i32 0, i32 %1016, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1485 = extractvalue %dx.types.ResRet.f32 %1484, 0
  %1486 = extractvalue %dx.types.ResRet.f32 %1484, 1
  %1487 = extractvalue %dx.types.ResRet.f32 %1484, 2
  %1488 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1016, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1489 = extractvalue %dx.types.ResRet.f32 %1488, 0
  %1490 = extractvalue %dx.types.ResRet.f32 %1488, 1
  %1491 = extractvalue %dx.types.ResRet.f32 %1488, 2
  %1492 = extractvalue %dx.types.ResRet.f32 %1488, 3
  %1493 = add i32 %1422, %1016
  %1494 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1493, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1495 = extractvalue %dx.types.ResRet.f32 %1494, 0
  %1496 = extractvalue %dx.types.ResRet.f32 %1494, 1
  %1497 = extractvalue %dx.types.ResRet.f32 %1494, 2
  %1498 = extractvalue %dx.types.ResRet.f32 %1494, 3
  %1499 = add i32 %1429, %1016
  %1500 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1499, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1501 = extractvalue %dx.types.ResRet.f32 %1500, 0
  %1502 = extractvalue %dx.types.ResRet.f32 %1500, 1
  %1503 = extractvalue %dx.types.ResRet.f32 %1500, 2
  %1504 = extractvalue %dx.types.ResRet.f32 %1500, 3
  %1505 = add i32 %1436, %1016
  %1506 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1505, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1507 = extractvalue %dx.types.ResRet.f32 %1506, 0
  %1508 = extractvalue %dx.types.ResRet.f32 %1506, 1
  %1509 = extractvalue %dx.types.ResRet.f32 %1506, 2
  %1510 = extractvalue %dx.types.ResRet.f32 %1506, 3
  %1511 = add i32 %1443, %1016
  %1512 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1511, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1513 = extractvalue %dx.types.ResRet.f32 %1512, 0
  %1514 = extractvalue %dx.types.ResRet.f32 %1512, 1
  %1515 = extractvalue %dx.types.ResRet.f32 %1512, 2
  %1516 = extractvalue %dx.types.ResRet.f32 %1512, 3
  %1517 = add i32 %1450, %1016
  %1518 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1517, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1519 = extractvalue %dx.types.ResRet.f32 %1518, 0
  %1520 = extractvalue %dx.types.ResRet.f32 %1518, 1
  %1521 = extractvalue %dx.types.ResRet.f32 %1518, 2
  %1522 = extractvalue %dx.types.ResRet.f32 %1518, 3
  %1523 = fmul fast float %1485, %1380
  %1524 = fmul fast float %1489, %1380
  %1525 = fmul fast float %1490, %1380
  %1526 = fmul fast float %1491, %1380
  %1527 = fmul fast float %1492, %1380
  %1528 = fmul fast float %1495, %1380
  %1529 = fmul fast float %1496, %1380
  %1530 = fmul fast float %1497, %1380
  %1531 = fmul fast float %1498, %1380
  %1532 = fmul fast float %1486, %1380
  %1533 = fmul fast float %1501, %1380
  %1534 = fmul fast float %1502, %1380
  %1535 = fmul fast float %1503, %1380
  %1536 = fmul fast float %1504, %1380
  %1537 = fmul fast float %1507, %1380
  %1538 = fmul fast float %1508, %1380
  %1539 = fmul fast float %1509, %1380
  %1540 = fmul fast float %1510, %1380
  %1541 = fmul fast float %1487, %1380
  %1542 = fmul fast float %1513, %1380
  %1543 = fmul fast float %1514, %1380
  %1544 = fmul fast float %1515, %1380
  %1545 = fmul fast float %1516, %1380
  %1546 = fmul fast float %1519, %1380
  %1547 = fmul fast float %1520, %1380
  %1548 = fmul fast float %1521, %1380
  %1549 = fmul fast float %1522, %1380
  %1550 = fadd fast float %1523, %1457
  %1551 = fadd fast float %1524, %1458
  %1552 = fadd fast float %1525, %1459
  %1553 = fadd fast float %1526, %1460
  %1554 = fadd fast float %1527, %1461
  %1555 = fadd fast float %1528, %1462
  %1556 = fadd fast float %1529, %1463
  %1557 = fadd fast float %1530, %1464
  %1558 = fadd fast float %1531, %1465
  %1559 = fadd fast float %1532, %1466
  %1560 = fadd fast float %1533, %1467
  %1561 = fadd fast float %1534, %1468
  %1562 = fadd fast float %1535, %1469
  %1563 = fadd fast float %1536, %1470
  %1564 = fadd fast float %1537, %1471
  %1565 = fadd fast float %1538, %1472
  %1566 = fadd fast float %1539, %1473
  %1567 = fadd fast float %1540, %1474
  %1568 = fadd fast float %1541, %1475
  %1569 = fadd fast float %1542, %1476
  %1570 = fadd fast float %1543, %1477
  %1571 = fadd fast float %1544, %1478
  %1572 = fadd fast float %1545, %1479
  %1573 = fadd fast float %1546, %1480
  %1574 = fadd fast float %1547, %1481
  %1575 = fadd fast float %1548, %1482
  %1576 = fadd fast float %1549, %1483
  %1577 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1410, i32 0, i32 %1195, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1578 = extractvalue %dx.types.ResRet.f32 %1577, 0
  %1579 = extractvalue %dx.types.ResRet.f32 %1577, 1
  %1580 = extractvalue %dx.types.ResRet.f32 %1577, 2
  %1581 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1195, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1582 = extractvalue %dx.types.ResRet.f32 %1581, 0
  %1583 = extractvalue %dx.types.ResRet.f32 %1581, 1
  %1584 = extractvalue %dx.types.ResRet.f32 %1581, 2
  %1585 = extractvalue %dx.types.ResRet.f32 %1581, 3
  %1586 = add i32 %1422, %1195
  %1587 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1586, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1588 = extractvalue %dx.types.ResRet.f32 %1587, 0
  %1589 = extractvalue %dx.types.ResRet.f32 %1587, 1
  %1590 = extractvalue %dx.types.ResRet.f32 %1587, 2
  %1591 = extractvalue %dx.types.ResRet.f32 %1587, 3
  %1592 = add i32 %1429, %1195
  %1593 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1592, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1594 = extractvalue %dx.types.ResRet.f32 %1593, 0
  %1595 = extractvalue %dx.types.ResRet.f32 %1593, 1
  %1596 = extractvalue %dx.types.ResRet.f32 %1593, 2
  %1597 = extractvalue %dx.types.ResRet.f32 %1593, 3
  %1598 = add i32 %1436, %1195
  %1599 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1598, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1600 = extractvalue %dx.types.ResRet.f32 %1599, 0
  %1601 = extractvalue %dx.types.ResRet.f32 %1599, 1
  %1602 = extractvalue %dx.types.ResRet.f32 %1599, 2
  %1603 = extractvalue %dx.types.ResRet.f32 %1599, 3
  %1604 = add i32 %1443, %1195
  %1605 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1604, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1606 = extractvalue %dx.types.ResRet.f32 %1605, 0
  %1607 = extractvalue %dx.types.ResRet.f32 %1605, 1
  %1608 = extractvalue %dx.types.ResRet.f32 %1605, 2
  %1609 = extractvalue %dx.types.ResRet.f32 %1605, 3
  %1610 = add i32 %1450, %1195
  %1611 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1610, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1612 = extractvalue %dx.types.ResRet.f32 %1611, 0
  %1613 = extractvalue %dx.types.ResRet.f32 %1611, 1
  %1614 = extractvalue %dx.types.ResRet.f32 %1611, 2
  %1615 = extractvalue %dx.types.ResRet.f32 %1611, 3
  %1616 = fmul fast float %1578, %1381
  %1617 = fmul fast float %1582, %1381
  %1618 = fmul fast float %1583, %1381
  %1619 = fmul fast float %1584, %1381
  %1620 = fmul fast float %1585, %1381
  %1621 = fmul fast float %1588, %1381
  %1622 = fmul fast float %1589, %1381
  %1623 = fmul fast float %1590, %1381
  %1624 = fmul fast float %1591, %1381
  %1625 = fmul fast float %1579, %1381
  %1626 = fmul fast float %1594, %1381
  %1627 = fmul fast float %1595, %1381
  %1628 = fmul fast float %1596, %1381
  %1629 = fmul fast float %1597, %1381
  %1630 = fmul fast float %1600, %1381
  %1631 = fmul fast float %1601, %1381
  %1632 = fmul fast float %1602, %1381
  %1633 = fmul fast float %1603, %1381
  %1634 = fmul fast float %1580, %1381
  %1635 = fmul fast float %1606, %1381
  %1636 = fmul fast float %1607, %1381
  %1637 = fmul fast float %1608, %1381
  %1638 = fmul fast float %1609, %1381
  %1639 = fmul fast float %1612, %1381
  %1640 = fmul fast float %1613, %1381
  %1641 = fmul fast float %1614, %1381
  %1642 = fmul fast float %1615, %1381
  %1643 = fadd fast float %1550, %1616
  %1644 = fadd fast float %1551, %1617
  %1645 = fadd fast float %1552, %1618
  %1646 = fadd fast float %1553, %1619
  %1647 = fadd fast float %1554, %1620
  %1648 = fadd fast float %1555, %1621
  %1649 = fadd fast float %1556, %1622
  %1650 = fadd fast float %1557, %1623
  %1651 = fadd fast float %1558, %1624
  %1652 = fadd fast float %1559, %1625
  %1653 = fadd fast float %1560, %1626
  %1654 = fadd fast float %1561, %1627
  %1655 = fadd fast float %1562, %1628
  %1656 = fadd fast float %1563, %1629
  %1657 = fadd fast float %1564, %1630
  %1658 = fadd fast float %1565, %1631
  %1659 = fadd fast float %1566, %1632
  %1660 = fadd fast float %1567, %1633
  %1661 = fadd fast float %1568, %1634
  %1662 = fadd fast float %1569, %1635
  %1663 = fadd fast float %1570, %1636
  %1664 = fadd fast float %1571, %1637
  %1665 = fadd fast float %1572, %1638
  %1666 = fadd fast float %1573, %1639
  %1667 = fadd fast float %1574, %1640
  %1668 = fadd fast float %1575, %1641
  %1669 = fadd fast float %1576, %1642
  %1670 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1410, i32 0, i32 %1374, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1671 = extractvalue %dx.types.ResRet.f32 %1670, 0
  %1672 = extractvalue %dx.types.ResRet.f32 %1670, 1
  %1673 = extractvalue %dx.types.ResRet.f32 %1670, 2
  %1674 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1374, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1675 = extractvalue %dx.types.ResRet.f32 %1674, 0
  %1676 = extractvalue %dx.types.ResRet.f32 %1674, 1
  %1677 = extractvalue %dx.types.ResRet.f32 %1674, 2
  %1678 = extractvalue %dx.types.ResRet.f32 %1674, 3
  %1679 = add i32 %1422, %1374
  %1680 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1679, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1681 = extractvalue %dx.types.ResRet.f32 %1680, 0
  %1682 = extractvalue %dx.types.ResRet.f32 %1680, 1
  %1683 = extractvalue %dx.types.ResRet.f32 %1680, 2
  %1684 = extractvalue %dx.types.ResRet.f32 %1680, 3
  %1685 = add i32 %1429, %1374
  %1686 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1685, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1687 = extractvalue %dx.types.ResRet.f32 %1686, 0
  %1688 = extractvalue %dx.types.ResRet.f32 %1686, 1
  %1689 = extractvalue %dx.types.ResRet.f32 %1686, 2
  %1690 = extractvalue %dx.types.ResRet.f32 %1686, 3
  %1691 = add i32 %1436, %1374
  %1692 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1691, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1693 = extractvalue %dx.types.ResRet.f32 %1692, 0
  %1694 = extractvalue %dx.types.ResRet.f32 %1692, 1
  %1695 = extractvalue %dx.types.ResRet.f32 %1692, 2
  %1696 = extractvalue %dx.types.ResRet.f32 %1692, 3
  %1697 = add i32 %1443, %1374
  %1698 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1697, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1699 = extractvalue %dx.types.ResRet.f32 %1698, 0
  %1700 = extractvalue %dx.types.ResRet.f32 %1698, 1
  %1701 = extractvalue %dx.types.ResRet.f32 %1698, 2
  %1702 = extractvalue %dx.types.ResRet.f32 %1698, 3
  %1703 = add i32 %1450, %1374
  %1704 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1415, i32 0, i32 %1703, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1705 = extractvalue %dx.types.ResRet.f32 %1704, 0
  %1706 = extractvalue %dx.types.ResRet.f32 %1704, 1
  %1707 = extractvalue %dx.types.ResRet.f32 %1704, 2
  %1708 = extractvalue %dx.types.ResRet.f32 %1704, 3
  %1709 = fmul fast float %1671, %1382
  %1710 = fmul fast float %1675, %1382
  %1711 = fmul fast float %1676, %1382
  %1712 = fmul fast float %1677, %1382
  %1713 = fmul fast float %1678, %1382
  %1714 = fmul fast float %1681, %1382
  %1715 = fmul fast float %1682, %1382
  %1716 = fmul fast float %1683, %1382
  %1717 = fmul fast float %1684, %1382
  %1718 = fmul fast float %1672, %1382
  %1719 = fmul fast float %1687, %1382
  %1720 = fmul fast float %1688, %1382
  %1721 = fmul fast float %1689, %1382
  %1722 = fmul fast float %1690, %1382
  %1723 = fmul fast float %1693, %1382
  %1724 = fmul fast float %1694, %1382
  %1725 = fmul fast float %1695, %1382
  %1726 = fmul fast float %1696, %1382
  %1727 = fmul fast float %1673, %1382
  %1728 = fmul fast float %1699, %1382
  %1729 = fmul fast float %1700, %1382
  %1730 = fmul fast float %1701, %1382
  %1731 = fmul fast float %1702, %1382
  %1732 = fmul fast float %1705, %1382
  %1733 = fmul fast float %1706, %1382
  %1734 = fmul fast float %1707, %1382
  %1735 = fmul fast float %1708, %1382
  %1736 = fadd fast float %1643, %1709
  %1737 = fadd fast float %1644, %1710
  %1738 = fadd fast float %1645, %1711
  %1739 = fadd fast float %1646, %1712
  %1740 = fadd fast float %1647, %1713
  %1741 = fadd fast float %1648, %1714
  %1742 = fadd fast float %1649, %1715
  %1743 = fadd fast float %1650, %1716
  %1744 = fadd fast float %1651, %1717
  %1745 = fadd fast float %1652, %1718
  %1746 = fadd fast float %1653, %1719
  %1747 = fadd fast float %1654, %1720
  %1748 = fadd fast float %1655, %1721
  %1749 = fadd fast float %1656, %1722
  %1750 = fadd fast float %1657, %1723
  %1751 = fadd fast float %1658, %1724
  %1752 = fadd fast float %1659, %1725
  %1753 = fadd fast float %1660, %1726
  %1754 = fadd fast float %1661, %1727
  %1755 = fadd fast float %1662, %1728
  %1756 = fadd fast float %1663, %1729
  %1757 = fadd fast float %1664, %1730
  %1758 = fadd fast float %1665, %1731
  %1759 = fadd fast float %1666, %1732
  %1760 = fadd fast float %1667, %1733
  %1761 = fadd fast float %1668, %1734
  %1762 = fadd fast float %1669, %1735
  %1763 = fmul fast float %1736, 0x3FEC5BF8A0000000
  %1764 = fmul fast float %1745, 0x3FEC5BF8A0000000
  %1765 = fmul fast float %1754, 0x3FEC5BF8A0000000
  %1766 = fmul fast float %1737, %112
  %1767 = fmul fast float %1746, %112
  %1768 = fmul fast float %1755, %112
  %1769 = fmul fast float %1738, %113
  %1770 = fmul fast float %1747, %113
  %1771 = fmul fast float %1756, %113
  %1772 = fsub fast float %1769, %1766
  %1773 = fsub fast float %1770, %1767
  %1774 = fsub fast float %1771, %1768
  %1775 = fmul fast float %1739, %111
  %1776 = fmul fast float %1748, %111
  %1777 = fmul fast float %1757, %111
  %1778 = fsub fast float %1772, %1775
  %1779 = fsub fast float %1773, %1776
  %1780 = fsub fast float %1774, %1777
  %1781 = fmul fast float %1778, 0x3FF05F8BE0000000
  %1782 = fmul fast float %1779, 0x3FF05F8BE0000000
  %1783 = fmul fast float %1780, 0x3FF05F8BE0000000
  %1784 = fadd fast float %1781, %1763
  %1785 = fadd fast float %1782, %1764
  %1786 = fadd fast float %1783, %1765
  %1787 = fmul fast float %113, %113
  %1788 = fmul fast float %1787, 3.000000e+00
  %1789 = fadd fast float %1788, -1.000000e+00
  %1790 = fmul fast float %1742, %1789
  %1791 = fmul fast float %1751, %1789
  %1792 = fmul fast float %1760, %1789
  %1793 = fmul fast float %111, %111
  %1794 = fmul fast float %112, %112
  %1795 = fsub fast float %1793, %1794
  %1796 = fmul fast float %1744, %1795
  %1797 = fmul fast float %1753, %1795
  %1798 = fmul fast float %1762, %1795
  %1799 = fmul fast float %112, %111
  %1800 = fmul fast float %1799, %1740
  %1801 = fmul fast float %1799, %1749
  %1802 = fmul fast float %1799, %1758
  %1803 = fmul fast float %113, %112
  %1804 = fmul fast float %1803, %1741
  %1805 = fmul fast float %1803, %1750
  %1806 = fmul fast float %1803, %1759
  %1807 = fsub fast float %1800, %1804
  %1808 = fsub fast float %1801, %1805
  %1809 = fsub fast float %1802, %1806
  %1810 = fmul fast float %111, %113
  %1811 = fmul fast float %1810, %1743
  %1812 = fmul fast float %1810, %1752
  %1813 = fmul fast float %1810, %1761
  %1814 = fsub fast float %1807, %1811
  %1815 = fsub fast float %1808, %1812
  %1816 = fsub fast float %1809, %1813
  %1817 = fmul fast float %1814, 2.000000e+00
  %1818 = fmul fast float %1815, 2.000000e+00
  %1819 = fmul fast float %1816, 2.000000e+00
  %1820 = fadd fast float %1817, %1796
  %1821 = fadd fast float %1818, %1797
  %1822 = fadd fast float %1819, %1798
  %1823 = fmul fast float %1820, 0x3FFBB67AE0000000
  %1824 = fmul fast float %1821, 0x3FFBB67AE0000000
  %1825 = fmul fast float %1822, 0x3FFBB67AE0000000
  %1826 = fadd fast float %1823, %1790
  %1827 = fadd fast float %1824, %1791
  %1828 = fadd fast float %1825, %1792
  %1829 = fmul fast float %1826, 0x3FCFB4E500000000
  %1830 = fmul fast float %1827, 0x3FCFB4E500000000
  %1831 = fmul fast float %1828, 0x3FCFB4E500000000
  %1832 = fadd fast float %1784, %1829
  %1833 = fadd fast float %1785, %1830
  %1834 = fadd fast float %1786, %1831
  %1835 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1832)  ; FMax(a,b)
  %1836 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1833)  ; FMax(a,b)
  %1837 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1834)  ; FMax(a,b)
  %1838 = fmul fast float %1835, 0x402921FB60000000
  %1839 = fmul fast float %1836, 0x402921FB60000000
  %1840 = fmul fast float %1837, 0x402921FB60000000
  br i1 %187, label %1841, label %2156

; <label>:1841                                    ; preds = %1409
  %1842 = fsub fast float -0.000000e+00, %111
  %1843 = fsub fast float -0.000000e+00, %113
  %1844 = fmul fast float %1738, %1843
  %1845 = fmul fast float %1747, %1843
  %1846 = fmul fast float %1756, %1843
  %1847 = fadd fast float %1766, %1844
  %1848 = fadd fast float %1767, %1845
  %1849 = fadd fast float %1768, %1846
  %1850 = fmul fast float %1739, %1842
  %1851 = fmul fast float %1748, %1842
  %1852 = fmul fast float %1757, %1842
  %1853 = fsub fast float %1847, %1850
  %1854 = fsub fast float %1848, %1851
  %1855 = fsub fast float %1849, %1852
  %1856 = fmul fast float %1853, 0x3FF05F8BE0000000
  %1857 = fmul fast float %1854, 0x3FF05F8BE0000000
  %1858 = fmul fast float %1855, 0x3FF05F8BE0000000
  %1859 = fadd fast float %1856, %1763
  %1860 = fadd fast float %1857, %1764
  %1861 = fadd fast float %1858, %1765
  %1862 = fmul fast float %113, -3.000000e+00
  %1863 = fmul fast float %1862, %1843
  %1864 = fadd fast float %1863, -1.000000e+00
  %1865 = fmul fast float %1742, %1864
  %1866 = fmul fast float %1751, %1864
  %1867 = fmul fast float %1760, %1864
  %1868 = fadd fast float %1823, %1865
  %1869 = fadd fast float %1824, %1866
  %1870 = fadd fast float %1825, %1867
  %1871 = fmul fast float %1868, 0x3FCFB4E500000000
  %1872 = fmul fast float %1869, 0x3FCFB4E500000000
  %1873 = fmul fast float %1870, 0x3FCFB4E500000000
  %1874 = fadd fast float %1859, %1871
  %1875 = fadd fast float %1860, %1872
  %1876 = fadd fast float %1861, %1873
  %1877 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1874)  ; FMax(a,b)
  %1878 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1875)  ; FMax(a,b)
  %1879 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1876)  ; FMax(a,b)
  %1880 = fmul fast float %1877, 4.000000e+00
  %1881 = fmul fast float %1878, 4.000000e+00
  %1882 = fmul fast float %1879, 4.000000e+00
  br label %2156

; <label>:1883                                    ; preds = %1373
  %1884 = icmp eq i32 %1407, 1
  br i1 %1884, label %1885, label %2156

; <label>:1885                                    ; preds = %1883
  %1886 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1887 = extractvalue %dx.types.CBufRet.f32 %1886, 0
  br label %1888

; <label>:1888                                    ; preds = %2014, %1885
  %1889 = phi float [ 0.000000e+00, %1885 ], [ %2147, %2014 ]
  %1890 = phi float [ 0.000000e+00, %1885 ], [ %2148, %2014 ]
  %1891 = phi float [ 0.000000e+00, %1885 ], [ %2149, %2014 ]
  %1892 = phi i32 [ 0, %1885 ], [ %2150, %2014 ]
  %1893 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %1894 = extractvalue %dx.types.CBufRet.i32 %1893, 1
  %1895 = mul i32 %51, 1664525
  %1896 = mul i32 %53, 1664525
  %1897 = mul i32 %1894, 1664525
  %1898 = add i32 %1895, 1013904223
  %1899 = add i32 %1896, 1013904223
  %1900 = add i32 %1897, 1013904223
  %1901 = mul i32 %1900, %1899
  %1902 = add i32 %1898, %1901
  %1903 = mul i32 %1902, %1900
  %1904 = add i32 %1903, %1899
  %1905 = mul i32 %1904, %1902
  %1906 = add i32 %1905, %1900
  %1907 = mul i32 %1906, %1904
  %1908 = add i32 %1907, %1902
  %1909 = mul i32 %1908, %1906
  %1910 = add i32 %1909, %1904
  %1911 = lshr i32 %1908, 16
  %1912 = uitofp i32 %1892 to float
  %1913 = fmul fast float %1912, 1.250000e-01
  %1914 = uitofp i32 %1911 to float
  %1915 = fmul fast float %1914, 0x3EF0000000000000
  %1916 = fadd fast float %1915, %1913
  %1917 = call float @dx.op.unary.f32(i32 22, float %1916)  ; Frc(value)
  %1918 = call i32 @dx.op.unary.i32(i32 30, i32 %1892)  ; Bfrev(value)
  %1919 = xor i32 %1910, %1918
  %1920 = lshr i32 %1919, 16
  %1921 = uitofp i32 %1920 to float
  switch i32 %100, label %2014 [
    i32 1, label %1922
    i32 10, label %1922
    i32 2, label %1922
    i32 5, label %1922
    i32 3, label %1922
    i32 4, label %1922
    i32 6, label %1922
    i32 9, label %1922
    i32 7, label %2003
  ]

; <label>:1922                                    ; preds = %1888, %1888, %1888, %1888, %1888, %1888, %1888, %1888
  %1923 = fcmp fast une float %185, 0.000000e+00
  br i1 %1923, label %1924, label %1934

; <label>:1924                                    ; preds = %1922
  %1925 = fmul fast float %184, %112
  %1926 = fmul fast float %183, %113
  %1927 = fsub fast float %1925, %1926
  %1928 = fmul fast float %182, %113
  %1929 = fmul fast float %184, %111
  %1930 = fsub fast float %1928, %1929
  %1931 = fmul fast float %183, %111
  %1932 = fmul fast float %182, %112
  %1933 = fsub fast float %1931, %1932
  br label %1953

; <label>:1934                                    ; preds = %1922
  %1935 = fcmp fast oge float %113, 0.000000e+00
  %1936 = select i1 %1935, float 1.000000e+00, float -1.000000e+00
  %1937 = fadd fast float %1936, %113
  %1938 = fdiv fast float 1.000000e+00, %1937
  %1939 = fsub fast float -0.000000e+00, %1938
  %1940 = fmul fast float %111, %112
  %1941 = fmul fast float %1940, %1939
  %1942 = fmul fast float %111, %111
  %1943 = fmul fast float %1942, %1936
  %1944 = fmul fast float %1943, %1939
  %1945 = fadd fast float %1944, 1.000000e+00
  %1946 = fmul fast float %1941, %1936
  %1947 = fmul fast float %111, %1936
  %1948 = fsub fast float -0.000000e+00, %1947
  %1949 = fmul fast float %112, %112
  %1950 = fmul fast float %1949, %1939
  %1951 = fadd fast float %1950, %1936
  %1952 = fsub fast float -0.000000e+00, %112
  br label %1953

; <label>:1953                                    ; preds = %1934, %1924
  %1954 = phi float [ %182, %1924 ], [ %1945, %1934 ]
  %1955 = phi float [ %183, %1924 ], [ %1946, %1934 ]
  %1956 = phi float [ %184, %1924 ], [ %1948, %1934 ]
  %1957 = phi float [ %1927, %1924 ], [ %1941, %1934 ]
  %1958 = phi float [ %1930, %1924 ], [ %1951, %1934 ]
  %1959 = phi float [ %1933, %1924 ], [ %1952, %1934 ]
  %1960 = fmul fast float %1917, 2.000000e+00
  %1961 = fmul fast float %1921, 0x3F00000000000000
  %1962 = fadd fast float %1960, 0xBFEFFFFFE0000000
  %1963 = fadd fast float %1961, 0xBFEFFFFFE0000000
  %1964 = call float @dx.op.unary.f32(i32 6, float %1962)  ; FAbs(value)
  %1965 = call float @dx.op.unary.f32(i32 6, float %1963)  ; FAbs(value)
  %1966 = call float @dx.op.binary.f32(i32 36, float %1964, float %1965)  ; FMin(a,b)
  %1967 = call float @dx.op.binary.f32(i32 35, float %1964, float %1965)  ; FMax(a,b)
  %1968 = fadd fast float %1967, 0x3BF0000000000000
  %1969 = fdiv fast float %1966, %1968
  %1970 = fcmp fast oge float %1965, %1964
  %1971 = uitofp i1 %1970 to float
  %1972 = fmul fast float %1971, 2.000000e+00
  %1973 = fadd fast float %1969, %1972
  %1974 = fmul fast float %1973, 0x3FE921FB60000000
  %1975 = call float @dx.op.unary.f32(i32 12, float %1974)  ; Cos(value)
  %1976 = call float @dx.op.unary.f32(i32 13, float %1974)  ; Sin(value)
  %1977 = bitcast float %1975 to i32
  %1978 = bitcast float %1976 to i32
  %1979 = and i32 %1977, 2147483647
  %1980 = and i32 %1978, 2147483647
  %1981 = bitcast float %1962 to i32
  %1982 = bitcast float %1963 to i32
  %1983 = and i32 %1981, -2147483648
  %1984 = and i32 %1982, -2147483648
  %1985 = or i32 %1979, %1983
  %1986 = or i32 %1980, %1984
  %1987 = bitcast i32 %1985 to float
  %1988 = bitcast i32 %1986 to float
  %1989 = fmul fast float %1987, %1967
  %1990 = fmul fast float %1988, %1967
  %1991 = call float @dx.op.dot2.f32(i32 54, float %1989, float %1990, float %1989, float %1990)  ; Dot2(ax,ay,bx,by)
  %1992 = fsub fast float 1.000000e+00, %1991
  %1993 = call float @dx.op.unary.f32(i32 24, float %1992)  ; Sqrt(value)
  %1994 = fmul fast float %1989, %1954
  %1995 = call float @dx.op.tertiary.f32(i32 46, float %1990, float %1957, float %1994)  ; FMad(a,b,c)
  %1996 = call float @dx.op.tertiary.f32(i32 46, float %1993, float %111, float %1995)  ; FMad(a,b,c)
  %1997 = fmul fast float %1989, %1955
  %1998 = call float @dx.op.tertiary.f32(i32 46, float %1990, float %1958, float %1997)  ; FMad(a,b,c)
  %1999 = call float @dx.op.tertiary.f32(i32 46, float %1993, float %112, float %1998)  ; FMad(a,b,c)
  %2000 = fmul fast float %1989, %1956
  %2001 = call float @dx.op.tertiary.f32(i32 46, float %1990, float %1959, float %2000)  ; FMad(a,b,c)
  %2002 = call float @dx.op.tertiary.f32(i32 46, float %1993, float %113, float %2001)  ; FMad(a,b,c)
  br label %2014

; <label>:2003                                    ; preds = %1888
  %2004 = fmul fast float %1917, 0x401921FB60000000
  %2005 = fmul fast float %1921, 0x3F00000000000000
  %2006 = fsub fast float 1.000000e+00, %2005
  %2007 = fmul fast float %2006, %2006
  %2008 = fsub fast float 1.000000e+00, %2007
  %2009 = call float @dx.op.unary.f32(i32 24, float %2008)  ; Sqrt(value)
  %2010 = call float @dx.op.unary.f32(i32 12, float %2004)  ; Cos(value)
  %2011 = fmul fast float %2010, %2009
  %2012 = call float @dx.op.unary.f32(i32 13, float %2004)  ; Sin(value)
  %2013 = fmul fast float %2012, %2009
  br label %2014

; <label>:2014                                    ; preds = %2003, %1953, %1888
  %2015 = phi float [ 1.000000e+00, %2003 ], [ 1.000000e+00, %1953 ], [ 0.000000e+00, %1888 ]
  %2016 = phi float [ %2011, %2003 ], [ %1996, %1953 ], [ 0.000000e+00, %1888 ]
  %2017 = phi float [ %2013, %2003 ], [ %1999, %1953 ], [ 0.000000e+00, %1888 ]
  %2018 = phi float [ %2006, %2003 ], [ %2002, %1953 ], [ 0.000000e+00, %1888 ]
  %2019 = call float @dx.op.dot3.f32(i32 55, float %2016, float %2017, float %2018, float %2016, float %2017, float %2018)  ; Dot3(ax,ay,az,bx,by,bz)
  %2020 = call float @dx.op.unary.f32(i32 25, float %2019)  ; Rsqrt(value)
  %2021 = fmul fast float %2020, %2016
  %2022 = fmul fast float %2020, %2017
  %2023 = fmul fast float %2020, %2018
  %2024 = call float @dx.op.unary.f32(i32 6, float %2021)  ; FAbs(value)
  %2025 = call float @dx.op.unary.f32(i32 6, float %2022)  ; FAbs(value)
  %2026 = call float @dx.op.unary.f32(i32 6, float %2023)  ; FAbs(value)
  %2027 = fsub fast float 1.000000e+00, %2026
  %2028 = call float @dx.op.unary.f32(i32 24, float %2027)  ; Sqrt(value)
  %2029 = call float @dx.op.binary.f32(i32 36, float %2024, float %2025)  ; FMin(a,b)
  %2030 = call float @dx.op.binary.f32(i32 35, float %2024, float %2025)  ; FMax(a,b)
  %2031 = fadd fast float %2030, 0x3BF0000000000000
  %2032 = fdiv fast float %2029, %2031
  %2033 = fmul fast float %2032, 0x3F99BE1040000000
  %2034 = fsub fast float 0x3FA5746D00000000, %2033
  %2035 = fmul fast float %2034, %2032
  %2036 = fadd fast float %2035, 0x3FB692C5C0000000
  %2037 = fmul fast float %2036, %2032
  %2038 = fadd fast float %2037, 0xBFCFA8A1C0000000
  %2039 = fmul fast float %2038, %2032
  %2040 = fadd fast float %2039, 0x3F79384B40000000
  %2041 = fmul fast float %2040, %2032
  %2042 = fadd fast float %2041, 0x3FE45BF7C0000000
  %2043 = fmul fast float %2042, %2032
  %2044 = fadd fast float %2043, 0x3ED10F8960000000
  %2045 = fcmp fast olt float %2024, %2025
  %2046 = fsub fast float 0x3FEFFFF780000000, %2043
  %2047 = select i1 %2045, float %2046, float %2044
  %2048 = fmul fast float %2047, %2028
  %2049 = fsub fast float %2028, %2048
  %2050 = fcmp fast olt float %2023, 0.000000e+00
  %2051 = fsub fast float 1.000000e+00, %2048
  %2052 = fsub fast float 1.000000e+00, %2049
  %2053 = select i1 %2050, float %2051, float %2049
  %2054 = select i1 %2050, float %2052, float %2048
  %2055 = bitcast float %2053 to i32
  %2056 = bitcast float %2054 to i32
  %2057 = bitcast float %2021 to i32
  %2058 = bitcast float %2022 to i32
  %2059 = and i32 %2057, -2147483648
  %2060 = and i32 %2058, -2147483648
  %2061 = xor i32 %2055, %2059
  %2062 = xor i32 %2056, %2060
  %2063 = bitcast i32 %2061 to float
  %2064 = bitcast i32 %2062 to float
  %2065 = fmul fast float %2063, 5.000000e-01
  %2066 = fmul fast float %2064, 5.000000e-01
  %2067 = fadd fast float %2065, 5.000000e-01
  %2068 = fadd fast float %2066, 5.000000e-01
  %2069 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2070 = extractvalue %dx.types.CBufRet.f32 %2069, 0
  %2071 = extractvalue %dx.types.CBufRet.f32 %2069, 1
  %2072 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2073 = extractvalue %dx.types.CBufRet.f32 %2072, 0
  %2074 = extractvalue %dx.types.CBufRet.f32 %2072, 1
  %2075 = fmul fast float %2067, %2073
  %2076 = fmul fast float %2068, %2074
  %2077 = extractvalue %dx.types.CBufRet.f32 %2072, 2
  %2078 = extractvalue %dx.types.CBufRet.f32 %2072, 3
  %2079 = fadd fast float %2075, %2077
  %2080 = fadd fast float %2076, %2078
  %2081 = uitofp i32 %837 to float
  %2082 = uitofp i32 %838 to float
  %2083 = fmul fast float %2070, %2081
  %2084 = fmul fast float %2071, %2082
  %2085 = fadd fast float %2079, %2083
  %2086 = fadd fast float %2080, %2084
  %2087 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2088 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2089 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2087, %dx.types.Handle %2088, float %2085, float %2086, float undef, float undef, i32 0, i32 0, i32 undef, float %1887)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2090 = extractvalue %dx.types.ResRet.f32 %2089, 0
  %2091 = extractvalue %dx.types.ResRet.f32 %2089, 1
  %2092 = extractvalue %dx.types.ResRet.f32 %2089, 2
  %2093 = fmul fast float %2090, %1379
  %2094 = fmul fast float %2091, %1379
  %2095 = fmul fast float %2092, %1379
  %2096 = uitofp i32 %1016 to float
  %2097 = uitofp i32 %1017 to float
  %2098 = fmul fast float %2070, %2096
  %2099 = fmul fast float %2071, %2097
  %2100 = fadd fast float %2079, %2098
  %2101 = fadd fast float %2080, %2099
  %2102 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2087, %dx.types.Handle %2088, float %2100, float %2101, float undef, float undef, i32 0, i32 0, i32 undef, float %1887)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2103 = extractvalue %dx.types.ResRet.f32 %2102, 0
  %2104 = extractvalue %dx.types.ResRet.f32 %2102, 1
  %2105 = extractvalue %dx.types.ResRet.f32 %2102, 2
  %2106 = fmul fast float %2103, %1380
  %2107 = fmul fast float %2104, %1380
  %2108 = fmul fast float %2105, %1380
  %2109 = fadd fast float %2106, %2093
  %2110 = fadd fast float %2107, %2094
  %2111 = fadd fast float %2108, %2095
  %2112 = uitofp i32 %1195 to float
  %2113 = uitofp i32 %1196 to float
  %2114 = fmul fast float %2070, %2112
  %2115 = fmul fast float %2071, %2113
  %2116 = fadd fast float %2079, %2114
  %2117 = fadd fast float %2080, %2115
  %2118 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2087, %dx.types.Handle %2088, float %2116, float %2117, float undef, float undef, i32 0, i32 0, i32 undef, float %1887)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2119 = extractvalue %dx.types.ResRet.f32 %2118, 0
  %2120 = extractvalue %dx.types.ResRet.f32 %2118, 1
  %2121 = extractvalue %dx.types.ResRet.f32 %2118, 2
  %2122 = fmul fast float %2119, %1381
  %2123 = fmul fast float %2120, %1381
  %2124 = fmul fast float %2121, %1381
  %2125 = fadd fast float %2109, %2122
  %2126 = fadd fast float %2110, %2123
  %2127 = fadd fast float %2111, %2124
  %2128 = uitofp i32 %1374 to float
  %2129 = uitofp i32 %1375 to float
  %2130 = fmul fast float %2070, %2128
  %2131 = fmul fast float %2071, %2129
  %2132 = fadd fast float %2079, %2130
  %2133 = fadd fast float %2080, %2131
  %2134 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2087, %dx.types.Handle %2088, float %2132, float %2133, float undef, float undef, i32 0, i32 0, i32 undef, float %1887)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2135 = extractvalue %dx.types.ResRet.f32 %2134, 0
  %2136 = extractvalue %dx.types.ResRet.f32 %2134, 1
  %2137 = extractvalue %dx.types.ResRet.f32 %2134, 2
  %2138 = fmul fast float %2135, %1382
  %2139 = fmul fast float %2136, %1382
  %2140 = fmul fast float %2137, %1382
  %2141 = fadd fast float %2125, %2138
  %2142 = fadd fast float %2126, %2139
  %2143 = fadd fast float %2127, %2140
  %2144 = fmul fast float %2141, %2015
  %2145 = fmul fast float %2142, %2015
  %2146 = fmul fast float %2143, %2015
  %2147 = fadd fast float %2144, %1889
  %2148 = fadd fast float %2145, %1890
  %2149 = fadd fast float %2146, %1891
  %2150 = add nuw nsw i32 %1892, 1
  %2151 = icmp eq i32 %2150, 8
  br i1 %2151, label %2152, label %1888

; <label>:2152                                    ; preds = %2014
  %2153 = fmul fast float %2147, 0x3FD921FB60000000
  %2154 = fmul fast float %2148, 0x3FD921FB60000000
  %2155 = fmul fast float %2149, 0x3FD921FB60000000
  br label %2156

; <label>:2156                                    ; preds = %2152, %1883, %1841, %1409
  %2157 = phi float [ %2153, %2152 ], [ 0.000000e+00, %1883 ], [ %1838, %1409 ], [ %1838, %1841 ]
  %2158 = phi float [ %2154, %2152 ], [ 0.000000e+00, %1883 ], [ %1839, %1409 ], [ %1839, %1841 ]
  %2159 = phi float [ %2155, %2152 ], [ 0.000000e+00, %1883 ], [ %1840, %1409 ], [ %1840, %1841 ]
  %2160 = phi float [ 0.000000e+00, %2152 ], [ 0.000000e+00, %1883 ], [ 0.000000e+00, %1409 ], [ %1880, %1841 ]
  %2161 = phi float [ 0.000000e+00, %2152 ], [ 0.000000e+00, %1883 ], [ 0.000000e+00, %1409 ], [ %1881, %1841 ]
  %2162 = phi float [ 0.000000e+00, %2152 ], [ 0.000000e+00, %1883 ], [ 0.000000e+00, %1409 ], [ %1882, %1841 ]
  %2163 = call float @dx.op.dot4.f32(i32 56, float %1379, float %1380, float %1381, float %1382, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2164 = fcmp fast ogt float %2163, 0x3FEFAE1480000000
  %2165 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %2166 = extractvalue %dx.types.CBufRet.i32 %2165, 2
  %2167 = icmp eq i32 %2166, 0
  br i1 %2167, label %2185, label %2168

; <label>:2168                                    ; preds = %2156
  %2169 = extractvalue %dx.types.CBufRet.f32 %255, 3
  %2170 = call float @dx.op.binary.f32(i32 36, float %153, float %2169)  ; FMin(a,b)
  %2171 = call float @dx.op.binary.f32(i32 36, float %154, float %2169)  ; FMin(a,b)
  %2172 = call float @dx.op.binary.f32(i32 36, float %155, float %2169)  ; FMin(a,b)
  %2173 = fmul fast float %2170, 0x3F40600000000000
  %2174 = fadd fast float %2173, 0x3FEFFCB940000000
  %2175 = fmul fast float %2171, 0x3F40600000000000
  %2176 = fadd fast float %2175, 0x3FEFFCB940000000
  %2177 = fmul fast float %2172, 0x3F40600000000000
  %2178 = fadd fast float %2177, 0x3FEFFCB940000000
  %2179 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2174)  ; FMax(a,b)
  %2180 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2176)  ; FMax(a,b)
  %2181 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2178)  ; FMax(a,b)
  %2182 = fmul fast float %2179, %2157
  %2183 = fmul fast float %2180, %2158
  %2184 = fmul fast float %2181, %2159
  br label %2185

; <label>:2185                                    ; preds = %2168, %2156
  %2186 = phi float [ %2182, %2168 ], [ %2157, %2156 ]
  %2187 = phi float [ %2183, %2168 ], [ %2158, %2156 ]
  %2188 = phi float [ %2184, %2168 ], [ %2159, %2156 ]
  %2189 = fsub fast float %246, %1388
  %2190 = fsub fast float %2189, %1391
  %2191 = fsub fast float %250, %1389
  %2192 = fsub fast float %2191, %1392
  %2193 = fsub fast float %254, %1390
  %2194 = fsub fast float %2193, %1393
  %2195 = call float @dx.op.dot3.f32(i32 55, float %2190, float %2192, float %2194, float %2190, float %2192, float %2194)  ; Dot3(ax,ay,az,bx,by,bz)
  %2196 = call float @dx.op.unary.f32(i32 25, float %2195)  ; Rsqrt(value)
  %2197 = fmul fast float %2190, %2196
  %2198 = fmul fast float %2192, %2196
  %2199 = fmul fast float %2194, %2196
  %2200 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2201 = extractvalue %dx.types.CBufRet.i32 %2200, 1
  %2202 = icmp eq i32 %2201, 0
  br i1 %2202, label %2651, label %2203

; <label>:2203                                    ; preds = %2185
  br label %2204

; <label>:2204                                    ; preds = %2639, %2203
  %2205 = phi i32 [ %2646, %2639 ], [ 0, %2203 ]
  %2206 = phi float [ %2640, %2639 ], [ 0.000000e+00, %2203 ]
  %2207 = phi float [ %2641, %2639 ], [ 0.000000e+00, %2203 ]
  %2208 = phi float [ %2642, %2639 ], [ 0.000000e+00, %2203 ]
  %2209 = phi float [ %2643, %2639 ], [ 0.000000e+00, %2203 ]
  %2210 = phi float [ %2644, %2639 ], [ 0.000000e+00, %2203 ]
  %2211 = phi float [ %2645, %2639 ], [ 0.000000e+00, %2203 ]
  %2212 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2213 = extractvalue %dx.types.CBufRet.i32 %2212, 1
  %2214 = icmp eq i32 %2213, 0
  br i1 %2214, label %2639, label %2215

; <label>:2215                                    ; preds = %2204
  br label %2216

; <label>:2216                                    ; preds = %2629, %2215
  %2217 = phi i32 [ %2636, %2629 ], [ 0, %2215 ]
  %2218 = phi float [ %2630, %2629 ], [ %2206, %2215 ]
  %2219 = phi float [ %2631, %2629 ], [ %2207, %2215 ]
  %2220 = phi float [ %2632, %2629 ], [ %2208, %2215 ]
  %2221 = phi float [ %2633, %2629 ], [ %2209, %2215 ]
  %2222 = phi float [ %2634, %2629 ], [ %2210, %2215 ]
  %2223 = phi float [ %2635, %2629 ], [ %2211, %2215 ]
  %2224 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2225 = extractvalue %dx.types.CBufRet.i32 %2224, 1
  %2226 = mul i32 %2225, %837
  %2227 = mul i32 %2225, %838
  %2228 = add i32 %2226, %2217
  %2229 = add i32 %2227, %2205
  %2230 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %2231 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2230, i32 0, i32 %2228, i32 %2229, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2232 = extractvalue %dx.types.ResRet.i32 %2231, 0
  %2233 = and i32 %2232, 536870912
  %2234 = icmp ne i32 %2233, 0
  %2235 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %2236 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2235, i32 0, i32 %2228, i32 %2229, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2237 = extractvalue %dx.types.ResRet.i32 %2236, 0
  %2238 = and i32 %2237, 1
  %2239 = icmp eq i32 %2238, 0
  %2240 = or i1 %2234, %2239
  br i1 %2240, label %2323, label %2241

; <label>:2241                                    ; preds = %2216
  %2242 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2243 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2242, i32 0, i32 %2228, i32 %2229, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2244 = extractvalue %dx.types.ResRet.f32 %2243, 0
  %2245 = extractvalue %dx.types.ResRet.f32 %2243, 1
  %2246 = extractvalue %dx.types.ResRet.f32 %2243, 2
  %2247 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2248 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2247, i32 0, i32 %2228, i32 %2229, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2249 = extractvalue %dx.types.ResRet.f32 %2248, 0
  %2250 = extractvalue %dx.types.ResRet.f32 %2248, 1
  %2251 = extractvalue %dx.types.ResRet.f32 %2248, 2
  %2252 = call float @dx.op.dot3.f32(i32 55, float %2244, float %2245, float %2246, float %111, float %112, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %2253 = call float @dx.op.binary.f32(i32 35, float %2252, float 0.000000e+00)  ; FMax(a,b)
  %2254 = fmul fast float %2253, %1379
  %2255 = fmul fast float %2254, %2249
  %2256 = fmul fast float %2254, %2250
  %2257 = fmul fast float %2254, %2251
  %2258 = fadd fast float %2255, %2218
  %2259 = fadd fast float %2256, %2219
  %2260 = fadd fast float %2257, %2220
  %2261 = fsub fast float -0.000000e+00, %2197
  %2262 = fsub fast float -0.000000e+00, %2198
  %2263 = fsub fast float -0.000000e+00, %2199
  %2264 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2261, float %2262, float %2263)  ; Dot3(ax,ay,az,bx,by,bz)
  %2265 = call float @dx.op.unary.f32(i32 7, float %2264)  ; Saturate(value)
  %2266 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2244, float %2245, float %2246)  ; Dot3(ax,ay,az,bx,by,bz)
  %2267 = call float @dx.op.unary.f32(i32 7, float %2266)  ; Saturate(value)
  %2268 = fsub fast float %2244, %2197
  %2269 = fsub fast float %2245, %2198
  %2270 = fsub fast float %2246, %2199
  %2271 = call float @dx.op.dot3.f32(i32 55, float %2268, float %2269, float %2270, float %2268, float %2269, float %2270)  ; Dot3(ax,ay,az,bx,by,bz)
  %2272 = call float @dx.op.unary.f32(i32 25, float %2271)  ; Rsqrt(value)
  %2273 = fmul fast float %2272, %2268
  %2274 = fmul fast float %2272, %2269
  %2275 = fmul fast float %2272, %2270
  %2276 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2273, float %2274, float %2275)  ; Dot3(ax,ay,az,bx,by,bz)
  %2277 = call float @dx.op.unary.f32(i32 7, float %2276)  ; Saturate(value)
  %2278 = call float @dx.op.dot3.f32(i32 55, float %2261, float %2262, float %2263, float %2273, float %2274, float %2275)  ; Dot3(ax,ay,az,bx,by,bz)
  %2279 = call float @dx.op.unary.f32(i32 7, float %2278)  ; Saturate(value)
  %2280 = fmul fast float %83, %83
  %2281 = fmul fast float %2280, %2280
  %2282 = fmul fast float %2277, %2281
  %2283 = fsub fast float %2282, %2277
  %2284 = fmul fast float %2283, %2277
  %2285 = fadd fast float %2284, 1.000000e+00
  %2286 = fmul fast float %2285, %2285
  %2287 = fmul fast float %2286, 0x400921FB60000000
  %2288 = fdiv fast float %2281, %2287
  %2289 = call float @dx.op.unary.f32(i32 24, float %2281)  ; Sqrt(value)
  %2290 = fsub fast float 1.000000e+00, %2289
  %2291 = fmul fast float %2290, %2265
  %2292 = fadd fast float %2291, %2289
  %2293 = fmul fast float %2292, %2267
  %2294 = fmul fast float %2290, %2267
  %2295 = fadd fast float %2294, %2289
  %2296 = fmul fast float %2295, %2265
  %2297 = fadd fast float %2293, %2296
  %2298 = fdiv fast float 5.000000e-01, %2297
  %2299 = fsub fast float 1.000000e+00, %2279
  %2300 = fmul fast float %2299, %2299
  %2301 = fmul fast float %2300, %2300
  %2302 = fmul fast float %2301, %2299
  %2303 = fmul fast float %165, 5.000000e+01
  %2304 = call float @dx.op.unary.f32(i32 7, float %2303)  ; Saturate(value)
  %2305 = fmul fast float %2304, %2302
  %2306 = fsub fast float 1.000000e+00, %2302
  %2307 = fmul fast float %2306, %164
  %2308 = fmul fast float %2306, %165
  %2309 = fmul fast float %2306, %166
  %2310 = fadd fast float %2307, %2305
  %2311 = fadd fast float %2308, %2305
  %2312 = fadd fast float %2309, %2305
  %2313 = fmul fast float %2298, %2288
  %2314 = fmul fast float %2255, %2313
  %2315 = fmul fast float %2314, %2310
  %2316 = fmul fast float %2256, %2313
  %2317 = fmul fast float %2316, %2311
  %2318 = fmul fast float %2257, %2313
  %2319 = fmul fast float %2318, %2312
  %2320 = fadd fast float %2315, %2221
  %2321 = fadd fast float %2317, %2222
  %2322 = fadd fast float %2319, %2223
  br label %2323

; <label>:2323                                    ; preds = %2241, %2216
  %2324 = phi float [ %2218, %2216 ], [ %2258, %2241 ]
  %2325 = phi float [ %2219, %2216 ], [ %2259, %2241 ]
  %2326 = phi float [ %2220, %2216 ], [ %2260, %2241 ]
  %2327 = phi float [ %2221, %2216 ], [ %2320, %2241 ]
  %2328 = phi float [ %2222, %2216 ], [ %2321, %2241 ]
  %2329 = phi float [ %2223, %2216 ], [ %2322, %2241 ]
  %2330 = mul i32 %2225, %1016
  %2331 = mul i32 %2225, %1017
  %2332 = add i32 %2330, %2217
  %2333 = add i32 %2331, %2205
  %2334 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2230, i32 0, i32 %2332, i32 %2333, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2335 = extractvalue %dx.types.ResRet.i32 %2334, 0
  %2336 = and i32 %2335, 536870912
  %2337 = icmp ne i32 %2336, 0
  %2338 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2235, i32 0, i32 %2332, i32 %2333, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2339 = extractvalue %dx.types.ResRet.i32 %2338, 0
  %2340 = and i32 %2339, 1
  %2341 = icmp eq i32 %2340, 0
  %2342 = or i1 %2337, %2341
  br i1 %2342, label %2425, label %2343

; <label>:2343                                    ; preds = %2323
  %2344 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2345 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2344, i32 0, i32 %2332, i32 %2333, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2346 = extractvalue %dx.types.ResRet.f32 %2345, 0
  %2347 = extractvalue %dx.types.ResRet.f32 %2345, 1
  %2348 = extractvalue %dx.types.ResRet.f32 %2345, 2
  %2349 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2350 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2349, i32 0, i32 %2332, i32 %2333, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2351 = extractvalue %dx.types.ResRet.f32 %2350, 0
  %2352 = extractvalue %dx.types.ResRet.f32 %2350, 1
  %2353 = extractvalue %dx.types.ResRet.f32 %2350, 2
  %2354 = call float @dx.op.dot3.f32(i32 55, float %2346, float %2347, float %2348, float %111, float %112, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %2355 = call float @dx.op.binary.f32(i32 35, float %2354, float 0.000000e+00)  ; FMax(a,b)
  %2356 = fmul fast float %2355, %1380
  %2357 = fmul fast float %2356, %2351
  %2358 = fmul fast float %2356, %2352
  %2359 = fmul fast float %2356, %2353
  %2360 = fadd fast float %2357, %2324
  %2361 = fadd fast float %2358, %2325
  %2362 = fadd fast float %2359, %2326
  %2363 = fsub fast float -0.000000e+00, %2197
  %2364 = fsub fast float -0.000000e+00, %2198
  %2365 = fsub fast float -0.000000e+00, %2199
  %2366 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2363, float %2364, float %2365)  ; Dot3(ax,ay,az,bx,by,bz)
  %2367 = call float @dx.op.unary.f32(i32 7, float %2366)  ; Saturate(value)
  %2368 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2346, float %2347, float %2348)  ; Dot3(ax,ay,az,bx,by,bz)
  %2369 = call float @dx.op.unary.f32(i32 7, float %2368)  ; Saturate(value)
  %2370 = fsub fast float %2346, %2197
  %2371 = fsub fast float %2347, %2198
  %2372 = fsub fast float %2348, %2199
  %2373 = call float @dx.op.dot3.f32(i32 55, float %2370, float %2371, float %2372, float %2370, float %2371, float %2372)  ; Dot3(ax,ay,az,bx,by,bz)
  %2374 = call float @dx.op.unary.f32(i32 25, float %2373)  ; Rsqrt(value)
  %2375 = fmul fast float %2374, %2370
  %2376 = fmul fast float %2374, %2371
  %2377 = fmul fast float %2374, %2372
  %2378 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2375, float %2376, float %2377)  ; Dot3(ax,ay,az,bx,by,bz)
  %2379 = call float @dx.op.unary.f32(i32 7, float %2378)  ; Saturate(value)
  %2380 = call float @dx.op.dot3.f32(i32 55, float %2363, float %2364, float %2365, float %2375, float %2376, float %2377)  ; Dot3(ax,ay,az,bx,by,bz)
  %2381 = call float @dx.op.unary.f32(i32 7, float %2380)  ; Saturate(value)
  %2382 = fmul fast float %83, %83
  %2383 = fmul fast float %2382, %2382
  %2384 = fmul fast float %2379, %2383
  %2385 = fsub fast float %2384, %2379
  %2386 = fmul fast float %2385, %2379
  %2387 = fadd fast float %2386, 1.000000e+00
  %2388 = fmul fast float %2387, %2387
  %2389 = fmul fast float %2388, 0x400921FB60000000
  %2390 = fdiv fast float %2383, %2389
  %2391 = call float @dx.op.unary.f32(i32 24, float %2383)  ; Sqrt(value)
  %2392 = fsub fast float 1.000000e+00, %2391
  %2393 = fmul fast float %2392, %2367
  %2394 = fadd fast float %2393, %2391
  %2395 = fmul fast float %2394, %2369
  %2396 = fmul fast float %2392, %2369
  %2397 = fadd fast float %2396, %2391
  %2398 = fmul fast float %2397, %2367
  %2399 = fadd fast float %2395, %2398
  %2400 = fdiv fast float 5.000000e-01, %2399
  %2401 = fsub fast float 1.000000e+00, %2381
  %2402 = fmul fast float %2401, %2401
  %2403 = fmul fast float %2402, %2402
  %2404 = fmul fast float %2403, %2401
  %2405 = fmul fast float %165, 5.000000e+01
  %2406 = call float @dx.op.unary.f32(i32 7, float %2405)  ; Saturate(value)
  %2407 = fmul fast float %2406, %2404
  %2408 = fsub fast float 1.000000e+00, %2404
  %2409 = fmul fast float %2408, %164
  %2410 = fmul fast float %2408, %165
  %2411 = fmul fast float %2408, %166
  %2412 = fadd fast float %2409, %2407
  %2413 = fadd fast float %2410, %2407
  %2414 = fadd fast float %2411, %2407
  %2415 = fmul fast float %2400, %2390
  %2416 = fmul fast float %2357, %2415
  %2417 = fmul fast float %2416, %2412
  %2418 = fmul fast float %2358, %2415
  %2419 = fmul fast float %2418, %2413
  %2420 = fmul fast float %2359, %2415
  %2421 = fmul fast float %2420, %2414
  %2422 = fadd fast float %2417, %2327
  %2423 = fadd fast float %2419, %2328
  %2424 = fadd fast float %2421, %2329
  br label %2425

; <label>:2425                                    ; preds = %2343, %2323
  %2426 = phi float [ %2324, %2323 ], [ %2360, %2343 ]
  %2427 = phi float [ %2325, %2323 ], [ %2361, %2343 ]
  %2428 = phi float [ %2326, %2323 ], [ %2362, %2343 ]
  %2429 = phi float [ %2327, %2323 ], [ %2422, %2343 ]
  %2430 = phi float [ %2328, %2323 ], [ %2423, %2343 ]
  %2431 = phi float [ %2329, %2323 ], [ %2424, %2343 ]
  %2432 = mul i32 %2225, %1195
  %2433 = mul i32 %2225, %1196
  %2434 = add i32 %2432, %2217
  %2435 = add i32 %2433, %2205
  %2436 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2230, i32 0, i32 %2434, i32 %2435, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2437 = extractvalue %dx.types.ResRet.i32 %2436, 0
  %2438 = and i32 %2437, 536870912
  %2439 = icmp ne i32 %2438, 0
  %2440 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2235, i32 0, i32 %2434, i32 %2435, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2441 = extractvalue %dx.types.ResRet.i32 %2440, 0
  %2442 = and i32 %2441, 1
  %2443 = icmp eq i32 %2442, 0
  %2444 = or i1 %2439, %2443
  br i1 %2444, label %2527, label %2445

; <label>:2445                                    ; preds = %2425
  %2446 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2447 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2446, i32 0, i32 %2434, i32 %2435, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2448 = extractvalue %dx.types.ResRet.f32 %2447, 0
  %2449 = extractvalue %dx.types.ResRet.f32 %2447, 1
  %2450 = extractvalue %dx.types.ResRet.f32 %2447, 2
  %2451 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2452 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2451, i32 0, i32 %2434, i32 %2435, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2453 = extractvalue %dx.types.ResRet.f32 %2452, 0
  %2454 = extractvalue %dx.types.ResRet.f32 %2452, 1
  %2455 = extractvalue %dx.types.ResRet.f32 %2452, 2
  %2456 = call float @dx.op.dot3.f32(i32 55, float %2448, float %2449, float %2450, float %111, float %112, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %2457 = call float @dx.op.binary.f32(i32 35, float %2456, float 0.000000e+00)  ; FMax(a,b)
  %2458 = fmul fast float %2457, %1381
  %2459 = fmul fast float %2458, %2453
  %2460 = fmul fast float %2458, %2454
  %2461 = fmul fast float %2458, %2455
  %2462 = fadd fast float %2459, %2426
  %2463 = fadd fast float %2460, %2427
  %2464 = fadd fast float %2461, %2428
  %2465 = fsub fast float -0.000000e+00, %2197
  %2466 = fsub fast float -0.000000e+00, %2198
  %2467 = fsub fast float -0.000000e+00, %2199
  %2468 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2465, float %2466, float %2467)  ; Dot3(ax,ay,az,bx,by,bz)
  %2469 = call float @dx.op.unary.f32(i32 7, float %2468)  ; Saturate(value)
  %2470 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2448, float %2449, float %2450)  ; Dot3(ax,ay,az,bx,by,bz)
  %2471 = call float @dx.op.unary.f32(i32 7, float %2470)  ; Saturate(value)
  %2472 = fsub fast float %2448, %2197
  %2473 = fsub fast float %2449, %2198
  %2474 = fsub fast float %2450, %2199
  %2475 = call float @dx.op.dot3.f32(i32 55, float %2472, float %2473, float %2474, float %2472, float %2473, float %2474)  ; Dot3(ax,ay,az,bx,by,bz)
  %2476 = call float @dx.op.unary.f32(i32 25, float %2475)  ; Rsqrt(value)
  %2477 = fmul fast float %2476, %2472
  %2478 = fmul fast float %2476, %2473
  %2479 = fmul fast float %2476, %2474
  %2480 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2477, float %2478, float %2479)  ; Dot3(ax,ay,az,bx,by,bz)
  %2481 = call float @dx.op.unary.f32(i32 7, float %2480)  ; Saturate(value)
  %2482 = call float @dx.op.dot3.f32(i32 55, float %2465, float %2466, float %2467, float %2477, float %2478, float %2479)  ; Dot3(ax,ay,az,bx,by,bz)
  %2483 = call float @dx.op.unary.f32(i32 7, float %2482)  ; Saturate(value)
  %2484 = fmul fast float %83, %83
  %2485 = fmul fast float %2484, %2484
  %2486 = fmul fast float %2481, %2485
  %2487 = fsub fast float %2486, %2481
  %2488 = fmul fast float %2487, %2481
  %2489 = fadd fast float %2488, 1.000000e+00
  %2490 = fmul fast float %2489, %2489
  %2491 = fmul fast float %2490, 0x400921FB60000000
  %2492 = fdiv fast float %2485, %2491
  %2493 = call float @dx.op.unary.f32(i32 24, float %2485)  ; Sqrt(value)
  %2494 = fsub fast float 1.000000e+00, %2493
  %2495 = fmul fast float %2494, %2469
  %2496 = fadd fast float %2495, %2493
  %2497 = fmul fast float %2496, %2471
  %2498 = fmul fast float %2494, %2471
  %2499 = fadd fast float %2498, %2493
  %2500 = fmul fast float %2499, %2469
  %2501 = fadd fast float %2497, %2500
  %2502 = fdiv fast float 5.000000e-01, %2501
  %2503 = fsub fast float 1.000000e+00, %2483
  %2504 = fmul fast float %2503, %2503
  %2505 = fmul fast float %2504, %2504
  %2506 = fmul fast float %2505, %2503
  %2507 = fmul fast float %165, 5.000000e+01
  %2508 = call float @dx.op.unary.f32(i32 7, float %2507)  ; Saturate(value)
  %2509 = fmul fast float %2508, %2506
  %2510 = fsub fast float 1.000000e+00, %2506
  %2511 = fmul fast float %2510, %164
  %2512 = fmul fast float %2510, %165
  %2513 = fmul fast float %2510, %166
  %2514 = fadd fast float %2511, %2509
  %2515 = fadd fast float %2512, %2509
  %2516 = fadd fast float %2513, %2509
  %2517 = fmul fast float %2502, %2492
  %2518 = fmul fast float %2459, %2517
  %2519 = fmul fast float %2518, %2514
  %2520 = fmul fast float %2460, %2517
  %2521 = fmul fast float %2520, %2515
  %2522 = fmul fast float %2461, %2517
  %2523 = fmul fast float %2522, %2516
  %2524 = fadd fast float %2519, %2429
  %2525 = fadd fast float %2521, %2430
  %2526 = fadd fast float %2523, %2431
  br label %2527

; <label>:2527                                    ; preds = %2445, %2425
  %2528 = phi float [ %2426, %2425 ], [ %2462, %2445 ]
  %2529 = phi float [ %2427, %2425 ], [ %2463, %2445 ]
  %2530 = phi float [ %2428, %2425 ], [ %2464, %2445 ]
  %2531 = phi float [ %2429, %2425 ], [ %2524, %2445 ]
  %2532 = phi float [ %2430, %2425 ], [ %2525, %2445 ]
  %2533 = phi float [ %2431, %2425 ], [ %2526, %2445 ]
  %2534 = mul i32 %2225, %1374
  %2535 = mul i32 %2225, %1375
  %2536 = add i32 %2534, %2217
  %2537 = add i32 %2535, %2205
  %2538 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2230, i32 0, i32 %2536, i32 %2537, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2539 = extractvalue %dx.types.ResRet.i32 %2538, 0
  %2540 = and i32 %2539, 536870912
  %2541 = icmp ne i32 %2540, 0
  %2542 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2235, i32 0, i32 %2536, i32 %2537, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2543 = extractvalue %dx.types.ResRet.i32 %2542, 0
  %2544 = and i32 %2543, 1
  %2545 = icmp eq i32 %2544, 0
  %2546 = or i1 %2541, %2545
  br i1 %2546, label %2629, label %2547

; <label>:2547                                    ; preds = %2527
  %2548 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2549 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2548, i32 0, i32 %2536, i32 %2537, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2550 = extractvalue %dx.types.ResRet.f32 %2549, 0
  %2551 = extractvalue %dx.types.ResRet.f32 %2549, 1
  %2552 = extractvalue %dx.types.ResRet.f32 %2549, 2
  %2553 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2554 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2553, i32 0, i32 %2536, i32 %2537, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2555 = extractvalue %dx.types.ResRet.f32 %2554, 0
  %2556 = extractvalue %dx.types.ResRet.f32 %2554, 1
  %2557 = extractvalue %dx.types.ResRet.f32 %2554, 2
  %2558 = call float @dx.op.dot3.f32(i32 55, float %2550, float %2551, float %2552, float %111, float %112, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %2559 = call float @dx.op.binary.f32(i32 35, float %2558, float 0.000000e+00)  ; FMax(a,b)
  %2560 = fmul fast float %2559, %1382
  %2561 = fmul fast float %2560, %2555
  %2562 = fmul fast float %2560, %2556
  %2563 = fmul fast float %2560, %2557
  %2564 = fadd fast float %2561, %2528
  %2565 = fadd fast float %2562, %2529
  %2566 = fadd fast float %2563, %2530
  %2567 = fsub fast float -0.000000e+00, %2197
  %2568 = fsub fast float -0.000000e+00, %2198
  %2569 = fsub fast float -0.000000e+00, %2199
  %2570 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2567, float %2568, float %2569)  ; Dot3(ax,ay,az,bx,by,bz)
  %2571 = call float @dx.op.unary.f32(i32 7, float %2570)  ; Saturate(value)
  %2572 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2550, float %2551, float %2552)  ; Dot3(ax,ay,az,bx,by,bz)
  %2573 = call float @dx.op.unary.f32(i32 7, float %2572)  ; Saturate(value)
  %2574 = fsub fast float %2550, %2197
  %2575 = fsub fast float %2551, %2198
  %2576 = fsub fast float %2552, %2199
  %2577 = call float @dx.op.dot3.f32(i32 55, float %2574, float %2575, float %2576, float %2574, float %2575, float %2576)  ; Dot3(ax,ay,az,bx,by,bz)
  %2578 = call float @dx.op.unary.f32(i32 25, float %2577)  ; Rsqrt(value)
  %2579 = fmul fast float %2578, %2574
  %2580 = fmul fast float %2578, %2575
  %2581 = fmul fast float %2578, %2576
  %2582 = call float @dx.op.dot3.f32(i32 55, float %111, float %112, float %113, float %2579, float %2580, float %2581)  ; Dot3(ax,ay,az,bx,by,bz)
  %2583 = call float @dx.op.unary.f32(i32 7, float %2582)  ; Saturate(value)
  %2584 = call float @dx.op.dot3.f32(i32 55, float %2567, float %2568, float %2569, float %2579, float %2580, float %2581)  ; Dot3(ax,ay,az,bx,by,bz)
  %2585 = call float @dx.op.unary.f32(i32 7, float %2584)  ; Saturate(value)
  %2586 = fmul fast float %83, %83
  %2587 = fmul fast float %2586, %2586
  %2588 = fmul fast float %2583, %2587
  %2589 = fsub fast float %2588, %2583
  %2590 = fmul fast float %2589, %2583
  %2591 = fadd fast float %2590, 1.000000e+00
  %2592 = fmul fast float %2591, %2591
  %2593 = fmul fast float %2592, 0x400921FB60000000
  %2594 = fdiv fast float %2587, %2593
  %2595 = call float @dx.op.unary.f32(i32 24, float %2587)  ; Sqrt(value)
  %2596 = fsub fast float 1.000000e+00, %2595
  %2597 = fmul fast float %2596, %2571
  %2598 = fadd fast float %2597, %2595
  %2599 = fmul fast float %2598, %2573
  %2600 = fmul fast float %2596, %2573
  %2601 = fadd fast float %2600, %2595
  %2602 = fmul fast float %2601, %2571
  %2603 = fadd fast float %2599, %2602
  %2604 = fdiv fast float 5.000000e-01, %2603
  %2605 = fsub fast float 1.000000e+00, %2585
  %2606 = fmul fast float %2605, %2605
  %2607 = fmul fast float %2606, %2606
  %2608 = fmul fast float %2607, %2605
  %2609 = fmul fast float %165, 5.000000e+01
  %2610 = call float @dx.op.unary.f32(i32 7, float %2609)  ; Saturate(value)
  %2611 = fmul fast float %2610, %2608
  %2612 = fsub fast float 1.000000e+00, %2608
  %2613 = fmul fast float %2612, %164
  %2614 = fmul fast float %2612, %165
  %2615 = fmul fast float %2612, %166
  %2616 = fadd fast float %2613, %2611
  %2617 = fadd fast float %2614, %2611
  %2618 = fadd fast float %2615, %2611
  %2619 = fmul fast float %2604, %2594
  %2620 = fmul fast float %2561, %2619
  %2621 = fmul fast float %2620, %2616
  %2622 = fmul fast float %2562, %2619
  %2623 = fmul fast float %2622, %2617
  %2624 = fmul fast float %2563, %2619
  %2625 = fmul fast float %2624, %2618
  %2626 = fadd fast float %2621, %2531
  %2627 = fadd fast float %2623, %2532
  %2628 = fadd fast float %2625, %2533
  br label %2629

; <label>:2629                                    ; preds = %2547, %2527
  %2630 = phi float [ %2528, %2527 ], [ %2564, %2547 ]
  %2631 = phi float [ %2529, %2527 ], [ %2565, %2547 ]
  %2632 = phi float [ %2530, %2527 ], [ %2566, %2547 ]
  %2633 = phi float [ %2531, %2527 ], [ %2626, %2547 ]
  %2634 = phi float [ %2532, %2527 ], [ %2627, %2547 ]
  %2635 = phi float [ %2533, %2527 ], [ %2628, %2547 ]
  %2636 = add i32 %2217, 1
  %2637 = icmp ult i32 %2636, %2225
  br i1 %2637, label %2216, label %2638

; <label>:2638                                    ; preds = %2629
  br label %2639

; <label>:2639                                    ; preds = %2638, %2204
  %2640 = phi float [ %2206, %2204 ], [ %2630, %2638 ]
  %2641 = phi float [ %2207, %2204 ], [ %2631, %2638 ]
  %2642 = phi float [ %2208, %2204 ], [ %2632, %2638 ]
  %2643 = phi float [ %2209, %2204 ], [ %2633, %2638 ]
  %2644 = phi float [ %2210, %2204 ], [ %2634, %2638 ]
  %2645 = phi float [ %2211, %2204 ], [ %2635, %2638 ]
  %2646 = add i32 %2205, 1
  %2647 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2648 = extractvalue %dx.types.CBufRet.i32 %2647, 1
  %2649 = icmp ult i32 %2646, %2648
  br i1 %2649, label %2204, label %2650

; <label>:2650                                    ; preds = %2639
  br label %2651

; <label>:2651                                    ; preds = %2650, %2185
  %2652 = phi float [ 0.000000e+00, %2185 ], [ %2640, %2650 ]
  %2653 = phi float [ 0.000000e+00, %2185 ], [ %2641, %2650 ]
  %2654 = phi float [ 0.000000e+00, %2185 ], [ %2642, %2650 ]
  %2655 = phi float [ 0.000000e+00, %2185 ], [ %2643, %2650 ]
  %2656 = phi float [ 0.000000e+00, %2185 ], [ %2644, %2650 ]
  %2657 = phi float [ 0.000000e+00, %2185 ], [ %2645, %2650 ]
  %2658 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %2659 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2658, i32 0, i32 %837, i32 %838, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2660 = extractvalue %dx.types.ResRet.f32 %2659, 0
  %2661 = fmul fast float %2660, %1379
  %2662 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2658, i32 0, i32 %1016, i32 %1017, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2663 = extractvalue %dx.types.ResRet.f32 %2662, 0
  %2664 = fmul fast float %2663, %1380
  %2665 = fadd fast float %2664, %2661
  %2666 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2658, i32 0, i32 %1195, i32 %1196, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2667 = extractvalue %dx.types.ResRet.f32 %2666, 0
  %2668 = fmul fast float %2667, %1381
  %2669 = fadd fast float %2665, %2668
  %2670 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2658, i32 0, i32 %1374, i32 %1375, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2671 = extractvalue %dx.types.ResRet.f32 %2670, 0
  %2672 = fmul fast float %2671, %1382
  %2673 = fadd fast float %2669, %2672
  %2674 = select i1 %2164, float 1.000000e+00, float -1.000000e+00
  %2675 = call float @dx.op.binary.f32(i32 35, float %2673, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2676 = fmul fast float %2675, %2674
  %2677 = fadd fast float %2652, %2186
  %2678 = fadd fast float %2653, %2187
  %2679 = fadd fast float %2654, %2188
  %2680 = select i1 %2164, float 0x3FD45F3060000000, float 0.000000e+00
  %2681 = fmul fast float %2680, %2677
  %2682 = fmul fast float %2680, %2678
  %2683 = fmul fast float %2680, %2679
  %2684 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2684, i32 %51, i32 %53, i32 undef, float %2681, float %2682, float %2683, float %2676, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2685 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2685, i32 %51, i32 %53, i32 undef, float %2160, float %2161, float %2162, float %2160, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2686 = fmul fast float %2186, 0x3FD45F3060000000
  %2687 = fmul fast float %2187, 0x3FD45F3060000000
  %2688 = fmul fast float %2188, 0x3FD45F3060000000
  %2689 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %2690 = extractvalue %dx.types.CBufRet.f32 %2689, 1
  %2691 = fadd fast float %83, 0x3FC99999A0000000
  %2692 = fsub fast float %2691, %2690
  %2693 = fmul fast float %2692, 5.000000e+00
  %2694 = call float @dx.op.unary.f32(i32 7, float %2693)  ; Saturate(value)
  %2695 = call float @dx.op.binary.f32(i32 35, float %83, float 0x3F847AE140000000)  ; FMax(a,b)
  %2696 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %2697 = extractvalue %dx.types.CBufRet.f32 %2696, 1
  %2698 = extractvalue %dx.types.CBufRet.f32 %2696, 0
  %2699 = select i1 %187, float %2697, float %2698
  %2700 = fsub fast float %2699, %2695
  %2701 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %2702 = extractvalue %dx.types.CBufRet.f32 %2701, 2
  %2703 = fmul fast float %2702, %2700
  %2704 = call float @dx.op.unary.f32(i32 7, float %2703)  ; Saturate(value)
  %2705 = fcmp fast olt float %2694, 1.000000e+00
  %2706 = fcmp fast olt float %2704, 1.000000e+00
  %2707 = and i1 %2705, %2706
  %2708 = icmp eq i32 %100, 4
  %2709 = or i1 %2708, %2707
  br i1 %2709, label %2710, label %3033

; <label>:2710                                    ; preds = %2651
  %2711 = call float @dx.op.binary.f32(i32 35, float %2695, float 0x3FC99999A0000000)  ; FMax(a,b)
  %2712 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2713 = extractvalue %dx.types.CBufRet.i32 %2712, 2
  %2714 = uitofp i32 %2713 to float
  %2715 = fmul fast float %2714, 0x3FC98844E0000000
  %2716 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2717 = extractvalue %dx.types.CBufRet.f32 %2716, 0
  %2718 = call float @dx.op.unary.f32(i32 23, float %2715)  ; Log(value)
  %2719 = call float @dx.op.binary.f32(i32 35, float %2718, float 0.000000e+00)  ; FMax(a,b)
  %2720 = call float @dx.op.binary.f32(i32 36, float %2719, float %2717)  ; FMin(a,b)
  br label %2721

; <label>:2721                                    ; preds = %2872, %2710
  %2722 = phi float [ 0.000000e+00, %2710 ], [ %3010, %2872 ]
  %2723 = phi float [ 0.000000e+00, %2710 ], [ %3011, %2872 ]
  %2724 = phi float [ 0.000000e+00, %2710 ], [ %3012, %2872 ]
  %2725 = phi i32 [ 0, %2710 ], [ %3013, %2872 ]
  %2726 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2727 = extractvalue %dx.types.CBufRet.i32 %2726, 1
  %2728 = mul i32 %51, 1664525
  %2729 = mul i32 %53, 1664525
  %2730 = mul i32 %2727, 1664525
  %2731 = add i32 %2728, 1013904223
  %2732 = add i32 %2729, 1013904223
  %2733 = add i32 %2730, 1013904223
  %2734 = mul i32 %2733, %2732
  %2735 = add i32 %2731, %2734
  %2736 = mul i32 %2735, %2733
  %2737 = add i32 %2736, %2732
  %2738 = mul i32 %2737, %2735
  %2739 = add i32 %2738, %2733
  %2740 = mul i32 %2739, %2737
  %2741 = add i32 %2740, %2735
  %2742 = mul i32 %2741, %2739
  %2743 = add i32 %2742, %2737
  %2744 = lshr i32 %2741, 16
  %2745 = uitofp i32 %2725 to float
  %2746 = fmul fast float %2745, 2.500000e-01
  %2747 = uitofp i32 %2744 to float
  %2748 = fmul fast float %2747, 0x3EF0000000000000
  %2749 = fadd fast float %2748, %2746
  %2750 = call float @dx.op.unary.f32(i32 22, float %2749)  ; Frc(value)
  %2751 = call i32 @dx.op.unary.i32(i32 30, i32 %2725)  ; Bfrev(value)
  %2752 = xor i32 %2743, %2751
  %2753 = lshr i32 %2752, 16
  %2754 = uitofp i32 %2753 to float
  %2755 = fmul fast float %2754, 0x3EECCCCCC0000000
  %2756 = fadd fast float %2755, 0x3FA9999A00000000
  switch i32 %100, label %2872 [
    i32 1, label %2757
    i32 10, label %2757
    i32 2, label %2757
    i32 5, label %2757
    i32 3, label %2757
    i32 4, label %2757
    i32 6, label %2757
    i32 9, label %2757
    i32 7, label %2861
  ]

; <label>:2757                                    ; preds = %2721, %2721, %2721, %2721, %2721, %2721, %2721, %2721
  %2758 = fcmp fast une float %185, 0.000000e+00
  br i1 %2758, label %2759, label %2769

; <label>:2759                                    ; preds = %2757
  %2760 = fmul fast float %184, %112
  %2761 = fmul fast float %183, %113
  %2762 = fsub fast float %2760, %2761
  %2763 = fmul fast float %182, %113
  %2764 = fmul fast float %184, %111
  %2765 = fsub fast float %2763, %2764
  %2766 = fmul fast float %183, %111
  %2767 = fmul fast float %182, %112
  %2768 = fsub fast float %2766, %2767
  br label %2788

; <label>:2769                                    ; preds = %2757
  %2770 = fcmp fast oge float %113, 0.000000e+00
  %2771 = select i1 %2770, float 1.000000e+00, float -1.000000e+00
  %2772 = fadd fast float %2771, %113
  %2773 = fdiv fast float 1.000000e+00, %2772
  %2774 = fsub fast float -0.000000e+00, %2773
  %2775 = fmul fast float %111, %112
  %2776 = fmul fast float %2775, %2774
  %2777 = fmul fast float %111, %111
  %2778 = fmul fast float %2777, %2771
  %2779 = fmul fast float %2778, %2774
  %2780 = fadd fast float %2779, 1.000000e+00
  %2781 = fmul fast float %2776, %2771
  %2782 = fmul fast float %111, %2771
  %2783 = fsub fast float -0.000000e+00, %2782
  %2784 = fmul fast float %112, %112
  %2785 = fmul fast float %2784, %2774
  %2786 = fadd fast float %2785, %2771
  %2787 = fsub fast float -0.000000e+00, %112
  br label %2788

; <label>:2788                                    ; preds = %2769, %2759
  %2789 = phi float [ %182, %2759 ], [ %2780, %2769 ]
  %2790 = phi float [ %183, %2759 ], [ %2781, %2769 ]
  %2791 = phi float [ %184, %2759 ], [ %2783, %2769 ]
  %2792 = phi float [ %2762, %2759 ], [ %2776, %2769 ]
  %2793 = phi float [ %2765, %2759 ], [ %2786, %2769 ]
  %2794 = phi float [ %2768, %2759 ], [ %2787, %2769 ]
  %2795 = fmul fast float %2711, %2711
  br i1 %2758, label %2796, label %2803

; <label>:2796                                    ; preds = %2788
  %2797 = fadd fast float %185, 1.000000e+00
  %2798 = fmul fast float %2795, %2797
  %2799 = call float @dx.op.binary.f32(i32 35, float %2798, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2800 = fsub fast float 1.000000e+00, %185
  %2801 = fmul fast float %2795, %2800
  %2802 = call float @dx.op.binary.f32(i32 35, float %2801, float 0x3F50624DE0000000)  ; FMax(a,b)
  br label %2803

; <label>:2803                                    ; preds = %2796, %2788
  %2804 = phi float [ %2799, %2796 ], [ %2795, %2788 ]
  %2805 = phi float [ %2802, %2796 ], [ %2795, %2788 ]
  %2806 = fmul fast float %2789, %1402
  %2807 = call float @dx.op.tertiary.f32(i32 46, float %2790, float %1403, float %2806)  ; FMad(a,b,c)
  %2808 = call float @dx.op.tertiary.f32(i32 46, float %2791, float %1404, float %2807)  ; FMad(a,b,c)
  %2809 = fmul fast float %2792, %1402
  %2810 = call float @dx.op.tertiary.f32(i32 46, float %2793, float %1403, float %2809)  ; FMad(a,b,c)
  %2811 = call float @dx.op.tertiary.f32(i32 46, float %2794, float %1404, float %2810)  ; FMad(a,b,c)
  %2812 = fmul fast float %1402, %111
  %2813 = call float @dx.op.tertiary.f32(i32 46, float %112, float %1403, float %2812)  ; FMad(a,b,c)
  %2814 = call float @dx.op.tertiary.f32(i32 46, float %113, float %1404, float %2813)  ; FMad(a,b,c)
  %2815 = fmul fast float %2808, %2804
  %2816 = fmul fast float %2811, %2805
  %2817 = call float @dx.op.dot3.f32(i32 55, float %2815, float %2816, float %2814, float %2815, float %2816, float %2814)  ; Dot3(ax,ay,az,bx,by,bz)
  %2818 = call float @dx.op.unary.f32(i32 25, float %2817)  ; Rsqrt(value)
  %2819 = fmul fast float %2818, %2815
  %2820 = fmul fast float %2818, %2816
  %2821 = fmul fast float %2818, %2814
  %2822 = fmul fast float %2750, 0x401921FB60000000
  %2823 = fadd fast float %2821, 1.000000e+00
  %2824 = fmul fast float %2823, %2756
  %2825 = fsub fast float %2824, %2821
  %2826 = fmul fast float %2825, %2825
  %2827 = fsub fast float 1.000000e+00, %2826
  %2828 = call float @dx.op.unary.f32(i32 7, float %2827)  ; Saturate(value)
  %2829 = call float @dx.op.unary.f32(i32 24, float %2828)  ; Sqrt(value)
  %2830 = call float @dx.op.unary.f32(i32 12, float %2822)  ; Cos(value)
  %2831 = fmul fast float %2830, %2829
  %2832 = call float @dx.op.unary.f32(i32 13, float %2822)  ; Sin(value)
  %2833 = fmul fast float %2832, %2829
  %2834 = fadd fast float %2831, %2819
  %2835 = fadd fast float %2833, %2820
  %2836 = fmul fast float %2834, %2804
  %2837 = fmul fast float %2835, %2805
  %2838 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2824)  ; FMax(a,b)
  %2839 = call float @dx.op.dot3.f32(i32 55, float %2836, float %2837, float %2838, float %2836, float %2837, float %2838)  ; Dot3(ax,ay,az,bx,by,bz)
  %2840 = call float @dx.op.unary.f32(i32 25, float %2839)  ; Rsqrt(value)
  %2841 = fmul fast float %2840, %2836
  %2842 = fmul fast float %2837, %2840
  %2843 = fmul fast float %2840, %2838
  %2844 = fmul fast float %2841, %2789
  %2845 = call float @dx.op.tertiary.f32(i32 46, float %2842, float %2792, float %2844)  ; FMad(a,b,c)
  %2846 = call float @dx.op.tertiary.f32(i32 46, float %2843, float %111, float %2845)  ; FMad(a,b,c)
  %2847 = fmul fast float %2841, %2790
  %2848 = call float @dx.op.tertiary.f32(i32 46, float %2842, float %2793, float %2847)  ; FMad(a,b,c)
  %2849 = call float @dx.op.tertiary.f32(i32 46, float %2843, float %112, float %2848)  ; FMad(a,b,c)
  %2850 = fmul fast float %2841, %2791
  %2851 = call float @dx.op.tertiary.f32(i32 46, float %2842, float %2794, float %2850)  ; FMad(a,b,c)
  %2852 = call float @dx.op.tertiary.f32(i32 46, float %2843, float %113, float %2851)  ; FMad(a,b,c)
  %2853 = call float @dx.op.dot3.f32(i32 55, float %1402, float %1403, float %1404, float %2846, float %2849, float %2852)  ; Dot3(ax,ay,az,bx,by,bz)
  %2854 = fmul fast float %2853, 2.000000e+00
  %2855 = fmul fast float %2854, %2846
  %2856 = fmul fast float %2854, %2849
  %2857 = fmul fast float %2854, %2852
  %2858 = fsub fast float %2855, %1402
  %2859 = fsub fast float %2856, %1403
  %2860 = fsub fast float %2857, %1404
  br label %2872

; <label>:2861                                    ; preds = %2721
  %2862 = fmul fast float %2750, 0x401921FB60000000
  %2863 = fmul fast float %2754, 0x3EFCCCCCC0000000
  %2864 = fsub fast float 0x3FECCCCCC0000000, %2863
  %2865 = fmul fast float %2864, %2864
  %2866 = fsub fast float 1.000000e+00, %2865
  %2867 = call float @dx.op.unary.f32(i32 24, float %2866)  ; Sqrt(value)
  %2868 = call float @dx.op.unary.f32(i32 12, float %2862)  ; Cos(value)
  %2869 = fmul fast float %2868, %2867
  %2870 = call float @dx.op.unary.f32(i32 13, float %2862)  ; Sin(value)
  %2871 = fmul fast float %2870, %2867
  br label %2872

; <label>:2872                                    ; preds = %2861, %2803, %2721
  %2873 = phi float [ 1.000000e+00, %2861 ], [ 1.000000e+00, %2803 ], [ 0.000000e+00, %2721 ]
  %2874 = phi float [ %2869, %2861 ], [ %2858, %2803 ], [ 0.000000e+00, %2721 ]
  %2875 = phi float [ %2871, %2861 ], [ %2859, %2803 ], [ 0.000000e+00, %2721 ]
  %2876 = phi float [ %2864, %2861 ], [ %2860, %2803 ], [ 0.000000e+00, %2721 ]
  %2877 = call float @dx.op.dot3.f32(i32 55, float %2874, float %2875, float %2876, float %2874, float %2875, float %2876)  ; Dot3(ax,ay,az,bx,by,bz)
  %2878 = call float @dx.op.unary.f32(i32 25, float %2877)  ; Rsqrt(value)
  %2879 = fmul fast float %2878, %2874
  %2880 = fmul fast float %2878, %2875
  %2881 = fmul fast float %2878, %2876
  %2882 = call float @dx.op.unary.f32(i32 6, float %2879)  ; FAbs(value)
  %2883 = call float @dx.op.unary.f32(i32 6, float %2880)  ; FAbs(value)
  %2884 = call float @dx.op.unary.f32(i32 6, float %2881)  ; FAbs(value)
  %2885 = fsub fast float 1.000000e+00, %2884
  %2886 = call float @dx.op.unary.f32(i32 24, float %2885)  ; Sqrt(value)
  %2887 = call float @dx.op.binary.f32(i32 36, float %2882, float %2883)  ; FMin(a,b)
  %2888 = call float @dx.op.binary.f32(i32 35, float %2882, float %2883)  ; FMax(a,b)
  %2889 = fadd fast float %2888, 0x3BF0000000000000
  %2890 = fdiv fast float %2887, %2889
  %2891 = fmul fast float %2890, 0x3F99BE1040000000
  %2892 = fsub fast float 0x3FA5746D00000000, %2891
  %2893 = fmul fast float %2892, %2890
  %2894 = fadd fast float %2893, 0x3FB692C5C0000000
  %2895 = fmul fast float %2894, %2890
  %2896 = fadd fast float %2895, 0xBFCFA8A1C0000000
  %2897 = fmul fast float %2896, %2890
  %2898 = fadd fast float %2897, 0x3F79384B40000000
  %2899 = fmul fast float %2898, %2890
  %2900 = fadd fast float %2899, 0x3FE45BF7C0000000
  %2901 = fmul fast float %2900, %2890
  %2902 = fadd fast float %2901, 0x3ED10F8960000000
  %2903 = fcmp fast olt float %2882, %2883
  %2904 = fsub fast float 0x3FEFFFF780000000, %2901
  %2905 = select i1 %2903, float %2904, float %2902
  %2906 = fmul fast float %2905, %2886
  %2907 = fsub fast float %2886, %2906
  %2908 = fcmp fast olt float %2881, 0.000000e+00
  %2909 = fsub fast float 1.000000e+00, %2906
  %2910 = fsub fast float 1.000000e+00, %2907
  %2911 = select i1 %2908, float %2909, float %2907
  %2912 = select i1 %2908, float %2910, float %2906
  %2913 = bitcast float %2911 to i32
  %2914 = bitcast float %2912 to i32
  %2915 = bitcast float %2879 to i32
  %2916 = bitcast float %2880 to i32
  %2917 = and i32 %2915, -2147483648
  %2918 = and i32 %2916, -2147483648
  %2919 = xor i32 %2913, %2917
  %2920 = xor i32 %2914, %2918
  %2921 = bitcast i32 %2919 to float
  %2922 = bitcast i32 %2920 to float
  %2923 = fmul fast float %2921, 5.000000e-01
  %2924 = fmul fast float %2922, 5.000000e-01
  %2925 = fadd fast float %2923, 5.000000e-01
  %2926 = fadd fast float %2924, 5.000000e-01
  %2927 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2928 = extractvalue %dx.types.CBufRet.f32 %2927, 0
  %2929 = extractvalue %dx.types.CBufRet.f32 %2927, 1
  %2930 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2931 = extractvalue %dx.types.CBufRet.f32 %2930, 0
  %2932 = extractvalue %dx.types.CBufRet.f32 %2930, 1
  %2933 = fmul fast float %2925, %2931
  %2934 = fmul fast float %2926, %2932
  %2935 = extractvalue %dx.types.CBufRet.f32 %2930, 2
  %2936 = extractvalue %dx.types.CBufRet.f32 %2930, 3
  %2937 = fadd fast float %2933, %2935
  %2938 = fadd fast float %2934, %2936
  %2939 = uitofp i32 %837 to float
  %2940 = uitofp i32 %838 to float
  %2941 = fmul fast float %2928, %2939
  %2942 = fmul fast float %2929, %2940
  %2943 = fadd fast float %2937, %2941
  %2944 = fadd fast float %2938, %2942
  %2945 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2946 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2947 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2945, %dx.types.Handle %2946, float %2943, float %2944, float undef, float undef, i32 0, i32 0, i32 undef, float %2720)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2948 = extractvalue %dx.types.ResRet.f32 %2947, 0
  %2949 = extractvalue %dx.types.ResRet.f32 %2947, 1
  %2950 = extractvalue %dx.types.ResRet.f32 %2947, 2
  %2951 = fmul fast float %2948, %1379
  %2952 = fmul fast float %2949, %1379
  %2953 = fmul fast float %2950, %1379
  %2954 = uitofp i32 %1016 to float
  %2955 = uitofp i32 %1017 to float
  %2956 = fmul fast float %2928, %2954
  %2957 = fmul fast float %2929, %2955
  %2958 = fadd fast float %2937, %2956
  %2959 = fadd fast float %2938, %2957
  %2960 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2945, %dx.types.Handle %2946, float %2958, float %2959, float undef, float undef, i32 0, i32 0, i32 undef, float %2720)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2961 = extractvalue %dx.types.ResRet.f32 %2960, 0
  %2962 = extractvalue %dx.types.ResRet.f32 %2960, 1
  %2963 = extractvalue %dx.types.ResRet.f32 %2960, 2
  %2964 = fmul fast float %2961, %1380
  %2965 = fmul fast float %2962, %1380
  %2966 = fmul fast float %2963, %1380
  %2967 = fadd fast float %2964, %2951
  %2968 = fadd fast float %2965, %2952
  %2969 = fadd fast float %2966, %2953
  %2970 = uitofp i32 %1195 to float
  %2971 = uitofp i32 %1196 to float
  %2972 = fmul fast float %2928, %2970
  %2973 = fmul fast float %2929, %2971
  %2974 = fadd fast float %2937, %2972
  %2975 = fadd fast float %2938, %2973
  %2976 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2945, %dx.types.Handle %2946, float %2974, float %2975, float undef, float undef, i32 0, i32 0, i32 undef, float %2720)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2977 = extractvalue %dx.types.ResRet.f32 %2976, 0
  %2978 = extractvalue %dx.types.ResRet.f32 %2976, 1
  %2979 = extractvalue %dx.types.ResRet.f32 %2976, 2
  %2980 = fmul fast float %2977, %1381
  %2981 = fmul fast float %2978, %1381
  %2982 = fmul fast float %2979, %1381
  %2983 = fadd fast float %2967, %2980
  %2984 = fadd fast float %2968, %2981
  %2985 = fadd fast float %2969, %2982
  %2986 = uitofp i32 %1374 to float
  %2987 = uitofp i32 %1375 to float
  %2988 = fmul fast float %2928, %2986
  %2989 = fmul fast float %2929, %2987
  %2990 = fadd fast float %2937, %2988
  %2991 = fadd fast float %2938, %2989
  %2992 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2945, %dx.types.Handle %2946, float %2990, float %2991, float undef, float undef, i32 0, i32 0, i32 undef, float %2720)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2993 = extractvalue %dx.types.ResRet.f32 %2992, 0
  %2994 = extractvalue %dx.types.ResRet.f32 %2992, 1
  %2995 = extractvalue %dx.types.ResRet.f32 %2992, 2
  %2996 = fmul fast float %2993, %1382
  %2997 = fmul fast float %2994, %1382
  %2998 = fmul fast float %2995, %1382
  %2999 = fadd fast float %2983, %2996
  %3000 = fadd fast float %2984, %2997
  %3001 = fadd fast float %2985, %2998
  %3002 = fmul fast float %2999, %2873
  %3003 = fmul fast float %3000, %2873
  %3004 = fmul fast float %3001, %2873
  %3005 = call float @dx.op.dot3.f32(i32 55, float %3002, float %3003, float %3004, float 0x3FCB367A00000000, float 0x3FE6E2EB20000000, float 0x3FB27BB300000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3006 = fadd fast float %3005, 1.000000e+00
  %3007 = fdiv fast float %3002, %3006
  %3008 = fdiv fast float %3003, %3006
  %3009 = fdiv fast float %3004, %3006
  %3010 = fadd fast float %3007, %2722
  %3011 = fadd fast float %3008, %2723
  %3012 = fadd fast float %3009, %2724
  %3013 = add nuw nsw i32 %2725, 1
  %3014 = icmp eq i32 %3013, 4
  br i1 %3014, label %3015, label %2721

; <label>:3015                                    ; preds = %2872
  %3016 = fmul fast float %3010, 2.500000e-01
  %3017 = fmul fast float %3011, 2.500000e-01
  %3018 = fmul fast float %3012, 2.500000e-01
  %3019 = call float @dx.op.dot3.f32(i32 55, float %3016, float %3017, float %3018, float 0x3FCB367A00000000, float 0x3FE6E2EB20000000, float 0x3FB27BB300000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3020 = fsub fast float 1.000000e+00, %3019
  %3021 = fdiv fast float %3016, %3020
  %3022 = fdiv fast float %3017, %3020
  %3023 = fdiv fast float %3018, %3020
  %3024 = fsub fast float %2686, %3021
  %3025 = fsub fast float %2687, %3022
  %3026 = fsub fast float %2688, %3023
  %3027 = fmul fast float %3024, %2694
  %3028 = fmul fast float %3025, %2694
  %3029 = fmul fast float %3026, %2694
  %3030 = fadd fast float %3027, %3021
  %3031 = fadd fast float %3028, %3022
  %3032 = fadd fast float %3029, %3023
  br label %3033

; <label>:3033                                    ; preds = %3015, %2651
  %3034 = phi float [ %3030, %3015 ], [ %2686, %2651 ]
  %3035 = phi float [ %3031, %3015 ], [ %2687, %2651 ]
  %3036 = phi float [ %3032, %3015 ], [ %2688, %2651 ]
  br i1 %2708, label %3046, label %3037

; <label>:3037                                    ; preds = %3033
  %3038 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %3039 = extractvalue %dx.types.CBufRet.i32 %3038, 0
  %3040 = icmp eq i32 %3039, 0
  br i1 %3040, label %3041, label %3046

; <label>:3041                                    ; preds = %3037
  %3042 = fsub fast float 1.000000e+00, %2704
  %3043 = fmul fast float %3034, %3042
  %3044 = fmul fast float %3035, %3042
  %3045 = fmul fast float %3036, %3042
  br label %3046

; <label>:3046                                    ; preds = %3041, %3037, %3033
  %3047 = phi float [ %3034, %3033 ], [ %3043, %3041 ], [ %3034, %3037 ]
  %3048 = phi float [ %3035, %3033 ], [ %3044, %3041 ], [ %3035, %3037 ]
  %3049 = phi float [ %3036, %3033 ], [ %3045, %3041 ], [ %3036, %3037 ]
  %3050 = fadd fast float %3047, %2655
  %3051 = fadd fast float %3048, %2656
  %3052 = fadd fast float %3049, %2657
  %3053 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3053, i32 %51, i32 %53, i32 undef, float %3050, float %3051, float %3052, float %3050, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3058

; <label>:3054                                    ; preds = %181
  %3055 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3055, i32 %51, i32 %53, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3056 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3056, i32 %51, i32 %53, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3057 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3057, i32 %51, i32 %53, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3058

; <label>:3058                                    ; preds = %3054, %3046
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!39}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !28, !32, !36}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !15, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !14}
!14 = !{i32 0, i32 5}
!15 = !{i32 7, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !16}
!16 = !{i32 1, i32 4}
!17 = !{i32 8, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !14}
!18 = !{i32 9, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !14}
!19 = !{i32 10, %"class.Texture2D<float>"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{i32 12, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !14}
!22 = !{i32 13, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !14}
!24 = !{i32 15, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!26 = !{i32 17, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !7}
!27 = !{i32 18, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 18, i32 1, i32 12, i32 0, !16}
!28 = !{!29, !30, !31}
!29 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!30 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!31 = !{i32 2, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!32 = !{!33, !34, !35}
!33 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 504, null}
!34 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5484, null}
!35 = !{i32 2, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 2, i32 1, i32 44, null}
!36 = !{!37, !38}
!37 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!38 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!39 = !{void ()* @ScreenProbeIntegrateCS, !"ScreenProbeIntegrateCS", null, !4, !40}
!40 = !{i32 0, i64 16, i32 4, !41, i32 5, !42}
!41 = !{i32 8, i32 8, i32 1}
!42 = !{i32 0}
